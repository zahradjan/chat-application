export = TieredDatastore;
/**
 * @typedef {import('interface-datastore').Datastore} Datastore
 * @typedef {import('interface-datastore').Options} Options
 * @typedef {import('interface-datastore').Batch} Batch
 * @typedef {import('interface-datastore').Query} Query
 * @typedef {import('interface-datastore').KeyQuery} KeyQuery
 * @typedef {import('interface-datastore').Key} Key
 * @typedef {import('interface-datastore').Pair} Pair
 */
/**
 * @template TEntry
 * @typedef {import('interface-store').AwaitIterable<TEntry>} AwaitIterable
 */
/**
 * A datastore that can combine multiple stores. Puts and deletes
 * will write through to all datastores. Has and get will
 * try each store sequentially. Query will always try the
 * last one first.
 *
 */
declare class TieredDatastore extends Adapter {
    /**
     * @param {Datastore[]} stores
     */
    constructor(stores: Datastore[]);
    stores: import("interface-datastore/dist/src/types").Datastore[];
}
declare namespace TieredDatastore {
    export { Datastore, Options, Batch, Query, KeyQuery, Key, Pair, AwaitIterable };
}
import { Adapter } from "interface-datastore";
type Datastore = import('interface-datastore').Datastore;
type Options = import('interface-datastore').Options;
type Batch = import('interface-datastore').Batch;
type Query = import('interface-datastore').Query;
type KeyQuery = import('interface-datastore').KeyQuery;
type Key = import('interface-datastore').Key;
type Pair = import('interface-datastore').Pair;
type AwaitIterable<TEntry> = import('interface-store').AwaitIterable<TEntry>;
//# sourceMappingURL=tiered.d.ts.map