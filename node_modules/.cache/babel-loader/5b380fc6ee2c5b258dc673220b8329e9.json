{"ast":null,"code":"'use strict';\n\nvar IpnsPubsubDatastore = require('../../../ipns/routing/pubsub-datastore');\n\nvar errcode = require('err-code');\n/**\n * @typedef {import('../../../types').ExperimentalOptions} ExperimentalOptions\n * @property {boolean} [ipnsPubsub] - Enable pub-sub on IPNS. (Default: `false`)\n */\n\n/**\n * Get pubsub from IPNS routing\n *\n * @param {import('../../ipns')} ipns\n * @param {ExperimentalOptions} [options]\n */\n\n\nexports.getPubsubRouting = function (ipns, options) {\n  if (!ipns || !(options && options.ipnsPubsub)) {\n    throw errcode(new Error('IPNS pubsub subsystem is not enabled'), 'ERR_IPNS_PUBSUB_NOT_ENABLED');\n  } // Only one store and it is pubsub\n\n\n  if (ipns.routing instanceof IpnsPubsubDatastore) {\n    return ipns.routing;\n  } // Find in tiered\n\n\n  var pubsub = (ipns.routing.stores || []).find(function (s) {\n    return s instanceof IpnsPubsubDatastore;\n  });\n\n  if (!pubsub) {\n    throw errcode(new Error('IPNS pubsub datastore not found'), 'ERR_PUBSUB_DATASTORE_NOT_FOUND');\n  }\n\n  return pubsub;\n};","map":{"version":3,"names":["IpnsPubsubDatastore","require","errcode","exports","getPubsubRouting","ipns","options","ipnsPubsub","Error","routing","pubsub","stores","find","s"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/name/pubsub/utils.js"],"sourcesContent":["'use strict'\n\nconst IpnsPubsubDatastore = require('../../../ipns/routing/pubsub-datastore')\nconst errcode = require('err-code')\n\n/**\n * @typedef {import('../../../types').ExperimentalOptions} ExperimentalOptions\n * @property {boolean} [ipnsPubsub] - Enable pub-sub on IPNS. (Default: `false`)\n */\n\n/**\n * Get pubsub from IPNS routing\n *\n * @param {import('../../ipns')} ipns\n * @param {ExperimentalOptions} [options]\n */\nexports.getPubsubRouting = (ipns, options) => {\n  if (!ipns || !(options && options.ipnsPubsub)) {\n    throw errcode(new Error('IPNS pubsub subsystem is not enabled'), 'ERR_IPNS_PUBSUB_NOT_ENABLED')\n  }\n\n  // Only one store and it is pubsub\n  if (ipns.routing instanceof IpnsPubsubDatastore) {\n    return ipns.routing\n  }\n\n  // Find in tiered\n  const pubsub = (ipns.routing.stores || []).find(s => s instanceof IpnsPubsubDatastore)\n\n  if (!pubsub) {\n    throw errcode(new Error('IPNS pubsub datastore not found'), 'ERR_PUBSUB_DATASTORE_NOT_FOUND')\n  }\n\n  return pubsub\n}\n"],"mappings":"AAAA;;AAEA,IAAMA,mBAAmB,GAAGC,OAAO,CAAC,wCAAD,CAAnC;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACAE,OAAO,CAACC,gBAAR,GAA2B,UAACC,IAAD,EAAOC,OAAP,EAAmB;EAC5C,IAAI,CAACD,IAAD,IAAS,EAAEC,OAAO,IAAIA,OAAO,CAACC,UAArB,CAAb,EAA+C;IAC7C,MAAML,OAAO,CAAC,IAAIM,KAAJ,CAAU,sCAAV,CAAD,EAAoD,6BAApD,CAAb;EACD,CAH2C,CAK5C;;;EACA,IAAIH,IAAI,CAACI,OAAL,YAAwBT,mBAA5B,EAAiD;IAC/C,OAAOK,IAAI,CAACI,OAAZ;EACD,CAR2C,CAU5C;;;EACA,IAAMC,MAAM,GAAG,CAACL,IAAI,CAACI,OAAL,CAAaE,MAAb,IAAuB,EAAxB,EAA4BC,IAA5B,CAAiC,UAAAC,CAAC;IAAA,OAAIA,CAAC,YAAYb,mBAAjB;EAAA,CAAlC,CAAf;;EAEA,IAAI,CAACU,MAAL,EAAa;IACX,MAAMR,OAAO,CAAC,IAAIM,KAAJ,CAAU,iCAAV,CAAD,EAA+C,gCAA/C,CAAb;EACD;;EAED,OAAOE,MAAP;AACD,CAlBD"},"metadata":{},"sourceType":"script"}