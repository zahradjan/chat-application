{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar debug = require('debug');\n\nvar log = Object.assign(debug('libp2p:circuit'), {\n  error: debug('libp2p:circuit:err')\n});\n\nvar errCode = require('err-code');\n\nvar mafmt = require('mafmt');\n\nvar _require = require('multiaddr'),\n    Multiaddr = _require.Multiaddr;\n\nvar PeerId = require('peer-id');\n\nvar _require2 = require('./protocol'),\n    CircuitPB = _require2.CircuitRelay;\n\nvar _require3 = require('../errors'),\n    codes = _require3.codes;\n\nvar toConnection = require('libp2p-utils/src/stream-to-ma-conn');\n\nvar _require4 = require('./multicodec'),\n    multicodec = _require4.relay;\n\nvar _createListener = require('./listener');\n\nvar _require5 = require('./circuit/hop'),\n    handleCanHop = _require5.handleCanHop,\n    handleHop = _require5.handleHop,\n    hop = _require5.hop;\n\nvar _require6 = require('./circuit/stop'),\n    handleStop = _require6.handleStop;\n\nvar StreamHandler = require('./circuit/stream-handler');\n\nvar transportSymbol = Symbol.for('@libp2p/js-libp2p-circuit/circuit');\n/**\n * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection\n * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream\n */\n\nvar Circuit = /*#__PURE__*/function (_Symbol$toStringTag) {\n  /**\n   * Creates an instance of the Circuit Transport.\n   *\n   * @class\n   * @param {object} options\n   * @param {import('../')} options.libp2p\n   * @param {import('../upgrader')} options.upgrader\n   */\n  function Circuit(_ref) {\n    var libp2p = _ref.libp2p,\n        upgrader = _ref.upgrader;\n\n    _classCallCheck(this, Circuit);\n\n    this._dialer = libp2p.dialer;\n    this._registrar = libp2p.registrar;\n    this._connectionManager = libp2p.connectionManager;\n    this._upgrader = upgrader;\n    this._options = libp2p._config.relay;\n    this._libp2p = libp2p;\n    this.peerId = libp2p.peerId;\n\n    this._registrar.handle(multicodec, this._onProtocol.bind(this));\n  }\n  /**\n   * @param {Object} props\n   * @param {Connection} props.connection\n   * @param {MuxedStream} props.stream\n   */\n\n\n  _createClass(Circuit, [{\n    key: \"_onProtocol\",\n    value: function () {\n      var _onProtocol2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref2) {\n        var connection, stream, streamHandler, request, circuit, virtualConnection, remoteAddr, localAddr, maConn, type, conn;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                connection = _ref2.connection, stream = _ref2.stream;\n\n                /** @type {import('./circuit/stream-handler')} */\n                streamHandler = new StreamHandler({\n                  stream: stream\n                });\n                _context.next = 4;\n                return streamHandler.read();\n\n              case 4:\n                request = _context.sent;\n\n                if (request) {\n                  _context.next = 7;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 7:\n                circuit = this;\n                _context.t0 = request.type;\n                _context.next = _context.t0 === CircuitPB.Type.CAN_HOP ? 11 : _context.t0 === CircuitPB.Type.HOP ? 15 : _context.t0 === CircuitPB.Type.STOP ? 20 : 25;\n                break;\n\n              case 11:\n                log('received CAN_HOP request from %s', connection.remotePeer.toB58String());\n                _context.next = 14;\n                return handleCanHop({\n                  circuit: circuit,\n                  connection: connection,\n                  streamHandler: streamHandler\n                });\n\n              case 14:\n                return _context.abrupt(\"break\", 26);\n\n              case 15:\n                log('received HOP request from %s', connection.remotePeer.toB58String());\n                _context.next = 18;\n                return handleHop({\n                  connection: connection,\n                  request: request,\n                  streamHandler: streamHandler,\n                  circuit: circuit\n                });\n\n              case 18:\n                virtualConnection = _context.sent;\n                return _context.abrupt(\"break\", 26);\n\n              case 20:\n                log('received STOP request from %s', connection.remotePeer.toB58String());\n                _context.next = 23;\n                return handleStop({\n                  connection: connection,\n                  request: request,\n                  streamHandler: streamHandler\n                });\n\n              case 23:\n                virtualConnection = _context.sent;\n                return _context.abrupt(\"break\", 26);\n\n              case 25:\n                log('Request of type %s not supported', request.type);\n\n              case 26:\n                if (!virtualConnection) {\n                  _context.next = 37;\n                  break;\n                }\n\n                // @ts-ignore dst peer will not be undefined\n                remoteAddr = new Multiaddr(request.dstPeer.addrs[0]); // @ts-ignore src peer will not be undefined\n\n                localAddr = new Multiaddr(request.srcPeer.addrs[0]);\n                maConn = toConnection({\n                  stream: virtualConnection,\n                  remoteAddr: remoteAddr,\n                  localAddr: localAddr\n                });\n                type = request.type === CircuitPB.Type.HOP ? 'relay' : 'inbound';\n                log('new %s connection %s', type, maConn.remoteAddr);\n                _context.next = 34;\n                return this._upgrader.upgradeInbound(maConn);\n\n              case 34:\n                conn = _context.sent;\n                log('%s connection %s upgraded', type, maConn.remoteAddr);\n                this.handler && this.handler(conn);\n\n              case 37:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function _onProtocol(_x) {\n        return _onProtocol2.apply(this, arguments);\n      }\n\n      return _onProtocol;\n    }()\n    /**\n     * Dial a peer over a relay\n     *\n     * @param {Multiaddr} ma - the multiaddr of the peer to dial\n     * @param {Object} options - dial options\n     * @param {AbortSignal} [options.signal] - An optional abort signal\n     * @returns {Promise<Connection>} - the connection\n     */\n\n  }, {\n    key: \"dial\",\n    value: function () {\n      var _dial = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(ma, options) {\n        var addrs, relayAddr, destinationAddr, relayId, destinationId, errMsg, relayPeer, destinationPeer, disconnectOnFailure, relayConnection, virtualConnection, localAddr, maConn;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // Check the multiaddr to see if it contains a relay and a destination peer\n                addrs = ma.toString().split('/p2p-circuit');\n                relayAddr = new Multiaddr(addrs[0]);\n                destinationAddr = new Multiaddr(addrs[addrs.length - 1]);\n                relayId = relayAddr.getPeerId();\n                destinationId = destinationAddr.getPeerId();\n\n                if (!(!relayId || !destinationId)) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                errMsg = 'Circuit relay dial failed as addresses did not have peer id';\n                log.error(errMsg);\n                throw errCode(new Error(errMsg), codes.ERR_RELAYED_DIAL);\n\n              case 9:\n                relayPeer = PeerId.createFromB58String(relayId);\n                destinationPeer = PeerId.createFromB58String(destinationId);\n                disconnectOnFailure = false;\n                relayConnection = this._connectionManager.get(relayPeer);\n\n                if (relayConnection) {\n                  _context2.next = 18;\n                  break;\n                }\n\n                _context2.next = 16;\n                return this._dialer.connectToPeer(relayAddr, options);\n\n              case 16:\n                relayConnection = _context2.sent;\n                disconnectOnFailure = true;\n\n              case 18:\n                _context2.prev = 18;\n                _context2.next = 21;\n                return hop({\n                  connection: relayConnection,\n                  request: {\n                    type: CircuitPB.Type.HOP,\n                    srcPeer: {\n                      id: this.peerId.toBytes(),\n                      addrs: this._libp2p.multiaddrs.map(function (addr) {\n                        return addr.bytes;\n                      })\n                    },\n                    dstPeer: {\n                      id: destinationPeer.toBytes(),\n                      addrs: [new Multiaddr(destinationAddr).bytes]\n                    }\n                  }\n                });\n\n              case 21:\n                virtualConnection = _context2.sent;\n                localAddr = relayAddr.encapsulate(\"/p2p-circuit/p2p/\".concat(this.peerId.toB58String()));\n                maConn = toConnection({\n                  stream: virtualConnection,\n                  remoteAddr: ma,\n                  localAddr: localAddr\n                });\n                log('new outbound connection %s', maConn.remoteAddr);\n                return _context2.abrupt(\"return\", this._upgrader.upgradeOutbound(maConn));\n\n              case 28:\n                _context2.prev = 28;\n                _context2.t0 = _context2[\"catch\"](18);\n                log.error('Circuit relay dial failed', _context2.t0);\n                _context2.t1 = disconnectOnFailure;\n\n                if (!_context2.t1) {\n                  _context2.next = 35;\n                  break;\n                }\n\n                _context2.next = 35;\n                return relayConnection.close();\n\n              case 35:\n                throw _context2.t0;\n\n              case 36:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[18, 28]]);\n      }));\n\n      function dial(_x2, _x3) {\n        return _dial.apply(this, arguments);\n      }\n\n      return dial;\n    }()\n    /**\n     * Create a listener\n     *\n     * @param {any} options\n     * @param {Function} handler\n     * @returns {import('libp2p-interfaces/src/transport/types').Listener}\n     */\n\n  }, {\n    key: \"createListener\",\n    value: function createListener(options, handler) {\n      if (typeof options === 'function') {\n        handler = options;\n        options = {};\n      } // Called on successful HOP and STOP requests\n\n\n      this.handler = handler;\n      return _createListener(this._libp2p);\n    }\n    /**\n     * Filter check for all Multiaddrs that this transport can dial on\n     *\n     * @param {Multiaddr[]} multiaddrs\n     * @returns {Multiaddr[]}\n     */\n\n  }, {\n    key: \"filter\",\n    value: function filter(multiaddrs) {\n      multiaddrs = Array.isArray(multiaddrs) ? multiaddrs : [multiaddrs];\n      return multiaddrs.filter(function (ma) {\n        return mafmt.Circuit.matches(ma);\n      });\n    }\n  }, {\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return 'Circuit';\n    }\n    /**\n     * Checks if the given value is a Transport instance.\n     *\n     * @param {any} other\n     * @returns {other is Transport}\n     */\n\n  }], [{\n    key: \"isTransport\",\n    value: function isTransport(other) {\n      return Boolean(other && other[transportSymbol]);\n    }\n  }]);\n\n  return Circuit;\n}(Symbol.toStringTag);\n\nmodule.exports = Circuit;","map":{"version":3,"names":["debug","require","log","Object","assign","error","errCode","mafmt","Multiaddr","PeerId","CircuitPB","CircuitRelay","codes","toConnection","multicodec","relay","createListener","handleCanHop","handleHop","hop","handleStop","StreamHandler","transportSymbol","Symbol","for","Circuit","libp2p","upgrader","_dialer","dialer","_registrar","registrar","_connectionManager","connectionManager","_upgrader","_options","_config","_libp2p","peerId","handle","_onProtocol","bind","connection","stream","streamHandler","read","request","circuit","type","Type","CAN_HOP","HOP","STOP","remotePeer","toB58String","virtualConnection","remoteAddr","dstPeer","addrs","localAddr","srcPeer","maConn","upgradeInbound","conn","handler","ma","options","toString","split","relayAddr","destinationAddr","length","relayId","getPeerId","destinationId","errMsg","Error","ERR_RELAYED_DIAL","relayPeer","createFromB58String","destinationPeer","disconnectOnFailure","relayConnection","get","connectToPeer","id","toBytes","multiaddrs","map","addr","bytes","encapsulate","upgradeOutbound","close","Array","isArray","filter","matches","other","Boolean","toStringTag","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p/src/circuit/transport.js"],"sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = Object.assign(debug('libp2p:circuit'), {\n  error: debug('libp2p:circuit:err')\n})\n\nconst errCode = require('err-code')\nconst mafmt = require('mafmt')\nconst { Multiaddr } = require('multiaddr')\nconst PeerId = require('peer-id')\nconst { CircuitRelay: CircuitPB } = require('./protocol')\nconst { codes } = require('../errors')\n\nconst toConnection = require('libp2p-utils/src/stream-to-ma-conn')\n\nconst { relay: multicodec } = require('./multicodec')\nconst createListener = require('./listener')\nconst { handleCanHop, handleHop, hop } = require('./circuit/hop')\nconst { handleStop } = require('./circuit/stop')\nconst StreamHandler = require('./circuit/stream-handler')\n\nconst transportSymbol = Symbol.for('@libp2p/js-libp2p-circuit/circuit')\n\n/**\n * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection\n * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream\n */\n\nclass Circuit {\n  /**\n   * Creates an instance of the Circuit Transport.\n   *\n   * @class\n   * @param {object} options\n   * @param {import('../')} options.libp2p\n   * @param {import('../upgrader')} options.upgrader\n   */\n  constructor ({ libp2p, upgrader }) {\n    this._dialer = libp2p.dialer\n    this._registrar = libp2p.registrar\n    this._connectionManager = libp2p.connectionManager\n    this._upgrader = upgrader\n    this._options = libp2p._config.relay\n    this._libp2p = libp2p\n    this.peerId = libp2p.peerId\n\n    this._registrar.handle(multicodec, this._onProtocol.bind(this))\n  }\n\n  /**\n   * @param {Object} props\n   * @param {Connection} props.connection\n   * @param {MuxedStream} props.stream\n   */\n  async _onProtocol ({ connection, stream }) {\n    /** @type {import('./circuit/stream-handler')} */\n    const streamHandler = new StreamHandler({ stream })\n    const request = await streamHandler.read()\n\n    if (!request) {\n      return\n    }\n\n    const circuit = this\n    let virtualConnection\n\n    switch (request.type) {\n      case CircuitPB.Type.CAN_HOP: {\n        log('received CAN_HOP request from %s', connection.remotePeer.toB58String())\n        await handleCanHop({ circuit, connection, streamHandler })\n        break\n      }\n      case CircuitPB.Type.HOP: {\n        log('received HOP request from %s', connection.remotePeer.toB58String())\n        virtualConnection = await handleHop({\n          connection,\n          request,\n          streamHandler,\n          circuit\n        })\n        break\n      }\n      case CircuitPB.Type.STOP: {\n        log('received STOP request from %s', connection.remotePeer.toB58String())\n        virtualConnection = await handleStop({\n          connection,\n          request,\n          streamHandler\n        })\n        break\n      }\n      default: {\n        log('Request of type %s not supported', request.type)\n      }\n    }\n\n    if (virtualConnection) {\n      // @ts-ignore dst peer will not be undefined\n      const remoteAddr = new Multiaddr(request.dstPeer.addrs[0])\n      // @ts-ignore src peer will not be undefined\n      const localAddr = new Multiaddr(request.srcPeer.addrs[0])\n      const maConn = toConnection({\n        stream: virtualConnection,\n        remoteAddr,\n        localAddr\n      })\n      const type = request.type === CircuitPB.Type.HOP ? 'relay' : 'inbound'\n      log('new %s connection %s', type, maConn.remoteAddr)\n\n      const conn = await this._upgrader.upgradeInbound(maConn)\n      log('%s connection %s upgraded', type, maConn.remoteAddr)\n      this.handler && this.handler(conn)\n    }\n  }\n\n  /**\n   * Dial a peer over a relay\n   *\n   * @param {Multiaddr} ma - the multiaddr of the peer to dial\n   * @param {Object} options - dial options\n   * @param {AbortSignal} [options.signal] - An optional abort signal\n   * @returns {Promise<Connection>} - the connection\n   */\n  async dial (ma, options) {\n    // Check the multiaddr to see if it contains a relay and a destination peer\n    const addrs = ma.toString().split('/p2p-circuit')\n    const relayAddr = new Multiaddr(addrs[0])\n    const destinationAddr = new Multiaddr(addrs[addrs.length - 1])\n    const relayId = relayAddr.getPeerId()\n    const destinationId = destinationAddr.getPeerId()\n\n    if (!relayId || !destinationId) {\n      const errMsg = 'Circuit relay dial failed as addresses did not have peer id'\n      log.error(errMsg)\n      throw errCode(new Error(errMsg), codes.ERR_RELAYED_DIAL)\n    }\n\n    const relayPeer = PeerId.createFromB58String(relayId)\n    const destinationPeer = PeerId.createFromB58String(destinationId)\n\n    let disconnectOnFailure = false\n    let relayConnection = this._connectionManager.get(relayPeer)\n    if (!relayConnection) {\n      relayConnection = await this._dialer.connectToPeer(relayAddr, options)\n      disconnectOnFailure = true\n    }\n\n    try {\n      const virtualConnection = await hop({\n        connection: relayConnection,\n        request: {\n          type: CircuitPB.Type.HOP,\n          srcPeer: {\n            id: this.peerId.toBytes(),\n            addrs: this._libp2p.multiaddrs.map(addr => addr.bytes)\n          },\n          dstPeer: {\n            id: destinationPeer.toBytes(),\n            addrs: [new Multiaddr(destinationAddr).bytes]\n          }\n        }\n      })\n\n      const localAddr = relayAddr.encapsulate(`/p2p-circuit/p2p/${this.peerId.toB58String()}`)\n      const maConn = toConnection({\n        stream: virtualConnection,\n        remoteAddr: ma,\n        localAddr\n      })\n      log('new outbound connection %s', maConn.remoteAddr)\n\n      return this._upgrader.upgradeOutbound(maConn)\n    } catch (err) {\n      log.error('Circuit relay dial failed', err)\n      disconnectOnFailure && await relayConnection.close()\n      throw err\n    }\n  }\n\n  /**\n   * Create a listener\n   *\n   * @param {any} options\n   * @param {Function} handler\n   * @returns {import('libp2p-interfaces/src/transport/types').Listener}\n   */\n  createListener (options, handler) {\n    if (typeof options === 'function') {\n      handler = options\n      options = {}\n    }\n\n    // Called on successful HOP and STOP requests\n    this.handler = handler\n\n    return createListener(this._libp2p)\n  }\n\n  /**\n   * Filter check for all Multiaddrs that this transport can dial on\n   *\n   * @param {Multiaddr[]} multiaddrs\n   * @returns {Multiaddr[]}\n   */\n  filter (multiaddrs) {\n    multiaddrs = Array.isArray(multiaddrs) ? multiaddrs : [multiaddrs]\n\n    return multiaddrs.filter((ma) => {\n      return mafmt.Circuit.matches(ma)\n    })\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'Circuit'\n  }\n\n  /**\n   * Checks if the given value is a Transport instance.\n   *\n   * @param {any} other\n   * @returns {other is Transport}\n   */\n  static isTransport (other) {\n    return Boolean(other && other[transportSymbol])\n  }\n}\n\nmodule.exports = Circuit\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}