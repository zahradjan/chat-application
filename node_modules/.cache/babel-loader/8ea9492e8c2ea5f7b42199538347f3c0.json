{"ast":null,"code":"'use strict';\n\nconst Reader = require('it-reader');\n\nconst Writer = require('it-pushable');\n\nconst defer = require('p-defer'); // Convert a duplex stream into a reader and writer and rest stream\n\n\nmodule.exports = stream => {\n  const writer = Writer(); // Write bytes on demand to the sink\n\n  const reader = Reader(stream.source); // Read bytes on demand from the source\n  // Waits for a source to be passed to the rest stream's sink\n\n  const sourcePromise = defer();\n  let sinkErr;\n  const sinkPromise = stream.sink(async function* () {\n    yield* writer;\n    const source = await sourcePromise.promise;\n    yield* source;\n  }());\n  sinkPromise.catch(err => {\n    sinkErr = err;\n  });\n  const rest = {\n    sink: source => {\n      if (sinkErr) {\n        return Promise.reject(sinkErr);\n      }\n\n      sourcePromise.resolve(source);\n      return sinkPromise;\n    },\n    source: reader\n  };\n  return {\n    reader,\n    writer,\n    stream: rest,\n    rest: () => writer.end(),\n    write: writer.push,\n    read: async () => {\n      return (await reader.next()).value;\n    }\n  };\n};","map":{"version":3,"names":["Reader","require","Writer","defer","module","exports","stream","writer","reader","source","sourcePromise","sinkErr","sinkPromise","sink","promise","catch","err","rest","Promise","reject","resolve","end","write","push","read","next","value"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/it-handshake/src/index.js"],"sourcesContent":["'use strict'\n\nconst Reader = require('it-reader')\nconst Writer = require('it-pushable')\nconst defer = require('p-defer')\n\n// Convert a duplex stream into a reader and writer and rest stream\nmodule.exports = stream => {\n  const writer = Writer() // Write bytes on demand to the sink\n  const reader = Reader(stream.source) // Read bytes on demand from the source\n\n  // Waits for a source to be passed to the rest stream's sink\n  const sourcePromise = defer()\n  let sinkErr\n\n  const sinkPromise = stream.sink((async function * () {\n    yield * writer\n    const source = await sourcePromise.promise\n    yield * source\n  })())\n\n  sinkPromise.catch(err => {\n    sinkErr = err\n  })\n\n  const rest = {\n    sink: source => {\n      if (sinkErr) {\n        return Promise.reject(sinkErr)\n      }\n\n      sourcePromise.resolve(source)\n      return sinkPromise\n    },\n    source: reader\n  }\n\n  return {\n    reader,\n    writer,\n    stream: rest,\n    rest: () => writer.end(),\n    write: writer.push,\n    read: async () => {\n      return (await reader.next()).value\n    }\n  }\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,aAAD,CAAtB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,SAAD,CAArB,C,CAEA;;;AACAG,MAAM,CAACC,OAAP,GAAiBC,MAAM,IAAI;EACzB,MAAMC,MAAM,GAAGL,MAAM,EAArB,CADyB,CACD;;EACxB,MAAMM,MAAM,GAAGR,MAAM,CAACM,MAAM,CAACG,MAAR,CAArB,CAFyB,CAEY;EAErC;;EACA,MAAMC,aAAa,GAAGP,KAAK,EAA3B;EACA,IAAIQ,OAAJ;EAEA,MAAMC,WAAW,GAAGN,MAAM,CAACO,IAAP,CAAa,mBAAoB;IACnD,OAAQN,MAAR;IACA,MAAME,MAAM,GAAG,MAAMC,aAAa,CAACI,OAAnC;IACA,OAAQL,MAAR;EACD,CAJ+B,EAAZ,CAApB;EAMAG,WAAW,CAACG,KAAZ,CAAkBC,GAAG,IAAI;IACvBL,OAAO,GAAGK,GAAV;EACD,CAFD;EAIA,MAAMC,IAAI,GAAG;IACXJ,IAAI,EAAEJ,MAAM,IAAI;MACd,IAAIE,OAAJ,EAAa;QACX,OAAOO,OAAO,CAACC,MAAR,CAAeR,OAAf,CAAP;MACD;;MAEDD,aAAa,CAACU,OAAd,CAAsBX,MAAtB;MACA,OAAOG,WAAP;IACD,CARU;IASXH,MAAM,EAAED;EATG,CAAb;EAYA,OAAO;IACLA,MADK;IAELD,MAFK;IAGLD,MAAM,EAAEW,IAHH;IAILA,IAAI,EAAE,MAAMV,MAAM,CAACc,GAAP,EAJP;IAKLC,KAAK,EAAEf,MAAM,CAACgB,IALT;IAMLC,IAAI,EAAE,YAAY;MAChB,OAAO,CAAC,MAAMhB,MAAM,CAACiB,IAAP,EAAP,EAAsBC,KAA7B;IACD;EARI,CAAP;AAUD,CAxCD"},"metadata":{},"sourceType":"script"}