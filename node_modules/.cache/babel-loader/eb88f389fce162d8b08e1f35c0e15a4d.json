{"ast":null,"code":"'use strict';\n/**\n * Convert a JavaScript date into an `RFC3339Nano` formatted\n * string.\n *\n * @param {Date} time\n */\n\nmodule.exports.toRFC3339 = function (time) {\n  var year = time.getUTCFullYear();\n  var month = String(time.getUTCMonth() + 1).padStart(2, '0');\n  var day = String(time.getUTCDate()).padStart(2, '0');\n  var hour = String(time.getUTCHours()).padStart(2, '0');\n  var minute = String(time.getUTCMinutes()).padStart(2, '0');\n  var seconds = String(time.getUTCSeconds()).padStart(2, '0');\n  var milliseconds = time.getUTCMilliseconds();\n  var nanoseconds = milliseconds * 1000 * 1000;\n  return \"\".concat(year, \"-\").concat(month, \"-\").concat(day, \"T\").concat(hour, \":\").concat(minute, \":\").concat(seconds, \".\").concat(nanoseconds, \"Z\");\n};\n/**\n * Parses a date string formatted as `RFC3339Nano` into a\n * JavaScript Date object.\n *\n * @param {string} time\n */\n\n\nmodule.exports.parseRFC3339 = function (time) {\n  var rfc3339Matcher = new RegExp( // 2006-01-02T\n  '(\\\\d{4})-(\\\\d{2})-(\\\\d{2})T' + // 15:04:05\n  '(\\\\d{2}):(\\\\d{2}):(\\\\d{2})' + // .999999999Z\n  '\\\\.(\\\\d+)Z');\n  var m = String(time).trim().match(rfc3339Matcher);\n\n  if (!m) {\n    throw new Error('Invalid format');\n  }\n\n  var year = parseInt(m[1], 10);\n  var month = parseInt(m[2], 10) - 1;\n  var date = parseInt(m[3], 10);\n  var hour = parseInt(m[4], 10);\n  var minute = parseInt(m[5], 10);\n  var second = parseInt(m[6], 10);\n  var millisecond = parseInt(m[7].slice(0, -6), 10);\n  return new Date(Date.UTC(year, month, date, hour, minute, second, millisecond));\n};","map":{"version":3,"names":["module","exports","toRFC3339","time","year","getUTCFullYear","month","String","getUTCMonth","padStart","day","getUTCDate","hour","getUTCHours","minute","getUTCMinutes","seconds","getUTCSeconds","milliseconds","getUTCMilliseconds","nanoseconds","parseRFC3339","rfc3339Matcher","RegExp","m","trim","match","Error","parseInt","date","second","millisecond","slice","Date","UTC"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipns/src/utils.js"],"sourcesContent":["'use strict'\n\n/**\n * Convert a JavaScript date into an `RFC3339Nano` formatted\n * string.\n *\n * @param {Date} time\n */\nmodule.exports.toRFC3339 = (time) => {\n  const year = time.getUTCFullYear()\n  const month = String(time.getUTCMonth() + 1).padStart(2, '0')\n  const day = String(time.getUTCDate()).padStart(2, '0')\n  const hour = String(time.getUTCHours()).padStart(2, '0')\n  const minute = String(time.getUTCMinutes()).padStart(2, '0')\n  const seconds = String(time.getUTCSeconds()).padStart(2, '0')\n  const milliseconds = time.getUTCMilliseconds()\n  const nanoseconds = milliseconds * 1000 * 1000\n\n  return `${year}-${month}-${day}T${hour}:${minute}:${seconds}.${nanoseconds}Z`\n}\n\n/**\n * Parses a date string formatted as `RFC3339Nano` into a\n * JavaScript Date object.\n *\n * @param {string} time\n */\nmodule.exports.parseRFC3339 = (time) => {\n  const rfc3339Matcher = new RegExp(\n    // 2006-01-02T\n    '(\\\\d{4})-(\\\\d{2})-(\\\\d{2})T' +\n    // 15:04:05\n    '(\\\\d{2}):(\\\\d{2}):(\\\\d{2})' +\n    // .999999999Z\n    '\\\\.(\\\\d+)Z'\n  )\n  const m = String(time).trim().match(rfc3339Matcher)\n\n  if (!m) {\n    throw new Error('Invalid format')\n  }\n\n  const year = parseInt(m[1], 10)\n  const month = parseInt(m[2], 10) - 1\n  const date = parseInt(m[3], 10)\n  const hour = parseInt(m[4], 10)\n  const minute = parseInt(m[5], 10)\n  const second = parseInt(m[6], 10)\n  const millisecond = parseInt(m[7].slice(0, -6), 10)\n\n  return new Date(Date.UTC(year, month, date, hour, minute, second, millisecond))\n}\n"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,OAAP,CAAeC,SAAf,GAA2B,UAACC,IAAD,EAAU;EACnC,IAAMC,IAAI,GAAGD,IAAI,CAACE,cAAL,EAAb;EACA,IAAMC,KAAK,GAAGC,MAAM,CAACJ,IAAI,CAACK,WAAL,KAAqB,CAAtB,CAAN,CAA+BC,QAA/B,CAAwC,CAAxC,EAA2C,GAA3C,CAAd;EACA,IAAMC,GAAG,GAAGH,MAAM,CAACJ,IAAI,CAACQ,UAAL,EAAD,CAAN,CAA0BF,QAA1B,CAAmC,CAAnC,EAAsC,GAAtC,CAAZ;EACA,IAAMG,IAAI,GAAGL,MAAM,CAACJ,IAAI,CAACU,WAAL,EAAD,CAAN,CAA2BJ,QAA3B,CAAoC,CAApC,EAAuC,GAAvC,CAAb;EACA,IAAMK,MAAM,GAAGP,MAAM,CAACJ,IAAI,CAACY,aAAL,EAAD,CAAN,CAA6BN,QAA7B,CAAsC,CAAtC,EAAyC,GAAzC,CAAf;EACA,IAAMO,OAAO,GAAGT,MAAM,CAACJ,IAAI,CAACc,aAAL,EAAD,CAAN,CAA6BR,QAA7B,CAAsC,CAAtC,EAAyC,GAAzC,CAAhB;EACA,IAAMS,YAAY,GAAGf,IAAI,CAACgB,kBAAL,EAArB;EACA,IAAMC,WAAW,GAAGF,YAAY,GAAG,IAAf,GAAsB,IAA1C;EAEA,iBAAUd,IAAV,cAAkBE,KAAlB,cAA2BI,GAA3B,cAAkCE,IAAlC,cAA0CE,MAA1C,cAAoDE,OAApD,cAA+DI,WAA/D;AACD,CAXD;AAaA;AACA;AACA;AACA;AACA;AACA;;;AACApB,MAAM,CAACC,OAAP,CAAeoB,YAAf,GAA8B,UAAClB,IAAD,EAAU;EACtC,IAAMmB,cAAc,GAAG,IAAIC,MAAJ,EACrB;EACA,gCACA;EACA,4BAFA,GAGA;EACA,YANqB,CAAvB;EAQA,IAAMC,CAAC,GAAGjB,MAAM,CAACJ,IAAD,CAAN,CAAasB,IAAb,GAAoBC,KAApB,CAA0BJ,cAA1B,CAAV;;EAEA,IAAI,CAACE,CAAL,EAAQ;IACN,MAAM,IAAIG,KAAJ,CAAU,gBAAV,CAAN;EACD;;EAED,IAAMvB,IAAI,GAAGwB,QAAQ,CAACJ,CAAC,CAAC,CAAD,CAAF,EAAO,EAAP,CAArB;EACA,IAAMlB,KAAK,GAAGsB,QAAQ,CAACJ,CAAC,CAAC,CAAD,CAAF,EAAO,EAAP,CAAR,GAAqB,CAAnC;EACA,IAAMK,IAAI,GAAGD,QAAQ,CAACJ,CAAC,CAAC,CAAD,CAAF,EAAO,EAAP,CAArB;EACA,IAAMZ,IAAI,GAAGgB,QAAQ,CAACJ,CAAC,CAAC,CAAD,CAAF,EAAO,EAAP,CAArB;EACA,IAAMV,MAAM,GAAGc,QAAQ,CAACJ,CAAC,CAAC,CAAD,CAAF,EAAO,EAAP,CAAvB;EACA,IAAMM,MAAM,GAAGF,QAAQ,CAACJ,CAAC,CAAC,CAAD,CAAF,EAAO,EAAP,CAAvB;EACA,IAAMO,WAAW,GAAGH,QAAQ,CAACJ,CAAC,CAAC,CAAD,CAAD,CAAKQ,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAD,EAAoB,EAApB,CAA5B;EAEA,OAAO,IAAIC,IAAJ,CAASA,IAAI,CAACC,GAAL,CAAS9B,IAAT,EAAeE,KAAf,EAAsBuB,IAAtB,EAA4BjB,IAA5B,EAAkCE,MAAlC,EAA0CgB,MAA1C,EAAkDC,WAAlD,CAAT,CAAP;AACD,CAxBD"},"metadata":{},"sourceType":"script"}