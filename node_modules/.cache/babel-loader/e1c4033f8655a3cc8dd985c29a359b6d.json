{"ast":null,"code":"var EventEmitter = require('events').EventEmitter;\n\nvar _require = require('nanoid'),\n    nanoid = _require.nanoid;\n\nvar _require2 = require('./constants'),\n    WORKER_REQUEST_READ_LOCK = _require2.WORKER_REQUEST_READ_LOCK,\n    WORKER_RELEASE_READ_LOCK = _require2.WORKER_RELEASE_READ_LOCK,\n    MASTER_GRANT_READ_LOCK = _require2.MASTER_GRANT_READ_LOCK,\n    WORKER_REQUEST_WRITE_LOCK = _require2.WORKER_REQUEST_WRITE_LOCK,\n    WORKER_RELEASE_WRITE_LOCK = _require2.WORKER_RELEASE_WRITE_LOCK,\n    MASTER_GRANT_WRITE_LOCK = _require2.MASTER_GRANT_WRITE_LOCK;\n\nvar observer = require('observable-webworkers');\n\nvar handleWorkerLockRequest = function handleWorkerLockRequest(emitter, masterEvent, requestType, releaseType, grantType) {\n  return function (worker, event) {\n    if (!event || !event.data || event.data.type !== requestType) {\n      return;\n    }\n\n    var requestEvent = {\n      type: event.data.type,\n      name: event.data.name,\n      identifier: event.data.identifier\n    };\n    emitter.emit(masterEvent, requestEvent.name, function () {\n      // grant lock to worker\n      worker.postMessage({\n        type: grantType,\n        name: requestEvent.name,\n        identifier: requestEvent.identifier\n      }); // wait for worker to finish\n\n      return new Promise(function (resolve) {\n        var releaseEventListener = function releaseEventListener(event) {\n          if (!event || !event.data) {\n            return;\n          }\n\n          var releaseEvent = {\n            type: event.data.type,\n            name: event.data.name,\n            identifier: event.data.identifier\n          };\n\n          if (releaseEvent && releaseEvent.type === releaseType && releaseEvent.identifier === requestEvent.identifier) {\n            worker.removeEventListener('message', releaseEventListener);\n            resolve();\n          }\n        };\n\n        worker.addEventListener('message', releaseEventListener);\n      });\n    });\n  };\n};\n\nvar makeWorkerLockRequest = function makeWorkerLockRequest(name, requestType, grantType, releaseType) {\n  return function () {\n    var id = nanoid();\n    globalThis.postMessage({\n      type: requestType,\n      identifier: id,\n      name: name\n    });\n    return new Promise(function (resolve) {\n      var listener = function listener(event) {\n        if (!event || !event.data) {\n          return;\n        }\n\n        var responseEvent = {\n          type: event.data.type,\n          identifier: event.data.identifier\n        };\n\n        if (responseEvent && responseEvent.type === grantType && responseEvent.identifier === id) {\n          globalThis.removeEventListener('message', listener); // grant lock\n\n          resolve(function () {\n            // release lock\n            globalThis.postMessage({\n              type: releaseType,\n              identifier: id,\n              name: name\n            });\n          });\n        }\n      };\n\n      globalThis.addEventListener('message', listener);\n    });\n  };\n};\n\nvar defaultOptions = {\n  singleProcess: false\n};\n\nmodule.exports = function (options) {\n  options = Object.assign({}, defaultOptions, options);\n  var isMaster = !!globalThis.document || options.singleProcess;\n\n  if (isMaster) {\n    var emitter = new EventEmitter();\n    observer.addEventListener('message', handleWorkerLockRequest(emitter, 'requestReadLock', WORKER_REQUEST_READ_LOCK, WORKER_RELEASE_READ_LOCK, MASTER_GRANT_READ_LOCK));\n    observer.addEventListener('message', handleWorkerLockRequest(emitter, 'requestWriteLock', WORKER_REQUEST_WRITE_LOCK, WORKER_RELEASE_WRITE_LOCK, MASTER_GRANT_WRITE_LOCK));\n    return emitter;\n  }\n\n  return {\n    isWorker: true,\n    readLock: function readLock(name) {\n      return makeWorkerLockRequest(name, WORKER_REQUEST_READ_LOCK, MASTER_GRANT_READ_LOCK, WORKER_RELEASE_READ_LOCK);\n    },\n    writeLock: function writeLock(name) {\n      return makeWorkerLockRequest(name, WORKER_REQUEST_WRITE_LOCK, MASTER_GRANT_WRITE_LOCK, WORKER_RELEASE_WRITE_LOCK);\n    }\n  };\n};","map":{"version":3,"names":["EventEmitter","require","nanoid","WORKER_REQUEST_READ_LOCK","WORKER_RELEASE_READ_LOCK","MASTER_GRANT_READ_LOCK","WORKER_REQUEST_WRITE_LOCK","WORKER_RELEASE_WRITE_LOCK","MASTER_GRANT_WRITE_LOCK","observer","handleWorkerLockRequest","emitter","masterEvent","requestType","releaseType","grantType","worker","event","data","type","requestEvent","name","identifier","emit","postMessage","Promise","resolve","releaseEventListener","releaseEvent","removeEventListener","addEventListener","makeWorkerLockRequest","id","globalThis","listener","responseEvent","defaultOptions","singleProcess","module","exports","options","Object","assign","isMaster","document","isWorker","readLock","writeLock"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/mortice/lib/browser.js"],"sourcesContent":["const EventEmitter = require('events').EventEmitter\nconst { nanoid } = require('nanoid')\nconst {\n  WORKER_REQUEST_READ_LOCK,\n  WORKER_RELEASE_READ_LOCK,\n  MASTER_GRANT_READ_LOCK,\n  WORKER_REQUEST_WRITE_LOCK,\n  WORKER_RELEASE_WRITE_LOCK,\n  MASTER_GRANT_WRITE_LOCK\n} = require('./constants')\nconst observer = require('observable-webworkers')\n\nconst handleWorkerLockRequest = (emitter, masterEvent, requestType, releaseType, grantType) => {\n  return (worker, event) => {\n    if (!event || !event.data || event.data.type !== requestType) {\n      return\n    }\n\n    const requestEvent = {\n      type: event.data.type,\n      name: event.data.name,\n      identifier: event.data.identifier\n    }\n\n    emitter.emit(masterEvent, requestEvent.name, () => {\n      // grant lock to worker\n      worker.postMessage({\n        type: grantType,\n        name: requestEvent.name,\n        identifier: requestEvent.identifier\n      })\n\n      // wait for worker to finish\n      return new Promise((resolve) => {\n        const releaseEventListener = (event) => {\n          if (!event || !event.data) {\n            return\n          }\n\n          const releaseEvent = {\n            type: event.data.type,\n            name: event.data.name,\n            identifier: event.data.identifier\n          }\n\n          if (releaseEvent && releaseEvent.type === releaseType && releaseEvent.identifier === requestEvent.identifier) {\n            worker.removeEventListener('message', releaseEventListener)\n            resolve()\n          }\n        }\n\n        worker.addEventListener('message', releaseEventListener)\n      })\n    })\n  }\n}\n\nconst makeWorkerLockRequest = (name, requestType, grantType, releaseType) => {\n  return () => {\n    const id = nanoid()\n\n    globalThis.postMessage({\n      type: requestType,\n      identifier: id,\n      name\n    })\n\n    return new Promise((resolve) => {\n      const listener = (event) => {\n        if (!event || !event.data) {\n          return\n        }\n\n        const responseEvent = {\n          type: event.data.type,\n          identifier: event.data.identifier\n        }\n\n        if (responseEvent && responseEvent.type === grantType && responseEvent.identifier === id) {\n          globalThis.removeEventListener('message', listener)\n\n          // grant lock\n          resolve(() => {\n            // release lock\n            globalThis.postMessage({\n              type: releaseType,\n              identifier: id,\n              name\n            })\n          })\n        }\n      }\n\n      globalThis.addEventListener('message', listener)\n    })\n  }\n}\n\nconst defaultOptions = {\n  singleProcess: false\n}\n\nmodule.exports = (options) => {\n  options = Object.assign({}, defaultOptions, options)\n  const isMaster = !!globalThis.document || options.singleProcess\n\n  if (isMaster) {\n    const emitter = new EventEmitter()\n\n    observer.addEventListener('message', handleWorkerLockRequest(emitter, 'requestReadLock', WORKER_REQUEST_READ_LOCK, WORKER_RELEASE_READ_LOCK, MASTER_GRANT_READ_LOCK))\n    observer.addEventListener('message', handleWorkerLockRequest(emitter, 'requestWriteLock', WORKER_REQUEST_WRITE_LOCK, WORKER_RELEASE_WRITE_LOCK, MASTER_GRANT_WRITE_LOCK))\n\n    return emitter\n  }\n\n  return {\n    isWorker: true,\n    readLock: (name) => makeWorkerLockRequest(name, WORKER_REQUEST_READ_LOCK, MASTER_GRANT_READ_LOCK, WORKER_RELEASE_READ_LOCK),\n    writeLock: (name) => makeWorkerLockRequest(name, WORKER_REQUEST_WRITE_LOCK, MASTER_GRANT_WRITE_LOCK, WORKER_RELEASE_WRITE_LOCK)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}