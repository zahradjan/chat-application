{"ast":null,"code":"'use strict';\n\nconst abortable = require('abortable-iterator');\n\nconst {\n  CLOSE_TIMEOUT\n} = require('./constants');\n\nconst toMultiaddr = require('libp2p-utils/src/ip-port-to-multiaddr');\n\nconst pTimeout = require('p-timeout');\n\nconst debug = require('debug');\n\nconst log = debug('libp2p:websockets:socket');\nlog.error = debug('libp2p:websockets:socket:error'); // Convert a stream into a MultiaddrConnection\n// https://github.com/libp2p/interface-transport#multiaddrconnection\n\nmodule.exports = function (stream) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const maConn = {\n    async sink(source) {\n      if (options.signal) {\n        source = abortable(source, options.signal);\n      }\n\n      try {\n        await stream.sink(async function* () {\n          for await (const chunk of source) {\n            // Convert BufferList to Buffer\n            yield chunk instanceof Uint8Array ? chunk : chunk.slice();\n          }\n        }());\n      } catch (err) {\n        if (err.type !== 'aborted') {\n          log.error(err);\n        }\n      }\n    },\n\n    source: options.signal ? abortable(stream.source, options.signal) : stream.source,\n    conn: stream,\n    localAddr: options.localAddr || (stream.localAddress && stream.localPort ? toMultiaddr(stream.localAddress, stream.localPort) : undefined),\n    // If the remote address was passed, use it - it may have the peer ID encapsulated\n    remoteAddr: options.remoteAddr || toMultiaddr(stream.remoteAddress, stream.remotePort),\n    timeline: {\n      open: Date.now()\n    },\n\n    async close() {\n      const start = Date.now();\n\n      try {\n        await pTimeout(stream.close(), CLOSE_TIMEOUT);\n      } catch (err) {\n        const {\n          host,\n          port\n        } = maConn.remoteAddr.toOptions();\n        log('timeout closing stream to %s:%s after %dms, destroying it manually', host, port, Date.now() - start);\n        stream.destroy();\n      } finally {\n        maConn.timeline.close = Date.now();\n      }\n    }\n\n  };\n  stream.socket.once && stream.socket.once('close', () => {\n    // In instances where `close` was not explicitly called,\n    // such as an iterable stream ending, ensure we have set the close\n    // timeline\n    if (!maConn.timeline.close) {\n      maConn.timeline.close = Date.now();\n    }\n  });\n  return maConn;\n};","map":{"version":3,"names":["abortable","require","CLOSE_TIMEOUT","toMultiaddr","pTimeout","debug","log","error","module","exports","stream","options","maConn","sink","source","signal","chunk","Uint8Array","slice","err","type","conn","localAddr","localAddress","localPort","undefined","remoteAddr","remoteAddress","remotePort","timeline","open","Date","now","close","start","host","port","toOptions","destroy","socket","once"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-websockets/src/socket-to-conn.js"],"sourcesContent":["'use strict'\n\nconst abortable = require('abortable-iterator')\nconst { CLOSE_TIMEOUT } = require('./constants')\nconst toMultiaddr = require('libp2p-utils/src/ip-port-to-multiaddr')\n\nconst pTimeout = require('p-timeout')\n\nconst debug = require('debug')\nconst log = debug('libp2p:websockets:socket')\nlog.error = debug('libp2p:websockets:socket:error')\n\n// Convert a stream into a MultiaddrConnection\n// https://github.com/libp2p/interface-transport#multiaddrconnection\nmodule.exports = (stream, options = {}) => {\n  const maConn = {\n    async sink (source) {\n      if (options.signal) {\n        source = abortable(source, options.signal)\n      }\n\n      try {\n        await stream.sink((async function * () {\n          for await (const chunk of source) {\n            // Convert BufferList to Buffer\n            yield chunk instanceof Uint8Array ? chunk : chunk.slice()\n          }\n        })())\n      } catch (err) {\n        if (err.type !== 'aborted') {\n          log.error(err)\n        }\n      }\n    },\n\n    source: options.signal ? abortable(stream.source, options.signal) : stream.source,\n\n    conn: stream,\n\n    localAddr: options.localAddr || (stream.localAddress && stream.localPort\n      ? toMultiaddr(stream.localAddress, stream.localPort)\n      : undefined),\n\n    // If the remote address was passed, use it - it may have the peer ID encapsulated\n    remoteAddr: options.remoteAddr || toMultiaddr(stream.remoteAddress, stream.remotePort),\n\n    timeline: { open: Date.now() },\n\n    async close () {\n      const start = Date.now()\n\n      try {\n        await pTimeout(stream.close(), CLOSE_TIMEOUT)\n      } catch (err) {\n        const { host, port } = maConn.remoteAddr.toOptions()\n        log('timeout closing stream to %s:%s after %dms, destroying it manually',\n          host, port, Date.now() - start)\n\n        stream.destroy()\n      } finally {\n        maConn.timeline.close = Date.now()\n      }\n    }\n  }\n\n  stream.socket.once && stream.socket.once('close', () => {\n    // In instances where `close` was not explicitly called,\n    // such as an iterable stream ending, ensure we have set the close\n    // timeline\n    if (!maConn.timeline.close) {\n      maConn.timeline.close = Date.now()\n    }\n  })\n\n  return maConn\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}