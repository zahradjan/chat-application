{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _objectSpread = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _slicedToArray = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar _awaitAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _wrapAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nvar _asyncIterator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar toCamel = require('./lib/object-to-camel');\n\nvar configure = require('./lib/configure');\n\nvar multipartRequest = require('./lib/multipart-request');\n\nvar toUrlSearchParams = require('./lib/to-url-search-params');\n\nvar abortSignal = require('./lib/abort-signal');\n\nvar _require2 = require('native-abort-controller'),\n    AbortController = _require2.AbortController;\n/**\n * @typedef {import('ipfs-utils/src/types').ProgressFn} IPFSUtilsHttpUploadProgressFn\n * @typedef {import('ipfs-core-types/src/root').AddProgressFn} IPFSCoreAddProgressFn\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n * @typedef {import('ipfs-core-types/src/root').AddResult} AddResult\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {RootAPI[\"addAll\"]}\n   */\n  function addAll(_x) {\n    return _addAll.apply(this, arguments);\n  }\n\n  function _addAll() {\n    _addAll = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(source) {\n      var options,\n          controller,\n          signal,\n          _yield$_awaitAsyncGen,\n          headers,\n          body,\n          total,\n          parts,\n          _ref,\n          _ref2,\n          progressFn,\n          onUploadProgress,\n          res,\n          _iteratorAbruptCompletion,\n          _didIteratorError,\n          _iteratorError,\n          _iterator,\n          _step,\n          file,\n          _args = arguments;\n\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              // allow aborting requests on body errors\n              controller = new AbortController();\n              signal = abortSignal(controller.signal, options.signal);\n              _context.next = 5;\n              return _awaitAsyncGenerator(multipartRequest(source, controller, options.headers));\n\n            case 5:\n              _yield$_awaitAsyncGen = _context.sent;\n              headers = _yield$_awaitAsyncGen.headers;\n              body = _yield$_awaitAsyncGen.body;\n              total = _yield$_awaitAsyncGen.total;\n              parts = _yield$_awaitAsyncGen.parts;\n              // In browser response body only starts streaming once upload is\n              // complete, at which point all the progress updates are invalid. If\n              // length of the content is computable we can interpret progress from\n              // `{ total, loaded}` passed to `onUploadProgress` and `multipart.total`\n              // in which case we disable progress updates to be written out.\n              _ref = typeof options.progress === 'function' // @ts-ignore tsc picks up the node codepath\n              ? createProgressHandler(total, parts, options.progress) : [undefined, undefined], _ref2 = _slicedToArray(_ref, 2), progressFn = _ref2[0], onUploadProgress = _ref2[1];\n              _context.next = 13;\n              return _awaitAsyncGenerator(api.post('add', {\n                searchParams: toUrlSearchParams(_objectSpread(_objectSpread({\n                  'stream-channels': true\n                }, options), {}, {\n                  progress: Boolean(progressFn)\n                })),\n                onUploadProgress: onUploadProgress,\n                signal: signal,\n                headers: headers,\n                body: body\n              }));\n\n            case 13:\n              res = _context.sent;\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 16;\n              _iterator = _asyncIterator(res.ndjson());\n\n            case 18:\n              _context.next = 20;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 20:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 32;\n                break;\n              }\n\n              file = _step.value;\n              file = toCamel(file);\n\n              if (!(file.hash !== undefined)) {\n                _context.next = 28;\n                break;\n              }\n\n              _context.next = 26;\n              return toCoreInterface(file);\n\n            case 26:\n              _context.next = 29;\n              break;\n\n            case 28:\n              if (progressFn) {\n                progressFn(file.bytes || 0, file.name);\n              }\n\n            case 29:\n              _iteratorAbruptCompletion = false;\n              _context.next = 18;\n              break;\n\n            case 32:\n              _context.next = 38;\n              break;\n\n            case 34:\n              _context.prev = 34;\n              _context.t0 = _context[\"catch\"](16);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n\n            case 38:\n              _context.prev = 38;\n              _context.prev = 39;\n\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 43;\n                break;\n              }\n\n              _context.next = 43;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 43:\n              _context.prev = 43;\n\n              if (!_didIteratorError) {\n                _context.next = 46;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 46:\n              return _context.finish(43);\n\n            case 47:\n              return _context.finish(38);\n\n            case 48:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[16, 34, 38, 48], [39,, 43, 47]]);\n    }));\n    return _addAll.apply(this, arguments);\n  }\n\n  return addAll;\n});\n/**\n * Returns simple progress callback when content length isn't computable or a\n * progress event handler that calculates progress from upload progress events.\n *\n * @param {number} total\n * @param {{name:string, start:number, end:number}[]|null} parts\n * @param {IPFSCoreAddProgressFn} progress\n * @returns {[IPFSCoreAddProgressFn|undefined, IPFSUtilsHttpUploadProgressFn|undefined]}\n */\n\nvar createProgressHandler = function createProgressHandler(total, parts, progress) {\n  return parts ? [undefined, createOnUploadProgress(total, parts, progress)] : [progress, undefined];\n};\n/**\n * Creates a progress handler that interpolates progress from upload progress\n * events and total size of the content that is added.\n *\n * @param {number} size - actual content size\n * @param {{name:string, start:number, end:number}[]} parts\n * @param {IPFSCoreAddProgressFn} progress\n * @returns {IPFSUtilsHttpUploadProgressFn}\n */\n\n\nvar createOnUploadProgress = function createOnUploadProgress(size, parts, progress) {\n  var index = 0;\n  var count = parts.length;\n  return function (_ref3) {\n    var loaded = _ref3.loaded,\n        total = _ref3.total;\n    // Derive position from the current progress.\n    var position = Math.floor(loaded / total * size);\n\n    while (index < count) {\n      var _parts$index = parts[index],\n          start = _parts$index.start,\n          end = _parts$index.end,\n          name = _parts$index.name; // If within current part range report progress and break the loop\n\n      if (position < end) {\n        progress(position - start, name);\n        break; // If passed current part range report final byte for the chunk and\n        // move to next one.\n      } else {\n        progress(end - start, name);\n        index += 1;\n      }\n    }\n  };\n};\n/**\n * @param {object} input\n * @param {string} input.name\n * @param {string} input.hash\n * @param {string} input.size\n * @param {string} [input.mode]\n * @param {number} [input.mtime]\n * @param {number} [input.mtimeNsecs]\n */\n\n\nfunction toCoreInterface(_ref4) {\n  var name = _ref4.name,\n      hash = _ref4.hash,\n      size = _ref4.size,\n      mode = _ref4.mode,\n      mtime = _ref4.mtime,\n      mtimeNsecs = _ref4.mtimeNsecs;\n\n  /** @type {AddResult} */\n  var output = {\n    path: name,\n    cid: CID.parse(hash),\n    size: parseInt(size)\n  };\n\n  if (mode != null) {\n    output.mode = parseInt(mode, 8);\n  }\n\n  if (mtime != null) {\n    output.mtime = {\n      secs: mtime,\n      nsecs: mtimeNsecs || 0\n    };\n  }\n\n  return output;\n}","map":{"version":3,"names":["require","CID","toCamel","configure","multipartRequest","toUrlSearchParams","abortSignal","AbortController","module","exports","api","addAll","source","options","controller","signal","headers","body","total","parts","progress","createProgressHandler","undefined","progressFn","onUploadProgress","post","searchParams","Boolean","res","ndjson","file","hash","toCoreInterface","bytes","name","createOnUploadProgress","size","index","count","length","loaded","position","Math","floor","start","end","mode","mtime","mtimeNsecs","output","path","cid","parse","parseInt","secs","nsecs"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-http-client/src/add-all.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst toCamel = require('./lib/object-to-camel')\nconst configure = require('./lib/configure')\nconst multipartRequest = require('./lib/multipart-request')\nconst toUrlSearchParams = require('./lib/to-url-search-params')\nconst abortSignal = require('./lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\n\n/**\n * @typedef {import('ipfs-utils/src/types').ProgressFn} IPFSUtilsHttpUploadProgressFn\n * @typedef {import('ipfs-core-types/src/root').AddProgressFn} IPFSCoreAddProgressFn\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n * @typedef {import('ipfs-core-types/src/root').AddResult} AddResult\n */\n\nmodule.exports = configure((api) => {\n  /**\n   * @type {RootAPI[\"addAll\"]}\n   */\n  async function * addAll (source, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n    const { headers, body, total, parts } =\n      await multipartRequest(source, controller, options.headers)\n\n    // In browser response body only starts streaming once upload is\n    // complete, at which point all the progress updates are invalid. If\n    // length of the content is computable we can interpret progress from\n    // `{ total, loaded}` passed to `onUploadProgress` and `multipart.total`\n    // in which case we disable progress updates to be written out.\n    const [progressFn, onUploadProgress] = typeof options.progress === 'function'\n      // @ts-ignore tsc picks up the node codepath\n      ? createProgressHandler(total, parts, options.progress)\n      : [undefined, undefined]\n\n    const res = await api.post('add', {\n      searchParams: toUrlSearchParams({\n        'stream-channels': true,\n        ...options,\n        progress: Boolean(progressFn)\n      }),\n      onUploadProgress,\n      signal,\n      headers,\n      body\n    })\n\n    for await (let file of res.ndjson()) {\n      file = toCamel(file)\n\n      if (file.hash !== undefined) {\n        yield toCoreInterface(file)\n      } else if (progressFn) {\n        progressFn(file.bytes || 0, file.name)\n      }\n    }\n  }\n  return addAll\n})\n\n/**\n * Returns simple progress callback when content length isn't computable or a\n * progress event handler that calculates progress from upload progress events.\n *\n * @param {number} total\n * @param {{name:string, start:number, end:number}[]|null} parts\n * @param {IPFSCoreAddProgressFn} progress\n * @returns {[IPFSCoreAddProgressFn|undefined, IPFSUtilsHttpUploadProgressFn|undefined]}\n */\nconst createProgressHandler = (total, parts, progress) =>\n  parts ? [undefined, createOnUploadProgress(total, parts, progress)] : [progress, undefined]\n\n/**\n * Creates a progress handler that interpolates progress from upload progress\n * events and total size of the content that is added.\n *\n * @param {number} size - actual content size\n * @param {{name:string, start:number, end:number}[]} parts\n * @param {IPFSCoreAddProgressFn} progress\n * @returns {IPFSUtilsHttpUploadProgressFn}\n */\nconst createOnUploadProgress = (size, parts, progress) => {\n  let index = 0\n  const count = parts.length\n  return ({ loaded, total }) => {\n    // Derive position from the current progress.\n    const position = Math.floor(loaded / total * size)\n    while (index < count) {\n      const { start, end, name } = parts[index]\n      // If within current part range report progress and break the loop\n      if (position < end) {\n        progress(position - start, name)\n        break\n      // If passed current part range report final byte for the chunk and\n      // move to next one.\n      } else {\n        progress(end - start, name)\n        index += 1\n      }\n    }\n  }\n}\n\n/**\n * @param {object} input\n * @param {string} input.name\n * @param {string} input.hash\n * @param {string} input.size\n * @param {string} [input.mode]\n * @param {number} [input.mtime]\n * @param {number} [input.mtimeNsecs]\n */\nfunction toCoreInterface ({ name, hash, size, mode, mtime, mtimeNsecs }) {\n  /** @type {AddResult} */\n  const output = {\n    path: name,\n    cid: CID.parse(hash),\n    size: parseInt(size)\n  }\n\n  if (mode != null) {\n    output.mode = parseInt(mode, 8)\n  }\n\n  if (mtime != null) {\n    output.mtime = {\n      secs: mtime,\n      nsecs: mtimeNsecs || 0\n    }\n  }\n\n  return output\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}