{"ast":null,"code":"'use strict';\n\nconst errcode = require('err-code');\n\nconst PeerId = require('peer-id');\n\nconst {\n  codes: {\n    ERR_INVALID_PARAMETERS\n  }\n} = require('../errors');\n/**\n * @param {any} data\n */\n\n\nconst passthrough = data => data;\n/**\n * @typedef {import('./')} PeerStore\n */\n\n\nclass Book {\n  /**\n   * The Book is the skeleton for the PeerStore books.\n   *\n   * @class\n   * @param {Object} properties\n   * @param {PeerStore} properties.peerStore - PeerStore instance.\n   * @param {string} properties.eventName - Name of the event to emit by the PeerStore.\n   * @param {string} properties.eventProperty - Name of the property to emit by the PeerStore.\n   * @param {(data: any) => any[]} [properties.eventTransformer] - Transformer function of the provided data for being emitted.\n   */\n  constructor(_ref) {\n    let {\n      peerStore,\n      eventName,\n      eventProperty,\n      eventTransformer = passthrough\n    } = _ref;\n    this._ps = peerStore;\n    this.eventName = eventName;\n    this.eventProperty = eventProperty;\n    this.eventTransformer = eventTransformer;\n    /**\n     * Map known peers to their data.\n     *\n     * @type {Map<string, any[]|any>}\n     */\n\n    this.data = new Map();\n  }\n  /**\n   * Set known data of a provided peer.\n   *\n   * @param {PeerId} peerId\n   * @param {any[]|any} data\n   */\n\n\n  set(peerId, data) {\n    throw errcode(new Error('set must be implemented by the subclass'), 'ERR_NOT_IMPLEMENTED');\n  }\n  /**\n   * Set data into the datastructure, persistence and emit it using the provided transformers.\n   *\n   * @protected\n   * @param {PeerId} peerId - peerId of the data to store\n   * @param {any} data - data to store.\n   * @param {Object} [options] - storing options.\n   * @param {boolean} [options.emit = true] - emit the provided data.\n   * @returns {void}\n   */\n\n\n  _setData(peerId, data) {\n    let {\n      emit = true\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const b58key = peerId.toB58String(); // Store data in memory\n\n    this.data.set(b58key, data); // Emit event\n\n    emit && this._emit(peerId, data);\n  }\n  /**\n   * Emit data.\n   *\n   * @protected\n   * @param {PeerId} peerId\n   * @param {any} [data]\n   */\n\n\n  _emit(peerId, data) {\n    this._ps.emit(this.eventName, {\n      peerId,\n      [this.eventProperty]: this.eventTransformer(data)\n    });\n  }\n  /**\n   * Get the known data of a provided peer.\n   * Returns `undefined` if there is no available data for the given peer.\n   *\n   * @param {PeerId} peerId\n   * @returns {any[]|any|undefined}\n   */\n\n\n  get(peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n    }\n\n    const rec = this.data.get(peerId.toB58String()); // @ts-ignore\n\n    return rec ? [...rec] : undefined;\n  }\n  /**\n   * Deletes the provided peer from the book.\n   *\n   * @param {PeerId} peerId\n   * @returns {boolean}\n   */\n\n\n  delete(peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n    }\n\n    if (!this.data.delete(peerId.toB58String())) {\n      return false;\n    }\n\n    this._emit(peerId, []);\n\n    return true;\n  }\n\n}\n\nmodule.exports = Book;","map":{"version":3,"names":["errcode","require","PeerId","codes","ERR_INVALID_PARAMETERS","passthrough","data","Book","constructor","peerStore","eventName","eventProperty","eventTransformer","_ps","Map","set","peerId","Error","_setData","emit","b58key","toB58String","_emit","get","isPeerId","rec","undefined","delete","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p/src/peer-store/book.js"],"sourcesContent":["'use strict'\n\nconst errcode = require('err-code')\nconst PeerId = require('peer-id')\n\nconst {\n  codes: { ERR_INVALID_PARAMETERS }\n} = require('../errors')\n\n/**\n * @param {any} data\n */\nconst passthrough = data => data\n\n/**\n * @typedef {import('./')} PeerStore\n */\n\nclass Book {\n  /**\n   * The Book is the skeleton for the PeerStore books.\n   *\n   * @class\n   * @param {Object} properties\n   * @param {PeerStore} properties.peerStore - PeerStore instance.\n   * @param {string} properties.eventName - Name of the event to emit by the PeerStore.\n   * @param {string} properties.eventProperty - Name of the property to emit by the PeerStore.\n   * @param {(data: any) => any[]} [properties.eventTransformer] - Transformer function of the provided data for being emitted.\n   */\n  constructor ({ peerStore, eventName, eventProperty, eventTransformer = passthrough }) {\n    this._ps = peerStore\n    this.eventName = eventName\n    this.eventProperty = eventProperty\n    this.eventTransformer = eventTransformer\n\n    /**\n     * Map known peers to their data.\n     *\n     * @type {Map<string, any[]|any>}\n     */\n    this.data = new Map()\n  }\n\n  /**\n   * Set known data of a provided peer.\n   *\n   * @param {PeerId} peerId\n   * @param {any[]|any} data\n   */\n  set (peerId, data) {\n    throw errcode(new Error('set must be implemented by the subclass'), 'ERR_NOT_IMPLEMENTED')\n  }\n\n  /**\n   * Set data into the datastructure, persistence and emit it using the provided transformers.\n   *\n   * @protected\n   * @param {PeerId} peerId - peerId of the data to store\n   * @param {any} data - data to store.\n   * @param {Object} [options] - storing options.\n   * @param {boolean} [options.emit = true] - emit the provided data.\n   * @returns {void}\n   */\n  _setData (peerId, data, { emit = true } = {}) {\n    const b58key = peerId.toB58String()\n\n    // Store data in memory\n    this.data.set(b58key, data)\n\n    // Emit event\n    emit && this._emit(peerId, data)\n  }\n\n  /**\n   * Emit data.\n   *\n   * @protected\n   * @param {PeerId} peerId\n   * @param {any} [data]\n   */\n  _emit (peerId, data) {\n    this._ps.emit(this.eventName, {\n      peerId,\n      [this.eventProperty]: this.eventTransformer(data)\n    })\n  }\n\n  /**\n   * Get the known data of a provided peer.\n   * Returns `undefined` if there is no available data for the given peer.\n   *\n   * @param {PeerId} peerId\n   * @returns {any[]|any|undefined}\n   */\n  get (peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    const rec = this.data.get(peerId.toB58String())\n\n    // @ts-ignore\n    return rec ? [...rec] : undefined\n  }\n\n  /**\n   * Deletes the provided peer from the book.\n   *\n   * @param {PeerId} peerId\n   * @returns {boolean}\n   */\n  delete (peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    if (!this.data.delete(peerId.toB58String())) {\n      return false\n    }\n\n    this._emit(peerId, [])\n\n    return true\n  }\n}\n\nmodule.exports = Book\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}