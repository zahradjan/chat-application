{"ast":null,"code":"'use strict';\n\nconst {\n  sha256\n} = require('multiformats/hashes/sha2');\n\nconst errcode = require('err-code');\n\nconst {\n  toString: uint8ArrayToString\n} = require('uint8arrays/to-string');\n\nconst {\n  equals: uint8ArrayEquals\n} = require('uint8arrays/equals');\n/**\n * Validator for public key records.\n * Verifies that the passed in record value is the PublicKey\n * that matches the passed in key.\n * If validation fails the returned Promise will reject with the error.\n *\n * @param {Uint8Array} key - A valid key is of the form `'/pk/<keymultihash>'`\n * @param {Uint8Array} publicKey - The public key to validate against (protobuf encoded).\n */\n\n\nconst validatePublicKeyRecord = async (key, publicKey) => {\n  if (!(key instanceof Uint8Array)) {\n    throw errcode(new Error('\"key\" must be a Uint8Array'), 'ERR_INVALID_RECORD_KEY_NOT_BUFFER');\n  }\n\n  if (key.byteLength < 5) {\n    throw errcode(new Error('invalid public key record'), 'ERR_INVALID_RECORD_KEY_TOO_SHORT');\n  }\n\n  const prefix = uint8ArrayToString(key.subarray(0, 4));\n\n  if (prefix !== '/pk/') {\n    throw errcode(new Error('key was not prefixed with /pk/'), 'ERR_INVALID_RECORD_KEY_BAD_PREFIX');\n  }\n\n  const keyhash = key.slice(4);\n  const publicKeyHash = await sha256.digest(publicKey);\n\n  if (!uint8ArrayEquals(keyhash, publicKeyHash.bytes)) {\n    throw errcode(new Error('public key does not match passed in key'), 'ERR_INVALID_RECORD_HASH_MISMATCH');\n  }\n};\n\nmodule.exports = {\n  func: validatePublicKeyRecord,\n  sign: false\n};","map":{"version":3,"names":["sha256","require","errcode","toString","uint8ArrayToString","equals","uint8ArrayEquals","validatePublicKeyRecord","key","publicKey","Uint8Array","Error","byteLength","prefix","subarray","keyhash","slice","publicKeyHash","digest","bytes","module","exports","func","sign"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-record/src/validators/public-key.js"],"sourcesContent":["'use strict'\n\nconst { sha256 } = require('multiformats/hashes/sha2')\nconst errcode = require('err-code')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\nconst { equals: uint8ArrayEquals } = require('uint8arrays/equals')\n\n/**\n * Validator for public key records.\n * Verifies that the passed in record value is the PublicKey\n * that matches the passed in key.\n * If validation fails the returned Promise will reject with the error.\n *\n * @param {Uint8Array} key - A valid key is of the form `'/pk/<keymultihash>'`\n * @param {Uint8Array} publicKey - The public key to validate against (protobuf encoded).\n */\nconst validatePublicKeyRecord = async (key, publicKey) => {\n  if (!(key instanceof Uint8Array)) {\n    throw errcode(new Error('\"key\" must be a Uint8Array'), 'ERR_INVALID_RECORD_KEY_NOT_BUFFER')\n  }\n\n  if (key.byteLength < 5) {\n    throw errcode(new Error('invalid public key record'), 'ERR_INVALID_RECORD_KEY_TOO_SHORT')\n  }\n\n  const prefix = uint8ArrayToString(key.subarray(0, 4))\n\n  if (prefix !== '/pk/') {\n    throw errcode(new Error('key was not prefixed with /pk/'), 'ERR_INVALID_RECORD_KEY_BAD_PREFIX')\n  }\n\n  const keyhash = key.slice(4)\n\n  const publicKeyHash = await sha256.digest(publicKey)\n\n  if (!uint8ArrayEquals(keyhash, publicKeyHash.bytes)) {\n    throw errcode(new Error('public key does not match passed in key'), 'ERR_INVALID_RECORD_HASH_MISMATCH')\n  }\n}\n\nmodule.exports = {\n  func: validatePublicKeyRecord,\n  sign: false\n}\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA;AAAF,IAAaC,OAAO,CAAC,0BAAD,CAA1B;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAM;EAAEE,QAAQ,EAAEC;AAAZ,IAAmCH,OAAO,CAAC,uBAAD,CAAhD;;AACA,MAAM;EAAEI,MAAM,EAAEC;AAAV,IAA+BL,OAAO,CAAC,oBAAD,CAA5C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMM,uBAAuB,GAAG,OAAOC,GAAP,EAAYC,SAAZ,KAA0B;EACxD,IAAI,EAAED,GAAG,YAAYE,UAAjB,CAAJ,EAAkC;IAChC,MAAMR,OAAO,CAAC,IAAIS,KAAJ,CAAU,4BAAV,CAAD,EAA0C,mCAA1C,CAAb;EACD;;EAED,IAAIH,GAAG,CAACI,UAAJ,GAAiB,CAArB,EAAwB;IACtB,MAAMV,OAAO,CAAC,IAAIS,KAAJ,CAAU,2BAAV,CAAD,EAAyC,kCAAzC,CAAb;EACD;;EAED,MAAME,MAAM,GAAGT,kBAAkB,CAACI,GAAG,CAACM,QAAJ,CAAa,CAAb,EAAgB,CAAhB,CAAD,CAAjC;;EAEA,IAAID,MAAM,KAAK,MAAf,EAAuB;IACrB,MAAMX,OAAO,CAAC,IAAIS,KAAJ,CAAU,gCAAV,CAAD,EAA8C,mCAA9C,CAAb;EACD;;EAED,MAAMI,OAAO,GAAGP,GAAG,CAACQ,KAAJ,CAAU,CAAV,CAAhB;EAEA,MAAMC,aAAa,GAAG,MAAMjB,MAAM,CAACkB,MAAP,CAAcT,SAAd,CAA5B;;EAEA,IAAI,CAACH,gBAAgB,CAACS,OAAD,EAAUE,aAAa,CAACE,KAAxB,CAArB,EAAqD;IACnD,MAAMjB,OAAO,CAAC,IAAIS,KAAJ,CAAU,yCAAV,CAAD,EAAuD,kCAAvD,CAAb;EACD;AACF,CAtBD;;AAwBAS,MAAM,CAACC,OAAP,GAAiB;EACfC,IAAI,EAAEf,uBADS;EAEfgB,IAAI,EAAE;AAFS,CAAjB"},"metadata":{},"sourceType":"script"}