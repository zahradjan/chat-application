{"ast":null,"code":"// @ts-nocheck\n'use strict';\n\nrequire('node-forge/lib/x509');\n\nconst forge = require('node-forge/lib/forge');\n\nconst pki = forge.pki;\n/**\n * Gets a self-signed X.509 certificate for the key.\n *\n * The output Uint8Array contains the PKCS #7 message in DER.\n *\n * TODO: move to libp2p-crypto package\n *\n * @param {KeyInfo} key - The id and name of the key\n * @param {RsaPrivateKey} privateKey - The naked key\n * @returns {Uint8Array}\n */\n\nconst certificateForKey = (key, privateKey) => {\n  const publicKey = pki.setRsaPublicKey(privateKey.n, privateKey.e);\n  const cert = pki.createCertificate();\n  cert.publicKey = publicKey;\n  cert.serialNumber = '01';\n  cert.validity.notBefore = new Date();\n  cert.validity.notAfter = new Date();\n  cert.validity.notAfter.setFullYear(cert.validity.notBefore.getFullYear() + 10);\n  const attrs = [{\n    name: 'organizationName',\n    value: 'ipfs'\n  }, {\n    shortName: 'OU',\n    value: 'keystore'\n  }, {\n    name: 'commonName',\n    value: key.id\n  }];\n  cert.setSubject(attrs);\n  cert.setIssuer(attrs);\n  cert.setExtensions([{\n    name: 'basicConstraints',\n    cA: true\n  }, {\n    name: 'keyUsage',\n    keyCertSign: true,\n    digitalSignature: true,\n    nonRepudiation: true,\n    keyEncipherment: true,\n    dataEncipherment: true\n  }, {\n    name: 'extKeyUsage',\n    serverAuth: true,\n    clientAuth: true,\n    codeSigning: true,\n    emailProtection: true,\n    timeStamping: true\n  }, {\n    name: 'nsCertType',\n    client: true,\n    server: true,\n    email: true,\n    objsign: true,\n    sslCA: true,\n    emailCA: true,\n    objCA: true\n  }]); // self-sign certificate\n\n  cert.sign(privateKey);\n  return cert;\n};\n/**\n * Finds the first item in a collection that is matched in the\n * `asyncCompare` function.\n *\n * `asyncCompare` is an async function that must\n * resolve to either `true` or `false`.\n *\n * @param {Array} array\n * @param {function(*)} asyncCompare - An async function that returns a boolean\n */\n\n\nasync function findAsync(array, asyncCompare) {\n  const promises = array.map(asyncCompare);\n  const results = await Promise.all(promises);\n  const index = results.findIndex(result => result);\n  return array[index];\n}\n\nmodule.exports = {\n  certificateForKey,\n  findAsync\n};","map":{"version":3,"names":["require","forge","pki","certificateForKey","key","privateKey","publicKey","setRsaPublicKey","n","e","cert","createCertificate","serialNumber","validity","notBefore","Date","notAfter","setFullYear","getFullYear","attrs","name","value","shortName","id","setSubject","setIssuer","setExtensions","cA","keyCertSign","digitalSignature","nonRepudiation","keyEncipherment","dataEncipherment","serverAuth","clientAuth","codeSigning","emailProtection","timeStamping","client","server","email","objsign","sslCA","emailCA","objCA","sign","findAsync","array","asyncCompare","promises","map","results","Promise","all","index","findIndex","result","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p/src/keychain/util.js"],"sourcesContent":["// @ts-nocheck\n'use strict'\n\nrequire('node-forge/lib/x509')\nconst forge = require('node-forge/lib/forge')\nconst pki = forge.pki\n\n/**\n * Gets a self-signed X.509 certificate for the key.\n *\n * The output Uint8Array contains the PKCS #7 message in DER.\n *\n * TODO: move to libp2p-crypto package\n *\n * @param {KeyInfo} key - The id and name of the key\n * @param {RsaPrivateKey} privateKey - The naked key\n * @returns {Uint8Array}\n */\nconst certificateForKey = (key, privateKey) => {\n  const publicKey = pki.setRsaPublicKey(privateKey.n, privateKey.e)\n  const cert = pki.createCertificate()\n  cert.publicKey = publicKey\n  cert.serialNumber = '01'\n  cert.validity.notBefore = new Date()\n  cert.validity.notAfter = new Date()\n  cert.validity.notAfter.setFullYear(cert.validity.notBefore.getFullYear() + 10)\n  const attrs = [{\n    name: 'organizationName',\n    value: 'ipfs'\n  }, {\n    shortName: 'OU',\n    value: 'keystore'\n  }, {\n    name: 'commonName',\n    value: key.id\n  }]\n  cert.setSubject(attrs)\n  cert.setIssuer(attrs)\n  cert.setExtensions([{\n    name: 'basicConstraints',\n    cA: true\n  }, {\n    name: 'keyUsage',\n    keyCertSign: true,\n    digitalSignature: true,\n    nonRepudiation: true,\n    keyEncipherment: true,\n    dataEncipherment: true\n  }, {\n    name: 'extKeyUsage',\n    serverAuth: true,\n    clientAuth: true,\n    codeSigning: true,\n    emailProtection: true,\n    timeStamping: true\n  }, {\n    name: 'nsCertType',\n    client: true,\n    server: true,\n    email: true,\n    objsign: true,\n    sslCA: true,\n    emailCA: true,\n    objCA: true\n  }])\n  // self-sign certificate\n  cert.sign(privateKey)\n\n  return cert\n}\n\n/**\n * Finds the first item in a collection that is matched in the\n * `asyncCompare` function.\n *\n * `asyncCompare` is an async function that must\n * resolve to either `true` or `false`.\n *\n * @param {Array} array\n * @param {function(*)} asyncCompare - An async function that returns a boolean\n */\nasync function findAsync (array, asyncCompare) {\n  const promises = array.map(asyncCompare)\n  const results = await Promise.all(promises)\n  const index = results.findIndex(result => result)\n  return array[index]\n}\n\nmodule.exports = {\n  certificateForKey,\n  findAsync\n}\n"],"mappings":"AAAA;AACA;;AAEAA,OAAO,CAAC,qBAAD,CAAP;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,sBAAD,CAArB;;AACA,MAAME,GAAG,GAAGD,KAAK,CAACC,GAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,iBAAiB,GAAG,CAACC,GAAD,EAAMC,UAAN,KAAqB;EAC7C,MAAMC,SAAS,GAAGJ,GAAG,CAACK,eAAJ,CAAoBF,UAAU,CAACG,CAA/B,EAAkCH,UAAU,CAACI,CAA7C,CAAlB;EACA,MAAMC,IAAI,GAAGR,GAAG,CAACS,iBAAJ,EAAb;EACAD,IAAI,CAACJ,SAAL,GAAiBA,SAAjB;EACAI,IAAI,CAACE,YAAL,GAAoB,IAApB;EACAF,IAAI,CAACG,QAAL,CAAcC,SAAd,GAA0B,IAAIC,IAAJ,EAA1B;EACAL,IAAI,CAACG,QAAL,CAAcG,QAAd,GAAyB,IAAID,IAAJ,EAAzB;EACAL,IAAI,CAACG,QAAL,CAAcG,QAAd,CAAuBC,WAAvB,CAAmCP,IAAI,CAACG,QAAL,CAAcC,SAAd,CAAwBI,WAAxB,KAAwC,EAA3E;EACA,MAAMC,KAAK,GAAG,CAAC;IACbC,IAAI,EAAE,kBADO;IAEbC,KAAK,EAAE;EAFM,CAAD,EAGX;IACDC,SAAS,EAAE,IADV;IAEDD,KAAK,EAAE;EAFN,CAHW,EAMX;IACDD,IAAI,EAAE,YADL;IAEDC,KAAK,EAAEjB,GAAG,CAACmB;EAFV,CANW,CAAd;EAUAb,IAAI,CAACc,UAAL,CAAgBL,KAAhB;EACAT,IAAI,CAACe,SAAL,CAAeN,KAAf;EACAT,IAAI,CAACgB,aAAL,CAAmB,CAAC;IAClBN,IAAI,EAAE,kBADY;IAElBO,EAAE,EAAE;EAFc,CAAD,EAGhB;IACDP,IAAI,EAAE,UADL;IAEDQ,WAAW,EAAE,IAFZ;IAGDC,gBAAgB,EAAE,IAHjB;IAIDC,cAAc,EAAE,IAJf;IAKDC,eAAe,EAAE,IALhB;IAMDC,gBAAgB,EAAE;EANjB,CAHgB,EAUhB;IACDZ,IAAI,EAAE,aADL;IAEDa,UAAU,EAAE,IAFX;IAGDC,UAAU,EAAE,IAHX;IAIDC,WAAW,EAAE,IAJZ;IAKDC,eAAe,EAAE,IALhB;IAMDC,YAAY,EAAE;EANb,CAVgB,EAiBhB;IACDjB,IAAI,EAAE,YADL;IAEDkB,MAAM,EAAE,IAFP;IAGDC,MAAM,EAAE,IAHP;IAIDC,KAAK,EAAE,IAJN;IAKDC,OAAO,EAAE,IALR;IAMDC,KAAK,EAAE,IANN;IAODC,OAAO,EAAE,IAPR;IAQDC,KAAK,EAAE;EARN,CAjBgB,CAAnB,EApB6C,CA+C7C;;EACAlC,IAAI,CAACmC,IAAL,CAAUxC,UAAV;EAEA,OAAOK,IAAP;AACD,CAnDD;AAqDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAeoC,SAAf,CAA0BC,KAA1B,EAAiCC,YAAjC,EAA+C;EAC7C,MAAMC,QAAQ,GAAGF,KAAK,CAACG,GAAN,CAAUF,YAAV,CAAjB;EACA,MAAMG,OAAO,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAYJ,QAAZ,CAAtB;EACA,MAAMK,KAAK,GAAGH,OAAO,CAACI,SAAR,CAAkBC,MAAM,IAAIA,MAA5B,CAAd;EACA,OAAOT,KAAK,CAACO,KAAD,CAAZ;AACD;;AAEDG,MAAM,CAACC,OAAP,GAAiB;EACfvD,iBADe;EAEf2C;AAFe,CAAjB"},"metadata":{},"sourceType":"script"}