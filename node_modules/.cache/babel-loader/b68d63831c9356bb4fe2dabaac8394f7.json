{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _objectSpread = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar toCamel = require('./lib/object-to-camel');\n\nvar _require = require('multiaddr'),\n    Multiaddr = _require.Multiaddr;\n\nvar configure = require('./lib/configure');\n\nvar toUrlSearchParams = require('./lib/to-url-search-params');\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {RootAPI[\"id\"]}\n   */\n  function id() {\n    return _id.apply(this, arguments);\n  }\n\n  function _id() {\n    _id = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var options,\n          res,\n          data,\n          output,\n          _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              _context.next = 3;\n              return api.post('id', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: options.peerId ? options.peerId.toString() : undefined\n                }, options)),\n                headers: options.headers\n              });\n\n            case 3:\n              res = _context.sent;\n              _context.next = 6;\n              return res.json();\n\n            case 6:\n              data = _context.sent;\n              output = _objectSpread({}, toCamel(data));\n\n              if (output.addresses) {\n                output.addresses = output.addresses.map(function (\n                /** @type {string} */\n                ma) {\n                  return new Multiaddr(ma);\n                });\n              } // @ts-ignore server output is not typed\n\n\n              return _context.abrupt(\"return\", output);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _id.apply(this, arguments);\n  }\n\n  return id;\n});","map":{"version":3,"names":["toCamel","require","Multiaddr","configure","toUrlSearchParams","module","exports","api","id","options","post","signal","searchParams","arg","peerId","toString","undefined","headers","res","json","data","output","addresses","map","ma"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-http-client/src/id.js"],"sourcesContent":["'use strict'\n\nconst toCamel = require('./lib/object-to-camel')\nconst { Multiaddr } = require('multiaddr')\nconst configure = require('./lib/configure')\nconst toUrlSearchParams = require('./lib/to-url-search-params')\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {RootAPI[\"id\"]}\n   */\n  async function id (options = {}) {\n    const res = await api.post('id', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: options.peerId ? options.peerId.toString() : undefined,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    const output = {\n      ...toCamel(data)\n    }\n\n    if (output.addresses) {\n      output.addresses = output.addresses.map((/** @type {string} */ ma) => new Multiaddr(ma))\n    }\n\n    // @ts-ignore server output is not typed\n    return output\n  }\n  return id\n})\n"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,OAAO,GAAGC,OAAO,CAAC,uBAAD,CAAvB;;AACA,eAAsBA,OAAO,CAAC,WAAD,CAA7B;AAAA,IAAQC,SAAR,YAAQA,SAAR;;AACA,IAAMC,SAAS,GAAGF,OAAO,CAAC,iBAAD,CAAzB;;AACA,IAAMG,iBAAiB,GAAGH,OAAO,CAAC,4BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAI,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAAC,UAAAI,GAAG,EAAI;EAChC;AACF;AACA;EAHkC,SAIjBC,EAJiB;IAAA;EAAA;;EAAA;IAAA,iEAIhC;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAmBC,OAAnB,2DAA6B,EAA7B;cAAA;cAAA,OACoBF,GAAG,CAACG,IAAJ,CAAS,IAAT,EAAe;gBAC/BC,MAAM,EAAEF,OAAO,CAACE,MADe;gBAE/BC,YAAY,EAAER,iBAAiB;kBAC7BS,GAAG,EAAEJ,OAAO,CAACK,MAAR,GAAiBL,OAAO,CAACK,MAAR,CAAeC,QAAf,EAAjB,GAA6CC;gBADrB,GAE1BP,OAF0B,EAFA;gBAM/BQ,OAAO,EAAER,OAAO,CAACQ;cANc,CAAf,CADpB;;YAAA;cACQC,GADR;cAAA;cAAA,OASqBA,GAAG,CAACC,IAAJ,EATrB;;YAAA;cASQC,IATR;cAWQC,MAXR,qBAYOrB,OAAO,CAACoB,IAAD,CAZd;;cAeE,IAAIC,MAAM,CAACC,SAAX,EAAsB;gBACpBD,MAAM,CAACC,SAAP,GAAmBD,MAAM,CAACC,SAAP,CAAiBC,GAAjB,CAAqB;gBAAC;gBAAsBC,EAAvB;kBAAA,OAA8B,IAAItB,SAAJ,CAAcsB,EAAd,CAA9B;gBAAA,CAArB,CAAnB;cACD,CAjBH,CAmBE;;;cAnBF,iCAoBSH,MApBT;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAJgC;IAAA;EAAA;;EA0BhC,OAAOb,EAAP;AACD,CA3ByB,CAA1B"},"metadata":{},"sourceType":"script"}