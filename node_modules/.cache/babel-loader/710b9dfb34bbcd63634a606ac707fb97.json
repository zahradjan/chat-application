{"ast":null,"code":"'use strict';\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst dagPb = require('@ipld/dag-pb');\n\nconst {\n  sha256\n} = require('multiformats/hashes/sha2');\n/**\n * @typedef {object} PersistOptions\n * @property {import('multiformats/codecs/interface').BlockCodec<any, any>} [codec]\n * @property {import('multiformats/hashes/interface').MultihashHasher} [hasher]\n * @property {import('multiformats/cid').CIDVersion} [cidVersion]\n * @property {boolean} [onlyHash]\n * @property {AbortSignal} [signal]\n */\n\n/**\n * @param {Uint8Array} buffer\n * @param {import('interface-blockstore').Blockstore} blockstore\n * @param {PersistOptions} options\n */\n\n\nconst persist = async (buffer, blockstore, options) => {\n  if (!options.codec) {\n    options.codec = dagPb;\n  }\n\n  if (!options.hasher) {\n    options.hasher = sha256;\n  }\n\n  if (options.cidVersion === undefined) {\n    options.cidVersion = 1;\n  }\n\n  if (options.codec === dagPb && options.hasher !== sha256) {\n    options.cidVersion = 1;\n  }\n\n  const multihash = await options.hasher.digest(buffer);\n  const cid = CID.create(options.cidVersion, options.codec.code, multihash);\n\n  if (!options.onlyHash) {\n    await blockstore.put(cid, buffer, {\n      signal: options.signal\n    });\n  }\n\n  return cid;\n};\n\nmodule.exports = persist;","map":{"version":3,"names":["CID","require","dagPb","sha256","persist","buffer","blockstore","options","codec","hasher","cidVersion","undefined","multihash","digest","cid","create","code","onlyHash","put","signal","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/files/utils/persist.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst dagPb = require('@ipld/dag-pb')\nconst { sha256 } = require('multiformats/hashes/sha2')\n\n/**\n * @typedef {object} PersistOptions\n * @property {import('multiformats/codecs/interface').BlockCodec<any, any>} [codec]\n * @property {import('multiformats/hashes/interface').MultihashHasher} [hasher]\n * @property {import('multiformats/cid').CIDVersion} [cidVersion]\n * @property {boolean} [onlyHash]\n * @property {AbortSignal} [signal]\n */\n\n/**\n * @param {Uint8Array} buffer\n * @param {import('interface-blockstore').Blockstore} blockstore\n * @param {PersistOptions} options\n */\nconst persist = async (buffer, blockstore, options) => {\n  if (!options.codec) {\n    options.codec = dagPb\n  }\n\n  if (!options.hasher) {\n    options.hasher = sha256\n  }\n\n  if (options.cidVersion === undefined) {\n    options.cidVersion = 1\n  }\n\n  if (options.codec === dagPb && options.hasher !== sha256) {\n    options.cidVersion = 1\n  }\n\n  const multihash = await options.hasher.digest(buffer)\n  const cid = CID.create(options.cidVersion, options.codec.code, multihash)\n\n  if (!options.onlyHash) {\n    await blockstore.put(cid, buffer, {\n      signal: options.signal\n    })\n  }\n\n  return cid\n}\n\nmodule.exports = persist\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA;AAAF,IAAUC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,cAAD,CAArB;;AACA,MAAM;EAAEE;AAAF,IAAaF,OAAO,CAAC,0BAAD,CAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAMG,OAAO,GAAG,OAAOC,MAAP,EAAeC,UAAf,EAA2BC,OAA3B,KAAuC;EACrD,IAAI,CAACA,OAAO,CAACC,KAAb,EAAoB;IAClBD,OAAO,CAACC,KAAR,GAAgBN,KAAhB;EACD;;EAED,IAAI,CAACK,OAAO,CAACE,MAAb,EAAqB;IACnBF,OAAO,CAACE,MAAR,GAAiBN,MAAjB;EACD;;EAED,IAAII,OAAO,CAACG,UAAR,KAAuBC,SAA3B,EAAsC;IACpCJ,OAAO,CAACG,UAAR,GAAqB,CAArB;EACD;;EAED,IAAIH,OAAO,CAACC,KAAR,KAAkBN,KAAlB,IAA2BK,OAAO,CAACE,MAAR,KAAmBN,MAAlD,EAA0D;IACxDI,OAAO,CAACG,UAAR,GAAqB,CAArB;EACD;;EAED,MAAME,SAAS,GAAG,MAAML,OAAO,CAACE,MAAR,CAAeI,MAAf,CAAsBR,MAAtB,CAAxB;EACA,MAAMS,GAAG,GAAGd,GAAG,CAACe,MAAJ,CAAWR,OAAO,CAACG,UAAnB,EAA+BH,OAAO,CAACC,KAAR,CAAcQ,IAA7C,EAAmDJ,SAAnD,CAAZ;;EAEA,IAAI,CAACL,OAAO,CAACU,QAAb,EAAuB;IACrB,MAAMX,UAAU,CAACY,GAAX,CAAeJ,GAAf,EAAoBT,MAApB,EAA4B;MAChCc,MAAM,EAAEZ,OAAO,CAACY;IADgB,CAA5B,CAAN;EAGD;;EAED,OAAOL,GAAP;AACD,CA3BD;;AA6BAM,MAAM,CAACC,OAAP,GAAiBjB,OAAjB"},"metadata":{},"sourceType":"script"}