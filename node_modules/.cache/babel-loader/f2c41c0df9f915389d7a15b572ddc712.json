{"ast":null,"code":"'use strict';\n\nconst drain = require('it-drain');\n\nconst filter = require('it-filter');\n\nconst take = require('it-take');\n\nconst all = require('it-all');\n/**\n * Collect all values from the iterable and sort them using\n * the passed sorter function\n *\n * @template T\n * @param {AsyncIterable<T> | Iterable<T>} iterable\n * @param {(a: T, b: T) => -1 | 0 | 1} sorter\n * @returns {AsyncIterable<T>}\n */\n\n\nconst sortAll = (iterable, sorter) => {\n  return async function* () {\n    const values = await all(iterable);\n    yield* values.sort(sorter);\n  }();\n};\n/**\n * @typedef {import('./types').Options} Options\n * @typedef {import('./types').Pair} Pair\n * @typedef {import('./types').Blockstore} Blockstore\n * @typedef {import('./types').Query} Query\n * @typedef {import('./types').KeyQuery} KeyQuery\n * @typedef {import('./types').Batch} Batch\n *\n * @typedef {import('multiformats').CID} CID\n */\n\n/**\n * @template O\n * @typedef {import('interface-store').AwaitIterable<O>} AwaitIterable\n */\n\n/**\n * @implements {Blockstore}\n */\n\n\nclass BlockstoreAdapter {\n  /**\n   * @returns {Promise<void>}\n   */\n  open() {\n    return Promise.reject(new Error('.open is not implemented'));\n  }\n  /**\n   * @returns {Promise<void>}\n   */\n\n\n  close() {\n    return Promise.reject(new Error('.close is not implemented'));\n  }\n  /**\n   * @param {CID} key\n   * @param {Uint8Array} val\n   * @param {Options} [options]\n   * @returns {Promise<void>}\n   */\n\n\n  put(key, val, options) {\n    return Promise.reject(new Error('.put is not implemented'));\n  }\n  /**\n   * @param {CID} key\n   * @param {Options} [options]\n   * @returns {Promise<Uint8Array>}\n   */\n\n\n  get(key, options) {\n    return Promise.reject(new Error('.get is not implemented'));\n  }\n  /**\n   * @param {CID} key\n   * @param {Options} [options]\n   * @returns {Promise<boolean>}\n   */\n\n\n  has(key, options) {\n    return Promise.reject(new Error('.has is not implemented'));\n  }\n  /**\n   * @param {CID} key\n   * @param {Options} [options]\n   * @returns {Promise<void>}\n   */\n\n\n  delete(key, options) {\n    return Promise.reject(new Error('.delete is not implemented'));\n  }\n  /**\n   * @param {AwaitIterable<Pair>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Pair>}\n   */\n\n\n  async *putMany(source) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    for await (const {\n      key,\n      value\n    } of source) {\n      await this.put(key, value, options);\n      yield {\n        key,\n        value\n      };\n    }\n  }\n  /**\n   * @param {AwaitIterable<CID>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Uint8Array>}\n   */\n\n\n  async *getMany(source) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    for await (const key of source) {\n      yield this.get(key, options);\n    }\n  }\n  /**\n   * @param {AwaitIterable<CID>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<CID>}\n   */\n\n\n  async *deleteMany(source) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    for await (const key of source) {\n      await this.delete(key, options);\n      yield key;\n    }\n  }\n  /**\n   * @returns {Batch}\n   */\n\n\n  batch() {\n    /** @type {Pair[]} */\n    let puts = [];\n    /** @type {CID[]} */\n\n    let dels = [];\n    return {\n      put(key, value) {\n        puts.push({\n          key,\n          value\n        });\n      },\n\n      delete(key) {\n        dels.push(key);\n      },\n\n      commit: async options => {\n        await drain(this.putMany(puts, options));\n        puts = [];\n        await drain(this.deleteMany(dels, options));\n        dels = [];\n      }\n    };\n  }\n  /**\n   * Extending classes should override `query` or implement this method\n   *\n   * @param {Query} q\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Pair>}\n   */\n  // eslint-disable-next-line require-yield\n\n\n  async *_all(q, options) {\n    throw new Error('._all is not implemented');\n  }\n  /**\n   * Extending classes should override `queryKeys` or implement this method\n   *\n   * @param {KeyQuery} q\n   * @param {Options} [options]\n   * @returns {AsyncIterable<CID>}\n   */\n  // eslint-disable-next-line require-yield\n\n\n  async *_allKeys(q, options) {\n    throw new Error('._allKeys is not implemented');\n  }\n  /**\n   * @param {Query} q\n   * @param {Options} [options]\n   */\n\n\n  query(q, options) {\n    let it = this._all(q, options);\n\n    if (q.prefix != null) {\n      it = filter(it, (\n      /** @type {Pair} */\n      e) => e.key.toString().startsWith(q.prefix || ''));\n    }\n\n    if (Array.isArray(q.filters)) {\n      it = q.filters.reduce((it, f) => filter(it, f), it);\n    }\n\n    if (Array.isArray(q.orders)) {\n      it = q.orders.reduce((it, f) => sortAll(it, f), it);\n    }\n\n    if (q.offset != null) {\n      let i = 0;\n      it = filter(it, () => i++ >= (q.offset || 0));\n    }\n\n    if (q.limit != null) {\n      it = take(it, q.limit);\n    }\n\n    return it;\n  }\n  /**\n   * @param {KeyQuery} q\n   * @param {Options} [options]\n   */\n\n\n  queryKeys(q, options) {\n    let it = this._allKeys(q, options);\n\n    if (q.prefix != null) {\n      it = filter(it, (\n      /** @type {CID} */\n      cid) => cid.toString().startsWith(q.prefix || ''));\n    }\n\n    if (Array.isArray(q.filters)) {\n      it = q.filters.reduce((it, f) => filter(it, f), it);\n    }\n\n    if (Array.isArray(q.orders)) {\n      it = q.orders.reduce((it, f) => sortAll(it, f), it);\n    }\n\n    if (q.offset != null) {\n      let i = 0;\n      it = filter(it, () => i++ >=\n      /** @type {number} */\n      q.offset);\n    }\n\n    if (q.limit != null) {\n      it = take(it, q.limit);\n    }\n\n    return it;\n  }\n\n}\n\nmodule.exports = BlockstoreAdapter;","map":{"version":3,"names":["drain","require","filter","take","all","sortAll","iterable","sorter","values","sort","BlockstoreAdapter","open","Promise","reject","Error","close","put","key","val","options","get","has","delete","putMany","source","value","getMany","deleteMany","batch","puts","dels","push","commit","_all","q","_allKeys","query","it","prefix","e","toString","startsWith","Array","isArray","filters","reduce","f","orders","offset","i","limit","queryKeys","cid","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/interface-blockstore/src/adapter.js"],"sourcesContent":["'use strict'\n\nconst drain = require('it-drain')\nconst filter = require('it-filter')\nconst take = require('it-take')\nconst all = require('it-all')\n\n/**\n * Collect all values from the iterable and sort them using\n * the passed sorter function\n *\n * @template T\n * @param {AsyncIterable<T> | Iterable<T>} iterable\n * @param {(a: T, b: T) => -1 | 0 | 1} sorter\n * @returns {AsyncIterable<T>}\n */\nconst sortAll = (iterable, sorter) => {\n  return (async function * () {\n    const values = await all(iterable)\n    yield * values.sort(sorter)\n  })()\n}\n\n/**\n * @typedef {import('./types').Options} Options\n * @typedef {import('./types').Pair} Pair\n * @typedef {import('./types').Blockstore} Blockstore\n * @typedef {import('./types').Query} Query\n * @typedef {import('./types').KeyQuery} KeyQuery\n * @typedef {import('./types').Batch} Batch\n *\n * @typedef {import('multiformats').CID} CID\n */\n\n/**\n * @template O\n * @typedef {import('interface-store').AwaitIterable<O>} AwaitIterable\n */\n\n/**\n * @implements {Blockstore}\n */\nclass BlockstoreAdapter {\n  /**\n   * @returns {Promise<void>}\n   */\n  open () {\n    return Promise.reject(new Error('.open is not implemented'))\n  }\n\n  /**\n   * @returns {Promise<void>}\n   */\n  close () {\n    return Promise.reject(new Error('.close is not implemented'))\n  }\n\n  /**\n   * @param {CID} key\n   * @param {Uint8Array} val\n   * @param {Options} [options]\n   * @returns {Promise<void>}\n   */\n  put (key, val, options) {\n    return Promise.reject(new Error('.put is not implemented'))\n  }\n\n  /**\n   * @param {CID} key\n   * @param {Options} [options]\n   * @returns {Promise<Uint8Array>}\n   */\n  get (key, options) {\n    return Promise.reject(new Error('.get is not implemented'))\n  }\n\n  /**\n   * @param {CID} key\n   * @param {Options} [options]\n   * @returns {Promise<boolean>}\n   */\n  has (key, options) {\n    return Promise.reject(new Error('.has is not implemented'))\n  }\n\n  /**\n   * @param {CID} key\n   * @param {Options} [options]\n   * @returns {Promise<void>}\n   */\n  delete (key, options) {\n    return Promise.reject(new Error('.delete is not implemented'))\n  }\n\n  /**\n   * @param {AwaitIterable<Pair>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Pair>}\n   */\n  async * putMany (source, options = {}) {\n    for await (const { key, value } of source) {\n      await this.put(key, value, options)\n      yield { key, value }\n    }\n  }\n\n  /**\n   * @param {AwaitIterable<CID>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Uint8Array>}\n   */\n  async * getMany (source, options = {}) {\n    for await (const key of source) {\n      yield this.get(key, options)\n    }\n  }\n\n  /**\n   * @param {AwaitIterable<CID>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<CID>}\n   */\n  async * deleteMany (source, options = {}) {\n    for await (const key of source) {\n      await this.delete(key, options)\n      yield key\n    }\n  }\n\n  /**\n   * @returns {Batch}\n   */\n  batch () {\n    /** @type {Pair[]} */\n    let puts = []\n    /** @type {CID[]} */\n    let dels = []\n\n    return {\n      put (key, value) {\n        puts.push({ key, value })\n      },\n\n      delete (key) {\n        dels.push(key)\n      },\n      commit: async (options) => {\n        await drain(this.putMany(puts, options))\n        puts = []\n        await drain(this.deleteMany(dels, options))\n        dels = []\n      }\n    }\n  }\n\n  /**\n   * Extending classes should override `query` or implement this method\n   *\n   * @param {Query} q\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Pair>}\n   */\n  // eslint-disable-next-line require-yield\n  async * _all (q, options) {\n    throw new Error('._all is not implemented')\n  }\n\n  /**\n   * Extending classes should override `queryKeys` or implement this method\n   *\n   * @param {KeyQuery} q\n   * @param {Options} [options]\n   * @returns {AsyncIterable<CID>}\n   */\n  // eslint-disable-next-line require-yield\n  async * _allKeys (q, options) {\n    throw new Error('._allKeys is not implemented')\n  }\n\n  /**\n   * @param {Query} q\n   * @param {Options} [options]\n   */\n  query (q, options) {\n    let it = this._all(q, options)\n\n    if (q.prefix != null) {\n      it = filter(it, (/** @type {Pair} */ e) =>\n        e.key.toString().startsWith(q.prefix || '')\n      )\n    }\n\n    if (Array.isArray(q.filters)) {\n      it = q.filters.reduce((it, f) => filter(it, f), it)\n    }\n\n    if (Array.isArray(q.orders)) {\n      it = q.orders.reduce((it, f) => sortAll(it, f), it)\n    }\n\n    if (q.offset != null) {\n      let i = 0\n      it = filter(it, () => i++ >= (q.offset || 0))\n    }\n\n    if (q.limit != null) {\n      it = take(it, q.limit)\n    }\n\n    return it\n  }\n\n  /**\n   * @param {KeyQuery} q\n   * @param {Options} [options]\n   */\n  queryKeys (q, options) {\n    let it = this._allKeys(q, options)\n\n    if (q.prefix != null) {\n      it = filter(it, (/** @type {CID} */ cid) => cid.toString().startsWith(q.prefix || ''))\n    }\n\n    if (Array.isArray(q.filters)) {\n      it = q.filters.reduce((it, f) => filter(it, f), it)\n    }\n\n    if (Array.isArray(q.orders)) {\n      it = q.orders.reduce((it, f) => sortAll(it, f), it)\n    }\n\n    if (q.offset != null) {\n      let i = 0\n      it = filter(it, () => i++ >= /** @type {number} */ (q.offset))\n    }\n\n    if (q.limit != null) {\n      it = take(it, q.limit)\n    }\n\n    return it\n  }\n}\n\nmodule.exports = BlockstoreAdapter\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}