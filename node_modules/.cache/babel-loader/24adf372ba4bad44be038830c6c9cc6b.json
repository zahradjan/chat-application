{"ast":null,"code":"'use strict'; // @ts-ignore libp2p crypto has no types\n\nconst randomBytes = require('libp2p-crypto/src/random-bytes');\n\nconst {\n  toString: uint8ArrayToString\n} = require('uint8arrays/to-string');\n\nconst {\n  fromString: uint8ArrayFromString\n} = require('uint8arrays/from-string');\n\nconst PeerId = require('peer-id');\n\nconst {\n  sha256\n} = require('multiformats/hashes/sha2');\n/**\n * @typedef {import('./message/rpc').RPC.IMessage} IMessage\n * @typedef {import('./message/rpc').RPC.Message} Message\n * @typedef {import('.').InMessage} NormalizedIMessage\n */\n\n/**\n * Generatea random sequence number.\n *\n * @returns {Uint8Array}\n * @private\n */\n\n\nconst randomSeqno = () => {\n  return randomBytes(8);\n};\n/**\n * Generate a message id, based on the `from` and `seqno`.\n *\n * @param {Uint8Array|string} from\n * @param {Uint8Array} seqno\n * @returns {Uint8Array}\n * @private\n */\n\n\nconst msgId = (from, seqno) => {\n  let fromBytes;\n\n  if (from instanceof Uint8Array) {\n    fromBytes = PeerId.createFromBytes(from).id;\n  } else {\n    fromBytes = PeerId.parse(from).id;\n  }\n\n  const msgId = new Uint8Array(fromBytes.length + seqno.length);\n  msgId.set(fromBytes, 0);\n  msgId.set(seqno, fromBytes.length);\n  return msgId;\n};\n/**\n * Generate a message id, based on message `data`.\n *\n * @param {Uint8Array} data\n * @private\n */\n\n\nconst noSignMsgId = data => sha256.encode(data);\n/**\n * Check if any member of the first set is also a member\n * of the second set.\n *\n * @param {Set<number>|Array<number>} a\n * @param {Set<number>|Array<number>} b\n * @returns {boolean}\n * @private\n */\n\n\nconst anyMatch = (a, b) => {\n  let bHas;\n\n  if (Array.isArray(b)) {\n    /**\n     * @param {number} val\n     */\n    bHas = val => b.indexOf(val) > -1;\n  } else {\n    /**\n     * @param {number} val\n     */\n    bHas = val => b.has(val);\n  }\n\n  for (const val of a) {\n    if (bHas(val)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\n * Make everything an array.\n *\n * @template T\n * @param {T|T[]} maybeArray\n * @returns {T[]}\n * @private\n */\n\n\nconst ensureArray = maybeArray => {\n  if (!Array.isArray(maybeArray)) {\n    return [maybeArray];\n  }\n\n  return maybeArray;\n};\n/**\n * Ensures `message.from` is base58 encoded\n *\n * @template {{from?:any}} T\n * @param {T & IMessage} message\n * @param {string} [peerId]\n * @returns {NormalizedIMessage}\n */\n\n\nconst normalizeInRpcMessage = (message, peerId) => {\n  /** @type {NormalizedIMessage} */\n  // @ts-ignore receivedFrom not yet defined\n  const m = Object.assign({}, message);\n\n  if (message.from instanceof Uint8Array) {\n    m.from = uint8ArrayToString(message.from, 'base58btc');\n  }\n\n  if (peerId) {\n    m.receivedFrom = peerId;\n  }\n\n  return m;\n};\n/**\n * @template {{from?:any, data?:any}} T\n *\n * @param {T & NormalizedIMessage} message\n * @returns {Message}\n */\n\n\nconst normalizeOutRpcMessage = message => {\n  /** @type {Message} */\n  // @ts-ignore from not yet defined\n  const m = Object.assign({}, message);\n\n  if (typeof message.from === 'string') {\n    m.from = uint8ArrayFromString(message.from, 'base58btc');\n  }\n\n  if (typeof message.data === 'string') {\n    m.data = uint8ArrayFromString(message.data);\n  }\n\n  return m;\n};\n\nmodule.exports = {\n  randomSeqno,\n  msgId,\n  noSignMsgId,\n  anyMatch,\n  ensureArray,\n  normalizeInRpcMessage,\n  normalizeOutRpcMessage\n};","map":{"version":3,"names":["randomBytes","require","toString","uint8ArrayToString","fromString","uint8ArrayFromString","PeerId","sha256","randomSeqno","msgId","from","seqno","fromBytes","Uint8Array","createFromBytes","id","parse","length","set","noSignMsgId","data","encode","anyMatch","a","b","bHas","Array","isArray","val","indexOf","has","ensureArray","maybeArray","normalizeInRpcMessage","message","peerId","m","Object","assign","receivedFrom","normalizeOutRpcMessage","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-interfaces/src/pubsub/utils.js"],"sourcesContent":["'use strict'\n\n// @ts-ignore libp2p crypto has no types\nconst randomBytes = require('libp2p-crypto/src/random-bytes')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\nconst PeerId = require('peer-id')\nconst { sha256 } = require('multiformats/hashes/sha2')\n\n/**\n * @typedef {import('./message/rpc').RPC.IMessage} IMessage\n * @typedef {import('./message/rpc').RPC.Message} Message\n * @typedef {import('.').InMessage} NormalizedIMessage\n */\n\n/**\n * Generatea random sequence number.\n *\n * @returns {Uint8Array}\n * @private\n */\nconst randomSeqno = () => {\n  return randomBytes(8)\n}\n\n/**\n * Generate a message id, based on the `from` and `seqno`.\n *\n * @param {Uint8Array|string} from\n * @param {Uint8Array} seqno\n * @returns {Uint8Array}\n * @private\n */\nconst msgId = (from, seqno) => {\n  let fromBytes\n\n  if (from instanceof Uint8Array) {\n    fromBytes = PeerId.createFromBytes(from).id\n  } else {\n    fromBytes = PeerId.parse(from).id\n  }\n\n  const msgId = new Uint8Array(fromBytes.length + seqno.length)\n  msgId.set(fromBytes, 0)\n  msgId.set(seqno, fromBytes.length)\n  return msgId\n}\n\n/**\n * Generate a message id, based on message `data`.\n *\n * @param {Uint8Array} data\n * @private\n */\nconst noSignMsgId = (data) => sha256.encode(data)\n\n/**\n * Check if any member of the first set is also a member\n * of the second set.\n *\n * @param {Set<number>|Array<number>} a\n * @param {Set<number>|Array<number>} b\n * @returns {boolean}\n * @private\n */\nconst anyMatch = (a, b) => {\n  let bHas\n  if (Array.isArray(b)) {\n    /**\n     * @param {number} val\n     */\n    bHas = (val) => b.indexOf(val) > -1\n  } else {\n    /**\n     * @param {number} val\n     */\n    bHas = (val) => b.has(val)\n  }\n\n  for (const val of a) {\n    if (bHas(val)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Make everything an array.\n *\n * @template T\n * @param {T|T[]} maybeArray\n * @returns {T[]}\n * @private\n */\nconst ensureArray = (maybeArray) => {\n  if (!Array.isArray(maybeArray)) {\n    return [maybeArray]\n  }\n\n  return maybeArray\n}\n\n/**\n * Ensures `message.from` is base58 encoded\n *\n * @template {{from?:any}} T\n * @param {T & IMessage} message\n * @param {string} [peerId]\n * @returns {NormalizedIMessage}\n */\nconst normalizeInRpcMessage = (message, peerId) => {\n  /** @type {NormalizedIMessage} */\n  // @ts-ignore receivedFrom not yet defined\n  const m = Object.assign({}, message)\n  if (message.from instanceof Uint8Array) {\n    m.from = uint8ArrayToString(message.from, 'base58btc')\n  }\n  if (peerId) {\n    m.receivedFrom = peerId\n  }\n  return m\n}\n\n/**\n * @template {{from?:any, data?:any}} T\n *\n * @param {T & NormalizedIMessage} message\n * @returns {Message}\n */\nconst normalizeOutRpcMessage = (message) => {\n  /** @type {Message} */\n  // @ts-ignore from not yet defined\n  const m = Object.assign({}, message)\n  if (typeof message.from === 'string') {\n    m.from = uint8ArrayFromString(message.from, 'base58btc')\n  }\n  if (typeof message.data === 'string') {\n    m.data = uint8ArrayFromString(message.data)\n  }\n  return m\n}\n\nmodule.exports = {\n  randomSeqno,\n  msgId,\n  noSignMsgId,\n  anyMatch,\n  ensureArray,\n  normalizeInRpcMessage,\n  normalizeOutRpcMessage\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}