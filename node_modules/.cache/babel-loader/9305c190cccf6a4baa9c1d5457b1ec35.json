{"ast":null,"code":"'use strict';\n\nvar _require = require('multiformats/bases/base58'),\n    base58btc = _require.base58btc;\n\nvar _require2 = require('multiformats/bases/base32'),\n    base32 = _require2.base32;\n\nvar Digest = require('multiformats/hashes/digest');\n\nvar _require3 = require('multiaddr'),\n    Multiaddr = _require3.Multiaddr;\n\nvar mafmt = require('mafmt');\n\nvar _require4 = require('multiformats/cid'),\n    CID = _require4.CID;\n\nvar _require5 = require('iso-url'),\n    URL = _require5.URL;\n\nvar _require6 = require('uint8arrays/to-string'),\n    uint8ArrayToString = _require6.toString;\n\nvar pathGatewayPattern = /^https?:\\/\\/[^/]+\\/(ip[fn]s)\\/([^/?#]+)/;\nvar pathPattern = /^\\/(ip[fn]s)\\/([^/?#]+)/;\nvar defaultProtocolMatch = 1;\nvar defaultHashMath = 2; // CID, libp2p-key or DNSLink\n\nvar subdomainGatewayPattern = /^https?:\\/\\/([^/]+)\\.(ip[fn]s)\\.[^/?]+/;\nvar subdomainIdMatch = 1;\nvar subdomainProtocolMatch = 2; // Fully qualified domain name (FQDN) that has an explicit .tld suffix\n\nvar fqdnWithTld = /^(([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])\\.)+([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])$/;\n/**\n * @param {*} hash\n */\n\nfunction isMultihash(hash) {\n  var formatted = convertToString(hash);\n\n  try {\n    Digest.decode(base58btc.decode('z' + formatted));\n  } catch (_unused) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * @param {*} hash\n */\n\n\nfunction isBase32EncodedMultibase(hash) {\n  try {\n    base32.decode(hash);\n  } catch (_unused2) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * @param {*} hash\n */\n\n\nfunction isCID(hash) {\n  try {\n    if (typeof hash === 'string') {\n      return Boolean(CID.parse(hash));\n    }\n\n    if (hash instanceof Uint8Array) {\n      return Boolean(CID.decode(hash));\n    }\n\n    return Boolean(CID.asCID(hash)); // eslint-disable-line no-new\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * @param {*} input\n */\n\n\nfunction isMultiaddr(input) {\n  if (!input) return false;\n  if (Multiaddr.isMultiaddr(input)) return true;\n\n  try {\n    new Multiaddr(input); // eslint-disable-line no-new\n\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * @param {string | Uint8Array | Multiaddr} input\n */\n\n\nfunction isPeerMultiaddr(input) {\n  return isMultiaddr(input) && mafmt.P2P.matches(input);\n}\n/**\n * @param {string | Uint8Array} input\n * @param {RegExp | string} pattern\n * @param {number} [protocolMatch=1]\n * @param {number} [hashMatch=2]\n */\n\n\nfunction isIpfs(input, pattern) {\n  var protocolMatch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultProtocolMatch;\n  var hashMatch = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultHashMath;\n  var formatted = convertToString(input);\n\n  if (!formatted) {\n    return false;\n  }\n\n  var match = formatted.match(pattern);\n\n  if (!match) {\n    return false;\n  }\n\n  if (match[protocolMatch] !== 'ipfs') {\n    return false;\n  }\n\n  var hash = match[hashMatch];\n\n  if (hash && pattern === subdomainGatewayPattern) {\n    // when doing checks for subdomain context\n    // ensure hash is case-insensitive\n    // (browsers force-lowercase authority component anyway)\n    hash = hash.toLowerCase();\n  }\n\n  return isCID(hash);\n}\n/**\n *\n * @param {string | Uint8Array} input\n * @param {string | RegExp} pattern\n * @param {number} [protocolMatch=1]\n * @param {number} [hashMatch=1]\n */\n\n\nfunction isIpns(input, pattern) {\n  var protocolMatch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultProtocolMatch;\n  var hashMatch = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultHashMath;\n  var formatted = convertToString(input);\n\n  if (!formatted) {\n    return false;\n  }\n\n  var match = formatted.match(pattern);\n\n  if (!match) {\n    return false;\n  }\n\n  if (match[protocolMatch] !== 'ipns') {\n    return false;\n  }\n\n  var ipnsId = match[hashMatch];\n\n  if (ipnsId && pattern === subdomainGatewayPattern) {\n    // when doing checks for subdomain context\n    // ensure ipnsId is case-insensitive\n    // (browsers force-lowercase authority compotent anyway)\n    ipnsId = ipnsId.toLowerCase(); // Check if it is cidv1\n\n    if (isCID(ipnsId)) return true; // Check if it looks like FQDN\n\n    try {\n      if (!ipnsId.includes('.') && ipnsId.includes('-')) {\n        // name without tld, assuming its inlined into a single DNS label\n        // (https://github.com/ipfs/in-web-browsers/issues/169)\n        // en-wikipedia--on--ipfs-org â†’ en.wikipedia-on-ipfs.org\n        ipnsId = ipnsId.replace(/--/g, '@').replace(/-/g, '.').replace(/@/g, '-');\n      } // URL implementation in web browsers forces lowercase of the hostname\n\n\n      var _URL = new URL(\"http://\".concat(ipnsId)),\n          hostname = _URL.hostname; // eslint-disable-line no-new\n      // Check if potential FQDN has an explicit TLD\n\n\n      return fqdnWithTld.test(hostname);\n    } catch (e) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * @param {any} input\n */\n\n\nfunction isString(input) {\n  return typeof input === 'string';\n}\n/**\n * @param {Uint8Array | string} input\n */\n\n\nfunction convertToString(input) {\n  if (input instanceof Uint8Array) {\n    return uint8ArrayToString(input, 'base58btc');\n  }\n\n  if (isString(input)) {\n    return input;\n  }\n\n  return false;\n}\n/**\n * @param {string | Uint8Array} url\n */\n\n\nvar ipfsSubdomain = function ipfsSubdomain(url) {\n  return isIpfs(url, subdomainGatewayPattern, subdomainProtocolMatch, subdomainIdMatch);\n};\n/**\n * @param {string | Uint8Array} url\n */\n\n\nvar ipnsSubdomain = function ipnsSubdomain(url) {\n  return isIpns(url, subdomainGatewayPattern, subdomainProtocolMatch, subdomainIdMatch);\n};\n/**\n * @param {string | Uint8Array} url\n */\n\n\nvar subdomain = function subdomain(url) {\n  return ipfsSubdomain(url) || ipnsSubdomain(url);\n};\n/**\n * @param {string | Uint8Array} url\n */\n\n\nvar ipfsUrl = function ipfsUrl(url) {\n  return isIpfs(url, pathGatewayPattern) || ipfsSubdomain(url);\n};\n/**\n * @param {string | Uint8Array} url\n */\n\n\nvar ipnsUrl = function ipnsUrl(url) {\n  return isIpns(url, pathGatewayPattern) || ipnsSubdomain(url);\n};\n/**\n * @param {string | Uint8Array} url\n */\n\n\nvar url = function url(_url) {\n  return ipfsUrl(_url) || ipnsUrl(_url) || subdomain(_url);\n};\n/**\n * @param {string | Uint8Array} path\n */\n\n\nvar path = function path(_path) {\n  return isIpfs(_path, pathPattern) || isIpns(_path, pathPattern);\n};\n\nmodule.exports = {\n  multihash: isMultihash,\n  multiaddr: isMultiaddr,\n  peerMultiaddr: isPeerMultiaddr,\n  cid: isCID,\n\n  /**\n   * @param {CID | string | Uint8Array} cid\n   */\n  base32cid: function base32cid(cid) {\n    return isBase32EncodedMultibase(cid) && isCID(cid);\n  },\n  ipfsSubdomain: ipfsSubdomain,\n  ipnsSubdomain: ipnsSubdomain,\n  subdomain: subdomain,\n  subdomainGatewayPattern: subdomainGatewayPattern,\n  ipfsUrl: ipfsUrl,\n  ipnsUrl: ipnsUrl,\n  url: url,\n  pathGatewayPattern: pathGatewayPattern,\n\n  /**\n   * @param {string | Uint8Array} path\n   */\n  ipfsPath: function ipfsPath(path) {\n    return isIpfs(path, pathPattern);\n  },\n\n  /**\n   * @param {string | Uint8Array} path\n   */\n  ipnsPath: function ipnsPath(path) {\n    return isIpns(path, pathPattern);\n  },\n  path: path,\n  pathPattern: pathPattern,\n\n  /**\n   * @param {string | Uint8Array} x\n   */\n  urlOrPath: function urlOrPath(x) {\n    return url(x) || path(x);\n  },\n\n  /**\n   * @param {string | Uint8Array | CID} path\n   */\n  cidPath: function cidPath(path) {\n    return isString(path) && !isCID(path) && isIpfs(\"/ipfs/\".concat(path), pathPattern);\n  }\n};","map":{"version":3,"names":["require","base58btc","base32","Digest","Multiaddr","mafmt","CID","URL","uint8ArrayToString","toString","pathGatewayPattern","pathPattern","defaultProtocolMatch","defaultHashMath","subdomainGatewayPattern","subdomainIdMatch","subdomainProtocolMatch","fqdnWithTld","isMultihash","hash","formatted","convertToString","decode","isBase32EncodedMultibase","isCID","Boolean","parse","Uint8Array","asCID","e","isMultiaddr","input","isPeerMultiaddr","P2P","matches","isIpfs","pattern","protocolMatch","hashMatch","match","toLowerCase","isIpns","ipnsId","includes","replace","hostname","test","isString","ipfsSubdomain","url","ipnsSubdomain","subdomain","ipfsUrl","ipnsUrl","path","module","exports","multihash","multiaddr","peerMultiaddr","cid","base32cid","ipfsPath","ipnsPath","urlOrPath","x","cidPath"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/is-ipfs/src/index.js"],"sourcesContent":["'use strict'\n\nconst { base58btc } = require('multiformats/bases/base58')\nconst { base32 } = require('multiformats/bases/base32')\nconst Digest = require('multiformats/hashes/digest')\nconst { Multiaddr } = require('multiaddr')\nconst mafmt = require('mafmt')\nconst { CID } = require('multiformats/cid')\nconst { URL } = require('iso-url')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\n\nconst pathGatewayPattern = /^https?:\\/\\/[^/]+\\/(ip[fn]s)\\/([^/?#]+)/\nconst pathPattern = /^\\/(ip[fn]s)\\/([^/?#]+)/\nconst defaultProtocolMatch = 1\nconst defaultHashMath = 2\n\n// CID, libp2p-key or DNSLink\nconst subdomainGatewayPattern = /^https?:\\/\\/([^/]+)\\.(ip[fn]s)\\.[^/?]+/\nconst subdomainIdMatch = 1\nconst subdomainProtocolMatch = 2\n\n// Fully qualified domain name (FQDN) that has an explicit .tld suffix\nconst fqdnWithTld = /^(([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])\\.)+([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])$/\n\n/**\n * @param {*} hash\n */\nfunction isMultihash (hash) {\n  const formatted = convertToString(hash)\n  try {\n    Digest.decode(base58btc.decode('z' + formatted))\n  } catch {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {*} hash\n */\nfunction isBase32EncodedMultibase (hash) {\n  try {\n    base32.decode(hash)\n  } catch {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {*} hash\n */\nfunction isCID (hash) {\n  try {\n    if (typeof hash === 'string') {\n      return Boolean(CID.parse(hash))\n    }\n\n    if (hash instanceof Uint8Array) {\n      return Boolean(CID.decode(hash))\n    }\n\n    return Boolean(CID.asCID(hash)) // eslint-disable-line no-new\n  } catch (e) {\n    return false\n  }\n}\n\n/**\n * @param {*} input\n */\nfunction isMultiaddr (input) {\n  if (!input) return false\n  if (Multiaddr.isMultiaddr(input)) return true\n  try {\n    new Multiaddr(input) // eslint-disable-line no-new\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\n/**\n * @param {string | Uint8Array | Multiaddr} input\n */\nfunction isPeerMultiaddr (input) {\n  return isMultiaddr(input) && mafmt.P2P.matches(input)\n}\n\n/**\n * @param {string | Uint8Array} input\n * @param {RegExp | string} pattern\n * @param {number} [protocolMatch=1]\n * @param {number} [hashMatch=2]\n */\nfunction isIpfs (input, pattern, protocolMatch = defaultProtocolMatch, hashMatch = defaultHashMath) {\n  const formatted = convertToString(input)\n  if (!formatted) {\n    return false\n  }\n\n  const match = formatted.match(pattern)\n  if (!match) {\n    return false\n  }\n\n  if (match[protocolMatch] !== 'ipfs') {\n    return false\n  }\n\n  let hash = match[hashMatch]\n\n  if (hash && pattern === subdomainGatewayPattern) {\n    // when doing checks for subdomain context\n    // ensure hash is case-insensitive\n    // (browsers force-lowercase authority component anyway)\n    hash = hash.toLowerCase()\n  }\n\n  return isCID(hash)\n}\n\n/**\n *\n * @param {string | Uint8Array} input\n * @param {string | RegExp} pattern\n * @param {number} [protocolMatch=1]\n * @param {number} [hashMatch=1]\n */\nfunction isIpns (input, pattern, protocolMatch = defaultProtocolMatch, hashMatch = defaultHashMath) {\n  const formatted = convertToString(input)\n  if (!formatted) {\n    return false\n  }\n  const match = formatted.match(pattern)\n  if (!match) {\n    return false\n  }\n\n  if (match[protocolMatch] !== 'ipns') {\n    return false\n  }\n\n  let ipnsId = match[hashMatch]\n\n  if (ipnsId && pattern === subdomainGatewayPattern) {\n    // when doing checks for subdomain context\n    // ensure ipnsId is case-insensitive\n    // (browsers force-lowercase authority compotent anyway)\n    ipnsId = ipnsId.toLowerCase()\n    // Check if it is cidv1\n    if (isCID(ipnsId)) return true\n    // Check if it looks like FQDN\n    try {\n      if (!ipnsId.includes('.') && ipnsId.includes('-')) {\n        // name without tld, assuming its inlined into a single DNS label\n        // (https://github.com/ipfs/in-web-browsers/issues/169)\n        // en-wikipedia--on--ipfs-org â†’ en.wikipedia-on-ipfs.org\n        ipnsId = ipnsId.replace(/--/g, '@').replace(/-/g, '.').replace(/@/g, '-')\n      }\n      // URL implementation in web browsers forces lowercase of the hostname\n      const { hostname } = new URL(`http://${ipnsId}`) // eslint-disable-line no-new\n      // Check if potential FQDN has an explicit TLD\n      return fqdnWithTld.test(hostname)\n    } catch (e) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * @param {any} input\n */\nfunction isString (input) {\n  return typeof input === 'string'\n}\n\n/**\n * @param {Uint8Array | string} input\n */\nfunction convertToString (input) {\n  if (input instanceof Uint8Array) {\n    return uint8ArrayToString(input, 'base58btc')\n  }\n\n  if (isString(input)) {\n    return input\n  }\n\n  return false\n}\n\n/**\n * @param {string | Uint8Array} url\n */\nconst ipfsSubdomain = (url) => isIpfs(url, subdomainGatewayPattern, subdomainProtocolMatch, subdomainIdMatch)\n/**\n * @param {string | Uint8Array} url\n */\nconst ipnsSubdomain = (url) => isIpns(url, subdomainGatewayPattern, subdomainProtocolMatch, subdomainIdMatch)\n/**\n * @param {string | Uint8Array} url\n */\nconst subdomain = (url) => ipfsSubdomain(url) || ipnsSubdomain(url)\n\n/**\n * @param {string | Uint8Array} url\n */\nconst ipfsUrl = (url) => isIpfs(url, pathGatewayPattern) || ipfsSubdomain(url)\n/**\n * @param {string | Uint8Array} url\n */\nconst ipnsUrl = (url) => isIpns(url, pathGatewayPattern) || ipnsSubdomain(url)\n/**\n * @param {string | Uint8Array} url\n */\nconst url = (url) => ipfsUrl(url) || ipnsUrl(url) || subdomain(url)\n\n/**\n * @param {string | Uint8Array} path\n */\nconst path = (path) => isIpfs(path, pathPattern) || isIpns(path, pathPattern)\n\nmodule.exports = {\n  multihash: isMultihash,\n  multiaddr: isMultiaddr,\n  peerMultiaddr: isPeerMultiaddr,\n  cid: isCID,\n  /**\n   * @param {CID | string | Uint8Array} cid\n   */\n  base32cid: (cid) => (isBase32EncodedMultibase(cid) && isCID(cid)),\n  ipfsSubdomain,\n  ipnsSubdomain,\n  subdomain,\n  subdomainGatewayPattern,\n  ipfsUrl,\n  ipnsUrl,\n  url,\n  pathGatewayPattern: pathGatewayPattern,\n  /**\n   * @param {string | Uint8Array} path\n   */\n  ipfsPath: (path) => isIpfs(path, pathPattern),\n  /**\n   * @param {string | Uint8Array} path\n   */\n  ipnsPath: (path) => isIpns(path, pathPattern),\n  path,\n  pathPattern,\n  /**\n   * @param {string | Uint8Array} x\n   */\n  urlOrPath: (x) => url(x) || path(x),\n  /**\n   * @param {string | Uint8Array | CID} path\n   */\n  cidPath: path => isString(path) && !isCID(path) && isIpfs(`/ipfs/${path}`, pathPattern)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}