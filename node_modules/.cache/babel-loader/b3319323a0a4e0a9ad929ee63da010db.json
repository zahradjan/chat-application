{"ast":null,"code":"'use strict';\n/**\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n * @typedef {import('./types').LoadBaseFn} LoadBaseFn\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @type {LoadBaseFn}\n */\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _createForOfIteratorHelper = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar LOAD_BASE = function LOAD_BASE(name) {\n  return Promise.reject(new Error(\"No base found for \\\"\".concat(name, \"\\\"\")));\n};\n\nvar Multibases = /*#__PURE__*/function () {\n  /**\n   * @param {object} options\n   * @param {LoadBaseFn} [options.loadBase]\n   * @param {MultibaseCodec[]} options.bases\n   */\n  function Multibases(options) {\n    _classCallCheck(this, Multibases);\n\n    // Object with current list of active resolvers\n\n    /** @type {Record<string, MultibaseCodec>}} */\n    this._basesByName = {}; // Object with current list of active resolvers\n\n    /** @type {Record<string, MultibaseCodec>}} */\n\n    this._basesByPrefix = {};\n    this._loadBase = options.loadBase || LOAD_BASE; // Enable all supplied codecs\n\n    var _iterator = _createForOfIteratorHelper(options.bases),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var base = _step.value;\n        this.addBase(base);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  /**\n   * Add support for a multibase codec\n   *\n   * @param {MultibaseCodec} base\n   */\n\n\n  _createClass(Multibases, [{\n    key: \"addBase\",\n    value: function addBase(base) {\n      if (this._basesByName[base.name] || this._basesByPrefix[base.prefix]) {\n        throw new Error(\"Codec already exists for codec \\\"\".concat(base.name, \"\\\"\"));\n      }\n\n      this._basesByName[base.name] = base;\n      this._basesByPrefix[base.prefix] = base;\n    }\n    /**\n     * Remove support for a multibase codec\n     *\n     * @param {MultibaseCodec} base\n     */\n\n  }, {\n    key: \"removeBase\",\n    value: function removeBase(base) {\n      delete this._basesByName[base.name];\n      delete this._basesByPrefix[base.prefix];\n    }\n    /**\n     * @param {string} nameOrPrefix\n     */\n\n  }, {\n    key: \"getBase\",\n    value: function () {\n      var _getBase = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(nameOrPrefix) {\n        var base;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this._basesByName[nameOrPrefix]) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", this._basesByName[nameOrPrefix]);\n\n              case 2:\n                if (!this._basesByPrefix[nameOrPrefix]) {\n                  _context.next = 4;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", this._basesByPrefix[nameOrPrefix]);\n\n              case 4:\n                _context.next = 6;\n                return this._loadBase(nameOrPrefix);\n\n              case 6:\n                base = _context.sent;\n\n                if (this._basesByName[base.name] == null && this._basesByPrefix[base.prefix] == null) {\n                  this.addBase(base);\n                }\n\n                return _context.abrupt(\"return\", base);\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getBase(_x) {\n        return _getBase.apply(this, arguments);\n      }\n\n      return getBase;\n    }()\n  }, {\n    key: \"listBases\",\n    value: function listBases() {\n      return Object.values(this._basesByName);\n    }\n  }]);\n\n  return Multibases;\n}();\n\nmodule.exports = Multibases;","map":{"version":3,"names":["LOAD_BASE","name","Promise","reject","Error","Multibases","options","_basesByName","_basesByPrefix","_loadBase","loadBase","bases","base","addBase","prefix","nameOrPrefix","Object","values","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core-utils/src/multibases.js"],"sourcesContent":["'use strict'\n\n/**\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n * @typedef {import('./types').LoadBaseFn} LoadBaseFn\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @type {LoadBaseFn}\n */\nconst LOAD_BASE = (name) => Promise.reject(new Error(`No base found for \"${name}\"`))\n\nclass Multibases {\n  /**\n   * @param {object} options\n   * @param {LoadBaseFn} [options.loadBase]\n   * @param {MultibaseCodec[]} options.bases\n   */\n  constructor (options) {\n    // Object with current list of active resolvers\n    /** @type {Record<string, MultibaseCodec>}} */\n    this._basesByName = {}\n\n    // Object with current list of active resolvers\n    /** @type {Record<string, MultibaseCodec>}} */\n    this._basesByPrefix = {}\n\n    this._loadBase = options.loadBase || LOAD_BASE\n\n    // Enable all supplied codecs\n    for (const base of options.bases) {\n      this.addBase(base)\n    }\n  }\n\n  /**\n   * Add support for a multibase codec\n   *\n   * @param {MultibaseCodec} base\n   */\n  addBase (base) {\n    if (this._basesByName[base.name] || this._basesByPrefix[base.prefix]) {\n      throw new Error(`Codec already exists for codec \"${base.name}\"`)\n    }\n\n    this._basesByName[base.name] = base\n    this._basesByPrefix[base.prefix] = base\n  }\n\n  /**\n   * Remove support for a multibase codec\n   *\n   * @param {MultibaseCodec} base\n   */\n  removeBase (base) {\n    delete this._basesByName[base.name]\n    delete this._basesByPrefix[base.prefix]\n  }\n\n  /**\n   * @param {string} nameOrPrefix\n   */\n  async getBase (nameOrPrefix) {\n    if (this._basesByName[nameOrPrefix]) {\n      return this._basesByName[nameOrPrefix]\n    }\n\n    if (this._basesByPrefix[nameOrPrefix]) {\n      return this._basesByPrefix[nameOrPrefix]\n    }\n\n    // If not supported, attempt to dynamically load this codec\n    const base = await this._loadBase(nameOrPrefix)\n\n    if (this._basesByName[base.name] == null && this._basesByPrefix[base.prefix] == null) {\n      this.addBase(base)\n    }\n\n    return base\n  }\n\n  listBases () {\n    return Object.values(this._basesByName)\n  }\n}\n\nmodule.exports = Multibases\n"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;AACA,IAAMA,SAAS,GAAG,SAAZA,SAAY,CAACC,IAAD;EAAA,OAAUC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,+BAAgCH,IAAhC,QAAf,CAAV;AAAA,CAAlB;;IAEMI,U;EACJ;AACF;AACA;AACA;AACA;EACE,oBAAaC,OAAb,EAAsB;IAAA;;IACpB;;IACA;IACA,KAAKC,YAAL,GAAoB,EAApB,CAHoB,CAKpB;;IACA;;IACA,KAAKC,cAAL,GAAsB,EAAtB;IAEA,KAAKC,SAAL,GAAiBH,OAAO,CAACI,QAAR,IAAoBV,SAArC,CAToB,CAWpB;;IAXoB,2CAYDM,OAAO,CAACK,KAZP;IAAA;;IAAA;MAYpB,oDAAkC;QAAA,IAAvBC,IAAuB;QAChC,KAAKC,OAAL,CAAaD,IAAb;MACD;IAdmB;MAAA;IAAA;MAAA;IAAA;EAerB;EAED;AACF;AACA;AACA;AACA;;;;;WACE,iBAASA,IAAT,EAAe;MACb,IAAI,KAAKL,YAAL,CAAkBK,IAAI,CAACX,IAAvB,KAAgC,KAAKO,cAAL,CAAoBI,IAAI,CAACE,MAAzB,CAApC,EAAsE;QACpE,MAAM,IAAIV,KAAJ,4CAA6CQ,IAAI,CAACX,IAAlD,QAAN;MACD;;MAED,KAAKM,YAAL,CAAkBK,IAAI,CAACX,IAAvB,IAA+BW,IAA/B;MACA,KAAKJ,cAAL,CAAoBI,IAAI,CAACE,MAAzB,IAAmCF,IAAnC;IACD;IAED;AACF;AACA;AACA;AACA;;;;WACE,oBAAYA,IAAZ,EAAkB;MAChB,OAAO,KAAKL,YAAL,CAAkBK,IAAI,CAACX,IAAvB,CAAP;MACA,OAAO,KAAKO,cAAL,CAAoBI,IAAI,CAACE,MAAzB,CAAP;IACD;IAED;AACF;AACA;;;;;gFACE,iBAAeC,YAAf;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,KACM,KAAKR,YAAL,CAAkBQ,YAAlB,CADN;kBAAA;kBAAA;gBAAA;;gBAAA,iCAEW,KAAKR,YAAL,CAAkBQ,YAAlB,CAFX;;cAAA;gBAAA,KAKM,KAAKP,cAAL,CAAoBO,YAApB,CALN;kBAAA;kBAAA;gBAAA;;gBAAA,iCAMW,KAAKP,cAAL,CAAoBO,YAApB,CANX;;cAAA;gBAAA;gBAAA,OAUqB,KAAKN,SAAL,CAAeM,YAAf,CAVrB;;cAAA;gBAUQH,IAVR;;gBAYE,IAAI,KAAKL,YAAL,CAAkBK,IAAI,CAACX,IAAvB,KAAgC,IAAhC,IAAwC,KAAKO,cAAL,CAAoBI,IAAI,CAACE,MAAzB,KAAoC,IAAhF,EAAsF;kBACpF,KAAKD,OAAL,CAAaD,IAAb;gBACD;;gBAdH,iCAgBSA,IAhBT;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;;;WAmBA,qBAAa;MACX,OAAOI,MAAM,CAACC,MAAP,CAAc,KAAKV,YAAnB,CAAP;IACD;;;;;;AAGHW,MAAM,CAACC,OAAP,GAAiBd,UAAjB"},"metadata":{},"sourceType":"script"}