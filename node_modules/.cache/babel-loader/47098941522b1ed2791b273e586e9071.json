{"ast":null,"code":"'use strict';\n\nvar BufferList = require('bl/BufferList.js');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar BufferList__default = /*#__PURE__*/_interopDefaultLegacy(BufferList);\n\nasync function* fixedSizeChunker(source, options) {\n  let bl = new BufferList__default[\"default\"]();\n  let currentLength = 0;\n  let emitted = false;\n  const maxChunkSize = options.maxChunkSize;\n\n  for await (const buffer of source) {\n    bl.append(buffer);\n    currentLength += buffer.length;\n\n    while (currentLength >= maxChunkSize) {\n      yield bl.slice(0, maxChunkSize);\n      emitted = true;\n\n      if (maxChunkSize === bl.length) {\n        bl = new BufferList__default[\"default\"]();\n        currentLength = 0;\n      } else {\n        const newBl = new BufferList__default[\"default\"]();\n        newBl.append(bl.shallowSlice(maxChunkSize));\n        bl = newBl;\n        currentLength -= maxChunkSize;\n      }\n    }\n  }\n\n  if (!emitted || currentLength) {\n    yield bl.slice(0, currentLength);\n  }\n}\n\nmodule.exports = fixedSizeChunker;","map":{"version":3,"names":["BufferList","require","_interopDefaultLegacy","e","BufferList__default","fixedSizeChunker","source","options","bl","currentLength","emitted","maxChunkSize","buffer","append","length","slice","newBl","shallowSlice","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-unixfs-importer/cjs/src/chunker/fixed-size.js"],"sourcesContent":["'use strict';\n\nvar BufferList = require('bl/BufferList.js');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar BufferList__default = /*#__PURE__*/_interopDefaultLegacy(BufferList);\n\nasync function* fixedSizeChunker(source, options) {\n  let bl = new BufferList__default[\"default\"]();\n  let currentLength = 0;\n  let emitted = false;\n  const maxChunkSize = options.maxChunkSize;\n  for await (const buffer of source) {\n    bl.append(buffer);\n    currentLength += buffer.length;\n    while (currentLength >= maxChunkSize) {\n      yield bl.slice(0, maxChunkSize);\n      emitted = true;\n      if (maxChunkSize === bl.length) {\n        bl = new BufferList__default[\"default\"]();\n        currentLength = 0;\n      } else {\n        const newBl = new BufferList__default[\"default\"]();\n        newBl.append(bl.shallowSlice(maxChunkSize));\n        bl = newBl;\n        currentLength -= maxChunkSize;\n      }\n    }\n  }\n  if (!emitted || currentLength) {\n    yield bl.slice(0, currentLength);\n  }\n}\n\nmodule.exports = fixedSizeChunker;\n"],"mappings":"AAAA;;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,kBAAD,CAAxB;;AAEA,SAASC,qBAAT,CAAgCC,CAAhC,EAAmC;EAAE,OAAOA,CAAC,IAAI,OAAOA,CAAP,KAAa,QAAlB,IAA8B,aAAaA,CAA3C,GAA+CA,CAA/C,GAAmD;IAAE,WAAWA;EAAb,CAA1D;AAA6E;;AAElH,IAAIC,mBAAmB,GAAG,aAAaF,qBAAqB,CAACF,UAAD,CAA5D;;AAEA,gBAAgBK,gBAAhB,CAAiCC,MAAjC,EAAyCC,OAAzC,EAAkD;EAChD,IAAIC,EAAE,GAAG,IAAIJ,mBAAmB,CAAC,SAAD,CAAvB,EAAT;EACA,IAAIK,aAAa,GAAG,CAApB;EACA,IAAIC,OAAO,GAAG,KAAd;EACA,MAAMC,YAAY,GAAGJ,OAAO,CAACI,YAA7B;;EACA,WAAW,MAAMC,MAAjB,IAA2BN,MAA3B,EAAmC;IACjCE,EAAE,CAACK,MAAH,CAAUD,MAAV;IACAH,aAAa,IAAIG,MAAM,CAACE,MAAxB;;IACA,OAAOL,aAAa,IAAIE,YAAxB,EAAsC;MACpC,MAAMH,EAAE,CAACO,KAAH,CAAS,CAAT,EAAYJ,YAAZ,CAAN;MACAD,OAAO,GAAG,IAAV;;MACA,IAAIC,YAAY,KAAKH,EAAE,CAACM,MAAxB,EAAgC;QAC9BN,EAAE,GAAG,IAAIJ,mBAAmB,CAAC,SAAD,CAAvB,EAAL;QACAK,aAAa,GAAG,CAAhB;MACD,CAHD,MAGO;QACL,MAAMO,KAAK,GAAG,IAAIZ,mBAAmB,CAAC,SAAD,CAAvB,EAAd;QACAY,KAAK,CAACH,MAAN,CAAaL,EAAE,CAACS,YAAH,CAAgBN,YAAhB,CAAb;QACAH,EAAE,GAAGQ,KAAL;QACAP,aAAa,IAAIE,YAAjB;MACD;IACF;EACF;;EACD,IAAI,CAACD,OAAD,IAAYD,aAAhB,EAA+B;IAC7B,MAAMD,EAAE,CAACO,KAAH,CAAS,CAAT,EAAYN,aAAZ,CAAN;EACD;AACF;;AAEDS,MAAM,CAACC,OAAP,GAAiBd,gBAAjB"},"metadata":{},"sourceType":"script"}