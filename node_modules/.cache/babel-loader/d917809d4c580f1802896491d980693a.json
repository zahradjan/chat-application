{"ast":null,"code":"'use strict';\n\nconst {\n  EventEmitter\n} = require('events');\n\nconst MovingAverage = require('@vascosantos/moving-average');\n/**\n * @typedef {import('@vascosantos/moving-average').IMovingAverage} IMovingAverage\n * @typedef {[string, number, number]} Op\n */\n\n\nclass Stats extends EventEmitter {\n  /**\n   *\n   * @param {string[]} initialCounters\n   * @param {Object} options\n   * @param {boolean} options.enabled\n   * @param {number} options.computeThrottleTimeout\n   * @param {number} options.computeThrottleMaxQueueSize\n   * @param {import('.').AverageIntervals} options.movingAverageIntervals\n   */\n  constructor(initialCounters, options) {\n    super();\n    this._options = options;\n    /** @type {Op[]} */\n\n    this._queue = [];\n    /** @type {Record<string, bigint>} */\n\n    this._stats = {};\n    this._frequencyLastTime = Date.now();\n    /** @type {Record<string, number>} */\n\n    this._frequencyAccumulators = {};\n    /** @type {Record<string, Record<number, IMovingAverage>>} */\n\n    this._movingAverages = {};\n    this._update = this._update.bind(this);\n    initialCounters.forEach(key => {\n      this._stats[key] = BigInt(0);\n      this._movingAverages[key] = {};\n\n      this._options.movingAverageIntervals.forEach(interval => {\n        const ma = this._movingAverages[key][interval] = MovingAverage(interval);\n        ma.push(this._frequencyLastTime, 0);\n      });\n    });\n    this._enabled = this._options.enabled;\n  }\n\n  enable() {\n    this._enabled = true;\n  }\n\n  disable() {\n    this._disabled = true;\n  }\n\n  stop() {\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n  }\n\n  get snapshot() {\n    return Object.assign({}, this._stats);\n  }\n\n  get movingAverages() {\n    return Object.assign({}, this._movingAverages);\n  }\n  /**\n   * @param {string} counter\n   * @param {number} inc\n   */\n\n\n  push(counter, inc) {\n    if (this._enabled) {\n      this._queue.push([counter, inc, Date.now()]);\n\n      this._resetComputeTimeout();\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  _resetComputeTimeout() {\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n\n    this._timeout = setTimeout(this._update, this._nextTimeout());\n  }\n  /**\n   * @private\n   * @returns {number}\n   */\n\n\n  _nextTimeout() {\n    // calculate the need for an update, depending on the queue length\n    const urgency = this._queue.length / this._options.computeThrottleMaxQueueSize;\n    return Math.max(this._options.computeThrottleTimeout * (1 - urgency), 0);\n  }\n  /**\n   * @private\n   */\n\n\n  _update() {\n    this._timeout = null;\n\n    if (this._queue.length) {\n      let last;\n\n      while (this._queue.length) {\n        const op = last = this._queue.shift();\n\n        op && this._applyOp(op);\n      }\n\n      last && this._updateFrequency(last[2]); // contains timestamp of last op\n\n      this.emit('update', this._stats);\n    }\n  }\n  /**\n   * @private\n   * @param {number} latestTime\n   */\n\n\n  _updateFrequency(latestTime) {\n    const timeDiff = latestTime - this._frequencyLastTime;\n\n    if (timeDiff) {\n      Object.keys(this._stats).forEach(key => {\n        this._updateFrequencyFor(key, timeDiff, latestTime);\n      });\n    }\n\n    this._frequencyLastTime = latestTime;\n  }\n  /**\n   * @private\n   * @param {string} key\n   * @param {number} timeDiffMS\n   * @param {number} latestTime\n   * @returns {void}\n   */\n\n\n  _updateFrequencyFor(key, timeDiffMS, latestTime) {\n    const count = this._frequencyAccumulators[key] || 0;\n    this._frequencyAccumulators[key] = 0;\n    const hz = count / timeDiffMS * 1000;\n    let movingAverages = this._movingAverages[key];\n\n    if (!movingAverages) {\n      movingAverages = this._movingAverages[key] = {};\n    }\n\n    this._options.movingAverageIntervals.forEach(movingAverageInterval => {\n      let movingAverage = movingAverages[movingAverageInterval];\n\n      if (!movingAverage) {\n        movingAverage = movingAverages[movingAverageInterval] = MovingAverage(movingAverageInterval);\n      }\n\n      movingAverage.push(latestTime, hz);\n    });\n  }\n  /**\n   * @private\n   * @param {Op} op\n   */\n\n\n  _applyOp(op) {\n    const key = op[0];\n    const inc = op[1];\n\n    if (typeof inc !== 'number') {\n      throw new Error(`invalid increment number: ${inc}`);\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(this._stats, key)) {\n      this._stats[key] = BigInt(0);\n    }\n\n    this._stats[key] = BigInt(this._stats[key]) + BigInt(inc);\n\n    if (!this._frequencyAccumulators[key]) {\n      this._frequencyAccumulators[key] = 0;\n    }\n\n    this._frequencyAccumulators[key] += inc;\n  }\n\n}\n\nmodule.exports = Stats;","map":{"version":3,"names":["EventEmitter","require","MovingAverage","Stats","constructor","initialCounters","options","_options","_queue","_stats","_frequencyLastTime","Date","now","_frequencyAccumulators","_movingAverages","_update","bind","forEach","key","BigInt","movingAverageIntervals","interval","ma","push","_enabled","enabled","enable","disable","_disabled","stop","_timeout","clearTimeout","snapshot","Object","assign","movingAverages","counter","inc","_resetComputeTimeout","setTimeout","_nextTimeout","urgency","length","computeThrottleMaxQueueSize","Math","max","computeThrottleTimeout","last","op","shift","_applyOp","_updateFrequency","emit","latestTime","timeDiff","keys","_updateFrequencyFor","timeDiffMS","count","hz","movingAverageInterval","movingAverage","Error","prototype","hasOwnProperty","call","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-bitswap/src/stats/stat.js"],"sourcesContent":["'use strict'\n\nconst { EventEmitter } = require('events')\nconst MovingAverage = require('@vascosantos/moving-average')\n\n/**\n * @typedef {import('@vascosantos/moving-average').IMovingAverage} IMovingAverage\n * @typedef {[string, number, number]} Op\n */\n\nclass Stats extends EventEmitter {\n  /**\n   *\n   * @param {string[]} initialCounters\n   * @param {Object} options\n   * @param {boolean} options.enabled\n   * @param {number} options.computeThrottleTimeout\n   * @param {number} options.computeThrottleMaxQueueSize\n   * @param {import('.').AverageIntervals} options.movingAverageIntervals\n   */\n  constructor (initialCounters, options) {\n    super()\n\n    this._options = options\n    /** @type {Op[]} */\n    this._queue = []\n    /** @type {Record<string, bigint>} */\n    this._stats = {}\n\n    this._frequencyLastTime = Date.now()\n    /** @type {Record<string, number>} */\n    this._frequencyAccumulators = {}\n\n    /** @type {Record<string, Record<number, IMovingAverage>>} */\n    this._movingAverages = {}\n\n    this._update = this._update.bind(this)\n\n    initialCounters.forEach((key) => {\n      this._stats[key] = BigInt(0)\n      this._movingAverages[key] = {}\n      this._options.movingAverageIntervals.forEach((interval) => {\n        const ma = this._movingAverages[key][interval] = MovingAverage(interval)\n        ma.push(this._frequencyLastTime, 0)\n      })\n    })\n\n    this._enabled = this._options.enabled\n  }\n\n  enable () {\n    this._enabled = true\n  }\n\n  disable () {\n    this._disabled = true\n  }\n\n  stop () {\n    if (this._timeout) {\n      clearTimeout(this._timeout)\n    }\n  }\n\n  get snapshot () {\n    return Object.assign({}, this._stats)\n  }\n\n  get movingAverages () {\n    return Object.assign({}, this._movingAverages)\n  }\n\n  /**\n   * @param {string} counter\n   * @param {number} inc\n   */\n  push (counter, inc) {\n    if (this._enabled) {\n      this._queue.push([counter, inc, Date.now()])\n      this._resetComputeTimeout()\n    }\n  }\n\n  /**\n   * @private\n   */\n  _resetComputeTimeout () {\n    if (this._timeout) {\n      clearTimeout(this._timeout)\n    }\n    this._timeout = setTimeout(this._update, this._nextTimeout())\n  }\n\n  /**\n   * @private\n   * @returns {number}\n   */\n  _nextTimeout () {\n    // calculate the need for an update, depending on the queue length\n    const urgency = this._queue.length / this._options.computeThrottleMaxQueueSize\n    return Math.max(this._options.computeThrottleTimeout * (1 - urgency), 0)\n  }\n\n  /**\n   * @private\n   */\n  _update () {\n    this._timeout = null\n\n    if (this._queue.length) {\n      let last\n      while (this._queue.length) {\n        const op = last = this._queue.shift()\n        op && this._applyOp(op)\n      }\n\n      last && this._updateFrequency(last[2]) // contains timestamp of last op\n\n      this.emit('update', this._stats)\n    }\n  }\n\n  /**\n   * @private\n   * @param {number} latestTime\n   */\n  _updateFrequency (latestTime) {\n    const timeDiff = latestTime - this._frequencyLastTime\n\n    if (timeDiff) {\n      Object.keys(this._stats).forEach((key) => {\n        this._updateFrequencyFor(key, timeDiff, latestTime)\n      })\n    }\n\n    this._frequencyLastTime = latestTime\n  }\n\n  /**\n   * @private\n   * @param {string} key\n   * @param {number} timeDiffMS\n   * @param {number} latestTime\n   * @returns {void}\n   */\n  _updateFrequencyFor (key, timeDiffMS, latestTime) {\n    const count = this._frequencyAccumulators[key] || 0\n    this._frequencyAccumulators[key] = 0\n    const hz = (count / timeDiffMS) * 1000\n\n    let movingAverages = this._movingAverages[key]\n    if (!movingAverages) {\n      movingAverages = this._movingAverages[key] = {}\n    }\n    this._options.movingAverageIntervals.forEach((movingAverageInterval) => {\n      let movingAverage = movingAverages[movingAverageInterval]\n      if (!movingAverage) {\n        movingAverage = movingAverages[movingAverageInterval] = MovingAverage(movingAverageInterval)\n      }\n      movingAverage.push(latestTime, hz)\n    })\n  }\n\n  /**\n   * @private\n   * @param {Op} op\n   */\n  _applyOp (op) {\n    const key = op[0]\n    const inc = op[1]\n\n    if (typeof inc !== 'number') {\n      throw new Error(`invalid increment number: ${inc}`)\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(this._stats, key)) {\n      this._stats[key] = BigInt(0)\n    }\n\n    this._stats[key] = BigInt(this._stats[key]) + BigInt(inc)\n\n    if (!this._frequencyAccumulators[key]) {\n      this._frequencyAccumulators[key] = 0\n    }\n    this._frequencyAccumulators[key] += inc\n  }\n}\n\nmodule.exports = Stats\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}