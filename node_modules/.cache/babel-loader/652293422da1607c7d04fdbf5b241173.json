{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\n\nvar _defineProperty = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar errcode = require('err-code');\n\nvar PeerId = require('peer-id');\n\nvar _require = require('../errors'),\n    ERR_INVALID_PARAMETERS = _require.codes.ERR_INVALID_PARAMETERS;\n/**\n * @param {any} data\n */\n\n\nvar passthrough = function passthrough(data) {\n  return data;\n};\n/**\n * @typedef {import('./')} PeerStore\n */\n\n\nvar Book = /*#__PURE__*/function () {\n  /**\n   * The Book is the skeleton for the PeerStore books.\n   *\n   * @class\n   * @param {Object} properties\n   * @param {PeerStore} properties.peerStore - PeerStore instance.\n   * @param {string} properties.eventName - Name of the event to emit by the PeerStore.\n   * @param {string} properties.eventProperty - Name of the property to emit by the PeerStore.\n   * @param {(data: any) => any[]} [properties.eventTransformer] - Transformer function of the provided data for being emitted.\n   */\n  function Book(_ref) {\n    var peerStore = _ref.peerStore,\n        eventName = _ref.eventName,\n        eventProperty = _ref.eventProperty,\n        _ref$eventTransformer = _ref.eventTransformer,\n        eventTransformer = _ref$eventTransformer === void 0 ? passthrough : _ref$eventTransformer;\n\n    _classCallCheck(this, Book);\n\n    this._ps = peerStore;\n    this.eventName = eventName;\n    this.eventProperty = eventProperty;\n    this.eventTransformer = eventTransformer;\n    /**\n     * Map known peers to their data.\n     *\n     * @type {Map<string, any[]|any>}\n     */\n\n    this.data = new Map();\n  }\n  /**\n   * Set known data of a provided peer.\n   *\n   * @param {PeerId} peerId\n   * @param {any[]|any} data\n   */\n\n\n  _createClass(Book, [{\n    key: \"set\",\n    value: function set(peerId, data) {\n      throw errcode(new Error('set must be implemented by the subclass'), 'ERR_NOT_IMPLEMENTED');\n    }\n    /**\n     * Set data into the datastructure, persistence and emit it using the provided transformers.\n     *\n     * @protected\n     * @param {PeerId} peerId - peerId of the data to store\n     * @param {any} data - data to store.\n     * @param {Object} [options] - storing options.\n     * @param {boolean} [options.emit = true] - emit the provided data.\n     * @returns {void}\n     */\n\n  }, {\n    key: \"_setData\",\n    value: function _setData(peerId, data) {\n      var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n          _ref2$emit = _ref2.emit,\n          emit = _ref2$emit === void 0 ? true : _ref2$emit;\n\n      var b58key = peerId.toB58String(); // Store data in memory\n\n      this.data.set(b58key, data); // Emit event\n\n      emit && this._emit(peerId, data);\n    }\n    /**\n     * Emit data.\n     *\n     * @protected\n     * @param {PeerId} peerId\n     * @param {any} [data]\n     */\n\n  }, {\n    key: \"_emit\",\n    value: function _emit(peerId, data) {\n      this._ps.emit(this.eventName, _defineProperty({\n        peerId: peerId\n      }, this.eventProperty, this.eventTransformer(data)));\n    }\n    /**\n     * Get the known data of a provided peer.\n     * Returns `undefined` if there is no available data for the given peer.\n     *\n     * @param {PeerId} peerId\n     * @returns {any[]|any|undefined}\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(peerId) {\n      if (!PeerId.isPeerId(peerId)) {\n        throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n      }\n\n      var rec = this.data.get(peerId.toB58String()); // @ts-ignore\n\n      return rec ? _toConsumableArray(rec) : undefined;\n    }\n    /**\n     * Deletes the provided peer from the book.\n     *\n     * @param {PeerId} peerId\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(peerId) {\n      if (!PeerId.isPeerId(peerId)) {\n        throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n      }\n\n      if (!this.data.delete(peerId.toB58String())) {\n        return false;\n      }\n\n      this._emit(peerId, []);\n\n      return true;\n    }\n  }]);\n\n  return Book;\n}();\n\nmodule.exports = Book;","map":{"version":3,"names":["errcode","require","PeerId","ERR_INVALID_PARAMETERS","codes","passthrough","data","Book","peerStore","eventName","eventProperty","eventTransformer","_ps","Map","peerId","Error","emit","b58key","toB58String","set","_emit","isPeerId","rec","get","undefined","delete","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p/src/peer-store/book.js"],"sourcesContent":["'use strict'\n\nconst errcode = require('err-code')\nconst PeerId = require('peer-id')\n\nconst {\n  codes: { ERR_INVALID_PARAMETERS }\n} = require('../errors')\n\n/**\n * @param {any} data\n */\nconst passthrough = data => data\n\n/**\n * @typedef {import('./')} PeerStore\n */\n\nclass Book {\n  /**\n   * The Book is the skeleton for the PeerStore books.\n   *\n   * @class\n   * @param {Object} properties\n   * @param {PeerStore} properties.peerStore - PeerStore instance.\n   * @param {string} properties.eventName - Name of the event to emit by the PeerStore.\n   * @param {string} properties.eventProperty - Name of the property to emit by the PeerStore.\n   * @param {(data: any) => any[]} [properties.eventTransformer] - Transformer function of the provided data for being emitted.\n   */\n  constructor ({ peerStore, eventName, eventProperty, eventTransformer = passthrough }) {\n    this._ps = peerStore\n    this.eventName = eventName\n    this.eventProperty = eventProperty\n    this.eventTransformer = eventTransformer\n\n    /**\n     * Map known peers to their data.\n     *\n     * @type {Map<string, any[]|any>}\n     */\n    this.data = new Map()\n  }\n\n  /**\n   * Set known data of a provided peer.\n   *\n   * @param {PeerId} peerId\n   * @param {any[]|any} data\n   */\n  set (peerId, data) {\n    throw errcode(new Error('set must be implemented by the subclass'), 'ERR_NOT_IMPLEMENTED')\n  }\n\n  /**\n   * Set data into the datastructure, persistence and emit it using the provided transformers.\n   *\n   * @protected\n   * @param {PeerId} peerId - peerId of the data to store\n   * @param {any} data - data to store.\n   * @param {Object} [options] - storing options.\n   * @param {boolean} [options.emit = true] - emit the provided data.\n   * @returns {void}\n   */\n  _setData (peerId, data, { emit = true } = {}) {\n    const b58key = peerId.toB58String()\n\n    // Store data in memory\n    this.data.set(b58key, data)\n\n    // Emit event\n    emit && this._emit(peerId, data)\n  }\n\n  /**\n   * Emit data.\n   *\n   * @protected\n   * @param {PeerId} peerId\n   * @param {any} [data]\n   */\n  _emit (peerId, data) {\n    this._ps.emit(this.eventName, {\n      peerId,\n      [this.eventProperty]: this.eventTransformer(data)\n    })\n  }\n\n  /**\n   * Get the known data of a provided peer.\n   * Returns `undefined` if there is no available data for the given peer.\n   *\n   * @param {PeerId} peerId\n   * @returns {any[]|any|undefined}\n   */\n  get (peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    const rec = this.data.get(peerId.toB58String())\n\n    // @ts-ignore\n    return rec ? [...rec] : undefined\n  }\n\n  /**\n   * Deletes the provided peer from the book.\n   *\n   * @param {PeerId} peerId\n   * @returns {boolean}\n   */\n  delete (peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    if (!this.data.delete(peerId.toB58String())) {\n      return false\n    }\n\n    this._emit(peerId, [])\n\n    return true\n  }\n}\n\nmodule.exports = Book\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}