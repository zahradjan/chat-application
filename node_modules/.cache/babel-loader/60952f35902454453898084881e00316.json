{"ast":null,"code":"'use strict';\n\nconst {\n  EventEmitter\n} = require('events');\n\nconst {\n  toString: uint8ArrayToString\n} = require('uint8arrays/to-string');\n\nconst CONSTANTS = require('./constants');\n\nconst logger = require('./utils').logger;\n/**\n * @typedef {import('multiformats').CID} CID\n * @typedef {import('peer-id')} PeerId\n */\n\n/**\n * @param {CID} cid\n */\n\n\nconst unwantEvent = cid => `unwant:${uint8ArrayToString(cid.multihash.bytes, 'base64')}`;\n/**\n * @param {CID} cid\n */\n\n\nconst blockEvent = cid => `block:${uint8ArrayToString(cid.multihash.bytes, 'base64')}`;\n\nclass Notifications extends EventEmitter {\n  /**\n   * Internal module used to track events about incoming blocks,\n   * wants and unwants.\n   *\n   * @param {PeerId} peerId\n   */\n  constructor(peerId) {\n    super();\n    this.setMaxListeners(CONSTANTS.maxListeners);\n    this._log = logger(peerId, 'notif');\n  }\n  /**\n   * Signal the system that we received `block`.\n   *\n   * @param {CID} cid\n   * @param {Uint8Array} block\n   * @returns {void}\n   */\n\n\n  hasBlock(cid, block) {\n    const event = blockEvent(cid);\n\n    this._log(event);\n\n    this.emit(event, block);\n  }\n  /**\n   * Signal the system that we are waiting to receive the\n   * block associated with the given `cid`.\n   * Returns a Promise that resolves to the block when it is received,\n   * or undefined when the block is unwanted.\n   *\n   * @param {CID} cid\n   * @param {Object} [options]\n   * @param {AbortSignal} [options.signal]\n   * @returns {Promise<Uint8Array>}\n   */\n\n\n  wantBlock(cid) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!cid) {\n      throw new Error('Not a valid cid');\n    }\n\n    const blockEvt = blockEvent(cid);\n    const unwantEvt = unwantEvent(cid);\n\n    this._log(`wantBlock:${cid}`);\n\n    return new Promise((resolve, reject) => {\n      const onUnwant = () => {\n        this.removeListener(blockEvt, onBlock);\n        reject(new Error(`Block for ${cid} unwanted`));\n      };\n      /**\n       * @param {Uint8Array} data\n       */\n\n\n      const onBlock = data => {\n        this.removeListener(unwantEvt, onUnwant);\n        resolve(data);\n      };\n\n      this.once(unwantEvt, onUnwant);\n      this.once(blockEvt, onBlock);\n\n      if (options && options.signal) {\n        options.signal.addEventListener('abort', () => {\n          this.removeListener(blockEvt, onBlock);\n          this.removeListener(unwantEvt, onUnwant);\n          reject(new Error(`Want for ${cid} aborted`));\n        });\n      }\n    });\n  }\n  /**\n   * Signal that the block is not wanted anymore.\n   *\n   * @param {CID} cid - the CID of the block that is not wanted anymore.\n   * @returns {void}\n   */\n\n\n  unwantBlock(cid) {\n    const event = unwantEvent(cid);\n\n    this._log(event);\n\n    this.emit(event);\n  }\n\n}\n\nmodule.exports = Notifications;","map":{"version":3,"names":["EventEmitter","require","toString","uint8ArrayToString","CONSTANTS","logger","unwantEvent","cid","multihash","bytes","blockEvent","Notifications","constructor","peerId","setMaxListeners","maxListeners","_log","hasBlock","block","event","emit","wantBlock","options","Error","blockEvt","unwantEvt","Promise","resolve","reject","onUnwant","removeListener","onBlock","data","once","signal","addEventListener","unwantBlock","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-bitswap/src/notifications.js"],"sourcesContent":["'use strict'\n\nconst { EventEmitter } = require('events')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\n\nconst CONSTANTS = require('./constants')\nconst logger = require('./utils').logger\n\n/**\n * @typedef {import('multiformats').CID} CID\n * @typedef {import('peer-id')} PeerId\n */\n\n/**\n * @param {CID} cid\n */\nconst unwantEvent = (cid) => `unwant:${uint8ArrayToString(cid.multihash.bytes, 'base64')}`\n\n/**\n * @param {CID} cid\n */\nconst blockEvent = (cid) => `block:${uint8ArrayToString(cid.multihash.bytes, 'base64')}`\n\nclass Notifications extends EventEmitter {\n  /**\n   * Internal module used to track events about incoming blocks,\n   * wants and unwants.\n   *\n   * @param {PeerId} peerId\n   */\n  constructor (peerId) {\n    super()\n\n    this.setMaxListeners(CONSTANTS.maxListeners)\n\n    this._log = logger(peerId, 'notif')\n  }\n\n  /**\n   * Signal the system that we received `block`.\n   *\n   * @param {CID} cid\n   * @param {Uint8Array} block\n   * @returns {void}\n   */\n  hasBlock (cid, block) {\n    const event = blockEvent(cid)\n    this._log(event)\n    this.emit(event, block)\n  }\n\n  /**\n   * Signal the system that we are waiting to receive the\n   * block associated with the given `cid`.\n   * Returns a Promise that resolves to the block when it is received,\n   * or undefined when the block is unwanted.\n   *\n   * @param {CID} cid\n   * @param {Object} [options]\n   * @param {AbortSignal} [options.signal]\n   * @returns {Promise<Uint8Array>}\n   */\n  wantBlock (cid, options = {}) {\n    if (!cid) {\n      throw new Error('Not a valid cid')\n    }\n\n    const blockEvt = blockEvent(cid)\n    const unwantEvt = unwantEvent(cid)\n\n    this._log(`wantBlock:${cid}`)\n\n    return new Promise((resolve, reject) => {\n      const onUnwant = () => {\n        this.removeListener(blockEvt, onBlock)\n\n        reject(new Error(`Block for ${cid} unwanted`))\n      }\n\n      /**\n       * @param {Uint8Array} data\n       */\n      const onBlock = (data) => {\n        this.removeListener(unwantEvt, onUnwant)\n\n        resolve(data)\n      }\n\n      this.once(unwantEvt, onUnwant)\n      this.once(blockEvt, onBlock)\n\n      if (options && options.signal) {\n        options.signal.addEventListener('abort', () => {\n          this.removeListener(blockEvt, onBlock)\n          this.removeListener(unwantEvt, onUnwant)\n\n          reject(new Error(`Want for ${cid} aborted`))\n        })\n      }\n    })\n  }\n\n  /**\n   * Signal that the block is not wanted anymore.\n   *\n   * @param {CID} cid - the CID of the block that is not wanted anymore.\n   * @returns {void}\n   */\n  unwantBlock (cid) {\n    const event = unwantEvent(cid)\n    this._log(event)\n    this.emit(event)\n  }\n}\n\nmodule.exports = Notifications\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}