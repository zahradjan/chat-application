{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar webcrypto = require('../webcrypto');\n\nvar lengths = require('./lengths');\n\nvar hashTypes = {\n  SHA1: 'SHA-1',\n  SHA256: 'SHA-256',\n  SHA512: 'SHA-512'\n};\n\nvar sign = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(key, data) {\n    var buf;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return webcrypto.get().subtle.sign({\n              name: 'HMAC'\n            }, key, data);\n\n          case 2:\n            buf = _context.sent;\n            return _context.abrupt(\"return\", new Uint8Array(buf, buf.byteOffset, buf.byteLength));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function sign(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexports.create = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(hashType, secret) {\n    var hash, key;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            hash = hashTypes[hashType];\n            _context3.next = 3;\n            return webcrypto.get().subtle.importKey('raw', secret, {\n              name: 'HMAC',\n              hash: {\n                name: hash\n              }\n            }, false, ['sign']);\n\n          case 3:\n            key = _context3.sent;\n            return _context3.abrupt(\"return\", {\n              digest: function digest(data) {\n                return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n                  return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          return _context2.abrupt(\"return\", sign(key, data));\n\n                        case 1:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2);\n                }))();\n              },\n              length: lengths[hashType]\n            });\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function (_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["webcrypto","require","lengths","hashTypes","SHA1","SHA256","SHA512","sign","key","data","get","subtle","name","buf","Uint8Array","byteOffset","byteLength","exports","create","hashType","secret","hash","importKey","digest","length"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/peer-id/node_modules/libp2p-crypto/src/hmac/index-browser.js"],"sourcesContent":["'use strict'\n\nconst webcrypto = require('../webcrypto')\nconst lengths = require('./lengths')\n\nconst hashTypes = {\n  SHA1: 'SHA-1',\n  SHA256: 'SHA-256',\n  SHA512: 'SHA-512'\n}\n\nconst sign = async (key, data) => {\n  const buf = await webcrypto.get().subtle.sign({ name: 'HMAC' }, key, data)\n  return new Uint8Array(buf, buf.byteOffset, buf.byteLength)\n}\n\nexports.create = async function (hashType, secret) {\n  const hash = hashTypes[hashType]\n\n  const key = await webcrypto.get().subtle.importKey(\n    'raw',\n    secret,\n    {\n      name: 'HMAC',\n      hash: { name: hash }\n    },\n    false,\n    ['sign']\n  )\n\n  return {\n    async digest (data) { // eslint-disable-line require-await\n      return sign(key, data)\n    },\n    length: lengths[hashType]\n  }\n}\n"],"mappings":"AAAA;;;;;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,cAAD,CAAzB;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,WAAD,CAAvB;;AAEA,IAAME,SAAS,GAAG;EAChBC,IAAI,EAAE,OADU;EAEhBC,MAAM,EAAE,SAFQ;EAGhBC,MAAM,EAAE;AAHQ,CAAlB;;AAMA,IAAMC,IAAI;EAAA,sEAAG,iBAAOC,GAAP,EAAYC,IAAZ;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,OACOT,SAAS,CAACU,GAAV,GAAgBC,MAAhB,CAAuBJ,IAAvB,CAA4B;cAAEK,IAAI,EAAE;YAAR,CAA5B,EAA8CJ,GAA9C,EAAmDC,IAAnD,CADP;;UAAA;YACLI,GADK;YAAA,iCAEJ,IAAIC,UAAJ,CAAeD,GAAf,EAAoBA,GAAG,CAACE,UAAxB,EAAoCF,GAAG,CAACG,UAAxC,CAFI;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAH;;EAAA,gBAAJT,IAAI;IAAA;EAAA;AAAA,GAAV;;AAKAU,OAAO,CAACC,MAAR;EAAA,uEAAiB,kBAAgBC,QAAhB,EAA0BC,MAA1B;IAAA;IAAA;MAAA;QAAA;UAAA;YACTC,IADS,GACFlB,SAAS,CAACgB,QAAD,CADP;YAAA;YAAA,OAGGnB,SAAS,CAACU,GAAV,GAAgBC,MAAhB,CAAuBW,SAAvB,CAChB,KADgB,EAEhBF,MAFgB,EAGhB;cACER,IAAI,EAAE,MADR;cAEES,IAAI,EAAE;gBAAET,IAAI,EAAES;cAAR;YAFR,CAHgB,EAOhB,KAPgB,EAQhB,CAAC,MAAD,CARgB,CAHH;;UAAA;YAGTb,GAHS;YAAA,kCAcR;cACCe,MADD,kBACSd,IADT,EACe;gBAAA;kBAAA;oBAAA;sBAAA;wBAAA;0BAAA,kCACXF,IAAI,CAACC,GAAD,EAAMC,IAAN,CADO;;wBAAA;wBAAA;0BAAA;sBAAA;oBAAA;kBAAA;gBAAA;cAEnB,CAHI;cAILe,MAAM,EAAEtB,OAAO,CAACiB,QAAD;YAJV,CAdQ;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAjB;;EAAA;IAAA;EAAA;AAAA"},"metadata":{},"sourceType":"script"}