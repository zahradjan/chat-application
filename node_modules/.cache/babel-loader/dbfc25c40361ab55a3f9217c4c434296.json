{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar multihashing = require('multihashing-async');\n\nvar protobuf = require('protons');\n\nvar bs58 = require('bs58');\n\nvar nextTick = require('async/nextTick');\n\nvar crypto = require('./rsa');\n\nvar pbm = protobuf(require('./keys.proto'));\n\nrequire('node-forge/lib/sha512');\n\nrequire('node-forge/lib/pbe');\n\nvar forge = require('node-forge/lib/forge');\n\nvar RsaPublicKey = /*#__PURE__*/function () {\n  function RsaPublicKey(key) {\n    _classCallCheck(this, RsaPublicKey);\n\n    this._key = key;\n  }\n\n  _createClass(RsaPublicKey, [{\n    key: \"verify\",\n    value: function verify(data, sig, callback) {\n      ensure(callback);\n      crypto.hashAndVerify(this._key, sig, data, callback);\n    }\n  }, {\n    key: \"marshal\",\n    value: function marshal() {\n      return crypto.utils.jwkToPkix(this._key);\n    }\n  }, {\n    key: \"bytes\",\n    get: function get() {\n      return pbm.PublicKey.encode({\n        Type: pbm.KeyType.RSA,\n        Data: this.marshal()\n      });\n    }\n  }, {\n    key: \"encrypt\",\n    value: function encrypt(bytes, cb) {\n      var _this = this;\n\n      return cbWrap(function () {\n        return crypto.encrypt(_this._key, bytes);\n      }, cb);\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(key) {\n      return this.bytes.equals(key.bytes);\n    }\n  }, {\n    key: \"hash\",\n    value: function hash(callback) {\n      ensure(callback);\n      multihashing(this.bytes, 'sha2-256', callback);\n    }\n  }]);\n\n  return RsaPublicKey;\n}();\n\nfunction cbWrap(f, cb) {\n  var res;\n\n  try {\n    res = f();\n  } catch (err) {\n    cb(err);\n  }\n\n  return cb(null, res);\n}\n\nvar RsaPrivateKey = /*#__PURE__*/function () {\n  // key       - Object of the jwk format\n  // publicKey - Buffer of the spki format\n  function RsaPrivateKey(key, publicKey) {\n    _classCallCheck(this, RsaPrivateKey);\n\n    this._key = key;\n    this._publicKey = publicKey;\n  }\n\n  _createClass(RsaPrivateKey, [{\n    key: \"genSecret\",\n    value: function genSecret() {\n      return crypto.getRandomValues(16);\n    }\n  }, {\n    key: \"sign\",\n    value: function sign(message, callback) {\n      ensure(callback);\n      crypto.hashAndSign(this._key, message, callback);\n    }\n  }, {\n    key: \"public\",\n    get: function get() {\n      if (!this._publicKey) {\n        throw new Error('public key not provided');\n      }\n\n      return new RsaPublicKey(this._publicKey);\n    }\n  }, {\n    key: \"decrypt\",\n    value: function decrypt(bytes, cb) {\n      var _this2 = this;\n\n      cbWrap(function () {\n        return crypto.decrypt(_this2._key, bytes);\n      }, cb);\n    }\n  }, {\n    key: \"marshal\",\n    value: function marshal() {\n      return crypto.utils.jwkToPkcs1(this._key);\n    }\n  }, {\n    key: \"bytes\",\n    get: function get() {\n      return pbm.PrivateKey.encode({\n        Type: pbm.KeyType.RSA,\n        Data: this.marshal()\n      });\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(key) {\n      return this.bytes.equals(key.bytes);\n    }\n  }, {\n    key: \"hash\",\n    value: function hash(callback) {\n      ensure(callback);\n      multihashing(this.bytes, 'sha2-256', callback);\n    }\n    /**\n     * Gets the ID of the key.\n     *\n     * The key id is the base58 encoding of the SHA-256 multihash of its public key.\n     * The public key is a protobuf encoding containing a type and the DER encoding\n     * of the PKCS SubjectPublicKeyInfo.\n     *\n     * @param {function(Error, id)} callback\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"id\",\n    value: function id(callback) {\n      this.public.hash(function (err, hash) {\n        if (err) {\n          return callback(err);\n        }\n\n        callback(null, bs58.encode(hash));\n      });\n    }\n    /**\n     * Exports the key into a password protected PEM format\n     *\n     * @param {string} [format] - Defaults to 'pkcs-8'.\n     * @param {string} password - The password to read the encrypted PEM\n     * @param {function(Error, KeyInfo)} callback\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"export\",\n    value: function _export(format, password, callback) {\n      var _this3 = this;\n\n      if (typeof password === 'function') {\n        callback = password;\n        password = format;\n        format = 'pkcs-8';\n      }\n\n      ensure(callback);\n      nextTick(function () {\n        var err = null;\n        var pem = null;\n\n        try {\n          var buffer = new forge.util.ByteBuffer(_this3.marshal());\n          var asn1 = forge.asn1.fromDer(buffer);\n          var privateKey = forge.pki.privateKeyFromAsn1(asn1);\n\n          if (format === 'pkcs-8') {\n            var options = {\n              algorithm: 'aes256',\n              count: 10000,\n              saltSize: 128 / 8,\n              prfAlgorithm: 'sha512'\n            };\n            pem = forge.pki.encryptRsaPrivateKey(privateKey, password, options);\n          } else {\n            err = new Error(\"Unknown export format '\".concat(format, \"'\"));\n          }\n        } catch (_err) {\n          err = _err;\n        }\n\n        callback(err, pem);\n      });\n    }\n  }]);\n\n  return RsaPrivateKey;\n}();\n\nfunction unmarshalRsaPrivateKey(bytes, callback) {\n  var jwk = crypto.utils.pkcs1ToJwk(bytes);\n  crypto.unmarshalPrivateKey(jwk, function (err, keys) {\n    if (err) {\n      return callback(err);\n    }\n\n    callback(null, new RsaPrivateKey(keys.privateKey, keys.publicKey));\n  });\n}\n\nfunction unmarshalRsaPublicKey(bytes) {\n  var jwk = crypto.utils.pkixToJwk(bytes);\n  return new RsaPublicKey(jwk);\n}\n\nfunction fromJwk(jwk, callback) {\n  crypto.unmarshalPrivateKey(jwk, function (err, keys) {\n    if (err) {\n      return callback(err);\n    }\n\n    callback(null, new RsaPrivateKey(keys.privateKey, keys.publicKey));\n  });\n}\n\nfunction generateKeyPair(bits, callback) {\n  crypto.generateKey(bits, function (err, keys) {\n    if (err) {\n      return callback(err);\n    }\n\n    callback(null, new RsaPrivateKey(keys.privateKey, keys.publicKey));\n  });\n}\n\nfunction ensure(callback) {\n  if (typeof callback !== 'function') {\n    throw new Error('callback is required');\n  }\n}\n\nmodule.exports = {\n  RsaPublicKey: RsaPublicKey,\n  RsaPrivateKey: RsaPrivateKey,\n  unmarshalRsaPublicKey: unmarshalRsaPublicKey,\n  unmarshalRsaPrivateKey: unmarshalRsaPrivateKey,\n  generateKeyPair: generateKeyPair,\n  fromJwk: fromJwk\n};","map":{"version":3,"names":["multihashing","require","protobuf","bs58","nextTick","crypto","pbm","forge","RsaPublicKey","key","_key","data","sig","callback","ensure","hashAndVerify","utils","jwkToPkix","PublicKey","encode","Type","KeyType","RSA","Data","marshal","bytes","cb","cbWrap","encrypt","equals","f","res","err","RsaPrivateKey","publicKey","_publicKey","getRandomValues","message","hashAndSign","Error","decrypt","jwkToPkcs1","PrivateKey","public","hash","format","password","pem","buffer","util","ByteBuffer","asn1","fromDer","privateKey","pki","privateKeyFromAsn1","options","algorithm","count","saltSize","prfAlgorithm","encryptRsaPrivateKey","_err","unmarshalRsaPrivateKey","jwk","pkcs1ToJwk","unmarshalPrivateKey","keys","unmarshalRsaPublicKey","pkixToJwk","fromJwk","generateKeyPair","bits","generateKey","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/orbit-db-keystore/node_modules/libp2p-crypto/src/keys/rsa-class.js"],"sourcesContent":["'use strict'\n\nconst multihashing = require('multihashing-async')\nconst protobuf = require('protons')\nconst bs58 = require('bs58')\nconst nextTick = require('async/nextTick')\n\nconst crypto = require('./rsa')\nconst pbm = protobuf(require('./keys.proto'))\nrequire('node-forge/lib/sha512')\nrequire('node-forge/lib/pbe')\nconst forge = require('node-forge/lib/forge')\n\nclass RsaPublicKey {\n  constructor (key) {\n    this._key = key\n  }\n\n  verify (data, sig, callback) {\n    ensure(callback)\n    crypto.hashAndVerify(this._key, sig, data, callback)\n  }\n\n  marshal () {\n    return crypto.utils.jwkToPkix(this._key)\n  }\n\n  get bytes () {\n    return pbm.PublicKey.encode({\n      Type: pbm.KeyType.RSA,\n      Data: this.marshal()\n    })\n  }\n\n  encrypt (bytes, cb) {\n    return cbWrap(() => crypto.encrypt(this._key, bytes), cb)\n  }\n\n  equals (key) {\n    return this.bytes.equals(key.bytes)\n  }\n\n  hash (callback) {\n    ensure(callback)\n    multihashing(this.bytes, 'sha2-256', callback)\n  }\n}\n\nfunction cbWrap (f, cb) {\n  let res\n  try {\n    res = f()\n  } catch (err) {\n    cb(err)\n  }\n\n  return cb(null, res)\n}\n\nclass RsaPrivateKey {\n  // key       - Object of the jwk format\n  // publicKey - Buffer of the spki format\n  constructor (key, publicKey) {\n    this._key = key\n    this._publicKey = publicKey\n  }\n\n  genSecret () {\n    return crypto.getRandomValues(16)\n  }\n\n  sign (message, callback) {\n    ensure(callback)\n    crypto.hashAndSign(this._key, message, callback)\n  }\n\n  get public () {\n    if (!this._publicKey) {\n      throw new Error('public key not provided')\n    }\n\n    return new RsaPublicKey(this._publicKey)\n  }\n\n  decrypt (bytes, cb) {\n    cbWrap(() => crypto.decrypt(this._key, bytes), cb)\n  }\n\n  marshal () {\n    return crypto.utils.jwkToPkcs1(this._key)\n  }\n\n  get bytes () {\n    return pbm.PrivateKey.encode({\n      Type: pbm.KeyType.RSA,\n      Data: this.marshal()\n    })\n  }\n\n  equals (key) {\n    return this.bytes.equals(key.bytes)\n  }\n\n  hash (callback) {\n    ensure(callback)\n    multihashing(this.bytes, 'sha2-256', callback)\n  }\n\n  /**\n   * Gets the ID of the key.\n   *\n   * The key id is the base58 encoding of the SHA-256 multihash of its public key.\n   * The public key is a protobuf encoding containing a type and the DER encoding\n   * of the PKCS SubjectPublicKeyInfo.\n   *\n   * @param {function(Error, id)} callback\n   * @returns {undefined}\n   */\n  id (callback) {\n    this.public.hash((err, hash) => {\n      if (err) {\n        return callback(err)\n      }\n      callback(null, bs58.encode(hash))\n    })\n  }\n\n  /**\n   * Exports the key into a password protected PEM format\n   *\n   * @param {string} [format] - Defaults to 'pkcs-8'.\n   * @param {string} password - The password to read the encrypted PEM\n   * @param {function(Error, KeyInfo)} callback\n   * @returns {undefined}\n   */\n  export (format, password, callback) {\n    if (typeof password === 'function') {\n      callback = password\n      password = format\n      format = 'pkcs-8'\n    }\n\n    ensure(callback)\n\n    nextTick(() => {\n      let err = null\n      let pem = null\n      try {\n        const buffer = new forge.util.ByteBuffer(this.marshal())\n        const asn1 = forge.asn1.fromDer(buffer)\n        const privateKey = forge.pki.privateKeyFromAsn1(asn1)\n        if (format === 'pkcs-8') {\n          const options = {\n            algorithm: 'aes256',\n            count: 10000,\n            saltSize: 128 / 8,\n            prfAlgorithm: 'sha512'\n          }\n          pem = forge.pki.encryptRsaPrivateKey(privateKey, password, options)\n        } else {\n          err = new Error(`Unknown export format '${format}'`)\n        }\n      } catch (_err) {\n        err = _err\n      }\n\n      callback(err, pem)\n    })\n  }\n}\n\nfunction unmarshalRsaPrivateKey (bytes, callback) {\n  const jwk = crypto.utils.pkcs1ToJwk(bytes)\n\n  crypto.unmarshalPrivateKey(jwk, (err, keys) => {\n    if (err) {\n      return callback(err)\n    }\n\n    callback(null, new RsaPrivateKey(keys.privateKey, keys.publicKey))\n  })\n}\n\nfunction unmarshalRsaPublicKey (bytes) {\n  const jwk = crypto.utils.pkixToJwk(bytes)\n\n  return new RsaPublicKey(jwk)\n}\n\nfunction fromJwk (jwk, callback) {\n  crypto.unmarshalPrivateKey(jwk, (err, keys) => {\n    if (err) {\n      return callback(err)\n    }\n\n    callback(null, new RsaPrivateKey(keys.privateKey, keys.publicKey))\n  })\n}\n\nfunction generateKeyPair (bits, callback) {\n  crypto.generateKey(bits, (err, keys) => {\n    if (err) {\n      return callback(err)\n    }\n\n    callback(null, new RsaPrivateKey(keys.privateKey, keys.publicKey))\n  })\n}\n\nfunction ensure (callback) {\n  if (typeof callback !== 'function') {\n    throw new Error('callback is required')\n  }\n}\n\nmodule.exports = {\n  RsaPublicKey,\n  RsaPrivateKey,\n  unmarshalRsaPublicKey,\n  unmarshalRsaPrivateKey,\n  generateKeyPair,\n  fromJwk\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}