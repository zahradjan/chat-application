{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decode = void 0;\n\nconst string_scanner_1 = __importDefault(require(\"./string-scanner\"));\n\nvar TokenType;\n\n(function (TokenType) {\n  TokenType[TokenType[\"Key\"] = 0] = \"Key\";\n  TokenType[TokenType[\"Value\"] = 1] = \"Value\";\n  TokenType[TokenType[\"Garbage\"] = 2] = \"Garbage\";\n})(TokenType || (TokenType = {}));\n/**\n * Decode a logfmt line into an object.\n */\n\n\nfunction decode(line) {\n  const decoded = {};\n  const scanner = new string_scanner_1.default(line);\n  let tokenType = TokenType.Garbage;\n  let ch;\n  let key = '';\n  let value = '';\n\n  while (ch = scanner.next()) {\n    switch (tokenType) {\n      case TokenType.Garbage:\n        if (ch === ' ') {\n          continue;\n        }\n\n        tokenType = TokenType.Key;\n        scanner.rewind();\n        break;\n\n      case TokenType.Key:\n        key = consumeString(ch, scanner);\n        tokenType = TokenType.Value;\n        break;\n\n      case TokenType.Value:\n        value = consumeString(ch, scanner);\n        decoded[key] = value;\n        tokenType = TokenType.Garbage;\n    }\n  }\n\n  return decoded;\n}\n\nexports.decode = decode;\n\nfunction consumeString(init, scanner) {\n  let string = '';\n  let inQuote = false;\n  let inEscape = false;\n  let ch = init;\n\n  while (ch) {\n    const wasEscaping = inEscape;\n    inEscape = false;\n\n    if (ch === ' ' && !inQuote) {\n      break;\n    }\n\n    if (ch === '=' && !inQuote && !wasEscaping) {\n      break;\n    }\n\n    if (ch === '\"' && !wasEscaping) {\n      inQuote = !inQuote;\n      ch = scanner.next();\n      continue;\n    }\n\n    if (ch === '\\\\' && !wasEscaping) {\n      inEscape = true;\n      ch = scanner.next();\n      continue;\n    }\n\n    string += ch;\n    ch = scanner.next();\n  }\n\n  return string;\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;AACA;;AAEA,IAAKA,SAAL;;AAAA,WAAKA,SAAL,EAAc;EACZA;EACAA;EACAA;AACD,CAJD,EAAKA,SAAS,KAATA,SAAS,MAAd;AAMA;;;;;AAGA,SAAgBC,MAAhB,CAAuBC,IAAvB,EAAmC;EACjC,MAAMC,OAAO,GAAe,EAA5B;EACA,MAAMC,OAAO,GAAG,IAAIC,wBAAJ,CAAkBH,IAAlB,CAAhB;EAEA,IAAII,SAAS,GAAcN,SAAS,CAACO,OAArC;EACA,IAAIC,EAAJ;EAEA,IAAIC,GAAG,GAAG,EAAV;EACA,IAAIC,KAAK,GAAG,EAAZ;;EAEA,OAAQF,EAAE,GAAGJ,OAAO,CAACO,IAAR,EAAb,EAA8B;IAC5B,QAAQL,SAAR;MACE,KAAKN,SAAS,CAACO,OAAf;QACE,IAAIC,EAAE,KAAK,GAAX,EAAgB;UACd;QACD;;QAEDF,SAAS,GAAGN,SAAS,CAACY,GAAtB;QACAR,OAAO,CAACS,MAAR;QACA;;MACF,KAAKb,SAAS,CAACY,GAAf;QACEH,GAAG,GAAGK,aAAa,CAACN,EAAD,EAAKJ,OAAL,CAAnB;QACAE,SAAS,GAAGN,SAAS,CAACe,KAAtB;QACA;;MACF,KAAKf,SAAS,CAACe,KAAf;QACEL,KAAK,GAAGI,aAAa,CAACN,EAAD,EAAKJ,OAAL,CAArB;QACAD,OAAO,CAACM,GAAD,CAAP,GAAeC,KAAf;QACAJ,SAAS,GAAGN,SAAS,CAACO,OAAtB;IAhBJ;EAkBD;;EAED,OAAOJ,OAAP;AACD;;AAhCDa;;AAkCA,SAASF,aAAT,CAAuBG,IAAvB,EAAqCb,OAArC,EAA2D;EACzD,IAAIc,MAAM,GAAG,EAAb;EAEA,IAAIC,OAAO,GAAG,KAAd;EACA,IAAIC,QAAQ,GAAG,KAAf;EAEA,IAAIZ,EAAE,GAAuBS,IAA7B;;EAEA,OAAOT,EAAP,EAAW;IACT,MAAMa,WAAW,GAAGD,QAApB;IACAA,QAAQ,GAAG,KAAX;;IAEA,IAAIZ,EAAE,KAAK,GAAP,IAAc,CAACW,OAAnB,EAA4B;MAC1B;IACD;;IAED,IAAIX,EAAE,KAAK,GAAP,IAAc,CAACW,OAAf,IAA0B,CAACE,WAA/B,EAA4C;MAC1C;IACD;;IAED,IAAIb,EAAE,KAAK,GAAP,IAAc,CAACa,WAAnB,EAAgC;MAC9BF,OAAO,GAAG,CAACA,OAAX;MACAX,EAAE,GAAGJ,OAAO,CAACO,IAAR,EAAL;MACA;IACD;;IAED,IAAIH,EAAE,KAAK,IAAP,IAAe,CAACa,WAApB,EAAiC;MAC/BD,QAAQ,GAAG,IAAX;MACAZ,EAAE,GAAGJ,OAAO,CAACO,IAAR,EAAL;MACA;IACD;;IAEDO,MAAM,IAAIV,EAAV;IACAA,EAAE,GAAGJ,OAAO,CAACO,IAAR,EAAL;EACD;;EAED,OAAOO,MAAP;AACD","names":["TokenType","decode","line","decoded","scanner","string_scanner_1","tokenType","Garbage","ch","key","value","next","Key","rewind","consumeString","Value","exports","init","string","inQuote","inEscape","wasEscaping"],"sourceRoot":"","sources":["../lib/decode.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}