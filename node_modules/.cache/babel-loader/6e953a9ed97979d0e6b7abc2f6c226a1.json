{"ast":null,"code":"const {\n  Buffer\n} = require('buffer');\n\nconst {\n  EventIterator\n} = require('event-iterator'); // copied from github.com/feross/buffer\n// Some ArrayBuffers are not passing the instanceof check, so we need to do a bit more work :(\n\n\nfunction isArrayBuffer(obj) {\n  return obj instanceof ArrayBuffer || obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' && typeof obj.byteLength === 'number';\n}\n\nmodule.exports = socket => {\n  const removeListener = socket.removeEventListener || socket.removeListener;\n\n  const source = async function* () {\n    const messages = new EventIterator(_ref => {\n      let {\n        push,\n        stop,\n        fail\n      } = _ref;\n      socket.addEventListener('message', push);\n      socket.addEventListener('error', fail);\n      socket.addEventListener('close', stop);\n      return () => {\n        removeListener.call(socket, 'message', push);\n        removeListener.call(socket, 'error', fail);\n        removeListener.call(socket, 'close', stop);\n      };\n    }, {\n      highWaterMark: Infinity\n    });\n\n    for await (const {\n      data\n    } of messages) {\n      yield isArrayBuffer(data) ? Buffer.from(data) : data;\n    }\n  }();\n\n  let connected = socket.readyState === 1;\n  let connError;\n  socket.addEventListener('open', () => {\n    connected = true;\n    connError = null;\n  });\n  socket.addEventListener('close', () => {\n    connected = false;\n    connError = null;\n  });\n  socket.addEventListener('error', err => {\n    if (!connected) connError = err;\n  });\n\n  source.connected = () => new Promise((resolve, reject) => {\n    if (connected) return resolve();\n    if (connError) return reject(connError);\n\n    const cleanUp = cont => {\n      removeListener.call(socket, 'open', onOpen);\n      removeListener.call(socket, 'error', onError);\n      cont();\n    };\n\n    const onOpen = () => cleanUp(resolve);\n\n    const onError = err => cleanUp(() => reject(err));\n\n    socket.addEventListener('open', onOpen);\n    socket.addEventListener('error', onError);\n  });\n\n  return source;\n};","map":{"version":3,"names":["Buffer","require","EventIterator","isArrayBuffer","obj","ArrayBuffer","constructor","name","byteLength","module","exports","socket","removeListener","removeEventListener","source","messages","push","stop","fail","addEventListener","call","highWaterMark","Infinity","data","from","connected","readyState","connError","err","Promise","resolve","reject","cleanUp","cont","onOpen","onError"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/it-ws/source.js"],"sourcesContent":["const { Buffer } = require('buffer')\nconst { EventIterator } = require('event-iterator')\n\n// copied from github.com/feross/buffer\n// Some ArrayBuffers are not passing the instanceof check, so we need to do a bit more work :(\nfunction isArrayBuffer (obj) {\n  return obj instanceof ArrayBuffer ||\n    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&\n      typeof obj.byteLength === 'number')\n}\n\nmodule.exports = socket => {\n  const removeListener = socket.removeEventListener || socket.removeListener\n\n  const source = (async function * () {\n    const messages = new EventIterator(\n      ({ push, stop, fail }) => {\n        socket.addEventListener('message', push)\n        socket.addEventListener('error', fail)\n        socket.addEventListener('close', stop)\n\n        return () => {\n          removeListener.call(socket, 'message', push)\n          removeListener.call(socket, 'error', fail)\n          removeListener.call(socket, 'close', stop)\n        }\n      },\n      { highWaterMark: Infinity }\n    )\n\n    for await (const { data } of messages) {\n      yield isArrayBuffer(data) ? Buffer.from(data) : data\n    }\n  })()\n\n  let connected = socket.readyState === 1\n  let connError\n\n  socket.addEventListener('open', () => {\n    connected = true\n    connError = null\n  })\n\n  socket.addEventListener('close', () => {\n    connected = false\n    connError = null\n  })\n\n  socket.addEventListener('error', err => {\n    if (!connected) connError = err\n  })\n\n  source.connected = () => new Promise((resolve, reject) => {\n    if (connected) return resolve()\n    if (connError) return reject(connError)\n\n    const cleanUp = cont => {\n      removeListener.call(socket, 'open', onOpen)\n      removeListener.call(socket, 'error', onError)\n      cont()\n    }\n\n    const onOpen = () => cleanUp(resolve)\n    const onError = err => cleanUp(() => reject(err))\n\n    socket.addEventListener('open', onOpen)\n    socket.addEventListener('error', onError)\n  })\n\n  return source\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}