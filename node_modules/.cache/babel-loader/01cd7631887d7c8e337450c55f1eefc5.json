{"ast":null,"code":"var _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\n/**\n * Rabin fingerprinting\n *\n * @class Rabin\n */\nvar Rabin = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\n   * Creates an instance of Rabin.\n   * @param { import(\"./../dist/rabin-wasm\") } asModule\n   * @param {number} [bits=12]\n   * @param {number} [min=8 * 1024]\n   * @param {number} [max=32 * 1024]\n   * @param {number} polynomial\n   * @memberof Rabin\n   */\n  function Rabin(asModule) {\n    var bits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 12;\n    var min = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 8 * 1024;\n    var max = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 32 * 1024;\n    var windowSize = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 64;\n    var polynomial = arguments.length > 5 ? arguments[5] : undefined;\n\n    _classCallCheck(this, Rabin);\n\n    this.bits = bits;\n    this.min = min;\n    this.max = max;\n    this.asModule = asModule;\n    this.rabin = new asModule.Rabin(bits, min, max, windowSize, polynomial);\n    this.polynomial = polynomial;\n  }\n  /**\n   * Fingerprints the buffer\n   *\n   * @param {Uint8Array} buf\n   * @returns {Array<number>}\n   * @memberof Rabin\n   */\n\n\n  _createClass(Rabin, [{\n    key: \"fingerprint\",\n    value: function fingerprint(buf) {\n      var _this$asModule = this.asModule,\n          __retain = _this$asModule.__retain,\n          __release = _this$asModule.__release,\n          __allocArray = _this$asModule.__allocArray,\n          __getInt32Array = _this$asModule.__getInt32Array,\n          Int32Array_ID = _this$asModule.Int32Array_ID,\n          Uint8Array_ID = _this$asModule.Uint8Array_ID;\n      var lengths = new Int32Array(Math.ceil(buf.length / this.min));\n\n      var lengthsPtr = __retain(__allocArray(Int32Array_ID, lengths));\n\n      var pointer = __retain(__allocArray(Uint8Array_ID, buf));\n\n      var out = this.rabin.fingerprint(pointer, lengthsPtr);\n\n      var processed = __getInt32Array(out);\n\n      __release(pointer);\n\n      __release(lengthsPtr);\n\n      var end = processed.indexOf(0);\n      return end >= 0 ? processed.subarray(0, end) : processed;\n    }\n  }]);\n\n  return Rabin;\n}();\n\nmodule.exports = Rabin;","map":{"version":3,"names":["Rabin","asModule","bits","min","max","windowSize","polynomial","rabin","buf","__retain","__release","__allocArray","__getInt32Array","Int32Array_ID","Uint8Array_ID","lengths","Int32Array","Math","ceil","length","lengthsPtr","pointer","out","fingerprint","processed","end","indexOf","subarray","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/rabin-wasm/src/rabin.js"],"sourcesContent":["/**\n * Rabin fingerprinting\n *\n * @class Rabin\n */\nclass Rabin {\n    /**\n     * Creates an instance of Rabin.\n     * @param { import(\"./../dist/rabin-wasm\") } asModule\n     * @param {number} [bits=12]\n     * @param {number} [min=8 * 1024]\n     * @param {number} [max=32 * 1024]\n     * @param {number} polynomial\n     * @memberof Rabin\n     */\n    constructor(asModule, bits = 12, min = 8 * 1024, max = 32 * 1024, windowSize = 64, polynomial) {\n        this.bits = bits\n        this.min = min\n        this.max = max\n        this.asModule = asModule\n        this.rabin = new asModule.Rabin(bits, min, max, windowSize, polynomial)\n        this.polynomial = polynomial\n    }\n\n    /**\n     * Fingerprints the buffer\n     *\n     * @param {Uint8Array} buf\n     * @returns {Array<number>}\n     * @memberof Rabin\n     */\n    fingerprint(buf) {\n        const {\n            __retain,\n            __release,\n            __allocArray,\n            __getInt32Array,\n            Int32Array_ID,\n            Uint8Array_ID\n        } = this.asModule\n\n        const lengths = new Int32Array(Math.ceil(buf.length/this.min))\n        const lengthsPtr = __retain(__allocArray(Int32Array_ID, lengths))\n        const pointer = __retain(__allocArray(Uint8Array_ID, buf))\n\n        const out = this.rabin.fingerprint(pointer, lengthsPtr)\n        const processed = __getInt32Array(out)\n\n        __release(pointer)\n        __release(lengthsPtr)\n\n        const end = processed.indexOf(0);\n        return end >= 0 ? processed.subarray(0, end) : processed;\n    }\n}\n\nmodule.exports = Rabin"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;IACMA,K;;;EACF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,eAAYC,QAAZ,EAA+F;IAAA,IAAzEC,IAAyE,uEAAlE,EAAkE;IAAA,IAA9DC,GAA8D,uEAAxD,IAAI,IAAoD;IAAA,IAA9CC,GAA8C,uEAAxC,KAAK,IAAmC;IAAA,IAA7BC,UAA6B,uEAAhB,EAAgB;IAAA,IAAZC,UAAY;;IAAA;;IAC3F,KAAKJ,IAAL,GAAYA,IAAZ;IACA,KAAKC,GAAL,GAAWA,GAAX;IACA,KAAKC,GAAL,GAAWA,GAAX;IACA,KAAKH,QAAL,GAAgBA,QAAhB;IACA,KAAKM,KAAL,GAAa,IAAIN,QAAQ,CAACD,KAAb,CAAmBE,IAAnB,EAAyBC,GAAzB,EAA8BC,GAA9B,EAAmCC,UAAnC,EAA+CC,UAA/C,CAAb;IACA,KAAKA,UAAL,GAAkBA,UAAlB;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;;;WACI,qBAAYE,GAAZ,EAAiB;MACb,qBAOI,KAAKP,QAPT;MAAA,IACIQ,QADJ,kBACIA,QADJ;MAAA,IAEIC,SAFJ,kBAEIA,SAFJ;MAAA,IAGIC,YAHJ,kBAGIA,YAHJ;MAAA,IAIIC,eAJJ,kBAIIA,eAJJ;MAAA,IAKIC,aALJ,kBAKIA,aALJ;MAAA,IAMIC,aANJ,kBAMIA,aANJ;MASA,IAAMC,OAAO,GAAG,IAAIC,UAAJ,CAAeC,IAAI,CAACC,IAAL,CAAUV,GAAG,CAACW,MAAJ,GAAW,KAAKhB,GAA1B,CAAf,CAAhB;;MACA,IAAMiB,UAAU,GAAGX,QAAQ,CAACE,YAAY,CAACE,aAAD,EAAgBE,OAAhB,CAAb,CAA3B;;MACA,IAAMM,OAAO,GAAGZ,QAAQ,CAACE,YAAY,CAACG,aAAD,EAAgBN,GAAhB,CAAb,CAAxB;;MAEA,IAAMc,GAAG,GAAG,KAAKf,KAAL,CAAWgB,WAAX,CAAuBF,OAAvB,EAAgCD,UAAhC,CAAZ;;MACA,IAAMI,SAAS,GAAGZ,eAAe,CAACU,GAAD,CAAjC;;MAEAZ,SAAS,CAACW,OAAD,CAAT;;MACAX,SAAS,CAACU,UAAD,CAAT;;MAEA,IAAMK,GAAG,GAAGD,SAAS,CAACE,OAAV,CAAkB,CAAlB,CAAZ;MACA,OAAOD,GAAG,IAAI,CAAP,GAAWD,SAAS,CAACG,QAAV,CAAmB,CAAnB,EAAsBF,GAAtB,CAAX,GAAwCD,SAA/C;IACH;;;;;;AAGLI,MAAM,CAACC,OAAP,GAAiB7B,KAAjB"},"metadata":{},"sourceType":"script"}