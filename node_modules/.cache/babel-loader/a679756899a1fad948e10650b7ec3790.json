{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar EC = require('elliptic').ec;\n\nvar ec = new EC('secp256k1');\nmodule.exports = {\n  verify: function () {\n    var _verify = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(signature, publicKey, data) {\n      var res, key;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (signature) {\n                _context.next = 2;\n                break;\n              }\n\n              throw new Error('No signature given');\n\n            case 2:\n              if (publicKey) {\n                _context.next = 4;\n                break;\n              }\n\n              throw new Error('Given publicKey was undefined');\n\n            case 4:\n              if (data) {\n                _context.next = 6;\n                break;\n              }\n\n              throw new Error('Given input data was undefined');\n\n            case 6:\n              res = false;\n              key = ec.keyPair({\n                pub: publicKey,\n                pubEnc: 'hex'\n              });\n\n              try {\n                res = ec.verify(data, signature, key);\n              } catch (e) {// Catches 'Error: Signature without r or s'\n              }\n\n              return _context.abrupt(\"return\", Promise.resolve(res));\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function verify(_x, _x2, _x3) {\n      return _verify.apply(this, arguments);\n    }\n\n    return verify;\n  }()\n};","map":{"version":3,"names":["EC","require","ec","module","exports","verify","signature","publicKey","data","Error","res","key","keyPair","pub","pubEnc","e","Promise","resolve"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/orbit-db-keystore/src/verifiers/verifierv0.js"],"sourcesContent":["'use strict'\n\nconst EC = require('elliptic').ec\nconst ec = new EC('secp256k1')\n\nmodule.exports = {\n  verify: async (signature, publicKey, data) => {\n    if (!signature) {\n      throw new Error('No signature given')\n    }\n    if (!publicKey) {\n      throw new Error('Given publicKey was undefined')\n    }\n    if (!data) {\n      throw new Error('Given input data was undefined')\n    }\n    let res = false\n    const key = ec.keyPair({\n      pub: publicKey,\n      pubEnc: 'hex'\n    })\n    try {\n      res = ec.verify(data, signature, key)\n    } catch (e) {\n      // Catches 'Error: Signature without r or s'\n    }\n    return Promise.resolve(res)\n  }\n}\n"],"mappings":"AAAA;;;;;;AAEA,IAAMA,EAAE,GAAGC,OAAO,CAAC,UAAD,CAAP,CAAoBC,EAA/B;;AACA,IAAMA,EAAE,GAAG,IAAIF,EAAJ,CAAO,WAAP,CAAX;AAEAG,MAAM,CAACC,OAAP,GAAiB;EACfC,MAAM;IAAA,yEAAE,iBAAOC,SAAP,EAAkBC,SAAlB,EAA6BC,IAA7B;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA,IACDF,SADC;gBAAA;gBAAA;cAAA;;cAAA,MAEE,IAAIG,KAAJ,CAAU,oBAAV,CAFF;;YAAA;cAAA,IAIDF,SAJC;gBAAA;gBAAA;cAAA;;cAAA,MAKE,IAAIE,KAAJ,CAAU,+BAAV,CALF;;YAAA;cAAA,IAODD,IAPC;gBAAA;gBAAA;cAAA;;cAAA,MAQE,IAAIC,KAAJ,CAAU,gCAAV,CARF;;YAAA;cAUFC,GAVE,GAUI,KAVJ;cAWAC,GAXA,GAWMT,EAAE,CAACU,OAAH,CAAW;gBACrBC,GAAG,EAAEN,SADgB;gBAErBO,MAAM,EAAE;cAFa,CAAX,CAXN;;cAeN,IAAI;gBACFJ,GAAG,GAAGR,EAAE,CAACG,MAAH,CAAUG,IAAV,EAAgBF,SAAhB,EAA2BK,GAA3B,CAAN;cACD,CAFD,CAEE,OAAOI,CAAP,EAAU,CACV;cACD;;cAnBK,iCAoBCC,OAAO,CAACC,OAAR,CAAgBP,GAAhB,CApBD;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAF;;IAAA;MAAA;IAAA;;IAAA;EAAA;AADS,CAAjB"},"metadata":{},"sourceType":"script"}