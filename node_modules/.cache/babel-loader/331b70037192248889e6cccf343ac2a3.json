{"ast":null,"code":"'use strict';\n\nconst pkgversion = require('../../package.json').version;\n\nconst {\n  Multiaddr\n} = require('multiaddr');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst {\n  toString: uint8ArrayToString\n} = require('uint8arrays/to-string');\n\nconst PeerId = require('peer-id');\n\nconst {\n  NotStartedError\n} = require('../errors');\n/**\n * @param {Object} config\n * @param {import('peer-id')} config.peerId\n * @param {import('../types').NetworkService} config.network\n */\n\n\nmodule.exports = _ref => {\n  let {\n    peerId,\n    network\n  } = _ref;\n\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"id\"]}\n   */\n  async function id() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    // eslint-disable-line require-await\n    if (options.peerId === peerId.toB58String()) {\n      delete options.peerId;\n    }\n\n    const net = network.try();\n\n    if (!net) {\n      if (options.peerId) {\n        throw new NotStartedError();\n      }\n\n      const idStr = peerId.toB58String();\n      return {\n        id: idStr,\n        publicKey: uint8ArrayToString(peerId.pubKey.bytes, 'base64pad'),\n        addresses: [],\n        agentVersion: `js-ipfs/${pkgversion}`,\n        protocolVersion: '9000',\n        protocols: []\n      };\n    }\n\n    const id = options.peerId ? PeerId.createFromB58String(options.peerId.toString()) : peerId;\n    const {\n      libp2p\n    } = net;\n    const publicKey = options.peerId ? libp2p.peerStore.keyBook.get(id) : id.pubKey;\n    const addresses = options.peerId ? libp2p.peerStore.addressBook.getMultiaddrsForPeer(id) : libp2p.multiaddrs;\n    const protocols = options.peerId ? libp2p.peerStore.protoBook.get(id) : Array.from(libp2p.upgrader.protocols.keys());\n    const agentVersion = uint8ArrayToString(libp2p.peerStore.metadataBook.getValue(id, 'AgentVersion') || new Uint8Array());\n    const protocolVersion = uint8ArrayToString(libp2p.peerStore.metadataBook.getValue(id, 'ProtocolVersion') || new Uint8Array());\n    const idStr = id.toB58String();\n    return {\n      id: idStr,\n      publicKey: uint8ArrayToString(publicKey.bytes, 'base64pad'),\n      addresses: (addresses || []).map(ma => {\n        const str = ma.toString(); // some relay-style transports add our peer id to the ma for us\n        // so don't double-add\n\n        if (str.endsWith(`/p2p/${idStr}`)) {\n          return str;\n        }\n\n        return `${str}/p2p/${idStr}`;\n      }).sort().map(ma => new Multiaddr(ma)),\n      agentVersion,\n      protocolVersion,\n      protocols: (protocols || []).sort()\n    };\n  }\n\n  return withTimeoutOption(id);\n};","map":{"version":3,"names":["pkgversion","require","version","Multiaddr","withTimeoutOption","toString","uint8ArrayToString","PeerId","NotStartedError","module","exports","peerId","network","id","options","toB58String","net","try","idStr","publicKey","pubKey","bytes","addresses","agentVersion","protocolVersion","protocols","createFromB58String","libp2p","peerStore","keyBook","get","addressBook","getMultiaddrsForPeer","multiaddrs","protoBook","Array","from","upgrader","keys","metadataBook","getValue","Uint8Array","map","ma","str","endsWith","sort"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/id.js"],"sourcesContent":["'use strict'\n\nconst pkgversion = require('../../package.json').version\nconst { Multiaddr } = require('multiaddr')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\nconst PeerId = require('peer-id')\nconst { NotStartedError } = require('../errors')\n\n/**\n * @param {Object} config\n * @param {import('peer-id')} config.peerId\n * @param {import('../types').NetworkService} config.network\n */\nmodule.exports = ({ peerId, network }) => {\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"id\"]}\n   */\n  async function id (options = {}) { // eslint-disable-line require-await\n    if (options.peerId === peerId.toB58String()) {\n      delete options.peerId\n    }\n\n    const net = network.try()\n\n    if (!net) {\n      if (options.peerId) {\n        throw new NotStartedError()\n      }\n\n      const idStr = peerId.toB58String()\n\n      return {\n        id: idStr,\n        publicKey: uint8ArrayToString(peerId.pubKey.bytes, 'base64pad'),\n        addresses: [],\n        agentVersion: `js-ipfs/${pkgversion}`,\n        protocolVersion: '9000',\n        protocols: []\n      }\n    }\n\n    const id = options.peerId ? PeerId.createFromB58String(options.peerId.toString()) : peerId\n    const { libp2p } = net\n\n    const publicKey = options.peerId ? libp2p.peerStore.keyBook.get(id) : id.pubKey\n    const addresses = options.peerId ? libp2p.peerStore.addressBook.getMultiaddrsForPeer(id) : libp2p.multiaddrs\n    const protocols = options.peerId ? libp2p.peerStore.protoBook.get(id) : Array.from(libp2p.upgrader.protocols.keys())\n    const agentVersion = uint8ArrayToString(libp2p.peerStore.metadataBook.getValue(id, 'AgentVersion') || new Uint8Array())\n    const protocolVersion = uint8ArrayToString(libp2p.peerStore.metadataBook.getValue(id, 'ProtocolVersion') || new Uint8Array())\n    const idStr = id.toB58String()\n\n    return {\n      id: idStr,\n      publicKey: uint8ArrayToString(publicKey.bytes, 'base64pad'),\n      addresses: (addresses || [])\n        .map(ma => {\n          const str = ma.toString()\n\n          // some relay-style transports add our peer id to the ma for us\n          // so don't double-add\n          if (str.endsWith(`/p2p/${idStr}`)) {\n            return str\n          }\n\n          return `${str}/p2p/${idStr}`\n        })\n        .sort()\n        .map(ma => new Multiaddr(ma)),\n      agentVersion,\n      protocolVersion,\n      protocols: (protocols || []).sort()\n    }\n  }\n  return withTimeoutOption(id)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}