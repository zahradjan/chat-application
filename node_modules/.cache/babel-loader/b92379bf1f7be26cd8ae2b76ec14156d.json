{"ast":null,"code":"'use strict';\n\nconst AccessController = require('./access-controller-interface');\n\nconst AccessControllerManifest = require('./access-controller-manifest');\n\nconst LegacyIPFSAccessController = require('./legacy-ipfs-access-controller');\n\nconst IPFSAccessController = require('./ipfs-access-controller');\n\nconst OrbitDBAccessController = require('./orbitdb-access-controller');\n\nconst supportedTypes = {\n  'legacy-ipfs': LegacyIPFSAccessController,\n  ipfs: IPFSAccessController,\n  orbitdb: OrbitDBAccessController\n};\n\nconst getHandlerFor = type => {\n  if (!AccessControllers.isSupported(type)) {\n    throw new Error(`AccessController type '${type}' is not supported`);\n  }\n\n  return supportedTypes[type];\n};\n\nclass AccessControllers {\n  static get AccessController() {\n    return AccessController;\n  }\n\n  static isSupported(type) {\n    return Object.keys(supportedTypes).includes(type);\n  }\n\n  static addAccessController(options) {\n    if (!options.AccessController) {\n      throw new Error('AccessController class needs to be given as an option');\n    }\n\n    if (!options.AccessController.type || typeof options.AccessController.type !== 'string') {\n      throw new Error('Given AccessController class needs to implement: static get type() { /* return a string */}.');\n    }\n\n    supportedTypes[options.AccessController.type] = options.AccessController;\n  }\n\n  static addAccessControllers(options) {\n    const accessControllers = options.AccessControllers;\n\n    if (!accessControllers) {\n      throw new Error('AccessController classes need to be given as an option');\n    }\n\n    accessControllers.forEach(accessController => {\n      AccessControllers.addAccessController({\n        AccessController: accessController\n      });\n    });\n  }\n\n  static removeAccessController(type) {\n    delete supportedTypes[type];\n  }\n\n  static async resolve(orbitdb, manifestAddress) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const {\n      type,\n      params\n    } = await AccessControllerManifest.resolve(orbitdb._ipfs, manifestAddress, options);\n    const AccessController = getHandlerFor(type);\n    const accessController = await AccessController.create(orbitdb, Object.assign({}, options, params));\n    await accessController.load(params.address);\n    return accessController;\n  }\n\n  static async create(orbitdb, type) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const AccessController = getHandlerFor(type);\n    const ac = await AccessController.create(orbitdb, options);\n    const params = await ac.save();\n    const hash = await AccessControllerManifest.create(orbitdb._ipfs, type, params);\n    return hash;\n  }\n\n}\n\nmodule.exports = AccessControllers;","map":{"version":3,"names":["AccessController","require","AccessControllerManifest","LegacyIPFSAccessController","IPFSAccessController","OrbitDBAccessController","supportedTypes","ipfs","orbitdb","getHandlerFor","type","AccessControllers","isSupported","Error","Object","keys","includes","addAccessController","options","addAccessControllers","accessControllers","forEach","accessController","removeAccessController","resolve","manifestAddress","params","_ipfs","create","assign","load","address","ac","save","hash","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/orbit-db-access-controllers/src/access-controllers.js"],"sourcesContent":["'use strict'\n\nconst AccessController = require('./access-controller-interface')\nconst AccessControllerManifest = require('./access-controller-manifest')\nconst LegacyIPFSAccessController = require('./legacy-ipfs-access-controller')\nconst IPFSAccessController = require('./ipfs-access-controller')\nconst OrbitDBAccessController = require('./orbitdb-access-controller')\n\nconst supportedTypes = {\n  'legacy-ipfs': LegacyIPFSAccessController,\n  ipfs: IPFSAccessController,\n  orbitdb: OrbitDBAccessController\n}\n\nconst getHandlerFor = (type) => {\n  if (!AccessControllers.isSupported(type)) {\n    throw new Error(`AccessController type '${type}' is not supported`)\n  }\n  return supportedTypes[type]\n}\n\nclass AccessControllers {\n  static get AccessController () { return AccessController }\n\n  static isSupported (type) {\n    return Object.keys(supportedTypes).includes(type)\n  }\n\n  static addAccessController (options) {\n    if (!options.AccessController) {\n      throw new Error('AccessController class needs to be given as an option')\n    }\n\n    if (!options.AccessController.type ||\n      typeof options.AccessController.type !== 'string') {\n      throw new Error('Given AccessController class needs to implement: static get type() { /* return a string */}.')\n    }\n\n    supportedTypes[options.AccessController.type] = options.AccessController\n  }\n\n  static addAccessControllers (options) {\n    const accessControllers = options.AccessControllers\n    if (!accessControllers) {\n      throw new Error('AccessController classes need to be given as an option')\n    }\n\n    accessControllers.forEach((accessController) => {\n      AccessControllers.addAccessController({ AccessController: accessController })\n    })\n  }\n\n  static removeAccessController (type) {\n    delete supportedTypes[type]\n  }\n\n  static async resolve (orbitdb, manifestAddress, options = {}) {\n    const { type, params } = await AccessControllerManifest.resolve(orbitdb._ipfs, manifestAddress, options)\n    const AccessController = getHandlerFor(type)\n    const accessController = await AccessController.create(orbitdb, Object.assign({}, options, params))\n    await accessController.load(params.address)\n    return accessController\n  }\n\n  static async create (orbitdb, type, options = {}) {\n    const AccessController = getHandlerFor(type)\n    const ac = await AccessController.create(orbitdb, options)\n    const params = await ac.save()\n    const hash = await AccessControllerManifest.create(orbitdb._ipfs, type, params)\n    return hash\n  }\n}\n\nmodule.exports = AccessControllers\n"],"mappings":"AAAA;;AAEA,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,+BAAD,CAAhC;;AACA,MAAMC,wBAAwB,GAAGD,OAAO,CAAC,8BAAD,CAAxC;;AACA,MAAME,0BAA0B,GAAGF,OAAO,CAAC,iCAAD,CAA1C;;AACA,MAAMG,oBAAoB,GAAGH,OAAO,CAAC,0BAAD,CAApC;;AACA,MAAMI,uBAAuB,GAAGJ,OAAO,CAAC,6BAAD,CAAvC;;AAEA,MAAMK,cAAc,GAAG;EACrB,eAAeH,0BADM;EAErBI,IAAI,EAAEH,oBAFe;EAGrBI,OAAO,EAAEH;AAHY,CAAvB;;AAMA,MAAMI,aAAa,GAAIC,IAAD,IAAU;EAC9B,IAAI,CAACC,iBAAiB,CAACC,WAAlB,CAA8BF,IAA9B,CAAL,EAA0C;IACxC,MAAM,IAAIG,KAAJ,CAAW,0BAAyBH,IAAK,oBAAzC,CAAN;EACD;;EACD,OAAOJ,cAAc,CAACI,IAAD,CAArB;AACD,CALD;;AAOA,MAAMC,iBAAN,CAAwB;EACK,WAAhBX,gBAAgB,GAAI;IAAE,OAAOA,gBAAP;EAAyB;;EAExC,OAAXY,WAAW,CAAEF,IAAF,EAAQ;IACxB,OAAOI,MAAM,CAACC,IAAP,CAAYT,cAAZ,EAA4BU,QAA5B,CAAqCN,IAArC,CAAP;EACD;;EAEyB,OAAnBO,mBAAmB,CAAEC,OAAF,EAAW;IACnC,IAAI,CAACA,OAAO,CAAClB,gBAAb,EAA+B;MAC7B,MAAM,IAAIa,KAAJ,CAAU,uDAAV,CAAN;IACD;;IAED,IAAI,CAACK,OAAO,CAAClB,gBAAR,CAAyBU,IAA1B,IACF,OAAOQ,OAAO,CAAClB,gBAAR,CAAyBU,IAAhC,KAAyC,QAD3C,EACqD;MACnD,MAAM,IAAIG,KAAJ,CAAU,8FAAV,CAAN;IACD;;IAEDP,cAAc,CAACY,OAAO,CAAClB,gBAAR,CAAyBU,IAA1B,CAAd,GAAgDQ,OAAO,CAAClB,gBAAxD;EACD;;EAE0B,OAApBmB,oBAAoB,CAAED,OAAF,EAAW;IACpC,MAAME,iBAAiB,GAAGF,OAAO,CAACP,iBAAlC;;IACA,IAAI,CAACS,iBAAL,EAAwB;MACtB,MAAM,IAAIP,KAAJ,CAAU,wDAAV,CAAN;IACD;;IAEDO,iBAAiB,CAACC,OAAlB,CAA2BC,gBAAD,IAAsB;MAC9CX,iBAAiB,CAACM,mBAAlB,CAAsC;QAAEjB,gBAAgB,EAAEsB;MAApB,CAAtC;IACD,CAFD;EAGD;;EAE4B,OAAtBC,sBAAsB,CAAEb,IAAF,EAAQ;IACnC,OAAOJ,cAAc,CAACI,IAAD,CAArB;EACD;;EAEmB,aAAPc,OAAO,CAAEhB,OAAF,EAAWiB,eAAX,EAA0C;IAAA,IAAdP,OAAc,uEAAJ,EAAI;IAC5D,MAAM;MAAER,IAAF;MAAQgB;IAAR,IAAmB,MAAMxB,wBAAwB,CAACsB,OAAzB,CAAiChB,OAAO,CAACmB,KAAzC,EAAgDF,eAAhD,EAAiEP,OAAjE,CAA/B;IACA,MAAMlB,gBAAgB,GAAGS,aAAa,CAACC,IAAD,CAAtC;IACA,MAAMY,gBAAgB,GAAG,MAAMtB,gBAAgB,CAAC4B,MAAjB,CAAwBpB,OAAxB,EAAiCM,MAAM,CAACe,MAAP,CAAc,EAAd,EAAkBX,OAAlB,EAA2BQ,MAA3B,CAAjC,CAA/B;IACA,MAAMJ,gBAAgB,CAACQ,IAAjB,CAAsBJ,MAAM,CAACK,OAA7B,CAAN;IACA,OAAOT,gBAAP;EACD;;EAEkB,aAANM,MAAM,CAAEpB,OAAF,EAAWE,IAAX,EAA+B;IAAA,IAAdQ,OAAc,uEAAJ,EAAI;IAChD,MAAMlB,gBAAgB,GAAGS,aAAa,CAACC,IAAD,CAAtC;IACA,MAAMsB,EAAE,GAAG,MAAMhC,gBAAgB,CAAC4B,MAAjB,CAAwBpB,OAAxB,EAAiCU,OAAjC,CAAjB;IACA,MAAMQ,MAAM,GAAG,MAAMM,EAAE,CAACC,IAAH,EAArB;IACA,MAAMC,IAAI,GAAG,MAAMhC,wBAAwB,CAAC0B,MAAzB,CAAgCpB,OAAO,CAACmB,KAAxC,EAA+CjB,IAA/C,EAAqDgB,MAArD,CAAnB;IACA,OAAOQ,IAAP;EACD;;AAjDqB;;AAoDxBC,MAAM,CAACC,OAAP,GAAiBzB,iBAAjB"},"metadata":{},"sourceType":"script"}