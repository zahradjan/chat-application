{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar dagPb = require('@ipld/dag-pb');\n\nvar _require2 = require('multiformats/hashes/sha2'),\n    sha256 = _require2.sha256;\n/**\n * @typedef {object} PersistOptions\n * @property {import('multiformats/codecs/interface').BlockCodec<any, any>} [codec]\n * @property {import('multiformats/hashes/interface').MultihashHasher} [hasher]\n * @property {import('multiformats/cid').CIDVersion} [cidVersion]\n * @property {boolean} [onlyHash]\n * @property {AbortSignal} [signal]\n */\n\n/**\n * @param {Uint8Array} buffer\n * @param {import('interface-blockstore').Blockstore} blockstore\n * @param {PersistOptions} options\n */\n\n\nvar persist = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(buffer, blockstore, options) {\n    var multihash, cid;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!options.codec) {\n              options.codec = dagPb;\n            }\n\n            if (!options.hasher) {\n              options.hasher = sha256;\n            }\n\n            if (options.cidVersion === undefined) {\n              options.cidVersion = 1;\n            }\n\n            if (options.codec === dagPb && options.hasher !== sha256) {\n              options.cidVersion = 1;\n            }\n\n            _context.next = 6;\n            return options.hasher.digest(buffer);\n\n          case 6:\n            multihash = _context.sent;\n            cid = CID.create(options.cidVersion, options.codec.code, multihash);\n\n            if (options.onlyHash) {\n              _context.next = 11;\n              break;\n            }\n\n            _context.next = 11;\n            return blockstore.put(cid, buffer, {\n              signal: options.signal\n            });\n\n          case 11:\n            return _context.abrupt(\"return\", cid);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function persist(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = persist;","map":{"version":3,"names":["require","CID","dagPb","sha256","persist","buffer","blockstore","options","codec","hasher","cidVersion","undefined","digest","multihash","cid","create","code","onlyHash","put","signal","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/files/utils/persist.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst dagPb = require('@ipld/dag-pb')\nconst { sha256 } = require('multiformats/hashes/sha2')\n\n/**\n * @typedef {object} PersistOptions\n * @property {import('multiformats/codecs/interface').BlockCodec<any, any>} [codec]\n * @property {import('multiformats/hashes/interface').MultihashHasher} [hasher]\n * @property {import('multiformats/cid').CIDVersion} [cidVersion]\n * @property {boolean} [onlyHash]\n * @property {AbortSignal} [signal]\n */\n\n/**\n * @param {Uint8Array} buffer\n * @param {import('interface-blockstore').Blockstore} blockstore\n * @param {PersistOptions} options\n */\nconst persist = async (buffer, blockstore, options) => {\n  if (!options.codec) {\n    options.codec = dagPb\n  }\n\n  if (!options.hasher) {\n    options.hasher = sha256\n  }\n\n  if (options.cidVersion === undefined) {\n    options.cidVersion = 1\n  }\n\n  if (options.codec === dagPb && options.hasher !== sha256) {\n    options.cidVersion = 1\n  }\n\n  const multihash = await options.hasher.digest(buffer)\n  const cid = CID.create(options.cidVersion, options.codec.code, multihash)\n\n  if (!options.onlyHash) {\n    await blockstore.put(cid, buffer, {\n      signal: options.signal\n    })\n  }\n\n  return cid\n}\n\nmodule.exports = persist\n"],"mappings":"AAAA;;;;;;AAEA,eAAgBA,OAAO,CAAC,kBAAD,CAAvB;AAAA,IAAQC,GAAR,YAAQA,GAAR;;AACA,IAAMC,KAAK,GAAGF,OAAO,CAAC,cAAD,CAArB;;AACA,gBAAmBA,OAAO,CAAC,0BAAD,CAA1B;AAAA,IAAQG,MAAR,aAAQA,MAAR;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AACA,IAAMC,OAAO;EAAA,sEAAG,iBAAOC,MAAP,EAAeC,UAAf,EAA2BC,OAA3B;IAAA;IAAA;MAAA;QAAA;UAAA;YACd,IAAI,CAACA,OAAO,CAACC,KAAb,EAAoB;cAClBD,OAAO,CAACC,KAAR,GAAgBN,KAAhB;YACD;;YAED,IAAI,CAACK,OAAO,CAACE,MAAb,EAAqB;cACnBF,OAAO,CAACE,MAAR,GAAiBN,MAAjB;YACD;;YAED,IAAII,OAAO,CAACG,UAAR,KAAuBC,SAA3B,EAAsC;cACpCJ,OAAO,CAACG,UAAR,GAAqB,CAArB;YACD;;YAED,IAAIH,OAAO,CAACC,KAAR,KAAkBN,KAAlB,IAA2BK,OAAO,CAACE,MAAR,KAAmBN,MAAlD,EAA0D;cACxDI,OAAO,CAACG,UAAR,GAAqB,CAArB;YACD;;YAfa;YAAA,OAiBUH,OAAO,CAACE,MAAR,CAAeG,MAAf,CAAsBP,MAAtB,CAjBV;;UAAA;YAiBRQ,SAjBQ;YAkBRC,GAlBQ,GAkBFb,GAAG,CAACc,MAAJ,CAAWR,OAAO,CAACG,UAAnB,EAA+BH,OAAO,CAACC,KAAR,CAAcQ,IAA7C,EAAmDH,SAAnD,CAlBE;;YAAA,IAoBTN,OAAO,CAACU,QApBC;cAAA;cAAA;YAAA;;YAAA;YAAA,OAqBNX,UAAU,CAACY,GAAX,CAAeJ,GAAf,EAAoBT,MAApB,EAA4B;cAChCc,MAAM,EAAEZ,OAAO,CAACY;YADgB,CAA5B,CArBM;;UAAA;YAAA,iCA0BPL,GA1BO;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAH;;EAAA,gBAAPV,OAAO;IAAA;EAAA;AAAA,GAAb;;AA6BAgB,MAAM,CAACC,OAAP,GAAiBjB,OAAjB"},"metadata":{},"sourceType":"script"}