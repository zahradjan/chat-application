{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IKHandshake = void 0;\n\nvar ik_1 = require(\"./handshakes/ik\");\n\nvar buffer_1 = require(\"buffer\");\n\nvar encoder_1 = require(\"./encoder\");\n\nvar utils_1 = require(\"./utils\");\n\nvar errors_1 = require(\"./errors\");\n\nvar logger_1 = require(\"./logger\");\n\nvar IKHandshake = /*#__PURE__*/function () {\n  function IKHandshake(isInitiator, payload, prologue, staticKeypair, connection, remoteStaticKey, remotePeer, handshake) {\n    _classCallCheck(this, IKHandshake);\n\n    this.isInitiator = isInitiator;\n    this.payload = buffer_1.Buffer.from(payload);\n    this.prologue = prologue;\n    this.staticKeypair = staticKeypair;\n    this.connection = connection;\n\n    if (remotePeer) {\n      this.remotePeer = remotePeer;\n    }\n\n    this.ik = handshake !== null && handshake !== void 0 ? handshake : new ik_1.IK();\n    this.session = this.ik.initSession(this.isInitiator, this.prologue, this.staticKeypair, remoteStaticKey);\n    this.remoteEarlyData = buffer_1.Buffer.alloc(0);\n  }\n\n  _createClass(IKHandshake, [{\n    key: \"stage0\",\n    value: function () {\n      var _stage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var messageBuffer, receivedMsg, receivedMessageBuffer, _this$ik$recvMessage, plaintext, valid, decodedPayload, err;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                logger_1.logLocalStaticKeys(this.session.hs.s);\n                logger_1.logRemoteStaticKey(this.session.hs.rs);\n\n                if (!this.isInitiator) {\n                  _context.next = 10;\n                  break;\n                }\n\n                logger_1.logger('IK Stage 0 - Initiator sending message...');\n                messageBuffer = this.ik.sendMessage(this.session, this.payload);\n                this.connection.writeLP(encoder_1.encode1(messageBuffer));\n                logger_1.logger('IK Stage 0 - Initiator sent message.');\n                logger_1.logLocalEphemeralKeys(this.session.hs.e);\n                _context.next = 41;\n                break;\n\n              case 10:\n                logger_1.logger('IK Stage 0 - Responder receiving message...');\n                _context.next = 13;\n                return this.connection.readLP();\n\n              case 13:\n                receivedMsg = _context.sent;\n                _context.prev = 14;\n                receivedMessageBuffer = encoder_1.decode1(receivedMsg.slice());\n                _this$ik$recvMessage = this.ik.recvMessage(this.session, receivedMessageBuffer), plaintext = _this$ik$recvMessage.plaintext, valid = _this$ik$recvMessage.valid;\n\n                if (valid) {\n                  _context.next = 19;\n                  break;\n                }\n\n                throw new Error('ik handshake stage 0 decryption validation fail');\n\n              case 19:\n                logger_1.logger('IK Stage 0 - Responder got message, going to verify payload.');\n                _context.next = 22;\n                return utils_1.decodePayload(plaintext);\n\n              case 22:\n                decodedPayload = _context.sent;\n                _context.t0 = this.remotePeer;\n\n                if (_context.t0) {\n                  _context.next = 28;\n                  break;\n                }\n\n                _context.next = 27;\n                return utils_1.getPeerIdFromPayload(decodedPayload);\n\n              case 27:\n                _context.t0 = _context.sent;\n\n              case 28:\n                this.remotePeer = _context.t0;\n                _context.next = 31;\n                return utils_1.verifySignedPayload(this.session.hs.rs, decodedPayload, this.remotePeer);\n\n              case 31:\n                this.setRemoteEarlyData(decodedPayload.data);\n                logger_1.logger('IK Stage 0 - Responder successfully verified payload!');\n                logger_1.logRemoteEphemeralKey(this.session.hs.re);\n                _context.next = 41;\n                break;\n\n              case 36:\n                _context.prev = 36;\n                _context.t1 = _context[\"catch\"](14);\n                err = _context.t1;\n                logger_1.logger('Responder breaking up with IK handshake in stage 0.');\n                throw new errors_1.FailedIKError(receivedMsg, \"Error occurred while verifying initiator's signed payload: \".concat(err.message));\n\n              case 41:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[14, 36]]);\n      }));\n\n      function stage0() {\n        return _stage.apply(this, arguments);\n      }\n\n      return stage0;\n    }()\n  }, {\n    key: \"stage1\",\n    value: function () {\n      var _stage2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var receivedMsg, receivedMessageBuffer, _this$ik$recvMessage2, plaintext, valid, decodedPayload, err, messageBuffer;\n\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!this.isInitiator) {\n                  _context2.next = 34;\n                  break;\n                }\n\n                logger_1.logger('IK Stage 1 - Initiator receiving message...');\n                _context2.next = 4;\n                return this.connection.readLP();\n\n              case 4:\n                receivedMsg = _context2.sent.slice();\n                receivedMessageBuffer = encoder_1.decode0(buffer_1.Buffer.from(receivedMsg));\n                _this$ik$recvMessage2 = this.ik.recvMessage(this.session, receivedMessageBuffer), plaintext = _this$ik$recvMessage2.plaintext, valid = _this$ik$recvMessage2.valid;\n                logger_1.logger('IK Stage 1 - Initiator got message, going to verify payload.');\n                _context2.prev = 8;\n\n                if (valid) {\n                  _context2.next = 11;\n                  break;\n                }\n\n                throw new Error('ik stage 1 decryption validation fail');\n\n              case 11:\n                _context2.next = 13;\n                return utils_1.decodePayload(plaintext);\n\n              case 13:\n                decodedPayload = _context2.sent;\n                _context2.t0 = this.remotePeer;\n\n                if (_context2.t0) {\n                  _context2.next = 19;\n                  break;\n                }\n\n                _context2.next = 18;\n                return utils_1.getPeerIdFromPayload(decodedPayload);\n\n              case 18:\n                _context2.t0 = _context2.sent;\n\n              case 19:\n                this.remotePeer = _context2.t0;\n                _context2.next = 22;\n                return utils_1.verifySignedPayload(receivedMessageBuffer.ns.slice(0, 32), decodedPayload, this.remotePeer);\n\n              case 22:\n                this.setRemoteEarlyData(decodedPayload.data);\n                logger_1.logger('IK Stage 1 - Initiator successfully verified payload!');\n                logger_1.logRemoteEphemeralKey(this.session.hs.re);\n                _context2.next = 32;\n                break;\n\n              case 27:\n                _context2.prev = 27;\n                _context2.t1 = _context2[\"catch\"](8);\n                err = _context2.t1;\n                logger_1.logger('Initiator breaking up with IK handshake in stage 1.');\n                throw new errors_1.FailedIKError(receivedMsg, \"Error occurred while verifying responder's signed payload: \".concat(err.message));\n\n              case 32:\n                _context2.next = 39;\n                break;\n\n              case 34:\n                logger_1.logger('IK Stage 1 - Responder sending message...');\n                messageBuffer = this.ik.sendMessage(this.session, this.payload);\n                this.connection.writeLP(encoder_1.encode0(messageBuffer));\n                logger_1.logger('IK Stage 1 - Responder sent message...');\n                logger_1.logLocalEphemeralKeys(this.session.hs.e);\n\n              case 39:\n                logger_1.logCipherState(this.session);\n\n              case 40:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[8, 27]]);\n      }));\n\n      function stage1() {\n        return _stage2.apply(this, arguments);\n      }\n\n      return stage1;\n    }()\n  }, {\n    key: \"decrypt\",\n    value: function decrypt(ciphertext, session) {\n      var cs = this.getCS(session, false);\n      return this.ik.decryptWithAd(cs, buffer_1.Buffer.alloc(0), ciphertext);\n    }\n  }, {\n    key: \"encrypt\",\n    value: function encrypt(plaintext, session) {\n      var cs = this.getCS(session);\n      return this.ik.encryptWithAd(cs, buffer_1.Buffer.alloc(0), plaintext);\n    }\n  }, {\n    key: \"getLocalEphemeralKeys\",\n    value: function getLocalEphemeralKeys() {\n      if (!this.session.hs.e) {\n        throw new Error('Ephemeral keys do not exist.');\n      }\n\n      return this.session.hs.e;\n    }\n  }, {\n    key: \"getCS\",\n    value: function getCS(session) {\n      var encryption = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      if (!session.cs1 || !session.cs2) {\n        throw new Error('Handshake not completed properly, cipher state does not exist.');\n      }\n\n      if (this.isInitiator) {\n        return encryption ? session.cs1 : session.cs2;\n      } else {\n        return encryption ? session.cs2 : session.cs1;\n      }\n    }\n  }, {\n    key: \"setRemoteEarlyData\",\n    value: function setRemoteEarlyData(data) {\n      if (data) {\n        this.remoteEarlyData = buffer_1.Buffer.from(data.buffer, data.byteOffset, data.length);\n      }\n    }\n  }]);\n\n  return IKHandshake;\n}();\n\nexports.IKHandshake = IKHandshake;","map":{"version":3,"mappings":"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","names":["IKHandshake","isInitiator","payload","prologue","staticKeypair","connection","remoteStaticKey","remotePeer","handshake","buffer_1","from","ik","ik_1","session","initSession","remoteEarlyData","alloc","logger_1","hs","s","rs","messageBuffer","sendMessage","writeLP","encoder_1","e","readLP","receivedMsg","receivedMessageBuffer","slice","recvMessage","plaintext","valid","Error","utils_1","decodedPayload","setRemoteEarlyData","data","re","err","errors_1","message","ns","ciphertext","cs","getCS","decryptWithAd","encryptWithAd","encryption","cs1","cs2","buffer","byteOffset","length","exports"],"sourceRoot":"","sources":["../../src/handshake-ik.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}