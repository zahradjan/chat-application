{"ast":null,"code":"/*eslint-disable*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\"); // Common aliases\n\n\nvar $Reader = $protobuf.Reader,\n    $Writer = $protobuf.Writer,\n    $util = $protobuf.util; // Exported root namespace\n\nvar $root = $protobuf.roots[\"ipfs-bitswap\"] || ($protobuf.roots[\"ipfs-bitswap\"] = {});\n\n$root.Message = function () {\n  /**\n   * Properties of a Message.\n   * @exports IMessage\n   * @interface IMessage\n   * @property {Message.IWantlist|null} [wantlist] Message wantlist\n   * @property {Array.<Uint8Array>|null} [blocks] Message blocks\n   * @property {Array.<Message.IBlock>|null} [payload] Message payload\n   * @property {Array.<Message.IBlockPresence>|null} [blockPresences] Message blockPresences\n   * @property {number|null} [pendingBytes] Message pendingBytes\n   */\n\n  /**\n   * Constructs a new Message.\n   * @exports Message\n   * @classdesc Represents a Message.\n   * @implements IMessage\n   * @constructor\n   * @param {IMessage=} [p] Properties to set\n   */\n  function Message(p) {\n    this.blocks = [];\n    this.payload = [];\n    this.blockPresences = [];\n    if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n  }\n  /**\n   * Message wantlist.\n   * @member {Message.IWantlist|null|undefined} wantlist\n   * @memberof Message\n   * @instance\n   */\n\n\n  Message.prototype.wantlist = null;\n  /**\n   * Message blocks.\n   * @member {Array.<Uint8Array>} blocks\n   * @memberof Message\n   * @instance\n   */\n\n  Message.prototype.blocks = $util.emptyArray;\n  /**\n   * Message payload.\n   * @member {Array.<Message.IBlock>} payload\n   * @memberof Message\n   * @instance\n   */\n\n  Message.prototype.payload = $util.emptyArray;\n  /**\n   * Message blockPresences.\n   * @member {Array.<Message.IBlockPresence>} blockPresences\n   * @memberof Message\n   * @instance\n   */\n\n  Message.prototype.blockPresences = $util.emptyArray;\n  /**\n   * Message pendingBytes.\n   * @member {number} pendingBytes\n   * @memberof Message\n   * @instance\n   */\n\n  Message.prototype.pendingBytes = 0;\n  /**\n   * Encodes the specified Message message. Does not implicitly {@link Message.verify|verify} messages.\n   * @function encode\n   * @memberof Message\n   * @static\n   * @param {IMessage} m Message message or plain object to encode\n   * @param {$protobuf.Writer} [w] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n  Message.encode = function encode(m, w) {\n    if (!w) w = $Writer.create();\n    if (m.wantlist != null && Object.hasOwnProperty.call(m, \"wantlist\")) $root.Message.Wantlist.encode(m.wantlist, w.uint32(10).fork()).ldelim();\n\n    if (m.blocks != null && m.blocks.length) {\n      for (var i = 0; i < m.blocks.length; ++i) w.uint32(18).bytes(m.blocks[i]);\n    }\n\n    if (m.payload != null && m.payload.length) {\n      for (var i = 0; i < m.payload.length; ++i) $root.Message.Block.encode(m.payload[i], w.uint32(26).fork()).ldelim();\n    }\n\n    if (m.blockPresences != null && m.blockPresences.length) {\n      for (var i = 0; i < m.blockPresences.length; ++i) $root.Message.BlockPresence.encode(m.blockPresences[i], w.uint32(34).fork()).ldelim();\n    }\n\n    if (m.pendingBytes != null && Object.hasOwnProperty.call(m, \"pendingBytes\")) w.uint32(40).int32(m.pendingBytes);\n    return w;\n  };\n  /**\n   * Decodes a Message message from the specified reader or buffer.\n   * @function decode\n   * @memberof Message\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n   * @param {number} [l] Message length if known beforehand\n   * @returns {Message} Message\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  Message.decode = function decode(r, l) {\n    if (!(r instanceof $Reader)) r = $Reader.create(r);\n    var c = l === undefined ? r.len : r.pos + l,\n        m = new $root.Message();\n\n    while (r.pos < c) {\n      var t = r.uint32();\n\n      switch (t >>> 3) {\n        case 1:\n          m.wantlist = $root.Message.Wantlist.decode(r, r.uint32());\n          break;\n\n        case 2:\n          if (!(m.blocks && m.blocks.length)) m.blocks = [];\n          m.blocks.push(r.bytes());\n          break;\n\n        case 3:\n          if (!(m.payload && m.payload.length)) m.payload = [];\n          m.payload.push($root.Message.Block.decode(r, r.uint32()));\n          break;\n\n        case 4:\n          if (!(m.blockPresences && m.blockPresences.length)) m.blockPresences = [];\n          m.blockPresences.push($root.Message.BlockPresence.decode(r, r.uint32()));\n          break;\n\n        case 5:\n          m.pendingBytes = r.int32();\n          break;\n\n        default:\n          r.skipType(t & 7);\n          break;\n      }\n    }\n\n    return m;\n  };\n  /**\n   * Creates a Message message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Message\n   * @static\n   * @param {Object.<string,*>} d Plain object\n   * @returns {Message} Message\n   */\n\n\n  Message.fromObject = function fromObject(d) {\n    if (d instanceof $root.Message) return d;\n    var m = new $root.Message();\n\n    if (d.wantlist != null) {\n      if (typeof d.wantlist !== \"object\") throw TypeError(\".Message.wantlist: object expected\");\n      m.wantlist = $root.Message.Wantlist.fromObject(d.wantlist);\n    }\n\n    if (d.blocks) {\n      if (!Array.isArray(d.blocks)) throw TypeError(\".Message.blocks: array expected\");\n      m.blocks = [];\n\n      for (var i = 0; i < d.blocks.length; ++i) {\n        if (typeof d.blocks[i] === \"string\") $util.base64.decode(d.blocks[i], m.blocks[i] = $util.newBuffer($util.base64.length(d.blocks[i])), 0);else if (d.blocks[i].length) m.blocks[i] = d.blocks[i];\n      }\n    }\n\n    if (d.payload) {\n      if (!Array.isArray(d.payload)) throw TypeError(\".Message.payload: array expected\");\n      m.payload = [];\n\n      for (var i = 0; i < d.payload.length; ++i) {\n        if (typeof d.payload[i] !== \"object\") throw TypeError(\".Message.payload: object expected\");\n        m.payload[i] = $root.Message.Block.fromObject(d.payload[i]);\n      }\n    }\n\n    if (d.blockPresences) {\n      if (!Array.isArray(d.blockPresences)) throw TypeError(\".Message.blockPresences: array expected\");\n      m.blockPresences = [];\n\n      for (var i = 0; i < d.blockPresences.length; ++i) {\n        if (typeof d.blockPresences[i] !== \"object\") throw TypeError(\".Message.blockPresences: object expected\");\n        m.blockPresences[i] = $root.Message.BlockPresence.fromObject(d.blockPresences[i]);\n      }\n    }\n\n    if (d.pendingBytes != null) {\n      m.pendingBytes = d.pendingBytes | 0;\n    }\n\n    return m;\n  };\n  /**\n   * Creates a plain object from a Message message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Message\n   * @static\n   * @param {Message} m Message\n   * @param {$protobuf.IConversionOptions} [o] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  Message.toObject = function toObject(m, o) {\n    if (!o) o = {};\n    var d = {};\n\n    if (o.arrays || o.defaults) {\n      d.blocks = [];\n      d.payload = [];\n      d.blockPresences = [];\n    }\n\n    if (o.defaults) {\n      d.wantlist = null;\n      d.pendingBytes = 0;\n    }\n\n    if (m.wantlist != null && m.hasOwnProperty(\"wantlist\")) {\n      d.wantlist = $root.Message.Wantlist.toObject(m.wantlist, o);\n    }\n\n    if (m.blocks && m.blocks.length) {\n      d.blocks = [];\n\n      for (var j = 0; j < m.blocks.length; ++j) {\n        d.blocks[j] = o.bytes === String ? $util.base64.encode(m.blocks[j], 0, m.blocks[j].length) : o.bytes === Array ? Array.prototype.slice.call(m.blocks[j]) : m.blocks[j];\n      }\n    }\n\n    if (m.payload && m.payload.length) {\n      d.payload = [];\n\n      for (var j = 0; j < m.payload.length; ++j) {\n        d.payload[j] = $root.Message.Block.toObject(m.payload[j], o);\n      }\n    }\n\n    if (m.blockPresences && m.blockPresences.length) {\n      d.blockPresences = [];\n\n      for (var j = 0; j < m.blockPresences.length; ++j) {\n        d.blockPresences[j] = $root.Message.BlockPresence.toObject(m.blockPresences[j], o);\n      }\n    }\n\n    if (m.pendingBytes != null && m.hasOwnProperty(\"pendingBytes\")) {\n      d.pendingBytes = m.pendingBytes;\n    }\n\n    return d;\n  };\n  /**\n   * Converts this Message to JSON.\n   * @function toJSON\n   * @memberof Message\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  Message.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  Message.Wantlist = function () {\n    /**\n     * Properties of a Wantlist.\n     * @memberof Message\n     * @interface IWantlist\n     * @property {Array.<Message.Wantlist.IEntry>|null} [entries] Wantlist entries\n     * @property {boolean|null} [full] Wantlist full\n     */\n\n    /**\n     * Constructs a new Wantlist.\n     * @memberof Message\n     * @classdesc Represents a Wantlist.\n     * @implements IWantlist\n     * @constructor\n     * @param {Message.IWantlist=} [p] Properties to set\n     */\n    function Wantlist(p) {\n      this.entries = [];\n      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n    }\n    /**\n     * Wantlist entries.\n     * @member {Array.<Message.Wantlist.IEntry>} entries\n     * @memberof Message.Wantlist\n     * @instance\n     */\n\n\n    Wantlist.prototype.entries = $util.emptyArray;\n    /**\n     * Wantlist full.\n     * @member {boolean} full\n     * @memberof Message.Wantlist\n     * @instance\n     */\n\n    Wantlist.prototype.full = false;\n    /**\n     * Encodes the specified Wantlist message. Does not implicitly {@link Message.Wantlist.verify|verify} messages.\n     * @function encode\n     * @memberof Message.Wantlist\n     * @static\n     * @param {Message.IWantlist} m Wantlist message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n    Wantlist.encode = function encode(m, w) {\n      if (!w) w = $Writer.create();\n\n      if (m.entries != null && m.entries.length) {\n        for (var i = 0; i < m.entries.length; ++i) $root.Message.Wantlist.Entry.encode(m.entries[i], w.uint32(10).fork()).ldelim();\n      }\n\n      if (m.full != null && Object.hasOwnProperty.call(m, \"full\")) w.uint32(16).bool(m.full);\n      return w;\n    };\n    /**\n     * Decodes a Wantlist message from the specified reader or buffer.\n     * @function decode\n     * @memberof Message.Wantlist\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Message.Wantlist} Wantlist\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    Wantlist.decode = function decode(r, l) {\n      if (!(r instanceof $Reader)) r = $Reader.create(r);\n      var c = l === undefined ? r.len : r.pos + l,\n          m = new $root.Message.Wantlist();\n\n      while (r.pos < c) {\n        var t = r.uint32();\n\n        switch (t >>> 3) {\n          case 1:\n            if (!(m.entries && m.entries.length)) m.entries = [];\n            m.entries.push($root.Message.Wantlist.Entry.decode(r, r.uint32()));\n            break;\n\n          case 2:\n            m.full = r.bool();\n            break;\n\n          default:\n            r.skipType(t & 7);\n            break;\n        }\n      }\n\n      return m;\n    };\n    /**\n     * Creates a Wantlist message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Message.Wantlist\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Message.Wantlist} Wantlist\n     */\n\n\n    Wantlist.fromObject = function fromObject(d) {\n      if (d instanceof $root.Message.Wantlist) return d;\n      var m = new $root.Message.Wantlist();\n\n      if (d.entries) {\n        if (!Array.isArray(d.entries)) throw TypeError(\".Message.Wantlist.entries: array expected\");\n        m.entries = [];\n\n        for (var i = 0; i < d.entries.length; ++i) {\n          if (typeof d.entries[i] !== \"object\") throw TypeError(\".Message.Wantlist.entries: object expected\");\n          m.entries[i] = $root.Message.Wantlist.Entry.fromObject(d.entries[i]);\n        }\n      }\n\n      if (d.full != null) {\n        m.full = Boolean(d.full);\n      }\n\n      return m;\n    };\n    /**\n     * Creates a plain object from a Wantlist message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Message.Wantlist\n     * @static\n     * @param {Message.Wantlist} m Wantlist\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    Wantlist.toObject = function toObject(m, o) {\n      if (!o) o = {};\n      var d = {};\n\n      if (o.arrays || o.defaults) {\n        d.entries = [];\n      }\n\n      if (o.defaults) {\n        d.full = false;\n      }\n\n      if (m.entries && m.entries.length) {\n        d.entries = [];\n\n        for (var j = 0; j < m.entries.length; ++j) {\n          d.entries[j] = $root.Message.Wantlist.Entry.toObject(m.entries[j], o);\n        }\n      }\n\n      if (m.full != null && m.hasOwnProperty(\"full\")) {\n        d.full = m.full;\n      }\n\n      return d;\n    };\n    /**\n     * Converts this Wantlist to JSON.\n     * @function toJSON\n     * @memberof Message.Wantlist\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    Wantlist.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n    /**\n     * WantType enum.\n     * @name Message.Wantlist.WantType\n     * @enum {number}\n     * @property {number} Block=0 Block value\n     * @property {number} Have=1 Have value\n     */\n\n\n    Wantlist.WantType = function () {\n      var valuesById = {},\n          values = Object.create(valuesById);\n      values[valuesById[0] = \"Block\"] = 0;\n      values[valuesById[1] = \"Have\"] = 1;\n      return values;\n    }();\n\n    Wantlist.Entry = function () {\n      /**\n       * Properties of an Entry.\n       * @memberof Message.Wantlist\n       * @interface IEntry\n       * @property {Uint8Array|null} [block] Entry block\n       * @property {number|null} [priority] Entry priority\n       * @property {boolean|null} [cancel] Entry cancel\n       * @property {Message.Wantlist.WantType|null} [wantType] Entry wantType\n       * @property {boolean|null} [sendDontHave] Entry sendDontHave\n       */\n\n      /**\n       * Constructs a new Entry.\n       * @memberof Message.Wantlist\n       * @classdesc Represents an Entry.\n       * @implements IEntry\n       * @constructor\n       * @param {Message.Wantlist.IEntry=} [p] Properties to set\n       */\n      function Entry(p) {\n        if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n      }\n      /**\n       * Entry block.\n       * @member {Uint8Array} block\n       * @memberof Message.Wantlist.Entry\n       * @instance\n       */\n\n\n      Entry.prototype.block = $util.newBuffer([]);\n      /**\n       * Entry priority.\n       * @member {number} priority\n       * @memberof Message.Wantlist.Entry\n       * @instance\n       */\n\n      Entry.prototype.priority = 0;\n      /**\n       * Entry cancel.\n       * @member {boolean} cancel\n       * @memberof Message.Wantlist.Entry\n       * @instance\n       */\n\n      Entry.prototype.cancel = false;\n      /**\n       * Entry wantType.\n       * @member {Message.Wantlist.WantType} wantType\n       * @memberof Message.Wantlist.Entry\n       * @instance\n       */\n\n      Entry.prototype.wantType = 0;\n      /**\n       * Entry sendDontHave.\n       * @member {boolean} sendDontHave\n       * @memberof Message.Wantlist.Entry\n       * @instance\n       */\n\n      Entry.prototype.sendDontHave = false;\n      /**\n       * Encodes the specified Entry message. Does not implicitly {@link Message.Wantlist.Entry.verify|verify} messages.\n       * @function encode\n       * @memberof Message.Wantlist.Entry\n       * @static\n       * @param {Message.Wantlist.IEntry} m Entry message or plain object to encode\n       * @param {$protobuf.Writer} [w] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n      Entry.encode = function encode(m, w) {\n        if (!w) w = $Writer.create();\n        if (m.block != null && Object.hasOwnProperty.call(m, \"block\")) w.uint32(10).bytes(m.block);\n        if (m.priority != null && Object.hasOwnProperty.call(m, \"priority\")) w.uint32(16).int32(m.priority);\n        if (m.cancel != null && Object.hasOwnProperty.call(m, \"cancel\")) w.uint32(24).bool(m.cancel);\n        if (m.wantType != null && Object.hasOwnProperty.call(m, \"wantType\")) w.uint32(32).int32(m.wantType);\n        if (m.sendDontHave != null && Object.hasOwnProperty.call(m, \"sendDontHave\")) w.uint32(40).bool(m.sendDontHave);\n        return w;\n      };\n      /**\n       * Decodes an Entry message from the specified reader or buffer.\n       * @function decode\n       * @memberof Message.Wantlist.Entry\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n       * @param {number} [l] Message length if known beforehand\n       * @returns {Message.Wantlist.Entry} Entry\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      Entry.decode = function decode(r, l) {\n        if (!(r instanceof $Reader)) r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l,\n            m = new $root.Message.Wantlist.Entry();\n\n        while (r.pos < c) {\n          var t = r.uint32();\n\n          switch (t >>> 3) {\n            case 1:\n              m.block = r.bytes();\n              break;\n\n            case 2:\n              m.priority = r.int32();\n              break;\n\n            case 3:\n              m.cancel = r.bool();\n              break;\n\n            case 4:\n              m.wantType = r.int32();\n              break;\n\n            case 5:\n              m.sendDontHave = r.bool();\n              break;\n\n            default:\n              r.skipType(t & 7);\n              break;\n          }\n        }\n\n        return m;\n      };\n      /**\n       * Creates an Entry message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof Message.Wantlist.Entry\n       * @static\n       * @param {Object.<string,*>} d Plain object\n       * @returns {Message.Wantlist.Entry} Entry\n       */\n\n\n      Entry.fromObject = function fromObject(d) {\n        if (d instanceof $root.Message.Wantlist.Entry) return d;\n        var m = new $root.Message.Wantlist.Entry();\n\n        if (d.block != null) {\n          if (typeof d.block === \"string\") $util.base64.decode(d.block, m.block = $util.newBuffer($util.base64.length(d.block)), 0);else if (d.block.length) m.block = d.block;\n        }\n\n        if (d.priority != null) {\n          m.priority = d.priority | 0;\n        }\n\n        if (d.cancel != null) {\n          m.cancel = Boolean(d.cancel);\n        }\n\n        switch (d.wantType) {\n          case \"Block\":\n          case 0:\n            m.wantType = 0;\n            break;\n\n          case \"Have\":\n          case 1:\n            m.wantType = 1;\n            break;\n        }\n\n        if (d.sendDontHave != null) {\n          m.sendDontHave = Boolean(d.sendDontHave);\n        }\n\n        return m;\n      };\n      /**\n       * Creates a plain object from an Entry message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof Message.Wantlist.Entry\n       * @static\n       * @param {Message.Wantlist.Entry} m Entry\n       * @param {$protobuf.IConversionOptions} [o] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      Entry.toObject = function toObject(m, o) {\n        if (!o) o = {};\n        var d = {};\n\n        if (o.defaults) {\n          if (o.bytes === String) d.block = \"\";else {\n            d.block = [];\n            if (o.bytes !== Array) d.block = $util.newBuffer(d.block);\n          }\n          d.priority = 0;\n          d.cancel = false;\n          d.wantType = o.enums === String ? \"Block\" : 0;\n          d.sendDontHave = false;\n        }\n\n        if (m.block != null && m.hasOwnProperty(\"block\")) {\n          d.block = o.bytes === String ? $util.base64.encode(m.block, 0, m.block.length) : o.bytes === Array ? Array.prototype.slice.call(m.block) : m.block;\n        }\n\n        if (m.priority != null && m.hasOwnProperty(\"priority\")) {\n          d.priority = m.priority;\n        }\n\n        if (m.cancel != null && m.hasOwnProperty(\"cancel\")) {\n          d.cancel = m.cancel;\n        }\n\n        if (m.wantType != null && m.hasOwnProperty(\"wantType\")) {\n          d.wantType = o.enums === String ? $root.Message.Wantlist.WantType[m.wantType] : m.wantType;\n        }\n\n        if (m.sendDontHave != null && m.hasOwnProperty(\"sendDontHave\")) {\n          d.sendDontHave = m.sendDontHave;\n        }\n\n        return d;\n      };\n      /**\n       * Converts this Entry to JSON.\n       * @function toJSON\n       * @memberof Message.Wantlist.Entry\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      Entry.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return Entry;\n    }();\n\n    return Wantlist;\n  }();\n\n  Message.Block = function () {\n    /**\n     * Properties of a Block.\n     * @memberof Message\n     * @interface IBlock\n     * @property {Uint8Array|null} [prefix] Block prefix\n     * @property {Uint8Array|null} [data] Block data\n     */\n\n    /**\n     * Constructs a new Block.\n     * @memberof Message\n     * @classdesc Represents a Block.\n     * @implements IBlock\n     * @constructor\n     * @param {Message.IBlock=} [p] Properties to set\n     */\n    function Block(p) {\n      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n    }\n    /**\n     * Block prefix.\n     * @member {Uint8Array} prefix\n     * @memberof Message.Block\n     * @instance\n     */\n\n\n    Block.prototype.prefix = $util.newBuffer([]);\n    /**\n     * Block data.\n     * @member {Uint8Array} data\n     * @memberof Message.Block\n     * @instance\n     */\n\n    Block.prototype.data = $util.newBuffer([]);\n    /**\n     * Encodes the specified Block message. Does not implicitly {@link Message.Block.verify|verify} messages.\n     * @function encode\n     * @memberof Message.Block\n     * @static\n     * @param {Message.IBlock} m Block message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n    Block.encode = function encode(m, w) {\n      if (!w) w = $Writer.create();\n      if (m.prefix != null && Object.hasOwnProperty.call(m, \"prefix\")) w.uint32(10).bytes(m.prefix);\n      if (m.data != null && Object.hasOwnProperty.call(m, \"data\")) w.uint32(18).bytes(m.data);\n      return w;\n    };\n    /**\n     * Decodes a Block message from the specified reader or buffer.\n     * @function decode\n     * @memberof Message.Block\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Message.Block} Block\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    Block.decode = function decode(r, l) {\n      if (!(r instanceof $Reader)) r = $Reader.create(r);\n      var c = l === undefined ? r.len : r.pos + l,\n          m = new $root.Message.Block();\n\n      while (r.pos < c) {\n        var t = r.uint32();\n\n        switch (t >>> 3) {\n          case 1:\n            m.prefix = r.bytes();\n            break;\n\n          case 2:\n            m.data = r.bytes();\n            break;\n\n          default:\n            r.skipType(t & 7);\n            break;\n        }\n      }\n\n      return m;\n    };\n    /**\n     * Creates a Block message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Message.Block\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Message.Block} Block\n     */\n\n\n    Block.fromObject = function fromObject(d) {\n      if (d instanceof $root.Message.Block) return d;\n      var m = new $root.Message.Block();\n\n      if (d.prefix != null) {\n        if (typeof d.prefix === \"string\") $util.base64.decode(d.prefix, m.prefix = $util.newBuffer($util.base64.length(d.prefix)), 0);else if (d.prefix.length) m.prefix = d.prefix;\n      }\n\n      if (d.data != null) {\n        if (typeof d.data === \"string\") $util.base64.decode(d.data, m.data = $util.newBuffer($util.base64.length(d.data)), 0);else if (d.data.length) m.data = d.data;\n      }\n\n      return m;\n    };\n    /**\n     * Creates a plain object from a Block message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Message.Block\n     * @static\n     * @param {Message.Block} m Block\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    Block.toObject = function toObject(m, o) {\n      if (!o) o = {};\n      var d = {};\n\n      if (o.defaults) {\n        if (o.bytes === String) d.prefix = \"\";else {\n          d.prefix = [];\n          if (o.bytes !== Array) d.prefix = $util.newBuffer(d.prefix);\n        }\n        if (o.bytes === String) d.data = \"\";else {\n          d.data = [];\n          if (o.bytes !== Array) d.data = $util.newBuffer(d.data);\n        }\n      }\n\n      if (m.prefix != null && m.hasOwnProperty(\"prefix\")) {\n        d.prefix = o.bytes === String ? $util.base64.encode(m.prefix, 0, m.prefix.length) : o.bytes === Array ? Array.prototype.slice.call(m.prefix) : m.prefix;\n      }\n\n      if (m.data != null && m.hasOwnProperty(\"data\")) {\n        d.data = o.bytes === String ? $util.base64.encode(m.data, 0, m.data.length) : o.bytes === Array ? Array.prototype.slice.call(m.data) : m.data;\n      }\n\n      return d;\n    };\n    /**\n     * Converts this Block to JSON.\n     * @function toJSON\n     * @memberof Message.Block\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    Block.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Block;\n  }();\n  /**\n   * BlockPresenceType enum.\n   * @name Message.BlockPresenceType\n   * @enum {number}\n   * @property {number} Have=0 Have value\n   * @property {number} DontHave=1 DontHave value\n   */\n\n\n  Message.BlockPresenceType = function () {\n    var valuesById = {},\n        values = Object.create(valuesById);\n    values[valuesById[0] = \"Have\"] = 0;\n    values[valuesById[1] = \"DontHave\"] = 1;\n    return values;\n  }();\n\n  Message.BlockPresence = function () {\n    /**\n     * Properties of a BlockPresence.\n     * @memberof Message\n     * @interface IBlockPresence\n     * @property {Uint8Array|null} [cid] BlockPresence cid\n     * @property {Message.BlockPresenceType|null} [type] BlockPresence type\n     */\n\n    /**\n     * Constructs a new BlockPresence.\n     * @memberof Message\n     * @classdesc Represents a BlockPresence.\n     * @implements IBlockPresence\n     * @constructor\n     * @param {Message.IBlockPresence=} [p] Properties to set\n     */\n    function BlockPresence(p) {\n      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n    }\n    /**\n     * BlockPresence cid.\n     * @member {Uint8Array} cid\n     * @memberof Message.BlockPresence\n     * @instance\n     */\n\n\n    BlockPresence.prototype.cid = $util.newBuffer([]);\n    /**\n     * BlockPresence type.\n     * @member {Message.BlockPresenceType} type\n     * @memberof Message.BlockPresence\n     * @instance\n     */\n\n    BlockPresence.prototype.type = 0;\n    /**\n     * Encodes the specified BlockPresence message. Does not implicitly {@link Message.BlockPresence.verify|verify} messages.\n     * @function encode\n     * @memberof Message.BlockPresence\n     * @static\n     * @param {Message.IBlockPresence} m BlockPresence message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n    BlockPresence.encode = function encode(m, w) {\n      if (!w) w = $Writer.create();\n      if (m.cid != null && Object.hasOwnProperty.call(m, \"cid\")) w.uint32(10).bytes(m.cid);\n      if (m.type != null && Object.hasOwnProperty.call(m, \"type\")) w.uint32(16).int32(m.type);\n      return w;\n    };\n    /**\n     * Decodes a BlockPresence message from the specified reader or buffer.\n     * @function decode\n     * @memberof Message.BlockPresence\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Message.BlockPresence} BlockPresence\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    BlockPresence.decode = function decode(r, l) {\n      if (!(r instanceof $Reader)) r = $Reader.create(r);\n      var c = l === undefined ? r.len : r.pos + l,\n          m = new $root.Message.BlockPresence();\n\n      while (r.pos < c) {\n        var t = r.uint32();\n\n        switch (t >>> 3) {\n          case 1:\n            m.cid = r.bytes();\n            break;\n\n          case 2:\n            m.type = r.int32();\n            break;\n\n          default:\n            r.skipType(t & 7);\n            break;\n        }\n      }\n\n      return m;\n    };\n    /**\n     * Creates a BlockPresence message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Message.BlockPresence\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Message.BlockPresence} BlockPresence\n     */\n\n\n    BlockPresence.fromObject = function fromObject(d) {\n      if (d instanceof $root.Message.BlockPresence) return d;\n      var m = new $root.Message.BlockPresence();\n\n      if (d.cid != null) {\n        if (typeof d.cid === \"string\") $util.base64.decode(d.cid, m.cid = $util.newBuffer($util.base64.length(d.cid)), 0);else if (d.cid.length) m.cid = d.cid;\n      }\n\n      switch (d.type) {\n        case \"Have\":\n        case 0:\n          m.type = 0;\n          break;\n\n        case \"DontHave\":\n        case 1:\n          m.type = 1;\n          break;\n      }\n\n      return m;\n    };\n    /**\n     * Creates a plain object from a BlockPresence message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Message.BlockPresence\n     * @static\n     * @param {Message.BlockPresence} m BlockPresence\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    BlockPresence.toObject = function toObject(m, o) {\n      if (!o) o = {};\n      var d = {};\n\n      if (o.defaults) {\n        if (o.bytes === String) d.cid = \"\";else {\n          d.cid = [];\n          if (o.bytes !== Array) d.cid = $util.newBuffer(d.cid);\n        }\n        d.type = o.enums === String ? \"Have\" : 0;\n      }\n\n      if (m.cid != null && m.hasOwnProperty(\"cid\")) {\n        d.cid = o.bytes === String ? $util.base64.encode(m.cid, 0, m.cid.length) : o.bytes === Array ? Array.prototype.slice.call(m.cid) : m.cid;\n      }\n\n      if (m.type != null && m.hasOwnProperty(\"type\")) {\n        d.type = o.enums === String ? $root.Message.BlockPresenceType[m.type] : m.type;\n      }\n\n      return d;\n    };\n    /**\n     * Converts this BlockPresence to JSON.\n     * @function toJSON\n     * @memberof Message.BlockPresence\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    BlockPresence.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return BlockPresence;\n  }();\n\n  return Message;\n}();\n\nmodule.exports = $root;","map":{"version":3,"names":["$protobuf","require","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Message","p","blocks","payload","blockPresences","ks","Object","keys","i","length","prototype","wantlist","emptyArray","pendingBytes","encode","m","w","create","hasOwnProperty","call","Wantlist","uint32","fork","ldelim","bytes","Block","BlockPresence","int32","decode","r","l","c","undefined","len","pos","t","push","skipType","fromObject","d","TypeError","Array","isArray","base64","newBuffer","toObject","o","arrays","defaults","j","String","slice","toJSON","constructor","toJSONOptions","entries","full","Entry","bool","Boolean","WantType","valuesById","values","block","priority","cancel","wantType","sendDontHave","enums","prefix","data","BlockPresenceType","cid","type","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-bitswap/src/types/message/message.js"],"sourcesContent":["/*eslint-disable*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"ipfs-bitswap\"] || ($protobuf.roots[\"ipfs-bitswap\"] = {});\n\n$root.Message = (function() {\n\n    /**\n     * Properties of a Message.\n     * @exports IMessage\n     * @interface IMessage\n     * @property {Message.IWantlist|null} [wantlist] Message wantlist\n     * @property {Array.<Uint8Array>|null} [blocks] Message blocks\n     * @property {Array.<Message.IBlock>|null} [payload] Message payload\n     * @property {Array.<Message.IBlockPresence>|null} [blockPresences] Message blockPresences\n     * @property {number|null} [pendingBytes] Message pendingBytes\n     */\n\n    /**\n     * Constructs a new Message.\n     * @exports Message\n     * @classdesc Represents a Message.\n     * @implements IMessage\n     * @constructor\n     * @param {IMessage=} [p] Properties to set\n     */\n    function Message(p) {\n        this.blocks = [];\n        this.payload = [];\n        this.blockPresences = [];\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Message wantlist.\n     * @member {Message.IWantlist|null|undefined} wantlist\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.wantlist = null;\n\n    /**\n     * Message blocks.\n     * @member {Array.<Uint8Array>} blocks\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.blocks = $util.emptyArray;\n\n    /**\n     * Message payload.\n     * @member {Array.<Message.IBlock>} payload\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.payload = $util.emptyArray;\n\n    /**\n     * Message blockPresences.\n     * @member {Array.<Message.IBlockPresence>} blockPresences\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.blockPresences = $util.emptyArray;\n\n    /**\n     * Message pendingBytes.\n     * @member {number} pendingBytes\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.pendingBytes = 0;\n\n    /**\n     * Encodes the specified Message message. Does not implicitly {@link Message.verify|verify} messages.\n     * @function encode\n     * @memberof Message\n     * @static\n     * @param {IMessage} m Message message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Message.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.wantlist != null && Object.hasOwnProperty.call(m, \"wantlist\"))\n            $root.Message.Wantlist.encode(m.wantlist, w.uint32(10).fork()).ldelim();\n        if (m.blocks != null && m.blocks.length) {\n            for (var i = 0; i < m.blocks.length; ++i)\n                w.uint32(18).bytes(m.blocks[i]);\n        }\n        if (m.payload != null && m.payload.length) {\n            for (var i = 0; i < m.payload.length; ++i)\n                $root.Message.Block.encode(m.payload[i], w.uint32(26).fork()).ldelim();\n        }\n        if (m.blockPresences != null && m.blockPresences.length) {\n            for (var i = 0; i < m.blockPresences.length; ++i)\n                $root.Message.BlockPresence.encode(m.blockPresences[i], w.uint32(34).fork()).ldelim();\n        }\n        if (m.pendingBytes != null && Object.hasOwnProperty.call(m, \"pendingBytes\"))\n            w.uint32(40).int32(m.pendingBytes);\n        return w;\n    };\n\n    /**\n     * Decodes a Message message from the specified reader or buffer.\n     * @function decode\n     * @memberof Message\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Message} Message\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Message.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Message();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.wantlist = $root.Message.Wantlist.decode(r, r.uint32());\n                break;\n            case 2:\n                if (!(m.blocks && m.blocks.length))\n                    m.blocks = [];\n                m.blocks.push(r.bytes());\n                break;\n            case 3:\n                if (!(m.payload && m.payload.length))\n                    m.payload = [];\n                m.payload.push($root.Message.Block.decode(r, r.uint32()));\n                break;\n            case 4:\n                if (!(m.blockPresences && m.blockPresences.length))\n                    m.blockPresences = [];\n                m.blockPresences.push($root.Message.BlockPresence.decode(r, r.uint32()));\n                break;\n            case 5:\n                m.pendingBytes = r.int32();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a Message message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Message\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Message} Message\n     */\n    Message.fromObject = function fromObject(d) {\n        if (d instanceof $root.Message)\n            return d;\n        var m = new $root.Message();\n        if (d.wantlist != null) {\n            if (typeof d.wantlist !== \"object\")\n                throw TypeError(\".Message.wantlist: object expected\");\n            m.wantlist = $root.Message.Wantlist.fromObject(d.wantlist);\n        }\n        if (d.blocks) {\n            if (!Array.isArray(d.blocks))\n                throw TypeError(\".Message.blocks: array expected\");\n            m.blocks = [];\n            for (var i = 0; i < d.blocks.length; ++i) {\n                if (typeof d.blocks[i] === \"string\")\n                    $util.base64.decode(d.blocks[i], m.blocks[i] = $util.newBuffer($util.base64.length(d.blocks[i])), 0);\n                else if (d.blocks[i].length)\n                    m.blocks[i] = d.blocks[i];\n            }\n        }\n        if (d.payload) {\n            if (!Array.isArray(d.payload))\n                throw TypeError(\".Message.payload: array expected\");\n            m.payload = [];\n            for (var i = 0; i < d.payload.length; ++i) {\n                if (typeof d.payload[i] !== \"object\")\n                    throw TypeError(\".Message.payload: object expected\");\n                m.payload[i] = $root.Message.Block.fromObject(d.payload[i]);\n            }\n        }\n        if (d.blockPresences) {\n            if (!Array.isArray(d.blockPresences))\n                throw TypeError(\".Message.blockPresences: array expected\");\n            m.blockPresences = [];\n            for (var i = 0; i < d.blockPresences.length; ++i) {\n                if (typeof d.blockPresences[i] !== \"object\")\n                    throw TypeError(\".Message.blockPresences: object expected\");\n                m.blockPresences[i] = $root.Message.BlockPresence.fromObject(d.blockPresences[i]);\n            }\n        }\n        if (d.pendingBytes != null) {\n            m.pendingBytes = d.pendingBytes | 0;\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a Message message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Message\n     * @static\n     * @param {Message} m Message\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Message.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.arrays || o.defaults) {\n            d.blocks = [];\n            d.payload = [];\n            d.blockPresences = [];\n        }\n        if (o.defaults) {\n            d.wantlist = null;\n            d.pendingBytes = 0;\n        }\n        if (m.wantlist != null && m.hasOwnProperty(\"wantlist\")) {\n            d.wantlist = $root.Message.Wantlist.toObject(m.wantlist, o);\n        }\n        if (m.blocks && m.blocks.length) {\n            d.blocks = [];\n            for (var j = 0; j < m.blocks.length; ++j) {\n                d.blocks[j] = o.bytes === String ? $util.base64.encode(m.blocks[j], 0, m.blocks[j].length) : o.bytes === Array ? Array.prototype.slice.call(m.blocks[j]) : m.blocks[j];\n            }\n        }\n        if (m.payload && m.payload.length) {\n            d.payload = [];\n            for (var j = 0; j < m.payload.length; ++j) {\n                d.payload[j] = $root.Message.Block.toObject(m.payload[j], o);\n            }\n        }\n        if (m.blockPresences && m.blockPresences.length) {\n            d.blockPresences = [];\n            for (var j = 0; j < m.blockPresences.length; ++j) {\n                d.blockPresences[j] = $root.Message.BlockPresence.toObject(m.blockPresences[j], o);\n            }\n        }\n        if (m.pendingBytes != null && m.hasOwnProperty(\"pendingBytes\")) {\n            d.pendingBytes = m.pendingBytes;\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Message to JSON.\n     * @function toJSON\n     * @memberof Message\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Message.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    Message.Wantlist = (function() {\n\n        /**\n         * Properties of a Wantlist.\n         * @memberof Message\n         * @interface IWantlist\n         * @property {Array.<Message.Wantlist.IEntry>|null} [entries] Wantlist entries\n         * @property {boolean|null} [full] Wantlist full\n         */\n\n        /**\n         * Constructs a new Wantlist.\n         * @memberof Message\n         * @classdesc Represents a Wantlist.\n         * @implements IWantlist\n         * @constructor\n         * @param {Message.IWantlist=} [p] Properties to set\n         */\n        function Wantlist(p) {\n            this.entries = [];\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * Wantlist entries.\n         * @member {Array.<Message.Wantlist.IEntry>} entries\n         * @memberof Message.Wantlist\n         * @instance\n         */\n        Wantlist.prototype.entries = $util.emptyArray;\n\n        /**\n         * Wantlist full.\n         * @member {boolean} full\n         * @memberof Message.Wantlist\n         * @instance\n         */\n        Wantlist.prototype.full = false;\n\n        /**\n         * Encodes the specified Wantlist message. Does not implicitly {@link Message.Wantlist.verify|verify} messages.\n         * @function encode\n         * @memberof Message.Wantlist\n         * @static\n         * @param {Message.IWantlist} m Wantlist message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Wantlist.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.entries != null && m.entries.length) {\n                for (var i = 0; i < m.entries.length; ++i)\n                    $root.Message.Wantlist.Entry.encode(m.entries[i], w.uint32(10).fork()).ldelim();\n            }\n            if (m.full != null && Object.hasOwnProperty.call(m, \"full\"))\n                w.uint32(16).bool(m.full);\n            return w;\n        };\n\n        /**\n         * Decodes a Wantlist message from the specified reader or buffer.\n         * @function decode\n         * @memberof Message.Wantlist\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {Message.Wantlist} Wantlist\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Wantlist.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.Message.Wantlist();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    if (!(m.entries && m.entries.length))\n                        m.entries = [];\n                    m.entries.push($root.Message.Wantlist.Entry.decode(r, r.uint32()));\n                    break;\n                case 2:\n                    m.full = r.bool();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        /**\n         * Creates a Wantlist message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Message.Wantlist\n         * @static\n         * @param {Object.<string,*>} d Plain object\n         * @returns {Message.Wantlist} Wantlist\n         */\n        Wantlist.fromObject = function fromObject(d) {\n            if (d instanceof $root.Message.Wantlist)\n                return d;\n            var m = new $root.Message.Wantlist();\n            if (d.entries) {\n                if (!Array.isArray(d.entries))\n                    throw TypeError(\".Message.Wantlist.entries: array expected\");\n                m.entries = [];\n                for (var i = 0; i < d.entries.length; ++i) {\n                    if (typeof d.entries[i] !== \"object\")\n                        throw TypeError(\".Message.Wantlist.entries: object expected\");\n                    m.entries[i] = $root.Message.Wantlist.Entry.fromObject(d.entries[i]);\n                }\n            }\n            if (d.full != null) {\n                m.full = Boolean(d.full);\n            }\n            return m;\n        };\n\n        /**\n         * Creates a plain object from a Wantlist message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Message.Wantlist\n         * @static\n         * @param {Message.Wantlist} m Wantlist\n         * @param {$protobuf.IConversionOptions} [o] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Wantlist.toObject = function toObject(m, o) {\n            if (!o)\n                o = {};\n            var d = {};\n            if (o.arrays || o.defaults) {\n                d.entries = [];\n            }\n            if (o.defaults) {\n                d.full = false;\n            }\n            if (m.entries && m.entries.length) {\n                d.entries = [];\n                for (var j = 0; j < m.entries.length; ++j) {\n                    d.entries[j] = $root.Message.Wantlist.Entry.toObject(m.entries[j], o);\n                }\n            }\n            if (m.full != null && m.hasOwnProperty(\"full\")) {\n                d.full = m.full;\n            }\n            return d;\n        };\n\n        /**\n         * Converts this Wantlist to JSON.\n         * @function toJSON\n         * @memberof Message.Wantlist\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Wantlist.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * WantType enum.\n         * @name Message.Wantlist.WantType\n         * @enum {number}\n         * @property {number} Block=0 Block value\n         * @property {number} Have=1 Have value\n         */\n        Wantlist.WantType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"Block\"] = 0;\n            values[valuesById[1] = \"Have\"] = 1;\n            return values;\n        })();\n\n        Wantlist.Entry = (function() {\n\n            /**\n             * Properties of an Entry.\n             * @memberof Message.Wantlist\n             * @interface IEntry\n             * @property {Uint8Array|null} [block] Entry block\n             * @property {number|null} [priority] Entry priority\n             * @property {boolean|null} [cancel] Entry cancel\n             * @property {Message.Wantlist.WantType|null} [wantType] Entry wantType\n             * @property {boolean|null} [sendDontHave] Entry sendDontHave\n             */\n\n            /**\n             * Constructs a new Entry.\n             * @memberof Message.Wantlist\n             * @classdesc Represents an Entry.\n             * @implements IEntry\n             * @constructor\n             * @param {Message.Wantlist.IEntry=} [p] Properties to set\n             */\n            function Entry(p) {\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            /**\n             * Entry block.\n             * @member {Uint8Array} block\n             * @memberof Message.Wantlist.Entry\n             * @instance\n             */\n            Entry.prototype.block = $util.newBuffer([]);\n\n            /**\n             * Entry priority.\n             * @member {number} priority\n             * @memberof Message.Wantlist.Entry\n             * @instance\n             */\n            Entry.prototype.priority = 0;\n\n            /**\n             * Entry cancel.\n             * @member {boolean} cancel\n             * @memberof Message.Wantlist.Entry\n             * @instance\n             */\n            Entry.prototype.cancel = false;\n\n            /**\n             * Entry wantType.\n             * @member {Message.Wantlist.WantType} wantType\n             * @memberof Message.Wantlist.Entry\n             * @instance\n             */\n            Entry.prototype.wantType = 0;\n\n            /**\n             * Entry sendDontHave.\n             * @member {boolean} sendDontHave\n             * @memberof Message.Wantlist.Entry\n             * @instance\n             */\n            Entry.prototype.sendDontHave = false;\n\n            /**\n             * Encodes the specified Entry message. Does not implicitly {@link Message.Wantlist.Entry.verify|verify} messages.\n             * @function encode\n             * @memberof Message.Wantlist.Entry\n             * @static\n             * @param {Message.Wantlist.IEntry} m Entry message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Entry.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.block != null && Object.hasOwnProperty.call(m, \"block\"))\n                    w.uint32(10).bytes(m.block);\n                if (m.priority != null && Object.hasOwnProperty.call(m, \"priority\"))\n                    w.uint32(16).int32(m.priority);\n                if (m.cancel != null && Object.hasOwnProperty.call(m, \"cancel\"))\n                    w.uint32(24).bool(m.cancel);\n                if (m.wantType != null && Object.hasOwnProperty.call(m, \"wantType\"))\n                    w.uint32(32).int32(m.wantType);\n                if (m.sendDontHave != null && Object.hasOwnProperty.call(m, \"sendDontHave\"))\n                    w.uint32(40).bool(m.sendDontHave);\n                return w;\n            };\n\n            /**\n             * Decodes an Entry message from the specified reader or buffer.\n             * @function decode\n             * @memberof Message.Wantlist.Entry\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {Message.Wantlist.Entry} Entry\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Entry.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.Message.Wantlist.Entry();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.block = r.bytes();\n                        break;\n                    case 2:\n                        m.priority = r.int32();\n                        break;\n                    case 3:\n                        m.cancel = r.bool();\n                        break;\n                    case 4:\n                        m.wantType = r.int32();\n                        break;\n                    case 5:\n                        m.sendDontHave = r.bool();\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            /**\n             * Creates an Entry message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof Message.Wantlist.Entry\n             * @static\n             * @param {Object.<string,*>} d Plain object\n             * @returns {Message.Wantlist.Entry} Entry\n             */\n            Entry.fromObject = function fromObject(d) {\n                if (d instanceof $root.Message.Wantlist.Entry)\n                    return d;\n                var m = new $root.Message.Wantlist.Entry();\n                if (d.block != null) {\n                    if (typeof d.block === \"string\")\n                        $util.base64.decode(d.block, m.block = $util.newBuffer($util.base64.length(d.block)), 0);\n                    else if (d.block.length)\n                        m.block = d.block;\n                }\n                if (d.priority != null) {\n                    m.priority = d.priority | 0;\n                }\n                if (d.cancel != null) {\n                    m.cancel = Boolean(d.cancel);\n                }\n                switch (d.wantType) {\n                case \"Block\":\n                case 0:\n                    m.wantType = 0;\n                    break;\n                case \"Have\":\n                case 1:\n                    m.wantType = 1;\n                    break;\n                }\n                if (d.sendDontHave != null) {\n                    m.sendDontHave = Boolean(d.sendDontHave);\n                }\n                return m;\n            };\n\n            /**\n             * Creates a plain object from an Entry message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Message.Wantlist.Entry\n             * @static\n             * @param {Message.Wantlist.Entry} m Entry\n             * @param {$protobuf.IConversionOptions} [o] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Entry.toObject = function toObject(m, o) {\n                if (!o)\n                    o = {};\n                var d = {};\n                if (o.defaults) {\n                    if (o.bytes === String)\n                        d.block = \"\";\n                    else {\n                        d.block = [];\n                        if (o.bytes !== Array)\n                            d.block = $util.newBuffer(d.block);\n                    }\n                    d.priority = 0;\n                    d.cancel = false;\n                    d.wantType = o.enums === String ? \"Block\" : 0;\n                    d.sendDontHave = false;\n                }\n                if (m.block != null && m.hasOwnProperty(\"block\")) {\n                    d.block = o.bytes === String ? $util.base64.encode(m.block, 0, m.block.length) : o.bytes === Array ? Array.prototype.slice.call(m.block) : m.block;\n                }\n                if (m.priority != null && m.hasOwnProperty(\"priority\")) {\n                    d.priority = m.priority;\n                }\n                if (m.cancel != null && m.hasOwnProperty(\"cancel\")) {\n                    d.cancel = m.cancel;\n                }\n                if (m.wantType != null && m.hasOwnProperty(\"wantType\")) {\n                    d.wantType = o.enums === String ? $root.Message.Wantlist.WantType[m.wantType] : m.wantType;\n                }\n                if (m.sendDontHave != null && m.hasOwnProperty(\"sendDontHave\")) {\n                    d.sendDontHave = m.sendDontHave;\n                }\n                return d;\n            };\n\n            /**\n             * Converts this Entry to JSON.\n             * @function toJSON\n             * @memberof Message.Wantlist.Entry\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Entry.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Entry;\n        })();\n\n        return Wantlist;\n    })();\n\n    Message.Block = (function() {\n\n        /**\n         * Properties of a Block.\n         * @memberof Message\n         * @interface IBlock\n         * @property {Uint8Array|null} [prefix] Block prefix\n         * @property {Uint8Array|null} [data] Block data\n         */\n\n        /**\n         * Constructs a new Block.\n         * @memberof Message\n         * @classdesc Represents a Block.\n         * @implements IBlock\n         * @constructor\n         * @param {Message.IBlock=} [p] Properties to set\n         */\n        function Block(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * Block prefix.\n         * @member {Uint8Array} prefix\n         * @memberof Message.Block\n         * @instance\n         */\n        Block.prototype.prefix = $util.newBuffer([]);\n\n        /**\n         * Block data.\n         * @member {Uint8Array} data\n         * @memberof Message.Block\n         * @instance\n         */\n        Block.prototype.data = $util.newBuffer([]);\n\n        /**\n         * Encodes the specified Block message. Does not implicitly {@link Message.Block.verify|verify} messages.\n         * @function encode\n         * @memberof Message.Block\n         * @static\n         * @param {Message.IBlock} m Block message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Block.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.prefix != null && Object.hasOwnProperty.call(m, \"prefix\"))\n                w.uint32(10).bytes(m.prefix);\n            if (m.data != null && Object.hasOwnProperty.call(m, \"data\"))\n                w.uint32(18).bytes(m.data);\n            return w;\n        };\n\n        /**\n         * Decodes a Block message from the specified reader or buffer.\n         * @function decode\n         * @memberof Message.Block\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {Message.Block} Block\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Block.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.Message.Block();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.prefix = r.bytes();\n                    break;\n                case 2:\n                    m.data = r.bytes();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        /**\n         * Creates a Block message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Message.Block\n         * @static\n         * @param {Object.<string,*>} d Plain object\n         * @returns {Message.Block} Block\n         */\n        Block.fromObject = function fromObject(d) {\n            if (d instanceof $root.Message.Block)\n                return d;\n            var m = new $root.Message.Block();\n            if (d.prefix != null) {\n                if (typeof d.prefix === \"string\")\n                    $util.base64.decode(d.prefix, m.prefix = $util.newBuffer($util.base64.length(d.prefix)), 0);\n                else if (d.prefix.length)\n                    m.prefix = d.prefix;\n            }\n            if (d.data != null) {\n                if (typeof d.data === \"string\")\n                    $util.base64.decode(d.data, m.data = $util.newBuffer($util.base64.length(d.data)), 0);\n                else if (d.data.length)\n                    m.data = d.data;\n            }\n            return m;\n        };\n\n        /**\n         * Creates a plain object from a Block message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Message.Block\n         * @static\n         * @param {Message.Block} m Block\n         * @param {$protobuf.IConversionOptions} [o] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Block.toObject = function toObject(m, o) {\n            if (!o)\n                o = {};\n            var d = {};\n            if (o.defaults) {\n                if (o.bytes === String)\n                    d.prefix = \"\";\n                else {\n                    d.prefix = [];\n                    if (o.bytes !== Array)\n                        d.prefix = $util.newBuffer(d.prefix);\n                }\n                if (o.bytes === String)\n                    d.data = \"\";\n                else {\n                    d.data = [];\n                    if (o.bytes !== Array)\n                        d.data = $util.newBuffer(d.data);\n                }\n            }\n            if (m.prefix != null && m.hasOwnProperty(\"prefix\")) {\n                d.prefix = o.bytes === String ? $util.base64.encode(m.prefix, 0, m.prefix.length) : o.bytes === Array ? Array.prototype.slice.call(m.prefix) : m.prefix;\n            }\n            if (m.data != null && m.hasOwnProperty(\"data\")) {\n                d.data = o.bytes === String ? $util.base64.encode(m.data, 0, m.data.length) : o.bytes === Array ? Array.prototype.slice.call(m.data) : m.data;\n            }\n            return d;\n        };\n\n        /**\n         * Converts this Block to JSON.\n         * @function toJSON\n         * @memberof Message.Block\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Block.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Block;\n    })();\n\n    /**\n     * BlockPresenceType enum.\n     * @name Message.BlockPresenceType\n     * @enum {number}\n     * @property {number} Have=0 Have value\n     * @property {number} DontHave=1 DontHave value\n     */\n    Message.BlockPresenceType = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"Have\"] = 0;\n        values[valuesById[1] = \"DontHave\"] = 1;\n        return values;\n    })();\n\n    Message.BlockPresence = (function() {\n\n        /**\n         * Properties of a BlockPresence.\n         * @memberof Message\n         * @interface IBlockPresence\n         * @property {Uint8Array|null} [cid] BlockPresence cid\n         * @property {Message.BlockPresenceType|null} [type] BlockPresence type\n         */\n\n        /**\n         * Constructs a new BlockPresence.\n         * @memberof Message\n         * @classdesc Represents a BlockPresence.\n         * @implements IBlockPresence\n         * @constructor\n         * @param {Message.IBlockPresence=} [p] Properties to set\n         */\n        function BlockPresence(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * BlockPresence cid.\n         * @member {Uint8Array} cid\n         * @memberof Message.BlockPresence\n         * @instance\n         */\n        BlockPresence.prototype.cid = $util.newBuffer([]);\n\n        /**\n         * BlockPresence type.\n         * @member {Message.BlockPresenceType} type\n         * @memberof Message.BlockPresence\n         * @instance\n         */\n        BlockPresence.prototype.type = 0;\n\n        /**\n         * Encodes the specified BlockPresence message. Does not implicitly {@link Message.BlockPresence.verify|verify} messages.\n         * @function encode\n         * @memberof Message.BlockPresence\n         * @static\n         * @param {Message.IBlockPresence} m BlockPresence message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BlockPresence.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.cid != null && Object.hasOwnProperty.call(m, \"cid\"))\n                w.uint32(10).bytes(m.cid);\n            if (m.type != null && Object.hasOwnProperty.call(m, \"type\"))\n                w.uint32(16).int32(m.type);\n            return w;\n        };\n\n        /**\n         * Decodes a BlockPresence message from the specified reader or buffer.\n         * @function decode\n         * @memberof Message.BlockPresence\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {Message.BlockPresence} BlockPresence\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BlockPresence.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.Message.BlockPresence();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.cid = r.bytes();\n                    break;\n                case 2:\n                    m.type = r.int32();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        /**\n         * Creates a BlockPresence message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Message.BlockPresence\n         * @static\n         * @param {Object.<string,*>} d Plain object\n         * @returns {Message.BlockPresence} BlockPresence\n         */\n        BlockPresence.fromObject = function fromObject(d) {\n            if (d instanceof $root.Message.BlockPresence)\n                return d;\n            var m = new $root.Message.BlockPresence();\n            if (d.cid != null) {\n                if (typeof d.cid === \"string\")\n                    $util.base64.decode(d.cid, m.cid = $util.newBuffer($util.base64.length(d.cid)), 0);\n                else if (d.cid.length)\n                    m.cid = d.cid;\n            }\n            switch (d.type) {\n            case \"Have\":\n            case 0:\n                m.type = 0;\n                break;\n            case \"DontHave\":\n            case 1:\n                m.type = 1;\n                break;\n            }\n            return m;\n        };\n\n        /**\n         * Creates a plain object from a BlockPresence message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Message.BlockPresence\n         * @static\n         * @param {Message.BlockPresence} m BlockPresence\n         * @param {$protobuf.IConversionOptions} [o] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        BlockPresence.toObject = function toObject(m, o) {\n            if (!o)\n                o = {};\n            var d = {};\n            if (o.defaults) {\n                if (o.bytes === String)\n                    d.cid = \"\";\n                else {\n                    d.cid = [];\n                    if (o.bytes !== Array)\n                        d.cid = $util.newBuffer(d.cid);\n                }\n                d.type = o.enums === String ? \"Have\" : 0;\n            }\n            if (m.cid != null && m.hasOwnProperty(\"cid\")) {\n                d.cid = o.bytes === String ? $util.base64.encode(m.cid, 0, m.cid.length) : o.bytes === Array ? Array.prototype.slice.call(m.cid) : m.cid;\n            }\n            if (m.type != null && m.hasOwnProperty(\"type\")) {\n                d.type = o.enums === String ? $root.Message.BlockPresenceType[m.type] : m.type;\n            }\n            return d;\n        };\n\n        /**\n         * Converts this BlockPresence to JSON.\n         * @function toJSON\n         * @memberof Message.BlockPresence\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        BlockPresence.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return BlockPresence;\n    })();\n\n    return Message;\n})();\n\nmodule.exports = $root;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}