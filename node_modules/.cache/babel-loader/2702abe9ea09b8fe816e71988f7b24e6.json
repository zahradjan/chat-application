{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar debug = require('debug');\n\nvar log = Object.assign(debug('ipfs:mfs-preload'), {\n  error: debug('ipfs:mfs-preload:error')\n});\n/**\n * @typedef {PreloadOptions & MFSPreloadOptions} Options\n * @typedef {Object} MFSPreloadOptions\n * @property {number} [interval]\n * @typedef {import('./types').PreloadOptions} PreloadOptions\n */\n\n/**\n * @param {Object} config\n * @param {import('./types').Preload} config.preload\n * @param {import('ipfs-core-types/src/files').API} config.files\n * @param {Options} [config.options]\n */\n\nmodule.exports = function (_ref) {\n  var preload = _ref.preload,\n      files = _ref.files,\n      _ref$options = _ref.options,\n      options = _ref$options === void 0 ? {} : _ref$options;\n  options.interval = options.interval || 30 * 1000;\n\n  if (!options.enabled) {\n    log('MFS preload disabled');\n\n    var noop = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function noop() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    return {\n      start: noop,\n      stop: noop\n    };\n  }\n\n  var rootCid = '';\n  /** @type {any} */\n\n  var timeoutId;\n\n  var preloadMfs = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      var stats, nextRootCid;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return files.stat('/');\n\n            case 3:\n              stats = _context2.sent;\n              nextRootCid = stats.cid.toString();\n\n              if (!(rootCid !== nextRootCid)) {\n                _context2.next = 10;\n                break;\n              }\n\n              log(\"preloading updated MFS root \".concat(rootCid, \" -> \").concat(stats.cid));\n              _context2.next = 9;\n              return preload(stats.cid);\n\n            case 9:\n              rootCid = nextRootCid;\n\n            case 10:\n              _context2.next = 15;\n              break;\n\n            case 12:\n              _context2.prev = 12;\n              _context2.t0 = _context2[\"catch\"](0);\n              log.error('failed to preload MFS root', _context2.t0);\n\n            case 15:\n              _context2.prev = 15;\n              timeoutId = setTimeout(preloadMfs, options.interval);\n              return _context2.finish(15);\n\n            case 18:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 12, 15, 18]]);\n    }));\n\n    return function preloadMfs() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return {\n    /**\n     * @returns {Promise<void>}\n     */\n    start: function start() {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var stats;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return files.stat('/');\n\n              case 2:\n                stats = _context3.sent;\n                rootCid = stats.cid.toString();\n                log(\"monitoring MFS root \".concat(stats.cid));\n                timeoutId = setTimeout(preloadMfs, options.interval);\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    },\n\n    /**\n     * @returns {void}\n     */\n    stop: function stop() {\n      clearTimeout(timeoutId);\n    }\n  };\n};","map":{"version":3,"names":["debug","require","log","Object","assign","error","module","exports","preload","files","options","interval","enabled","noop","start","stop","rootCid","timeoutId","preloadMfs","stat","stats","nextRootCid","cid","toString","setTimeout","clearTimeout"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/mfs-preload.js"],"sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = Object.assign(debug('ipfs:mfs-preload'), {\n  error: debug('ipfs:mfs-preload:error')\n})\n\n/**\n * @typedef {PreloadOptions & MFSPreloadOptions} Options\n * @typedef {Object} MFSPreloadOptions\n * @property {number} [interval]\n * @typedef {import('./types').PreloadOptions} PreloadOptions\n */\n\n/**\n * @param {Object} config\n * @param {import('./types').Preload} config.preload\n * @param {import('ipfs-core-types/src/files').API} config.files\n * @param {Options} [config.options]\n */\nmodule.exports = ({ preload, files, options = {} }) => {\n  options.interval = options.interval || 30 * 1000\n\n  if (!options.enabled) {\n    log('MFS preload disabled')\n    const noop = async () => {}\n    return { start: noop, stop: noop }\n  }\n\n  let rootCid = ''\n  /** @type {any} */\n  let timeoutId\n\n  const preloadMfs = async () => {\n    try {\n      const stats = await files.stat('/')\n      const nextRootCid = stats.cid.toString()\n\n      if (rootCid !== nextRootCid) {\n        log(`preloading updated MFS root ${rootCid} -> ${stats.cid}`)\n        await preload(stats.cid)\n        rootCid = nextRootCid\n      }\n    } catch (err) {\n      log.error('failed to preload MFS root', err)\n    } finally {\n      timeoutId = setTimeout(preloadMfs, options.interval)\n    }\n  }\n\n  return {\n    /**\n     * @returns {Promise<void>}\n     */\n    async start () {\n      const stats = await files.stat('/')\n      rootCid = stats.cid.toString()\n      log(`monitoring MFS root ${stats.cid}`)\n      timeoutId = setTimeout(preloadMfs, options.interval)\n    },\n    /**\n     * @returns {void}\n     */\n    stop () {\n      clearTimeout(timeoutId)\n    }\n  }\n}\n"],"mappings":"AAAA;;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMC,GAAG,GAAGC,MAAM,CAACC,MAAP,CAAcJ,KAAK,CAAC,kBAAD,CAAnB,EAAyC;EACnDK,KAAK,EAAEL,KAAK,CAAC,wBAAD;AADuC,CAAzC,CAAZ;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACAM,MAAM,CAACC,OAAP,GAAiB,gBAAsC;EAAA,IAAnCC,OAAmC,QAAnCA,OAAmC;EAAA,IAA1BC,KAA0B,QAA1BA,KAA0B;EAAA,wBAAnBC,OAAmB;EAAA,IAAnBA,OAAmB,6BAAT,EAAS;EACrDA,OAAO,CAACC,QAAR,GAAmBD,OAAO,CAACC,QAAR,IAAoB,KAAK,IAA5C;;EAEA,IAAI,CAACD,OAAO,CAACE,OAAb,EAAsB;IACpBV,GAAG,CAAC,sBAAD,CAAH;;IACA,IAAMW,IAAI;MAAA,uEAAG;QAAA;UAAA;YAAA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAAH;;MAAA,gBAAJA,IAAI;QAAA;MAAA;IAAA,GAAV;;IACA,OAAO;MAAEC,KAAK,EAAED,IAAT;MAAeE,IAAI,EAAEF;IAArB,CAAP;EACD;;EAED,IAAIG,OAAO,GAAG,EAAd;EACA;;EACA,IAAIC,SAAJ;;EAEA,IAAMC,UAAU;IAAA,uEAAG;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA;cAAA,OAEKT,KAAK,CAACU,IAAN,CAAW,GAAX,CAFL;;YAAA;cAETC,KAFS;cAGTC,WAHS,GAGKD,KAAK,CAACE,GAAN,CAAUC,QAAV,EAHL;;cAAA,MAKXP,OAAO,KAAKK,WALD;gBAAA;gBAAA;cAAA;;cAMbnB,GAAG,uCAAgCc,OAAhC,iBAA8CI,KAAK,CAACE,GAApD,EAAH;cANa;cAAA,OAOPd,OAAO,CAACY,KAAK,CAACE,GAAP,CAPA;;YAAA;cAQbN,OAAO,GAAGK,WAAV;;YARa;cAAA;cAAA;;YAAA;cAAA;cAAA;cAWfnB,GAAG,CAACG,KAAJ,CAAU,4BAAV;;YAXe;cAAA;cAafY,SAAS,GAAGO,UAAU,CAACN,UAAD,EAAaR,OAAO,CAACC,QAArB,CAAtB;cAbe;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAH;;IAAA,gBAAVO,UAAU;MAAA;IAAA;EAAA,GAAhB;;EAiBA,OAAO;IACL;AACJ;AACA;IACUJ,KAJD,mBAIU;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACOL,KAAK,CAACU,IAAN,CAAW,GAAX,CADP;;cAAA;gBACPC,KADO;gBAEbJ,OAAO,GAAGI,KAAK,CAACE,GAAN,CAAUC,QAAV,EAAV;gBACArB,GAAG,+BAAwBkB,KAAK,CAACE,GAA9B,EAAH;gBACAL,SAAS,GAAGO,UAAU,CAACN,UAAD,EAAaR,OAAO,CAACC,QAArB,CAAtB;;cAJa;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAKd,CATI;;IAUL;AACJ;AACA;IACII,IAbK,kBAaG;MACNU,YAAY,CAACR,SAAD,CAAZ;IACD;EAfI,CAAP;AAiBD,CA/CD"},"metadata":{},"sourceType":"script"}