{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _objectSpread = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {FilesAPI[\"mv\"]}\n   */\n  function mv(_x, _x2) {\n    return _mv.apply(this, arguments);\n  }\n\n  function _mv() {\n    _mv = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(sources, destination) {\n      var options,\n          res,\n          _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n\n              if (!Array.isArray(sources)) {\n                sources = [sources];\n              }\n\n              _context.next = 4;\n              return api.post('files/mv', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: sources.concat(destination)\n                }, options)),\n                headers: options.headers\n              });\n\n            case 4:\n              res = _context.sent;\n              _context.next = 7;\n              return res.text();\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _mv.apply(this, arguments);\n  }\n\n  return mv;\n});","map":{"version":3,"names":["configure","require","toUrlSearchParams","module","exports","api","mv","sources","destination","options","Array","isArray","post","signal","searchParams","arg","concat","headers","res","text"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-http-client/src/files/mv.js"],"sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {FilesAPI[\"mv\"]}\n   */\n  async function mv (sources, destination, options = {}) {\n    if (!Array.isArray(sources)) {\n      sources = [sources]\n    }\n\n    const res = await api.post('files/mv', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: sources.concat(destination),\n        ...options\n      }),\n      headers: options.headers\n    })\n    await res.text()\n  }\n\n  return mv\n})\n"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMC,iBAAiB,GAAGD,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAE,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAAC,UAAAK,GAAG,EAAI;EAChC;AACF;AACA;EAHkC,SAIjBC,EAJiB;IAAA;EAAA;;EAAA;IAAA,iEAIhC,iBAAmBC,OAAnB,EAA4BC,WAA5B;MAAA;MAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAyCC,OAAzC,2DAAmD,EAAnD;;cACE,IAAI,CAACC,KAAK,CAACC,OAAN,CAAcJ,OAAd,CAAL,EAA6B;gBAC3BA,OAAO,GAAG,CAACA,OAAD,CAAV;cACD;;cAHH;cAAA,OAKoBF,GAAG,CAACO,IAAJ,CAAS,UAAT,EAAqB;gBACrCC,MAAM,EAAEJ,OAAO,CAACI,MADqB;gBAErCC,YAAY,EAAEZ,iBAAiB;kBAC7Ba,GAAG,EAAER,OAAO,CAACS,MAAR,CAAeR,WAAf;gBADwB,GAE1BC,OAF0B,EAFM;gBAMrCQ,OAAO,EAAER,OAAO,CAACQ;cANoB,CAArB,CALpB;;YAAA;cAKQC,GALR;cAAA;cAAA,OAaQA,GAAG,CAACC,IAAJ,EAbR;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAJgC;IAAA;EAAA;;EAoBhC,OAAOb,EAAP;AACD,CArByB,CAA1B"},"metadata":{},"sourceType":"script"}