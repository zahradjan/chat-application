{"ast":null,"code":"'use strict';\n\nconst path = require('path');\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst notEmpty = e => e !== '' && e !== ' ';\n\nclass OrbitDBAddress {\n  constructor(root, path) {\n    this.root = root;\n    this.path = path;\n  }\n\n  toString() {\n    return OrbitDBAddress.join(this.root, this.path);\n  }\n\n  static isValid(address) {\n    address = address.toString().replace(/\\\\/g, '/');\n\n    const containsProtocolPrefix = (e, i) => !((i === 0 || i === 1) && address.toString().indexOf('/orbit') === 0 && e === 'orbitdb');\n\n    const parts = address.toString().split('/').filter(containsProtocolPrefix).filter(notEmpty);\n    let accessControllerHash;\n\n    const validateHash = hash => {\n      const prefixes = ['zd', 'Qm', 'ba', 'k5'];\n\n      for (const p of prefixes) {\n        if (hash.indexOf(p) > -1) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    try {\n      accessControllerHash = validateHash(parts[0]) ? CID.parse(parts[0]).toString() : null;\n    } catch (e) {\n      return false;\n    }\n\n    return accessControllerHash !== null;\n  }\n\n  static parse(address) {\n    if (!address) {\n      throw new Error(`Not a valid OrbitDB address: ${address}`);\n    }\n\n    if (!OrbitDBAddress.isValid(address)) {\n      throw new Error(`Not a valid OrbitDB address: ${address}`);\n    }\n\n    address = address.toString().replace(/\\\\/g, '/');\n    const parts = address.toString().split('/').filter((e, i) => !((i === 0 || i === 1) && address.toString().indexOf('/orbit') === 0 && e === 'orbitdb')).filter(e => e !== '' && e !== ' ');\n    return new OrbitDBAddress(parts[0], parts.slice(1, parts.length).join('/'));\n  }\n\n  static join() {\n    for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n      paths[_key] = arguments[_key];\n    }\n\n    return (path.posix || path).join('/orbitdb', ...paths);\n  }\n\n}\n\nmodule.exports = OrbitDBAddress;","map":{"version":3,"names":["path","require","CID","notEmpty","e","OrbitDBAddress","constructor","root","toString","join","isValid","address","replace","containsProtocolPrefix","i","indexOf","parts","split","filter","accessControllerHash","validateHash","hash","prefixes","p","parse","Error","slice","length","paths","posix","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/orbit-db/src/orbit-db-address.js"],"sourcesContent":["'use strict'\nconst path = require('path')\nconst { CID } = require('multiformats/cid')\n\nconst notEmpty = e => e !== '' && e !== ' '\n\nclass OrbitDBAddress {\n  constructor (root, path) {\n    this.root = root\n    this.path = path\n  }\n\n  toString () {\n    return OrbitDBAddress.join(this.root, this.path)\n  }\n\n  static isValid (address) {\n    address = address.toString().replace(/\\\\/g, '/')\n\n    const containsProtocolPrefix = (e, i) => !((i === 0 || i === 1) && address.toString().indexOf('/orbit') === 0 && e === 'orbitdb')\n\n    const parts = address.toString()\n      .split('/')\n      .filter(containsProtocolPrefix)\n      .filter(notEmpty)\n\n    let accessControllerHash\n\n    const validateHash = (hash) => {\n      const prefixes = ['zd', 'Qm', 'ba', 'k5']\n      for (const p of prefixes) {\n        if (hash.indexOf(p) > -1) {\n          return true\n        }\n      }\n      return false\n    }\n\n    try {\n      accessControllerHash = validateHash(parts[0])\n        ? CID.parse(parts[0]).toString()\n        : null\n    } catch (e) {\n      return false\n    }\n\n    return accessControllerHash !== null\n  }\n\n  static parse (address) {\n    if (!address) { throw new Error(`Not a valid OrbitDB address: ${address}`) }\n\n    if (!OrbitDBAddress.isValid(address)) { throw new Error(`Not a valid OrbitDB address: ${address}`) }\n\n    address = address.toString().replace(/\\\\/g, '/')\n\n    const parts = address.toString()\n      .split('/')\n      .filter((e, i) => !((i === 0 || i === 1) && address.toString().indexOf('/orbit') === 0 && e === 'orbitdb'))\n      .filter(e => e !== '' && e !== ' ')\n\n    return new OrbitDBAddress(parts[0], parts.slice(1, parts.length).join('/'))\n  }\n\n  static join (...paths) {\n    return (path.posix || path).join('/orbitdb', ...paths)\n  }\n}\n\nmodule.exports = OrbitDBAddress\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}