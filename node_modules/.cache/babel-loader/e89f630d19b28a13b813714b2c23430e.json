{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar path = require('path');\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar notEmpty = function notEmpty(e) {\n  return e !== '' && e !== ' ';\n};\n\nvar OrbitDBAddress = /*#__PURE__*/function () {\n  function OrbitDBAddress(root, path) {\n    _classCallCheck(this, OrbitDBAddress);\n\n    this.root = root;\n    this.path = path;\n  }\n\n  _createClass(OrbitDBAddress, [{\n    key: \"toString\",\n    value: function toString() {\n      return OrbitDBAddress.join(this.root, this.path);\n    }\n  }], [{\n    key: \"isValid\",\n    value: function isValid(address) {\n      address = address.toString().replace(/\\\\/g, '/');\n\n      var containsProtocolPrefix = function containsProtocolPrefix(e, i) {\n        return !((i === 0 || i === 1) && address.toString().indexOf('/orbit') === 0 && e === 'orbitdb');\n      };\n\n      var parts = address.toString().split('/').filter(containsProtocolPrefix).filter(notEmpty);\n      var accessControllerHash;\n\n      var validateHash = function validateHash(hash) {\n        var prefixes = ['zd', 'Qm', 'ba', 'k5'];\n\n        for (var _i = 0, _prefixes = prefixes; _i < _prefixes.length; _i++) {\n          var p = _prefixes[_i];\n\n          if (hash.indexOf(p) > -1) {\n            return true;\n          }\n        }\n\n        return false;\n      };\n\n      try {\n        accessControllerHash = validateHash(parts[0]) ? CID.parse(parts[0]).toString() : null;\n      } catch (e) {\n        return false;\n      }\n\n      return accessControllerHash !== null;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(address) {\n      if (!address) {\n        throw new Error(\"Not a valid OrbitDB address: \".concat(address));\n      }\n\n      if (!OrbitDBAddress.isValid(address)) {\n        throw new Error(\"Not a valid OrbitDB address: \".concat(address));\n      }\n\n      address = address.toString().replace(/\\\\/g, '/');\n      var parts = address.toString().split('/').filter(function (e, i) {\n        return !((i === 0 || i === 1) && address.toString().indexOf('/orbit') === 0 && e === 'orbitdb');\n      }).filter(function (e) {\n        return e !== '' && e !== ' ';\n      });\n      return new OrbitDBAddress(parts[0], parts.slice(1, parts.length).join('/'));\n    }\n  }, {\n    key: \"join\",\n    value: function join() {\n      var _ref;\n\n      for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n        paths[_key] = arguments[_key];\n      }\n\n      return (_ref = path.posix || path).join.apply(_ref, ['/orbitdb'].concat(paths));\n    }\n  }]);\n\n  return OrbitDBAddress;\n}();\n\nmodule.exports = OrbitDBAddress;","map":{"version":3,"names":["path","require","CID","notEmpty","e","OrbitDBAddress","root","join","address","toString","replace","containsProtocolPrefix","i","indexOf","parts","split","filter","accessControllerHash","validateHash","hash","prefixes","p","parse","Error","isValid","slice","length","paths","posix","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/orbit-db/src/orbit-db-address.js"],"sourcesContent":["'use strict'\nconst path = require('path')\nconst { CID } = require('multiformats/cid')\n\nconst notEmpty = e => e !== '' && e !== ' '\n\nclass OrbitDBAddress {\n  constructor (root, path) {\n    this.root = root\n    this.path = path\n  }\n\n  toString () {\n    return OrbitDBAddress.join(this.root, this.path)\n  }\n\n  static isValid (address) {\n    address = address.toString().replace(/\\\\/g, '/')\n\n    const containsProtocolPrefix = (e, i) => !((i === 0 || i === 1) && address.toString().indexOf('/orbit') === 0 && e === 'orbitdb')\n\n    const parts = address.toString()\n      .split('/')\n      .filter(containsProtocolPrefix)\n      .filter(notEmpty)\n\n    let accessControllerHash\n\n    const validateHash = (hash) => {\n      const prefixes = ['zd', 'Qm', 'ba', 'k5']\n      for (const p of prefixes) {\n        if (hash.indexOf(p) > -1) {\n          return true\n        }\n      }\n      return false\n    }\n\n    try {\n      accessControllerHash = validateHash(parts[0])\n        ? CID.parse(parts[0]).toString()\n        : null\n    } catch (e) {\n      return false\n    }\n\n    return accessControllerHash !== null\n  }\n\n  static parse (address) {\n    if (!address) { throw new Error(`Not a valid OrbitDB address: ${address}`) }\n\n    if (!OrbitDBAddress.isValid(address)) { throw new Error(`Not a valid OrbitDB address: ${address}`) }\n\n    address = address.toString().replace(/\\\\/g, '/')\n\n    const parts = address.toString()\n      .split('/')\n      .filter((e, i) => !((i === 0 || i === 1) && address.toString().indexOf('/orbit') === 0 && e === 'orbitdb'))\n      .filter(e => e !== '' && e !== ' ')\n\n    return new OrbitDBAddress(parts[0], parts.slice(1, parts.length).join('/'))\n  }\n\n  static join (...paths) {\n    return (path.posix || path).join('/orbitdb', ...paths)\n  }\n}\n\nmodule.exports = OrbitDBAddress\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}