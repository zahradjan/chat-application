{"ast":null,"code":"import OrbitDB from \"orbit-db\";\nimport IPFS from \"ipfs\";\nimport { makeAutoObservable } from \"mobx\";\nexport default class DataStore {\n  constructor(rootStore) {\n    this.rootStore = rootStore;\n    makeAutoObservable(this);\n  }\n\n  async init() {\n    if (!this.rootStore.sessionStore.isAuthenticated()) throw Error(\"User is not defined\");\n    if (this.ipfsNode !== undefined) return;\n    if (this.orbitDb !== undefined) return;\n    const dbConfig = {\n      // If database doesn't exist, create it\n      create: true,\n      // Don't wait to load from the network\n      sync: true,\n      // directory: `/orbitdb/decentio-orbitdb-chat-${Math.random()}}`,\n      // Load only the local version of the database\n      localOnly: false,\n      // Allow anyone to write to the database,\n      // otherwise only the creator of the database can write\n      accessController: {\n        write: [\"*\"]\n      }\n    };\n    const ipfsConfig = {\n      // preload: { enabled: false },\n      relay: {\n        enabled: true,\n        hop: {\n          enabled: true,\n          active: true\n        }\n      },\n      // libp2p: {\n      //   config: {\n      //     dht: {\n      //       enabled: true,\n      //     },\n      //     modules: {\n      //       transport: [\"WebRTCStar\", \"WebSockets\"],\n      //     },\n      //     // transport: {\n      //     //   WebRTCStar: {\n      //     //     wrtc,\n      //     //   },\n      //     // },\n      //   },\n      // },\n      // peerDiscovery: {\n      //   autoDial: true, // Auto connect to discovered peers (limited by ConnectionManager minPeers)\n      //   mdns: {\n      //     // mdns options\n      //     interval: 1000, // ms\n      //     enabled: true,\n      //   },\n      //   webRTCStar: {\n      //     // webrtc-star options\n      //     interval: 1000, // ms\n      //     enabled: false,\n      //   },\n      //   // .. other discovery module options.\n      // },\n      // Prevents large data transfers\n      //TODO: nejak oddelit at to neni random ale treba username nebo neco\n      repo: `/orbitdb/decentio-orbitdb-chat-ipfs-${this.rootStore.sessionStore._user}}`,\n      EXPERIMENTAL: {\n        pubsub: true\n      },\n      config: {\n        Addresses: {\n          Swarm: [//       // Use IPFS dev signal server\n          //       // Websocket:\n          // \"/dns4/ws-star-signal-1.servep2p.com/tcp/443/wss/p2p-websocket-star\",\n          // \"/dns4/ws-star-signal-2.servep2p.com/tcp/443/wss/p2p-websocket-star\",\n          // \"/dns4/ws-star.discovery.libp2p.io/tcp/443/wss/p2p-websocket-star\",\n          // WebRTC:\n          // \"/dns4/wrtc-star1.par.dwebops.pub/tcp/443/wss/p2p-webrtc-star/\",\n          \"/dns4/wrtc-star2.sjc.dwebops.pub/tcp/443/wss/p2p-webrtc-star/\", \"/dns4/webrtc-star.discovery.libp2p.io/tcp/443/wss/p2p-webrtc-star/\", \"/dns4/wrtc-star1.par.dwebops.pub/tcp/443/wss/p2p-webrtc-star\", \"/dns4/wrtc-star2.sjc.dwebops.pub/tcp/443/wss/p2p-webrtc-star\" // // \"/ip4/0.0.0.0/tcp/4002\",\n          // \"/ip4/127.0.0.1/tcp/4003/ws\",\n          // \"/libp2p-webrtc-star/dns4/star-signal.cloud.ipfs.team/wss\",\n          // \"/dns4/star-signal.cloud.ipfs.team/wss/p2p-webrtc-star\",\n          //       // Use local signal server\n          // \"/ip4/0.0.0.0/tcp/4011/ws\",\n          // \"/ip6/::/tcp/4011/ws\",\n          ]\n        },\n        Bootstrap: [// \"/dns4/wrtc-star2.sjc.dwebops.pub/tcp/443/wss/p2p-webrtc-star/\",\n          // \"/dns4/webrtc-star.discovery.libp2p.io/tcp/443/wss/p2p-webrtc-star/\",\n          // \"/dns4/wrtc-star1.par.dwebops.pub/tcp/443/wss/p2p-webrtc-star\",\n          // \"/dns4/wrtc-star2.sjc.dwebops.pub/tcp/443/wss/p2p-webrtc-star\",\n        ]\n      }\n    };\n    await this.start(ipfsConfig, dbConfig);\n  }\n\n  async start(ipfsConf, orbitDbconf) {\n    await this.startIpfsNode(ipfsConf);\n    await this.startOrbitDb(orbitDbconf);\n    this.peerId = await this.getPeerId();\n    await this.setPeersDb();\n    await this.subscribeToYourPubsub();\n    await this.subscribeToDecentioPubsub();\n    setInterval(async () => {\n      const peers = await this.getIpfsPeers();\n      console.log(peers); // await peers.map(async (peerId) => {\n      //   try {\n      //     await this.connectToPeer(peerId.peer);\n      //   } catch {}\n      // });\n      // const topics = await this.ipfsNode.pubsub.ls();\n      // console.log(topics);\n    }, 10000); // this.ipfsNode.libp2p.on(\"peer:connect\", this.onPeerConnect.bind(this));\n  }\n\n  async onPeerConnect(peerId) {\n    console.log(peerId);\n    this.ipfsNode.pubsub.publish(peerId, \"Hello there\");\n  }\n\n  async setPeersDb() {\n    this.peersDb = await this.orbitDb.feed(\"peers\");\n    await this.peersDb.load();\n  }\n\n  async getPeersDbId() {\n    const id = await this.peersDb.id;\n    return id;\n  }\n\n  async subscribeToDecentioPubsub() {\n    await this.ipfsNode.pubsub.subscribe(\"DecentioGlobalNetwork\", msg => console.log(msg));\n  }\n\n  async subscribeToYourPubsub() {\n    const peerInfo = await this.ipfsNode.id();\n    console.log(\"Peer ID: \" + peerInfo.id);\n    await this.ipfsNode.pubsub.subscribe(peerInfo.id, async msg => {\n      console.log(msg.data);\n      processMessage(msg);\n      const parsedMsg = JSON.parse(msg.data);\n      console.log(parsedMsg);\n      await this.replicateDb(parsedMsg);\n    });\n  }\n\n  async replicateDb(parsedMsg) {\n    var peerDbOuter = await this.orbitDb.open(parsedMsg.peerDb);\n    peerDbOuter.events.on(\"replicated\", async () => {\n      console.log(\"DB replicated\"); // if (peerDb.get(\"pieces\")) {\n      // await this.peersDb.set(peerDbOuter.id, peerDbOuter.all);\n\n      console.log(peerDbOuter.all); // }\n    });\n  }\n\n  async getPeerId() {\n    if (this.ipfsNode === undefined) throw Error(\"IPFS Node not defined\");\n    const peerInfo = await this.ipfsNode.id();\n    return peerInfo.id;\n  }\n\n  async handleMessageReceived(msg) {\n    const parsedMsg = JSON.parse(msg.data.toString());\n    const msgKeys = Object.keys(parsedMsg);\n    console.log(\"ParsedDb: \" + parsedMsg);\n    console.log(msgKeys[0]);\n\n    switch (msgKeys[0]) {\n      case \"userDb\":\n        var peerDb = await this.orbitDb.open(parsedMsg.userDb);\n        peerDb.events.on(\"replicated\", async () => {\n          console.log(\"DB replicated\"); // if (peerDb.get(\"pieces\")) {\n\n          await this.peersDb.set(peerDb.id, peerDb.all);\n          console.log(peerDb.all); // }\n        });\n        break;\n\n      default:\n        break;\n    }\n\n    console.log(msg.data.toString());\n  }\n\n  async connectToPeer(multiaddr) {\n    let protocol = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"/dnsaddr/bootstrap.libp2p.io/p2p/\";\n\n    try {\n      await this.ipfsNode.swarm.connect(protocol + multiaddr);\n    } catch (err) {\n      console.log(err);\n      await this.ipfsNode.swarm.connect(protocol + multiaddr);\n    }\n  }\n\n  async startIpfsNode(ipfsConf) {\n    this.ipfsNode = await IPFS.create(ipfsConf);\n  }\n\n  async startOrbitDb(orbitDbconf) {\n    this.orbitDb = await OrbitDB.createInstance(this.ipfsNode, orbitDbconf);\n  }\n\n  async getIpfsPeers() {\n    const peers = await this.ipfsNode.swarm.peers(); // console.log(peers);\n\n    return peers;\n  }\n\n  async createDBStore(address) {\n    const store = await this.orbitDb.docstore(address);\n    await store.load();\n    return store;\n  }\n\n  async handleStop() {\n    await this.orbitDb.disconnect();\n    await this.ipfsNode.stop();\n    delete this.orbitDb;\n    delete this.ipfsNode;\n  }\n\n}\n\nfunction processMessage(msg) {\n  if (typeof msg.data === \"object\") msg.data = new TextDecoder().decode(msg.data);\n}","map":{"version":3,"names":["OrbitDB","IPFS","makeAutoObservable","DataStore","constructor","rootStore","init","sessionStore","isAuthenticated","Error","ipfsNode","undefined","orbitDb","dbConfig","create","sync","localOnly","accessController","write","ipfsConfig","relay","enabled","hop","active","repo","_user","EXPERIMENTAL","pubsub","config","Addresses","Swarm","Bootstrap","start","ipfsConf","orbitDbconf","startIpfsNode","startOrbitDb","peerId","getPeerId","setPeersDb","subscribeToYourPubsub","subscribeToDecentioPubsub","setInterval","peers","getIpfsPeers","console","log","onPeerConnect","publish","peersDb","feed","load","getPeersDbId","id","subscribe","msg","peerInfo","data","processMessage","parsedMsg","JSON","parse","replicateDb","peerDbOuter","open","peerDb","events","on","all","handleMessageReceived","toString","msgKeys","Object","keys","userDb","set","connectToPeer","multiaddr","protocol","swarm","connect","err","createInstance","createDBStore","address","store","docstore","handleStop","disconnect","stop","TextDecoder","decode"],"sources":["C:/Users/zajan/GitHub/chatApplication/src/data/store/DataStore.js"],"sourcesContent":["import OrbitDB from \"orbit-db\";\r\nimport IPFS from \"ipfs\";\r\nimport { makeAutoObservable } from \"mobx\";\r\nexport default class DataStore {\r\n  ipfsNode;\r\n  orbitDb;\r\n  peerId;\r\n  constructor(rootStore) {\r\n    this.rootStore = rootStore;\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  async init() {\r\n    if (!this.rootStore.sessionStore.isAuthenticated()) throw Error(\"User is not defined\");\r\n    if (this.ipfsNode !== undefined) return;\r\n    if (this.orbitDb !== undefined) return;\r\n\r\n    const dbConfig = {\r\n      // If database doesn't exist, create it\r\n      create: true,\r\n      // Don't wait to load from the network\r\n      sync: true,\r\n      // directory: `/orbitdb/decentio-orbitdb-chat-${Math.random()}}`,\r\n      // Load only the local version of the database\r\n      localOnly: false,\r\n      // Allow anyone to write to the database,\r\n      // otherwise only the creator of the database can write\r\n      accessController: {\r\n        write: [\"*\"],\r\n      },\r\n    };\r\n    const ipfsConfig = {\r\n      // preload: { enabled: false },\r\n      relay: { enabled: true, hop: { enabled: true, active: true } },\r\n      // libp2p: {\r\n      //   config: {\r\n      //     dht: {\r\n      //       enabled: true,\r\n      //     },\r\n      //     modules: {\r\n      //       transport: [\"WebRTCStar\", \"WebSockets\"],\r\n      //     },\r\n      //     // transport: {\r\n      //     //   WebRTCStar: {\r\n      //     //     wrtc,\r\n      //     //   },\r\n      //     // },\r\n      //   },\r\n      // },\r\n      // peerDiscovery: {\r\n      //   autoDial: true, // Auto connect to discovered peers (limited by ConnectionManager minPeers)\r\n      //   mdns: {\r\n      //     // mdns options\r\n      //     interval: 1000, // ms\r\n      //     enabled: true,\r\n      //   },\r\n      //   webRTCStar: {\r\n      //     // webrtc-star options\r\n      //     interval: 1000, // ms\r\n      //     enabled: false,\r\n      //   },\r\n      //   // .. other discovery module options.\r\n      // },\r\n      // Prevents large data transfers\r\n      //TODO: nejak oddelit at to neni random ale treba username nebo neco\r\n      repo: `/orbitdb/decentio-orbitdb-chat-ipfs-${this.rootStore.sessionStore._user}}`,\r\n      EXPERIMENTAL: {\r\n        pubsub: true,\r\n      },\r\n\r\n      config: {\r\n        Addresses: {\r\n          Swarm: [\r\n            //       // Use IPFS dev signal server\r\n            //       // Websocket:\r\n            // \"/dns4/ws-star-signal-1.servep2p.com/tcp/443/wss/p2p-websocket-star\",\r\n            // \"/dns4/ws-star-signal-2.servep2p.com/tcp/443/wss/p2p-websocket-star\",\r\n            // \"/dns4/ws-star.discovery.libp2p.io/tcp/443/wss/p2p-websocket-star\",\r\n            // WebRTC:\r\n            // \"/dns4/wrtc-star1.par.dwebops.pub/tcp/443/wss/p2p-webrtc-star/\",\r\n            \"/dns4/wrtc-star2.sjc.dwebops.pub/tcp/443/wss/p2p-webrtc-star/\",\r\n            \"/dns4/webrtc-star.discovery.libp2p.io/tcp/443/wss/p2p-webrtc-star/\",\r\n            \"/dns4/wrtc-star1.par.dwebops.pub/tcp/443/wss/p2p-webrtc-star\",\r\n            \"/dns4/wrtc-star2.sjc.dwebops.pub/tcp/443/wss/p2p-webrtc-star\",\r\n            // // \"/ip4/0.0.0.0/tcp/4002\",\r\n            // \"/ip4/127.0.0.1/tcp/4003/ws\",\r\n            // \"/libp2p-webrtc-star/dns4/star-signal.cloud.ipfs.team/wss\",\r\n            // \"/dns4/star-signal.cloud.ipfs.team/wss/p2p-webrtc-star\",\r\n            //       // Use local signal server\r\n            // \"/ip4/0.0.0.0/tcp/4011/ws\",\r\n            // \"/ip6/::/tcp/4011/ws\",\r\n          ],\r\n        },\r\n        Bootstrap: [\r\n          // \"/dns4/wrtc-star2.sjc.dwebops.pub/tcp/443/wss/p2p-webrtc-star/\",\r\n          // \"/dns4/webrtc-star.discovery.libp2p.io/tcp/443/wss/p2p-webrtc-star/\",\r\n          // \"/dns4/wrtc-star1.par.dwebops.pub/tcp/443/wss/p2p-webrtc-star\",\r\n          // \"/dns4/wrtc-star2.sjc.dwebops.pub/tcp/443/wss/p2p-webrtc-star\",\r\n        ],\r\n      },\r\n    };\r\n\r\n    await this.start(ipfsConfig, dbConfig);\r\n  }\r\n\r\n  async start(ipfsConf, orbitDbconf) {\r\n    await this.startIpfsNode(ipfsConf);\r\n    await this.startOrbitDb(orbitDbconf);\r\n    this.peerId = await this.getPeerId();\r\n    await this.setPeersDb();\r\n    await this.subscribeToYourPubsub();\r\n    await this.subscribeToDecentioPubsub();\r\n    setInterval(async () => {\r\n      const peers = await this.getIpfsPeers();\r\n      console.log(peers);\r\n      // await peers.map(async (peerId) => {\r\n      //   try {\r\n      //     await this.connectToPeer(peerId.peer);\r\n      //   } catch {}\r\n      // });\r\n      // const topics = await this.ipfsNode.pubsub.ls();\r\n      // console.log(topics);\r\n    }, 10000);\r\n    // this.ipfsNode.libp2p.on(\"peer:connect\", this.onPeerConnect.bind(this));\r\n  }\r\n  async onPeerConnect(peerId) {\r\n    console.log(peerId);\r\n    this.ipfsNode.pubsub.publish(peerId, \"Hello there\");\r\n  }\r\n  async setPeersDb() {\r\n    this.peersDb = await this.orbitDb.feed(\"peers\");\r\n    await this.peersDb.load();\r\n  }\r\n  async getPeersDbId() {\r\n    const id = await this.peersDb.id;\r\n    return id;\r\n  }\r\n  async subscribeToDecentioPubsub() {\r\n    await this.ipfsNode.pubsub.subscribe(\"DecentioGlobalNetwork\", (msg) => console.log(msg));\r\n  }\r\n  async subscribeToYourPubsub() {\r\n    const peerInfo = await this.ipfsNode.id();\r\n    console.log(\"Peer ID: \" + peerInfo.id);\r\n    await this.ipfsNode.pubsub.subscribe(peerInfo.id, async (msg) => {\r\n      console.log(msg.data);\r\n      processMessage(msg);\r\n      const parsedMsg = JSON.parse(msg.data);\r\n      console.log(parsedMsg);\r\n      await this.replicateDb(parsedMsg);\r\n    });\r\n  }\r\n  async replicateDb(parsedMsg) {\r\n    var peerDbOuter = await this.orbitDb.open(parsedMsg.peerDb);\r\n    peerDbOuter.events.on(\"replicated\", async () => {\r\n      console.log(\"DB replicated\");\r\n      // if (peerDb.get(\"pieces\")) {\r\n      // await this.peersDb.set(peerDbOuter.id, peerDbOuter.all);\r\n      console.log(peerDbOuter.all);\r\n      // }\r\n    });\r\n  }\r\n  async getPeerId() {\r\n    if (this.ipfsNode === undefined) throw Error(\"IPFS Node not defined\");\r\n    const peerInfo = await this.ipfsNode.id();\r\n    return peerInfo.id;\r\n  }\r\n\r\n  async handleMessageReceived(msg) {\r\n    const parsedMsg = JSON.parse(msg.data.toString());\r\n    const msgKeys = Object.keys(parsedMsg);\r\n    console.log(\"ParsedDb: \" + parsedMsg);\r\n    console.log(msgKeys[0]);\r\n    switch (msgKeys[0]) {\r\n      case \"userDb\":\r\n        var peerDb = await this.orbitDb.open(parsedMsg.userDb);\r\n        peerDb.events.on(\"replicated\", async () => {\r\n          console.log(\"DB replicated\");\r\n          // if (peerDb.get(\"pieces\")) {\r\n          await this.peersDb.set(peerDb.id, peerDb.all);\r\n          console.log(peerDb.all);\r\n          // }\r\n        });\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    console.log(msg.data.toString());\r\n  }\r\n\r\n  async connectToPeer(multiaddr, protocol = \"/dnsaddr/bootstrap.libp2p.io/p2p/\") {\r\n    try {\r\n      await this.ipfsNode.swarm.connect(protocol + multiaddr);\r\n    } catch (err) {\r\n      console.log(err);\r\n      await this.ipfsNode.swarm.connect(protocol + multiaddr);\r\n    }\r\n  }\r\n\r\n  async startIpfsNode(ipfsConf) {\r\n    this.ipfsNode = await IPFS.create(ipfsConf);\r\n  }\r\n  async startOrbitDb(orbitDbconf) {\r\n    this.orbitDb = await OrbitDB.createInstance(this.ipfsNode, orbitDbconf);\r\n  }\r\n  async getIpfsPeers() {\r\n    const peers = await this.ipfsNode.swarm.peers();\r\n    // console.log(peers);\r\n    return peers;\r\n  }\r\n\r\n  async createDBStore(address) {\r\n    const store = await this.orbitDb.docstore(address);\r\n    await store.load();\r\n    return store;\r\n  }\r\n\r\n  async handleStop() {\r\n    await this.orbitDb.disconnect();\r\n    await this.ipfsNode.stop();\r\n    delete this.orbitDb;\r\n    delete this.ipfsNode;\r\n  }\r\n}\r\nfunction processMessage(msg) {\r\n  if (typeof msg.data === \"object\") msg.data = new TextDecoder().decode(msg.data);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}