{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('../../types').NetworkService} config.network\n */\n\n\nmodule.exports = function (_ref) {\n  var network = _ref.network;\n\n  /**\n   * @type {import('ipfs-core-types/src/bitswap').API[\"stat\"]}\n   */\n  function stat() {\n    return _stat.apply(this, arguments);\n  }\n\n  function _stat() {\n    _stat = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var options,\n          bitswap,\n          snapshot,\n          _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              _context.next = 3;\n              return network.use(options);\n\n            case 3:\n              bitswap = _context.sent.bitswap;\n              snapshot = bitswap.stat().snapshot;\n              return _context.abrupt(\"return\", {\n                provideBufLen: parseInt(snapshot.providesBufferLength.toString()),\n                blocksReceived: BigInt(snapshot.blocksReceived.toString()),\n                wantlist: Array.from(bitswap.getWantlist()).map(function (e) {\n                  return e[1].cid;\n                }),\n                peers: bitswap.peers().map(function (id) {\n                  return id.toB58String();\n                }),\n                dupBlksReceived: BigInt(snapshot.dupBlksReceived.toString()),\n                dupDataReceived: BigInt(snapshot.dupDataReceived.toString()),\n                dataReceived: BigInt(snapshot.dataReceived.toString()),\n                blocksSent: BigInt(snapshot.blocksSent.toString()),\n                dataSent: BigInt(snapshot.dataSent.toString())\n              });\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _stat.apply(this, arguments);\n  }\n\n  return withTimeoutOption(stat);\n};","map":{"version":3,"names":["withTimeoutOption","require","module","exports","network","stat","options","use","bitswap","snapshot","provideBufLen","parseInt","providesBufferLength","toString","blocksReceived","BigInt","wantlist","Array","from","getWantlist","map","e","cid","peers","id","toB58String","dupBlksReceived","dupDataReceived","dataReceived","blocksSent","dataSent"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/bitswap/stat.js"],"sourcesContent":["'use strict'\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @param {Object} config\n * @param {import('../../types').NetworkService} config.network\n */\nmodule.exports = ({ network }) => {\n  /**\n   * @type {import('ipfs-core-types/src/bitswap').API[\"stat\"]}\n   */\n  async function stat (options = {}) {\n    /** @type {import('ipfs-bitswap').IPFSBitswap} */\n    const bitswap = (await network.use(options)).bitswap\n    const snapshot = bitswap.stat().snapshot\n\n    return {\n      provideBufLen: parseInt(snapshot.providesBufferLength.toString()),\n      blocksReceived: BigInt(snapshot.blocksReceived.toString()),\n      wantlist: Array.from(bitswap.getWantlist()).map(e => e[1].cid),\n      peers: bitswap.peers().map(id => id.toB58String()),\n      dupBlksReceived: BigInt(snapshot.dupBlksReceived.toString()),\n      dupDataReceived: BigInt(snapshot.dupDataReceived.toString()),\n      dataReceived: BigInt(snapshot.dataReceived.toString()),\n      blocksSent: BigInt(snapshot.blocksSent.toString()),\n      dataSent: BigInt(snapshot.dataSent.toString())\n    }\n  }\n\n  return withTimeoutOption(stat)\n}\n"],"mappings":"AAAA;;;;;;AAEA,IAAMA,iBAAiB,GAAGC,OAAO,CAAC,yCAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,gBAAiB;EAAA,IAAdC,OAAc,QAAdA,OAAc;;EAChC;AACF;AACA;EAHkC,SAIjBC,IAJiB;IAAA;EAAA;;EAAA;IAAA,mEAIhC;MAAA;MAAA;MAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAqBC,OAArB,2DAA+B,EAA/B;cAAA;cAAA,OAEyBF,OAAO,CAACG,GAAR,CAAYD,OAAZ,CAFzB;;YAAA;cAEQE,OAFR,iBAE+CA,OAF/C;cAGQC,QAHR,GAGmBD,OAAO,CAACH,IAAR,GAAeI,QAHlC;cAAA,iCAKS;gBACLC,aAAa,EAAEC,QAAQ,CAACF,QAAQ,CAACG,oBAAT,CAA8BC,QAA9B,EAAD,CADlB;gBAELC,cAAc,EAAEC,MAAM,CAACN,QAAQ,CAACK,cAAT,CAAwBD,QAAxB,EAAD,CAFjB;gBAGLG,QAAQ,EAAEC,KAAK,CAACC,IAAN,CAAWV,OAAO,CAACW,WAAR,EAAX,EAAkCC,GAAlC,CAAsC,UAAAC,CAAC;kBAAA,OAAIA,CAAC,CAAC,CAAD,CAAD,CAAKC,GAAT;gBAAA,CAAvC,CAHL;gBAILC,KAAK,EAAEf,OAAO,CAACe,KAAR,GAAgBH,GAAhB,CAAoB,UAAAI,EAAE;kBAAA,OAAIA,EAAE,CAACC,WAAH,EAAJ;gBAAA,CAAtB,CAJF;gBAKLC,eAAe,EAAEX,MAAM,CAACN,QAAQ,CAACiB,eAAT,CAAyBb,QAAzB,EAAD,CALlB;gBAMLc,eAAe,EAAEZ,MAAM,CAACN,QAAQ,CAACkB,eAAT,CAAyBd,QAAzB,EAAD,CANlB;gBAOLe,YAAY,EAAEb,MAAM,CAACN,QAAQ,CAACmB,YAAT,CAAsBf,QAAtB,EAAD,CAPf;gBAQLgB,UAAU,EAAEd,MAAM,CAACN,QAAQ,CAACoB,UAAT,CAAoBhB,QAApB,EAAD,CARb;gBASLiB,QAAQ,EAAEf,MAAM,CAACN,QAAQ,CAACqB,QAAT,CAAkBjB,QAAlB,EAAD;cATX,CALT;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAJgC;IAAA;EAAA;;EAsBhC,OAAOb,iBAAiB,CAACK,IAAD,CAAxB;AACD,CAvBD"},"metadata":{},"sourceType":"script"}