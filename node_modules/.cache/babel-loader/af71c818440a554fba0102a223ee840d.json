{"ast":null,"code":"'use strict';\n\nvar dagPb = require('@ipld/dag-pb');\n\nvar ipfsUnixfs = require('ipfs-unixfs');\n\nvar dir = require('./dir.js');\n\nvar persist = require('./utils/persist.js');\n\nclass DirFlat extends dir {\n  constructor(props, options) {\n    super(props, options);\n    this._children = {};\n  }\n\n  async put(name, value) {\n    this.cid = undefined;\n    this.size = undefined;\n    this._children[name] = value;\n  }\n\n  get(name) {\n    return Promise.resolve(this._children[name]);\n  }\n\n  childCount() {\n    return Object.keys(this._children).length;\n  }\n\n  directChildrenCount() {\n    return this.childCount();\n  }\n\n  onlyChild() {\n    return this._children[Object.keys(this._children)[0]];\n  }\n\n  async *eachChildSeries() {\n    const keys = Object.keys(this._children);\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      yield {\n        key: key,\n        child: this._children[key]\n      };\n    }\n  }\n\n  async *flush(block) {\n    const children = Object.keys(this._children);\n    const links = [];\n\n    for (let i = 0; i < children.length; i++) {\n      let child = this._children[children[i]];\n\n      if (child instanceof dir) {\n        for await (const entry of child.flush(block)) {\n          child = entry;\n          yield child;\n        }\n      }\n\n      if (child.size != null && child.cid) {\n        links.push({\n          Name: children[i],\n          Tsize: child.size,\n          Hash: child.cid\n        });\n      }\n    }\n\n    const unixfs = new ipfsUnixfs.UnixFS({\n      type: 'directory',\n      mtime: this.mtime,\n      mode: this.mode\n    });\n    const node = {\n      Data: unixfs.marshal(),\n      Links: links\n    };\n    const buffer = dagPb.encode(dagPb.prepare(node));\n    const cid = await persist(buffer, block, this.options);\n    const size = buffer.length + node.Links.reduce((acc, curr) => acc + (curr.Tsize == null ? 0 : curr.Tsize), 0);\n    this.cid = cid;\n    this.size = size;\n    yield {\n      cid,\n      unixfs,\n      path: this.path,\n      size\n    };\n  }\n\n}\n\nmodule.exports = DirFlat;","map":{"version":3,"names":["dagPb","require","ipfsUnixfs","dir","persist","DirFlat","constructor","props","options","_children","put","name","value","cid","undefined","size","get","Promise","resolve","childCount","Object","keys","length","directChildrenCount","onlyChild","eachChildSeries","i","key","child","flush","block","children","links","entry","push","Name","Tsize","Hash","unixfs","UnixFS","type","mtime","mode","node","Data","marshal","Links","buffer","encode","prepare","reduce","acc","curr","path","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-unixfs-importer/cjs/src/dir-flat.js"],"sourcesContent":["'use strict';\n\nvar dagPb = require('@ipld/dag-pb');\nvar ipfsUnixfs = require('ipfs-unixfs');\nvar dir = require('./dir.js');\nvar persist = require('./utils/persist.js');\n\nclass DirFlat extends dir {\n  constructor(props, options) {\n    super(props, options);\n    this._children = {};\n  }\n  async put(name, value) {\n    this.cid = undefined;\n    this.size = undefined;\n    this._children[name] = value;\n  }\n  get(name) {\n    return Promise.resolve(this._children[name]);\n  }\n  childCount() {\n    return Object.keys(this._children).length;\n  }\n  directChildrenCount() {\n    return this.childCount();\n  }\n  onlyChild() {\n    return this._children[Object.keys(this._children)[0]];\n  }\n  async *eachChildSeries() {\n    const keys = Object.keys(this._children);\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      yield {\n        key: key,\n        child: this._children[key]\n      };\n    }\n  }\n  async *flush(block) {\n    const children = Object.keys(this._children);\n    const links = [];\n    for (let i = 0; i < children.length; i++) {\n      let child = this._children[children[i]];\n      if (child instanceof dir) {\n        for await (const entry of child.flush(block)) {\n          child = entry;\n          yield child;\n        }\n      }\n      if (child.size != null && child.cid) {\n        links.push({\n          Name: children[i],\n          Tsize: child.size,\n          Hash: child.cid\n        });\n      }\n    }\n    const unixfs = new ipfsUnixfs.UnixFS({\n      type: 'directory',\n      mtime: this.mtime,\n      mode: this.mode\n    });\n    const node = {\n      Data: unixfs.marshal(),\n      Links: links\n    };\n    const buffer = dagPb.encode(dagPb.prepare(node));\n    const cid = await persist(buffer, block, this.options);\n    const size = buffer.length + node.Links.reduce((acc, curr) => acc + (curr.Tsize == null ? 0 : curr.Tsize), 0);\n    this.cid = cid;\n    this.size = size;\n    yield {\n      cid,\n      unixfs,\n      path: this.path,\n      size\n    };\n  }\n}\n\nmodule.exports = DirFlat;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}