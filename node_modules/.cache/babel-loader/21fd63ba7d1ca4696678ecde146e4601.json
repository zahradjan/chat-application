{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _awaitAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _wrapAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nvar mergeOptions = require('merge-options').bind({\n  ignoreUndefined: true\n});\n\nvar _require = require('ipfs-utils/src/env'),\n    isTest = _require.isTest;\n\nvar log = require('debug')('ipfs');\n\nvar errCode = require('err-code');\n\nvar _require2 = require('ipfs-unixfs'),\n    UnixFS = _require2.UnixFS;\n\nvar dagPb = require('@ipld/dag-pb');\n\nvar dagCbor = require('@ipld/dag-cbor');\n\nvar _require3 = require('multiformats/hashes/identity'),\n    identity = _require3.identity;\n\nvar _require4 = require('multiformats/basics'),\n    bases = _require4.bases,\n    hashes = _require4.hashes,\n    codecs = _require4.codecs;\n\nvar initAssets = require('../runtime/init-assets-nodejs');\n\nvar _require5 = require('../errors'),\n    AlreadyInitializedError = _require5.AlreadyInitializedError;\n\nvar _require6 = require('uint8arrays/from-string'),\n    uint8ArrayFromString = _require6.fromString;\n\nvar createStartAPI = require('./start');\n\nvar createStopAPI = require('./stop');\n\nvar createDNSAPI = require('./dns');\n\nvar createIsOnlineAPI = require('./is-online');\n\nvar createResolveAPI = require('./resolve');\n\nvar PinAPI = require('./pin');\n\nvar IPNSAPI = require('./ipns');\n\nvar NameAPI = require('./name');\n\nvar createRefsAPI = require('./refs');\n\nvar createRefsLocalAPI = require('./refs/local');\n\nvar BitswapAPI = require('./bitswap');\n\nvar BootstrapAPI = require('./bootstrap');\n\nvar BlockAPI = require('./block');\n\nvar RootAPI = require('./root');\n\nvar createVersionAPI = require('./version');\n\nvar createIDAPI = require('./id');\n\nvar createConfigAPI = require('./config');\n\nvar DagAPI = require('./dag');\n\nvar createPreloadAPI = require('../preload');\n\nvar createMfsPreloadAPI = require('../mfs-preload');\n\nvar createFilesAPI = require('./files');\n\nvar KeyAPI = require('./key');\n\nvar ObjectAPI = require('./object');\n\nvar RepoAPI = require('./repo');\n\nvar StatsAPI = require('./stats');\n\nvar Storage = require('./storage');\n\nvar Network = require('./network');\n\nvar Service = require('../utils/service');\n\nvar SwarmAPI = require('./swarm');\n\nvar createPingAPI = require('./ping');\n\nvar createDHTAPI = require('./dht');\n\nvar createPubSubAPI = require('./pubsub');\n\nvar Multicodecs = require('ipfs-core-utils/src/multicodecs');\n\nvar Multihashes = require('ipfs-core-utils/src/multihashes');\n\nvar Multibases = require('ipfs-core-utils/src/multibases');\n/**\n * @typedef {import('../types').Options} Options\n * @typedef {import('../types').Print} Print\n * @typedef {import('./storage')} StorageAPI\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n */\n\n\nvar IPFS = /*#__PURE__*/function () {\n  /**\n   * @param {Object} config\n   * @param {Print} config.print\n   * @param {StorageAPI} config.storage\n   * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n   * @param {Options} config.options\n   */\n  function IPFS(_ref2) {\n    var print = _ref2.print,\n        storage = _ref2.storage,\n        codecs = _ref2.codecs,\n        options = _ref2.options;\n\n    _classCallCheck(this, IPFS);\n\n    var peerId = storage.peerId,\n        repo = storage.repo,\n        keychain = storage.keychain;\n    var network = Service.create(Network);\n    var preload = createPreloadAPI(options.preload);\n    var dns = createDNSAPI();\n    var isOnline = createIsOnlineAPI({\n      network: network\n    }); // @ts-ignore This type check fails as options.\n    // libp2p can be a function, while IPNS router config expects libp2p config\n\n    var ipns = new IPNSAPI(options);\n    /** @type {MultihashHasher[]} */\n\n    var multihashHashers = Object.values(hashes);\n    (options.ipld && options.ipld.hashers ? options.ipld.hashers : []).forEach(function (hasher) {\n      return multihashHashers.push(hasher);\n    });\n    this.hashers = new Multihashes({\n      hashers: multihashHashers,\n      loadHasher: options.ipld && options.ipld.loadHasher\n    });\n    /** @type {MultibaseCodec[]} */\n\n    var multibaseCodecs = Object.values(bases);\n    (options.ipld && options.ipld.bases ? options.ipld.bases : []).forEach(function (base) {\n      return multibaseCodecs.push(base);\n    });\n    this.bases = new Multibases({\n      bases: multibaseCodecs,\n      loadBase: options.ipld && options.ipld.loadBase\n    });\n    var pin = new PinAPI({\n      repo: repo,\n      codecs: codecs\n    });\n    var block = new BlockAPI({\n      codecs: codecs,\n      hashers: this.hashers,\n      preload: preload,\n      repo: repo\n    });\n    var name = new NameAPI({\n      dns: dns,\n      ipns: ipns,\n      repo: repo,\n      codecs: codecs,\n      peerId: peerId,\n      isOnline: isOnline,\n      keychain: keychain,\n      options: options\n    });\n    var resolve = createResolveAPI({\n      repo: repo,\n      codecs: codecs,\n      bases: this.bases,\n      name: name\n    });\n    var dag = new DagAPI({\n      repo: repo,\n      codecs: codecs,\n      hashers: this.hashers,\n      preload: preload\n    });\n    var refs = Object.assign(createRefsAPI({\n      repo: repo,\n      codecs: codecs,\n      resolve: resolve,\n      preload: preload\n    }), {\n      local: createRefsLocalAPI({\n        repo: storage.repo\n      })\n    });\n\n    var _RootAPI = new RootAPI({\n      preload: preload,\n      repo: repo,\n      options: options.EXPERIMENTAL\n    }),\n        add = _RootAPI.add,\n        addAll = _RootAPI.addAll,\n        cat = _RootAPI.cat,\n        get = _RootAPI.get,\n        ls = _RootAPI.ls;\n\n    var files = createFilesAPI({\n      repo: repo,\n      preload: preload,\n      hashers: this.hashers,\n      options: options\n    });\n    var mfsPreload = createMfsPreloadAPI({\n      files: files,\n      preload: preload,\n      options: options.preload\n    });\n    this.preload = preload;\n    this.name = name;\n    this.ipns = ipns;\n    this.pin = pin;\n    this.resolve = resolve;\n    this.block = block;\n    this.refs = refs;\n    this.start = createStartAPI({\n      network: network,\n      peerId: peerId,\n      repo: repo,\n      preload: preload,\n      ipns: ipns,\n      mfsPreload: mfsPreload,\n      print: print,\n      keychain: keychain,\n      options: options\n    });\n    this.stop = createStopAPI({\n      network: network,\n      preload: preload,\n      mfsPreload: mfsPreload,\n      ipns: ipns,\n      repo: repo\n    });\n    this.dht = createDHTAPI({\n      network: network,\n      repo: repo\n    });\n    this.pubsub = createPubSubAPI({\n      network: network,\n      config: options.config\n    });\n    this.dns = dns;\n    this.isOnline = isOnline;\n    this.id = createIDAPI({\n      network: network,\n      peerId: peerId\n    });\n    this.version = createVersionAPI({\n      repo: repo\n    });\n    this.bitswap = new BitswapAPI({\n      network: network\n    });\n    this.bootstrap = new BootstrapAPI({\n      repo: repo\n    });\n    this.config = createConfigAPI({\n      repo: repo\n    });\n    this.ping = createPingAPI({\n      network: network\n    });\n    this.add = add;\n    this.addAll = addAll;\n    this.cat = cat;\n    this.get = get;\n    this.ls = ls;\n    this.dag = dag;\n    this.files = files;\n    this.key = new KeyAPI({\n      keychain: keychain\n    });\n    this.object = new ObjectAPI({\n      preload: preload,\n      codecs: codecs,\n      repo: repo\n    });\n    this.repo = new RepoAPI({\n      repo: repo,\n      hashers: this.hashers\n    });\n    this.stats = new StatsAPI({\n      repo: repo,\n      network: network\n    });\n    this.swarm = new SwarmAPI({\n      network: network\n    }); // For the backwards compatibility\n\n    Object.defineProperty(this, 'libp2p', {\n      get: function get() {\n        var net = network.try();\n        return net ? net.libp2p : undefined;\n      }\n    }); // unimplemented methods\n\n    var notImplemented = function notImplemented() {\n      return Promise.reject(errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED'));\n    };\n\n    var notImplementedIter = /*#__PURE__*/function () {\n      var _ref = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                throw errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED');\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function notImplementedIter() {\n        return _ref.apply(this, arguments);\n      };\n    }(); // eslint-disable-line require-yield\n\n\n    this.commands = notImplemented;\n    this.diag = {\n      cmds: notImplemented,\n      net: notImplemented,\n      sys: notImplemented\n    };\n    this.log = {\n      level: notImplemented,\n      ls: notImplemented,\n      tail: notImplementedIter\n    };\n    this.mount = notImplemented;\n    this.codecs = codecs;\n  }\n  /**\n   * `IPFS.create` will do the initialization. Keep this around for backwards\n   * compatibility.\n   *\n   * @deprecated\n   */\n\n\n  _createClass(IPFS, [{\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                throw new AlreadyInitializedError();\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function init() {\n        return _init.apply(this, arguments);\n      }\n\n      return init;\n    }()\n    /**\n     * @param {Options} options\n     */\n\n  }], [{\n    key: \"create\",\n    value: function () {\n      var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var options,\n            initOptions,\n            id,\n            blockCodecs,\n            multicodecs,\n            print,\n            storage,\n            config,\n            ipfs,\n            cid,\n            _args3 = arguments;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                options = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};\n                options = mergeOptions(getDefaultOptions(), options);\n                initOptions = options.init || {};\n                /**\n                 * @type {BlockCodec}\n                 */\n\n                id = {\n                  name: identity.name,\n                  code: identity.code,\n                  encode: function encode(id) {\n                    return id;\n                  },\n                  decode: function decode(id) {\n                    return id;\n                  }\n                };\n                /** @type {BlockCodec[]} */\n\n                blockCodecs = Object.values(codecs);\n                [dagPb, dagCbor, id].concat(options.ipld && options.ipld.codecs || []).forEach(function (codec) {\n                  return blockCodecs.push(codec);\n                });\n                multicodecs = new Multicodecs({\n                  codecs: blockCodecs,\n                  loadCodec: options.ipld && options.ipld.loadCodec\n                }); // eslint-disable-next-line no-console\n\n                print = options.silent ? log : console.log;\n                _context3.next = 10;\n                return Storage.start(print, multicodecs, options);\n\n              case 10:\n                storage = _context3.sent;\n                _context3.next = 13;\n                return storage.repo.config.getAll();\n\n              case 13:\n                config = _context3.sent;\n                ipfs = new IPFS({\n                  storage: storage,\n                  print: print,\n                  codecs: multicodecs,\n                  options: _objectSpread(_objectSpread({}, options), {}, {\n                    config: config\n                  })\n                });\n                _context3.next = 17;\n                return ipfs.preload.start();\n\n              case 17:\n                ipfs.ipns.startOffline(storage);\n\n                if (!(storage.isNew && !initOptions.emptyRepo)) {\n                  _context3.next = 28;\n                  break;\n                }\n\n                _context3.next = 21;\n                return addEmptyDir(ipfs);\n\n              case 21:\n                cid = _context3.sent;\n                log('adding default assets');\n                _context3.next = 25;\n                return initAssets({\n                  addAll: ipfs.addAll,\n                  print: print\n                });\n\n              case 25:\n                log('initializing IPNS keyspace');\n                _context3.next = 28;\n                return ipfs.ipns.initializeKeyspace(storage.peerId.privKey, uint8ArrayFromString(\"/ipfs/\".concat(cid)));\n\n              case 28:\n                if (!(options.start !== false)) {\n                  _context3.next = 31;\n                  break;\n                }\n\n                _context3.next = 31;\n                return ipfs.start();\n\n              case 31:\n                return _context3.abrupt(\"return\", ipfs);\n\n              case 32:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function create() {\n        return _create.apply(this, arguments);\n      }\n\n      return create;\n    }()\n  }]);\n\n  return IPFS;\n}();\n\nmodule.exports = IPFS;\n/**\n * @param {IPFS} ipfs\n */\n\nvar addEmptyDir = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(ipfs) {\n    var buf, cid;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            buf = dagPb.encode({\n              Data: new UnixFS({\n                type: 'directory'\n              }).marshal(),\n              Links: []\n            });\n            _context4.next = 3;\n            return ipfs.block.put(buf, {\n              mhtype: 'sha2-256',\n              format: 'dag-pb'\n            });\n\n          case 3:\n            cid = _context4.sent;\n            _context4.next = 6;\n            return ipfs.pin.add(cid);\n\n          case 6:\n            return _context4.abrupt(\"return\", cid);\n\n          case 7:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function addEmptyDir(_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n/**\n * @returns {Options}\n */\n\n\nvar getDefaultOptions = function getDefaultOptions() {\n  return {\n    start: true,\n    EXPERIMENTAL: {},\n    preload: {\n      enabled: !isTest,\n      // preload by default, unless in test env\n      addresses: ['/dns4/node0.preload.ipfs.io/https', '/dns4/node1.preload.ipfs.io/https', '/dns4/node2.preload.ipfs.io/https', '/dns4/node3.preload.ipfs.io/https']\n    }\n  };\n};","map":{"version":3,"names":["mergeOptions","require","bind","ignoreUndefined","isTest","log","errCode","UnixFS","dagPb","dagCbor","identity","bases","hashes","codecs","initAssets","AlreadyInitializedError","uint8ArrayFromString","fromString","createStartAPI","createStopAPI","createDNSAPI","createIsOnlineAPI","createResolveAPI","PinAPI","IPNSAPI","NameAPI","createRefsAPI","createRefsLocalAPI","BitswapAPI","BootstrapAPI","BlockAPI","RootAPI","createVersionAPI","createIDAPI","createConfigAPI","DagAPI","createPreloadAPI","createMfsPreloadAPI","createFilesAPI","KeyAPI","ObjectAPI","RepoAPI","StatsAPI","Storage","Network","Service","SwarmAPI","createPingAPI","createDHTAPI","createPubSubAPI","Multicodecs","Multihashes","Multibases","IPFS","print","storage","options","peerId","repo","keychain","network","create","preload","dns","isOnline","ipns","multihashHashers","Object","values","ipld","hashers","forEach","hasher","push","loadHasher","multibaseCodecs","base","loadBase","pin","block","name","resolve","dag","refs","assign","local","EXPERIMENTAL","add","addAll","cat","get","ls","files","mfsPreload","start","stop","dht","pubsub","config","id","version","bitswap","bootstrap","ping","key","object","stats","swarm","defineProperty","net","try","libp2p","undefined","notImplemented","Promise","reject","Error","notImplementedIter","commands","diag","cmds","sys","level","tail","mount","getDefaultOptions","initOptions","init","code","encode","decode","blockCodecs","concat","codec","multicodecs","loadCodec","silent","console","getAll","ipfs","startOffline","isNew","emptyRepo","addEmptyDir","cid","initializeKeyspace","privKey","module","exports","buf","Data","type","marshal","Links","put","mhtype","format","enabled","addresses"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/index.js"],"sourcesContent":["'use strict'\n\nconst mergeOptions = require('merge-options').bind({ ignoreUndefined: true })\nconst { isTest } = require('ipfs-utils/src/env')\nconst log = require('debug')('ipfs')\nconst errCode = require('err-code')\nconst { UnixFS } = require('ipfs-unixfs')\nconst dagPb = require('@ipld/dag-pb')\nconst dagCbor = require('@ipld/dag-cbor')\nconst { identity } = require('multiformats/hashes/identity')\nconst { bases, hashes, codecs } = require('multiformats/basics')\n\nconst initAssets = require('../runtime/init-assets-nodejs')\nconst { AlreadyInitializedError } = require('../errors')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\n\nconst createStartAPI = require('./start')\nconst createStopAPI = require('./stop')\nconst createDNSAPI = require('./dns')\nconst createIsOnlineAPI = require('./is-online')\nconst createResolveAPI = require('./resolve')\nconst PinAPI = require('./pin')\nconst IPNSAPI = require('./ipns')\nconst NameAPI = require('./name')\nconst createRefsAPI = require('./refs')\nconst createRefsLocalAPI = require('./refs/local')\nconst BitswapAPI = require('./bitswap')\nconst BootstrapAPI = require('./bootstrap')\nconst BlockAPI = require('./block')\nconst RootAPI = require('./root')\nconst createVersionAPI = require('./version')\nconst createIDAPI = require('./id')\nconst createConfigAPI = require('./config')\nconst DagAPI = require('./dag')\nconst createPreloadAPI = require('../preload')\nconst createMfsPreloadAPI = require('../mfs-preload')\nconst createFilesAPI = require('./files')\nconst KeyAPI = require('./key')\nconst ObjectAPI = require('./object')\nconst RepoAPI = require('./repo')\nconst StatsAPI = require('./stats')\nconst Storage = require('./storage')\nconst Network = require('./network')\nconst Service = require('../utils/service')\nconst SwarmAPI = require('./swarm')\nconst createPingAPI = require('./ping')\nconst createDHTAPI = require('./dht')\nconst createPubSubAPI = require('./pubsub')\nconst Multicodecs = require('ipfs-core-utils/src/multicodecs')\nconst Multihashes = require('ipfs-core-utils/src/multihashes')\nconst Multibases = require('ipfs-core-utils/src/multibases')\n\n/**\n * @typedef {import('../types').Options} Options\n * @typedef {import('../types').Print} Print\n * @typedef {import('./storage')} StorageAPI\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n */\n\nclass IPFS {\n  /**\n   * @param {Object} config\n   * @param {Print} config.print\n   * @param {StorageAPI} config.storage\n   * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n   * @param {Options} config.options\n   */\n  constructor ({ print, storage, codecs, options }) {\n    const { peerId, repo, keychain } = storage\n    const network = Service.create(Network)\n\n    const preload = createPreloadAPI(options.preload)\n\n    const dns = createDNSAPI()\n    const isOnline = createIsOnlineAPI({ network })\n    // @ts-ignore This type check fails as options.\n    // libp2p can be a function, while IPNS router config expects libp2p config\n    const ipns = new IPNSAPI(options)\n\n    /** @type {MultihashHasher[]} */\n    const multihashHashers = Object.values(hashes);\n\n    (options.ipld && options.ipld.hashers ? options.ipld.hashers : []).forEach(hasher => multihashHashers.push(hasher))\n\n    this.hashers = new Multihashes({\n      hashers: multihashHashers,\n      loadHasher: options.ipld && options.ipld.loadHasher\n    })\n\n    /** @type {MultibaseCodec[]} */\n    const multibaseCodecs = Object.values(bases);\n\n    (options.ipld && options.ipld.bases ? options.ipld.bases : []).forEach(base => multibaseCodecs.push(base))\n\n    this.bases = new Multibases({\n      bases: multibaseCodecs,\n      loadBase: options.ipld && options.ipld.loadBase\n    })\n\n    const pin = new PinAPI({ repo, codecs })\n    const block = new BlockAPI({ codecs, hashers: this.hashers, preload, repo })\n\n    const name = new NameAPI({\n      dns,\n      ipns,\n      repo,\n      codecs,\n      peerId,\n      isOnline,\n      keychain,\n      options\n    })\n\n    const resolve = createResolveAPI({ repo, codecs, bases: this.bases, name })\n\n    const dag = new DagAPI({ repo, codecs, hashers: this.hashers, preload })\n    const refs = Object.assign(createRefsAPI({ repo, codecs, resolve, preload }), {\n      local: createRefsLocalAPI({ repo: storage.repo })\n    })\n    const { add, addAll, cat, get, ls } = new RootAPI({\n      preload,\n      repo,\n      options: options.EXPERIMENTAL\n    })\n\n    const files = createFilesAPI({\n      repo,\n      preload,\n      hashers: this.hashers,\n      options\n    })\n\n    const mfsPreload = createMfsPreloadAPI({\n      files,\n      preload,\n      options: options.preload\n    })\n\n    this.preload = preload\n    this.name = name\n    this.ipns = ipns\n    this.pin = pin\n    this.resolve = resolve\n    this.block = block\n    this.refs = refs\n\n    this.start = createStartAPI({\n      network,\n      peerId,\n      repo,\n      preload,\n      ipns,\n      mfsPreload,\n      print,\n      keychain,\n      options\n    })\n\n    this.stop = createStopAPI({\n      network,\n      preload,\n      mfsPreload,\n      ipns,\n      repo\n    })\n\n    this.dht = createDHTAPI({ network, repo })\n    this.pubsub = createPubSubAPI({ network, config: options.config })\n    this.dns = dns\n    this.isOnline = isOnline\n    this.id = createIDAPI({ network, peerId })\n    this.version = createVersionAPI({ repo })\n    this.bitswap = new BitswapAPI({ network })\n    this.bootstrap = new BootstrapAPI({ repo })\n    this.config = createConfigAPI({ repo })\n    this.ping = createPingAPI({ network })\n\n    this.add = add\n    this.addAll = addAll\n    this.cat = cat\n    this.get = get\n    this.ls = ls\n\n    this.dag = dag\n    this.files = files\n    this.key = new KeyAPI({ keychain })\n    this.object = new ObjectAPI({ preload, codecs, repo })\n    this.repo = new RepoAPI({ repo, hashers: this.hashers })\n    this.stats = new StatsAPI({ repo, network })\n    this.swarm = new SwarmAPI({ network })\n\n    // For the backwards compatibility\n    Object.defineProperty(this, 'libp2p', {\n      get () {\n        const net = network.try()\n        return net ? net.libp2p : undefined\n      }\n    })\n\n    // unimplemented methods\n    const notImplemented = () => Promise.reject(errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED'))\n    const notImplementedIter = async function * () { throw errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED') } // eslint-disable-line require-yield\n    this.commands = notImplemented\n    this.diag = {\n      cmds: notImplemented,\n      net: notImplemented,\n      sys: notImplemented\n    }\n    this.log = {\n      level: notImplemented,\n      ls: notImplemented,\n      tail: notImplementedIter\n    }\n    this.mount = notImplemented\n\n    this.codecs = codecs\n  }\n\n  /**\n   * `IPFS.create` will do the initialization. Keep this around for backwards\n   * compatibility.\n   *\n   * @deprecated\n   */\n  async init () { // eslint-disable-line require-await\n    throw new AlreadyInitializedError()\n  }\n\n  /**\n   * @param {Options} options\n   */\n  static async create (options = {}) {\n    options = mergeOptions(getDefaultOptions(), options)\n    const initOptions = options.init || {}\n\n    /**\n     * @type {BlockCodec}\n     */\n    const id = {\n      name: identity.name,\n      code: identity.code,\n      encode: (id) => id,\n      decode: (id) => id\n    }\n\n    /** @type {BlockCodec[]} */\n    const blockCodecs = Object.values(codecs);\n\n    [dagPb, dagCbor, id].concat((options.ipld && options.ipld.codecs) || []).forEach(codec => blockCodecs.push(codec))\n\n    const multicodecs = new Multicodecs({\n      codecs: blockCodecs,\n      loadCodec: options.ipld && options.ipld.loadCodec\n    })\n\n    // eslint-disable-next-line no-console\n    const print = options.silent ? log : console.log\n    const storage = await Storage.start(print, multicodecs, options)\n    const config = await storage.repo.config.getAll()\n\n    const ipfs = new IPFS({\n      storage,\n      print,\n      codecs: multicodecs,\n      options: { ...options, config }\n    })\n\n    await ipfs.preload.start()\n\n    ipfs.ipns.startOffline(storage)\n\n    if (storage.isNew && !initOptions.emptyRepo) {\n      // add empty unixfs dir object (go-ipfs assumes this exists)\n      const cid = await addEmptyDir(ipfs)\n\n      log('adding default assets')\n      await initAssets({ addAll: ipfs.addAll, print })\n\n      log('initializing IPNS keyspace')\n      await ipfs.ipns.initializeKeyspace(storage.peerId.privKey, uint8ArrayFromString(`/ipfs/${cid}`))\n    }\n\n    if (options.start !== false) {\n      await ipfs.start()\n    }\n\n    return ipfs\n  }\n}\n\nmodule.exports = IPFS\n\n/**\n * @param {IPFS} ipfs\n */\nconst addEmptyDir = async (ipfs) => {\n  const buf = dagPb.encode({\n    Data: new UnixFS({ type: 'directory' }).marshal(),\n    Links: []\n  })\n\n  const cid = await ipfs.block.put(buf, {\n    mhtype: 'sha2-256',\n    format: 'dag-pb'\n  })\n\n  await ipfs.pin.add(cid)\n\n  return cid\n}\n\n/**\n * @returns {Options}\n */\nconst getDefaultOptions = () => ({\n  start: true,\n  EXPERIMENTAL: {},\n  preload: {\n    enabled: !isTest, // preload by default, unless in test env\n    addresses: [\n      '/dns4/node0.preload.ipfs.io/https',\n      '/dns4/node1.preload.ipfs.io/https',\n      '/dns4/node2.preload.ipfs.io/https',\n      '/dns4/node3.preload.ipfs.io/https'\n    ]\n  }\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}