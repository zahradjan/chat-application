{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar webcrypto = require('../webcrypto');\n\nvar randomBytes = require('../random-bytes');\n\nvar _require = require('uint8arrays/to-string'),\n    uint8ArrayToString = _require.toString;\n\nvar _require2 = require('uint8arrays/from-string'),\n    uint8ArrayFromString = _require2.fromString;\n\nexports.utils = require('./rsa-utils');\n\nexports.generateKey = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(bits) {\n    var pair, keys;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return webcrypto.get().subtle.generateKey({\n              name: 'RSASSA-PKCS1-v1_5',\n              modulusLength: bits,\n              publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n              hash: {\n                name: 'SHA-256'\n              }\n            }, true, ['sign', 'verify']);\n\n          case 2:\n            pair = _context.sent;\n            _context.next = 5;\n            return exportKey(pair);\n\n          case 5:\n            keys = _context.sent;\n            return _context.abrupt(\"return\", {\n              privateKey: keys[0],\n              publicKey: keys[1]\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}(); // Takes a jwk key\n\n\nexports.unmarshalPrivateKey = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(key) {\n    var privateKey, pair, keys;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return webcrypto.get().subtle.importKey('jwk', key, {\n              name: 'RSASSA-PKCS1-v1_5',\n              hash: {\n                name: 'SHA-256'\n              }\n            }, true, ['sign']);\n\n          case 2:\n            privateKey = _context2.sent;\n            _context2.t0 = privateKey;\n            _context2.next = 6;\n            return derivePublicFromPrivate(key);\n\n          case 6:\n            _context2.t1 = _context2.sent;\n            pair = [_context2.t0, _context2.t1];\n            _context2.next = 10;\n            return exportKey({\n              privateKey: pair[0],\n              publicKey: pair[1]\n            });\n\n          case 10:\n            keys = _context2.sent;\n            return _context2.abrupt(\"return\", {\n              privateKey: keys[0],\n              publicKey: keys[1]\n            });\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexports.getRandomValues = randomBytes;\n\nexports.hashAndSign = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(key, msg) {\n    var privateKey, sig;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return webcrypto.get().subtle.importKey('jwk', key, {\n              name: 'RSASSA-PKCS1-v1_5',\n              hash: {\n                name: 'SHA-256'\n              }\n            }, false, ['sign']);\n\n          case 2:\n            privateKey = _context3.sent;\n            _context3.next = 5;\n            return webcrypto.get().subtle.sign({\n              name: 'RSASSA-PKCS1-v1_5'\n            }, privateKey, Uint8Array.from(msg));\n\n          case 5:\n            sig = _context3.sent;\n            return _context3.abrupt(\"return\", new Uint8Array(sig, sig.byteOffset, sig.byteLength));\n\n          case 7:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function (_x3, _x4) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexports.hashAndVerify = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(key, sig, msg) {\n    var publicKey;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return webcrypto.get().subtle.importKey('jwk', key, {\n              name: 'RSASSA-PKCS1-v1_5',\n              hash: {\n                name: 'SHA-256'\n              }\n            }, false, ['verify']);\n\n          case 2:\n            publicKey = _context4.sent;\n            return _context4.abrupt(\"return\", webcrypto.get().subtle.verify({\n              name: 'RSASSA-PKCS1-v1_5'\n            }, publicKey, sig, msg));\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function (_x5, _x6, _x7) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nfunction exportKey(pair) {\n  return Promise.all([webcrypto.get().subtle.exportKey('jwk', pair.privateKey), webcrypto.get().subtle.exportKey('jwk', pair.publicKey)]);\n}\n\nfunction derivePublicFromPrivate(jwKey) {\n  return webcrypto.get().subtle.importKey('jwk', {\n    kty: jwKey.kty,\n    n: jwKey.n,\n    e: jwKey.e\n  }, {\n    name: 'RSASSA-PKCS1-v1_5',\n    hash: {\n      name: 'SHA-256'\n    }\n  }, true, ['verify']);\n}\n/*\n\nRSA encryption/decryption for the browser with webcrypto workarround\n\"bloody dark magic. webcrypto's why.\"\n\nExplanation:\n  - Convert JWK to nodeForge\n  - Convert msg Uint8Array to nodeForge buffer: ByteBuffer is a \"binary-string backed buffer\", so let's make our Uint8Array a binary string\n  - Convert resulting nodeForge buffer to Uint8Array: it returns a binary string, turn that into a Uint8Array\n\n*/\n\n\nvar _require3 = require('./jwk2pem'),\n    jwk2pub = _require3.jwk2pub,\n    jwk2priv = _require3.jwk2priv;\n\nfunction convertKey(key, pub, msg, handle) {\n  var fkey = pub ? jwk2pub(key) : jwk2priv(key);\n  var fmsg = uint8ArrayToString(Uint8Array.from(msg), 'ascii');\n  var fomsg = handle(fmsg, fkey);\n  return uint8ArrayFromString(fomsg, 'ascii');\n}\n\nexports.encrypt = function (key, msg) {\n  return convertKey(key, true, msg, function (msg, key) {\n    return key.encrypt(msg);\n  });\n};\n\nexports.decrypt = function (key, msg) {\n  return convertKey(key, false, msg, function (msg, key) {\n    return key.decrypt(msg);\n  });\n};","map":{"version":3,"names":["webcrypto","require","randomBytes","uint8ArrayToString","toString","uint8ArrayFromString","fromString","exports","utils","generateKey","bits","get","subtle","name","modulusLength","publicExponent","Uint8Array","hash","pair","exportKey","keys","privateKey","publicKey","unmarshalPrivateKey","key","importKey","derivePublicFromPrivate","getRandomValues","hashAndSign","msg","sign","from","sig","byteOffset","byteLength","hashAndVerify","verify","Promise","all","jwKey","kty","n","e","jwk2pub","jwk2priv","convertKey","pub","handle","fkey","fmsg","fomsg","encrypt","decrypt"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/peer-id/node_modules/libp2p-crypto/src/keys/rsa-browser.js"],"sourcesContent":["'use strict'\n\nconst webcrypto = require('../webcrypto')\nconst randomBytes = require('../random-bytes')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\n\nexports.utils = require('./rsa-utils')\n\nexports.generateKey = async function (bits) {\n  const pair = await webcrypto.get().subtle.generateKey(\n    {\n      name: 'RSASSA-PKCS1-v1_5',\n      modulusLength: bits,\n      publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n      hash: { name: 'SHA-256' }\n    },\n    true,\n    ['sign', 'verify']\n  )\n\n  const keys = await exportKey(pair)\n\n  return {\n    privateKey: keys[0],\n    publicKey: keys[1]\n  }\n}\n\n// Takes a jwk key\nexports.unmarshalPrivateKey = async function (key) {\n  const privateKey = await webcrypto.get().subtle.importKey(\n    'jwk',\n    key,\n    {\n      name: 'RSASSA-PKCS1-v1_5',\n      hash: { name: 'SHA-256' }\n    },\n    true,\n    ['sign']\n  )\n\n  const pair = [\n    privateKey,\n    await derivePublicFromPrivate(key)\n  ]\n\n  const keys = await exportKey({\n    privateKey: pair[0],\n    publicKey: pair[1]\n  })\n\n  return {\n    privateKey: keys[0],\n    publicKey: keys[1]\n  }\n}\n\nexports.getRandomValues = randomBytes\n\nexports.hashAndSign = async function (key, msg) {\n  const privateKey = await webcrypto.get().subtle.importKey(\n    'jwk',\n    key,\n    {\n      name: 'RSASSA-PKCS1-v1_5',\n      hash: { name: 'SHA-256' }\n    },\n    false,\n    ['sign']\n  )\n\n  const sig = await webcrypto.get().subtle.sign(\n    { name: 'RSASSA-PKCS1-v1_5' },\n    privateKey,\n    Uint8Array.from(msg)\n  )\n\n  return new Uint8Array(sig, sig.byteOffset, sig.byteLength)\n}\n\nexports.hashAndVerify = async function (key, sig, msg) {\n  const publicKey = await webcrypto.get().subtle.importKey(\n    'jwk',\n    key,\n    {\n      name: 'RSASSA-PKCS1-v1_5',\n      hash: { name: 'SHA-256' }\n    },\n    false,\n    ['verify']\n  )\n\n  return webcrypto.get().subtle.verify(\n    { name: 'RSASSA-PKCS1-v1_5' },\n    publicKey,\n    sig,\n    msg\n  )\n}\n\nfunction exportKey (pair) {\n  return Promise.all([\n    webcrypto.get().subtle.exportKey('jwk', pair.privateKey),\n    webcrypto.get().subtle.exportKey('jwk', pair.publicKey)\n  ])\n}\n\nfunction derivePublicFromPrivate (jwKey) {\n  return webcrypto.get().subtle.importKey(\n    'jwk',\n    {\n      kty: jwKey.kty,\n      n: jwKey.n,\n      e: jwKey.e\n    },\n    {\n      name: 'RSASSA-PKCS1-v1_5',\n      hash: { name: 'SHA-256' }\n    },\n    true,\n    ['verify']\n  )\n}\n\n/*\n\nRSA encryption/decryption for the browser with webcrypto workarround\n\"bloody dark magic. webcrypto's why.\"\n\nExplanation:\n  - Convert JWK to nodeForge\n  - Convert msg Uint8Array to nodeForge buffer: ByteBuffer is a \"binary-string backed buffer\", so let's make our Uint8Array a binary string\n  - Convert resulting nodeForge buffer to Uint8Array: it returns a binary string, turn that into a Uint8Array\n\n*/\n\nconst { jwk2pub, jwk2priv } = require('./jwk2pem')\n\nfunction convertKey (key, pub, msg, handle) {\n  const fkey = pub ? jwk2pub(key) : jwk2priv(key)\n  const fmsg = uint8ArrayToString(Uint8Array.from(msg), 'ascii')\n  const fomsg = handle(fmsg, fkey)\n  return uint8ArrayFromString(fomsg, 'ascii')\n}\n\nexports.encrypt = function (key, msg) {\n  return convertKey(key, true, msg, (msg, key) => key.encrypt(msg))\n}\n\nexports.decrypt = function (key, msg) {\n  return convertKey(key, false, msg, (msg, key) => key.decrypt(msg))\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}