{"ast":null,"code":"export var BITS = 128;\nexport var GROUPS = 8;\n/**\n * Represents IPv6 address scopes\n * @memberof Address6\n * @static\n */\n\nexport var SCOPES = {\n  0: 'Reserved',\n  1: 'Interface local',\n  2: 'Link local',\n  4: 'Admin local',\n  5: 'Site local',\n  8: 'Organization local',\n  14: 'Global',\n  15: 'Reserved'\n};\n/**\n * Represents IPv6 address types\n * @memberof Address6\n * @static\n */\n\nexport var TYPES = {\n  'ff01::1/128': 'Multicast (All nodes on this interface)',\n  'ff01::2/128': 'Multicast (All routers on this interface)',\n  'ff02::1/128': 'Multicast (All nodes on this link)',\n  'ff02::2/128': 'Multicast (All routers on this link)',\n  'ff05::2/128': 'Multicast (All routers in this site)',\n  'ff02::5/128': 'Multicast (OSPFv3 AllSPF routers)',\n  'ff02::6/128': 'Multicast (OSPFv3 AllDR routers)',\n  'ff02::9/128': 'Multicast (RIP routers)',\n  'ff02::a/128': 'Multicast (EIGRP routers)',\n  'ff02::d/128': 'Multicast (PIM routers)',\n  'ff02::16/128': 'Multicast (MLDv2 reports)',\n  'ff01::fb/128': 'Multicast (mDNSv6)',\n  'ff02::fb/128': 'Multicast (mDNSv6)',\n  'ff05::fb/128': 'Multicast (mDNSv6)',\n  'ff02::1:2/128': 'Multicast (All DHCP servers and relay agents on this link)',\n  'ff05::1:2/128': 'Multicast (All DHCP servers and relay agents in this site)',\n  'ff02::1:3/128': 'Multicast (All DHCP servers on this link)',\n  'ff05::1:3/128': 'Multicast (All DHCP servers in this site)',\n  '::/128': 'Unspecified',\n  '::1/128': 'Loopback',\n  'ff00::/8': 'Multicast',\n  'fe80::/10': 'Link-local unicast'\n};\n/**\n * A regular expression that matches bad characters in an IPv6 address\n * @memberof Address6\n * @static\n */\n\nexport var RE_BAD_CHARACTERS = /([^0-9a-f:/%])/gi;\n/**\n * A regular expression that matches an incorrect IPv6 address\n * @memberof Address6\n * @static\n */\n\nexport var RE_BAD_ADDRESS = /([0-9a-f]{5,}|:{3,}|[^:]:$|^:[^:]|\\/$)/gi;\n/**\n * A regular expression that matches an IPv6 subnet\n * @memberof Address6\n * @static\n */\n\nexport var RE_SUBNET_STRING = /\\/\\d{1,3}(?=%|$)/;\n/**\n * A regular expression that matches an IPv6 zone\n * @memberof Address6\n * @static\n */\n\nexport var RE_ZONE_STRING = /%.*$/;\nexport var RE_URL = new RegExp(/^\\[{0,1}([0-9a-f:]+)\\]{0,1}/);\nexport var RE_URL_WITH_PORT = new RegExp(/\\[([0-9a-f:]+)\\]:([0-9]{1,5})/);","map":{"version":3,"mappings":"AAAA,OAAO,IAAMA,IAAI,GAAG,GAAb;AACP,OAAO,IAAMC,MAAM,GAAG,CAAf;AAEP;;;;;;AAKA,OAAO,IAAMC,MAAM,GAA0C;EAC3D,GAAG,UADwD;EAE3D,GAAG,iBAFwD;EAG3D,GAAG,YAHwD;EAI3D,GAAG,aAJwD;EAK3D,GAAG,YALwD;EAM3D,GAAG,oBANwD;EAO3D,IAAI,QAPuD;EAQ3D,IAAI;AARuD,CAAtD;AAWP;;;;;;AAKA,OAAO,IAAMC,KAAK,GAA0C;EAC1D,eAAe,yCAD2C;EAE1D,eAAe,2CAF2C;EAG1D,eAAe,oCAH2C;EAI1D,eAAe,sCAJ2C;EAK1D,eAAe,sCAL2C;EAM1D,eAAe,mCAN2C;EAO1D,eAAe,kCAP2C;EAQ1D,eAAe,yBAR2C;EAS1D,eAAe,2BAT2C;EAU1D,eAAe,yBAV2C;EAW1D,gBAAgB,2BAX0C;EAY1D,gBAAgB,oBAZ0C;EAa1D,gBAAgB,oBAb0C;EAc1D,gBAAgB,oBAd0C;EAe1D,iBAAiB,4DAfyC;EAgB1D,iBAAiB,4DAhByC;EAiB1D,iBAAiB,2CAjByC;EAkB1D,iBAAiB,2CAlByC;EAmB1D,UAAU,aAnBgD;EAoB1D,WAAW,UApB+C;EAqB1D,YAAY,WArB8C;EAsB1D,aAAa;AAtB6C,CAArD;AAyBP;;;;;;AAKA,OAAO,IAAMC,iBAAiB,GAAG,kBAA1B;AAEP;;;;;;AAKA,OAAO,IAAMC,cAAc,GAAG,0CAAvB;AAEP;;;;;;AAKA,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AAEP;;;;;;AAKA,OAAO,IAAMC,cAAc,GAAG,MAAvB;AAEP,OAAO,IAAMC,MAAM,GAAG,IAAIC,MAAJ,CAAW,6BAAX,CAAf;AACP,OAAO,IAAMC,gBAAgB,GAAG,IAAID,MAAJ,CAAW,+BAAX,CAAzB","names":["BITS","GROUPS","SCOPES","TYPES","RE_BAD_CHARACTERS","RE_BAD_ADDRESS","RE_SUBNET_STRING","RE_ZONE_STRING","RE_URL","RegExp","RE_URL_WITH_PORT"],"sourceRoot":"","sources":["../../../../lib/v6/constants.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}