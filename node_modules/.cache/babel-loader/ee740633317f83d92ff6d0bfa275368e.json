{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar Clock = require('./lamport-clock');\n\nvar _require = require('./utils'),\n    isDefined = _require.isDefined,\n    io = _require.io;\n\nvar stringify = require('json-stringify-deterministic');\n\nvar IpfsNotDefinedError = function IpfsNotDefinedError() {\n  return new Error('Ipfs instance not defined');\n};\n\nvar IPLD_LINKS = ['next', 'refs'];\n\nvar getWriteFormatForVersion = function getWriteFormatForVersion(v) {\n  return v === 0 ? 'dag-pb' : 'dag-cbor';\n};\n\nvar getWriteFormat = function getWriteFormat(e) {\n  return Entry.isEntry(e) ? getWriteFormatForVersion(e.v) : getWriteFormatForVersion(e);\n};\n/*\n * @description\n * An ipfs-log entry\n */\n\n\nvar Entry = /*#__PURE__*/function () {\n  function Entry() {\n    _classCallCheck(this, Entry);\n  }\n\n  _createClass(Entry, null, [{\n    key: \"create\",\n    value:\n    /**\n     * Create an Entry\n     * @param {IPFS} ipfs An IPFS instance\n     * @param {Identity} identity The identity instance\n     * @param {string} logId The unique identifier for this log\n     * @param {*} data Data of the entry to be added. Can be any JSON.stringifyable data\n     * @param {Array<string|Entry>} [next=[]] Parent hashes or entries\n     * @param {LamportClock} [clock] The lamport clock\n     * @returns {Promise<Entry>}\n     * @example\n     * const entry = await Entry.create(ipfs, identity, 'hello')\n     * console.log(entry)\n     * // { hash: null, payload: \"hello\", next: [] }\n     */\n    function () {\n      var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(ipfs, identity, logId, data) {\n        var next,\n            clock,\n            refs,\n            pin,\n            toEntry,\n            nexts,\n            entry,\n            signature,\n            _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                next = _args.length > 4 && _args[4] !== undefined ? _args[4] : [];\n                clock = _args.length > 5 ? _args[5] : undefined;\n                refs = _args.length > 6 && _args[6] !== undefined ? _args[6] : [];\n                pin = _args.length > 7 ? _args[7] : undefined;\n\n                if (isDefined(ipfs)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                throw IpfsNotDefinedError();\n\n              case 6:\n                if (isDefined(identity)) {\n                  _context.next = 8;\n                  break;\n                }\n\n                throw new Error('Identity is required, cannot create entry');\n\n              case 8:\n                if (isDefined(logId)) {\n                  _context.next = 10;\n                  break;\n                }\n\n                throw new Error('Entry requires an id');\n\n              case 10:\n                if (isDefined(data)) {\n                  _context.next = 12;\n                  break;\n                }\n\n                throw new Error('Entry requires data');\n\n              case 12:\n                if (!(!isDefined(next) || !Array.isArray(next))) {\n                  _context.next = 14;\n                  break;\n                }\n\n                throw new Error(\"'next' argument is not an array\");\n\n              case 14:\n                // Clean the next objects and convert to hashes\n                toEntry = function toEntry(e) {\n                  return e.hash ? e.hash : e;\n                };\n\n                nexts = next.filter(isDefined).map(toEntry);\n                entry = {\n                  hash: null,\n                  // \"zd...Foo\", we'll set the hash after persisting the entry\n                  id: logId,\n                  // For determining a unique chain\n                  payload: data,\n                  // Can be any JSON.stringifyable data\n                  next: nexts,\n                  // Array of hashes\n                  refs: refs,\n                  v: 2,\n                  // To tag the version of this data structure\n                  clock: clock || new Clock(identity.publicKey)\n                };\n                _context.next = 19;\n                return identity.provider.sign(identity, Entry.toBuffer(entry));\n\n              case 19:\n                signature = _context.sent;\n                entry.key = identity.publicKey;\n                entry.identity = identity.toJSON();\n                entry.sig = signature;\n                _context.next = 25;\n                return Entry.toMultihash(ipfs, entry, pin);\n\n              case 25:\n                entry.hash = _context.sent;\n                return _context.abrupt(\"return\", entry);\n\n              case 27:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function create(_x, _x2, _x3, _x4) {\n        return _create.apply(this, arguments);\n      }\n\n      return create;\n    }()\n    /**\n     * Verifies an entry signature.\n     *\n     * @param {IdentityProvider} identityProvider The identity provider to use\n     * @param {Entry} entry The entry being verified\n     * @return {Promise} A promise that resolves to a boolean value indicating if the signature is valid\n     */\n\n  }, {\n    key: \"verify\",\n    value: function () {\n      var _verify = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(identityProvider, entry) {\n        var e, verifier;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (identityProvider) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                throw new Error('Identity-provider is required, cannot verify entry');\n\n              case 2:\n                if (Entry.isEntry(entry)) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                throw new Error('Invalid Log entry');\n\n              case 4:\n                if (entry.key) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Entry doesn't have a key\");\n\n              case 6:\n                if (entry.sig) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                throw new Error(\"Entry doesn't have a signature\");\n\n              case 8:\n                e = Entry.toEntry(entry, {\n                  presigned: true\n                });\n                verifier = entry.v < 1 ? 'v0' : 'v1';\n                return _context2.abrupt(\"return\", identityProvider.verify(entry.sig, entry.key, Entry.toBuffer(e), verifier));\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function verify(_x5, _x6) {\n        return _verify.apply(this, arguments);\n      }\n\n      return verify;\n    }()\n    /**\n     * Transforms an entry into a Buffer.\n     * @param {Entry} entry The entry\n     * @return {Buffer} The buffer\n     */\n\n  }, {\n    key: \"toBuffer\",\n    value: function toBuffer(entry) {\n      var stringifiedEntry = entry.v === 0 ? JSON.stringify(entry) : stringify(entry);\n      return Buffer.from(stringifiedEntry);\n    }\n    /**\n     * Get the multihash of an Entry.\n     * @param {IPFS} ipfs An IPFS instance\n     * @param {Entry} entry Entry to get a multihash for\n     * @returns {Promise<string>}\n     * @example\n     * const multihash = await Entry.toMultihash(ipfs, entry)\n     * console.log(multihash)\n     * // \"Qm...Foo\"\n     * @deprecated\n     */\n\n  }, {\n    key: \"toMultihash\",\n    value: function () {\n      var _toMultihash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(ipfs, entry) {\n        var pin,\n            e,\n            _args3 = arguments;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                pin = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : false;\n\n                if (ipfs) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                throw IpfsNotDefinedError();\n\n              case 3:\n                if (Entry.isEntry(entry)) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                throw new Error('Invalid object format, cannot generate entry hash');\n\n              case 5:\n                // // Ensure `entry` follows the correct format\n                e = Entry.toEntry(entry);\n                return _context3.abrupt(\"return\", io.write(ipfs, getWriteFormat(e.v), e, {\n                  links: IPLD_LINKS,\n                  pin: pin\n                }));\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function toMultihash(_x7, _x8) {\n        return _toMultihash.apply(this, arguments);\n      }\n\n      return toMultihash;\n    }()\n  }, {\n    key: \"toEntry\",\n    value: function toEntry(entry) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref$presigned = _ref.presigned,\n          presigned = _ref$presigned === void 0 ? false : _ref$presigned,\n          _ref$includeHash = _ref.includeHash,\n          includeHash = _ref$includeHash === void 0 ? false : _ref$includeHash;\n\n      var e = {\n        hash: includeHash ? entry.hash : null,\n        id: entry.id,\n        payload: entry.payload,\n        next: entry.next\n      };\n      var v = entry.v;\n\n      if (v > 1) {\n        e.refs = entry.refs; // added in v2\n      }\n\n      e.v = entry.v;\n      e.clock = new Clock(entry.clock.id, entry.clock.time);\n\n      if (presigned) {\n        return e; // don't include key/sig information\n      }\n\n      e.key = entry.key;\n\n      if (v > 0) {\n        e.identity = entry.identity; // added in v1\n      }\n\n      e.sig = entry.sig;\n      return e;\n    }\n    /**\n     * Create an Entry from a hash.\n     * @param {IPFS} ipfs An IPFS instance\n     * @param {string} hash The hash to create an Entry from\n     * @returns {Promise<Entry>}\n     * @example\n     * const entry = await Entry.fromMultihash(ipfs, \"zd...Foo\")\n     * console.log(entry)\n     * // { hash: \"Zd...Foo\", payload: \"hello\", next: [] }\n     */\n\n  }, {\n    key: \"fromMultihash\",\n    value: function () {\n      var _fromMultihash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(ipfs, hash) {\n        var e, entry;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (ipfs) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                throw IpfsNotDefinedError();\n\n              case 2:\n                if (hash) {\n                  _context4.next = 4;\n                  break;\n                }\n\n                throw new Error(\"Invalid hash: \".concat(hash));\n\n              case 4:\n                _context4.next = 6;\n                return io.read(ipfs, hash, {\n                  links: IPLD_LINKS\n                });\n\n              case 6:\n                e = _context4.sent;\n                entry = Entry.toEntry(e);\n                entry.hash = hash;\n                return _context4.abrupt(\"return\", entry);\n\n              case 10:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function fromMultihash(_x9, _x10) {\n        return _fromMultihash.apply(this, arguments);\n      }\n\n      return fromMultihash;\n    }()\n    /**\n     * Check if an object is an Entry.\n     * @param {Entry} obj\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isEntry\",\n    value: function isEntry(obj) {\n      return obj && obj.id !== undefined && obj.next !== undefined && obj.payload !== undefined && obj.v !== undefined && obj.hash !== undefined && obj.clock !== undefined && (obj.refs !== undefined || obj.v < 2); // 'refs' added in v2\n    }\n    /**\n     * Compares two entries.\n     * @param {Entry} a\n     * @param {Entry} b\n     * @returns {number} 1 if a is greater, -1 is b is greater\n     */\n\n  }, {\n    key: \"compare\",\n    value: function compare(a, b) {\n      var distance = Clock.compare(a.clock, b.clock);\n      if (distance === 0) return a.clock.id < b.clock.id ? -1 : 1;\n      return distance;\n    }\n    /**\n     * Check if an entry equals another entry.\n     * @param {Entry} a\n     * @param {Entry} b\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(a, b) {\n      return a.hash === b.hash;\n    }\n    /**\n     * Check if an entry is a parent to another entry.\n     * @param {Entry} entry1 Entry to check\n     * @param {Entry} entry2 The parent Entry\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isParent\",\n    value: function isParent(entry1, entry2) {\n      return entry2.next.indexOf(entry1.hash) > -1;\n    }\n    /**\n     * Find entry's children from an Array of entries.\n     * Returns entry's children as an Array up to the last know child.\n     * @param {Entry} entry Entry for which to find the parents\n     * @param {Array<Entry>} values Entries to search parents from\n     * @returns {Array<Entry>}\n     */\n\n  }, {\n    key: \"findChildren\",\n    value: function findChildren(entry, values) {\n      var stack = [];\n      var parent = values.find(function (e) {\n        return Entry.isParent(entry, e);\n      });\n      var prev = entry;\n\n      while (parent) {\n        stack.push(parent);\n        prev = parent;\n        parent = values.find(function (e) {\n          return Entry.isParent(prev, e);\n        });\n      }\n\n      stack = stack.sort(function (a, b) {\n        return a.clock.time > b.clock.time;\n      });\n      return stack;\n    }\n  }]);\n\n  return Entry;\n}();\n\nmodule.exports = Entry;\nmodule.exports.IPLD_LINKS = IPLD_LINKS;\nmodule.exports.getWriteFormat = getWriteFormat;","map":{"version":3,"names":["Clock","require","isDefined","io","stringify","IpfsNotDefinedError","Error","IPLD_LINKS","getWriteFormatForVersion","v","getWriteFormat","e","Entry","isEntry","ipfs","identity","logId","data","next","clock","refs","pin","Array","isArray","toEntry","hash","nexts","filter","map","entry","id","payload","publicKey","provider","sign","toBuffer","signature","key","toJSON","sig","toMultihash","identityProvider","presigned","verifier","verify","stringifiedEntry","JSON","Buffer","from","write","links","includeHash","time","read","obj","undefined","a","b","distance","compare","entry1","entry2","indexOf","values","stack","parent","find","isParent","prev","push","sort","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-log/src/entry.js"],"sourcesContent":["'use strict'\n\nconst Clock = require('./lamport-clock')\nconst { isDefined, io } = require('./utils')\nconst stringify = require('json-stringify-deterministic')\nconst IpfsNotDefinedError = () => new Error('Ipfs instance not defined')\nconst IPLD_LINKS = ['next', 'refs']\nconst getWriteFormatForVersion = v => v === 0 ? 'dag-pb' : 'dag-cbor'\nconst getWriteFormat = e => Entry.isEntry(e) ? getWriteFormatForVersion(e.v) : getWriteFormatForVersion(e)\n\n/*\n * @description\n * An ipfs-log entry\n */\nclass Entry {\n  /**\n   * Create an Entry\n   * @param {IPFS} ipfs An IPFS instance\n   * @param {Identity} identity The identity instance\n   * @param {string} logId The unique identifier for this log\n   * @param {*} data Data of the entry to be added. Can be any JSON.stringifyable data\n   * @param {Array<string|Entry>} [next=[]] Parent hashes or entries\n   * @param {LamportClock} [clock] The lamport clock\n   * @returns {Promise<Entry>}\n   * @example\n   * const entry = await Entry.create(ipfs, identity, 'hello')\n   * console.log(entry)\n   * // { hash: null, payload: \"hello\", next: [] }\n   */\n  static async create (ipfs, identity, logId, data, next = [], clock, refs = [], pin) {\n    if (!isDefined(ipfs)) throw IpfsNotDefinedError()\n    if (!isDefined(identity)) throw new Error('Identity is required, cannot create entry')\n    if (!isDefined(logId)) throw new Error('Entry requires an id')\n    if (!isDefined(data)) throw new Error('Entry requires data')\n    if (!isDefined(next) || !Array.isArray(next)) throw new Error(\"'next' argument is not an array\")\n\n    // Clean the next objects and convert to hashes\n    const toEntry = (e) => e.hash ? e.hash : e\n    const nexts = next.filter(isDefined).map(toEntry)\n\n    const entry = {\n      hash: null, // \"zd...Foo\", we'll set the hash after persisting the entry\n      id: logId, // For determining a unique chain\n      payload: data, // Can be any JSON.stringifyable data\n      next: nexts, // Array of hashes\n      refs: refs,\n      v: 2, // To tag the version of this data structure\n      clock: clock || new Clock(identity.publicKey)\n    }\n\n    const signature = await identity.provider.sign(identity, Entry.toBuffer(entry))\n\n    entry.key = identity.publicKey\n    entry.identity = identity.toJSON()\n    entry.sig = signature\n    entry.hash = await Entry.toMultihash(ipfs, entry, pin)\n\n    return entry\n  }\n\n  /**\n   * Verifies an entry signature.\n   *\n   * @param {IdentityProvider} identityProvider The identity provider to use\n   * @param {Entry} entry The entry being verified\n   * @return {Promise} A promise that resolves to a boolean value indicating if the signature is valid\n   */\n  static async verify (identityProvider, entry) {\n    if (!identityProvider) throw new Error('Identity-provider is required, cannot verify entry')\n    if (!Entry.isEntry(entry)) throw new Error('Invalid Log entry')\n    if (!entry.key) throw new Error(\"Entry doesn't have a key\")\n    if (!entry.sig) throw new Error(\"Entry doesn't have a signature\")\n\n    const e = Entry.toEntry(entry, { presigned: true })\n    const verifier = entry.v < 1 ? 'v0' : 'v1'\n    return identityProvider.verify(entry.sig, entry.key, Entry.toBuffer(e), verifier)\n  }\n\n  /**\n   * Transforms an entry into a Buffer.\n   * @param {Entry} entry The entry\n   * @return {Buffer} The buffer\n   */\n  static toBuffer (entry) {\n    const stringifiedEntry = entry.v === 0 ? JSON.stringify(entry) : stringify(entry)\n    return Buffer.from(stringifiedEntry)\n  }\n\n  /**\n   * Get the multihash of an Entry.\n   * @param {IPFS} ipfs An IPFS instance\n   * @param {Entry} entry Entry to get a multihash for\n   * @returns {Promise<string>}\n   * @example\n   * const multihash = await Entry.toMultihash(ipfs, entry)\n   * console.log(multihash)\n   * // \"Qm...Foo\"\n   * @deprecated\n   */\n  static async toMultihash (ipfs, entry, pin = false) {\n    if (!ipfs) throw IpfsNotDefinedError()\n    if (!Entry.isEntry(entry)) throw new Error('Invalid object format, cannot generate entry hash')\n\n    // // Ensure `entry` follows the correct format\n    const e = Entry.toEntry(entry)\n    return io.write(ipfs, getWriteFormat(e.v), e, { links: IPLD_LINKS, pin })\n  }\n\n  static toEntry (entry, { presigned = false, includeHash = false } = {}) {\n    const e = {\n      hash: includeHash ? entry.hash : null,\n      id: entry.id,\n      payload: entry.payload,\n      next: entry.next\n    }\n\n    const v = entry.v\n    if (v > 1) {\n      e.refs = entry.refs // added in v2\n    }\n    e.v = entry.v\n    e.clock = new Clock(entry.clock.id, entry.clock.time)\n\n    if (presigned) {\n      return e // don't include key/sig information\n    }\n\n    e.key = entry.key\n    if (v > 0) {\n      e.identity = entry.identity // added in v1\n    }\n    e.sig = entry.sig\n    return e\n  }\n\n  /**\n   * Create an Entry from a hash.\n   * @param {IPFS} ipfs An IPFS instance\n   * @param {string} hash The hash to create an Entry from\n   * @returns {Promise<Entry>}\n   * @example\n   * const entry = await Entry.fromMultihash(ipfs, \"zd...Foo\")\n   * console.log(entry)\n   * // { hash: \"Zd...Foo\", payload: \"hello\", next: [] }\n   */\n  static async fromMultihash (ipfs, hash) {\n    if (!ipfs) throw IpfsNotDefinedError()\n    if (!hash) throw new Error(`Invalid hash: ${hash}`)\n    const e = await io.read(ipfs, hash, { links: IPLD_LINKS })\n\n    const entry = Entry.toEntry(e)\n    entry.hash = hash\n\n    return entry\n  }\n\n  /**\n   * Check if an object is an Entry.\n   * @param {Entry} obj\n   * @returns {boolean}\n   */\n  static isEntry (obj) {\n    return obj && obj.id !== undefined &&\n      obj.next !== undefined &&\n      obj.payload !== undefined &&\n      obj.v !== undefined &&\n      obj.hash !== undefined &&\n      obj.clock !== undefined &&\n      (obj.refs !== undefined || obj.v < 2) // 'refs' added in v2\n  }\n\n  /**\n   * Compares two entries.\n   * @param {Entry} a\n   * @param {Entry} b\n   * @returns {number} 1 if a is greater, -1 is b is greater\n   */\n  static compare (a, b) {\n    const distance = Clock.compare(a.clock, b.clock)\n    if (distance === 0) return a.clock.id < b.clock.id ? -1 : 1\n    return distance\n  }\n\n  /**\n   * Check if an entry equals another entry.\n   * @param {Entry} a\n   * @param {Entry} b\n   * @returns {boolean}\n   */\n  static isEqual (a, b) {\n    return a.hash === b.hash\n  }\n\n  /**\n   * Check if an entry is a parent to another entry.\n   * @param {Entry} entry1 Entry to check\n   * @param {Entry} entry2 The parent Entry\n   * @returns {boolean}\n   */\n  static isParent (entry1, entry2) {\n    return entry2.next.indexOf(entry1.hash) > -1\n  }\n\n  /**\n   * Find entry's children from an Array of entries.\n   * Returns entry's children as an Array up to the last know child.\n   * @param {Entry} entry Entry for which to find the parents\n   * @param {Array<Entry>} values Entries to search parents from\n   * @returns {Array<Entry>}\n   */\n  static findChildren (entry, values) {\n    let stack = []\n    let parent = values.find((e) => Entry.isParent(entry, e))\n    let prev = entry\n    while (parent) {\n      stack.push(parent)\n      prev = parent\n      parent = values.find((e) => Entry.isParent(prev, e))\n    }\n    stack = stack.sort((a, b) => a.clock.time > b.clock.time)\n    return stack\n  }\n}\n\nmodule.exports = Entry\nmodule.exports.IPLD_LINKS = IPLD_LINKS\nmodule.exports.getWriteFormat = getWriteFormat\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}