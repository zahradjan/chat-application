{"ast":null,"code":"'use strict';\n/* eslint-env browser */\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar _require2 = require('multiaddr'),\n    multiaddr = _require2.multiaddr;\n\nvar globSource = require('ipfs-utils/src/files/glob-source');\n\nvar urlSource = require('ipfs-utils/src/files/url-source');\n\nvar Multicodecs = require('ipfs-core-utils/src/multicodecs');\n\nvar Multihashes = require('ipfs-core-utils/src/multihashes');\n\nvar Multibases = require('ipfs-core-utils/src/multibases');\n\nvar dagPb = require('@ipld/dag-pb');\n\nvar dagCbor = require('@ipld/dag-cbor');\n\nvar _require3 = require('multiformats/hashes/identity'),\n    identity = _require3.identity;\n\nvar _require4 = require('multiformats/basics'),\n    bases = _require4.bases,\n    hashes = _require4.hashes,\n    codecs = _require4.codecs;\n/**\n * @typedef {import('./types').EndpointConfig} EndpointConfig\n * @typedef {import('./types').Options} Options\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n * @typedef {import('./types').IPFSHTTPClient} IPFSHTTPClient\n */\n\n/**\n * @param {Options} options\n */\n\n\nfunction create() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  /**\n   * @type {BlockCodec}\n   */\n  var id = {\n    name: identity.name,\n    code: identity.code,\n    encode: function encode(id) {\n      return id;\n    },\n    decode: function decode(id) {\n      return id;\n    }\n  };\n  /** @type {MultibaseCodec[]} */\n\n  var multibaseCodecs = Object.values(bases);\n  (options.ipld && options.ipld.bases ? options.ipld.bases : []).forEach(function (base) {\n    return multibaseCodecs.push(base);\n  });\n  var multibases = new Multibases({\n    bases: multibaseCodecs,\n    loadBase: options.ipld && options.ipld.loadBase\n  });\n  /** @type {BlockCodec[]} */\n\n  var blockCodecs = Object.values(codecs);\n  [dagPb, dagCbor, id].concat(options.ipld && options.ipld.codecs || []).forEach(function (codec) {\n    return blockCodecs.push(codec);\n  });\n  var multicodecs = new Multicodecs({\n    codecs: blockCodecs,\n    loadCodec: options.ipld && options.ipld.loadCodec\n  });\n  /** @type {MultihashHasher[]} */\n\n  var multihashHashers = Object.values(hashes);\n  (options.ipld && options.ipld.hashers ? options.ipld.hashers : []).forEach(function (hasher) {\n    return multihashHashers.push(hasher);\n  });\n  var multihashes = new Multihashes({\n    hashers: multihashHashers,\n    loadHasher: options.ipld && options.ipld.loadHasher\n  });\n  /** @type {IPFSHTTPClient} */\n\n  var client = {\n    add: require('./add')(options),\n    addAll: require('./add-all')(options),\n    bitswap: require('./bitswap')(options),\n    block: require('./block')(options),\n    bootstrap: require('./bootstrap')(options),\n    cat: require('./cat')(options),\n    commands: require('./commands')(options),\n    config: require('./config')(options),\n    dag: require('./dag')(multicodecs, options),\n    dht: require('./dht')(options),\n    diag: require('./diag')(options),\n    dns: require('./dns')(options),\n    files: require('./files')(options),\n    get: require('./get')(options),\n    getEndpointConfig: require('./get-endpoint-config')(options),\n    id: require('./id')(options),\n    isOnline: require('./is-online')(options),\n    key: require('./key')(options),\n    log: require('./log')(options),\n    ls: require('./ls')(options),\n    mount: require('./mount')(options),\n    name: require('./name')(options),\n    object: require('./object')(multicodecs, options),\n    pin: require('./pin')(options),\n    ping: require('./ping')(options),\n    pubsub: require('./pubsub')(options),\n    refs: require('./refs')(options),\n    repo: require('./repo')(options),\n    resolve: require('./resolve')(options),\n    start: require('./start')(options),\n    stats: require('./stats')(options),\n    stop: require('./stop')(options),\n    swarm: require('./swarm')(options),\n    version: require('./version')(options),\n    bases: multibases,\n    codecs: multicodecs,\n    hashers: multihashes\n  };\n  return client;\n}\n\nmodule.exports = {\n  create: create,\n  CID: CID,\n  multiaddr: multiaddr,\n  globSource: globSource,\n  urlSource: urlSource\n};","map":{"version":3,"names":["require","CID","multiaddr","globSource","urlSource","Multicodecs","Multihashes","Multibases","dagPb","dagCbor","identity","bases","hashes","codecs","create","options","id","name","code","encode","decode","multibaseCodecs","Object","values","ipld","forEach","base","push","multibases","loadBase","blockCodecs","concat","codec","multicodecs","loadCodec","multihashHashers","hashers","hasher","multihashes","loadHasher","client","add","addAll","bitswap","block","bootstrap","cat","commands","config","dag","dht","diag","dns","files","get","getEndpointConfig","isOnline","key","log","ls","mount","object","pin","ping","pubsub","refs","repo","resolve","start","stats","stop","swarm","version","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-http-client/src/index.js"],"sourcesContent":["'use strict'\n/* eslint-env browser */\n\nconst { CID } = require('multiformats/cid')\nconst { multiaddr } = require('multiaddr')\nconst globSource = require('ipfs-utils/src/files/glob-source')\nconst urlSource = require('ipfs-utils/src/files/url-source')\nconst Multicodecs = require('ipfs-core-utils/src/multicodecs')\nconst Multihashes = require('ipfs-core-utils/src/multihashes')\nconst Multibases = require('ipfs-core-utils/src/multibases')\nconst dagPb = require('@ipld/dag-pb')\nconst dagCbor = require('@ipld/dag-cbor')\nconst { identity } = require('multiformats/hashes/identity')\nconst { bases, hashes, codecs } = require('multiformats/basics')\n\n/**\n * @typedef {import('./types').EndpointConfig} EndpointConfig\n * @typedef {import('./types').Options} Options\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n * @typedef {import('./types').IPFSHTTPClient} IPFSHTTPClient\n */\n\n/**\n * @param {Options} options\n */\nfunction create (options = {}) {\n  /**\n   * @type {BlockCodec}\n   */\n  const id = {\n    name: identity.name,\n    code: identity.code,\n    encode: (id) => id,\n    decode: (id) => id\n  }\n\n  /** @type {MultibaseCodec[]} */\n  const multibaseCodecs = Object.values(bases);\n\n  (options.ipld && options.ipld.bases ? options.ipld.bases : []).forEach(base => multibaseCodecs.push(base))\n\n  const multibases = new Multibases({\n    bases: multibaseCodecs,\n    loadBase: options.ipld && options.ipld.loadBase\n  })\n\n  /** @type {BlockCodec[]} */\n  const blockCodecs = Object.values(codecs);\n\n  [dagPb, dagCbor, id].concat((options.ipld && options.ipld.codecs) || []).forEach(codec => blockCodecs.push(codec))\n\n  const multicodecs = new Multicodecs({\n    codecs: blockCodecs,\n    loadCodec: options.ipld && options.ipld.loadCodec\n  })\n\n  /** @type {MultihashHasher[]} */\n  const multihashHashers = Object.values(hashes);\n\n  (options.ipld && options.ipld.hashers ? options.ipld.hashers : []).forEach(hasher => multihashHashers.push(hasher))\n\n  const multihashes = new Multihashes({\n    hashers: multihashHashers,\n    loadHasher: options.ipld && options.ipld.loadHasher\n  })\n\n  /** @type {IPFSHTTPClient} */\n  const client = {\n    add: require('./add')(options),\n    addAll: require('./add-all')(options),\n    bitswap: require('./bitswap')(options),\n    block: require('./block')(options),\n    bootstrap: require('./bootstrap')(options),\n    cat: require('./cat')(options),\n    commands: require('./commands')(options),\n    config: require('./config')(options),\n    dag: require('./dag')(multicodecs, options),\n    dht: require('./dht')(options),\n    diag: require('./diag')(options),\n    dns: require('./dns')(options),\n    files: require('./files')(options),\n    get: require('./get')(options),\n    getEndpointConfig: require('./get-endpoint-config')(options),\n    id: require('./id')(options),\n    isOnline: require('./is-online')(options),\n    key: require('./key')(options),\n    log: require('./log')(options),\n    ls: require('./ls')(options),\n    mount: require('./mount')(options),\n    name: require('./name')(options),\n    object: require('./object')(multicodecs, options),\n    pin: require('./pin')(options),\n    ping: require('./ping')(options),\n    pubsub: require('./pubsub')(options),\n    refs: require('./refs')(options),\n    repo: require('./repo')(options),\n    resolve: require('./resolve')(options),\n    start: require('./start')(options),\n    stats: require('./stats')(options),\n    stop: require('./stop')(options),\n    swarm: require('./swarm')(options),\n    version: require('./version')(options),\n    bases: multibases,\n    codecs: multicodecs,\n    hashers: multihashes\n  }\n\n  return client\n}\n\nmodule.exports = {\n  create,\n  CID,\n  multiaddr,\n  globSource,\n  urlSource\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}