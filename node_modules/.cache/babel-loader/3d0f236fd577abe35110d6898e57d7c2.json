{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _inherits = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar _wrapNativeSuper = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/wrapNativeSuper.js\").default;\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _asyncIterator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar debug = require('debug');\n\nvar _require = require('multiformats/hashes/sha2'),\n    sha256 = _require.sha256;\n\nvar _require2 = require('multiformats/bases/base58'),\n    base58btc = _require2.base58btc;\n\nvar _require3 = require('interface-datastore'),\n    Key = _require3.Key;\n\nvar _require4 = require('uint8arrays/xor'),\n    uint8ArrayXor = _require4.xor;\n\nvar _require5 = require('uint8arrays/compare'),\n    uint8ArrayCompare = _require5.compare;\n\nvar pMap = require('p-map');\n\nvar _require6 = require('libp2p-record'),\n    Record = _require6.Record;\n\nvar PeerId = require('peer-id');\n\nvar errcode = require('err-code');\n\nvar _require7 = require('uint8arrays/from-string'),\n    uint8ArrayFromString = _require7.fromString;\n\nvar _require8 = require('uint8arrays/to-string'),\n    uint8ArrayToString = _require8.toString;\n\nvar _require9 = require('uint8arrays/concat'),\n    uint8ArrayConcat = _require9.concat;\n\nvar pTimeout = require('p-timeout');\n/**\n * Creates a DHT ID by hashing a given Uint8Array.\n *\n * @param {Uint8Array} buf\n * @returns {Promise<Uint8Array>}\n */\n\n\nexports.convertBuffer = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(buf) {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return sha256.digest(buf);\n\n          case 2:\n            return _context.abrupt(\"return\", _context.sent.digest);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\n * Creates a DHT ID by hashing a Peer ID\n *\n * @param {PeerId} peer\n * @returns {Promise<Uint8Array>}\n */\n\n\nexports.convertPeerId = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(peer) {\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return sha256.digest(peer.id);\n\n          case 2:\n            return _context2.abrupt(\"return\", _context2.sent.digest);\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n/**\n * Convert a Uint8Array to their SHA2-256 hash.\n *\n * @param {Uint8Array} buf\n * @returns {Key}\n */\n\n\nexports.bufferToKey = function (buf) {\n  return new Key('/' + exports.encodeBase32(buf), false);\n};\n/**\n * Generate the key for a public key.\n *\n * @param {PeerId} peer\n * @returns {Uint8Array}\n */\n\n\nexports.keyForPublicKey = function (peer) {\n  return uint8ArrayConcat([uint8ArrayFromString('/pk/'), peer.id]);\n};\n/**\n * @param {Uint8Array} key\n */\n\n\nexports.isPublicKeyKey = function (key) {\n  return uint8ArrayToString(key.slice(0, 4)) === '/pk/';\n};\n/**\n * @param {Uint8Array} key\n */\n\n\nexports.fromPublicKeyKey = function (key) {\n  return new PeerId(key.slice(4));\n};\n/**\n * Get the current time as timestamp.\n *\n * @returns {number}\n */\n\n\nexports.now = function () {\n  return Date.now();\n};\n/**\n * Encode a given Uint8Array into a base32 string.\n *\n * @param {Uint8Array} buf\n * @returns {string}\n */\n\n\nexports.encodeBase32 = function (buf) {\n  return uint8ArrayToString(buf, 'base32');\n};\n/**\n * Decode a given base32 string into a Uint8Array.\n *\n * @param {string} raw\n * @returns {Uint8Array}\n */\n\n\nexports.decodeBase32 = function (raw) {\n  return uint8ArrayFromString(raw, 'base32');\n};\n/**\n * Sort peers by distance to the given `target`.\n *\n * @param {Array<PeerId>} peers\n * @param {Uint8Array} target\n */\n\n\nexports.sortClosestPeers = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(peers, target) {\n    var distances;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return pMap(peers, /*#__PURE__*/function () {\n              var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(peer) {\n                var id;\n                return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                  while (1) {\n                    switch (_context3.prev = _context3.next) {\n                      case 0:\n                        _context3.next = 2;\n                        return exports.convertPeerId(peer);\n\n                      case 2:\n                        id = _context3.sent;\n                        return _context3.abrupt(\"return\", {\n                          peer: peer,\n                          distance: uint8ArrayXor(id, target)\n                        });\n\n                      case 4:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }\n                }, _callee3);\n              }));\n\n              return function (_x5) {\n                return _ref4.apply(this, arguments);\n              };\n            }());\n\n          case 2:\n            distances = _context4.sent;\n            return _context4.abrupt(\"return\", distances.sort(exports.xorCompare).map(function (d) {\n              return d.peer;\n            }));\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function (_x3, _x4) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n/**\n * Compare function to sort an array of elements which have a distance property which is the xor distance to a given element.\n *\n * @param {{ distance: Uint8Array }} a\n * @param {{ distance: Uint8Array }} b\n */\n\n\nexports.xorCompare = function (a, b) {\n  return uint8ArrayCompare(a.distance, b.distance);\n};\n/**\n * Computes how many results to collect on each disjoint path, rounding up.\n * This ensures that we look for at least one result per path.\n *\n * @param {number} resultsWanted\n * @param {number} numPaths - total number of paths\n */\n\n\nexports.pathSize = function (resultsWanted, numPaths) {\n  return Math.ceil(resultsWanted / numPaths);\n};\n/**\n * Create a new put record, encodes and signs it if enabled.\n *\n * @param {Uint8Array} key\n * @param {Uint8Array} value\n * @returns {Uint8Array}\n */\n\n\nexports.createPutRecord = function (key, value) {\n  var timeReceived = new Date();\n  var rec = new Record(key, value, timeReceived);\n  return rec.serialize();\n};\n/**\n * Creates a logger for the given subsystem\n *\n * @param {PeerId} [id]\n * @param {string} [subsystem]\n */\n\n\nexports.logger = function (id, subsystem) {\n  var name = ['libp2p', 'dht'];\n\n  if (subsystem) {\n    name.push(subsystem);\n  }\n\n  if (id) {\n    name.push(\"\".concat(id.toB58String().slice(0, 8)));\n  } // Add a formatter for converting to a base58 string\n\n\n  debug.formatters.b = function (v) {\n    return base58btc.baseEncode(v);\n  };\n\n  var logger = Object.assign(debug(name.join(':')), {\n    error: debug(name.concat(['error']).join(':'))\n  });\n  return logger;\n};\n\nexports.TimeoutError = /*#__PURE__*/function (_Error) {\n  _inherits(TimeoutError, _Error);\n\n  var _super = _createSuper(TimeoutError);\n\n  function TimeoutError() {\n    _classCallCheck(this, TimeoutError);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TimeoutError, [{\n    key: \"code\",\n    get: function get() {\n      return 'ETIMEDOUT';\n    }\n  }]);\n\n  return TimeoutError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\n * Creates an async function that calls the given `asyncFn` and Errors\n * if it does not resolve within `time` ms\n *\n * @template T\n * @param {(...args: any[]) => Promise<T>} asyncFn\n * @param {number} [time]\n */\n\n\nexports.withTimeout = function (asyncFn, time) {\n  /**\n   * @param  {...any} args\n   * @returns {Promise<T>}\n   */\n  function timeoutFn() {\n    return _timeoutFn.apply(this, arguments);\n  }\n\n  function _timeoutFn() {\n    _timeoutFn = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n      var res,\n          _args5 = arguments;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              if (time) {\n                _context5.next = 2;\n                break;\n              }\n\n              return _context5.abrupt(\"return\", asyncFn.apply(void 0, _args5));\n\n            case 2:\n              _context5.prev = 2;\n              _context5.next = 5;\n              return pTimeout(asyncFn.apply(void 0, _args5), time);\n\n            case 5:\n              res = _context5.sent;\n              _context5.next = 13;\n              break;\n\n            case 8:\n              _context5.prev = 8;\n              _context5.t0 = _context5[\"catch\"](2);\n\n              if (!(_context5.t0 instanceof pTimeout.TimeoutError)) {\n                _context5.next = 12;\n                break;\n              }\n\n              throw errcode(_context5.t0, 'ETIMEDOUT');\n\n            case 12:\n              throw _context5.t0;\n\n            case 13:\n              return _context5.abrupt(\"return\", res);\n\n            case 14:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, null, [[2, 8]]);\n    }));\n    return _timeoutFn.apply(this, arguments);\n  }\n\n  return timeoutFn;\n};\n/**\n * Iterates the given `asyncIterator` and runs each item through the given `asyncFn` in parallel.\n * Returns a promise that resolves when all items of the `asyncIterator` have been passed\n * through `asyncFn`.\n *\n * @template T\n * @template O\n *\n * @param {AsyncIterable<T>} asyncIterator\n * @param {(arg0: T) => Promise<O>} asyncFn\n */\n\n\nexports.mapParallel = /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(asyncIterator, asyncFn) {\n    var tasks, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, item;\n\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            tasks = [];\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context6.prev = 3;\n            _iterator = _asyncIterator(asyncIterator);\n\n          case 5:\n            _context6.next = 7;\n            return _iterator.next();\n\n          case 7:\n            if (!(_iteratorAbruptCompletion = !(_step = _context6.sent).done)) {\n              _context6.next = 13;\n              break;\n            }\n\n            item = _step.value;\n            tasks.push(asyncFn(item));\n\n          case 10:\n            _iteratorAbruptCompletion = false;\n            _context6.next = 5;\n            break;\n\n          case 13:\n            _context6.next = 19;\n            break;\n\n          case 15:\n            _context6.prev = 15;\n            _context6.t0 = _context6[\"catch\"](3);\n            _didIteratorError = true;\n            _iteratorError = _context6.t0;\n\n          case 19:\n            _context6.prev = 19;\n            _context6.prev = 20;\n\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context6.next = 24;\n              break;\n            }\n\n            _context6.next = 24;\n            return _iterator.return();\n\n          case 24:\n            _context6.prev = 24;\n\n            if (!_didIteratorError) {\n              _context6.next = 27;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 27:\n            return _context6.finish(24);\n\n          case 28:\n            return _context6.finish(19);\n\n          case 29:\n            return _context6.abrupt(\"return\", Promise.all(tasks));\n\n          case 30:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6, null, [[3, 15, 19, 29], [20,, 24, 28]]);\n  }));\n\n  return function (_x6, _x7) {\n    return _ref5.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["debug","require","sha256","base58btc","Key","uint8ArrayXor","xor","uint8ArrayCompare","compare","pMap","Record","PeerId","errcode","uint8ArrayFromString","fromString","uint8ArrayToString","toString","uint8ArrayConcat","concat","pTimeout","exports","convertBuffer","buf","digest","convertPeerId","peer","id","bufferToKey","encodeBase32","keyForPublicKey","isPublicKeyKey","key","slice","fromPublicKeyKey","now","Date","decodeBase32","raw","sortClosestPeers","peers","target","distance","distances","sort","xorCompare","map","d","a","b","pathSize","resultsWanted","numPaths","Math","ceil","createPutRecord","value","timeReceived","rec","serialize","logger","subsystem","name","push","toB58String","formatters","v","baseEncode","Object","assign","join","error","TimeoutError","Error","withTimeout","asyncFn","time","timeoutFn","res","mapParallel","asyncIterator","tasks","item","Promise","all"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-kad-dht/src/utils.js"],"sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst { sha256 } = require('multiformats/hashes/sha2')\nconst { base58btc } = require('multiformats/bases/base58')\nconst { Key } = require('interface-datastore')\nconst { xor: uint8ArrayXor } = require('uint8arrays/xor')\nconst { compare: uint8ArrayCompare } = require('uint8arrays/compare')\nconst pMap = require('p-map')\nconst { Record } = require('libp2p-record')\nconst PeerId = require('peer-id')\nconst errcode = require('err-code')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\nconst { concat: uint8ArrayConcat } = require('uint8arrays/concat')\nconst pTimeout = require('p-timeout')\n\n/**\n * Creates a DHT ID by hashing a given Uint8Array.\n *\n * @param {Uint8Array} buf\n * @returns {Promise<Uint8Array>}\n */\nexports.convertBuffer = async (buf) => {\n  return (await sha256.digest(buf)).digest\n}\n\n/**\n * Creates a DHT ID by hashing a Peer ID\n *\n * @param {PeerId} peer\n * @returns {Promise<Uint8Array>}\n */\nexports.convertPeerId = async (peer) => {\n  return (await sha256.digest(peer.id)).digest\n}\n\n/**\n * Convert a Uint8Array to their SHA2-256 hash.\n *\n * @param {Uint8Array} buf\n * @returns {Key}\n */\nexports.bufferToKey = (buf) => {\n  return new Key('/' + exports.encodeBase32(buf), false)\n}\n\n/**\n * Generate the key for a public key.\n *\n * @param {PeerId} peer\n * @returns {Uint8Array}\n */\nexports.keyForPublicKey = (peer) => {\n  return uint8ArrayConcat([\n    uint8ArrayFromString('/pk/'),\n    peer.id\n  ])\n}\n\n/**\n * @param {Uint8Array} key\n */\nexports.isPublicKeyKey = (key) => {\n  return uint8ArrayToString(key.slice(0, 4)) === '/pk/'\n}\n\n/**\n * @param {Uint8Array} key\n */\nexports.fromPublicKeyKey = (key) => {\n  return new PeerId(key.slice(4))\n}\n\n/**\n * Get the current time as timestamp.\n *\n * @returns {number}\n */\nexports.now = () => {\n  return Date.now()\n}\n\n/**\n * Encode a given Uint8Array into a base32 string.\n *\n * @param {Uint8Array} buf\n * @returns {string}\n */\nexports.encodeBase32 = (buf) => {\n  return uint8ArrayToString(buf, 'base32')\n}\n\n/**\n * Decode a given base32 string into a Uint8Array.\n *\n * @param {string} raw\n * @returns {Uint8Array}\n */\nexports.decodeBase32 = (raw) => {\n  return uint8ArrayFromString(raw, 'base32')\n}\n\n/**\n * Sort peers by distance to the given `target`.\n *\n * @param {Array<PeerId>} peers\n * @param {Uint8Array} target\n */\nexports.sortClosestPeers = async (peers, target) => {\n  const distances = await pMap(peers, async (peer) => {\n    const id = await exports.convertPeerId(peer)\n\n    return {\n      peer: peer,\n      distance: uint8ArrayXor(id, target)\n    }\n  })\n\n  return distances.sort(exports.xorCompare).map((d) => d.peer)\n}\n\n/**\n * Compare function to sort an array of elements which have a distance property which is the xor distance to a given element.\n *\n * @param {{ distance: Uint8Array }} a\n * @param {{ distance: Uint8Array }} b\n */\nexports.xorCompare = (a, b) => {\n  return uint8ArrayCompare(a.distance, b.distance)\n}\n\n/**\n * Computes how many results to collect on each disjoint path, rounding up.\n * This ensures that we look for at least one result per path.\n *\n * @param {number} resultsWanted\n * @param {number} numPaths - total number of paths\n */\nexports.pathSize = (resultsWanted, numPaths) => {\n  return Math.ceil(resultsWanted / numPaths)\n}\n\n/**\n * Create a new put record, encodes and signs it if enabled.\n *\n * @param {Uint8Array} key\n * @param {Uint8Array} value\n * @returns {Uint8Array}\n */\nexports.createPutRecord = (key, value) => {\n  const timeReceived = new Date()\n  const rec = new Record(key, value, timeReceived)\n\n  return rec.serialize()\n}\n\n/**\n * Creates a logger for the given subsystem\n *\n * @param {PeerId} [id]\n * @param {string} [subsystem]\n */\nexports.logger = (id, subsystem) => {\n  const name = ['libp2p', 'dht']\n  if (subsystem) {\n    name.push(subsystem)\n  }\n  if (id) {\n    name.push(`${id.toB58String().slice(0, 8)}`)\n  }\n\n  // Add a formatter for converting to a base58 string\n  debug.formatters.b = (v) => {\n    return base58btc.baseEncode(v)\n  }\n\n  const logger = Object.assign(debug(name.join(':')), {\n    error: debug(name.concat(['error']).join(':'))\n  })\n\n  return logger\n}\n\nexports.TimeoutError = class TimeoutError extends Error {\n  get code () {\n    return 'ETIMEDOUT'\n  }\n}\n\n/**\n * Creates an async function that calls the given `asyncFn` and Errors\n * if it does not resolve within `time` ms\n *\n * @template T\n * @param {(...args: any[]) => Promise<T>} asyncFn\n * @param {number} [time]\n */\nexports.withTimeout = (asyncFn, time) => {\n  /**\n   * @param  {...any} args\n   * @returns {Promise<T>}\n   */\n  async function timeoutFn (...args) {\n    if (!time) {\n      return asyncFn(...args)\n    }\n\n    let res\n\n    try {\n      res = await pTimeout(asyncFn(...args), time)\n    } catch (err) {\n      if (err instanceof pTimeout.TimeoutError) {\n        throw errcode(err, 'ETIMEDOUT')\n      }\n\n      throw err\n    }\n\n    return res\n  }\n\n  return timeoutFn\n}\n\n/**\n * Iterates the given `asyncIterator` and runs each item through the given `asyncFn` in parallel.\n * Returns a promise that resolves when all items of the `asyncIterator` have been passed\n * through `asyncFn`.\n *\n * @template T\n * @template O\n *\n * @param {AsyncIterable<T>} asyncIterator\n * @param {(arg0: T) => Promise<O>} asyncFn\n */\nexports.mapParallel = async function (asyncIterator, asyncFn) {\n  const tasks = []\n  for await (const item of asyncIterator) {\n    tasks.push(asyncFn(item))\n  }\n  return Promise.all(tasks)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}