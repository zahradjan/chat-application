{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst log = Object.assign(debug('libp2p:circuit:stream-handler'), {\n  error: debug('libp2p:circuit:stream-handler:err')\n});\n\nconst lp = require('it-length-prefixed'); // @ts-ignore it-handshake does not export types\n\n\nconst handshake = require('it-handshake');\n\nconst {\n  CircuitRelay\n} = require('../protocol');\n/**\n * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream\n * @typedef {import('../protocol').ICircuitRelay} ICircuitRelay\n */\n\n\nclass StreamHandler {\n  /**\n   * Create a stream handler for connection\n   *\n   * @class\n   * @param {object} options\n   * @param {MuxedStream} options.stream - A duplex iterable\n   * @param {number} [options.maxLength = 4096] - max bytes length of message\n   */\n  constructor(_ref) {\n    let {\n      stream,\n      maxLength = 4096\n    } = _ref;\n    this.stream = stream;\n    this.shake = handshake(this.stream); // @ts-ignore options are not optional\n\n    this.decoder = lp.decode.fromReader(this.shake.reader, {\n      maxDataLength: maxLength\n    });\n  }\n  /**\n   * Read and decode message\n   *\n   * @async\n   */\n\n\n  async read() {\n    const msg = await this.decoder.next();\n\n    if (msg.value) {\n      const value = CircuitRelay.decode(msg.value.slice());\n      log('read message type', value.type);\n      return value;\n    }\n\n    log('read received no value, closing stream'); // End the stream, we didn't get data\n\n    this.close();\n  }\n  /**\n   * Encode and write array of buffers\n   *\n   * @param {ICircuitRelay} msg - An unencoded CircuitRelay protobuf message\n   * @returns {void}\n   */\n\n\n  write(msg) {\n    log('write message type %s', msg.type); // @ts-ignore lp.encode expects type type 'Buffer | BufferList', not 'Uint8Array'\n\n    this.shake.write(lp.encode.single(CircuitRelay.encode(msg).finish()));\n  }\n  /**\n   * Return the handshake rest stream and invalidate handler\n   *\n   * @returns {*} A duplex iterable\n   */\n\n\n  rest() {\n    this.shake.rest();\n    return this.shake.stream;\n  }\n  /**\n   * @param {ICircuitRelay} msg - An unencoded CircuitRelay protobuf message\n   */\n\n\n  end(msg) {\n    this.write(msg);\n    this.close();\n  }\n  /**\n   * Close the stream\n   *\n   * @returns {void}\n   */\n\n\n  close() {\n    log('closing the stream');\n    this.rest().sink([]);\n  }\n\n}\n\nmodule.exports = StreamHandler;","map":{"version":3,"names":["debug","require","log","Object","assign","error","lp","handshake","CircuitRelay","StreamHandler","constructor","stream","maxLength","shake","decoder","decode","fromReader","reader","maxDataLength","read","msg","next","value","slice","type","close","write","encode","single","finish","rest","end","sink","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p/src/circuit/circuit/stream-handler.js"],"sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = Object.assign(debug('libp2p:circuit:stream-handler'), {\n  error: debug('libp2p:circuit:stream-handler:err')\n})\n\nconst lp = require('it-length-prefixed')\n// @ts-ignore it-handshake does not export types\nconst handshake = require('it-handshake')\nconst { CircuitRelay } = require('../protocol')\n\n/**\n * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream\n * @typedef {import('../protocol').ICircuitRelay} ICircuitRelay\n */\n\nclass StreamHandler {\n  /**\n   * Create a stream handler for connection\n   *\n   * @class\n   * @param {object} options\n   * @param {MuxedStream} options.stream - A duplex iterable\n   * @param {number} [options.maxLength = 4096] - max bytes length of message\n   */\n  constructor ({ stream, maxLength = 4096 }) {\n    this.stream = stream\n\n    this.shake = handshake(this.stream)\n    // @ts-ignore options are not optional\n    this.decoder = lp.decode.fromReader(this.shake.reader, { maxDataLength: maxLength })\n  }\n\n  /**\n   * Read and decode message\n   *\n   * @async\n   */\n  async read () {\n    const msg = await this.decoder.next()\n    if (msg.value) {\n      const value = CircuitRelay.decode(msg.value.slice())\n      log('read message type', value.type)\n      return value\n    }\n\n    log('read received no value, closing stream')\n    // End the stream, we didn't get data\n    this.close()\n  }\n\n  /**\n   * Encode and write array of buffers\n   *\n   * @param {ICircuitRelay} msg - An unencoded CircuitRelay protobuf message\n   * @returns {void}\n   */\n  write (msg) {\n    log('write message type %s', msg.type)\n    // @ts-ignore lp.encode expects type type 'Buffer | BufferList', not 'Uint8Array'\n    this.shake.write(lp.encode.single(CircuitRelay.encode(msg).finish()))\n  }\n\n  /**\n   * Return the handshake rest stream and invalidate handler\n   *\n   * @returns {*} A duplex iterable\n   */\n  rest () {\n    this.shake.rest()\n    return this.shake.stream\n  }\n\n  /**\n   * @param {ICircuitRelay} msg - An unencoded CircuitRelay protobuf message\n   */\n  end (msg) {\n    this.write(msg)\n    this.close()\n  }\n\n  /**\n   * Close the stream\n   *\n   * @returns {void}\n   */\n  close () {\n    log('closing the stream')\n    this.rest().sink([])\n  }\n}\n\nmodule.exports = StreamHandler\n"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,GAAG,GAAGC,MAAM,CAACC,MAAP,CAAcJ,KAAK,CAAC,+BAAD,CAAnB,EAAsD;EAChEK,KAAK,EAAEL,KAAK,CAAC,mCAAD;AADoD,CAAtD,CAAZ;;AAIA,MAAMM,EAAE,GAAGL,OAAO,CAAC,oBAAD,CAAlB,C,CACA;;;AACA,MAAMM,SAAS,GAAGN,OAAO,CAAC,cAAD,CAAzB;;AACA,MAAM;EAAEO;AAAF,IAAmBP,OAAO,CAAC,aAAD,CAAhC;AAEA;AACA;AACA;AACA;;;AAEA,MAAMQ,aAAN,CAAoB;EAClB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,WAAW,OAAgC;IAAA,IAA9B;MAAEC,MAAF;MAAUC,SAAS,GAAG;IAAtB,CAA8B;IACzC,KAAKD,MAAL,GAAcA,MAAd;IAEA,KAAKE,KAAL,GAAaN,SAAS,CAAC,KAAKI,MAAN,CAAtB,CAHyC,CAIzC;;IACA,KAAKG,OAAL,GAAeR,EAAE,CAACS,MAAH,CAAUC,UAAV,CAAqB,KAAKH,KAAL,CAAWI,MAAhC,EAAwC;MAAEC,aAAa,EAAEN;IAAjB,CAAxC,CAAf;EACD;EAED;AACF;AACA;AACA;AACA;;;EACY,MAAJO,IAAI,GAAI;IACZ,MAAMC,GAAG,GAAG,MAAM,KAAKN,OAAL,CAAaO,IAAb,EAAlB;;IACA,IAAID,GAAG,CAACE,KAAR,EAAe;MACb,MAAMA,KAAK,GAAGd,YAAY,CAACO,MAAb,CAAoBK,GAAG,CAACE,KAAJ,CAAUC,KAAV,EAApB,CAAd;MACArB,GAAG,CAAC,mBAAD,EAAsBoB,KAAK,CAACE,IAA5B,CAAH;MACA,OAAOF,KAAP;IACD;;IAEDpB,GAAG,CAAC,wCAAD,CAAH,CARY,CASZ;;IACA,KAAKuB,KAAL;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEC,KAAK,CAAEN,GAAF,EAAO;IACVlB,GAAG,CAAC,uBAAD,EAA0BkB,GAAG,CAACI,IAA9B,CAAH,CADU,CAEV;;IACA,KAAKX,KAAL,CAAWa,KAAX,CAAiBpB,EAAE,CAACqB,MAAH,CAAUC,MAAV,CAAiBpB,YAAY,CAACmB,MAAb,CAAoBP,GAApB,EAAyBS,MAAzB,EAAjB,CAAjB;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEC,IAAI,GAAI;IACN,KAAKjB,KAAL,CAAWiB,IAAX;IACA,OAAO,KAAKjB,KAAL,CAAWF,MAAlB;EACD;EAED;AACF;AACA;;;EACEoB,GAAG,CAAEX,GAAF,EAAO;IACR,KAAKM,KAAL,CAAWN,GAAX;IACA,KAAKK,KAAL;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEA,KAAK,GAAI;IACPvB,GAAG,CAAC,oBAAD,CAAH;IACA,KAAK4B,IAAL,GAAYE,IAAZ,CAAiB,EAAjB;EACD;;AAzEiB;;AA4EpBC,MAAM,CAACC,OAAP,GAAiBzB,aAAjB"},"metadata":{},"sourceType":"script"}