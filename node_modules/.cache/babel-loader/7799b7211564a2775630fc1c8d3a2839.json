{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar secp256k1 = require('secp256k1');\n\nvar _require = require('multiformats/hashes/sha2'),\n    sha256 = _require.sha256;\n\nmodule.exports = function (randomBytes) {\n  var privateKeyLength = 32;\n\n  function generateKey() {\n    var privateKey;\n\n    do {\n      privateKey = randomBytes(32);\n    } while (!secp256k1.privateKeyVerify(privateKey));\n\n    return privateKey;\n  }\n\n  function hashAndSign(_x, _x2) {\n    return _hashAndSign.apply(this, arguments);\n  }\n\n  function _hashAndSign() {\n    _hashAndSign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(key, msg) {\n      var _yield$sha256$digest, digest, sig;\n\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return sha256.digest(msg);\n\n            case 2:\n              _yield$sha256$digest = _context.sent;\n              digest = _yield$sha256$digest.digest;\n              sig = secp256k1.ecdsaSign(digest, key);\n              return _context.abrupt(\"return\", secp256k1.signatureExport(sig.signature));\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _hashAndSign.apply(this, arguments);\n  }\n\n  function hashAndVerify(_x3, _x4, _x5) {\n    return _hashAndVerify.apply(this, arguments);\n  }\n\n  function _hashAndVerify() {\n    _hashAndVerify = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(key, sig, msg) {\n      var _yield$sha256$digest2, digest;\n\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return sha256.digest(msg);\n\n            case 2:\n              _yield$sha256$digest2 = _context2.sent;\n              digest = _yield$sha256$digest2.digest;\n              sig = secp256k1.signatureImport(sig);\n              return _context2.abrupt(\"return\", secp256k1.ecdsaVerify(sig, digest, key));\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _hashAndVerify.apply(this, arguments);\n  }\n\n  function compressPublicKey(key) {\n    if (!secp256k1.publicKeyVerify(key)) {\n      throw new Error('Invalid public key');\n    }\n\n    return secp256k1.publicKeyConvert(key, true);\n  }\n\n  function decompressPublicKey(key) {\n    return secp256k1.publicKeyConvert(key, false);\n  }\n\n  function validatePrivateKey(key) {\n    if (!secp256k1.privateKeyVerify(key)) {\n      throw new Error('Invalid private key');\n    }\n  }\n\n  function validatePublicKey(key) {\n    if (!secp256k1.publicKeyVerify(key)) {\n      throw new Error('Invalid public key');\n    }\n  }\n\n  function computePublicKey(privateKey) {\n    validatePrivateKey(privateKey);\n    return secp256k1.publicKeyCreate(privateKey);\n  }\n\n  return {\n    generateKey: generateKey,\n    privateKeyLength: privateKeyLength,\n    hashAndSign: hashAndSign,\n    hashAndVerify: hashAndVerify,\n    compressPublicKey: compressPublicKey,\n    decompressPublicKey: decompressPublicKey,\n    validatePrivateKey: validatePrivateKey,\n    validatePublicKey: validatePublicKey,\n    computePublicKey: computePublicKey\n  };\n};","map":{"version":3,"names":["secp256k1","require","sha256","module","exports","randomBytes","privateKeyLength","generateKey","privateKey","privateKeyVerify","hashAndSign","key","msg","digest","sig","ecdsaSign","signatureExport","signature","hashAndVerify","signatureImport","ecdsaVerify","compressPublicKey","publicKeyVerify","Error","publicKeyConvert","decompressPublicKey","validatePrivateKey","validatePublicKey","computePublicKey","publicKeyCreate"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-crypto/src/keys/secp256k1.js"],"sourcesContent":["'use strict'\n\nconst secp256k1 = require('secp256k1')\nconst { sha256 } = require('multiformats/hashes/sha2')\n\nmodule.exports = (randomBytes) => {\n  const privateKeyLength = 32\n\n  function generateKey () {\n    let privateKey\n    do {\n      privateKey = randomBytes(32)\n    } while (!secp256k1.privateKeyVerify(privateKey))\n    return privateKey\n  }\n\n  async function hashAndSign (key, msg) {\n    const { digest } = await sha256.digest(msg)\n    const sig = secp256k1.ecdsaSign(digest, key)\n    return secp256k1.signatureExport(sig.signature)\n  }\n\n  async function hashAndVerify (key, sig, msg) {\n    const { digest } = await sha256.digest(msg)\n    sig = secp256k1.signatureImport(sig)\n    return secp256k1.ecdsaVerify(sig, digest, key)\n  }\n\n  function compressPublicKey (key) {\n    if (!secp256k1.publicKeyVerify(key)) {\n      throw new Error('Invalid public key')\n    }\n    return secp256k1.publicKeyConvert(key, true)\n  }\n\n  function decompressPublicKey (key) {\n    return secp256k1.publicKeyConvert(key, false)\n  }\n\n  function validatePrivateKey (key) {\n    if (!secp256k1.privateKeyVerify(key)) {\n      throw new Error('Invalid private key')\n    }\n  }\n\n  function validatePublicKey (key) {\n    if (!secp256k1.publicKeyVerify(key)) {\n      throw new Error('Invalid public key')\n    }\n  }\n\n  function computePublicKey (privateKey) {\n    validatePrivateKey(privateKey)\n    return secp256k1.publicKeyCreate(privateKey)\n  }\n\n  return {\n    generateKey,\n    privateKeyLength,\n    hashAndSign,\n    hashAndVerify,\n    compressPublicKey,\n    decompressPublicKey,\n    validatePrivateKey,\n    validatePublicKey,\n    computePublicKey\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}