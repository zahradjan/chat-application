{"ast":null,"code":"'use strict';\n\nconst repoInit = require('./init');\n\nconst {\n  MissingRepoOptionsError,\n  NotInitializedRepoError\n} = require('../errors');\n\nconst {\n  VERSION_KEY\n} = require('../utils');\n\nconst {\n  fromString: uint8ArrayFromString\n} = require('uint8arrays/from-string');\n\nconst {\n  toString: uint8ArrayToString\n} = require('uint8arrays/to-string');\n/**\n * Function that has responsibility to retrieve version of repo from its root datastore's instance.\n * This function needs to be cross-repo-version functional to be able to fetch any version number,\n * even in case of change of repo's versioning.\n *\n * @param {import('../types').Backends} backends\n */\n\n\nasync function getVersion(backends) {\n  if (!(await repoInit.isRepoInitialized(backends))) {\n    throw new NotInitializedRepoError('Repo is not initialized!');\n  }\n\n  const store = backends.root;\n  await store.open();\n\n  try {\n    return parseInt(uint8ArrayToString(await store.get(VERSION_KEY)));\n  } finally {\n    await store.close();\n  }\n}\n/**\n * Function for setting a version in cross-repo-version manner.\n *\n * @param {number} version\n * @param {import('../types').Backends} backends\n */\n\n\nasync function setVersion(version, backends) {\n  if (!backends) {\n    throw new MissingRepoOptionsError('Please pass repo options when trying to open a repo');\n  }\n\n  const store = backends.root;\n  await store.open();\n  await store.put(VERSION_KEY, uint8ArrayFromString(String(version)));\n  await store.close();\n}\n\nmodule.exports = {\n  getVersion,\n  setVersion\n};","map":{"version":3,"names":["repoInit","require","MissingRepoOptionsError","NotInitializedRepoError","VERSION_KEY","fromString","uint8ArrayFromString","toString","uint8ArrayToString","getVersion","backends","isRepoInitialized","store","root","open","parseInt","get","close","setVersion","version","put","String","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-repo-migrations/src/repo/version.js"],"sourcesContent":["'use strict'\n\nconst repoInit = require('./init')\nconst { MissingRepoOptionsError, NotInitializedRepoError } = require('../errors')\nconst { VERSION_KEY } = require('../utils')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\n\n/**\n * Function that has responsibility to retrieve version of repo from its root datastore's instance.\n * This function needs to be cross-repo-version functional to be able to fetch any version number,\n * even in case of change of repo's versioning.\n *\n * @param {import('../types').Backends} backends\n */\nasync function getVersion (backends) {\n  if (!(await repoInit.isRepoInitialized(backends))) {\n    throw new NotInitializedRepoError('Repo is not initialized!')\n  }\n\n  const store = backends.root\n  await store.open()\n\n  try {\n    return parseInt(uint8ArrayToString(await store.get(VERSION_KEY)))\n  } finally {\n    await store.close()\n  }\n}\n\n/**\n * Function for setting a version in cross-repo-version manner.\n *\n * @param {number} version\n * @param {import('../types').Backends} backends\n */\nasync function setVersion (version, backends) {\n  if (!backends) {\n    throw new MissingRepoOptionsError('Please pass repo options when trying to open a repo')\n  }\n\n  const store = backends.root\n  await store.open()\n  await store.put(VERSION_KEY, uint8ArrayFromString(String(version)))\n  await store.close()\n}\n\nmodule.exports = {\n  getVersion,\n  setVersion\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,QAAD,CAAxB;;AACA,MAAM;EAAEC,uBAAF;EAA2BC;AAA3B,IAAuDF,OAAO,CAAC,WAAD,CAApE;;AACA,MAAM;EAAEG;AAAF,IAAkBH,OAAO,CAAC,UAAD,CAA/B;;AACA,MAAM;EAAEI,UAAU,EAAEC;AAAd,IAAuCL,OAAO,CAAC,yBAAD,CAApD;;AACA,MAAM;EAAEM,QAAQ,EAAEC;AAAZ,IAAmCP,OAAO,CAAC,uBAAD,CAAhD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAeQ,UAAf,CAA2BC,QAA3B,EAAqC;EACnC,IAAI,EAAE,MAAMV,QAAQ,CAACW,iBAAT,CAA2BD,QAA3B,CAAR,CAAJ,EAAmD;IACjD,MAAM,IAAIP,uBAAJ,CAA4B,0BAA5B,CAAN;EACD;;EAED,MAAMS,KAAK,GAAGF,QAAQ,CAACG,IAAvB;EACA,MAAMD,KAAK,CAACE,IAAN,EAAN;;EAEA,IAAI;IACF,OAAOC,QAAQ,CAACP,kBAAkB,CAAC,MAAMI,KAAK,CAACI,GAAN,CAAUZ,WAAV,CAAP,CAAnB,CAAf;EACD,CAFD,SAEU;IACR,MAAMQ,KAAK,CAACK,KAAN,EAAN;EACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAeC,UAAf,CAA2BC,OAA3B,EAAoCT,QAApC,EAA8C;EAC5C,IAAI,CAACA,QAAL,EAAe;IACb,MAAM,IAAIR,uBAAJ,CAA4B,qDAA5B,CAAN;EACD;;EAED,MAAMU,KAAK,GAAGF,QAAQ,CAACG,IAAvB;EACA,MAAMD,KAAK,CAACE,IAAN,EAAN;EACA,MAAMF,KAAK,CAACQ,GAAN,CAAUhB,WAAV,EAAuBE,oBAAoB,CAACe,MAAM,CAACF,OAAD,CAAP,CAA3C,CAAN;EACA,MAAMP,KAAK,CAACK,KAAN,EAAN;AACD;;AAEDK,MAAM,CAACC,OAAP,GAAiB;EACfd,UADe;EAEfS;AAFe,CAAjB"},"metadata":{},"sourceType":"script"}