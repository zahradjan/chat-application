{"ast":null,"code":"'use strict';\n/**\n * Takes an (async) iterable that emits things and returns an async iterable that\n * emits those things in fixed-sized batches.\n *\n * @template T\n * @param {AsyncIterable<T>|Iterable<T>} source\n * @param {number} [size=1]\n * @returns {AsyncIterable<T[]>}\n */\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _awaitAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _wrapAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nvar _asyncIterator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nfunction batch(_x) {\n  return _batch.apply(this, arguments);\n}\n\nfunction _batch() {\n  _batch = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(source) {\n    var size,\n        things,\n        _iteratorAbruptCompletion,\n        _didIteratorError,\n        _iteratorError,\n        _iterator,\n        _step,\n        thing,\n        _args = arguments;\n\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            size = _args.length > 1 && _args[1] !== undefined ? _args[1] : 1;\n\n            /** @type {T[]} */\n            things = [];\n\n            if (size < 1) {\n              size = 1;\n            }\n\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context.prev = 5;\n            _iterator = _asyncIterator(source);\n\n          case 7:\n            _context.next = 9;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 9:\n            if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n              _context.next = 21;\n              break;\n            }\n\n            thing = _step.value;\n            things.push(thing);\n\n          case 12:\n            if (!(things.length >= size)) {\n              _context.next = 18;\n              break;\n            }\n\n            _context.next = 15;\n            return things.slice(0, size);\n\n          case 15:\n            things = things.slice(size);\n            _context.next = 12;\n            break;\n\n          case 18:\n            _iteratorAbruptCompletion = false;\n            _context.next = 7;\n            break;\n\n          case 21:\n            _context.next = 27;\n            break;\n\n          case 23:\n            _context.prev = 23;\n            _context.t0 = _context[\"catch\"](5);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 27:\n            _context.prev = 27;\n            _context.prev = 28;\n\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context.next = 32;\n              break;\n            }\n\n            _context.next = 32;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 32:\n            _context.prev = 32;\n\n            if (!_didIteratorError) {\n              _context.next = 35;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 35:\n            return _context.finish(32);\n\n          case 36:\n            return _context.finish(27);\n\n          case 37:\n            if (!things.length) {\n              _context.next = 43;\n              break;\n            }\n\n            _context.next = 40;\n            return things.slice(0, size);\n\n          case 40:\n            things = things.slice(size);\n            _context.next = 37;\n            break;\n\n          case 43:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[5, 23, 27, 37], [28,, 32, 36]]);\n  }));\n  return _batch.apply(this, arguments);\n}\n\nmodule.exports = batch;","map":{"version":3,"names":["batch","source","size","things","thing","push","length","slice","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/it-batch/index.js"],"sourcesContent":["'use strict'\n\n/**\n * Takes an (async) iterable that emits things and returns an async iterable that\n * emits those things in fixed-sized batches.\n *\n * @template T\n * @param {AsyncIterable<T>|Iterable<T>} source\n * @param {number} [size=1]\n * @returns {AsyncIterable<T[]>}\n */\nasync function * batch (source, size = 1) {\n  /** @type {T[]} */\n  let things = []\n\n  if (size < 1) {\n    size = 1\n  }\n\n  for await (const thing of source) {\n    things.push(thing)\n\n    while (things.length >= size) {\n      yield things.slice(0, size)\n\n      things = things.slice(size)\n    }\n  }\n\n  while (things.length) {\n    yield things.slice(0, size)\n\n    things = things.slice(size)\n  }\n}\n\nmodule.exports = batch\n"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;SACiBA,K;;;;;wEAAjB,iBAAwBC,MAAxB;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;;IAAA;MAAA;QAAA;UAAA;YAAgCC,IAAhC,2DAAuC,CAAvC;;YACE;YACIC,MAFN,GAEe,EAFf;;YAIE,IAAID,IAAI,GAAG,CAAX,EAAc;cACZA,IAAI,GAAG,CAAP;YACD;;YANH;YAAA;YAAA;YAAA,2BAQ4BD,MAR5B;;UAAA;YAAA;YAAA;;UAAA;YAAA;cAAA;cAAA;YAAA;;YAQmBG,KARnB;YASID,MAAM,CAACE,IAAP,CAAYD,KAAZ;;UATJ;YAAA,MAWWD,MAAM,CAACG,MAAP,IAAiBJ,IAX5B;cAAA;cAAA;YAAA;;YAAA;YAYM,OAAMC,MAAM,CAACI,KAAP,CAAa,CAAb,EAAgBL,IAAhB,CAAN;;UAZN;YAcMC,MAAM,GAAGA,MAAM,CAACI,KAAP,CAAaL,IAAb,CAAT;YAdN;YAAA;;UAAA;YAAA;YAAA;YAAA;;UAAA;YAAA;YAAA;;UAAA;YAAA;YAAA;YAAA;YAAA;;UAAA;YAAA;YAAA;;YAAA;cAAA;cAAA;YAAA;;YAAA;YAAA;;UAAA;YAAA;;YAAA;cAAA;cAAA;YAAA;;YAAA;;UAAA;YAAA;;UAAA;YAAA;;UAAA;YAAA,KAkBSC,MAAM,CAACG,MAlBhB;cAAA;cAAA;YAAA;;YAAA;YAmBI,OAAMH,MAAM,CAACI,KAAP,CAAa,CAAb,EAAgBL,IAAhB,CAAN;;UAnBJ;YAqBIC,MAAM,GAAGA,MAAM,CAACI,KAAP,CAAaL,IAAb,CAAT;YArBJ;YAAA;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AAyBAM,MAAM,CAACC,OAAP,GAAiBT,KAAjB"},"metadata":{},"sourceType":"script"}