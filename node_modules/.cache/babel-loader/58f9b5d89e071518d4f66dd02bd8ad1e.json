{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _inherits = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar debug = require('debug');\n\nvar log = Object.assign(debug('libp2p-pubsub:peer-streams'), {\n  error: debug('libp2p-pubsub:peer-streams:err')\n});\n\nvar _require = require('events'),\n    EventEmitter = _require.EventEmitter;\n\nvar lp = require('it-length-prefixed');\n\nvar pushable = require('it-pushable');\n\nvar _require2 = require('it-pipe'),\n    pipe = _require2.pipe;\n\nvar _require3 = require('abortable-iterator'),\n    abortable = _require3.source;\n\nvar AbortController = require('abort-controller').default;\n/**\n * @typedef {import('../stream-muxer/types').MuxedStream} MuxedStream\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('it-pushable').Pushable<Uint8Array>} PushableStream\n */\n\n/**\n * Thin wrapper around a peer's inbound / outbound pubsub streams\n */\n\n\nvar PeerStreams = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(PeerStreams, _EventEmitter);\n\n  var _super = _createSuper(PeerStreams);\n\n  /**\n   * @param {object} properties - properties of the PeerStreams.\n   * @param {PeerId} properties.id\n   * @param {string} properties.protocol\n   */\n  function PeerStreams(_ref) {\n    var _this;\n\n    var id = _ref.id,\n        protocol = _ref.protocol;\n\n    _classCallCheck(this, PeerStreams);\n\n    _this = _super.call(this);\n    /**\n     * @type {import('peer-id')}\n     */\n\n    _this.id = id;\n    /**\n     * Established protocol\n     *\n     * @type {string}\n     */\n\n    _this.protocol = protocol;\n    /**\n     * The raw outbound stream, as retrieved from conn.newStream\n     *\n     * @private\n     * @type {null|MuxedStream}\n     */\n\n    _this._rawOutboundStream = null;\n    /**\n     * The raw inbound stream, as retrieved from the callback from libp2p.handle\n     *\n     * @private\n     * @type {null|MuxedStream}\n     */\n\n    _this._rawInboundStream = null;\n    /**\n     * An AbortController for controlled shutdown of the inbound stream\n     *\n     * @private\n     * @type {AbortController}\n     */\n\n    _this._inboundAbortController = new AbortController();\n    /**\n     * Write stream -- its preferable to use the write method\n     *\n     * @type {null|PushableStream}\n     */\n\n    _this.outboundStream = null;\n    /**\n     * Read stream\n     *\n     * @type {null| AsyncIterable<Uint8Array>}\n     */\n\n    _this.inboundStream = null;\n    return _this;\n  }\n  /**\n   * Do we have a connection to read from?\n   *\n   * @type {boolean}\n   */\n\n\n  _createClass(PeerStreams, [{\n    key: \"isReadable\",\n    get: function get() {\n      return Boolean(this.inboundStream);\n    }\n    /**\n     * Do we have a connection to write on?\n     *\n     * @type {boolean}\n     */\n\n  }, {\n    key: \"isWritable\",\n    get: function get() {\n      return Boolean(this.outboundStream);\n    }\n    /**\n     * Send a message to this peer.\n     * Throws if there is no `stream` to write to available.\n     *\n     * @param {Uint8Array} data\n     * @returns {void}\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(data) {\n      if (!this.outboundStream) {\n        var id = this.id.toB58String();\n        throw new Error('No writable connection to ' + id);\n      }\n\n      this.outboundStream.push(data);\n    }\n    /**\n     * Attach a raw inbound stream and setup a read stream\n     *\n     * @param {MuxedStream} stream\n     * @returns {AsyncIterable<Uint8Array>}\n     */\n\n  }, {\n    key: \"attachInboundStream\",\n    value: function attachInboundStream(stream) {\n      // Create and attach a new inbound stream\n      // The inbound stream is:\n      // - abortable, set to only return on abort, rather than throw\n      // - transformed with length-prefix transform\n      this._rawInboundStream = stream;\n      this.inboundStream = abortable(pipe(this._rawInboundStream, lp.decode()), this._inboundAbortController.signal, {\n        returnOnAbort: true\n      });\n      this.emit('stream:inbound');\n      return this.inboundStream;\n    }\n    /**\n     * Attach a raw outbound stream and setup a write stream\n     *\n     * @param {MuxedStream} stream\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"attachOutboundStream\",\n    value: function () {\n      var _attachOutboundStream = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(stream) {\n        var _this2 = this;\n\n        var _prevStream;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // If an outbound stream already exists, gently close it\n                _prevStream = this.outboundStream;\n\n                if (!this.outboundStream) {\n                  _context.next = 4;\n                  break;\n                }\n\n                _context.next = 4;\n                return this.outboundStream.end();\n\n              case 4:\n                this._rawOutboundStream = stream;\n                this.outboundStream = pushable({\n                  onEnd: function onEnd(shouldEmit) {\n                    // close writable side of the stream\n                    _this2._rawOutboundStream && _this2._rawOutboundStream.reset && _this2._rawOutboundStream.reset();\n                    _this2._rawOutboundStream = null;\n                    _this2.outboundStream = null;\n\n                    if (shouldEmit) {\n                      _this2.emit('close');\n                    }\n                  }\n                });\n                pipe(this.outboundStream, lp.encode(), this._rawOutboundStream).catch(\n                /** @param {Error} err */\n                function (err) {\n                  log.error(err);\n                }); // Only emit if the connection is new\n\n                if (!_prevStream) {\n                  this.emit('stream:outbound');\n                }\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function attachOutboundStream(_x) {\n        return _attachOutboundStream.apply(this, arguments);\n      }\n\n      return attachOutboundStream;\n    }()\n    /**\n     * Closes the open connection to peer\n     *\n     * @returns {void}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      // End the outbound stream\n      if (this.outboundStream) {\n        this.outboundStream.end();\n      } // End the inbound stream\n\n\n      if (this.inboundStream) {\n        this._inboundAbortController.abort();\n      }\n\n      this._rawOutboundStream = null;\n      this.outboundStream = null;\n      this._rawInboundStream = null;\n      this.inboundStream = null;\n      this.emit('close');\n    }\n  }]);\n\n  return PeerStreams;\n}(EventEmitter);\n\nmodule.exports = PeerStreams;","map":{"version":3,"names":["debug","require","log","Object","assign","error","EventEmitter","lp","pushable","pipe","abortable","source","AbortController","default","PeerStreams","id","protocol","_rawOutboundStream","_rawInboundStream","_inboundAbortController","outboundStream","inboundStream","Boolean","data","toB58String","Error","push","stream","decode","signal","returnOnAbort","emit","_prevStream","end","onEnd","shouldEmit","reset","encode","catch","err","abort","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-interfaces/src/pubsub/peer-streams.js"],"sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = Object.assign(debug('libp2p-pubsub:peer-streams'), {\n  error: debug('libp2p-pubsub:peer-streams:err')\n})\nconst { EventEmitter } = require('events')\n\nconst lp = require('it-length-prefixed')\nconst pushable = require('it-pushable')\nconst { pipe } = require('it-pipe')\nconst { source: abortable } = require('abortable-iterator')\nconst AbortController = require('abort-controller').default\n\n/**\n * @typedef {import('../stream-muxer/types').MuxedStream} MuxedStream\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('it-pushable').Pushable<Uint8Array>} PushableStream\n */\n\n/**\n * Thin wrapper around a peer's inbound / outbound pubsub streams\n */\nclass PeerStreams extends EventEmitter {\n  /**\n   * @param {object} properties - properties of the PeerStreams.\n   * @param {PeerId} properties.id\n   * @param {string} properties.protocol\n   */\n  constructor ({ id, protocol }) {\n    super()\n\n    /**\n     * @type {import('peer-id')}\n     */\n    this.id = id\n    /**\n     * Established protocol\n     *\n     * @type {string}\n     */\n    this.protocol = protocol\n    /**\n     * The raw outbound stream, as retrieved from conn.newStream\n     *\n     * @private\n     * @type {null|MuxedStream}\n     */\n    this._rawOutboundStream = null\n    /**\n     * The raw inbound stream, as retrieved from the callback from libp2p.handle\n     *\n     * @private\n     * @type {null|MuxedStream}\n     */\n    this._rawInboundStream = null\n    /**\n     * An AbortController for controlled shutdown of the inbound stream\n     *\n     * @private\n     * @type {AbortController}\n     */\n    this._inboundAbortController = new AbortController()\n    /**\n     * Write stream -- its preferable to use the write method\n     *\n     * @type {null|PushableStream}\n     */\n    this.outboundStream = null\n    /**\n     * Read stream\n     *\n     * @type {null| AsyncIterable<Uint8Array>}\n     */\n    this.inboundStream = null\n  }\n\n  /**\n   * Do we have a connection to read from?\n   *\n   * @type {boolean}\n   */\n  get isReadable () {\n    return Boolean(this.inboundStream)\n  }\n\n  /**\n   * Do we have a connection to write on?\n   *\n   * @type {boolean}\n   */\n  get isWritable () {\n    return Boolean(this.outboundStream)\n  }\n\n  /**\n   * Send a message to this peer.\n   * Throws if there is no `stream` to write to available.\n   *\n   * @param {Uint8Array} data\n   * @returns {void}\n   */\n  write (data) {\n    if (!this.outboundStream) {\n      const id = this.id.toB58String()\n      throw new Error('No writable connection to ' + id)\n    }\n\n    this.outboundStream.push(data)\n  }\n\n  /**\n   * Attach a raw inbound stream and setup a read stream\n   *\n   * @param {MuxedStream} stream\n   * @returns {AsyncIterable<Uint8Array>}\n   */\n  attachInboundStream (stream) {\n    // Create and attach a new inbound stream\n    // The inbound stream is:\n    // - abortable, set to only return on abort, rather than throw\n    // - transformed with length-prefix transform\n    this._rawInboundStream = stream\n    this.inboundStream = abortable(\n      pipe(\n        this._rawInboundStream,\n        lp.decode()\n      ),\n      this._inboundAbortController.signal,\n      { returnOnAbort: true }\n    )\n\n    this.emit('stream:inbound')\n    return this.inboundStream\n  }\n\n  /**\n   * Attach a raw outbound stream and setup a write stream\n   *\n   * @param {MuxedStream} stream\n   * @returns {Promise<void>}\n   */\n  async attachOutboundStream (stream) {\n    // If an outbound stream already exists, gently close it\n    const _prevStream = this.outboundStream\n    if (this.outboundStream) {\n      // End the stream without emitting a close event\n      await this.outboundStream.end()\n    }\n\n    this._rawOutboundStream = stream\n    this.outboundStream = pushable({\n      onEnd: (shouldEmit) => {\n        // close writable side of the stream\n        this._rawOutboundStream && this._rawOutboundStream.reset && this._rawOutboundStream.reset()\n        this._rawOutboundStream = null\n        this.outboundStream = null\n        if (shouldEmit) {\n          this.emit('close')\n        }\n      }\n    })\n\n    pipe(\n      this.outboundStream,\n      lp.encode(),\n      this._rawOutboundStream\n    ).catch(/** @param {Error} err */ err => {\n      log.error(err)\n    })\n\n    // Only emit if the connection is new\n    if (!_prevStream) {\n      this.emit('stream:outbound')\n    }\n  }\n\n  /**\n   * Closes the open connection to peer\n   *\n   * @returns {void}\n   */\n  close () {\n    // End the outbound stream\n    if (this.outboundStream) {\n      this.outboundStream.end()\n    }\n    // End the inbound stream\n    if (this.inboundStream) {\n      this._inboundAbortController.abort()\n    }\n\n    this._rawOutboundStream = null\n    this.outboundStream = null\n    this._rawInboundStream = null\n    this.inboundStream = null\n    this.emit('close')\n  }\n}\n\nmodule.exports = PeerStreams\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}