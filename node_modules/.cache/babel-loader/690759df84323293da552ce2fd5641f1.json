{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar utils = require('../utils');\n\nvar pMap = require('p-map');\n\nvar _require = require('uint8arrays/equals'),\n    uint8ArrayEquals = _require.equals;\n\nvar _require2 = require('uint8arrays/compare'),\n    uint8ArrayCompare = _require2.compare;\n\nvar _require3 = require('uint8arrays/xor'),\n    uint8ArrayXor = _require3.xor;\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('../').PeerData} PeerData\n */\n\n/**\n * Maintains a list of peerIds sorted by distance from a DHT key.\n */\n\n\nvar PeerDistanceList = /*#__PURE__*/function () {\n  /**\n   * Creates a new PeerDistanceList.\n   *\n   * @param {Uint8Array} originDhtKey - the DHT key from which distance is calculated\n   * @param {number} capacity - the maximum size of the list\n   */\n  function PeerDistanceList(originDhtKey, capacity) {\n    _classCallCheck(this, PeerDistanceList);\n\n    this.originDhtKey = originDhtKey;\n    this.capacity = capacity;\n    /** @type {{ peerId: PeerId, distance: Uint8Array }[]} */\n\n    this.peerDistances = [];\n  }\n  /**\n   * The length of the list\n   */\n\n\n  _createClass(PeerDistanceList, [{\n    key: \"length\",\n    get: function get() {\n      return this.peerDistances.length;\n    }\n    /**\n     * The peerIds in the list, in order of distance from the origin key\n     */\n\n  }, {\n    key: \"peers\",\n    get: function get() {\n      return this.peerDistances.map(function (pd) {\n        return pd.peerId;\n      });\n    }\n    /**\n     * Add a peerId to the list.\n     *\n     * @param {PeerId} peerId\n     */\n\n  }, {\n    key: \"add\",\n    value: function () {\n      var _add = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(peerId) {\n        var dhtKey, el;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.peerDistances.find(function (pd) {\n                  return uint8ArrayEquals(pd.peerId.id, peerId.id);\n                })) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                _context.next = 4;\n                return utils.convertPeerId(peerId);\n\n              case 4:\n                dhtKey = _context.sent;\n                el = {\n                  peerId: peerId,\n                  distance: uint8ArrayXor(this.originDhtKey, dhtKey)\n                };\n                this.peerDistances.push(el);\n                this.peerDistances.sort(function (a, b) {\n                  return uint8ArrayCompare(a.distance, b.distance);\n                });\n                this.peerDistances = this.peerDistances.slice(0, this.capacity);\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function add(_x) {\n        return _add.apply(this, arguments);\n      }\n\n      return add;\n    }()\n    /**\n     * Indicates whether any of the peerIds passed as a parameter are closer\n     * to the origin key than the furthest peerId in the PeerDistanceList.\n     *\n     * @param {PeerId[]} peerIds\n     */\n\n  }, {\n    key: \"anyCloser\",\n    value: function () {\n      var _anyCloser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(peerIds) {\n        var dhtKeys, furthestDistance, _iterator, _step, dhtKey, keyDistance;\n\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (peerIds.length) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", false);\n\n              case 2:\n                if (this.length) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", true);\n\n              case 4:\n                _context2.next = 6;\n                return pMap(peerIds, function (peerId) {\n                  return utils.convertPeerId(peerId);\n                });\n\n              case 6:\n                dhtKeys = _context2.sent;\n                furthestDistance = this.peerDistances[this.peerDistances.length - 1].distance;\n                _iterator = _createForOfIteratorHelper(dhtKeys);\n                _context2.prev = 9;\n\n                _iterator.s();\n\n              case 11:\n                if ((_step = _iterator.n()).done) {\n                  _context2.next = 18;\n                  break;\n                }\n\n                dhtKey = _step.value;\n                keyDistance = uint8ArrayXor(this.originDhtKey, dhtKey);\n\n                if (!(uint8ArrayCompare(keyDistance, furthestDistance) < 0)) {\n                  _context2.next = 16;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", true);\n\n              case 16:\n                _context2.next = 11;\n                break;\n\n              case 18:\n                _context2.next = 23;\n                break;\n\n              case 20:\n                _context2.prev = 20;\n                _context2.t0 = _context2[\"catch\"](9);\n\n                _iterator.e(_context2.t0);\n\n              case 23:\n                _context2.prev = 23;\n\n                _iterator.f();\n\n                return _context2.finish(23);\n\n              case 26:\n                return _context2.abrupt(\"return\", false);\n\n              case 27:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[9, 20, 23, 26]]);\n      }));\n\n      function anyCloser(_x2) {\n        return _anyCloser.apply(this, arguments);\n      }\n\n      return anyCloser;\n    }()\n  }]);\n\n  return PeerDistanceList;\n}();\n\nmodule.exports = PeerDistanceList;","map":{"version":3,"names":["utils","require","pMap","uint8ArrayEquals","equals","uint8ArrayCompare","compare","uint8ArrayXor","xor","PeerDistanceList","originDhtKey","capacity","peerDistances","length","map","pd","peerId","find","id","convertPeerId","dhtKey","el","distance","push","sort","a","b","slice","peerIds","dhtKeys","furthestDistance","keyDistance","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-kad-dht/src/peer-list/peer-distance-list.js"],"sourcesContent":["'use strict'\n\nconst utils = require('../utils')\nconst pMap = require('p-map')\nconst { equals: uint8ArrayEquals } = require('uint8arrays/equals')\nconst { compare: uint8ArrayCompare } = require('uint8arrays/compare')\nconst { xor: uint8ArrayXor } = require('uint8arrays/xor')\n\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('../').PeerData} PeerData\n */\n\n/**\n * Maintains a list of peerIds sorted by distance from a DHT key.\n */\nclass PeerDistanceList {\n  /**\n   * Creates a new PeerDistanceList.\n   *\n   * @param {Uint8Array} originDhtKey - the DHT key from which distance is calculated\n   * @param {number} capacity - the maximum size of the list\n   */\n  constructor (originDhtKey, capacity) {\n    this.originDhtKey = originDhtKey\n    this.capacity = capacity\n\n    /** @type {{ peerId: PeerId, distance: Uint8Array }[]} */\n    this.peerDistances = []\n  }\n\n  /**\n   * The length of the list\n   */\n  get length () {\n    return this.peerDistances.length\n  }\n\n  /**\n   * The peerIds in the list, in order of distance from the origin key\n   */\n  get peers () {\n    return this.peerDistances.map(pd => pd.peerId)\n  }\n\n  /**\n   * Add a peerId to the list.\n   *\n   * @param {PeerId} peerId\n   */\n  async add (peerId) {\n    if (this.peerDistances.find(pd => uint8ArrayEquals(pd.peerId.id, peerId.id))) {\n      return\n    }\n\n    const dhtKey = await utils.convertPeerId(peerId)\n    const el = {\n      peerId,\n      distance: uint8ArrayXor(this.originDhtKey, dhtKey)\n    }\n\n    this.peerDistances.push(el)\n    this.peerDistances.sort((a, b) => uint8ArrayCompare(a.distance, b.distance))\n    this.peerDistances = this.peerDistances.slice(0, this.capacity)\n  }\n\n  /**\n   * Indicates whether any of the peerIds passed as a parameter are closer\n   * to the origin key than the furthest peerId in the PeerDistanceList.\n   *\n   * @param {PeerId[]} peerIds\n   */\n  async anyCloser (peerIds) {\n    if (!peerIds.length) {\n      return false\n    }\n\n    if (!this.length) {\n      return true\n    }\n\n    const dhtKeys = await pMap(peerIds, (peerId) => utils.convertPeerId(peerId))\n    const furthestDistance = this.peerDistances[this.peerDistances.length - 1].distance\n\n    for (const dhtKey of dhtKeys) {\n      const keyDistance = uint8ArrayXor(this.originDhtKey, dhtKey)\n\n      if (uint8ArrayCompare(keyDistance, furthestDistance) < 0) {\n        return true\n      }\n    }\n\n    return false\n  }\n}\n\nmodule.exports = PeerDistanceList\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}