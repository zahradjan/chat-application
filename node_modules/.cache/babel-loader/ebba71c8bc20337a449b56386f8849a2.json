{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar dagPb = require('@ipld/dag-pb');\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar _require2 = require('multiformats/hashes/sha2'),\n    sha256 = _require2.sha256;\n\nvar withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\n\n\nmodule.exports = function (_ref) {\n  var repo = _ref.repo,\n      preload = _ref.preload;\n\n  /**\n   * @type {import('ipfs-core-types/src/object').API[\"put\"]}\n   */\n  function put(_x) {\n    return _put.apply(this, arguments);\n  }\n\n  function _put() {\n    _put = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(obj) {\n      var options,\n          release,\n          buf,\n          hash,\n          cid,\n          _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _context.next = 3;\n              return repo.gcLock.readLock();\n\n            case 3:\n              release = _context.sent;\n              _context.prev = 4;\n              buf = dagPb.encode(obj);\n              _context.next = 8;\n              return sha256.digest(buf);\n\n            case 8:\n              hash = _context.sent;\n              cid = CID.createV0(hash);\n              _context.next = 12;\n              return repo.blocks.put(cid, buf, {\n                signal: options.signal\n              });\n\n            case 12:\n              if (options.preload !== false) {\n                preload(cid);\n              }\n\n              if (!options.pin) {\n                _context.next = 16;\n                break;\n              }\n\n              _context.next = 16;\n              return repo.pins.pinRecursively(cid, {\n                signal: options.signal\n              });\n\n            case 16:\n              return _context.abrupt(\"return\", cid);\n\n            case 17:\n              _context.prev = 17;\n              release();\n              return _context.finish(17);\n\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[4,, 17, 20]]);\n    }));\n    return _put.apply(this, arguments);\n  }\n\n  return withTimeoutOption(put);\n};","map":{"version":3,"names":["dagPb","require","CID","sha256","withTimeoutOption","module","exports","repo","preload","put","obj","options","gcLock","readLock","release","buf","encode","digest","hash","cid","createV0","blocks","signal","pin","pins","pinRecursively"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/object/put.js"],"sourcesContent":["'use strict'\n\nconst dagPb = require('@ipld/dag-pb')\nconst { CID } = require('multiformats/cid')\nconst { sha256 } = require('multiformats/hashes/sha2')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nmodule.exports = ({ repo, preload }) => {\n  /**\n   * @type {import('ipfs-core-types/src/object').API[\"put\"]}\n   */\n  async function put (obj, options = {}) {\n    const release = await repo.gcLock.readLock()\n\n    try {\n      const buf = dagPb.encode(obj)\n      const hash = await sha256.digest(buf)\n      const cid = CID.createV0(hash)\n\n      await repo.blocks.put(cid, buf, {\n        signal: options.signal\n      })\n\n      if (options.preload !== false) {\n        preload(cid)\n      }\n\n      if (options.pin) {\n        await repo.pins.pinRecursively(cid, {\n          signal: options.signal\n        })\n      }\n\n      return cid\n    } finally {\n      release()\n    }\n  }\n\n  return withTimeoutOption(put)\n}\n"],"mappings":"AAAA;;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,cAAD,CAArB;;AACA,eAAgBA,OAAO,CAAC,kBAAD,CAAvB;AAAA,IAAQC,GAAR,YAAQA,GAAR;;AACA,gBAAmBD,OAAO,CAAC,0BAAD,CAA1B;AAAA,IAAQE,MAAR,aAAQA,MAAR;;AACA,IAAMC,iBAAiB,GAAGH,OAAO,CAAC,yCAAD,CAAjC;AAEA;AACA;AACA;AACA;AACA;;;AACAI,MAAM,CAACC,OAAP,GAAiB,gBAAuB;EAAA,IAApBC,IAAoB,QAApBA,IAAoB;EAAA,IAAdC,OAAc,QAAdA,OAAc;;EACtC;AACF;AACA;EAHwC,SAIvBC,GAJuB;IAAA;EAAA;;EAAA;IAAA,kEAItC,iBAAoBC,GAApB;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAyBC,OAAzB,2DAAmC,EAAnC;cAAA;cAAA,OACwBJ,IAAI,CAACK,MAAL,CAAYC,QAAZ,EADxB;;YAAA;cACQC,OADR;cAAA;cAIUC,GAJV,GAIgBf,KAAK,CAACgB,MAAN,CAAaN,GAAb,CAJhB;cAAA;cAAA,OAKuBP,MAAM,CAACc,MAAP,CAAcF,GAAd,CALvB;;YAAA;cAKUG,IALV;cAMUC,GANV,GAMgBjB,GAAG,CAACkB,QAAJ,CAAaF,IAAb,CANhB;cAAA;cAAA,OAQUX,IAAI,CAACc,MAAL,CAAYZ,GAAZ,CAAgBU,GAAhB,EAAqBJ,GAArB,EAA0B;gBAC9BO,MAAM,EAAEX,OAAO,CAACW;cADc,CAA1B,CARV;;YAAA;cAYI,IAAIX,OAAO,CAACH,OAAR,KAAoB,KAAxB,EAA+B;gBAC7BA,OAAO,CAACW,GAAD,CAAP;cACD;;cAdL,KAgBQR,OAAO,CAACY,GAhBhB;gBAAA;gBAAA;cAAA;;cAAA;cAAA,OAiBYhB,IAAI,CAACiB,IAAL,CAAUC,cAAV,CAAyBN,GAAzB,EAA8B;gBAClCG,MAAM,EAAEX,OAAO,CAACW;cADkB,CAA9B,CAjBZ;;YAAA;cAAA,iCAsBWH,GAtBX;;YAAA;cAAA;cAwBIL,OAAO;cAxBX;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAJsC;IAAA;EAAA;;EAgCtC,OAAOV,iBAAiB,CAACK,GAAD,CAAxB;AACD,CAjCD"},"metadata":{},"sourceType":"script"}