{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _objectSpread = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _require = require('uint8arrays/from-string'),\n    uint8ArrayFromString = _require.fromString;\n\nvar multipartRequest = require('../lib/multipart-request');\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nvar abortSignal = require('../lib/abort-signal');\n\nvar _require2 = require('native-abort-controller'),\n    AbortController = _require2.AbortController;\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {ConfigAPI[\"replace\"]}\n   */\n  var replace = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(config) {\n      var options,\n          controller,\n          signal,\n          res,\n          _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              // allow aborting requests on body errors\n              controller = new AbortController();\n              signal = abortSignal(controller.signal, options.signal);\n              _context.t0 = api;\n              _context.t1 = _objectSpread;\n              _context.t2 = {\n                signal: signal,\n                searchParams: toUrlSearchParams(options)\n              };\n              _context.next = 8;\n              return multipartRequest(uint8ArrayFromString(JSON.stringify(config)), controller, options.headers);\n\n            case 8:\n              _context.t3 = _context.sent;\n              _context.t4 = (0, _context.t1)(_context.t2, _context.t3);\n              _context.next = 12;\n              return _context.t0.post.call(_context.t0, 'config/replace', _context.t4);\n\n            case 12:\n              res = _context.sent;\n              _context.next = 15;\n              return res.text();\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function replace(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return replace;\n});","map":{"version":3,"names":["require","uint8ArrayFromString","fromString","multipartRequest","configure","toUrlSearchParams","abortSignal","AbortController","module","exports","api","replace","config","options","controller","signal","searchParams","JSON","stringify","headers","post","res","text"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-http-client/src/config/replace.js"],"sourcesContent":["'use strict'\n\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\nconst multipartRequest = require('../lib/multipart-request')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst abortSignal = require('../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ConfigAPI[\"replace\"]}\n   */\n  const replace = async (config, options = {}) => {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('config/replace', {\n      signal,\n      searchParams: toUrlSearchParams(options),\n      ...(\n        await multipartRequest(uint8ArrayFromString(JSON.stringify(config)), controller, options.headers)\n      )\n    })\n\n    await res.text()\n  }\n\n  return replace\n})\n"],"mappings":"AAAA;;;;;;;;AAEA,eAA6CA,OAAO,CAAC,yBAAD,CAApD;AAAA,IAAoBC,oBAApB,YAAQC,UAAR;;AACA,IAAMC,gBAAgB,GAAGH,OAAO,CAAC,0BAAD,CAAhC;;AACA,IAAMI,SAAS,GAAGJ,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMK,iBAAiB,GAAGL,OAAO,CAAC,6BAAD,CAAjC;;AACA,IAAMM,WAAW,GAAGN,OAAO,CAAC,qBAAD,CAA3B;;AACA,gBAA4BA,OAAO,CAAC,yBAAD,CAAnC;AAAA,IAAQO,eAAR,aAAQA,eAAR;AAEA;AACA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiBL,SAAS,CAAC,UAAAM,GAAG,EAAI;EAChC;AACF;AACA;EACE,IAAMC,OAAO;IAAA,sEAAG,iBAAOC,MAAP;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAeC,OAAf,2DAAyB,EAAzB;cACd;cACMC,UAFQ,GAEK,IAAIP,eAAJ,EAFL;cAGRQ,MAHQ,GAGCT,WAAW,CAACQ,UAAU,CAACC,MAAZ,EAAoBF,OAAO,CAACE,MAA5B,CAHZ;cAAA,cAKIL,GALJ;cAAA;cAAA;gBAMZK,MAAM,EAANA,MANY;gBAOZC,YAAY,EAAEX,iBAAiB,CAACQ,OAAD;cAPnB;cAAA;cAAA,OASJV,gBAAgB,CAACF,oBAAoB,CAACgB,IAAI,CAACC,SAAL,CAAeN,MAAf,CAAD,CAArB,EAA+CE,UAA/C,EAA2DD,OAAO,CAACM,OAAnE,CATZ;;YAAA;cAAA;cAAA;cAAA;cAAA,mBAKQC,IALR,mBAKa,gBALb;;YAAA;cAKRC,GALQ;cAAA;cAAA,OAaRA,GAAG,CAACC,IAAJ,EAbQ;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAH;;IAAA,gBAAPX,OAAO;MAAA;IAAA;EAAA,GAAb;;EAgBA,OAAOA,OAAP;AACD,CArByB,CAA1B"},"metadata":{},"sourceType":"script"}