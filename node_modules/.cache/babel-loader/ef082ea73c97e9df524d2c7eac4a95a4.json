{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _slicedToArray = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar protocols = require('../protocols-table');\n\nvar _protocols = protocols('dnsaddr'),\n    dnsaddrCode = _protocols.code;\n/**\n * @typedef {import('..').Multiaddr} Multiaddr\n */\n\n/**\n * Resolver for dnsaddr addresses.\n *\n * @param {Multiaddr} addr\n * @returns {Promise<string[]>}\n */\n\n\nfunction dnsaddrResolver(_x) {\n  return _dnsaddrResolver.apply(this, arguments);\n}\n\nfunction _dnsaddrResolver() {\n  _dnsaddrResolver = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(addr) {\n    var Resolver, resolver, peerId, _ref, _ref2, hostname, records, addresses;\n\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            Resolver = require('./dns');\n            resolver = new Resolver();\n            peerId = addr.getPeerId();\n            _ref = addr.stringTuples().find(function (_ref3) {\n              var _ref4 = _slicedToArray(_ref3, 1),\n                  proto = _ref4[0];\n\n              return proto === dnsaddrCode;\n            }) || [], _ref2 = _slicedToArray(_ref, 2), hostname = _ref2[1];\n            _context.next = 6;\n            return resolver.resolveTxt(\"_dnsaddr.\".concat(hostname));\n\n          case 6:\n            records = _context.sent;\n            addresses = records.flat().map(function (a) {\n              return a.split('=')[1];\n            });\n\n            if (peerId) {\n              addresses = addresses.filter(function (entry) {\n                return entry.includes(peerId);\n              });\n            }\n\n            return _context.abrupt(\"return\", addresses);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _dnsaddrResolver.apply(this, arguments);\n}\n\nmodule.exports = {\n  dnsaddrResolver: dnsaddrResolver\n};","map":{"version":3,"names":["protocols","require","dnsaddrCode","code","dnsaddrResolver","addr","Resolver","resolver","peerId","getPeerId","stringTuples","find","proto","hostname","resolveTxt","records","addresses","flat","map","a","split","filter","entry","includes","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/multiaddr/src/resolvers/index.js"],"sourcesContent":["'use strict'\n\nconst protocols = require('../protocols-table')\n\nconst { code: dnsaddrCode } = protocols('dnsaddr')\n\n/**\n * @typedef {import('..').Multiaddr} Multiaddr\n */\n\n/**\n * Resolver for dnsaddr addresses.\n *\n * @param {Multiaddr} addr\n * @returns {Promise<string[]>}\n */\nasync function dnsaddrResolver (addr) {\n  const Resolver = require('./dns')\n  const resolver = new Resolver()\n\n  const peerId = addr.getPeerId()\n  const [, hostname] = addr.stringTuples().find(([proto]) => proto === dnsaddrCode) || []\n\n  const records = await resolver.resolveTxt(`_dnsaddr.${hostname}`)\n  let addresses = records.flat().map((a) => a.split('=')[1])\n\n  if (peerId) {\n    addresses = addresses.filter((entry) => entry.includes(peerId))\n  }\n\n  return addresses\n}\n\nmodule.exports = {\n  dnsaddrResolver\n}\n"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,oBAAD,CAAzB;;AAEA,iBAA8BD,SAAS,CAAC,SAAD,CAAvC;AAAA,IAAcE,WAAd,cAAQC,IAAR;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;SACeC,e;;;;;gFAAf,iBAAgCC,IAAhC;IAAA;;IAAA;MAAA;QAAA;UAAA;YACQC,QADR,GACmBL,OAAO,CAAC,OAAD,CAD1B;YAEQM,QAFR,GAEmB,IAAID,QAAJ,EAFnB;YAIQE,MAJR,GAIiBH,IAAI,CAACI,SAAL,EAJjB;YAAA,OAKuBJ,IAAI,CAACK,YAAL,GAAoBC,IAApB,CAAyB;cAAA;cAAA,IAAEC,KAAF;;cAAA,OAAaA,KAAK,KAAKV,WAAvB;YAAA,CAAzB,KAAgE,EALvF,mCAKWW,QALX;YAAA;YAAA,OAOwBN,QAAQ,CAACO,UAAT,oBAAgCD,QAAhC,EAPxB;;UAAA;YAOQE,OAPR;YAQMC,SARN,GAQkBD,OAAO,CAACE,IAAR,GAAeC,GAAf,CAAmB,UAACC,CAAD;cAAA,OAAOA,CAAC,CAACC,KAAF,CAAQ,GAAR,EAAa,CAAb,CAAP;YAAA,CAAnB,CARlB;;YAUE,IAAIZ,MAAJ,EAAY;cACVQ,SAAS,GAAGA,SAAS,CAACK,MAAV,CAAiB,UAACC,KAAD;gBAAA,OAAWA,KAAK,CAACC,QAAN,CAAef,MAAf,CAAX;cAAA,CAAjB,CAAZ;YACD;;YAZH,iCAcSQ,SAdT;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AAiBAQ,MAAM,CAACC,OAAP,GAAiB;EACfrB,eAAe,EAAfA;AADe,CAAjB"},"metadata":{},"sourceType":"script"}