{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar errcode = require('err-code');\n\nvar webcrypto = require('../webcrypto');\n\nvar _require = require('../util'),\n    base64urlToBuffer = _require.base64urlToBuffer;\n\nvar validateCurveType = require('./validate-curve-type');\n\nvar _require2 = require('uint8arrays/to-string'),\n    uint8ArrayToString = _require2.toString;\n\nvar _require3 = require('uint8arrays/concat'),\n    uint8ArrayConcat = _require3.concat;\n\nvar _require4 = require('uint8arrays/equals'),\n    uint8ArrayEquals = _require4.equals;\n\nvar bits = {\n  'P-256': 256,\n  'P-384': 384,\n  'P-521': 521\n};\n\nexports.generateEphmeralKeyPair = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(curve) {\n    var pair, genSharedKey, publicKey;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            validateCurveType(Object.keys(bits), curve);\n            _context2.next = 3;\n            return webcrypto.get().subtle.generateKey({\n              name: 'ECDH',\n              namedCurve: curve\n            }, true, ['deriveBits']);\n\n          case 3:\n            pair = _context2.sent;\n\n            // forcePrivate is used for testing only\n            genSharedKey = /*#__PURE__*/function () {\n              var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(theirPub, forcePrivate) {\n                var privateKey, keys, buffer;\n                return _regeneratorRuntime().wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        if (!forcePrivate) {\n                          _context.next = 6;\n                          break;\n                        }\n\n                        _context.next = 3;\n                        return webcrypto.get().subtle.importKey('jwk', unmarshalPrivateKey(curve, forcePrivate), {\n                          name: 'ECDH',\n                          namedCurve: curve\n                        }, false, ['deriveBits']);\n\n                      case 3:\n                        privateKey = _context.sent;\n                        _context.next = 7;\n                        break;\n\n                      case 6:\n                        privateKey = pair.privateKey;\n\n                      case 7:\n                        _context.next = 9;\n                        return webcrypto.get().subtle.importKey('jwk', unmarshalPublicKey(curve, theirPub), {\n                          name: 'ECDH',\n                          namedCurve: curve\n                        }, false, []);\n\n                      case 9:\n                        _context.t0 = _context.sent;\n                        _context.t1 = privateKey;\n                        keys = [_context.t0, _context.t1];\n                        _context.next = 14;\n                        return webcrypto.get().subtle.deriveBits({\n                          name: 'ECDH',\n                          namedCurve: curve,\n                          public: keys[0]\n                        }, keys[1], bits[curve]);\n\n                      case 14:\n                        buffer = _context.sent;\n                        return _context.abrupt(\"return\", new Uint8Array(buffer, buffer.byteOffset, buffer.byteLength));\n\n                      case 16:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n\n              return function genSharedKey(_x2, _x3) {\n                return _ref2.apply(this, arguments);\n              };\n            }();\n\n            _context2.next = 7;\n            return webcrypto.get().subtle.exportKey('jwk', pair.publicKey);\n\n          case 7:\n            publicKey = _context2.sent;\n            return _context2.abrupt(\"return\", {\n              key: marshalPublicKey(publicKey),\n              genSharedKey: genSharedKey\n            });\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar curveLengths = {\n  'P-256': 32,\n  'P-384': 48,\n  'P-521': 66\n}; // Marshal converts a jwk encodec ECDH public key into the\n// form specified in section 4.3.6 of ANSI X9.62. (This is the format\n// go-ipfs uses)\n\nfunction marshalPublicKey(jwk) {\n  var byteLen = curveLengths[jwk.crv];\n  return uint8ArrayConcat([Uint8Array.from([4]), // uncompressed point\n  base64urlToBuffer(jwk.x, byteLen), base64urlToBuffer(jwk.y, byteLen)], 1 + byteLen * 2);\n} // Unmarshal converts a point, serialized by Marshal, into an jwk encoded key\n\n\nfunction unmarshalPublicKey(curve, key) {\n  var byteLen = curveLengths[curve];\n\n  if (uint8ArrayEquals(!key.slice(0, 1), Uint8Array.from([4]))) {\n    throw errcode(new Error('Cannot unmarshal public key - invalid key format'), 'ERR_INVALID_KEY_FORMAT');\n  }\n\n  return {\n    kty: 'EC',\n    crv: curve,\n    x: uint8ArrayToString(key.slice(1, byteLen + 1), 'base64url'),\n    y: uint8ArrayToString(key.slice(1 + byteLen), 'base64url'),\n    ext: true\n  };\n}\n\nvar unmarshalPrivateKey = function unmarshalPrivateKey(curve, key) {\n  return _objectSpread(_objectSpread({}, unmarshalPublicKey(curve, key.public)), {}, {\n    d: uint8ArrayToString(key.private, 'base64url')\n  });\n};","map":{"version":3,"names":["errcode","require","webcrypto","base64urlToBuffer","validateCurveType","uint8ArrayToString","toString","uint8ArrayConcat","concat","uint8ArrayEquals","equals","bits","exports","generateEphmeralKeyPair","curve","Object","keys","get","subtle","generateKey","name","namedCurve","pair","genSharedKey","theirPub","forcePrivate","importKey","unmarshalPrivateKey","privateKey","unmarshalPublicKey","deriveBits","public","buffer","Uint8Array","byteOffset","byteLength","exportKey","publicKey","key","marshalPublicKey","curveLengths","jwk","byteLen","crv","from","x","y","slice","Error","kty","ext","d","private"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/peer-id/node_modules/libp2p-crypto/src/keys/ecdh-browser.js"],"sourcesContent":["'use strict'\n\nconst errcode = require('err-code')\nconst webcrypto = require('../webcrypto')\nconst { base64urlToBuffer } = require('../util')\nconst validateCurveType = require('./validate-curve-type')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\nconst { concat: uint8ArrayConcat } = require('uint8arrays/concat')\nconst { equals: uint8ArrayEquals } = require('uint8arrays/equals')\n\nconst bits = {\n  'P-256': 256,\n  'P-384': 384,\n  'P-521': 521\n}\n\nexports.generateEphmeralKeyPair = async function (curve) {\n  validateCurveType(Object.keys(bits), curve)\n  const pair = await webcrypto.get().subtle.generateKey(\n    {\n      name: 'ECDH',\n      namedCurve: curve\n    },\n    true,\n    ['deriveBits']\n  )\n\n  // forcePrivate is used for testing only\n  const genSharedKey = async (theirPub, forcePrivate) => {\n    let privateKey\n\n    if (forcePrivate) {\n      privateKey = await webcrypto.get().subtle.importKey(\n        'jwk',\n        unmarshalPrivateKey(curve, forcePrivate),\n        {\n          name: 'ECDH',\n          namedCurve: curve\n        },\n        false,\n        ['deriveBits']\n      )\n    } else {\n      privateKey = pair.privateKey\n    }\n\n    const keys = [\n      await webcrypto.get().subtle.importKey(\n        'jwk',\n        unmarshalPublicKey(curve, theirPub),\n        {\n          name: 'ECDH',\n          namedCurve: curve\n        },\n        false,\n        []\n      ),\n      privateKey\n    ]\n\n    const buffer = await webcrypto.get().subtle.deriveBits(\n      {\n        name: 'ECDH',\n        namedCurve: curve,\n        public: keys[0]\n      },\n      keys[1],\n      bits[curve]\n    )\n\n    return new Uint8Array(buffer, buffer.byteOffset, buffer.byteLength)\n  }\n\n  const publicKey = await webcrypto.get().subtle.exportKey('jwk', pair.publicKey)\n\n  return {\n    key: marshalPublicKey(publicKey),\n    genSharedKey\n  }\n}\n\nconst curveLengths = {\n  'P-256': 32,\n  'P-384': 48,\n  'P-521': 66\n}\n\n// Marshal converts a jwk encodec ECDH public key into the\n// form specified in section 4.3.6 of ANSI X9.62. (This is the format\n// go-ipfs uses)\nfunction marshalPublicKey (jwk) {\n  const byteLen = curveLengths[jwk.crv]\n\n  return uint8ArrayConcat([\n    Uint8Array.from([4]), // uncompressed point\n    base64urlToBuffer(jwk.x, byteLen),\n    base64urlToBuffer(jwk.y, byteLen)\n  ], 1 + byteLen * 2)\n}\n\n// Unmarshal converts a point, serialized by Marshal, into an jwk encoded key\nfunction unmarshalPublicKey (curve, key) {\n  const byteLen = curveLengths[curve]\n\n  if (uint8ArrayEquals(!key.slice(0, 1), Uint8Array.from([4]))) {\n    throw errcode(new Error('Cannot unmarshal public key - invalid key format'), 'ERR_INVALID_KEY_FORMAT')\n  }\n\n  return {\n    kty: 'EC',\n    crv: curve,\n    x: uint8ArrayToString(key.slice(1, byteLen + 1), 'base64url'),\n    y: uint8ArrayToString(key.slice(1 + byteLen), 'base64url'),\n    ext: true\n  }\n}\n\nconst unmarshalPrivateKey = (curve, key) => ({\n  ...unmarshalPublicKey(curve, key.public),\n  d: uint8ArrayToString(key.private, 'base64url')\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}