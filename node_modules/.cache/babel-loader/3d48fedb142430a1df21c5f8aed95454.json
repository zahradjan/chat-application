{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar set = require('just-safe-set');\n\nvar getDefaultConfig = require('../runtime/config-nodejs.js');\n\nvar withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nvar log = require('debug')('ipfs:core:config');\n/**\n * @typedef {import('ipfs-core-types/src/config').Config} Config\n *\n * @typedef {object} Transformer\n * @property {string} description\n * @property {(config: Config) => Config} transform\n */\n\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\n\n\nmodule.exports = function (_ref) {\n  var repo = _ref.repo;\n  return {\n    getAll: withTimeoutOption(getAll),\n    get: withTimeoutOption(get),\n    set: withTimeoutOption(set),\n    replace: withTimeoutOption(replace),\n    profiles: {\n      apply: withTimeoutOption(applyProfile),\n      list: withTimeoutOption(listProfiles)\n    }\n  };\n  /**\n   * @type {import('ipfs-core-types/src/config').API[\"getAll\"]}\n   */\n\n  function getAll() {\n    return _getAll.apply(this, arguments);\n  }\n  /**\n   * @type {import('ipfs-core-types/src/config').API[\"get\"]}\n   */\n\n\n  function _getAll() {\n    _getAll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var options,\n          _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              return _context.abrupt(\"return\", repo.config.getAll(options));\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _getAll.apply(this, arguments);\n  }\n\n  function get(_x, _x2) {\n    return _get.apply(this, arguments);\n  }\n  /**\n   * @type {import('ipfs-core-types/src/config').API[\"set\"]}\n   */\n\n\n  function _get() {\n    _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(key, options) {\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (key) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", Promise.reject(new Error('key argument is required')));\n\n            case 2:\n              return _context2.abrupt(\"return\", repo.config.get(key, options));\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _get.apply(this, arguments);\n  }\n\n  function set(_x3, _x4, _x5) {\n    return _set.apply(this, arguments);\n  }\n  /**\n   * @type {import('ipfs-core-types/src/config').API[\"replace\"]}\n   */\n\n\n  function _set() {\n    _set = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(key, value, options) {\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.abrupt(\"return\", repo.config.set(key, value, options));\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _set.apply(this, arguments);\n  }\n\n  function replace(_x6, _x7) {\n    return _replace.apply(this, arguments);\n  }\n  /**\n   * @type {import('ipfs-core-types/src/config/profiles').API[\"apply\"]}\n   */\n\n\n  function _replace() {\n    _replace = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(value, options) {\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              return _context4.abrupt(\"return\", repo.config.replace(value, options));\n\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    return _replace.apply(this, arguments);\n  }\n\n  function applyProfile(_x8) {\n    return _applyProfile.apply(this, arguments);\n  }\n\n  function _applyProfile() {\n    _applyProfile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(profileName) {\n      var options,\n          dryRun,\n          profile,\n          oldCfg,\n          newCfg,\n          _args5 = arguments;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              options = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {\n                dryRun: false\n              };\n              dryRun = options.dryRun;\n              profile = profiles[profileName];\n\n              if (profile) {\n                _context5.next = 5;\n                break;\n              }\n\n              throw new Error(\"No profile with name '\".concat(profileName, \"' exists\"));\n\n            case 5:\n              _context5.prev = 5;\n              _context5.next = 8;\n              return repo.config.getAll(options);\n\n            case 8:\n              oldCfg = _context5.sent;\n              newCfg = JSON.parse(JSON.stringify(oldCfg)); // clone\n\n              newCfg = profile.transform(newCfg);\n\n              if (dryRun) {\n                _context5.next = 14;\n                break;\n              }\n\n              _context5.next = 14;\n              return repo.config.replace(newCfg, options);\n\n            case 14:\n              // Scrub private key from output\n              // @ts-ignore `oldCfg.Identity` maybe undefined\n              delete oldCfg.Identity.PrivKey;\n              delete newCfg.Identity.PrivKey; // @ts-ignore TODO: move config typedefs into ipfs-repo\n\n              return _context5.abrupt(\"return\", {\n                original: oldCfg,\n                updated: newCfg\n              });\n\n            case 19:\n              _context5.prev = 19;\n              _context5.t0 = _context5[\"catch\"](5);\n              log(_context5.t0);\n              throw new Error(\"Could not apply profile '\".concat(profileName, \"' to config: \").concat(_context5.t0.message));\n\n            case 23:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, null, [[5, 19]]);\n    }));\n    return _applyProfile.apply(this, arguments);\n  }\n};\n/**\n * @type {import('ipfs-core-types/src/config/profiles').API[\"list\"]}\n */\n\n\nfunction listProfiles(_x9) {\n  return _listProfiles.apply(this, arguments);\n}\n/**\n * @type {Record<string, Transformer>}\n */\n\n\nfunction _listProfiles() {\n  _listProfiles = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(_options) {\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            return _context6.abrupt(\"return\", Object.keys(profiles).map(function (name) {\n              return {\n                name: name,\n                description: profiles[name].description\n              };\n            }));\n\n          case 1:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _listProfiles.apply(this, arguments);\n}\n\nvar profiles = {\n  server: {\n    description: 'Recommended for nodes with public IPv4 address (servers, VPSes, etc.), disables host and content discovery and UPnP in local networks.',\n    transform: function transform(config) {\n      set(config, 'Discovery.MDNS.Enabled', false);\n      set(config, 'Discovery.webRTCStar.Enabled', false);\n      config.Swarm = _objectSpread(_objectSpread({}, config.Swarm || {}), {}, {\n        DisableNatPortMap: true\n      });\n      return config;\n    }\n  },\n  'local-discovery': {\n    description: 'Sets default values to fields affected by `server` profile, enables discovery and UPnP in local networks.',\n    transform: function transform(config) {\n      set(config, 'Discovery.MDNS.Enabled', true);\n      set(config, 'Discovery.webRTCStar.Enabled', true);\n      set(config, 'Swarm', _objectSpread(_objectSpread({}, config.Swarm || {}), {}, {\n        DisableNatPortMap: false\n      }));\n      return config;\n    }\n  },\n  test: {\n    description: 'Reduces external interference, useful for running ipfs in test environments. Note that with these settings node won\\'t be able to talk to the rest of the network without manual bootstrap.',\n    transform: function transform(config) {\n      var defaultConfig = getDefaultConfig();\n      set(config, 'Addresses.API', defaultConfig.Addresses.API ? '/ip4/127.0.0.1/tcp/0' : '');\n      set(config, 'Addresses.Gateway', defaultConfig.Addresses.Gateway ? '/ip4/127.0.0.1/tcp/0' : '');\n      set(config, 'Addresses.Swarm', defaultConfig.Addresses.Swarm.length ? ['/ip4/127.0.0.1/tcp/0'] : []);\n      set(config, 'Addresses.Delegates', []);\n      set(config, 'Bootstrap', []);\n      set(config, 'Discovery.MDNS.Enabled', false);\n      set(config, 'Discovery.webRTCStar.Enabled', false);\n      set(config, 'Swarm', _objectSpread(_objectSpread({}, config.Swarm || {}), {}, {\n        DisableNatPortMap: true\n      }));\n      return config;\n    }\n  },\n  'default-networking': {\n    description: 'Restores default network settings. Inverse profile of the `test` profile.',\n    transform: function transform(config) {\n      var defaultConfig = getDefaultConfig();\n      set(config, 'Addresses.API', defaultConfig.Addresses.API);\n      set(config, 'Addresses.Gateway', defaultConfig.Addresses.Gateway);\n      set(config, 'Addresses.Swarm', defaultConfig.Addresses.Swarm);\n      set(config, 'Addresses.Delegates', defaultConfig.Addresses.Delegates);\n      set(config, 'Bootstrap', defaultConfig.Bootstrap);\n      set(config, 'Discovery.MDNS.Enabled', defaultConfig.Discovery.MDNS.Enabled);\n      set(config, 'Discovery.webRTCStar.Enabled', defaultConfig.Discovery.webRTCStar.Enabled);\n      set(config, 'Swarm', _objectSpread(_objectSpread({}, config.Swarm || {}), {}, {\n        DisableNatPortMap: false\n      }));\n      return config;\n    }\n  },\n  lowpower: {\n    description: 'Reduces daemon overhead on the system. May affect node functionality,performance of content discovery and data fetching may be degraded. Recommended for low power systems.',\n    transform: function transform(config) {\n      var Swarm = config.Swarm || {};\n      var ConnMgr = Swarm.ConnMgr || {};\n      ConnMgr.LowWater = 20;\n      ConnMgr.HighWater = 40;\n      Swarm.ConnMgr = ConnMgr;\n      config.Swarm = Swarm;\n      return config;\n    }\n  },\n  'default-power': {\n    description: 'Inverse of \"lowpower\" profile.',\n    transform: function transform(config) {\n      var defaultConfig = getDefaultConfig();\n      config.Swarm = defaultConfig.Swarm;\n      return config;\n    }\n  }\n};\nmodule.exports.profiles = profiles;","map":{"version":3,"names":["set","require","getDefaultConfig","withTimeoutOption","log","module","exports","repo","getAll","get","replace","profiles","apply","applyProfile","list","listProfiles","options","config","key","Promise","reject","Error","value","profileName","dryRun","profile","oldCfg","newCfg","JSON","parse","stringify","transform","Identity","PrivKey","original","updated","message","_options","Object","keys","map","name","description","server","Swarm","DisableNatPortMap","test","defaultConfig","Addresses","API","Gateway","length","Delegates","Bootstrap","Discovery","MDNS","Enabled","webRTCStar","lowpower","ConnMgr","LowWater","HighWater"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/config.js"],"sourcesContent":["'use strict'\n\nconst set = require('just-safe-set')\nconst getDefaultConfig = require('../runtime/config-nodejs.js')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst log = require('debug')('ipfs:core:config')\n\n/**\n * @typedef {import('ipfs-core-types/src/config').Config} Config\n *\n * @typedef {object} Transformer\n * @property {string} description\n * @property {(config: Config) => Config} transform\n */\n\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nmodule.exports = ({ repo }) => {\n  return {\n    getAll: withTimeoutOption(getAll),\n    get: withTimeoutOption(get),\n    set: withTimeoutOption(set),\n    replace: withTimeoutOption(replace),\n    profiles: {\n      apply: withTimeoutOption(applyProfile),\n      list: withTimeoutOption(listProfiles)\n    }\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config').API[\"getAll\"]}\n   */\n  async function getAll (options = {}) { // eslint-disable-line require-await\n    // @ts-ignore TODO: move config typedefs into ipfs-repo\n    return repo.config.getAll(options)\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config').API[\"get\"]}\n   */\n  async function get (key, options) { // eslint-disable-line require-await\n    if (!key) {\n      return Promise.reject(new Error('key argument is required'))\n    }\n\n    // @ts-ignore TODO: move config typedefs into ipfs-repo\n    return repo.config.get(key, options)\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config').API[\"set\"]}\n   */\n  async function set (key, value, options) { // eslint-disable-line require-await\n    return repo.config.set(key, value, options)\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config').API[\"replace\"]}\n   */\n  async function replace (value, options) { // eslint-disable-line require-await\n    return repo.config.replace(value, options)\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config/profiles').API[\"apply\"]}\n   */\n  async function applyProfile (profileName, options = { dryRun: false }) {\n    const { dryRun } = options\n\n    const profile = profiles[profileName]\n\n    if (!profile) {\n      throw new Error(`No profile with name '${profileName}' exists`)\n    }\n\n    try {\n      const oldCfg = await repo.config.getAll(options)\n      let newCfg = JSON.parse(JSON.stringify(oldCfg)) // clone\n      newCfg = profile.transform(newCfg)\n\n      if (!dryRun) {\n        await repo.config.replace(newCfg, options)\n      }\n\n      // Scrub private key from output\n      // @ts-ignore `oldCfg.Identity` maybe undefined\n      delete oldCfg.Identity.PrivKey\n      delete newCfg.Identity.PrivKey\n\n      // @ts-ignore TODO: move config typedefs into ipfs-repo\n      return { original: oldCfg, updated: newCfg }\n    } catch (err) {\n      log(err)\n\n      throw new Error(`Could not apply profile '${profileName}' to config: ${err.message}`)\n    }\n  }\n}\n\n/**\n * @type {import('ipfs-core-types/src/config/profiles').API[\"list\"]}\n */\nasync function listProfiles (_options) { // eslint-disable-line require-await\n  return Object.keys(profiles).map(name => ({\n    name,\n    description: profiles[name].description\n  }))\n}\n\n/**\n * @type {Record<string, Transformer>}\n */\nconst profiles = {\n  server: {\n    description: 'Recommended for nodes with public IPv4 address (servers, VPSes, etc.), disables host and content discovery and UPnP in local networks.',\n    transform: (config) => {\n      set(config, 'Discovery.MDNS.Enabled', false)\n      set(config, 'Discovery.webRTCStar.Enabled', false)\n      config.Swarm = {\n        ...(config.Swarm || {}),\n        DisableNatPortMap: true\n      }\n\n      return config\n    }\n  },\n  'local-discovery': {\n    description: 'Sets default values to fields affected by `server` profile, enables discovery and UPnP in local networks.',\n    transform: (config) => {\n      set(config, 'Discovery.MDNS.Enabled', true)\n      set(config, 'Discovery.webRTCStar.Enabled', true)\n      set(config, 'Swarm', {\n        ...(config.Swarm || {}),\n        DisableNatPortMap: false\n      })\n\n      return config\n    }\n  },\n  test: {\n    description: 'Reduces external interference, useful for running ipfs in test environments. Note that with these settings node won\\'t be able to talk to the rest of the network without manual bootstrap.',\n    transform: (config) => {\n      const defaultConfig = getDefaultConfig()\n\n      set(config, 'Addresses.API', defaultConfig.Addresses.API ? '/ip4/127.0.0.1/tcp/0' : '')\n      set(config, 'Addresses.Gateway', defaultConfig.Addresses.Gateway ? '/ip4/127.0.0.1/tcp/0' : '')\n      set(config, 'Addresses.Swarm', defaultConfig.Addresses.Swarm.length ? ['/ip4/127.0.0.1/tcp/0'] : [])\n      set(config, 'Addresses.Delegates', [])\n      set(config, 'Bootstrap', [])\n      set(config, 'Discovery.MDNS.Enabled', false)\n      set(config, 'Discovery.webRTCStar.Enabled', false)\n      set(config, 'Swarm', {\n        ...(config.Swarm || {}),\n        DisableNatPortMap: true\n      })\n\n      return config\n    }\n  },\n  'default-networking': {\n    description: 'Restores default network settings. Inverse profile of the `test` profile.',\n    transform: (config) => {\n      const defaultConfig = getDefaultConfig()\n\n      set(config, 'Addresses.API', defaultConfig.Addresses.API)\n      set(config, 'Addresses.Gateway', defaultConfig.Addresses.Gateway)\n      set(config, 'Addresses.Swarm', defaultConfig.Addresses.Swarm)\n      set(config, 'Addresses.Delegates', defaultConfig.Addresses.Delegates)\n      set(config, 'Bootstrap', defaultConfig.Bootstrap)\n      set(config, 'Discovery.MDNS.Enabled', defaultConfig.Discovery.MDNS.Enabled)\n      set(config, 'Discovery.webRTCStar.Enabled', defaultConfig.Discovery.webRTCStar.Enabled)\n      set(config, 'Swarm', {\n        ...(config.Swarm || {}),\n        DisableNatPortMap: false\n      })\n\n      return config\n    }\n  },\n  lowpower: {\n    description: 'Reduces daemon overhead on the system. May affect node functionality,performance of content discovery and data fetching may be degraded. Recommended for low power systems.',\n    transform: (config) => {\n      const Swarm = config.Swarm || {}\n      const ConnMgr = Swarm.ConnMgr || {}\n      ConnMgr.LowWater = 20\n      ConnMgr.HighWater = 40\n\n      Swarm.ConnMgr = ConnMgr\n      config.Swarm = Swarm\n\n      return config\n    }\n  },\n  'default-power': {\n    description: 'Inverse of \"lowpower\" profile.',\n    transform: (config) => {\n      const defaultConfig = getDefaultConfig()\n\n      config.Swarm = defaultConfig.Swarm\n\n      return config\n    }\n  }\n\n}\n\nmodule.exports.profiles = profiles\n"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,eAAD,CAAnB;;AACA,IAAMC,gBAAgB,GAAGD,OAAO,CAAC,6BAAD,CAAhC;;AACA,IAAME,iBAAiB,GAAGF,OAAO,CAAC,yCAAD,CAAjC;;AACA,IAAMG,GAAG,GAAGH,OAAO,CAAC,OAAD,CAAP,CAAiB,kBAAjB,CAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AACAI,MAAM,CAACC,OAAP,GAAiB,gBAAc;EAAA,IAAXC,IAAW,QAAXA,IAAW;EAC7B,OAAO;IACLC,MAAM,EAAEL,iBAAiB,CAACK,MAAD,CADpB;IAELC,GAAG,EAAEN,iBAAiB,CAACM,GAAD,CAFjB;IAGLT,GAAG,EAAEG,iBAAiB,CAACH,GAAD,CAHjB;IAILU,OAAO,EAAEP,iBAAiB,CAACO,OAAD,CAJrB;IAKLC,QAAQ,EAAE;MACRC,KAAK,EAAET,iBAAiB,CAACU,YAAD,CADhB;MAERC,IAAI,EAAEX,iBAAiB,CAACY,YAAD;IAFf;EALL,CAAP;EAWA;AACF;AACA;;EAd+B,SAedP,MAfc;IAAA;EAAA;EAoB7B;AACF;AACA;;;EAtB+B;IAAA,qEAe7B;MAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAuBQ,OAAvB,2DAAiC,EAAjC;cAAA,iCAEST,IAAI,CAACU,MAAL,CAAYT,MAAZ,CAAmBQ,OAAnB,CAFT;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAf6B;IAAA;EAAA;;EAAA,SAuBdP,GAvBc;IAAA;EAAA;EAgC7B;AACF;AACA;;;EAlC+B;IAAA,kEAuB7B,kBAAoBS,GAApB,EAAyBF,OAAzB;MAAA;QAAA;UAAA;YAAA;cAAA,IACOE,GADP;gBAAA;gBAAA;cAAA;;cAAA,kCAEWC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,0BAAV,CAAf,CAFX;;YAAA;cAAA,kCAMSd,IAAI,CAACU,MAAL,CAAYR,GAAZ,CAAgBS,GAAhB,EAAqBF,OAArB,CANT;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAvB6B;IAAA;EAAA;;EAAA,SAmCdhB,GAnCc;IAAA;EAAA;EAuC7B;AACF;AACA;;;EAzC+B;IAAA,kEAmC7B,kBAAoBkB,GAApB,EAAyBI,KAAzB,EAAgCN,OAAhC;MAAA;QAAA;UAAA;YAAA;cAAA,kCACST,IAAI,CAACU,MAAL,CAAYjB,GAAZ,CAAgBkB,GAAhB,EAAqBI,KAArB,EAA4BN,OAA5B,CADT;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAnC6B;IAAA;EAAA;;EAAA,SA0CdN,OA1Cc;IAAA;EAAA;EA8C7B;AACF;AACA;;;EAhD+B;IAAA,sEA0C7B,kBAAwBY,KAAxB,EAA+BN,OAA/B;MAAA;QAAA;UAAA;YAAA;cAAA,kCACST,IAAI,CAACU,MAAL,CAAYP,OAAZ,CAAoBY,KAApB,EAA2BN,OAA3B,CADT;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CA1C6B;IAAA;EAAA;;EAAA,SAiDdH,YAjDc;IAAA;EAAA;;EAAA;IAAA,2EAiD7B,kBAA6BU,WAA7B;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAA0CP,OAA1C,8DAAoD;gBAAEQ,MAAM,EAAE;cAAV,CAApD;cACUA,MADV,GACqBR,OADrB,CACUQ,MADV;cAGQC,OAHR,GAGkBd,QAAQ,CAACY,WAAD,CAH1B;;cAAA,IAKOE,OALP;gBAAA;gBAAA;cAAA;;cAAA,MAMU,IAAIJ,KAAJ,iCAAmCE,WAAnC,cANV;;YAAA;cAAA;cAAA;cAAA,OAUyBhB,IAAI,CAACU,MAAL,CAAYT,MAAZ,CAAmBQ,OAAnB,CAVzB;;YAAA;cAUUU,MAVV;cAWQC,MAXR,GAWiBC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeJ,MAAf,CAAX,CAXjB,EAWoD;;cAChDC,MAAM,GAAGF,OAAO,CAACM,SAAR,CAAkBJ,MAAlB,CAAT;;cAZJ,IAcSH,MAdT;gBAAA;gBAAA;cAAA;;cAAA;cAAA,OAeYjB,IAAI,CAACU,MAAL,CAAYP,OAAZ,CAAoBiB,MAApB,EAA4BX,OAA5B,CAfZ;;YAAA;cAkBI;cACA;cACA,OAAOU,MAAM,CAACM,QAAP,CAAgBC,OAAvB;cACA,OAAON,MAAM,CAACK,QAAP,CAAgBC,OAAvB,CArBJ,CAuBI;;cAvBJ,kCAwBW;gBAAEC,QAAQ,EAAER,MAAZ;gBAAoBS,OAAO,EAAER;cAA7B,CAxBX;;YAAA;cAAA;cAAA;cA0BIvB,GAAG,cAAH;cA1BJ,MA4BU,IAAIiB,KAAJ,oCAAsCE,WAAtC,0BAAiE,aAAIa,OAArE,EA5BV;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAjD6B;IAAA;EAAA;AAgF9B,CAhFD;AAkFA;AACA;AACA;;;SACerB,Y;;;AAOf;AACA;AACA;;;;6EATA,kBAA6BsB,QAA7B;IAAA;MAAA;QAAA;UAAA;YAAA,kCACSC,MAAM,CAACC,IAAP,CAAY5B,QAAZ,EAAsB6B,GAAtB,CAA0B,UAAAC,IAAI;cAAA,OAAK;gBACxCA,IAAI,EAAJA,IADwC;gBAExCC,WAAW,EAAE/B,QAAQ,CAAC8B,IAAD,CAAR,CAAeC;cAFY,CAAL;YAAA,CAA9B,CADT;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AAUA,IAAM/B,QAAQ,GAAG;EACfgC,MAAM,EAAE;IACND,WAAW,EAAE,wIADP;IAENX,SAAS,EAAE,mBAACd,MAAD,EAAY;MACrBjB,GAAG,CAACiB,MAAD,EAAS,wBAAT,EAAmC,KAAnC,CAAH;MACAjB,GAAG,CAACiB,MAAD,EAAS,8BAAT,EAAyC,KAAzC,CAAH;MACAA,MAAM,CAAC2B,KAAP,mCACM3B,MAAM,CAAC2B,KAAP,IAAgB,EADtB;QAEEC,iBAAiB,EAAE;MAFrB;MAKA,OAAO5B,MAAP;IACD;EAXK,CADO;EAcf,mBAAmB;IACjByB,WAAW,EAAE,2GADI;IAEjBX,SAAS,EAAE,mBAACd,MAAD,EAAY;MACrBjB,GAAG,CAACiB,MAAD,EAAS,wBAAT,EAAmC,IAAnC,CAAH;MACAjB,GAAG,CAACiB,MAAD,EAAS,8BAAT,EAAyC,IAAzC,CAAH;MACAjB,GAAG,CAACiB,MAAD,EAAS,OAAT,kCACGA,MAAM,CAAC2B,KAAP,IAAgB,EADnB;QAEDC,iBAAiB,EAAE;MAFlB,GAAH;MAKA,OAAO5B,MAAP;IACD;EAXgB,CAdJ;EA2Bf6B,IAAI,EAAE;IACJJ,WAAW,EAAE,6LADT;IAEJX,SAAS,EAAE,mBAACd,MAAD,EAAY;MACrB,IAAM8B,aAAa,GAAG7C,gBAAgB,EAAtC;MAEAF,GAAG,CAACiB,MAAD,EAAS,eAAT,EAA0B8B,aAAa,CAACC,SAAd,CAAwBC,GAAxB,GAA8B,sBAA9B,GAAuD,EAAjF,CAAH;MACAjD,GAAG,CAACiB,MAAD,EAAS,mBAAT,EAA8B8B,aAAa,CAACC,SAAd,CAAwBE,OAAxB,GAAkC,sBAAlC,GAA2D,EAAzF,CAAH;MACAlD,GAAG,CAACiB,MAAD,EAAS,iBAAT,EAA4B8B,aAAa,CAACC,SAAd,CAAwBJ,KAAxB,CAA8BO,MAA9B,GAAuC,CAAC,sBAAD,CAAvC,GAAkE,EAA9F,CAAH;MACAnD,GAAG,CAACiB,MAAD,EAAS,qBAAT,EAAgC,EAAhC,CAAH;MACAjB,GAAG,CAACiB,MAAD,EAAS,WAAT,EAAsB,EAAtB,CAAH;MACAjB,GAAG,CAACiB,MAAD,EAAS,wBAAT,EAAmC,KAAnC,CAAH;MACAjB,GAAG,CAACiB,MAAD,EAAS,8BAAT,EAAyC,KAAzC,CAAH;MACAjB,GAAG,CAACiB,MAAD,EAAS,OAAT,kCACGA,MAAM,CAAC2B,KAAP,IAAgB,EADnB;QAEDC,iBAAiB,EAAE;MAFlB,GAAH;MAKA,OAAO5B,MAAP;IACD;EAlBG,CA3BS;EA+Cf,sBAAsB;IACpByB,WAAW,EAAE,2EADO;IAEpBX,SAAS,EAAE,mBAACd,MAAD,EAAY;MACrB,IAAM8B,aAAa,GAAG7C,gBAAgB,EAAtC;MAEAF,GAAG,CAACiB,MAAD,EAAS,eAAT,EAA0B8B,aAAa,CAACC,SAAd,CAAwBC,GAAlD,CAAH;MACAjD,GAAG,CAACiB,MAAD,EAAS,mBAAT,EAA8B8B,aAAa,CAACC,SAAd,CAAwBE,OAAtD,CAAH;MACAlD,GAAG,CAACiB,MAAD,EAAS,iBAAT,EAA4B8B,aAAa,CAACC,SAAd,CAAwBJ,KAApD,CAAH;MACA5C,GAAG,CAACiB,MAAD,EAAS,qBAAT,EAAgC8B,aAAa,CAACC,SAAd,CAAwBI,SAAxD,CAAH;MACApD,GAAG,CAACiB,MAAD,EAAS,WAAT,EAAsB8B,aAAa,CAACM,SAApC,CAAH;MACArD,GAAG,CAACiB,MAAD,EAAS,wBAAT,EAAmC8B,aAAa,CAACO,SAAd,CAAwBC,IAAxB,CAA6BC,OAAhE,CAAH;MACAxD,GAAG,CAACiB,MAAD,EAAS,8BAAT,EAAyC8B,aAAa,CAACO,SAAd,CAAwBG,UAAxB,CAAmCD,OAA5E,CAAH;MACAxD,GAAG,CAACiB,MAAD,EAAS,OAAT,kCACGA,MAAM,CAAC2B,KAAP,IAAgB,EADnB;QAEDC,iBAAiB,EAAE;MAFlB,GAAH;MAKA,OAAO5B,MAAP;IACD;EAlBmB,CA/CP;EAmEfyC,QAAQ,EAAE;IACRhB,WAAW,EAAE,6KADL;IAERX,SAAS,EAAE,mBAACd,MAAD,EAAY;MACrB,IAAM2B,KAAK,GAAG3B,MAAM,CAAC2B,KAAP,IAAgB,EAA9B;MACA,IAAMe,OAAO,GAAGf,KAAK,CAACe,OAAN,IAAiB,EAAjC;MACAA,OAAO,CAACC,QAAR,GAAmB,EAAnB;MACAD,OAAO,CAACE,SAAR,GAAoB,EAApB;MAEAjB,KAAK,CAACe,OAAN,GAAgBA,OAAhB;MACA1C,MAAM,CAAC2B,KAAP,GAAeA,KAAf;MAEA,OAAO3B,MAAP;IACD;EAZO,CAnEK;EAiFf,iBAAiB;IACfyB,WAAW,EAAE,gCADE;IAEfX,SAAS,EAAE,mBAACd,MAAD,EAAY;MACrB,IAAM8B,aAAa,GAAG7C,gBAAgB,EAAtC;MAEAe,MAAM,CAAC2B,KAAP,GAAeG,aAAa,CAACH,KAA7B;MAEA,OAAO3B,MAAP;IACD;EARc;AAjFF,CAAjB;AA8FAZ,MAAM,CAACC,OAAP,CAAeK,QAAf,GAA0BA,QAA1B"},"metadata":{},"sourceType":"script"}