{"ast":null,"code":"'use strict';\n\nconst {\n  Record: PBRecord\n} = require('./record');\n\nconst utils = require('../utils');\n/**\n * @typedef {{ key: Uint8Array, value: Uint8Array, timeReceived: string }} ProtobufRecord\n */\n\n\nclass Record {\n  /**\n   * @param {Uint8Array} [key]\n   * @param {Uint8Array} [value]\n   * @param {Date} [timeReceived]\n   */\n  constructor(key, value, timeReceived) {\n    if (!(key instanceof Uint8Array)) {\n      throw new Error('key must be a Uint8Array');\n    }\n\n    if (!(value instanceof Uint8Array)) {\n      throw new Error('value must be a Uint8Array');\n    }\n\n    this.key = key;\n    this.value = value;\n    this.timeReceived = timeReceived;\n  }\n\n  serialize() {\n    return PBRecord.encode(this.prepareSerialize()).finish();\n  }\n  /**\n   * Return the object format ready to be given to the protobuf library.\n   */\n\n\n  prepareSerialize() {\n    return {\n      key: this.key,\n      value: this.value,\n      timeReceived: this.timeReceived && utils.toRFC3339(this.timeReceived)\n    };\n  }\n  /**\n   * Decode a protobuf encoded record.\n   *\n   * @param {Uint8Array} raw\n   */\n\n\n  static deserialize(raw) {\n    const message = PBRecord.decode(raw);\n    return Record.fromDeserialized(PBRecord.toObject(message, {\n      defaults: false,\n      arrays: true,\n      longs: Number,\n      objects: false\n    }));\n  }\n  /**\n   * Create a record from the raw object returned from the protobuf library.\n   *\n   * @param {{ [k: string]: any }} obj\n   */\n\n\n  static fromDeserialized(obj) {\n    let recvtime;\n\n    if (obj.timeReceived) {\n      recvtime = utils.parseRFC3339(obj.timeReceived);\n    }\n\n    const rec = new Record(obj.key, obj.value, recvtime);\n    return rec;\n  }\n\n}\n\nmodule.exports = Record;","map":{"version":3,"names":["Record","PBRecord","require","utils","constructor","key","value","timeReceived","Uint8Array","Error","serialize","encode","prepareSerialize","finish","toRFC3339","deserialize","raw","message","decode","fromDeserialized","toObject","defaults","arrays","longs","Number","objects","obj","recvtime","parseRFC3339","rec","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-record/src/record/index.js"],"sourcesContent":["'use strict'\n\nconst {\n  Record: PBRecord\n} = require('./record')\nconst utils = require('../utils')\n\n/**\n * @typedef {{ key: Uint8Array, value: Uint8Array, timeReceived: string }} ProtobufRecord\n */\n\nclass Record {\n  /**\n   * @param {Uint8Array} [key]\n   * @param {Uint8Array} [value]\n   * @param {Date} [timeReceived]\n   */\n  constructor (key, value, timeReceived) {\n    if (!(key instanceof Uint8Array)) {\n      throw new Error('key must be a Uint8Array')\n    }\n\n    if (!(value instanceof Uint8Array)) {\n      throw new Error('value must be a Uint8Array')\n    }\n\n    this.key = key\n    this.value = value\n    this.timeReceived = timeReceived\n  }\n\n  serialize () {\n    return PBRecord.encode(this.prepareSerialize()).finish()\n  }\n\n  /**\n   * Return the object format ready to be given to the protobuf library.\n   */\n  prepareSerialize () {\n    return {\n      key: this.key,\n      value: this.value,\n      timeReceived: this.timeReceived && utils.toRFC3339(this.timeReceived)\n    }\n  }\n\n  /**\n   * Decode a protobuf encoded record.\n   *\n   * @param {Uint8Array} raw\n   */\n  static deserialize (raw) {\n    const message = PBRecord.decode(raw)\n    return Record.fromDeserialized(PBRecord.toObject(message, {\n      defaults: false,\n      arrays: true,\n      longs: Number,\n      objects: false\n    }))\n  }\n\n  /**\n   * Create a record from the raw object returned from the protobuf library.\n   *\n   * @param {{ [k: string]: any }} obj\n   */\n  static fromDeserialized (obj) {\n    let recvtime\n    if (obj.timeReceived) {\n      recvtime = utils.parseRFC3339(obj.timeReceived)\n    }\n\n    const rec = new Record(\n      obj.key, obj.value, recvtime\n    )\n\n    return rec\n  }\n}\n\nmodule.exports = Record\n"],"mappings":"AAAA;;AAEA,MAAM;EACJA,MAAM,EAAEC;AADJ,IAEFC,OAAO,CAAC,UAAD,CAFX;;AAGA,MAAMC,KAAK,GAAGD,OAAO,CAAC,UAAD,CAArB;AAEA;AACA;AACA;;;AAEA,MAAMF,MAAN,CAAa;EACX;AACF;AACA;AACA;AACA;EACEI,WAAW,CAAEC,GAAF,EAAOC,KAAP,EAAcC,YAAd,EAA4B;IACrC,IAAI,EAAEF,GAAG,YAAYG,UAAjB,CAAJ,EAAkC;MAChC,MAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;IACD;;IAED,IAAI,EAAEH,KAAK,YAAYE,UAAnB,CAAJ,EAAoC;MAClC,MAAM,IAAIC,KAAJ,CAAU,4BAAV,CAAN;IACD;;IAED,KAAKJ,GAAL,GAAWA,GAAX;IACA,KAAKC,KAAL,GAAaA,KAAb;IACA,KAAKC,YAAL,GAAoBA,YAApB;EACD;;EAEDG,SAAS,GAAI;IACX,OAAOT,QAAQ,CAACU,MAAT,CAAgB,KAAKC,gBAAL,EAAhB,EAAyCC,MAAzC,EAAP;EACD;EAED;AACF;AACA;;;EACED,gBAAgB,GAAI;IAClB,OAAO;MACLP,GAAG,EAAE,KAAKA,GADL;MAELC,KAAK,EAAE,KAAKA,KAFP;MAGLC,YAAY,EAAE,KAAKA,YAAL,IAAqBJ,KAAK,CAACW,SAAN,CAAgB,KAAKP,YAArB;IAH9B,CAAP;EAKD;EAED;AACF;AACA;AACA;AACA;;;EACoB,OAAXQ,WAAW,CAAEC,GAAF,EAAO;IACvB,MAAMC,OAAO,GAAGhB,QAAQ,CAACiB,MAAT,CAAgBF,GAAhB,CAAhB;IACA,OAAOhB,MAAM,CAACmB,gBAAP,CAAwBlB,QAAQ,CAACmB,QAAT,CAAkBH,OAAlB,EAA2B;MACxDI,QAAQ,EAAE,KAD8C;MAExDC,MAAM,EAAE,IAFgD;MAGxDC,KAAK,EAAEC,MAHiD;MAIxDC,OAAO,EAAE;IAJ+C,CAA3B,CAAxB,CAAP;EAMD;EAED;AACF;AACA;AACA;AACA;;;EACyB,OAAhBN,gBAAgB,CAAEO,GAAF,EAAO;IAC5B,IAAIC,QAAJ;;IACA,IAAID,GAAG,CAACnB,YAAR,EAAsB;MACpBoB,QAAQ,GAAGxB,KAAK,CAACyB,YAAN,CAAmBF,GAAG,CAACnB,YAAvB,CAAX;IACD;;IAED,MAAMsB,GAAG,GAAG,IAAI7B,MAAJ,CACV0B,GAAG,CAACrB,GADM,EACDqB,GAAG,CAACpB,KADH,EACUqB,QADV,CAAZ;IAIA,OAAOE,GAAP;EACD;;AAlEU;;AAqEbC,MAAM,CAACC,OAAP,GAAiB/B,MAAjB"},"metadata":{},"sourceType":"script"}