{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar hasher = require('multiformats/hashes/hasher');\n\nvar multiformats = require('multiformats');\n\nvar mur = require('murmurhash3js-revisited');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar mur__default = /*#__PURE__*/_interopDefaultLegacy(mur);\n\nfunction fromNumberTo32BitBuf(number) {\n  var bytes = new Array(4);\n\n  for (var i = 0; i < 4; i++) {\n    bytes[i] = number & 255;\n    number = number >> 8;\n  }\n\n  return new Uint8Array(bytes);\n}\n\nvar murmur332 = hasher.from({\n  name: 'murmur3-32',\n  code: 35,\n  encode: function encode(input) {\n    return fromNumberTo32BitBuf(mur__default[\"default\"].x86.hash32(input));\n  }\n});\nvar murmur3128 = hasher.from({\n  name: 'murmur3-128',\n  code: 34,\n  encode: function encode(input) {\n    return multiformats.bytes.fromHex(mur__default[\"default\"].x64.hash128(input));\n  }\n});\nexports.murmur3128 = murmur3128;\nexports.murmur332 = murmur332;","map":{"version":3,"names":["Object","defineProperty","exports","value","hasher","require","multiformats","mur","_interopDefaultLegacy","e","mur__default","fromNumberTo32BitBuf","number","bytes","Array","i","Uint8Array","murmur332","from","name","code","encode","input","x86","hash32","murmur3128","fromHex","x64","hash128"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/@multiformats/murmur3/cjs/index.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar hasher = require('multiformats/hashes/hasher');\nvar multiformats = require('multiformats');\nvar mur = require('murmurhash3js-revisited');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar mur__default = /*#__PURE__*/_interopDefaultLegacy(mur);\n\nfunction fromNumberTo32BitBuf(number) {\n  const bytes = new Array(4);\n  for (let i = 0; i < 4; i++) {\n    bytes[i] = number & 255;\n    number = number >> 8;\n  }\n  return new Uint8Array(bytes);\n}\nconst murmur332 = hasher.from({\n  name: 'murmur3-32',\n  code: 35,\n  encode: input => fromNumberTo32BitBuf(mur__default[\"default\"].x86.hash32(input))\n});\nconst murmur3128 = hasher.from({\n  name: 'murmur3-128',\n  code: 34,\n  encode: input => multiformats.bytes.fromHex(mur__default[\"default\"].x64.hash128(input))\n});\n\nexports.murmur3128 = murmur3128;\nexports.murmur332 = murmur332;\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,4BAAD,CAApB;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,cAAD,CAA1B;;AACA,IAAIE,GAAG,GAAGF,OAAO,CAAC,yBAAD,CAAjB;;AAEA,SAASG,qBAAT,CAAgCC,CAAhC,EAAmC;EAAE,OAAOA,CAAC,IAAI,OAAOA,CAAP,KAAa,QAAlB,IAA8B,aAAaA,CAA3C,GAA+CA,CAA/C,GAAmD;IAAE,WAAWA;EAAb,CAA1D;AAA6E;;AAElH,IAAIC,YAAY,GAAG,aAAaF,qBAAqB,CAACD,GAAD,CAArD;;AAEA,SAASI,oBAAT,CAA8BC,MAA9B,EAAsC;EACpC,IAAMC,KAAK,GAAG,IAAIC,KAAJ,CAAU,CAAV,CAAd;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;IAC1BF,KAAK,CAACE,CAAD,CAAL,GAAWH,MAAM,GAAG,GAApB;IACAA,MAAM,GAAGA,MAAM,IAAI,CAAnB;EACD;;EACD,OAAO,IAAII,UAAJ,CAAeH,KAAf,CAAP;AACD;;AACD,IAAMI,SAAS,GAAGb,MAAM,CAACc,IAAP,CAAY;EAC5BC,IAAI,EAAE,YADsB;EAE5BC,IAAI,EAAE,EAFsB;EAG5BC,MAAM,EAAE,gBAAAC,KAAK;IAAA,OAAIX,oBAAoB,CAACD,YAAY,CAAC,SAAD,CAAZ,CAAwBa,GAAxB,CAA4BC,MAA5B,CAAmCF,KAAnC,CAAD,CAAxB;EAAA;AAHe,CAAZ,CAAlB;AAKA,IAAMG,UAAU,GAAGrB,MAAM,CAACc,IAAP,CAAY;EAC7BC,IAAI,EAAE,aADuB;EAE7BC,IAAI,EAAE,EAFuB;EAG7BC,MAAM,EAAE,gBAAAC,KAAK;IAAA,OAAIhB,YAAY,CAACO,KAAb,CAAmBa,OAAnB,CAA2BhB,YAAY,CAAC,SAAD,CAAZ,CAAwBiB,GAAxB,CAA4BC,OAA5B,CAAoCN,KAApC,CAA3B,CAAJ;EAAA;AAHgB,CAAZ,CAAnB;AAMApB,OAAO,CAACuB,UAAR,GAAqBA,UAArB;AACAvB,OAAO,CAACe,SAAR,GAAoBA,SAApB"},"metadata":{},"sourceType":"script"}