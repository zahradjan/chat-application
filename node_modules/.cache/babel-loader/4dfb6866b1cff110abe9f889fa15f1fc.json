{"ast":null,"code":"'use strict';\n\nvar errCode = require('err-code');\n\nvar ipfsUnixfs = require('ipfs-unixfs');\n\nvar findCidInShard = require('../../utils/find-cid-in-shard.js');\n\nvar dagPb = require('@ipld/dag-pb');\n\nvar file = require('./content/file.js');\n\nvar directory = require('./content/directory.js');\n\nvar hamtShardedDirectory = require('./content/hamt-sharded-directory.js');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\n\nconst findLinkCid = (node, name) => {\n  const link = node.Links.find(link => link.Name === name);\n  return link && link.Hash;\n};\n\nconst contentExporters = {\n  raw: file,\n  file: file,\n  directory: directory,\n  'hamt-sharded-directory': hamtShardedDirectory,\n  metadata: (cid, node, unixfs, path, resolve, depth, blockstore) => {\n    return () => [];\n  },\n  symlink: (cid, node, unixfs, path, resolve, depth, blockstore) => {\n    return () => [];\n  }\n};\n\nconst unixFsResolver = async (cid, name, path, toResolve, resolve, depth, blockstore, options) => {\n  const block = await blockstore.get(cid, options);\n  const node = dagPb.decode(block);\n  let unixfs;\n  let next;\n\n  if (!name) {\n    name = cid.toString();\n  }\n\n  if (node.Data == null) {\n    throw errCode__default[\"default\"](new Error('no data in PBNode'), 'ERR_NOT_UNIXFS');\n  }\n\n  try {\n    unixfs = ipfsUnixfs.UnixFS.unmarshal(node.Data);\n  } catch (err) {\n    throw errCode__default[\"default\"](err, 'ERR_NOT_UNIXFS');\n  }\n\n  if (!path) {\n    path = name;\n  }\n\n  if (toResolve.length) {\n    let linkCid;\n\n    if (unixfs && unixfs.type === 'hamt-sharded-directory') {\n      linkCid = await findCidInShard(node, toResolve[0], blockstore);\n    } else {\n      linkCid = findLinkCid(node, toResolve[0]);\n    }\n\n    if (!linkCid) {\n      throw errCode__default[\"default\"](new Error('file does not exist'), 'ERR_NOT_FOUND');\n    }\n\n    const nextName = toResolve.shift();\n    const nextPath = `${path}/${nextName}`;\n    next = {\n      cid: linkCid,\n      toResolve,\n      name: nextName || '',\n      path: nextPath\n    };\n  }\n\n  return {\n    entry: {\n      type: unixfs.isDirectory() ? 'directory' : 'file',\n      name,\n      path,\n      cid,\n      content: contentExporters[unixfs.type](cid, node, unixfs, path, resolve, depth, blockstore),\n      unixfs,\n      depth,\n      node,\n      size: unixfs.fileSize()\n    },\n    next\n  };\n};\n\nmodule.exports = unixFsResolver;","map":{"version":3,"names":["errCode","require","ipfsUnixfs","findCidInShard","dagPb","file","directory","hamtShardedDirectory","_interopDefaultLegacy","e","errCode__default","findLinkCid","node","name","link","Links","find","Name","Hash","contentExporters","raw","metadata","cid","unixfs","path","resolve","depth","blockstore","symlink","unixFsResolver","toResolve","options","block","get","decode","next","toString","Data","Error","UnixFS","unmarshal","err","length","linkCid","type","nextName","shift","nextPath","entry","isDirectory","content","size","fileSize","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-unixfs-exporter/cjs/src/resolvers/unixfs-v1/index.js"],"sourcesContent":["'use strict';\n\nvar errCode = require('err-code');\nvar ipfsUnixfs = require('ipfs-unixfs');\nvar findCidInShard = require('../../utils/find-cid-in-shard.js');\nvar dagPb = require('@ipld/dag-pb');\nvar file = require('./content/file.js');\nvar directory = require('./content/directory.js');\nvar hamtShardedDirectory = require('./content/hamt-sharded-directory.js');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\n\nconst findLinkCid = (node, name) => {\n  const link = node.Links.find(link => link.Name === name);\n  return link && link.Hash;\n};\nconst contentExporters = {\n  raw: file,\n  file: file,\n  directory: directory,\n  'hamt-sharded-directory': hamtShardedDirectory,\n  metadata: (cid, node, unixfs, path, resolve, depth, blockstore) => {\n    return () => [];\n  },\n  symlink: (cid, node, unixfs, path, resolve, depth, blockstore) => {\n    return () => [];\n  }\n};\nconst unixFsResolver = async (cid, name, path, toResolve, resolve, depth, blockstore, options) => {\n  const block = await blockstore.get(cid, options);\n  const node = dagPb.decode(block);\n  let unixfs;\n  let next;\n  if (!name) {\n    name = cid.toString();\n  }\n  if (node.Data == null) {\n    throw errCode__default[\"default\"](new Error('no data in PBNode'), 'ERR_NOT_UNIXFS');\n  }\n  try {\n    unixfs = ipfsUnixfs.UnixFS.unmarshal(node.Data);\n  } catch (err) {\n    throw errCode__default[\"default\"](err, 'ERR_NOT_UNIXFS');\n  }\n  if (!path) {\n    path = name;\n  }\n  if (toResolve.length) {\n    let linkCid;\n    if (unixfs && unixfs.type === 'hamt-sharded-directory') {\n      linkCid = await findCidInShard(node, toResolve[0], blockstore);\n    } else {\n      linkCid = findLinkCid(node, toResolve[0]);\n    }\n    if (!linkCid) {\n      throw errCode__default[\"default\"](new Error('file does not exist'), 'ERR_NOT_FOUND');\n    }\n    const nextName = toResolve.shift();\n    const nextPath = `${ path }/${ nextName }`;\n    next = {\n      cid: linkCid,\n      toResolve,\n      name: nextName || '',\n      path: nextPath\n    };\n  }\n  return {\n    entry: {\n      type: unixfs.isDirectory() ? 'directory' : 'file',\n      name,\n      path,\n      cid,\n      content: contentExporters[unixfs.type](cid, node, unixfs, path, resolve, depth, blockstore),\n      unixfs,\n      depth,\n      node,\n      size: unixfs.fileSize()\n    },\n    next\n  };\n};\n\nmodule.exports = unixFsResolver;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}