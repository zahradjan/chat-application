{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar isIPFS = require('is-ipfs');\n\nvar toCidAndPath = require('ipfs-core-utils/src/to-cid-and-path');\n\nvar drain = require('it-drain');\n\nvar _require = require('../../utils'),\n    resolve = _require.resolve;\n/**\n * resolves the given path by parsing out protocol-specific entries\n * (e.g. /ipns/<node-key>) and then going through the /ipfs/ entries and returning the final node\n *\n * @param {Object} context\n * @param {import('../ipns')} context.ipns\n * @param {import('ipfs-repo').IPFSRepo} context.repo\n * @param {import('ipfs-core-utils/src/multicodecs')} context.codecs\n * @param {string} name\n * @param {import('ipfs-core-types/src/utils').AbortOptions} [options]\n */\n\n\nexports.resolvePath = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref, name, options) {\n    var ipns, repo, codecs, _toCidAndPath, cid, path;\n\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            ipns = _ref.ipns, repo = _ref.repo, codecs = _ref.codecs;\n\n            if (!isIPFS.ipnsPath(name)) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\", ipns.resolve(name));\n\n          case 3:\n            _toCidAndPath = toCidAndPath(name), cid = _toCidAndPath.cid, path = _toCidAndPath.path; // ipfs path\n\n            _context.next = 6;\n            return drain(resolve(cid, path || '', codecs, repo, options));\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x, _x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["isIPFS","require","toCidAndPath","drain","resolve","exports","resolvePath","name","options","ipns","repo","codecs","ipnsPath","cid","path"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/name/utils.js"],"sourcesContent":["'use strict'\n\nconst isIPFS = require('is-ipfs')\nconst toCidAndPath = require('ipfs-core-utils/src/to-cid-and-path')\nconst drain = require('it-drain')\nconst { resolve } = require('../../utils')\n\n/**\n * resolves the given path by parsing out protocol-specific entries\n * (e.g. /ipns/<node-key>) and then going through the /ipfs/ entries and returning the final node\n *\n * @param {Object} context\n * @param {import('../ipns')} context.ipns\n * @param {import('ipfs-repo').IPFSRepo} context.repo\n * @param {import('ipfs-core-utils/src/multicodecs')} context.codecs\n * @param {string} name\n * @param {import('ipfs-core-types/src/utils').AbortOptions} [options]\n */\nexports.resolvePath = async ({ ipns, repo, codecs }, name, options) => {\n  // ipns path\n  if (isIPFS.ipnsPath(name)) {\n    return ipns.resolve(name)\n  }\n\n  const {\n    cid,\n    path\n  } = toCidAndPath(name)\n\n  // ipfs path\n  await drain(resolve(cid, path || '', codecs, repo, options))\n}\n"],"mappings":"AAAA;;;;;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAtB;;AACA,IAAMC,YAAY,GAAGD,OAAO,CAAC,qCAAD,CAA5B;;AACA,IAAME,KAAK,GAAGF,OAAO,CAAC,UAAD,CAArB;;AACA,eAAoBA,OAAO,CAAC,aAAD,CAA3B;AAAA,IAAQG,OAAR,YAAQA,OAAR;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,OAAO,CAACC,WAAR;EAAA,uEAAsB,uBAA+BC,IAA/B,EAAqCC,OAArC;IAAA;;IAAA;MAAA;QAAA;UAAA;YAASC,IAAT,QAASA,IAAT,EAAeC,IAAf,QAAeA,IAAf,EAAqBC,MAArB,QAAqBA,MAArB;;YAAA,KAEhBX,MAAM,CAACY,QAAP,CAAgBL,IAAhB,CAFgB;cAAA;cAAA;YAAA;;YAAA,iCAGXE,IAAI,CAACL,OAAL,CAAaG,IAAb,CAHW;;UAAA;YAAA,gBAShBL,YAAY,CAACK,IAAD,CATI,EAOlBM,GAPkB,iBAOlBA,GAPkB,EAQlBC,IARkB,iBAQlBA,IARkB,EAWpB;;YAXoB;YAAA,OAYdX,KAAK,CAACC,OAAO,CAACS,GAAD,EAAMC,IAAI,IAAI,EAAd,EAAkBH,MAAlB,EAA0BD,IAA1B,EAAgCF,OAAhC,CAAR,CAZS;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAtB;;EAAA;IAAA;EAAA;AAAA"},"metadata":{},"sourceType":"script"}