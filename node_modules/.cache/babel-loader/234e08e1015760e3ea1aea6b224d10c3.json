{"ast":null,"code":"/*eslint-disable*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\"); // Common aliases\n\n\nvar $Reader = $protobuf.Reader,\n    $Writer = $protobuf.Writer,\n    $util = $protobuf.util; // Exported root namespace\n\nvar $root = $protobuf.roots[\"libp2p-address-book\"] || ($protobuf.roots[\"libp2p-address-book\"] = {});\n\n$root.Addresses = function () {\n  /**\n   * Properties of an Addresses.\n   * @exports IAddresses\n   * @interface IAddresses\n   * @property {Array.<Addresses.IAddress>|null} [addrs] Addresses addrs\n   * @property {Addresses.ICertifiedRecord|null} [certifiedRecord] Addresses certifiedRecord\n   */\n\n  /**\n   * Constructs a new Addresses.\n   * @exports Addresses\n   * @classdesc Represents an Addresses.\n   * @implements IAddresses\n   * @constructor\n   * @param {IAddresses=} [p] Properties to set\n   */\n  function Addresses(p) {\n    this.addrs = [];\n    if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n  }\n  /**\n   * Addresses addrs.\n   * @member {Array.<Addresses.IAddress>} addrs\n   * @memberof Addresses\n   * @instance\n   */\n\n\n  Addresses.prototype.addrs = $util.emptyArray;\n  /**\n   * Addresses certifiedRecord.\n   * @member {Addresses.ICertifiedRecord|null|undefined} certifiedRecord\n   * @memberof Addresses\n   * @instance\n   */\n\n  Addresses.prototype.certifiedRecord = null;\n  /**\n   * Encodes the specified Addresses message. Does not implicitly {@link Addresses.verify|verify} messages.\n   * @function encode\n   * @memberof Addresses\n   * @static\n   * @param {IAddresses} m Addresses message or plain object to encode\n   * @param {$protobuf.Writer} [w] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n  Addresses.encode = function encode(m, w) {\n    if (!w) w = $Writer.create();\n\n    if (m.addrs != null && m.addrs.length) {\n      for (var i = 0; i < m.addrs.length; ++i) $root.Addresses.Address.encode(m.addrs[i], w.uint32(10).fork()).ldelim();\n    }\n\n    if (m.certifiedRecord != null && Object.hasOwnProperty.call(m, \"certifiedRecord\")) $root.Addresses.CertifiedRecord.encode(m.certifiedRecord, w.uint32(18).fork()).ldelim();\n    return w;\n  };\n  /**\n   * Decodes an Addresses message from the specified reader or buffer.\n   * @function decode\n   * @memberof Addresses\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n   * @param {number} [l] Message length if known beforehand\n   * @returns {Addresses} Addresses\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  Addresses.decode = function decode(r, l) {\n    if (!(r instanceof $Reader)) r = $Reader.create(r);\n    var c = l === undefined ? r.len : r.pos + l,\n        m = new $root.Addresses();\n\n    while (r.pos < c) {\n      var t = r.uint32();\n\n      switch (t >>> 3) {\n        case 1:\n          if (!(m.addrs && m.addrs.length)) m.addrs = [];\n          m.addrs.push($root.Addresses.Address.decode(r, r.uint32()));\n          break;\n\n        case 2:\n          m.certifiedRecord = $root.Addresses.CertifiedRecord.decode(r, r.uint32());\n          break;\n\n        default:\n          r.skipType(t & 7);\n          break;\n      }\n    }\n\n    return m;\n  };\n  /**\n   * Creates an Addresses message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Addresses\n   * @static\n   * @param {Object.<string,*>} d Plain object\n   * @returns {Addresses} Addresses\n   */\n\n\n  Addresses.fromObject = function fromObject(d) {\n    if (d instanceof $root.Addresses) return d;\n    var m = new $root.Addresses();\n\n    if (d.addrs) {\n      if (!Array.isArray(d.addrs)) throw TypeError(\".Addresses.addrs: array expected\");\n      m.addrs = [];\n\n      for (var i = 0; i < d.addrs.length; ++i) {\n        if (typeof d.addrs[i] !== \"object\") throw TypeError(\".Addresses.addrs: object expected\");\n        m.addrs[i] = $root.Addresses.Address.fromObject(d.addrs[i]);\n      }\n    }\n\n    if (d.certifiedRecord != null) {\n      if (typeof d.certifiedRecord !== \"object\") throw TypeError(\".Addresses.certifiedRecord: object expected\");\n      m.certifiedRecord = $root.Addresses.CertifiedRecord.fromObject(d.certifiedRecord);\n    }\n\n    return m;\n  };\n  /**\n   * Creates a plain object from an Addresses message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Addresses\n   * @static\n   * @param {Addresses} m Addresses\n   * @param {$protobuf.IConversionOptions} [o] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  Addresses.toObject = function toObject(m, o) {\n    if (!o) o = {};\n    var d = {};\n\n    if (o.arrays || o.defaults) {\n      d.addrs = [];\n    }\n\n    if (o.defaults) {\n      d.certifiedRecord = null;\n    }\n\n    if (m.addrs && m.addrs.length) {\n      d.addrs = [];\n\n      for (var j = 0; j < m.addrs.length; ++j) {\n        d.addrs[j] = $root.Addresses.Address.toObject(m.addrs[j], o);\n      }\n    }\n\n    if (m.certifiedRecord != null && m.hasOwnProperty(\"certifiedRecord\")) {\n      d.certifiedRecord = $root.Addresses.CertifiedRecord.toObject(m.certifiedRecord, o);\n    }\n\n    return d;\n  };\n  /**\n   * Converts this Addresses to JSON.\n   * @function toJSON\n   * @memberof Addresses\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  Addresses.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  Addresses.Address = function () {\n    /**\n     * Properties of an Address.\n     * @memberof Addresses\n     * @interface IAddress\n     * @property {Uint8Array|null} [multiaddr] Address multiaddr\n     * @property {boolean|null} [isCertified] Address isCertified\n     */\n\n    /**\n     * Constructs a new Address.\n     * @memberof Addresses\n     * @classdesc Represents an Address.\n     * @implements IAddress\n     * @constructor\n     * @param {Addresses.IAddress=} [p] Properties to set\n     */\n    function Address(p) {\n      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n    }\n    /**\n     * Address multiaddr.\n     * @member {Uint8Array} multiaddr\n     * @memberof Addresses.Address\n     * @instance\n     */\n\n\n    Address.prototype.multiaddr = $util.newBuffer([]);\n    /**\n     * Address isCertified.\n     * @member {boolean} isCertified\n     * @memberof Addresses.Address\n     * @instance\n     */\n\n    Address.prototype.isCertified = false;\n    /**\n     * Encodes the specified Address message. Does not implicitly {@link Addresses.Address.verify|verify} messages.\n     * @function encode\n     * @memberof Addresses.Address\n     * @static\n     * @param {Addresses.IAddress} m Address message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n    Address.encode = function encode(m, w) {\n      if (!w) w = $Writer.create();\n      if (m.multiaddr != null && Object.hasOwnProperty.call(m, \"multiaddr\")) w.uint32(10).bytes(m.multiaddr);\n      if (m.isCertified != null && Object.hasOwnProperty.call(m, \"isCertified\")) w.uint32(16).bool(m.isCertified);\n      return w;\n    };\n    /**\n     * Decodes an Address message from the specified reader or buffer.\n     * @function decode\n     * @memberof Addresses.Address\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Addresses.Address} Address\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    Address.decode = function decode(r, l) {\n      if (!(r instanceof $Reader)) r = $Reader.create(r);\n      var c = l === undefined ? r.len : r.pos + l,\n          m = new $root.Addresses.Address();\n\n      while (r.pos < c) {\n        var t = r.uint32();\n\n        switch (t >>> 3) {\n          case 1:\n            m.multiaddr = r.bytes();\n            break;\n\n          case 2:\n            m.isCertified = r.bool();\n            break;\n\n          default:\n            r.skipType(t & 7);\n            break;\n        }\n      }\n\n      return m;\n    };\n    /**\n     * Creates an Address message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Addresses.Address\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Addresses.Address} Address\n     */\n\n\n    Address.fromObject = function fromObject(d) {\n      if (d instanceof $root.Addresses.Address) return d;\n      var m = new $root.Addresses.Address();\n\n      if (d.multiaddr != null) {\n        if (typeof d.multiaddr === \"string\") $util.base64.decode(d.multiaddr, m.multiaddr = $util.newBuffer($util.base64.length(d.multiaddr)), 0);else if (d.multiaddr.length) m.multiaddr = d.multiaddr;\n      }\n\n      if (d.isCertified != null) {\n        m.isCertified = Boolean(d.isCertified);\n      }\n\n      return m;\n    };\n    /**\n     * Creates a plain object from an Address message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Addresses.Address\n     * @static\n     * @param {Addresses.Address} m Address\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    Address.toObject = function toObject(m, o) {\n      if (!o) o = {};\n      var d = {};\n\n      if (o.defaults) {\n        if (o.bytes === String) d.multiaddr = \"\";else {\n          d.multiaddr = [];\n          if (o.bytes !== Array) d.multiaddr = $util.newBuffer(d.multiaddr);\n        }\n        d.isCertified = false;\n      }\n\n      if (m.multiaddr != null && m.hasOwnProperty(\"multiaddr\")) {\n        d.multiaddr = o.bytes === String ? $util.base64.encode(m.multiaddr, 0, m.multiaddr.length) : o.bytes === Array ? Array.prototype.slice.call(m.multiaddr) : m.multiaddr;\n      }\n\n      if (m.isCertified != null && m.hasOwnProperty(\"isCertified\")) {\n        d.isCertified = m.isCertified;\n      }\n\n      return d;\n    };\n    /**\n     * Converts this Address to JSON.\n     * @function toJSON\n     * @memberof Addresses.Address\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    Address.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Address;\n  }();\n\n  Addresses.CertifiedRecord = function () {\n    /**\n     * Properties of a CertifiedRecord.\n     * @memberof Addresses\n     * @interface ICertifiedRecord\n     * @property {number|null} [seq] CertifiedRecord seq\n     * @property {Uint8Array|null} [raw] CertifiedRecord raw\n     */\n\n    /**\n     * Constructs a new CertifiedRecord.\n     * @memberof Addresses\n     * @classdesc Represents a CertifiedRecord.\n     * @implements ICertifiedRecord\n     * @constructor\n     * @param {Addresses.ICertifiedRecord=} [p] Properties to set\n     */\n    function CertifiedRecord(p) {\n      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n    }\n    /**\n     * CertifiedRecord seq.\n     * @member {number} seq\n     * @memberof Addresses.CertifiedRecord\n     * @instance\n     */\n\n\n    CertifiedRecord.prototype.seq = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n    /**\n     * CertifiedRecord raw.\n     * @member {Uint8Array} raw\n     * @memberof Addresses.CertifiedRecord\n     * @instance\n     */\n\n    CertifiedRecord.prototype.raw = $util.newBuffer([]);\n    /**\n     * Encodes the specified CertifiedRecord message. Does not implicitly {@link Addresses.CertifiedRecord.verify|verify} messages.\n     * @function encode\n     * @memberof Addresses.CertifiedRecord\n     * @static\n     * @param {Addresses.ICertifiedRecord} m CertifiedRecord message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n    CertifiedRecord.encode = function encode(m, w) {\n      if (!w) w = $Writer.create();\n      if (m.seq != null && Object.hasOwnProperty.call(m, \"seq\")) w.uint32(8).uint64(m.seq);\n      if (m.raw != null && Object.hasOwnProperty.call(m, \"raw\")) w.uint32(18).bytes(m.raw);\n      return w;\n    };\n    /**\n     * Decodes a CertifiedRecord message from the specified reader or buffer.\n     * @function decode\n     * @memberof Addresses.CertifiedRecord\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Addresses.CertifiedRecord} CertifiedRecord\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    CertifiedRecord.decode = function decode(r, l) {\n      if (!(r instanceof $Reader)) r = $Reader.create(r);\n      var c = l === undefined ? r.len : r.pos + l,\n          m = new $root.Addresses.CertifiedRecord();\n\n      while (r.pos < c) {\n        var t = r.uint32();\n\n        switch (t >>> 3) {\n          case 1:\n            m.seq = r.uint64();\n            break;\n\n          case 2:\n            m.raw = r.bytes();\n            break;\n\n          default:\n            r.skipType(t & 7);\n            break;\n        }\n      }\n\n      return m;\n    };\n    /**\n     * Creates a CertifiedRecord message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Addresses.CertifiedRecord\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Addresses.CertifiedRecord} CertifiedRecord\n     */\n\n\n    CertifiedRecord.fromObject = function fromObject(d) {\n      if (d instanceof $root.Addresses.CertifiedRecord) return d;\n      var m = new $root.Addresses.CertifiedRecord();\n\n      if (d.seq != null) {\n        if ($util.Long) (m.seq = $util.Long.fromValue(d.seq)).unsigned = true;else if (typeof d.seq === \"string\") m.seq = parseInt(d.seq, 10);else if (typeof d.seq === \"number\") m.seq = d.seq;else if (typeof d.seq === \"object\") m.seq = new $util.LongBits(d.seq.low >>> 0, d.seq.high >>> 0).toNumber(true);\n      }\n\n      if (d.raw != null) {\n        if (typeof d.raw === \"string\") $util.base64.decode(d.raw, m.raw = $util.newBuffer($util.base64.length(d.raw)), 0);else if (d.raw.length) m.raw = d.raw;\n      }\n\n      return m;\n    };\n    /**\n     * Creates a plain object from a CertifiedRecord message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Addresses.CertifiedRecord\n     * @static\n     * @param {Addresses.CertifiedRecord} m CertifiedRecord\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    CertifiedRecord.toObject = function toObject(m, o) {\n      if (!o) o = {};\n      var d = {};\n\n      if (o.defaults) {\n        if ($util.Long) {\n          var n = new $util.Long(0, 0, true);\n          d.seq = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n        } else d.seq = o.longs === String ? \"0\" : 0;\n\n        if (o.bytes === String) d.raw = \"\";else {\n          d.raw = [];\n          if (o.bytes !== Array) d.raw = $util.newBuffer(d.raw);\n        }\n      }\n\n      if (m.seq != null && m.hasOwnProperty(\"seq\")) {\n        if (typeof m.seq === \"number\") d.seq = o.longs === String ? String(m.seq) : m.seq;else d.seq = o.longs === String ? $util.Long.prototype.toString.call(m.seq) : o.longs === Number ? new $util.LongBits(m.seq.low >>> 0, m.seq.high >>> 0).toNumber(true) : m.seq;\n      }\n\n      if (m.raw != null && m.hasOwnProperty(\"raw\")) {\n        d.raw = o.bytes === String ? $util.base64.encode(m.raw, 0, m.raw.length) : o.bytes === Array ? Array.prototype.slice.call(m.raw) : m.raw;\n      }\n\n      return d;\n    };\n    /**\n     * Converts this CertifiedRecord to JSON.\n     * @function toJSON\n     * @memberof Addresses.CertifiedRecord\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    CertifiedRecord.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return CertifiedRecord;\n  }();\n\n  return Addresses;\n}();\n\nmodule.exports = $root;","map":{"version":3,"names":["$protobuf","require","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Addresses","p","addrs","ks","Object","keys","i","length","prototype","emptyArray","certifiedRecord","encode","m","w","create","Address","uint32","fork","ldelim","hasOwnProperty","call","CertifiedRecord","decode","r","l","c","undefined","len","pos","t","push","skipType","fromObject","d","Array","isArray","TypeError","toObject","o","arrays","defaults","j","toJSON","constructor","toJSONOptions","multiaddr","newBuffer","isCertified","bytes","bool","base64","Boolean","String","slice","seq","Long","fromBits","raw","uint64","fromValue","unsigned","parseInt","LongBits","low","high","toNumber","n","longs","toString","Number","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p/src/peer-store/persistent/pb/address-book.js"],"sourcesContent":["/*eslint-disable*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"libp2p-address-book\"] || ($protobuf.roots[\"libp2p-address-book\"] = {});\n\n$root.Addresses = (function() {\n\n    /**\n     * Properties of an Addresses.\n     * @exports IAddresses\n     * @interface IAddresses\n     * @property {Array.<Addresses.IAddress>|null} [addrs] Addresses addrs\n     * @property {Addresses.ICertifiedRecord|null} [certifiedRecord] Addresses certifiedRecord\n     */\n\n    /**\n     * Constructs a new Addresses.\n     * @exports Addresses\n     * @classdesc Represents an Addresses.\n     * @implements IAddresses\n     * @constructor\n     * @param {IAddresses=} [p] Properties to set\n     */\n    function Addresses(p) {\n        this.addrs = [];\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Addresses addrs.\n     * @member {Array.<Addresses.IAddress>} addrs\n     * @memberof Addresses\n     * @instance\n     */\n    Addresses.prototype.addrs = $util.emptyArray;\n\n    /**\n     * Addresses certifiedRecord.\n     * @member {Addresses.ICertifiedRecord|null|undefined} certifiedRecord\n     * @memberof Addresses\n     * @instance\n     */\n    Addresses.prototype.certifiedRecord = null;\n\n    /**\n     * Encodes the specified Addresses message. Does not implicitly {@link Addresses.verify|verify} messages.\n     * @function encode\n     * @memberof Addresses\n     * @static\n     * @param {IAddresses} m Addresses message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Addresses.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.addrs != null && m.addrs.length) {\n            for (var i = 0; i < m.addrs.length; ++i)\n                $root.Addresses.Address.encode(m.addrs[i], w.uint32(10).fork()).ldelim();\n        }\n        if (m.certifiedRecord != null && Object.hasOwnProperty.call(m, \"certifiedRecord\"))\n            $root.Addresses.CertifiedRecord.encode(m.certifiedRecord, w.uint32(18).fork()).ldelim();\n        return w;\n    };\n\n    /**\n     * Decodes an Addresses message from the specified reader or buffer.\n     * @function decode\n     * @memberof Addresses\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Addresses} Addresses\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Addresses.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Addresses();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                if (!(m.addrs && m.addrs.length))\n                    m.addrs = [];\n                m.addrs.push($root.Addresses.Address.decode(r, r.uint32()));\n                break;\n            case 2:\n                m.certifiedRecord = $root.Addresses.CertifiedRecord.decode(r, r.uint32());\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates an Addresses message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Addresses\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Addresses} Addresses\n     */\n    Addresses.fromObject = function fromObject(d) {\n        if (d instanceof $root.Addresses)\n            return d;\n        var m = new $root.Addresses();\n        if (d.addrs) {\n            if (!Array.isArray(d.addrs))\n                throw TypeError(\".Addresses.addrs: array expected\");\n            m.addrs = [];\n            for (var i = 0; i < d.addrs.length; ++i) {\n                if (typeof d.addrs[i] !== \"object\")\n                    throw TypeError(\".Addresses.addrs: object expected\");\n                m.addrs[i] = $root.Addresses.Address.fromObject(d.addrs[i]);\n            }\n        }\n        if (d.certifiedRecord != null) {\n            if (typeof d.certifiedRecord !== \"object\")\n                throw TypeError(\".Addresses.certifiedRecord: object expected\");\n            m.certifiedRecord = $root.Addresses.CertifiedRecord.fromObject(d.certifiedRecord);\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from an Addresses message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Addresses\n     * @static\n     * @param {Addresses} m Addresses\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Addresses.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.arrays || o.defaults) {\n            d.addrs = [];\n        }\n        if (o.defaults) {\n            d.certifiedRecord = null;\n        }\n        if (m.addrs && m.addrs.length) {\n            d.addrs = [];\n            for (var j = 0; j < m.addrs.length; ++j) {\n                d.addrs[j] = $root.Addresses.Address.toObject(m.addrs[j], o);\n            }\n        }\n        if (m.certifiedRecord != null && m.hasOwnProperty(\"certifiedRecord\")) {\n            d.certifiedRecord = $root.Addresses.CertifiedRecord.toObject(m.certifiedRecord, o);\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Addresses to JSON.\n     * @function toJSON\n     * @memberof Addresses\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Addresses.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    Addresses.Address = (function() {\n\n        /**\n         * Properties of an Address.\n         * @memberof Addresses\n         * @interface IAddress\n         * @property {Uint8Array|null} [multiaddr] Address multiaddr\n         * @property {boolean|null} [isCertified] Address isCertified\n         */\n\n        /**\n         * Constructs a new Address.\n         * @memberof Addresses\n         * @classdesc Represents an Address.\n         * @implements IAddress\n         * @constructor\n         * @param {Addresses.IAddress=} [p] Properties to set\n         */\n        function Address(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * Address multiaddr.\n         * @member {Uint8Array} multiaddr\n         * @memberof Addresses.Address\n         * @instance\n         */\n        Address.prototype.multiaddr = $util.newBuffer([]);\n\n        /**\n         * Address isCertified.\n         * @member {boolean} isCertified\n         * @memberof Addresses.Address\n         * @instance\n         */\n        Address.prototype.isCertified = false;\n\n        /**\n         * Encodes the specified Address message. Does not implicitly {@link Addresses.Address.verify|verify} messages.\n         * @function encode\n         * @memberof Addresses.Address\n         * @static\n         * @param {Addresses.IAddress} m Address message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Address.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.multiaddr != null && Object.hasOwnProperty.call(m, \"multiaddr\"))\n                w.uint32(10).bytes(m.multiaddr);\n            if (m.isCertified != null && Object.hasOwnProperty.call(m, \"isCertified\"))\n                w.uint32(16).bool(m.isCertified);\n            return w;\n        };\n\n        /**\n         * Decodes an Address message from the specified reader or buffer.\n         * @function decode\n         * @memberof Addresses.Address\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {Addresses.Address} Address\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Address.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.Addresses.Address();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.multiaddr = r.bytes();\n                    break;\n                case 2:\n                    m.isCertified = r.bool();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        /**\n         * Creates an Address message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Addresses.Address\n         * @static\n         * @param {Object.<string,*>} d Plain object\n         * @returns {Addresses.Address} Address\n         */\n        Address.fromObject = function fromObject(d) {\n            if (d instanceof $root.Addresses.Address)\n                return d;\n            var m = new $root.Addresses.Address();\n            if (d.multiaddr != null) {\n                if (typeof d.multiaddr === \"string\")\n                    $util.base64.decode(d.multiaddr, m.multiaddr = $util.newBuffer($util.base64.length(d.multiaddr)), 0);\n                else if (d.multiaddr.length)\n                    m.multiaddr = d.multiaddr;\n            }\n            if (d.isCertified != null) {\n                m.isCertified = Boolean(d.isCertified);\n            }\n            return m;\n        };\n\n        /**\n         * Creates a plain object from an Address message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Addresses.Address\n         * @static\n         * @param {Addresses.Address} m Address\n         * @param {$protobuf.IConversionOptions} [o] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Address.toObject = function toObject(m, o) {\n            if (!o)\n                o = {};\n            var d = {};\n            if (o.defaults) {\n                if (o.bytes === String)\n                    d.multiaddr = \"\";\n                else {\n                    d.multiaddr = [];\n                    if (o.bytes !== Array)\n                        d.multiaddr = $util.newBuffer(d.multiaddr);\n                }\n                d.isCertified = false;\n            }\n            if (m.multiaddr != null && m.hasOwnProperty(\"multiaddr\")) {\n                d.multiaddr = o.bytes === String ? $util.base64.encode(m.multiaddr, 0, m.multiaddr.length) : o.bytes === Array ? Array.prototype.slice.call(m.multiaddr) : m.multiaddr;\n            }\n            if (m.isCertified != null && m.hasOwnProperty(\"isCertified\")) {\n                d.isCertified = m.isCertified;\n            }\n            return d;\n        };\n\n        /**\n         * Converts this Address to JSON.\n         * @function toJSON\n         * @memberof Addresses.Address\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Address.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Address;\n    })();\n\n    Addresses.CertifiedRecord = (function() {\n\n        /**\n         * Properties of a CertifiedRecord.\n         * @memberof Addresses\n         * @interface ICertifiedRecord\n         * @property {number|null} [seq] CertifiedRecord seq\n         * @property {Uint8Array|null} [raw] CertifiedRecord raw\n         */\n\n        /**\n         * Constructs a new CertifiedRecord.\n         * @memberof Addresses\n         * @classdesc Represents a CertifiedRecord.\n         * @implements ICertifiedRecord\n         * @constructor\n         * @param {Addresses.ICertifiedRecord=} [p] Properties to set\n         */\n        function CertifiedRecord(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * CertifiedRecord seq.\n         * @member {number} seq\n         * @memberof Addresses.CertifiedRecord\n         * @instance\n         */\n        CertifiedRecord.prototype.seq = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * CertifiedRecord raw.\n         * @member {Uint8Array} raw\n         * @memberof Addresses.CertifiedRecord\n         * @instance\n         */\n        CertifiedRecord.prototype.raw = $util.newBuffer([]);\n\n        /**\n         * Encodes the specified CertifiedRecord message. Does not implicitly {@link Addresses.CertifiedRecord.verify|verify} messages.\n         * @function encode\n         * @memberof Addresses.CertifiedRecord\n         * @static\n         * @param {Addresses.ICertifiedRecord} m CertifiedRecord message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CertifiedRecord.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.seq != null && Object.hasOwnProperty.call(m, \"seq\"))\n                w.uint32(8).uint64(m.seq);\n            if (m.raw != null && Object.hasOwnProperty.call(m, \"raw\"))\n                w.uint32(18).bytes(m.raw);\n            return w;\n        };\n\n        /**\n         * Decodes a CertifiedRecord message from the specified reader or buffer.\n         * @function decode\n         * @memberof Addresses.CertifiedRecord\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {Addresses.CertifiedRecord} CertifiedRecord\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CertifiedRecord.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.Addresses.CertifiedRecord();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.seq = r.uint64();\n                    break;\n                case 2:\n                    m.raw = r.bytes();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        /**\n         * Creates a CertifiedRecord message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Addresses.CertifiedRecord\n         * @static\n         * @param {Object.<string,*>} d Plain object\n         * @returns {Addresses.CertifiedRecord} CertifiedRecord\n         */\n        CertifiedRecord.fromObject = function fromObject(d) {\n            if (d instanceof $root.Addresses.CertifiedRecord)\n                return d;\n            var m = new $root.Addresses.CertifiedRecord();\n            if (d.seq != null) {\n                if ($util.Long)\n                    (m.seq = $util.Long.fromValue(d.seq)).unsigned = true;\n                else if (typeof d.seq === \"string\")\n                    m.seq = parseInt(d.seq, 10);\n                else if (typeof d.seq === \"number\")\n                    m.seq = d.seq;\n                else if (typeof d.seq === \"object\")\n                    m.seq = new $util.LongBits(d.seq.low >>> 0, d.seq.high >>> 0).toNumber(true);\n            }\n            if (d.raw != null) {\n                if (typeof d.raw === \"string\")\n                    $util.base64.decode(d.raw, m.raw = $util.newBuffer($util.base64.length(d.raw)), 0);\n                else if (d.raw.length)\n                    m.raw = d.raw;\n            }\n            return m;\n        };\n\n        /**\n         * Creates a plain object from a CertifiedRecord message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Addresses.CertifiedRecord\n         * @static\n         * @param {Addresses.CertifiedRecord} m CertifiedRecord\n         * @param {$protobuf.IConversionOptions} [o] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CertifiedRecord.toObject = function toObject(m, o) {\n            if (!o)\n                o = {};\n            var d = {};\n            if (o.defaults) {\n                if ($util.Long) {\n                    var n = new $util.Long(0, 0, true);\n                    d.seq = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n                } else\n                    d.seq = o.longs === String ? \"0\" : 0;\n                if (o.bytes === String)\n                    d.raw = \"\";\n                else {\n                    d.raw = [];\n                    if (o.bytes !== Array)\n                        d.raw = $util.newBuffer(d.raw);\n                }\n            }\n            if (m.seq != null && m.hasOwnProperty(\"seq\")) {\n                if (typeof m.seq === \"number\")\n                    d.seq = o.longs === String ? String(m.seq) : m.seq;\n                else\n                    d.seq = o.longs === String ? $util.Long.prototype.toString.call(m.seq) : o.longs === Number ? new $util.LongBits(m.seq.low >>> 0, m.seq.high >>> 0).toNumber(true) : m.seq;\n            }\n            if (m.raw != null && m.hasOwnProperty(\"raw\")) {\n                d.raw = o.bytes === String ? $util.base64.encode(m.raw, 0, m.raw.length) : o.bytes === Array ? Array.prototype.slice.call(m.raw) : m.raw;\n            }\n            return d;\n        };\n\n        /**\n         * Converts this CertifiedRecord to JSON.\n         * @function toJSON\n         * @memberof Addresses.CertifiedRecord\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CertifiedRecord.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return CertifiedRecord;\n    })();\n\n    return Addresses;\n})();\n\nmodule.exports = $root;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}