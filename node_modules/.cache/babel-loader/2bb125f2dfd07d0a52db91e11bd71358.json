{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nvar first = require('it-first');\n\nvar last = require('it-last');\n\nvar _require = require('../../utils'),\n    resolve = _require.resolve;\n\nvar errCode = require('err-code');\n/**\n * @param {Object} config\n * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\n\n\nmodule.exports = function (_ref) {\n  var codecs = _ref.codecs,\n      repo = _ref.repo,\n      preload = _ref.preload;\n\n  /**\n   * @type {import('ipfs-core-types/src/dag').API[\"get\"]}\n   */\n  var get = /*#__PURE__*/function () {\n    var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(cid) {\n      var options,\n          entry,\n          result,\n          codec,\n          block,\n          node,\n          _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n\n              if (options.preload !== false) {\n                preload(cid);\n              }\n\n              if (!options.path) {\n                _context.next = 17;\n                break;\n              }\n\n              if (!options.localResolve) {\n                _context.next = 9;\n                break;\n              }\n\n              _context.next = 6;\n              return first(resolve(cid, options.path, codecs, repo, options));\n\n            case 6:\n              _context.t0 = _context.sent;\n              _context.next = 12;\n              break;\n\n            case 9:\n              _context.next = 11;\n              return last(resolve(cid, options.path, codecs, repo, options));\n\n            case 11:\n              _context.t0 = _context.sent;\n\n            case 12:\n              entry = _context.t0;\n\n              /** @type {import('ipfs-core-types/src/dag').GetResult} - first and last will return undefined when empty */\n              result = entry;\n\n              if (result) {\n                _context.next = 16;\n                break;\n              }\n\n              throw errCode(new Error('Not found'), 'ERR_NOT_FOUND');\n\n            case 16:\n              return _context.abrupt(\"return\", result);\n\n            case 17:\n              _context.next = 19;\n              return codecs.getCodec(cid.code);\n\n            case 19:\n              codec = _context.sent;\n              _context.next = 22;\n              return repo.blocks.get(cid, options);\n\n            case 22:\n              block = _context.sent;\n              node = codec.decode(block);\n              return _context.abrupt(\"return\", {\n                value: node,\n                remainderPath: ''\n              });\n\n            case 25:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function get(_x) {\n      return _get.apply(this, arguments);\n    }\n\n    return get;\n  }();\n\n  return withTimeoutOption(get);\n};","map":{"version":3,"names":["withTimeoutOption","require","first","last","resolve","errCode","module","exports","codecs","repo","preload","get","cid","options","path","localResolve","entry","result","Error","getCodec","code","codec","blocks","block","node","decode","value","remainderPath"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/dag/get.js"],"sourcesContent":["'use strict'\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst first = require('it-first')\nconst last = require('it-last')\nconst { resolve } = require('../../utils')\nconst errCode = require('err-code')\n\n/**\n * @param {Object} config\n * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nmodule.exports = ({ codecs, repo, preload }) => {\n  /**\n   * @type {import('ipfs-core-types/src/dag').API[\"get\"]}\n   */\n  const get = async function get (cid, options = {}) {\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    if (options.path) {\n      const entry = options.localResolve\n        ? await first(resolve(cid, options.path, codecs, repo, options))\n        : await last(resolve(cid, options.path, codecs, repo, options))\n      /** @type {import('ipfs-core-types/src/dag').GetResult} - first and last will return undefined when empty */\n      const result = (entry)\n\n      if (!result) {\n        throw errCode(new Error('Not found'), 'ERR_NOT_FOUND')\n      }\n\n      return result\n    }\n\n    const codec = await codecs.getCodec(cid.code)\n    const block = await repo.blocks.get(cid, options)\n    const node = codec.decode(block)\n\n    return {\n      value: node,\n      remainderPath: ''\n    }\n  }\n\n  return withTimeoutOption(get)\n}\n"],"mappings":"AAAA;;;;;;AAEA,IAAMA,iBAAiB,GAAGC,OAAO,CAAC,yCAAD,CAAjC;;AACA,IAAMC,KAAK,GAAGD,OAAO,CAAC,UAAD,CAArB;;AACA,IAAME,IAAI,GAAGF,OAAO,CAAC,SAAD,CAApB;;AACA,eAAoBA,OAAO,CAAC,aAAD,CAA3B;AAAA,IAAQG,OAAR,YAAQA,OAAR;;AACA,IAAMC,OAAO,GAAGJ,OAAO,CAAC,UAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACAK,MAAM,CAACC,OAAP,GAAiB,gBAA+B;EAAA,IAA5BC,MAA4B,QAA5BA,MAA4B;EAAA,IAApBC,IAAoB,QAApBA,IAAoB;EAAA,IAAdC,OAAc,QAAdA,OAAc;;EAC9C;AACF;AACA;EACE,IAAMC,GAAG;IAAA,sEAAG,iBAAoBC,GAApB;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAyBC,OAAzB,2DAAmC,EAAnC;;cACV,IAAIA,OAAO,CAACH,OAAR,KAAoB,KAAxB,EAA+B;gBAC7BA,OAAO,CAACE,GAAD,CAAP;cACD;;cAHS,KAKNC,OAAO,CAACC,IALF;gBAAA;gBAAA;cAAA;;cAAA,KAMMD,OAAO,CAACE,YANd;gBAAA;gBAAA;cAAA;;cAAA;cAAA,OAOEb,KAAK,CAACE,OAAO,CAACQ,GAAD,EAAMC,OAAO,CAACC,IAAd,EAAoBN,MAApB,EAA4BC,IAA5B,EAAkCI,OAAlC,CAAR,CAPP;;YAAA;cAAA;cAAA;cAAA;;YAAA;cAAA;cAAA,OAQEV,IAAI,CAACC,OAAO,CAACQ,GAAD,EAAMC,OAAO,CAACC,IAAd,EAAoBN,MAApB,EAA4BC,IAA5B,EAAkCI,OAAlC,CAAR,CARN;;YAAA;cAAA;;YAAA;cAMFG,KANE;;cASR;cACMC,MAVE,GAUQD,KAVR;;cAAA,IAYHC,MAZG;gBAAA;gBAAA;cAAA;;cAAA,MAaAZ,OAAO,CAAC,IAAIa,KAAJ,CAAU,WAAV,CAAD,EAAyB,eAAzB,CAbP;;YAAA;cAAA,iCAgBDD,MAhBC;;YAAA;cAAA;cAAA,OAmBUT,MAAM,CAACW,QAAP,CAAgBP,GAAG,CAACQ,IAApB,CAnBV;;YAAA;cAmBJC,KAnBI;cAAA;cAAA,OAoBUZ,IAAI,CAACa,MAAL,CAAYX,GAAZ,CAAgBC,GAAhB,EAAqBC,OAArB,CApBV;;YAAA;cAoBJU,KApBI;cAqBJC,IArBI,GAqBGH,KAAK,CAACI,MAAN,CAAaF,KAAb,CArBH;cAAA,iCAuBH;gBACLG,KAAK,EAAEF,IADF;gBAELG,aAAa,EAAE;cAFV,CAvBG;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAH;;IAAA,SAAkBhB,GAAlB;MAAA;IAAA;;IAAA,OAAkBA,GAAlB;EAAA,GAAT;;EA6BA,OAAOX,iBAAiB,CAACW,GAAD,CAAxB;AACD,CAlCD"},"metadata":{},"sourceType":"script"}