{"ast":null,"code":"'use strict';\n\nconst Message = require('../types/message');\n\nconst Wantlist = require('../types/wantlist');\n\nconst CONSTANTS = require('../constants');\n\nconst MsgQueue = require('./msg-queue');\n\nconst logger = require('../utils').logger;\n\nconst {\n  base58btc\n} = require('multiformats/bases/base58');\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('multiformats').CID} CID\n */\n\n\nmodule.exports = class WantManager {\n  /**\n   * @param {PeerId} peerId\n   * @param {import('../network')} network\n   * @param {import('../stats')} stats\n   */\n  constructor(peerId, network, stats) {\n    /** @type {Map<string, MsgQueue>} */\n    this.peers = new Map();\n    this.wantlist = new Wantlist(stats);\n    this.network = network;\n    this._stats = stats;\n    this._peerId = peerId;\n    this._log = logger(peerId, 'want');\n  }\n  /**\n   * @private\n   * @param {CID[]} cids\n   * @param {boolean} cancel\n   * @param {boolean} [force]\n   */\n\n\n  _addEntries(cids, cancel, force) {\n    const entries = cids.map((cid, i) => {\n      return new Message.Entry(cid, CONSTANTS.kMaxPriority - i, Message.WantType.Block, cancel);\n    });\n    entries.forEach(e => {\n      // add changes to our wantlist\n      if (e.cancel) {\n        if (force) {\n          this.wantlist.removeForce(e.cid.toString(base58btc));\n        } else {\n          this.wantlist.remove(e.cid);\n        }\n      } else {\n        this._log('adding to wl'); // TODO: Figure out the wantType\n        // @ts-expect-error - requires wantType\n\n\n        this.wantlist.add(e.cid, e.priority);\n      }\n    }); // broadcast changes\n\n    for (const p of this.peers.values()) {\n      p.addEntries(entries);\n    }\n  }\n  /**\n   * @private\n   * @param {PeerId} peerId\n   */\n\n\n  _startPeerHandler(peerId) {\n    let mq = this.peers.get(peerId.toB58String());\n\n    if (mq) {\n      mq.refcnt++;\n      return;\n    }\n\n    mq = new MsgQueue(this._peerId, peerId, this.network); // new peer, give them the full wantlist\n\n    const fullwantlist = new Message(true);\n\n    for (const entry of this.wantlist.entries()) {\n      fullwantlist.addEntry(entry[1].cid, entry[1].priority);\n    }\n\n    mq.addMessage(fullwantlist);\n    this.peers.set(peerId.toB58String(), mq);\n    return mq;\n  }\n  /**\n   * @private\n   * @param {PeerId} peerId\n   */\n\n\n  _stopPeerHandler(peerId) {\n    const mq = this.peers.get(peerId.toB58String());\n\n    if (!mq) {\n      return;\n    }\n\n    mq.refcnt--;\n\n    if (mq.refcnt > 0) {\n      return;\n    }\n\n    this.peers.delete(peerId.toB58String());\n  }\n  /**\n   * add all the cids to the wantlist\n   *\n   * @param {CID[]} cids\n   * @param {Object} [options]\n   * @param {AbortSignal} [options.signal]\n   */\n\n\n  wantBlocks(cids) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    this._addEntries(cids, false);\n\n    if (options && options.signal) {\n      options.signal.addEventListener('abort', () => {\n        this.cancelWants(cids);\n      });\n    }\n  }\n  /**\n   * Remove blocks of all the given keys without respecting refcounts\n   *\n   * @param {CID[]} cids\n   */\n\n\n  unwantBlocks(cids) {\n    this._log('unwant blocks: %s', cids.length);\n\n    this._addEntries(cids, true, true);\n  }\n  /**\n   * Cancel wanting all of the given keys\n   *\n   * @param {CID[]} cids\n   */\n\n\n  cancelWants(cids) {\n    this._log('cancel wants: %s', cids.length);\n\n    this._addEntries(cids, true);\n  }\n  /**\n   * Returns a list of all currently connected peers\n   */\n\n\n  connectedPeers() {\n    return Array.from(this.peers.keys());\n  }\n  /**\n   * @param {PeerId} peerId\n   */\n\n\n  connected(peerId) {\n    this._startPeerHandler(peerId);\n  }\n  /**\n   * @param {PeerId} peerId\n   */\n\n\n  disconnected(peerId) {\n    this._stopPeerHandler(peerId);\n  }\n\n  start() {}\n\n  stop() {\n    this.peers.forEach(mq => this.disconnected(mq.peerId));\n  }\n\n};","map":{"version":3,"names":["Message","require","Wantlist","CONSTANTS","MsgQueue","logger","base58btc","module","exports","WantManager","constructor","peerId","network","stats","peers","Map","wantlist","_stats","_peerId","_log","_addEntries","cids","cancel","force","entries","map","cid","i","Entry","kMaxPriority","WantType","Block","forEach","e","removeForce","toString","remove","add","priority","p","values","addEntries","_startPeerHandler","mq","get","toB58String","refcnt","fullwantlist","entry","addEntry","addMessage","set","_stopPeerHandler","delete","wantBlocks","options","signal","addEventListener","cancelWants","unwantBlocks","length","connectedPeers","Array","from","keys","connected","disconnected","start","stop"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-bitswap/src/want-manager/index.js"],"sourcesContent":["'use strict'\n\nconst Message = require('../types/message')\nconst Wantlist = require('../types/wantlist')\nconst CONSTANTS = require('../constants')\nconst MsgQueue = require('./msg-queue')\nconst logger = require('../utils').logger\nconst { base58btc } = require('multiformats/bases/base58')\n\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('multiformats').CID} CID\n */\n\nmodule.exports = class WantManager {\n  /**\n   * @param {PeerId} peerId\n   * @param {import('../network')} network\n   * @param {import('../stats')} stats\n   */\n  constructor (peerId, network, stats) {\n    /** @type {Map<string, MsgQueue>} */\n    this.peers = new Map()\n    this.wantlist = new Wantlist(stats)\n\n    this.network = network\n    this._stats = stats\n\n    this._peerId = peerId\n    this._log = logger(peerId, 'want')\n  }\n\n  /**\n   * @private\n   * @param {CID[]} cids\n   * @param {boolean} cancel\n   * @param {boolean} [force]\n   */\n  _addEntries (cids, cancel, force) {\n    const entries = cids.map((cid, i) => {\n      return new Message.Entry(cid, CONSTANTS.kMaxPriority - i, Message.WantType.Block, cancel)\n    })\n\n    entries.forEach((e) => {\n      // add changes to our wantlist\n      if (e.cancel) {\n        if (force) {\n          this.wantlist.removeForce(e.cid.toString(base58btc))\n        } else {\n          this.wantlist.remove(e.cid)\n        }\n      } else {\n        this._log('adding to wl')\n        // TODO: Figure out the wantType\n        // @ts-expect-error - requires wantType\n        this.wantlist.add(e.cid, e.priority)\n      }\n    })\n\n    // broadcast changes\n    for (const p of this.peers.values()) {\n      p.addEntries(entries)\n    }\n  }\n\n  /**\n   * @private\n   * @param {PeerId} peerId\n   */\n  _startPeerHandler (peerId) {\n    let mq = this.peers.get(peerId.toB58String())\n\n    if (mq) {\n      mq.refcnt++\n      return\n    }\n\n    mq = new MsgQueue(this._peerId, peerId, this.network)\n\n    // new peer, give them the full wantlist\n    const fullwantlist = new Message(true)\n\n    for (const entry of this.wantlist.entries()) {\n      fullwantlist.addEntry(entry[1].cid, entry[1].priority)\n    }\n\n    mq.addMessage(fullwantlist)\n\n    this.peers.set(peerId.toB58String(), mq)\n    return mq\n  }\n\n  /**\n   * @private\n   * @param {PeerId} peerId\n   */\n  _stopPeerHandler (peerId) {\n    const mq = this.peers.get(peerId.toB58String())\n\n    if (!mq) {\n      return\n    }\n\n    mq.refcnt--\n    if (mq.refcnt > 0) {\n      return\n    }\n\n    this.peers.delete(peerId.toB58String())\n  }\n\n  /**\n   * add all the cids to the wantlist\n   *\n   * @param {CID[]} cids\n   * @param {Object} [options]\n   * @param {AbortSignal} [options.signal]\n   */\n  wantBlocks (cids, options = {}) {\n    this._addEntries(cids, false)\n\n    if (options && options.signal) {\n      options.signal.addEventListener('abort', () => {\n        this.cancelWants(cids)\n      })\n    }\n  }\n\n  /**\n   * Remove blocks of all the given keys without respecting refcounts\n   *\n   * @param {CID[]} cids\n   */\n  unwantBlocks (cids) {\n    this._log('unwant blocks: %s', cids.length)\n    this._addEntries(cids, true, true)\n  }\n\n  /**\n   * Cancel wanting all of the given keys\n   *\n   * @param {CID[]} cids\n   */\n  cancelWants (cids) {\n    this._log('cancel wants: %s', cids.length)\n    this._addEntries(cids, true)\n  }\n\n  /**\n   * Returns a list of all currently connected peers\n   */\n  connectedPeers () {\n    return Array.from(this.peers.keys())\n  }\n\n  /**\n   * @param {PeerId} peerId\n   */\n  connected (peerId) {\n    this._startPeerHandler(peerId)\n  }\n\n  /**\n   * @param {PeerId} peerId\n   */\n  disconnected (peerId) {\n    this._stopPeerHandler(peerId)\n  }\n\n  start () {\n  }\n\n  stop () {\n    this.peers.forEach((mq) => this.disconnected(mq.peerId))\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}