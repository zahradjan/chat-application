{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _require = require('./utils'),\n    deepEqual = _require.deepEqual;\n\nvar sum = function sum(acc, val) {\n  return acc + val;\n};\n/**\n * G-Counter\n *\n * Operation-based Increment-Only Counter CRDT\n *\n * Sources: \n * \"A comprehensive study of Convergent and Commutative Replicated Data Types\"\n * http://hal.upmc.fr/inria-00555588/document, \"3.1.1 Op-based counter and 3.1.2  State-based increment-only Counter (G-Counter)\"\n */\n\n\nvar GCounter = /*#__PURE__*/function () {\n  function GCounter(id, counter) {\n    _classCallCheck(this, GCounter);\n\n    this.id = id;\n    this._counters = counter ? counter : {};\n    this._counters[this.id] = this._counters[this.id] ? this._counters[this.id] : 0;\n  }\n\n  _createClass(GCounter, [{\n    key: \"value\",\n    get: function get() {\n      return Object.values(this._counters).reduce(sum, 0);\n    }\n  }, {\n    key: \"increment\",\n    value: function increment(amount) {\n      if (amount && amount < 1) return;\n      if (amount === undefined || amount === null) amount = 1;\n      this._counters[this.id] = this._counters[this.id] + amount;\n    }\n  }, {\n    key: \"merge\",\n    value: function merge(other) {\n      var _this = this;\n\n      // Go through each counter in the other counter\n      Object.entries(other._counters).forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            id = _ref2[0],\n            value = _ref2[1];\n\n        // Take the maximum of the counter value we have or the counter value they have\n        _this._counters[id] = Math.max(_this._counters[id] || 0, value);\n      });\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        id: this.id,\n        counters: this._counters\n      };\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      return GCounter.isEqual(this, other);\n    }\n  }], [{\n    key: \"from\",\n    value: function from(json) {\n      return new GCounter(json.id, json.counters);\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(a, b) {\n      if (a.id !== b.id) return false;\n      return deepEqual(a._counters, b._counters);\n    }\n  }]);\n\n  return GCounter;\n}();\n\nmodule.exports = GCounter;","map":{"version":3,"names":["require","deepEqual","sum","acc","val","GCounter","id","counter","_counters","Object","values","reduce","amount","undefined","other","entries","forEach","value","Math","max","counters","isEqual","json","a","b","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/crdts/src/G-Counter.js"],"sourcesContent":["'use strict'\n\nconst { deepEqual } = require('./utils')\nconst sum = (acc, val) => acc + val\n\n/**\n * G-Counter\n *\n * Operation-based Increment-Only Counter CRDT\n *\n * Sources: \n * \"A comprehensive study of Convergent and Commutative Replicated Data Types\"\n * http://hal.upmc.fr/inria-00555588/document, \"3.1.1 Op-based counter and 3.1.2  State-based increment-only Counter (G-Counter)\"\n */\n\nclass GCounter {\n  constructor (id, counter) {\n    this.id = id\n    this._counters = counter ? counter : {}\n    this._counters[this.id] = this._counters[this.id] ? this._counters[this.id] : 0\n  }\n\n  get value () {\n    return Object.values(this._counters).reduce(sum, 0)\n  }\n\n  increment (amount) {\n    if (amount && amount < 1) \n      return\n\n    if (amount === undefined || amount === null)\n      amount = 1\n\n    this._counters[this.id] = this._counters[this.id] + amount\n  }\n\n  merge (other) {\n    // Go through each counter in the other counter\n    Object.entries(other._counters).forEach(([id, value]) => {\n      // Take the maximum of the counter value we have or the counter value they have\n      this._counters[id] = Math.max(this._counters[id] || 0, value)\n    })\n  }\n\n  toJSON () {\n    return { \n      id: this.id, \n      counters: this._counters \n    }\n  }\n\n  isEqual (other) {\n    return GCounter.isEqual(this, other)\n  }\n\n  static from (json) {\n    return new GCounter(json.id, json.counters)\n  }\n\n  static isEqual (a, b) {\n    if(a.id !== b.id)\n      return false\n\n    return deepEqual(a._counters, b._counters)\n  }\n}\n\nmodule.exports = GCounter\n"],"mappings":"AAAA;;;;;;;;AAEA,eAAsBA,OAAO,CAAC,SAAD,CAA7B;AAAA,IAAQC,SAAR,YAAQA,SAAR;;AACA,IAAMC,GAAG,GAAG,SAANA,GAAM,CAACC,GAAD,EAAMC,GAAN;EAAA,OAAcD,GAAG,GAAGC,GAApB;AAAA,CAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IAEMC,Q;EACJ,kBAAaC,EAAb,EAAiBC,OAAjB,EAA0B;IAAA;;IACxB,KAAKD,EAAL,GAAUA,EAAV;IACA,KAAKE,SAAL,GAAiBD,OAAO,GAAGA,OAAH,GAAa,EAArC;IACA,KAAKC,SAAL,CAAe,KAAKF,EAApB,IAA0B,KAAKE,SAAL,CAAe,KAAKF,EAApB,IAA0B,KAAKE,SAAL,CAAe,KAAKF,EAApB,CAA1B,GAAoD,CAA9E;EACD;;;;SAED,eAAa;MACX,OAAOG,MAAM,CAACC,MAAP,CAAc,KAAKF,SAAnB,EAA8BG,MAA9B,CAAqCT,GAArC,EAA0C,CAA1C,CAAP;IACD;;;WAED,mBAAWU,MAAX,EAAmB;MACjB,IAAIA,MAAM,IAAIA,MAAM,GAAG,CAAvB,EACE;MAEF,IAAIA,MAAM,KAAKC,SAAX,IAAwBD,MAAM,KAAK,IAAvC,EACEA,MAAM,GAAG,CAAT;MAEF,KAAKJ,SAAL,CAAe,KAAKF,EAApB,IAA0B,KAAKE,SAAL,CAAe,KAAKF,EAApB,IAA0BM,MAApD;IACD;;;WAED,eAAOE,KAAP,EAAc;MAAA;;MACZ;MACAL,MAAM,CAACM,OAAP,CAAeD,KAAK,CAACN,SAArB,EAAgCQ,OAAhC,CAAwC,gBAAiB;QAAA;QAAA,IAAfV,EAAe;QAAA,IAAXW,KAAW;;QACvD;QACA,KAAI,CAACT,SAAL,CAAeF,EAAf,IAAqBY,IAAI,CAACC,GAAL,CAAS,KAAI,CAACX,SAAL,CAAeF,EAAf,KAAsB,CAA/B,EAAkCW,KAAlC,CAArB;MACD,CAHD;IAID;;;WAED,kBAAU;MACR,OAAO;QACLX,EAAE,EAAE,KAAKA,EADJ;QAELc,QAAQ,EAAE,KAAKZ;MAFV,CAAP;IAID;;;WAED,iBAASM,KAAT,EAAgB;MACd,OAAOT,QAAQ,CAACgB,OAAT,CAAiB,IAAjB,EAAuBP,KAAvB,CAAP;IACD;;;WAED,cAAaQ,IAAb,EAAmB;MACjB,OAAO,IAAIjB,QAAJ,CAAaiB,IAAI,CAAChB,EAAlB,EAAsBgB,IAAI,CAACF,QAA3B,CAAP;IACD;;;WAED,iBAAgBG,CAAhB,EAAmBC,CAAnB,EAAsB;MACpB,IAAGD,CAAC,CAACjB,EAAF,KAASkB,CAAC,CAAClB,EAAd,EACE,OAAO,KAAP;MAEF,OAAOL,SAAS,CAACsB,CAAC,CAACf,SAAH,EAAcgB,CAAC,CAAChB,SAAhB,CAAhB;IACD;;;;;;AAGHiB,MAAM,CAACC,OAAP,GAAiBrB,QAAjB"},"metadata":{},"sourceType":"script"}