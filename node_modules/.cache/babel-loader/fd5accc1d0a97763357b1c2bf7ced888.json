{"ast":null,"code":"'use strict';\n\nconst mergeOptions = require('merge-options').bind({\n  ignoreUndefined: true\n});\n\nconst {\n  isTest\n} = require('ipfs-utils/src/env');\n\nconst log = require('debug')('ipfs');\n\nconst errCode = require('err-code');\n\nconst {\n  UnixFS\n} = require('ipfs-unixfs');\n\nconst dagPb = require('@ipld/dag-pb');\n\nconst dagCbor = require('@ipld/dag-cbor');\n\nconst {\n  identity\n} = require('multiformats/hashes/identity');\n\nconst {\n  bases,\n  hashes,\n  codecs\n} = require('multiformats/basics');\n\nconst initAssets = require('../runtime/init-assets-nodejs');\n\nconst {\n  AlreadyInitializedError\n} = require('../errors');\n\nconst {\n  fromString: uint8ArrayFromString\n} = require('uint8arrays/from-string');\n\nconst createStartAPI = require('./start');\n\nconst createStopAPI = require('./stop');\n\nconst createDNSAPI = require('./dns');\n\nconst createIsOnlineAPI = require('./is-online');\n\nconst createResolveAPI = require('./resolve');\n\nconst PinAPI = require('./pin');\n\nconst IPNSAPI = require('./ipns');\n\nconst NameAPI = require('./name');\n\nconst createRefsAPI = require('./refs');\n\nconst createRefsLocalAPI = require('./refs/local');\n\nconst BitswapAPI = require('./bitswap');\n\nconst BootstrapAPI = require('./bootstrap');\n\nconst BlockAPI = require('./block');\n\nconst RootAPI = require('./root');\n\nconst createVersionAPI = require('./version');\n\nconst createIDAPI = require('./id');\n\nconst createConfigAPI = require('./config');\n\nconst DagAPI = require('./dag');\n\nconst createPreloadAPI = require('../preload');\n\nconst createMfsPreloadAPI = require('../mfs-preload');\n\nconst createFilesAPI = require('./files');\n\nconst KeyAPI = require('./key');\n\nconst ObjectAPI = require('./object');\n\nconst RepoAPI = require('./repo');\n\nconst StatsAPI = require('./stats');\n\nconst Storage = require('./storage');\n\nconst Network = require('./network');\n\nconst Service = require('../utils/service');\n\nconst SwarmAPI = require('./swarm');\n\nconst createPingAPI = require('./ping');\n\nconst createDHTAPI = require('./dht');\n\nconst createPubSubAPI = require('./pubsub');\n\nconst Multicodecs = require('ipfs-core-utils/src/multicodecs');\n\nconst Multihashes = require('ipfs-core-utils/src/multihashes');\n\nconst Multibases = require('ipfs-core-utils/src/multibases');\n/**\n * @typedef {import('../types').Options} Options\n * @typedef {import('../types').Print} Print\n * @typedef {import('./storage')} StorageAPI\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n */\n\n\nclass IPFS {\n  /**\n   * @param {Object} config\n   * @param {Print} config.print\n   * @param {StorageAPI} config.storage\n   * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n   * @param {Options} config.options\n   */\n  constructor(_ref) {\n    let {\n      print,\n      storage,\n      codecs,\n      options\n    } = _ref;\n    const {\n      peerId,\n      repo,\n      keychain\n    } = storage;\n    const network = Service.create(Network);\n    const preload = createPreloadAPI(options.preload);\n    const dns = createDNSAPI();\n    const isOnline = createIsOnlineAPI({\n      network\n    }); // @ts-ignore This type check fails as options.\n    // libp2p can be a function, while IPNS router config expects libp2p config\n\n    const ipns = new IPNSAPI(options);\n    /** @type {MultihashHasher[]} */\n\n    const multihashHashers = Object.values(hashes);\n    (options.ipld && options.ipld.hashers ? options.ipld.hashers : []).forEach(hasher => multihashHashers.push(hasher));\n    this.hashers = new Multihashes({\n      hashers: multihashHashers,\n      loadHasher: options.ipld && options.ipld.loadHasher\n    });\n    /** @type {MultibaseCodec[]} */\n\n    const multibaseCodecs = Object.values(bases);\n    (options.ipld && options.ipld.bases ? options.ipld.bases : []).forEach(base => multibaseCodecs.push(base));\n    this.bases = new Multibases({\n      bases: multibaseCodecs,\n      loadBase: options.ipld && options.ipld.loadBase\n    });\n    const pin = new PinAPI({\n      repo,\n      codecs\n    });\n    const block = new BlockAPI({\n      codecs,\n      hashers: this.hashers,\n      preload,\n      repo\n    });\n    const name = new NameAPI({\n      dns,\n      ipns,\n      repo,\n      codecs,\n      peerId,\n      isOnline,\n      keychain,\n      options\n    });\n    const resolve = createResolveAPI({\n      repo,\n      codecs,\n      bases: this.bases,\n      name\n    });\n    const dag = new DagAPI({\n      repo,\n      codecs,\n      hashers: this.hashers,\n      preload\n    });\n    const refs = Object.assign(createRefsAPI({\n      repo,\n      codecs,\n      resolve,\n      preload\n    }), {\n      local: createRefsLocalAPI({\n        repo: storage.repo\n      })\n    });\n    const {\n      add,\n      addAll,\n      cat,\n      get,\n      ls\n    } = new RootAPI({\n      preload,\n      repo,\n      options: options.EXPERIMENTAL\n    });\n    const files = createFilesAPI({\n      repo,\n      preload,\n      hashers: this.hashers,\n      options\n    });\n    const mfsPreload = createMfsPreloadAPI({\n      files,\n      preload,\n      options: options.preload\n    });\n    this.preload = preload;\n    this.name = name;\n    this.ipns = ipns;\n    this.pin = pin;\n    this.resolve = resolve;\n    this.block = block;\n    this.refs = refs;\n    this.start = createStartAPI({\n      network,\n      peerId,\n      repo,\n      preload,\n      ipns,\n      mfsPreload,\n      print,\n      keychain,\n      options\n    });\n    this.stop = createStopAPI({\n      network,\n      preload,\n      mfsPreload,\n      ipns,\n      repo\n    });\n    this.dht = createDHTAPI({\n      network,\n      repo\n    });\n    this.pubsub = createPubSubAPI({\n      network,\n      config: options.config\n    });\n    this.dns = dns;\n    this.isOnline = isOnline;\n    this.id = createIDAPI({\n      network,\n      peerId\n    });\n    this.version = createVersionAPI({\n      repo\n    });\n    this.bitswap = new BitswapAPI({\n      network\n    });\n    this.bootstrap = new BootstrapAPI({\n      repo\n    });\n    this.config = createConfigAPI({\n      repo\n    });\n    this.ping = createPingAPI({\n      network\n    });\n    this.add = add;\n    this.addAll = addAll;\n    this.cat = cat;\n    this.get = get;\n    this.ls = ls;\n    this.dag = dag;\n    this.files = files;\n    this.key = new KeyAPI({\n      keychain\n    });\n    this.object = new ObjectAPI({\n      preload,\n      codecs,\n      repo\n    });\n    this.repo = new RepoAPI({\n      repo,\n      hashers: this.hashers\n    });\n    this.stats = new StatsAPI({\n      repo,\n      network\n    });\n    this.swarm = new SwarmAPI({\n      network\n    }); // For the backwards compatibility\n\n    Object.defineProperty(this, 'libp2p', {\n      get() {\n        const net = network.try();\n        return net ? net.libp2p : undefined;\n      }\n\n    }); // unimplemented methods\n\n    const notImplemented = () => Promise.reject(errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED'));\n\n    const notImplementedIter = async function* () {\n      throw errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED');\n    }; // eslint-disable-line require-yield\n\n\n    this.commands = notImplemented;\n    this.diag = {\n      cmds: notImplemented,\n      net: notImplemented,\n      sys: notImplemented\n    };\n    this.log = {\n      level: notImplemented,\n      ls: notImplemented,\n      tail: notImplementedIter\n    };\n    this.mount = notImplemented;\n    this.codecs = codecs;\n  }\n  /**\n   * `IPFS.create` will do the initialization. Keep this around for backwards\n   * compatibility.\n   *\n   * @deprecated\n   */\n\n\n  async init() {\n    // eslint-disable-line require-await\n    throw new AlreadyInitializedError();\n  }\n  /**\n   * @param {Options} options\n   */\n\n\n  static async create() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    options = mergeOptions(getDefaultOptions(), options);\n    const initOptions = options.init || {};\n    /**\n     * @type {BlockCodec}\n     */\n\n    const id = {\n      name: identity.name,\n      code: identity.code,\n      encode: id => id,\n      decode: id => id\n    };\n    /** @type {BlockCodec[]} */\n\n    const blockCodecs = Object.values(codecs);\n    [dagPb, dagCbor, id].concat(options.ipld && options.ipld.codecs || []).forEach(codec => blockCodecs.push(codec));\n    const multicodecs = new Multicodecs({\n      codecs: blockCodecs,\n      loadCodec: options.ipld && options.ipld.loadCodec\n    }); // eslint-disable-next-line no-console\n\n    const print = options.silent ? log : console.log;\n    const storage = await Storage.start(print, multicodecs, options);\n    const config = await storage.repo.config.getAll();\n    const ipfs = new IPFS({\n      storage,\n      print,\n      codecs: multicodecs,\n      options: { ...options,\n        config\n      }\n    });\n    await ipfs.preload.start();\n    ipfs.ipns.startOffline(storage);\n\n    if (storage.isNew && !initOptions.emptyRepo) {\n      // add empty unixfs dir object (go-ipfs assumes this exists)\n      const cid = await addEmptyDir(ipfs);\n      log('adding default assets');\n      await initAssets({\n        addAll: ipfs.addAll,\n        print\n      });\n      log('initializing IPNS keyspace');\n      await ipfs.ipns.initializeKeyspace(storage.peerId.privKey, uint8ArrayFromString(`/ipfs/${cid}`));\n    }\n\n    if (options.start !== false) {\n      await ipfs.start();\n    }\n\n    return ipfs;\n  }\n\n}\n\nmodule.exports = IPFS;\n/**\n * @param {IPFS} ipfs\n */\n\nconst addEmptyDir = async ipfs => {\n  const buf = dagPb.encode({\n    Data: new UnixFS({\n      type: 'directory'\n    }).marshal(),\n    Links: []\n  });\n  const cid = await ipfs.block.put(buf, {\n    mhtype: 'sha2-256',\n    format: 'dag-pb'\n  });\n  await ipfs.pin.add(cid);\n  return cid;\n};\n/**\n * @returns {Options}\n */\n\n\nconst getDefaultOptions = () => ({\n  start: true,\n  EXPERIMENTAL: {},\n  preload: {\n    enabled: !isTest,\n    // preload by default, unless in test env\n    addresses: ['/dns4/node0.preload.ipfs.io/https', '/dns4/node1.preload.ipfs.io/https', '/dns4/node2.preload.ipfs.io/https', '/dns4/node3.preload.ipfs.io/https']\n  }\n});","map":{"version":3,"names":["mergeOptions","require","bind","ignoreUndefined","isTest","log","errCode","UnixFS","dagPb","dagCbor","identity","bases","hashes","codecs","initAssets","AlreadyInitializedError","fromString","uint8ArrayFromString","createStartAPI","createStopAPI","createDNSAPI","createIsOnlineAPI","createResolveAPI","PinAPI","IPNSAPI","NameAPI","createRefsAPI","createRefsLocalAPI","BitswapAPI","BootstrapAPI","BlockAPI","RootAPI","createVersionAPI","createIDAPI","createConfigAPI","DagAPI","createPreloadAPI","createMfsPreloadAPI","createFilesAPI","KeyAPI","ObjectAPI","RepoAPI","StatsAPI","Storage","Network","Service","SwarmAPI","createPingAPI","createDHTAPI","createPubSubAPI","Multicodecs","Multihashes","Multibases","IPFS","constructor","print","storage","options","peerId","repo","keychain","network","create","preload","dns","isOnline","ipns","multihashHashers","Object","values","ipld","hashers","forEach","hasher","push","loadHasher","multibaseCodecs","base","loadBase","pin","block","name","resolve","dag","refs","assign","local","add","addAll","cat","get","ls","EXPERIMENTAL","files","mfsPreload","start","stop","dht","pubsub","config","id","version","bitswap","bootstrap","ping","key","object","stats","swarm","defineProperty","net","try","libp2p","undefined","notImplemented","Promise","reject","Error","notImplementedIter","commands","diag","cmds","sys","level","tail","mount","init","getDefaultOptions","initOptions","code","encode","decode","blockCodecs","concat","codec","multicodecs","loadCodec","silent","console","getAll","ipfs","startOffline","isNew","emptyRepo","cid","addEmptyDir","initializeKeyspace","privKey","module","exports","buf","Data","type","marshal","Links","put","mhtype","format","enabled","addresses"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/index.js"],"sourcesContent":["'use strict'\n\nconst mergeOptions = require('merge-options').bind({ ignoreUndefined: true })\nconst { isTest } = require('ipfs-utils/src/env')\nconst log = require('debug')('ipfs')\nconst errCode = require('err-code')\nconst { UnixFS } = require('ipfs-unixfs')\nconst dagPb = require('@ipld/dag-pb')\nconst dagCbor = require('@ipld/dag-cbor')\nconst { identity } = require('multiformats/hashes/identity')\nconst { bases, hashes, codecs } = require('multiformats/basics')\n\nconst initAssets = require('../runtime/init-assets-nodejs')\nconst { AlreadyInitializedError } = require('../errors')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\n\nconst createStartAPI = require('./start')\nconst createStopAPI = require('./stop')\nconst createDNSAPI = require('./dns')\nconst createIsOnlineAPI = require('./is-online')\nconst createResolveAPI = require('./resolve')\nconst PinAPI = require('./pin')\nconst IPNSAPI = require('./ipns')\nconst NameAPI = require('./name')\nconst createRefsAPI = require('./refs')\nconst createRefsLocalAPI = require('./refs/local')\nconst BitswapAPI = require('./bitswap')\nconst BootstrapAPI = require('./bootstrap')\nconst BlockAPI = require('./block')\nconst RootAPI = require('./root')\nconst createVersionAPI = require('./version')\nconst createIDAPI = require('./id')\nconst createConfigAPI = require('./config')\nconst DagAPI = require('./dag')\nconst createPreloadAPI = require('../preload')\nconst createMfsPreloadAPI = require('../mfs-preload')\nconst createFilesAPI = require('./files')\nconst KeyAPI = require('./key')\nconst ObjectAPI = require('./object')\nconst RepoAPI = require('./repo')\nconst StatsAPI = require('./stats')\nconst Storage = require('./storage')\nconst Network = require('./network')\nconst Service = require('../utils/service')\nconst SwarmAPI = require('./swarm')\nconst createPingAPI = require('./ping')\nconst createDHTAPI = require('./dht')\nconst createPubSubAPI = require('./pubsub')\nconst Multicodecs = require('ipfs-core-utils/src/multicodecs')\nconst Multihashes = require('ipfs-core-utils/src/multihashes')\nconst Multibases = require('ipfs-core-utils/src/multibases')\n\n/**\n * @typedef {import('../types').Options} Options\n * @typedef {import('../types').Print} Print\n * @typedef {import('./storage')} StorageAPI\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n */\n\nclass IPFS {\n  /**\n   * @param {Object} config\n   * @param {Print} config.print\n   * @param {StorageAPI} config.storage\n   * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n   * @param {Options} config.options\n   */\n  constructor ({ print, storage, codecs, options }) {\n    const { peerId, repo, keychain } = storage\n    const network = Service.create(Network)\n\n    const preload = createPreloadAPI(options.preload)\n\n    const dns = createDNSAPI()\n    const isOnline = createIsOnlineAPI({ network })\n    // @ts-ignore This type check fails as options.\n    // libp2p can be a function, while IPNS router config expects libp2p config\n    const ipns = new IPNSAPI(options)\n\n    /** @type {MultihashHasher[]} */\n    const multihashHashers = Object.values(hashes);\n\n    (options.ipld && options.ipld.hashers ? options.ipld.hashers : []).forEach(hasher => multihashHashers.push(hasher))\n\n    this.hashers = new Multihashes({\n      hashers: multihashHashers,\n      loadHasher: options.ipld && options.ipld.loadHasher\n    })\n\n    /** @type {MultibaseCodec[]} */\n    const multibaseCodecs = Object.values(bases);\n\n    (options.ipld && options.ipld.bases ? options.ipld.bases : []).forEach(base => multibaseCodecs.push(base))\n\n    this.bases = new Multibases({\n      bases: multibaseCodecs,\n      loadBase: options.ipld && options.ipld.loadBase\n    })\n\n    const pin = new PinAPI({ repo, codecs })\n    const block = new BlockAPI({ codecs, hashers: this.hashers, preload, repo })\n\n    const name = new NameAPI({\n      dns,\n      ipns,\n      repo,\n      codecs,\n      peerId,\n      isOnline,\n      keychain,\n      options\n    })\n\n    const resolve = createResolveAPI({ repo, codecs, bases: this.bases, name })\n\n    const dag = new DagAPI({ repo, codecs, hashers: this.hashers, preload })\n    const refs = Object.assign(createRefsAPI({ repo, codecs, resolve, preload }), {\n      local: createRefsLocalAPI({ repo: storage.repo })\n    })\n    const { add, addAll, cat, get, ls } = new RootAPI({\n      preload,\n      repo,\n      options: options.EXPERIMENTAL\n    })\n\n    const files = createFilesAPI({\n      repo,\n      preload,\n      hashers: this.hashers,\n      options\n    })\n\n    const mfsPreload = createMfsPreloadAPI({\n      files,\n      preload,\n      options: options.preload\n    })\n\n    this.preload = preload\n    this.name = name\n    this.ipns = ipns\n    this.pin = pin\n    this.resolve = resolve\n    this.block = block\n    this.refs = refs\n\n    this.start = createStartAPI({\n      network,\n      peerId,\n      repo,\n      preload,\n      ipns,\n      mfsPreload,\n      print,\n      keychain,\n      options\n    })\n\n    this.stop = createStopAPI({\n      network,\n      preload,\n      mfsPreload,\n      ipns,\n      repo\n    })\n\n    this.dht = createDHTAPI({ network, repo })\n    this.pubsub = createPubSubAPI({ network, config: options.config })\n    this.dns = dns\n    this.isOnline = isOnline\n    this.id = createIDAPI({ network, peerId })\n    this.version = createVersionAPI({ repo })\n    this.bitswap = new BitswapAPI({ network })\n    this.bootstrap = new BootstrapAPI({ repo })\n    this.config = createConfigAPI({ repo })\n    this.ping = createPingAPI({ network })\n\n    this.add = add\n    this.addAll = addAll\n    this.cat = cat\n    this.get = get\n    this.ls = ls\n\n    this.dag = dag\n    this.files = files\n    this.key = new KeyAPI({ keychain })\n    this.object = new ObjectAPI({ preload, codecs, repo })\n    this.repo = new RepoAPI({ repo, hashers: this.hashers })\n    this.stats = new StatsAPI({ repo, network })\n    this.swarm = new SwarmAPI({ network })\n\n    // For the backwards compatibility\n    Object.defineProperty(this, 'libp2p', {\n      get () {\n        const net = network.try()\n        return net ? net.libp2p : undefined\n      }\n    })\n\n    // unimplemented methods\n    const notImplemented = () => Promise.reject(errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED'))\n    const notImplementedIter = async function * () { throw errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED') } // eslint-disable-line require-yield\n    this.commands = notImplemented\n    this.diag = {\n      cmds: notImplemented,\n      net: notImplemented,\n      sys: notImplemented\n    }\n    this.log = {\n      level: notImplemented,\n      ls: notImplemented,\n      tail: notImplementedIter\n    }\n    this.mount = notImplemented\n\n    this.codecs = codecs\n  }\n\n  /**\n   * `IPFS.create` will do the initialization. Keep this around for backwards\n   * compatibility.\n   *\n   * @deprecated\n   */\n  async init () { // eslint-disable-line require-await\n    throw new AlreadyInitializedError()\n  }\n\n  /**\n   * @param {Options} options\n   */\n  static async create (options = {}) {\n    options = mergeOptions(getDefaultOptions(), options)\n    const initOptions = options.init || {}\n\n    /**\n     * @type {BlockCodec}\n     */\n    const id = {\n      name: identity.name,\n      code: identity.code,\n      encode: (id) => id,\n      decode: (id) => id\n    }\n\n    /** @type {BlockCodec[]} */\n    const blockCodecs = Object.values(codecs);\n\n    [dagPb, dagCbor, id].concat((options.ipld && options.ipld.codecs) || []).forEach(codec => blockCodecs.push(codec))\n\n    const multicodecs = new Multicodecs({\n      codecs: blockCodecs,\n      loadCodec: options.ipld && options.ipld.loadCodec\n    })\n\n    // eslint-disable-next-line no-console\n    const print = options.silent ? log : console.log\n    const storage = await Storage.start(print, multicodecs, options)\n    const config = await storage.repo.config.getAll()\n\n    const ipfs = new IPFS({\n      storage,\n      print,\n      codecs: multicodecs,\n      options: { ...options, config }\n    })\n\n    await ipfs.preload.start()\n\n    ipfs.ipns.startOffline(storage)\n\n    if (storage.isNew && !initOptions.emptyRepo) {\n      // add empty unixfs dir object (go-ipfs assumes this exists)\n      const cid = await addEmptyDir(ipfs)\n\n      log('adding default assets')\n      await initAssets({ addAll: ipfs.addAll, print })\n\n      log('initializing IPNS keyspace')\n      await ipfs.ipns.initializeKeyspace(storage.peerId.privKey, uint8ArrayFromString(`/ipfs/${cid}`))\n    }\n\n    if (options.start !== false) {\n      await ipfs.start()\n    }\n\n    return ipfs\n  }\n}\n\nmodule.exports = IPFS\n\n/**\n * @param {IPFS} ipfs\n */\nconst addEmptyDir = async (ipfs) => {\n  const buf = dagPb.encode({\n    Data: new UnixFS({ type: 'directory' }).marshal(),\n    Links: []\n  })\n\n  const cid = await ipfs.block.put(buf, {\n    mhtype: 'sha2-256',\n    format: 'dag-pb'\n  })\n\n  await ipfs.pin.add(cid)\n\n  return cid\n}\n\n/**\n * @returns {Options}\n */\nconst getDefaultOptions = () => ({\n  start: true,\n  EXPERIMENTAL: {},\n  preload: {\n    enabled: !isTest, // preload by default, unless in test env\n    addresses: [\n      '/dns4/node0.preload.ipfs.io/https',\n      '/dns4/node1.preload.ipfs.io/https',\n      '/dns4/node2.preload.ipfs.io/https',\n      '/dns4/node3.preload.ipfs.io/https'\n    ]\n  }\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}