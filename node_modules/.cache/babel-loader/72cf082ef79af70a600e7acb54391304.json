{"ast":null,"code":"'use strict';\n\nconst PeerId = require('peer-id');\n\nconst {\n  Multiaddr\n} = require('multiaddr');\n\nconst errCode = require('err-code');\n\nconst {\n  OPEN,\n  CLOSING,\n  CLOSED\n} = require('./status');\n\nconst connectionSymbol = Symbol.for('@libp2p/interface-connection/connection');\n/**\n * @typedef {import('../stream-muxer/types').MuxedStream} MuxedStream\n * @typedef {import('./status').Status} Status\n */\n\n/**\n * @typedef {Object} Timeline\n * @property {number} open - connection opening timestamp.\n * @property {number} [upgraded] - connection upgraded timestamp.\n * @property {number} [close]\n *\n * @typedef {Object} ConectionStat\n * @property {'inbound' | 'outbound'} direction - connection establishment direction\n * @property {Timeline} timeline - connection relevant events timestamp.\n * @property {string} [multiplexer] - connection multiplexing identifier.\n * @property {string} [encryption] - connection encryption method identifier.\n *\n * @typedef {(protocols: string|string[]) => Promise<{stream: MuxedStream, protocol: string}>} CreatedMuxedStream\n *\n * @typedef {Object} ConnectionOptions\n * @property {Multiaddr} [localAddr] - local multiaddr of the connection if known.\n * @property {Multiaddr} remoteAddr - remote multiaddr of the connection.\n * @property {PeerId} localPeer - local peer-id.\n * @property {PeerId} remotePeer - remote peer-id.\n * @property {CreatedMuxedStream} newStream - new stream muxer function.\n * @property {() => Promise<void>} close - close raw connection function.\n * @property {() => MuxedStream[]} getStreams - get streams from muxer function.\n * @property {ConectionStat} stat - metadata of the connection.\n *\n * @typedef {Object} StreamData\n * @property {string} protocol - the protocol used by the stream\n * @property {Object} [metadata] - metadata of the stream\n */\n\n/**\n * An implementation of the js-libp2p connection.\n * Any libp2p transport should use an upgrader to return this connection.\n */\n\nclass Connection {\n  /**\n   * An implementation of the js-libp2p connection.\n   * Any libp2p transport should use an upgrader to return this connection.\n   *\n   * @class\n   * @param {ConnectionOptions} options\n   */\n  constructor(_ref) {\n    let {\n      localAddr,\n      remoteAddr,\n      localPeer,\n      remotePeer,\n      newStream,\n      close,\n      getStreams,\n      stat\n    } = _ref;\n    validateArgs(localAddr, localPeer, remotePeer, newStream, close, getStreams, stat);\n    /**\n     * Connection identifier.\n     */\n\n    this.id = parseInt(String(Math.random() * 1e9)).toString(36) + Date.now();\n    /**\n     * Observed multiaddr of the local peer\n     */\n\n    this.localAddr = localAddr;\n    /**\n     * Observed multiaddr of the remote peer\n     */\n\n    this.remoteAddr = remoteAddr;\n    /**\n     * Local peer id.\n     */\n\n    this.localPeer = localPeer;\n    /**\n     * Remote peer id.\n     */\n\n    this.remotePeer = remotePeer;\n    /**\n     * Connection metadata.\n     *\n     * @type {ConectionStat & {status: Status}}\n     */\n\n    this._stat = { ...stat,\n      status: OPEN\n    };\n    /**\n     * Reference to the new stream function of the multiplexer\n     */\n\n    this._newStream = newStream;\n    /**\n     * Reference to the close function of the raw connection\n     */\n\n    this._close = close;\n    /**\n     * Reference to the getStreams function of the muxer\n     */\n\n    this._getStreams = getStreams;\n    /**\n     * Connection streams registry\n     */\n\n    this.registry = new Map();\n    /**\n     * User provided tags\n     *\n     * @type {string[]}\n     */\n\n    this.tags = [];\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Connection';\n  }\n\n  get [connectionSymbol]() {\n    return true;\n  }\n  /**\n   * Checks if the given value is a `Connection` instance.\n   *\n   * @param {any} other\n   * @returns {other is Connection}\n   */\n\n\n  static isConnection(other) {\n    return Boolean(other && other[connectionSymbol]);\n  }\n  /**\n   * Get connection metadata\n   *\n   * @this {Connection}\n   */\n\n\n  get stat() {\n    return this._stat;\n  }\n  /**\n   * Get all the streams of the muxer.\n   *\n   * @this {Connection}\n   */\n\n\n  get streams() {\n    return this._getStreams();\n  }\n  /**\n   * Create a new stream from this connection\n   *\n   * @param {string|string[]} protocols - intended protocol for the stream\n   * @returns {Promise<{stream: MuxedStream, protocol: string}>} with muxed+multistream-selected stream and selected protocol\n   */\n\n\n  async newStream(protocols) {\n    if (this.stat.status === CLOSING) {\n      throw errCode(new Error('the connection is being closed'), 'ERR_CONNECTION_BEING_CLOSED');\n    }\n\n    if (this.stat.status === CLOSED) {\n      throw errCode(new Error('the connection is closed'), 'ERR_CONNECTION_CLOSED');\n    }\n\n    if (!Array.isArray(protocols)) protocols = [protocols];\n    const {\n      stream,\n      protocol\n    } = await this._newStream(protocols);\n    this.addStream(stream, {\n      protocol\n    });\n    return {\n      stream,\n      protocol\n    };\n  }\n  /**\n   * Add a stream when it is opened to the registry.\n   *\n   * @param {MuxedStream} muxedStream - a muxed stream\n   * @param {StreamData} data - the stream data to be registered\n   * @returns {void}\n   */\n\n\n  addStream(muxedStream, _ref2) {\n    let {\n      protocol,\n      metadata = {}\n    } = _ref2;\n    // Add metadata for the stream\n    this.registry.set(muxedStream.id, {\n      protocol,\n      ...metadata\n    });\n  }\n  /**\n   * Remove stream registry after it is closed.\n   *\n   * @param {string} id - identifier of the stream\n   */\n\n\n  removeStream(id) {\n    this.registry.delete(id);\n  }\n  /**\n   * Close the connection.\n   *\n   * @returns {Promise<void>}\n   */\n\n\n  async close() {\n    if (this.stat.status === CLOSED) {\n      return;\n    }\n\n    if (this._closing) {\n      return this._closing;\n    }\n\n    this.stat.status = CLOSING; // Close raw connection\n\n    this._closing = await this._close();\n    this._stat.timeline.close = Date.now();\n    this.stat.status = CLOSED;\n  }\n\n}\n\nmodule.exports = Connection;\n/**\n * @param {Multiaddr|undefined} localAddr\n * @param {PeerId} localPeer\n * @param {PeerId} remotePeer\n * @param {(protocols: string | string[]) => Promise<{ stream: import(\"../stream-muxer/types\").MuxedStream; protocol: string; }>} newStream\n * @param {() => Promise<void>} close\n * @param {() => import(\"../stream-muxer/types\").MuxedStream[]} getStreams\n * @param {{ direction: any; timeline: any; multiplexer?: string | undefined; encryption?: string | undefined; }} stat\n */\n\nfunction validateArgs(localAddr, localPeer, remotePeer, newStream, close, getStreams, stat) {\n  if (localAddr && !Multiaddr.isMultiaddr(localAddr)) {\n    throw errCode(new Error('localAddr must be an instance of multiaddr'), 'ERR_INVALID_PARAMETERS');\n  }\n\n  if (!PeerId.isPeerId(localPeer)) {\n    throw errCode(new Error('localPeer must be an instance of peer-id'), 'ERR_INVALID_PARAMETERS');\n  }\n\n  if (!PeerId.isPeerId(remotePeer)) {\n    throw errCode(new Error('remotePeer must be an instance of peer-id'), 'ERR_INVALID_PARAMETERS');\n  }\n\n  if (typeof newStream !== 'function') {\n    throw errCode(new Error('new stream must be a function'), 'ERR_INVALID_PARAMETERS');\n  }\n\n  if (typeof close !== 'function') {\n    throw errCode(new Error('close must be a function'), 'ERR_INVALID_PARAMETERS');\n  }\n\n  if (typeof getStreams !== 'function') {\n    throw errCode(new Error('getStreams must be a function'), 'ERR_INVALID_PARAMETERS');\n  }\n\n  if (!stat) {\n    throw errCode(new Error('connection metadata object must be provided'), 'ERR_INVALID_PARAMETERS');\n  }\n\n  if (stat.direction !== 'inbound' && stat.direction !== 'outbound') {\n    throw errCode(new Error('direction must be \"inbound\" or \"outbound\"'), 'ERR_INVALID_PARAMETERS');\n  }\n\n  if (!stat.timeline) {\n    throw errCode(new Error('connection timeline object must be provided in the stat object'), 'ERR_INVALID_PARAMETERS');\n  }\n\n  if (!stat.timeline.open) {\n    throw errCode(new Error('connection open timestamp must be provided'), 'ERR_INVALID_PARAMETERS');\n  }\n\n  if (!stat.timeline.upgraded) {\n    throw errCode(new Error('connection upgraded timestamp must be provided'), 'ERR_INVALID_PARAMETERS');\n  }\n}","map":{"version":3,"names":["PeerId","require","Multiaddr","errCode","OPEN","CLOSING","CLOSED","connectionSymbol","Symbol","for","Connection","constructor","localAddr","remoteAddr","localPeer","remotePeer","newStream","close","getStreams","stat","validateArgs","id","parseInt","String","Math","random","toString","Date","now","_stat","status","_newStream","_close","_getStreams","registry","Map","tags","toStringTag","isConnection","other","Boolean","streams","protocols","Error","Array","isArray","stream","protocol","addStream","muxedStream","metadata","set","removeStream","delete","_closing","timeline","module","exports","isMultiaddr","isPeerId","direction","open","upgraded"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-interfaces/src/connection/connection.js"],"sourcesContent":["'use strict'\n\nconst PeerId = require('peer-id')\nconst { Multiaddr } = require('multiaddr')\nconst errCode = require('err-code')\nconst { OPEN, CLOSING, CLOSED } = require('./status')\n\nconst connectionSymbol = Symbol.for('@libp2p/interface-connection/connection')\n\n/**\n * @typedef {import('../stream-muxer/types').MuxedStream} MuxedStream\n * @typedef {import('./status').Status} Status\n */\n\n/**\n * @typedef {Object} Timeline\n * @property {number} open - connection opening timestamp.\n * @property {number} [upgraded] - connection upgraded timestamp.\n * @property {number} [close]\n *\n * @typedef {Object} ConectionStat\n * @property {'inbound' | 'outbound'} direction - connection establishment direction\n * @property {Timeline} timeline - connection relevant events timestamp.\n * @property {string} [multiplexer] - connection multiplexing identifier.\n * @property {string} [encryption] - connection encryption method identifier.\n *\n * @typedef {(protocols: string|string[]) => Promise<{stream: MuxedStream, protocol: string}>} CreatedMuxedStream\n *\n * @typedef {Object} ConnectionOptions\n * @property {Multiaddr} [localAddr] - local multiaddr of the connection if known.\n * @property {Multiaddr} remoteAddr - remote multiaddr of the connection.\n * @property {PeerId} localPeer - local peer-id.\n * @property {PeerId} remotePeer - remote peer-id.\n * @property {CreatedMuxedStream} newStream - new stream muxer function.\n * @property {() => Promise<void>} close - close raw connection function.\n * @property {() => MuxedStream[]} getStreams - get streams from muxer function.\n * @property {ConectionStat} stat - metadata of the connection.\n *\n * @typedef {Object} StreamData\n * @property {string} protocol - the protocol used by the stream\n * @property {Object} [metadata] - metadata of the stream\n */\n\n/**\n * An implementation of the js-libp2p connection.\n * Any libp2p transport should use an upgrader to return this connection.\n */\nclass Connection {\n  /**\n   * An implementation of the js-libp2p connection.\n   * Any libp2p transport should use an upgrader to return this connection.\n   *\n   * @class\n   * @param {ConnectionOptions} options\n   */\n  constructor ({ localAddr, remoteAddr, localPeer, remotePeer, newStream, close, getStreams, stat }) {\n    validateArgs(localAddr, localPeer, remotePeer, newStream, close, getStreams, stat)\n\n    /**\n     * Connection identifier.\n     */\n    this.id = (parseInt(String(Math.random() * 1e9))).toString(36) + Date.now()\n\n    /**\n     * Observed multiaddr of the local peer\n     */\n    this.localAddr = localAddr\n\n    /**\n     * Observed multiaddr of the remote peer\n     */\n    this.remoteAddr = remoteAddr\n\n    /**\n     * Local peer id.\n     */\n    this.localPeer = localPeer\n\n    /**\n     * Remote peer id.\n     */\n    this.remotePeer = remotePeer\n\n    /**\n     * Connection metadata.\n     *\n     * @type {ConectionStat & {status: Status}}\n     */\n    this._stat = {\n      ...stat,\n      status: OPEN\n    }\n\n    /**\n     * Reference to the new stream function of the multiplexer\n     */\n    this._newStream = newStream\n\n    /**\n     * Reference to the close function of the raw connection\n     */\n    this._close = close\n\n    /**\n     * Reference to the getStreams function of the muxer\n     */\n    this._getStreams = getStreams\n\n    /**\n     * Connection streams registry\n     */\n    this.registry = new Map()\n\n    /**\n     * User provided tags\n     *\n     * @type {string[]}\n     */\n    this.tags = []\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'Connection'\n  }\n\n  get [connectionSymbol] () {\n    return true\n  }\n\n  /**\n   * Checks if the given value is a `Connection` instance.\n   *\n   * @param {any} other\n   * @returns {other is Connection}\n   */\n  static isConnection (other) {\n    return Boolean(other && other[connectionSymbol])\n  }\n\n  /**\n   * Get connection metadata\n   *\n   * @this {Connection}\n   */\n  get stat () {\n    return this._stat\n  }\n\n  /**\n   * Get all the streams of the muxer.\n   *\n   * @this {Connection}\n   */\n  get streams () {\n    return this._getStreams()\n  }\n\n  /**\n   * Create a new stream from this connection\n   *\n   * @param {string|string[]} protocols - intended protocol for the stream\n   * @returns {Promise<{stream: MuxedStream, protocol: string}>} with muxed+multistream-selected stream and selected protocol\n   */\n  async newStream (protocols) {\n    if (this.stat.status === CLOSING) {\n      throw errCode(new Error('the connection is being closed'), 'ERR_CONNECTION_BEING_CLOSED')\n    }\n\n    if (this.stat.status === CLOSED) {\n      throw errCode(new Error('the connection is closed'), 'ERR_CONNECTION_CLOSED')\n    }\n\n    if (!Array.isArray(protocols)) protocols = [protocols]\n\n    const { stream, protocol } = await this._newStream(protocols)\n\n    this.addStream(stream, { protocol })\n\n    return {\n      stream,\n      protocol\n    }\n  }\n\n  /**\n   * Add a stream when it is opened to the registry.\n   *\n   * @param {MuxedStream} muxedStream - a muxed stream\n   * @param {StreamData} data - the stream data to be registered\n   * @returns {void}\n   */\n  addStream (muxedStream, { protocol, metadata = {} }) {\n    // Add metadata for the stream\n    this.registry.set(muxedStream.id, {\n      protocol,\n      ...metadata\n    })\n  }\n\n  /**\n   * Remove stream registry after it is closed.\n   *\n   * @param {string} id - identifier of the stream\n   */\n  removeStream (id) {\n    this.registry.delete(id)\n  }\n\n  /**\n   * Close the connection.\n   *\n   * @returns {Promise<void>}\n   */\n  async close () {\n    if (this.stat.status === CLOSED) {\n      return\n    }\n\n    if (this._closing) {\n      return this._closing\n    }\n\n    this.stat.status = CLOSING\n\n    // Close raw connection\n    this._closing = await this._close()\n\n    this._stat.timeline.close = Date.now()\n    this.stat.status = CLOSED\n  }\n}\n\nmodule.exports = Connection\n\n/**\n * @param {Multiaddr|undefined} localAddr\n * @param {PeerId} localPeer\n * @param {PeerId} remotePeer\n * @param {(protocols: string | string[]) => Promise<{ stream: import(\"../stream-muxer/types\").MuxedStream; protocol: string; }>} newStream\n * @param {() => Promise<void>} close\n * @param {() => import(\"../stream-muxer/types\").MuxedStream[]} getStreams\n * @param {{ direction: any; timeline: any; multiplexer?: string | undefined; encryption?: string | undefined; }} stat\n */\nfunction validateArgs (localAddr, localPeer, remotePeer, newStream, close, getStreams, stat) {\n  if (localAddr && !Multiaddr.isMultiaddr(localAddr)) {\n    throw errCode(new Error('localAddr must be an instance of multiaddr'), 'ERR_INVALID_PARAMETERS')\n  }\n\n  if (!PeerId.isPeerId(localPeer)) {\n    throw errCode(new Error('localPeer must be an instance of peer-id'), 'ERR_INVALID_PARAMETERS')\n  }\n\n  if (!PeerId.isPeerId(remotePeer)) {\n    throw errCode(new Error('remotePeer must be an instance of peer-id'), 'ERR_INVALID_PARAMETERS')\n  }\n\n  if (typeof newStream !== 'function') {\n    throw errCode(new Error('new stream must be a function'), 'ERR_INVALID_PARAMETERS')\n  }\n\n  if (typeof close !== 'function') {\n    throw errCode(new Error('close must be a function'), 'ERR_INVALID_PARAMETERS')\n  }\n\n  if (typeof getStreams !== 'function') {\n    throw errCode(new Error('getStreams must be a function'), 'ERR_INVALID_PARAMETERS')\n  }\n\n  if (!stat) {\n    throw errCode(new Error('connection metadata object must be provided'), 'ERR_INVALID_PARAMETERS')\n  }\n\n  if (stat.direction !== 'inbound' && stat.direction !== 'outbound') {\n    throw errCode(new Error('direction must be \"inbound\" or \"outbound\"'), 'ERR_INVALID_PARAMETERS')\n  }\n\n  if (!stat.timeline) {\n    throw errCode(new Error('connection timeline object must be provided in the stat object'), 'ERR_INVALID_PARAMETERS')\n  }\n\n  if (!stat.timeline.open) {\n    throw errCode(new Error('connection open timestamp must be provided'), 'ERR_INVALID_PARAMETERS')\n  }\n\n  if (!stat.timeline.upgraded) {\n    throw errCode(new Error('connection upgraded timestamp must be provided'), 'ERR_INVALID_PARAMETERS')\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}