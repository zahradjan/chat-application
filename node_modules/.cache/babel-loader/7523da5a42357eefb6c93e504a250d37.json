{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _require = require('ipfs-unixfs'),\n    UnixFS = _require.UnixFS;\n\nvar dagPb = require('@ipld/dag-pb');\n\nvar _require2 = require('multiformats/cid'),\n    CID = _require2.CID;\n/**\n * @typedef {import('ipfs-unixfs').MtimeLike} MtimeLike\n * @typedef {import('multiformats/cid').CIDVersion} CIDVersion\n * @typedef {import('../').MfsContext} MfsContext\n */\n\n/**\n * @param {MfsContext} context\n * @param {'file' | 'directory'} type\n * @param {object} options\n * @param {string} options.hashAlg\n * @param {CIDVersion} options.cidVersion\n * @param {boolean} options.flush\n * @param {MtimeLike} [options.mtime]\n * @param {number} [options.mode]\n */\n\n\nvar createNode = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(context, type, options) {\n    var metadata, hasher, node, buf, hash, cid;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            metadata = new UnixFS({\n              type: type,\n              mode: options.mode,\n              // @ts-ignore TODO: restore hrtime support to ipfs-unixfs constructor - it's in the code, just not the signature\n              mtime: options.mtime\n            }); // Persist the new parent PBNode\n\n            _context.next = 3;\n            return context.hashers.getHasher(options.hashAlg);\n\n          case 3:\n            hasher = _context.sent;\n            node = {\n              Data: metadata.marshal(),\n              Links: []\n            };\n            buf = dagPb.encode(node);\n            _context.next = 8;\n            return hasher.digest(buf);\n\n          case 8:\n            hash = _context.sent;\n            cid = CID.create(options.cidVersion, dagPb.code, hash);\n\n            if (!options.flush) {\n              _context.next = 13;\n              break;\n            }\n\n            _context.next = 13;\n            return context.repo.blocks.put(cid, buf);\n\n          case 13:\n            return _context.abrupt(\"return\", {\n              cid: cid,\n              node: node\n            });\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function createNode(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = createNode;","map":{"version":3,"names":["require","UnixFS","dagPb","CID","createNode","context","type","options","metadata","mode","mtime","hashers","getHasher","hashAlg","hasher","node","Data","marshal","Links","buf","encode","digest","hash","cid","create","cidVersion","code","flush","repo","blocks","put","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/files/utils/create-node.js"],"sourcesContent":["'use strict'\n\nconst { UnixFS } = require('ipfs-unixfs')\nconst dagPb = require('@ipld/dag-pb')\nconst { CID } = require('multiformats/cid')\n\n/**\n * @typedef {import('ipfs-unixfs').MtimeLike} MtimeLike\n * @typedef {import('multiformats/cid').CIDVersion} CIDVersion\n * @typedef {import('../').MfsContext} MfsContext\n */\n\n/**\n * @param {MfsContext} context\n * @param {'file' | 'directory'} type\n * @param {object} options\n * @param {string} options.hashAlg\n * @param {CIDVersion} options.cidVersion\n * @param {boolean} options.flush\n * @param {MtimeLike} [options.mtime]\n * @param {number} [options.mode]\n */\nconst createNode = async (context, type, options) => {\n  const metadata = new UnixFS({\n    type,\n    mode: options.mode,\n    // @ts-ignore TODO: restore hrtime support to ipfs-unixfs constructor - it's in the code, just not the signature\n    mtime: options.mtime\n  })\n\n  // Persist the new parent PBNode\n  const hasher = await context.hashers.getHasher(options.hashAlg)\n  const node = {\n    Data: metadata.marshal(),\n    Links: []\n  }\n  const buf = dagPb.encode(node)\n  const hash = await hasher.digest(buf)\n  const cid = CID.create(options.cidVersion, dagPb.code, hash)\n\n  if (options.flush) {\n    await context.repo.blocks.put(cid, buf)\n  }\n\n  return {\n    cid,\n    node\n  }\n}\n\nmodule.exports = createNode\n"],"mappings":"AAAA;;;;;;AAEA,eAAmBA,OAAO,CAAC,aAAD,CAA1B;AAAA,IAAQC,MAAR,YAAQA,MAAR;;AACA,IAAMC,KAAK,GAAGF,OAAO,CAAC,cAAD,CAArB;;AACA,gBAAgBA,OAAO,CAAC,kBAAD,CAAvB;AAAA,IAAQG,GAAR,aAAQA,GAAR;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMC,UAAU;EAAA,sEAAG,iBAAOC,OAAP,EAAgBC,IAAhB,EAAsBC,OAAtB;IAAA;IAAA;MAAA;QAAA;UAAA;YACXC,QADW,GACA,IAAIP,MAAJ,CAAW;cAC1BK,IAAI,EAAJA,IAD0B;cAE1BG,IAAI,EAAEF,OAAO,CAACE,IAFY;cAG1B;cACAC,KAAK,EAAEH,OAAO,CAACG;YAJW,CAAX,CADA,EAQjB;;YARiB;YAAA,OASIL,OAAO,CAACM,OAAR,CAAgBC,SAAhB,CAA0BL,OAAO,CAACM,OAAlC,CATJ;;UAAA;YASXC,MATW;YAUXC,IAVW,GAUJ;cACXC,IAAI,EAAER,QAAQ,CAACS,OAAT,EADK;cAEXC,KAAK,EAAE;YAFI,CAVI;YAcXC,GAdW,GAcLjB,KAAK,CAACkB,MAAN,CAAaL,IAAb,CAdK;YAAA;YAAA,OAeED,MAAM,CAACO,MAAP,CAAcF,GAAd,CAfF;;UAAA;YAeXG,IAfW;YAgBXC,GAhBW,GAgBLpB,GAAG,CAACqB,MAAJ,CAAWjB,OAAO,CAACkB,UAAnB,EAA+BvB,KAAK,CAACwB,IAArC,EAA2CJ,IAA3C,CAhBK;;YAAA,KAkBbf,OAAO,CAACoB,KAlBK;cAAA;cAAA;YAAA;;YAAA;YAAA,OAmBTtB,OAAO,CAACuB,IAAR,CAAaC,MAAb,CAAoBC,GAApB,CAAwBP,GAAxB,EAA6BJ,GAA7B,CAnBS;;UAAA;YAAA,iCAsBV;cACLI,GAAG,EAAHA,GADK;cAELR,IAAI,EAAJA;YAFK,CAtBU;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAH;;EAAA,gBAAVX,UAAU;IAAA;EAAA;AAAA,GAAhB;;AA4BA2B,MAAM,CAACC,OAAP,GAAiB5B,UAAjB"},"metadata":{},"sourceType":"script"}