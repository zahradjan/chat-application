{"ast":null,"code":"'use strict';\n\nconst log = require('debug')('ipfs:mfs:write');\n\nconst {\n  importer\n} = require('ipfs-unixfs-importer');\n\nconst {\n  decode // @ts-ignore - TODO vmx 2021-03-31\n\n} = require('@ipld/dag-pb');\n\nconst {\n  sha256,\n  sha512\n} = require('multiformats/hashes/sha2');\n\nconst stat = require('./stat');\n\nconst mkdir = require('./mkdir');\n\nconst addLink = require('./utils/add-link');\n\nconst mergeOptions = require('merge-options').bind({\n  ignoreUndefined: true\n});\n\nconst createLock = require('./utils/create-lock');\n\nconst toAsyncIterator = require('./utils/to-async-iterator');\n\nconst toMfsPath = require('./utils/to-mfs-path');\n\nconst toPathComponents = require('./utils/to-path-components');\n\nconst toTrail = require('./utils/to-trail');\n\nconst updateTree = require('./utils/update-tree');\n\nconst updateMfsRoot = require('./utils/update-mfs-root');\n\nconst errCode = require('err-code');\n\nconst {\n  MFS_MAX_CHUNK_SIZE\n} = require('../../utils');\n\nconst last = require('it-last');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst {\n  parseMode,\n  parseMtime\n} = require('ipfs-unixfs');\n/**\n * @typedef {import('multiformats/cid').CIDVersion} CIDVersion\n * @typedef {import('ipfs-unixfs').MtimeLike} MtimeLike\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {import('./utils/to-mfs-path').FilePath} FilePath\n * @typedef {import('./utils/to-mfs-path').MfsPath} MfsPath\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n *\n * @typedef {object} DefaultOptions\n * @property {number} offset\n * @property {number} length\n * @property {boolean} create\n * @property {boolean} truncate\n * @property {boolean} rawLeaves\n * @property {boolean} reduceSingleLeafToSelf\n * @property {CIDVersion} cidVersion\n * @property {string} hashAlg\n * @property {boolean} parents\n * @property {import('ipfs-core-types/src/root').AddProgressFn} progress\n * @property {'trickle' | 'balanced'} strategy\n * @property {boolean} flush\n * @property {'raw' | 'file'} leafType\n * @property {number} shardSplitThreshold\n * @property {MtimeLike} [mtime]\n * @property {number} [mode]\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\n\n\nconst defaultOptions = {\n  offset: 0,\n  // the offset in the file to begin writing\n  length: Infinity,\n  // how many bytes from the incoming buffer to write\n  create: false,\n  // whether to create the file if it does not exist\n  truncate: false,\n  // whether to truncate the file first\n  rawLeaves: false,\n  reduceSingleLeafToSelf: false,\n  cidVersion: 0,\n  hashAlg: 'sha2-256',\n  parents: false,\n  // whether to create intermediate directories if they do not exist\n  progress: (bytes, path) => {},\n  strategy: 'trickle',\n  flush: true,\n  leafType: 'raw',\n  shardSplitThreshold: 1000\n};\n/**\n * @param {MfsContext} context\n */\n\nmodule.exports = context => {\n  /**\n   * @type {import('ipfs-core-types/src/files').API[\"write\"]}\n   */\n  async function mfsWrite(path, content) {\n    let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    /** @type {DefaultOptions} */\n    const options = mergeOptions(defaultOptions, opts);\n    /** @type {AsyncIterable<Uint8Array>} */\n\n    let source;\n    /** @type {MfsPath} */\n\n    let destination;\n    /** @type {MfsPath} */\n\n    let parent;\n    log('Reading source, destination and parent');\n    await createLock().readLock(async () => {\n      source = await toAsyncIterator(content);\n      destination = await toMfsPath(context, path, options);\n      parent = await toMfsPath(context, destination.mfsDirectory, options);\n    })();\n    log('Read source, destination and parent'); // @ts-ignore - parent may be undefined\n\n    if (!options.parents && !parent.exists) {\n      throw errCode(new Error('directory does not exist'), 'ERR_NO_EXIST');\n    } // @ts-ignore\n\n\n    if (source == null) {\n      throw errCode(new Error('could not create source'), 'ERR_NO_SOURCE');\n    } // @ts-ignore\n\n\n    if (destination == null) {\n      throw errCode(new Error('could not create destination'), 'ERR_NO_DESTINATION');\n    }\n\n    if (!options.create && !destination.exists) {\n      throw errCode(new Error('file does not exist'), 'ERR_NO_EXIST');\n    }\n\n    if (destination.entryType !== 'file') {\n      throw errCode(new Error('not a file'), 'ERR_NOT_A_FILE');\n    }\n\n    return updateOrImport(context, path, source, destination, options);\n  }\n\n  return withTimeoutOption(mfsWrite);\n};\n/**\n * @param {MfsContext} context\n * @param {string} path\n * @param {AsyncIterable<Uint8Array>} source\n * @param {FilePath} destination\n * @param {DefaultOptions} options\n */\n\n\nconst updateOrImport = async (context, path, source, destination, options) => {\n  const child = await write(context, source, destination, options); // The slow bit is done, now add or replace the DAGLink in the containing directory\n  // re-reading the path to the containing folder in case it has changed in the interim\n\n  await createLock().writeLock(async () => {\n    const pathComponents = toPathComponents(path);\n    const fileName = pathComponents.pop();\n\n    if (fileName == null) {\n      throw errCode(new Error('source does not exist'), 'ERR_NO_EXIST');\n    }\n\n    let parentExists = false;\n\n    try {\n      await stat(context)(`/${pathComponents.join('/')}`, options);\n      parentExists = true;\n    } catch (err) {\n      if (err.code !== 'ERR_NOT_FOUND') {\n        throw err;\n      }\n    }\n\n    if (!parentExists) {\n      await mkdir(context)(`/${pathComponents.join('/')}`, options);\n    } // get an updated mfs path in case the root changed while we were writing\n\n\n    const updatedPath = await toMfsPath(context, path, options);\n    const trail = await toTrail(context, updatedPath.mfsDirectory);\n    const parent = trail[trail.length - 1];\n\n    if (!parent) {\n      throw errCode(new Error('directory does not exist'), 'ERR_NO_EXIST');\n    }\n\n    if (!parent.type || !parent.type.includes('directory')) {\n      throw errCode(new Error(`cannot write to ${parent.name}: Not a directory`), 'ERR_NOT_A_DIRECTORY');\n    }\n\n    const parentBlock = await context.repo.blocks.get(parent.cid);\n    const parentNode = decode(parentBlock);\n    const result = await addLink(context, {\n      parent: parentNode,\n      name: fileName,\n      cid: child.cid,\n      size: child.size,\n      flush: options.flush,\n      shardSplitThreshold: options.shardSplitThreshold,\n      hashAlg: options.hashAlg,\n      cidVersion: options.cidVersion\n    });\n    parent.cid = result.cid; // update the tree with the new child\n\n    const newRootCid = await updateTree(context, trail, options); // Update the MFS record with the new CID for the root of the tree\n\n    await updateMfsRoot(context, newRootCid, options);\n  })();\n};\n/**\n * @param {MfsContext} context\n * @param {AsyncIterable<Uint8Array>} source\n * @param {FilePath} destination\n * @param {DefaultOptions} options\n */\n\n\nconst write = async (context, source, destination, options) => {\n  if (destination.exists) {\n    log(`Overwriting file ${destination.cid} offset ${options.offset} length ${options.length}`);\n  } else {\n    log(`Writing file offset ${options.offset} length ${options.length}`);\n  }\n  /** @type {Array<() => AsyncIterable<Uint8Array>>} */\n\n\n  const sources = []; // pad start of file if necessary\n\n  if (options.offset > 0) {\n    if (destination.unixfs) {\n      log(`Writing first ${options.offset} bytes of original file`);\n      sources.push(() => {\n        return destination.content({\n          offset: 0,\n          length: options.offset\n        });\n      });\n\n      if (destination.unixfs.fileSize() < options.offset) {\n        const extra = options.offset - destination.unixfs.fileSize();\n        log(`Writing zeros for extra ${extra} bytes`);\n        sources.push(asyncZeroes(extra));\n      }\n    } else {\n      log(`Writing zeros for first ${options.offset} bytes`);\n      sources.push(asyncZeroes(options.offset));\n    }\n  }\n\n  sources.push(limitAsyncStreamBytes(source, options.length));\n  const content = countBytesStreamed(catAsyncIterators(sources), bytesWritten => {\n    if (destination.unixfs && !options.truncate) {\n      // if we've done reading from the new source and we are not going\n      // to truncate the file, add the end of the existing file to the output\n      const fileSize = destination.unixfs.fileSize();\n\n      if (fileSize > bytesWritten) {\n        log(`Writing last ${fileSize - bytesWritten} of ${fileSize} bytes from original file starting at offset ${bytesWritten}`);\n        return destination.content({\n          offset: bytesWritten\n        });\n      } else {\n        log('Not writing last bytes from original file');\n      }\n    }\n\n    return {\n      [Symbol.asyncIterator]: async function* () {}\n    };\n  });\n  /** @type {number | undefined} */\n\n  let mode;\n\n  if (options.mode !== undefined && options.mode !== null) {\n    mode = parseMode(options.mode);\n  } else if (destination && destination.unixfs) {\n    mode = destination.unixfs.mode;\n  }\n  /** @type {import('ipfs-unixfs').Mtime | undefined} */\n\n\n  let mtime;\n\n  if (options.mtime != null) {\n    mtime = parseMtime(options.mtime);\n  } else if (destination && destination.unixfs) {\n    mtime = destination.unixfs.mtime;\n  }\n\n  let hasher;\n\n  switch (options.hashAlg) {\n    case 'sha2-256':\n      hasher = sha256;\n      break;\n\n    case 'sha2-512':\n      hasher = sha512;\n      break;\n\n    default:\n      throw new Error(`TODO vmx 2021-03-31: Proper error message for unsupported hash algorithms like ${options.hashAlg}`);\n  }\n\n  const result = await last(importer([{\n    content: content,\n    // persist mode & mtime if set previously\n    mode,\n    mtime\n  }], context.repo.blocks, {\n    progress: options.progress,\n    hasher,\n    cidVersion: options.cidVersion,\n    strategy: options.strategy,\n    rawLeaves: options.rawLeaves,\n    reduceSingleLeafToSelf: options.reduceSingleLeafToSelf,\n    leafType: options.leafType\n  }));\n\n  if (!result) {\n    throw errCode(new Error(`cannot write to ${parent.name}`), 'ERR_COULD_NOT_WRITE');\n  }\n\n  log(`Wrote ${result.cid}`);\n  return {\n    cid: result.cid,\n    size: result.size\n  };\n};\n/**\n * @param {AsyncIterable<Uint8Array>} stream\n * @param {number} limit\n */\n\n\nconst limitAsyncStreamBytes = (stream, limit) => {\n  return async function* _limitAsyncStreamBytes() {\n    let emitted = 0;\n\n    for await (const buf of stream) {\n      emitted += buf.length;\n\n      if (emitted > limit) {\n        yield buf.slice(0, limit - emitted);\n        return;\n      }\n\n      yield buf;\n    }\n  };\n};\n/**\n * @param {number} count\n * @param {number} chunkSize\n */\n\n\nconst asyncZeroes = function (count) {\n  let chunkSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MFS_MAX_CHUNK_SIZE;\n  const buf = new Uint8Array(chunkSize);\n\n  async function* _asyncZeroes() {\n    while (true) {\n      yield buf.slice();\n    }\n  }\n\n  return limitAsyncStreamBytes(_asyncZeroes(), count);\n};\n/**\n * @param {Array<() => AsyncIterable<Uint8Array>>} sources\n */\n\n\nconst catAsyncIterators = async function* (sources) {\n  // eslint-disable-line require-await\n  for (let i = 0; i < sources.length; i++) {\n    yield* sources[i]();\n  }\n};\n/**\n * @param {AsyncIterable<Uint8Array>} source\n * @param {(count: number) => AsyncIterable<Uint8Array>} notify\n */\n\n\nconst countBytesStreamed = async function* (source, notify) {\n  let wrote = 0;\n\n  for await (const buf of source) {\n    wrote += buf.length;\n    yield buf;\n  }\n\n  for await (const buf of notify(wrote)) {\n    wrote += buf.length;\n    yield buf;\n  }\n};","map":{"version":3,"names":["log","require","importer","decode","sha256","sha512","stat","mkdir","addLink","mergeOptions","bind","ignoreUndefined","createLock","toAsyncIterator","toMfsPath","toPathComponents","toTrail","updateTree","updateMfsRoot","errCode","MFS_MAX_CHUNK_SIZE","last","withTimeoutOption","parseMode","parseMtime","defaultOptions","offset","length","Infinity","create","truncate","rawLeaves","reduceSingleLeafToSelf","cidVersion","hashAlg","parents","progress","bytes","path","strategy","flush","leafType","shardSplitThreshold","module","exports","context","mfsWrite","content","opts","options","source","destination","parent","readLock","mfsDirectory","exists","Error","entryType","updateOrImport","child","write","writeLock","pathComponents","fileName","pop","parentExists","join","err","code","updatedPath","trail","type","includes","name","parentBlock","repo","blocks","get","cid","parentNode","result","size","newRootCid","sources","unixfs","push","fileSize","extra","asyncZeroes","limitAsyncStreamBytes","countBytesStreamed","catAsyncIterators","bytesWritten","Symbol","asyncIterator","mode","undefined","mtime","hasher","stream","limit","_limitAsyncStreamBytes","emitted","buf","slice","count","chunkSize","Uint8Array","_asyncZeroes","i","notify","wrote"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/files/write.js"],"sourcesContent":["'use strict'\n\nconst log = require('debug')('ipfs:mfs:write')\nconst { importer } = require('ipfs-unixfs-importer')\nconst {\n  decode\n// @ts-ignore - TODO vmx 2021-03-31\n} = require('@ipld/dag-pb')\nconst { sha256, sha512 } = require('multiformats/hashes/sha2')\nconst stat = require('./stat')\nconst mkdir = require('./mkdir')\nconst addLink = require('./utils/add-link')\nconst mergeOptions = require('merge-options').bind({ ignoreUndefined: true })\nconst createLock = require('./utils/create-lock')\nconst toAsyncIterator = require('./utils/to-async-iterator')\nconst toMfsPath = require('./utils/to-mfs-path')\nconst toPathComponents = require('./utils/to-path-components')\nconst toTrail = require('./utils/to-trail')\nconst updateTree = require('./utils/update-tree')\nconst updateMfsRoot = require('./utils/update-mfs-root')\nconst errCode = require('err-code')\nconst {\n  MFS_MAX_CHUNK_SIZE\n} = require('../../utils')\nconst last = require('it-last')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst {\n  parseMode,\n  parseMtime\n} = require('ipfs-unixfs')\n\n/**\n * @typedef {import('multiformats/cid').CIDVersion} CIDVersion\n * @typedef {import('ipfs-unixfs').MtimeLike} MtimeLike\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {import('./utils/to-mfs-path').FilePath} FilePath\n * @typedef {import('./utils/to-mfs-path').MfsPath} MfsPath\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n *\n * @typedef {object} DefaultOptions\n * @property {number} offset\n * @property {number} length\n * @property {boolean} create\n * @property {boolean} truncate\n * @property {boolean} rawLeaves\n * @property {boolean} reduceSingleLeafToSelf\n * @property {CIDVersion} cidVersion\n * @property {string} hashAlg\n * @property {boolean} parents\n * @property {import('ipfs-core-types/src/root').AddProgressFn} progress\n * @property {'trickle' | 'balanced'} strategy\n * @property {boolean} flush\n * @property {'raw' | 'file'} leafType\n * @property {number} shardSplitThreshold\n * @property {MtimeLike} [mtime]\n * @property {number} [mode]\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  offset: 0, // the offset in the file to begin writing\n  length: Infinity, // how many bytes from the incoming buffer to write\n  create: false, // whether to create the file if it does not exist\n  truncate: false, // whether to truncate the file first\n  rawLeaves: false,\n  reduceSingleLeafToSelf: false,\n  cidVersion: 0,\n  hashAlg: 'sha2-256',\n  parents: false, // whether to create intermediate directories if they do not exist\n  progress: (bytes, path) => {},\n  strategy: 'trickle',\n  flush: true,\n  leafType: 'raw',\n  shardSplitThreshold: 1000\n}\n\n/**\n * @param {MfsContext} context\n */\nmodule.exports = (context) => {\n  /**\n   * @type {import('ipfs-core-types/src/files').API[\"write\"]}\n   */\n  async function mfsWrite (path, content, opts = {}) {\n    /** @type {DefaultOptions} */\n    const options = mergeOptions(defaultOptions, opts)\n\n    /** @type {AsyncIterable<Uint8Array>} */\n    let source\n    /** @type {MfsPath} */\n    let destination\n    /** @type {MfsPath} */\n    let parent\n    log('Reading source, destination and parent')\n    await createLock().readLock(async () => {\n      source = await toAsyncIterator(content)\n      destination = await toMfsPath(context, path, options)\n      parent = await toMfsPath(context, destination.mfsDirectory, options)\n    })()\n    log('Read source, destination and parent')\n    // @ts-ignore - parent may be undefined\n    if (!options.parents && !parent.exists) {\n      throw errCode(new Error('directory does not exist'), 'ERR_NO_EXIST')\n    }\n\n    // @ts-ignore\n    if (source == null) {\n      throw errCode(new Error('could not create source'), 'ERR_NO_SOURCE')\n    }\n\n    // @ts-ignore\n    if (destination == null) {\n      throw errCode(new Error('could not create destination'), 'ERR_NO_DESTINATION')\n    }\n\n    if (!options.create && !destination.exists) {\n      throw errCode(new Error('file does not exist'), 'ERR_NO_EXIST')\n    }\n\n    if (destination.entryType !== 'file') {\n      throw errCode(new Error('not a file'), 'ERR_NOT_A_FILE')\n    }\n\n    return updateOrImport(context, path, source, destination, options)\n  }\n\n  return withTimeoutOption(mfsWrite)\n}\n\n/**\n * @param {MfsContext} context\n * @param {string} path\n * @param {AsyncIterable<Uint8Array>} source\n * @param {FilePath} destination\n * @param {DefaultOptions} options\n */\nconst updateOrImport = async (context, path, source, destination, options) => {\n  const child = await write(context, source, destination, options)\n\n  // The slow bit is done, now add or replace the DAGLink in the containing directory\n  // re-reading the path to the containing folder in case it has changed in the interim\n  await createLock().writeLock(async () => {\n    const pathComponents = toPathComponents(path)\n    const fileName = pathComponents.pop()\n\n    if (fileName == null) {\n      throw errCode(new Error('source does not exist'), 'ERR_NO_EXIST')\n    }\n\n    let parentExists = false\n\n    try {\n      await stat(context)(`/${pathComponents.join('/')}`, options)\n      parentExists = true\n    } catch (err) {\n      if (err.code !== 'ERR_NOT_FOUND') {\n        throw err\n      }\n    }\n\n    if (!parentExists) {\n      await mkdir(context)(`/${pathComponents.join('/')}`, options)\n    }\n\n    // get an updated mfs path in case the root changed while we were writing\n    const updatedPath = await toMfsPath(context, path, options)\n    const trail = await toTrail(context, updatedPath.mfsDirectory)\n    const parent = trail[trail.length - 1]\n\n    if (!parent) {\n      throw errCode(new Error('directory does not exist'), 'ERR_NO_EXIST')\n    }\n\n    if (!parent.type || !parent.type.includes('directory')) {\n      throw errCode(new Error(`cannot write to ${parent.name}: Not a directory`), 'ERR_NOT_A_DIRECTORY')\n    }\n\n    const parentBlock = await context.repo.blocks.get(parent.cid)\n    const parentNode = decode(parentBlock)\n\n    const result = await addLink(context, {\n      parent: parentNode,\n      name: fileName,\n      cid: child.cid,\n      size: child.size,\n      flush: options.flush,\n      shardSplitThreshold: options.shardSplitThreshold,\n      hashAlg: options.hashAlg,\n      cidVersion: options.cidVersion\n    })\n\n    parent.cid = result.cid\n\n    // update the tree with the new child\n    const newRootCid = await updateTree(context, trail, options)\n\n    // Update the MFS record with the new CID for the root of the tree\n    await updateMfsRoot(context, newRootCid, options)\n  })()\n}\n\n/**\n * @param {MfsContext} context\n * @param {AsyncIterable<Uint8Array>} source\n * @param {FilePath} destination\n * @param {DefaultOptions} options\n */\nconst write = async (context, source, destination, options) => {\n  if (destination.exists) {\n    log(`Overwriting file ${destination.cid} offset ${options.offset} length ${options.length}`)\n  } else {\n    log(`Writing file offset ${options.offset} length ${options.length}`)\n  }\n\n  /** @type {Array<() => AsyncIterable<Uint8Array>>} */\n  const sources = []\n\n  // pad start of file if necessary\n  if (options.offset > 0) {\n    if (destination.unixfs) {\n      log(`Writing first ${options.offset} bytes of original file`)\n\n      sources.push(\n        () => {\n          return destination.content({\n            offset: 0,\n            length: options.offset\n          })\n        }\n      )\n\n      if (destination.unixfs.fileSize() < options.offset) {\n        const extra = options.offset - destination.unixfs.fileSize()\n\n        log(`Writing zeros for extra ${extra} bytes`)\n        sources.push(\n          asyncZeroes(extra)\n        )\n      }\n    } else {\n      log(`Writing zeros for first ${options.offset} bytes`)\n      sources.push(\n        asyncZeroes(options.offset)\n      )\n    }\n  }\n\n  sources.push(\n    limitAsyncStreamBytes(source, options.length)\n  )\n\n  const content = countBytesStreamed(catAsyncIterators(sources), (bytesWritten) => {\n    if (destination.unixfs && !options.truncate) {\n      // if we've done reading from the new source and we are not going\n      // to truncate the file, add the end of the existing file to the output\n      const fileSize = destination.unixfs.fileSize()\n\n      if (fileSize > bytesWritten) {\n        log(`Writing last ${fileSize - bytesWritten} of ${fileSize} bytes from original file starting at offset ${bytesWritten}`)\n\n        return destination.content({\n          offset: bytesWritten\n        })\n      } else {\n        log('Not writing last bytes from original file')\n      }\n    }\n\n    return {\n      [Symbol.asyncIterator]: async function * () {}\n    }\n  })\n\n  /** @type {number | undefined} */\n  let mode\n\n  if (options.mode !== undefined && options.mode !== null) {\n    mode = parseMode(options.mode)\n  } else if (destination && destination.unixfs) {\n    mode = destination.unixfs.mode\n  }\n\n  /** @type {import('ipfs-unixfs').Mtime | undefined} */\n  let mtime\n\n  if (options.mtime != null) {\n    mtime = parseMtime(options.mtime)\n  } else if (destination && destination.unixfs) {\n    mtime = destination.unixfs.mtime\n  }\n\n  let hasher\n  switch (options.hashAlg) {\n    case 'sha2-256':\n      hasher = sha256\n      break\n    case 'sha2-512':\n      hasher = sha512\n      break\n    default:\n      throw new Error(`TODO vmx 2021-03-31: Proper error message for unsupported hash algorithms like ${options.hashAlg}`)\n  }\n\n  const result = await last(importer([{\n    content: content,\n\n    // persist mode & mtime if set previously\n    mode,\n    mtime\n  }], context.repo.blocks, {\n    progress: options.progress,\n    hasher,\n    cidVersion: options.cidVersion,\n    strategy: options.strategy,\n    rawLeaves: options.rawLeaves,\n    reduceSingleLeafToSelf: options.reduceSingleLeafToSelf,\n    leafType: options.leafType\n  }))\n\n  if (!result) {\n    throw errCode(new Error(`cannot write to ${parent.name}`), 'ERR_COULD_NOT_WRITE')\n  }\n\n  log(`Wrote ${result.cid}`)\n\n  return {\n    cid: result.cid,\n    size: result.size\n  }\n}\n\n/**\n * @param {AsyncIterable<Uint8Array>} stream\n * @param {number} limit\n */\nconst limitAsyncStreamBytes = (stream, limit) => {\n  return async function * _limitAsyncStreamBytes () {\n    let emitted = 0\n\n    for await (const buf of stream) {\n      emitted += buf.length\n\n      if (emitted > limit) {\n        yield buf.slice(0, limit - emitted)\n\n        return\n      }\n\n      yield buf\n    }\n  }\n}\n\n/**\n * @param {number} count\n * @param {number} chunkSize\n */\nconst asyncZeroes = (count, chunkSize = MFS_MAX_CHUNK_SIZE) => {\n  const buf = new Uint8Array(chunkSize)\n\n  async function * _asyncZeroes () {\n    while (true) {\n      yield buf.slice()\n    }\n  }\n\n  return limitAsyncStreamBytes(_asyncZeroes(), count)\n}\n\n/**\n * @param {Array<() => AsyncIterable<Uint8Array>>} sources\n */\nconst catAsyncIterators = async function * (sources) { // eslint-disable-line require-await\n  for (let i = 0; i < sources.length; i++) {\n    yield * sources[i]()\n  }\n}\n\n/**\n * @param {AsyncIterable<Uint8Array>} source\n * @param {(count: number) => AsyncIterable<Uint8Array>} notify\n */\nconst countBytesStreamed = async function * (source, notify) {\n  let wrote = 0\n\n  for await (const buf of source) {\n    wrote += buf.length\n\n    yield buf\n  }\n\n  for await (const buf of notify(wrote)) {\n    wrote += buf.length\n\n    yield buf\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}