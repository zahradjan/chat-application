{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _require = require('multiformats/bases/base64'),\n    base64 = _require.base64;\n\nvar ciphers = require('../ciphers/aes-gcm');\n\nmodule.exports = {\n  /**\n   * Exports the given PrivateKey as a base64 encoded string.\n   * The PrivateKey is encrypted via a password derived PBKDF2 key\n   * leveraging the aes-gcm cipher algorithm.\n   *\n   * @param {Uint8Array} privateKey - The PrivateKey protobuf\n   * @param {string} password\n   * @returns {Promise<string>} A base64 encoded string\n   */\n  export: function () {\n    var _export2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(privateKey, password) {\n      var cipher, encryptedKey;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              cipher = ciphers.create();\n              _context.next = 3;\n              return cipher.encrypt(privateKey, password);\n\n            case 3:\n              encryptedKey = _context.sent;\n              return _context.abrupt(\"return\", base64.encode(encryptedKey));\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function _export(_x, _x2) {\n      return _export2.apply(this, arguments);\n    }\n\n    return _export;\n  }()\n};","map":{"version":3,"names":["require","base64","ciphers","module","exports","export","privateKey","password","cipher","create","encrypt","encryptedKey","encode"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/peer-id/node_modules/libp2p-crypto/src/keys/exporter.js"],"sourcesContent":["'use strict'\n\nconst { base64 } = require('multiformats/bases/base64')\nconst ciphers = require('../ciphers/aes-gcm')\n\nmodule.exports = {\n  /**\n   * Exports the given PrivateKey as a base64 encoded string.\n   * The PrivateKey is encrypted via a password derived PBKDF2 key\n   * leveraging the aes-gcm cipher algorithm.\n   *\n   * @param {Uint8Array} privateKey - The PrivateKey protobuf\n   * @param {string} password\n   * @returns {Promise<string>} A base64 encoded string\n   */\n  export: async function (privateKey, password) {\n    const cipher = ciphers.create()\n    const encryptedKey = await cipher.encrypt(privateKey, password)\n    return base64.encode(encryptedKey)\n  }\n}\n"],"mappings":"AAAA;;;;;;AAEA,eAAmBA,OAAO,CAAC,2BAAD,CAA1B;AAAA,IAAQC,MAAR,YAAQA,MAAR;;AACA,IAAMC,OAAO,GAAGF,OAAO,CAAC,oBAAD,CAAvB;;AAEAG,MAAM,CAACC,OAAP,GAAiB;EACf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,MAAM;IAAA,0EAAE,iBAAgBC,UAAhB,EAA4BC,QAA5B;MAAA;MAAA;QAAA;UAAA;YAAA;cACAC,MADA,GACSN,OAAO,CAACO,MAAR,EADT;cAAA;cAAA,OAEqBD,MAAM,CAACE,OAAP,CAAeJ,UAAf,EAA2BC,QAA3B,CAFrB;;YAAA;cAEAI,YAFA;cAAA,iCAGCV,MAAM,CAACW,MAAP,CAAcD,YAAd,CAHD;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAF;;IAAA;MAAA;IAAA;;IAAA;EAAA;AAVS,CAAjB"},"metadata":{},"sourceType":"script"}