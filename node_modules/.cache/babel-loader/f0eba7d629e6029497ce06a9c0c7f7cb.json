{"ast":null,"code":"'use strict';\n\nconst isIpfs = require('is-ipfs');\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst PeerID = require('peer-id');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst {\n  resolve: res\n} = require('../utils');\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n * @param {import('ipfs-core-utils/src/multibases')} config.bases\n * @param {import('ipfs-core-types/src/name').API} config.name\n */\n\n\nmodule.exports = _ref => {\n  let {\n    repo,\n    codecs,\n    bases,\n    name\n  } = _ref;\n\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"resolve\"]}\n   */\n  async function resolve(path) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!isIpfs.path(path)) {\n      throw new Error('invalid argument ' + path);\n    }\n\n    if (isIpfs.ipnsPath(path)) {\n      for await (const resolvedPath of name.resolve(path, opts)) {\n        path = resolvedPath;\n      }\n    }\n\n    const [, schema, hash, ...rest] = path.split('/'); // ['', 'ipfs', 'hash', ...path]\n\n    const base = opts.cidBase ? await bases.getBase(opts.cidBase) : undefined;\n    const bytes = parseBytes(hash); // nothing to resolve return the input\n\n    if (rest.length === 0) {\n      const str = base ? base.encoder.encode(bytes) : hash;\n      return `/${schema}/${str}`;\n    }\n\n    const cid = CID.decode(bytes);\n    path = rest.join('/');\n    const results = res(cid, path, codecs, repo, opts);\n    let value = cid;\n    let remainderPath = path;\n\n    for await (const result of results) {\n      if (CID.asCID(result.value)) {\n        value = result.value;\n        remainderPath = result.remainderPath;\n      }\n    }\n\n    return `/ipfs/${value.toString(base && base.encoder)}${remainderPath ? '/' + remainderPath : ''}`;\n  }\n\n  return withTimeoutOption(resolve);\n};\n/**\n * Parse the input as a PeerID or a CID or throw an error\n *\n * @param {string} str\n */\n\n\nfunction parseBytes(str) {\n  try {\n    return PeerID.parse(str).toBytes();\n  } catch {\n    return CID.parse(str).bytes;\n  }\n}","map":{"version":3,"names":["isIpfs","require","CID","PeerID","withTimeoutOption","resolve","res","module","exports","repo","codecs","bases","name","path","opts","Error","ipnsPath","resolvedPath","schema","hash","rest","split","base","cidBase","getBase","undefined","bytes","parseBytes","length","str","encoder","encode","cid","decode","join","results","value","remainderPath","result","asCID","toString","parse","toBytes"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/resolve.js"],"sourcesContent":["'use strict'\n\nconst isIpfs = require('is-ipfs')\nconst { CID } = require('multiformats/cid')\nconst PeerID = require('peer-id')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst { resolve: res } = require('../utils')\n\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n * @param {import('ipfs-core-utils/src/multibases')} config.bases\n * @param {import('ipfs-core-types/src/name').API} config.name\n */\nmodule.exports = ({ repo, codecs, bases, name }) => {\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"resolve\"]}\n   */\n  async function resolve (path, opts = {}) {\n    if (!isIpfs.path(path)) {\n      throw new Error('invalid argument ' + path)\n    }\n\n    if (isIpfs.ipnsPath(path)) {\n      for await (const resolvedPath of name.resolve(path, opts)) {\n        path = resolvedPath\n      }\n    }\n\n    const [, schema, hash, ...rest] = path.split('/') // ['', 'ipfs', 'hash', ...path]\n    const base = opts.cidBase ? await bases.getBase(opts.cidBase) : undefined\n    const bytes = parseBytes(hash)\n\n    // nothing to resolve return the input\n    if (rest.length === 0) {\n      const str = base ? base.encoder.encode(bytes) : hash\n\n      return `/${schema}/${str}`\n    }\n\n    const cid = CID.decode(bytes)\n\n    path = rest.join('/')\n\n    const results = res(cid, path, codecs, repo, opts)\n    let value = cid\n    let remainderPath = path\n\n    for await (const result of results) {\n      if (CID.asCID(result.value)) {\n        value = result.value\n        remainderPath = result.remainderPath\n      }\n    }\n\n    return `/ipfs/${value.toString(base && base.encoder)}${remainderPath ? '/' + remainderPath : ''}`\n  }\n\n  return withTimeoutOption(resolve)\n}\n\n/**\n * Parse the input as a PeerID or a CID or throw an error\n *\n * @param {string} str\n */\nfunction parseBytes (str) {\n  try {\n    return PeerID.parse(str).toBytes()\n  } catch {\n    return CID.parse(str).bytes\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}