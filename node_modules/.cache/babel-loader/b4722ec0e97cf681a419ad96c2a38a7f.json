{"ast":null,"code":"'use strict';\n\nconst {\n  Key\n} = require('interface-datastore');\n\nconst {\n  Record\n} = require('libp2p-record');\n\nconst {\n  encodeBase32\n} = require('./utils');\n\nconst errcode = require('err-code');\n\nconst debug = require('debug');\n\nconst log = Object.assign(debug('ipfs:ipns:offline-datastore'), {\n  error: debug('ipfs:ipns:offline-datastore:error')\n}); // Offline datastore aims to mimic the same encoding as routing when storing records\n// to the local datastore\n\nclass OfflineDatastore {\n  /**\n   * @param {import('ipfs-repo').IPFSRepo} repo\n   */\n  constructor(repo) {\n    this._repo = repo;\n    /** @type {any[]} */\n\n    this.stores = [];\n  }\n  /**\n   * Put a value to the local datastore indexed by the received key properly encoded.\n   *\n   * @param {Uint8Array} key - identifier of the value.\n   * @param {Uint8Array} value - value to be stored.\n   */\n\n\n  async put(key, value) {\n    // eslint-disable-line require-await\n    if (!(key instanceof Uint8Array)) {\n      throw errcode(new Error('Offline datastore key must be a Uint8Array'), 'ERR_INVALID_KEY');\n    }\n\n    if (!(value instanceof Uint8Array)) {\n      throw errcode(new Error('Offline datastore value must be a Uint8Array'), 'ERR_INVALID_VALUE');\n    }\n\n    let routingKey;\n\n    try {\n      routingKey = this._routingKey(key);\n    } catch (err) {\n      log.error(err);\n      throw errcode(new Error('Not possible to generate the routing key'), 'ERR_GENERATING_ROUTING_KEY');\n    } // Marshal to libp2p record as the DHT does\n\n\n    const record = new Record(key, value);\n    return this._repo.datastore.put(routingKey, record.serialize());\n  }\n  /**\n   * Get a value from the local datastore indexed by the received key properly encoded.\n   *\n   * @param {Uint8Array} key - identifier of the value to be obtained.\n   */\n\n\n  async get(key) {\n    if (!(key instanceof Uint8Array)) {\n      throw errcode(new Error('Offline datastore key must be a Uint8Array'), 'ERR_INVALID_KEY');\n    }\n\n    let routingKey;\n\n    try {\n      routingKey = this._routingKey(key);\n    } catch (err) {\n      log.error(err);\n      throw errcode(new Error('Not possible to generate the routing key'), 'ERR_GENERATING_ROUTING_KEY');\n    }\n\n    const res = await this._repo.datastore.get(routingKey); // Unmarshal libp2p record as the DHT does\n\n    let record;\n\n    try {\n      record = Record.deserialize(res);\n    } catch (err) {\n      log.error(err);\n      throw err;\n    }\n\n    return record.value;\n  }\n  /**\n   * encode key properly - base32(/ipns/{cid})\n   *\n   * @param {Uint8Array} key\n   */\n\n\n  _routingKey(key) {\n    return new Key('/' + encodeBase32(key), false);\n  }\n\n}\n\nexports = module.exports = OfflineDatastore;","map":{"version":3,"names":["Key","require","Record","encodeBase32","errcode","debug","log","Object","assign","error","OfflineDatastore","constructor","repo","_repo","stores","put","key","value","Uint8Array","Error","routingKey","_routingKey","err","record","datastore","serialize","get","res","deserialize","exports","module"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/ipns/routing/offline-datastore.js"],"sourcesContent":["'use strict'\n\nconst { Key } = require('interface-datastore')\nconst { Record } = require('libp2p-record')\nconst { encodeBase32 } = require('./utils')\n\nconst errcode = require('err-code')\nconst debug = require('debug')\nconst log = Object.assign(debug('ipfs:ipns:offline-datastore'), {\n  error: debug('ipfs:ipns:offline-datastore:error')\n})\n\n// Offline datastore aims to mimic the same encoding as routing when storing records\n// to the local datastore\nclass OfflineDatastore {\n  /**\n   * @param {import('ipfs-repo').IPFSRepo} repo\n   */\n  constructor (repo) {\n    this._repo = repo\n    /** @type {any[]} */\n    this.stores = []\n  }\n\n  /**\n   * Put a value to the local datastore indexed by the received key properly encoded.\n   *\n   * @param {Uint8Array} key - identifier of the value.\n   * @param {Uint8Array} value - value to be stored.\n   */\n  async put (key, value) { // eslint-disable-line require-await\n    if (!(key instanceof Uint8Array)) {\n      throw errcode(new Error('Offline datastore key must be a Uint8Array'), 'ERR_INVALID_KEY')\n    }\n\n    if (!(value instanceof Uint8Array)) {\n      throw errcode(new Error('Offline datastore value must be a Uint8Array'), 'ERR_INVALID_VALUE')\n    }\n\n    let routingKey\n\n    try {\n      routingKey = this._routingKey(key)\n    } catch (err) {\n      log.error(err)\n      throw errcode(new Error('Not possible to generate the routing key'), 'ERR_GENERATING_ROUTING_KEY')\n    }\n\n    // Marshal to libp2p record as the DHT does\n    const record = new Record(key, value)\n\n    return this._repo.datastore.put(routingKey, record.serialize())\n  }\n\n  /**\n   * Get a value from the local datastore indexed by the received key properly encoded.\n   *\n   * @param {Uint8Array} key - identifier of the value to be obtained.\n   */\n  async get (key) {\n    if (!(key instanceof Uint8Array)) {\n      throw errcode(new Error('Offline datastore key must be a Uint8Array'), 'ERR_INVALID_KEY')\n    }\n\n    let routingKey\n\n    try {\n      routingKey = this._routingKey(key)\n    } catch (err) {\n      log.error(err)\n      throw errcode(new Error('Not possible to generate the routing key'), 'ERR_GENERATING_ROUTING_KEY')\n    }\n\n    const res = await this._repo.datastore.get(routingKey)\n\n    // Unmarshal libp2p record as the DHT does\n    let record\n    try {\n      record = Record.deserialize(res)\n    } catch (err) {\n      log.error(err)\n      throw err\n    }\n\n    return record.value\n  }\n\n  /**\n   * encode key properly - base32(/ipns/{cid})\n   *\n   * @param {Uint8Array} key\n   */\n  _routingKey (key) {\n    return new Key('/' + encodeBase32(key), false)\n  }\n}\n\nexports = module.exports = OfflineDatastore\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}