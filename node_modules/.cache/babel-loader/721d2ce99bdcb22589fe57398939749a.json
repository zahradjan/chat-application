{"ast":null,"code":"'use strict'; // @ts-ignore\n\nconst Heap = require('heap');\n\nconst {\n  xor: uint8ArrayXor\n} = require('uint8arrays/xor');\n\nconst debug = require('debug');\n\nconst utils = require('../utils');\n\nconst log = debug('libp2p:dht:peer-queue');\n/**\n * @typedef {import('peer-id')} PeerId\n */\n\n/**\n * PeerQueue is a heap that sorts its entries (PeerIds) by their\n * xor distance to the inital provided key.\n */\n\nclass PeerQueue {\n  /**\n   * Create from a given peer id.\n   *\n   * @param {PeerId} id\n   * @returns {Promise<PeerQueue>}\n   */\n  static async fromPeerId(id) {\n    const key = await utils.convertPeerId(id);\n    return new PeerQueue(key);\n  }\n  /**\n   * Create from a given Uint8Array.\n   *\n   * @param {Uint8Array} keyBuffer\n   * @returns {Promise<PeerQueue>}\n   */\n\n\n  static async fromKey(keyBuffer) {\n    const key = await utils.convertBuffer(keyBuffer);\n    return new PeerQueue(key);\n  }\n  /**\n   * Create a new PeerQueue.\n   *\n   * @param {Uint8Array} from - The sha2-256 encoded peer id\n   */\n\n\n  constructor(from) {\n    log('create: %b', from);\n    this.from = from;\n    this.heap = new Heap(utils.xorCompare);\n  }\n  /**\n   * Add a new PeerId to the queue.\n   *\n   * @param {PeerId} id\n   */\n\n\n  async enqueue(id) {\n    log('enqueue %s', id.toB58String());\n    const key = await utils.convertPeerId(id);\n    const el = {\n      id: id,\n      distance: uint8ArrayXor(this.from, key)\n    };\n    this.heap.push(el);\n  }\n  /**\n   * Returns the closest peer to the `from` peer.\n   *\n   * @returns {PeerId}\n   */\n\n\n  dequeue() {\n    const el = this.heap.pop();\n    log('dequeue %s', el.id.toB58String());\n    return el.id;\n  }\n\n  get length() {\n    return this.heap.size();\n  }\n\n}\n\nmodule.exports = PeerQueue;","map":{"version":3,"names":["Heap","require","xor","uint8ArrayXor","debug","utils","log","PeerQueue","fromPeerId","id","key","convertPeerId","fromKey","keyBuffer","convertBuffer","constructor","from","heap","xorCompare","enqueue","toB58String","el","distance","push","dequeue","pop","length","size","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-kad-dht/src/peer-list/peer-queue.js"],"sourcesContent":["'use strict'\n\n// @ts-ignore\nconst Heap = require('heap')\nconst { xor: uint8ArrayXor } = require('uint8arrays/xor')\nconst debug = require('debug')\n\nconst utils = require('../utils')\n\nconst log = debug('libp2p:dht:peer-queue')\n\n/**\n * @typedef {import('peer-id')} PeerId\n */\n\n/**\n * PeerQueue is a heap that sorts its entries (PeerIds) by their\n * xor distance to the inital provided key.\n */\nclass PeerQueue {\n  /**\n   * Create from a given peer id.\n   *\n   * @param {PeerId} id\n   * @returns {Promise<PeerQueue>}\n   */\n  static async fromPeerId (id) {\n    const key = await utils.convertPeerId(id)\n\n    return new PeerQueue(key)\n  }\n\n  /**\n   * Create from a given Uint8Array.\n   *\n   * @param {Uint8Array} keyBuffer\n   * @returns {Promise<PeerQueue>}\n   */\n  static async fromKey (keyBuffer) {\n    const key = await utils.convertBuffer(keyBuffer)\n\n    return new PeerQueue(key)\n  }\n\n  /**\n   * Create a new PeerQueue.\n   *\n   * @param {Uint8Array} from - The sha2-256 encoded peer id\n   */\n  constructor (from) {\n    log('create: %b', from)\n    this.from = from\n    this.heap = new Heap(utils.xorCompare)\n  }\n\n  /**\n   * Add a new PeerId to the queue.\n   *\n   * @param {PeerId} id\n   */\n  async enqueue (id) {\n    log('enqueue %s', id.toB58String())\n    const key = await utils.convertPeerId(id)\n\n    const el = {\n      id: id,\n      distance: uint8ArrayXor(this.from, key)\n    }\n\n    this.heap.push(el)\n  }\n\n  /**\n   * Returns the closest peer to the `from` peer.\n   *\n   * @returns {PeerId}\n   */\n  dequeue () {\n    const el = this.heap.pop()\n    log('dequeue %s', el.id.toB58String())\n    return el.id\n  }\n\n  get length () {\n    return this.heap.size()\n  }\n}\n\nmodule.exports = PeerQueue\n"],"mappings":"AAAA,a,CAEA;;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAM;EAAEC,GAAG,EAAEC;AAAP,IAAyBF,OAAO,CAAC,iBAAD,CAAtC;;AACA,MAAMG,KAAK,GAAGH,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAMI,KAAK,GAAGJ,OAAO,CAAC,UAAD,CAArB;;AAEA,MAAMK,GAAG,GAAGF,KAAK,CAAC,uBAAD,CAAjB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AACA,MAAMG,SAAN,CAAgB;EACd;AACF;AACA;AACA;AACA;AACA;EACyB,aAAVC,UAAU,CAAEC,EAAF,EAAM;IAC3B,MAAMC,GAAG,GAAG,MAAML,KAAK,CAACM,aAAN,CAAoBF,EAApB,CAAlB;IAEA,OAAO,IAAIF,SAAJ,CAAcG,GAAd,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACsB,aAAPE,OAAO,CAAEC,SAAF,EAAa;IAC/B,MAAMH,GAAG,GAAG,MAAML,KAAK,CAACS,aAAN,CAAoBD,SAApB,CAAlB;IAEA,OAAO,IAAIN,SAAJ,CAAcG,GAAd,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEK,WAAW,CAAEC,IAAF,EAAQ;IACjBV,GAAG,CAAC,YAAD,EAAeU,IAAf,CAAH;IACA,KAAKA,IAAL,GAAYA,IAAZ;IACA,KAAKC,IAAL,GAAY,IAAIjB,IAAJ,CAASK,KAAK,CAACa,UAAf,CAAZ;EACD;EAED;AACF;AACA;AACA;AACA;;;EACe,MAAPC,OAAO,CAAEV,EAAF,EAAM;IACjBH,GAAG,CAAC,YAAD,EAAeG,EAAE,CAACW,WAAH,EAAf,CAAH;IACA,MAAMV,GAAG,GAAG,MAAML,KAAK,CAACM,aAAN,CAAoBF,EAApB,CAAlB;IAEA,MAAMY,EAAE,GAAG;MACTZ,EAAE,EAAEA,EADK;MAETa,QAAQ,EAAEnB,aAAa,CAAC,KAAKa,IAAN,EAAYN,GAAZ;IAFd,CAAX;IAKA,KAAKO,IAAL,CAAUM,IAAV,CAAeF,EAAf;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEG,OAAO,GAAI;IACT,MAAMH,EAAE,GAAG,KAAKJ,IAAL,CAAUQ,GAAV,EAAX;IACAnB,GAAG,CAAC,YAAD,EAAee,EAAE,CAACZ,EAAH,CAAMW,WAAN,EAAf,CAAH;IACA,OAAOC,EAAE,CAACZ,EAAV;EACD;;EAES,IAANiB,MAAM,GAAI;IACZ,OAAO,KAAKT,IAAL,CAAUU,IAAV,EAAP;EACD;;AAlEa;;AAqEhBC,MAAM,CAACC,OAAP,GAAiBtB,SAAjB"},"metadata":{},"sourceType":"script"}