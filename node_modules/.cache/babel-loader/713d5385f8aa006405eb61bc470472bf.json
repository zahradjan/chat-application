{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _createForOfIteratorHelper = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _awaitAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _wrapAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nvar _asyncIterator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar _require = require('@ipld/car/iterator'),\n    CarBlockIterator = _require.CarBlockIterator;\n\nvar withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nvar itPeekable = require('it-peekable');\n\nvar drain = require('it-drain');\n\nvar map = require('it-map');\n\nvar log = require('debug')('ipfs:components:dag:import');\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-repo').IPFSRepo} IPFSRepo\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/dag/').ImportRootStatus} RootStatus\n */\n\n/**\n * @param {Object} config\n * @param {IPFSRepo} config.repo\n */\n\n\nmodule.exports = function (_ref) {\n  var repo = _ref.repo;\n\n  /**\n   * @type {import('ipfs-core-types/src/dag').API[\"import\"]}\n   */\n  function dagImport(_x) {\n    return _dagImport.apply(this, arguments);\n  }\n\n  function _dagImport() {\n    _dagImport = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(sources) {\n      var options,\n          release,\n          abortOptions,\n          peekable,\n          _yield$_awaitAsyncGen,\n          value,\n          done,\n          cars,\n          _iteratorAbruptCompletion,\n          _didIteratorError,\n          _iteratorError,\n          _iterator,\n          _step,\n          car,\n          roots,\n          _iterator2,\n          _step2,\n          cid,\n          pinErrorMsg,\n          _args = arguments;\n\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _context.next = 3;\n              return _awaitAsyncGenerator(repo.gcLock.readLock());\n\n            case 3:\n              release = _context.sent;\n              _context.prev = 4;\n              abortOptions = {\n                signal: options.signal,\n                timeout: options.timeout\n              };\n              peekable = itPeekable(sources);\n              _context.next = 9;\n              return _awaitAsyncGenerator(peekable.peek());\n\n            case 9:\n              _yield$_awaitAsyncGen = _context.sent;\n              value = _yield$_awaitAsyncGen.value;\n              done = _yield$_awaitAsyncGen.done;\n\n              if (!done) {\n                _context.next = 14;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 14:\n              if (value) {\n                // @ts-ignore\n                peekable.push(value);\n              }\n              /**\n               * @type {AsyncIterable<AsyncIterable<Uint8Array>> | Iterable<AsyncIterable<Uint8Array>>}\n               */\n\n\n              if (value instanceof Uint8Array) {\n                // @ts-ignore\n                cars = [peekable];\n              } else {\n                // @ts-ignore\n                cars = peekable;\n              }\n\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 18;\n              _iterator = _asyncIterator(cars);\n\n            case 20:\n              _context.next = 22;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 22:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 64;\n                break;\n              }\n\n              car = _step.value;\n              _context.next = 26;\n              return _awaitAsyncGenerator(importCar(repo, abortOptions, car));\n\n            case 26:\n              roots = _context.sent;\n\n              if (!(options.pinRoots !== false)) {\n                _context.next = 61;\n                break;\n              }\n\n              // default=true\n              _iterator2 = _createForOfIteratorHelper(roots);\n              _context.prev = 29;\n\n              _iterator2.s();\n\n            case 31:\n              if ((_step2 = _iterator2.n()).done) {\n                _context.next = 53;\n                break;\n              }\n\n              cid = _step2.value;\n              pinErrorMsg = '';\n              _context.prev = 34;\n              _context.next = 37;\n              return _awaitAsyncGenerator(repo.blocks.has(cid));\n\n            case 37:\n              if (!_context.sent) {\n                _context.next = 43;\n                break;\n              }\n\n              // eslint-disable-line max-depth\n              log(\"Pinning root \".concat(cid));\n              _context.next = 41;\n              return _awaitAsyncGenerator(repo.pins.pinRecursively(cid));\n\n            case 41:\n              _context.next = 44;\n              break;\n\n            case 43:\n              pinErrorMsg = 'blockstore: block not found';\n\n            case 44:\n              _context.next = 49;\n              break;\n\n            case 46:\n              _context.prev = 46;\n              _context.t0 = _context[\"catch\"](34);\n              pinErrorMsg = _context.t0.message;\n\n            case 49:\n              _context.next = 51;\n              return {\n                root: {\n                  cid: cid,\n                  pinErrorMsg: pinErrorMsg\n                }\n              };\n\n            case 51:\n              _context.next = 31;\n              break;\n\n            case 53:\n              _context.next = 58;\n              break;\n\n            case 55:\n              _context.prev = 55;\n              _context.t1 = _context[\"catch\"](29);\n\n              _iterator2.e(_context.t1);\n\n            case 58:\n              _context.prev = 58;\n\n              _iterator2.f();\n\n              return _context.finish(58);\n\n            case 61:\n              _iteratorAbruptCompletion = false;\n              _context.next = 20;\n              break;\n\n            case 64:\n              _context.next = 70;\n              break;\n\n            case 66:\n              _context.prev = 66;\n              _context.t2 = _context[\"catch\"](18);\n              _didIteratorError = true;\n              _iteratorError = _context.t2;\n\n            case 70:\n              _context.prev = 70;\n              _context.prev = 71;\n\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 75;\n                break;\n              }\n\n              _context.next = 75;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 75:\n              _context.prev = 75;\n\n              if (!_didIteratorError) {\n                _context.next = 78;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 78:\n              return _context.finish(75);\n\n            case 79:\n              return _context.finish(70);\n\n            case 80:\n              _context.prev = 80;\n              release();\n              return _context.finish(80);\n\n            case 83:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[4,, 80, 83], [18, 66, 70, 80], [29, 55, 58, 61], [34, 46], [71,, 75, 79]]);\n    }));\n    return _dagImport.apply(this, arguments);\n  }\n\n  return withTimeoutOption(dagImport);\n};\n/**\n * @param {IPFSRepo} repo\n * @param {AbortOptions} options\n * @param {AsyncIterable<Uint8Array>} source\n * @returns {Promise<CID[]>}\n */\n\n\nfunction importCar(_x2, _x3, _x4) {\n  return _importCar.apply(this, arguments);\n}\n\nfunction _importCar() {\n  _importCar = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(repo, options, source) {\n    var reader, roots;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return CarBlockIterator.fromIterable(source);\n\n          case 2:\n            reader = _context2.sent;\n            _context2.next = 5;\n            return reader.getRoots();\n\n          case 5:\n            roots = _context2.sent;\n            _context2.next = 8;\n            return drain(repo.blocks.putMany(map(reader, function (_ref2) {\n              var key = _ref2.cid,\n                  value = _ref2.bytes;\n              log(\"Import block \".concat(key));\n              return {\n                key: key,\n                value: value\n              };\n            }), {\n              signal: options.signal\n            }));\n\n          case 8:\n            return _context2.abrupt(\"return\", roots);\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _importCar.apply(this, arguments);\n}","map":{"version":3,"names":["require","CarBlockIterator","withTimeoutOption","itPeekable","drain","map","log","module","exports","repo","dagImport","sources","options","gcLock","readLock","release","abortOptions","signal","timeout","peekable","peek","value","done","push","Uint8Array","cars","car","importCar","roots","pinRoots","cid","pinErrorMsg","blocks","has","pins","pinRecursively","message","root","source","fromIterable","reader","getRoots","putMany","key","bytes"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/dag/import.js"],"sourcesContent":["'use strict'\n\nconst { CarBlockIterator } = require('@ipld/car/iterator')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst itPeekable = require('it-peekable')\nconst drain = require('it-drain')\nconst map = require('it-map')\nconst log = require('debug')('ipfs:components:dag:import')\n\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-repo').IPFSRepo} IPFSRepo\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/dag/').ImportRootStatus} RootStatus\n */\n\n/**\n * @param {Object} config\n * @param {IPFSRepo} config.repo\n */\nmodule.exports = ({ repo }) => {\n  /**\n   * @type {import('ipfs-core-types/src/dag').API[\"import\"]}\n   */\n  async function * dagImport (sources, options = {}) {\n    const release = await repo.gcLock.readLock()\n\n    try {\n      const abortOptions = { signal: options.signal, timeout: options.timeout }\n      const peekable = itPeekable(sources)\n\n      const { value, done } = await peekable.peek()\n\n      if (done) {\n        return\n      }\n\n      if (value) {\n        // @ts-ignore\n        peekable.push(value)\n      }\n\n      /**\n       * @type {AsyncIterable<AsyncIterable<Uint8Array>> | Iterable<AsyncIterable<Uint8Array>>}\n       */\n      let cars\n\n      if (value instanceof Uint8Array) {\n        // @ts-ignore\n        cars = [peekable]\n      } else {\n        // @ts-ignore\n        cars = peekable\n      }\n\n      for await (const car of cars) {\n        const roots = await importCar(repo, abortOptions, car)\n\n        if (options.pinRoots !== false) { // default=true\n          for (const cid of roots) {\n            let pinErrorMsg = ''\n\n            try { // eslint-disable-line max-depth\n              if (await repo.blocks.has(cid)) { // eslint-disable-line max-depth\n                log(`Pinning root ${cid}`)\n                await repo.pins.pinRecursively(cid)\n              } else {\n                pinErrorMsg = 'blockstore: block not found'\n              }\n            } catch (err) {\n              pinErrorMsg = err.message\n            }\n\n            yield { root: { cid, pinErrorMsg } }\n          }\n        }\n      }\n    } finally {\n      release()\n    }\n  }\n\n  return withTimeoutOption(dagImport)\n}\n\n/**\n * @param {IPFSRepo} repo\n * @param {AbortOptions} options\n * @param {AsyncIterable<Uint8Array>} source\n * @returns {Promise<CID[]>}\n */\nasync function importCar (repo, options, source) {\n  const reader = await CarBlockIterator.fromIterable(source)\n  const roots = await reader.getRoots()\n\n  await drain(\n    repo.blocks.putMany(\n      map(reader, ({ cid: key, bytes: value }) => {\n        log(`Import block ${key}`)\n\n        return { key, value }\n      }),\n      { signal: options.signal }\n    )\n  )\n\n  return roots\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}