{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decode2 = exports.decode1 = exports.decode0 = exports.encode2 = exports.encode1 = exports.encode0 = exports.uint16BEDecode = exports.uint16BEEncode = void 0;\n\nvar buffer_1 = require(\"buffer\");\n\nvar uint16BEEncode = function uint16BEEncode(value, target, offset) {\n  target = target || buffer_1.Buffer.allocUnsafe(2);\n  target.writeUInt16BE(value, offset);\n  return target;\n};\n\nexports.uint16BEEncode = uint16BEEncode;\nexports.uint16BEEncode.bytes = 2;\n\nvar uint16BEDecode = function uint16BEDecode(data) {\n  if (data.length < 2) throw RangeError('Could not decode int16BE');\n  return data.readUInt16BE(0);\n};\n\nexports.uint16BEDecode = uint16BEDecode;\nexports.uint16BEDecode.bytes = 2; // Note: IK and XX encoder usage is opposite (XX uses in stages encode0 where IK uses encode1)\n\nfunction encode0(message) {\n  return buffer_1.Buffer.concat([message.ne, message.ciphertext]);\n}\n\nexports.encode0 = encode0;\n\nfunction encode1(message) {\n  return buffer_1.Buffer.concat([message.ne, message.ns, message.ciphertext]);\n}\n\nexports.encode1 = encode1;\n\nfunction encode2(message) {\n  return buffer_1.Buffer.concat([message.ns, message.ciphertext]);\n}\n\nexports.encode2 = encode2;\n\nfunction decode0(input) {\n  if (input.length < 32) {\n    throw new Error('Cannot decode stage 0 MessageBuffer: length less than 32 bytes.');\n  }\n\n  return {\n    ne: input.slice(0, 32),\n    ciphertext: input.slice(32, input.length),\n    ns: buffer_1.Buffer.alloc(0)\n  };\n}\n\nexports.decode0 = decode0;\n\nfunction decode1(input) {\n  if (input.length < 80) {\n    throw new Error('Cannot decode stage 1 MessageBuffer: length less than 80 bytes.');\n  }\n\n  return {\n    ne: input.slice(0, 32),\n    ns: input.slice(32, 80),\n    ciphertext: input.slice(80, input.length)\n  };\n}\n\nexports.decode1 = decode1;\n\nfunction decode2(input) {\n  if (input.length < 48) {\n    throw new Error('Cannot decode stage 2 MessageBuffer: length less than 48 bytes.');\n  }\n\n  return {\n    ne: buffer_1.Buffer.alloc(0),\n    ns: input.slice(0, 48),\n    ciphertext: input.slice(48, input.length)\n  };\n}\n\nexports.decode2 = decode2;","map":{"version":3,"mappings":";;;;;;;AAAA;;AAKO,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD,EAAgBC,MAAhB,EAAgCC,MAAhC,EAA0D;EACtFD,MAAM,GAAGA,MAAM,IAAIE,gBAAOC,WAAP,CAAmB,CAAnB,CAAnB;EACAH,MAAM,CAACI,aAAP,CAAqBL,KAArB,EAA4BE,MAA5B;EACA,OAAOD,MAAP;AACD,CAJM;;AAAMK,yBAAcP,cAAd;AAKbO,uBAAeC,KAAf,GAAuB,CAAvB;;AAEO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,IAAD,EAAsC;EAClE,IAAIA,IAAI,CAACC,MAAL,GAAc,CAAlB,EAAqB,MAAMC,UAAU,CAAC,0BAAD,CAAhB;EACrB,OAAOF,IAAI,CAACG,YAAL,CAAkB,CAAlB,CAAP;AACD,CAHM;;AAAMN,yBAAcE,cAAd;AAIbF,uBAAeC,KAAf,GAAuB,CAAvB,C,CAEA;;AAEA,SAAgBM,OAAhB,CAAyBC,OAAzB,EAA+C;EAC7C,OAAOX,gBAAOY,MAAP,CAAc,CAACD,OAAO,CAACE,EAAT,EAAaF,OAAO,CAACG,UAArB,CAAd,CAAP;AACD;;AAFDX;;AAIA,SAAgBY,OAAhB,CAAyBJ,OAAzB,EAA+C;EAC7C,OAAOX,gBAAOY,MAAP,CAAc,CAACD,OAAO,CAACE,EAAT,EAAaF,OAAO,CAACK,EAArB,EAAyBL,OAAO,CAACG,UAAjC,CAAd,CAAP;AACD;;AAFDX;;AAIA,SAAgBc,OAAhB,CAAyBN,OAAzB,EAA+C;EAC7C,OAAOX,gBAAOY,MAAP,CAAc,CAACD,OAAO,CAACK,EAAT,EAAaL,OAAO,CAACG,UAArB,CAAd,CAAP;AACD;;AAFDX;;AAIA,SAAgBe,OAAhB,CAAyBC,KAAzB,EAAqC;EACnC,IAAIA,KAAK,CAACZ,MAAN,GAAe,EAAnB,EAAuB;IACrB,MAAM,IAAIa,KAAJ,CAAU,iEAAV,CAAN;EACD;;EAED,OAAO;IACLP,EAAE,EAAEM,KAAK,CAACE,KAAN,CAAY,CAAZ,EAAe,EAAf,CADC;IAELP,UAAU,EAAEK,KAAK,CAACE,KAAN,CAAY,EAAZ,EAAgBF,KAAK,CAACZ,MAAtB,CAFP;IAGLS,EAAE,EAAEhB,gBAAOsB,KAAP,CAAa,CAAb;EAHC,CAAP;AAKD;;AAVDnB;;AAYA,SAAgBoB,OAAhB,CAAyBJ,KAAzB,EAAqC;EACnC,IAAIA,KAAK,CAACZ,MAAN,GAAe,EAAnB,EAAuB;IACrB,MAAM,IAAIa,KAAJ,CAAU,iEAAV,CAAN;EACD;;EAED,OAAO;IACLP,EAAE,EAAEM,KAAK,CAACE,KAAN,CAAY,CAAZ,EAAe,EAAf,CADC;IAELL,EAAE,EAAEG,KAAK,CAACE,KAAN,CAAY,EAAZ,EAAgB,EAAhB,CAFC;IAGLP,UAAU,EAAEK,KAAK,CAACE,KAAN,CAAY,EAAZ,EAAgBF,KAAK,CAACZ,MAAtB;EAHP,CAAP;AAKD;;AAVDJ;;AAYA,SAAgBqB,OAAhB,CAAyBL,KAAzB,EAAqC;EACnC,IAAIA,KAAK,CAACZ,MAAN,GAAe,EAAnB,EAAuB;IACrB,MAAM,IAAIa,KAAJ,CAAU,iEAAV,CAAN;EACD;;EAED,OAAO;IACLP,EAAE,EAAEb,gBAAOsB,KAAP,CAAa,CAAb,CADC;IAELN,EAAE,EAAEG,KAAK,CAACE,KAAN,CAAY,CAAZ,EAAe,EAAf,CAFC;IAGLP,UAAU,EAAEK,KAAK,CAACE,KAAN,CAAY,EAAZ,EAAgBF,KAAK,CAACZ,MAAtB;EAHP,CAAP;AAKD;;AAVDJ","names":["uint16BEEncode","value","target","offset","buffer_1","allocUnsafe","writeUInt16BE","exports","bytes","uint16BEDecode","data","length","RangeError","readUInt16BE","encode0","message","concat","ne","ciphertext","encode1","ns","encode2","decode0","input","Error","slice","alloc","decode1","decode2"],"sourceRoot":"","sources":["../../src/encoder.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}