{"ast":null,"code":"'use strict'; // @ts-ignore - no types\n\nconst WS = require('libp2p-websockets'); // @ts-ignore - no types\n\n\nconst WebRTCStar = require('libp2p-webrtc-star'); // @ts-ignore - no types\n\n\nconst Multiplex = require('libp2p-mplex');\n\nconst {\n  NOISE\n} = require('@chainsafe/libp2p-noise');\n\nconst KadDHT = require('libp2p-kad-dht');\n\nconst GossipSub = require('libp2p-gossipsub');\n\nconst ipnsUtils = require('../ipns/routing/utils');\n\nmodule.exports = () => {\n  /** @type {import('libp2p').Libp2pOptions} */\n  const options = {\n    dialer: {\n      maxParallelDials: 150,\n      // 150 total parallel multiaddr dials\n      maxDialsPerPeer: 4,\n      // Allow 4 multiaddrs to be dialed per peer in parallel\n      dialTimeout: 10e3 // 10 second dial timeout per peer dial\n\n    },\n    modules: {\n      transport: [WS, WebRTCStar],\n      streamMuxer: [Multiplex],\n      connEncryption: [NOISE],\n      peerDiscovery: [],\n      dht: KadDHT,\n      pubsub: GossipSub\n    },\n    config: {\n      peerDiscovery: {\n        autoDial: true,\n        // [Bootstrap.tag] = 'bootstrap'\n        bootstrap: {\n          enabled: true\n        },\n        // [WebRTCStar.discovery.tag]\n        webRTCStar: {\n          enabled: true\n        }\n      },\n      dht: {\n        kBucketSize: 20,\n        enabled: false,\n        clientMode: true,\n        randomWalk: {\n          enabled: false\n        },\n        validators: {\n          ipns: ipnsUtils.validator\n        },\n        selectors: {\n          ipns: ipnsUtils.selector\n        }\n      },\n      pubsub: {\n        enabled: true,\n        emitSelf: true\n      },\n      nat: {\n        enabled: false\n      }\n    },\n    metrics: {\n      enabled: true\n    },\n    peerStore: {\n      persistence: true,\n      threshold: 1\n    }\n  };\n  return options;\n};","map":{"version":3,"names":["WS","require","WebRTCStar","Multiplex","NOISE","KadDHT","GossipSub","ipnsUtils","module","exports","options","dialer","maxParallelDials","maxDialsPerPeer","dialTimeout","modules","transport","streamMuxer","connEncryption","peerDiscovery","dht","pubsub","config","autoDial","bootstrap","enabled","webRTCStar","kBucketSize","clientMode","randomWalk","validators","ipns","validator","selectors","selector","emitSelf","nat","metrics","peerStore","persistence","threshold"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/runtime/libp2p-browser.js"],"sourcesContent":["'use strict'\n\n// @ts-ignore - no types\nconst WS = require('libp2p-websockets')\n// @ts-ignore - no types\nconst WebRTCStar = require('libp2p-webrtc-star')\n// @ts-ignore - no types\nconst Multiplex = require('libp2p-mplex')\nconst { NOISE } = require('@chainsafe/libp2p-noise')\nconst KadDHT = require('libp2p-kad-dht')\nconst GossipSub = require('libp2p-gossipsub')\nconst ipnsUtils = require('../ipns/routing/utils')\n\nmodule.exports = () => {\n  /** @type {import('libp2p').Libp2pOptions} */\n  const options = {\n    dialer: {\n      maxParallelDials: 150, // 150 total parallel multiaddr dials\n      maxDialsPerPeer: 4, // Allow 4 multiaddrs to be dialed per peer in parallel\n      dialTimeout: 10e3 // 10 second dial timeout per peer dial\n    },\n    modules: {\n      transport: [\n        WS,\n        WebRTCStar\n      ],\n      streamMuxer: [\n        Multiplex\n      ],\n      connEncryption: [\n        NOISE\n      ],\n      peerDiscovery: [],\n      dht: KadDHT,\n      pubsub: GossipSub\n    },\n    config: {\n      peerDiscovery: {\n        autoDial: true,\n        // [Bootstrap.tag] = 'bootstrap'\n        bootstrap: {\n          enabled: true\n        },\n        // [WebRTCStar.discovery.tag]\n        webRTCStar: {\n          enabled: true\n        }\n      },\n      dht: {\n        kBucketSize: 20,\n        enabled: false,\n        clientMode: true,\n        randomWalk: {\n          enabled: false\n        },\n        validators: {\n          ipns: ipnsUtils.validator\n        },\n        selectors: {\n          ipns: ipnsUtils.selector\n        }\n      },\n      pubsub: {\n        enabled: true,\n        emitSelf: true\n      },\n      nat: {\n        enabled: false\n      }\n    },\n    metrics: {\n      enabled: true\n    },\n    peerStore: {\n      persistence: true,\n      threshold: 1\n    }\n  }\n\n  return options\n}\n"],"mappings":"AAAA,a,CAEA;;AACA,MAAMA,EAAE,GAAGC,OAAO,CAAC,mBAAD,CAAlB,C,CACA;;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,oBAAD,CAA1B,C,CACA;;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,cAAD,CAAzB;;AACA,MAAM;EAAEG;AAAF,IAAYH,OAAO,CAAC,yBAAD,CAAzB;;AACA,MAAMI,MAAM,GAAGJ,OAAO,CAAC,gBAAD,CAAtB;;AACA,MAAMK,SAAS,GAAGL,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMM,SAAS,GAAGN,OAAO,CAAC,uBAAD,CAAzB;;AAEAO,MAAM,CAACC,OAAP,GAAiB,MAAM;EACrB;EACA,MAAMC,OAAO,GAAG;IACdC,MAAM,EAAE;MACNC,gBAAgB,EAAE,GADZ;MACiB;MACvBC,eAAe,EAAE,CAFX;MAEc;MACpBC,WAAW,EAAE,IAHP,CAGY;;IAHZ,CADM;IAMdC,OAAO,EAAE;MACPC,SAAS,EAAE,CACThB,EADS,EAETE,UAFS,CADJ;MAKPe,WAAW,EAAE,CACXd,SADW,CALN;MAQPe,cAAc,EAAE,CACdd,KADc,CART;MAWPe,aAAa,EAAE,EAXR;MAYPC,GAAG,EAAEf,MAZE;MAaPgB,MAAM,EAAEf;IAbD,CANK;IAqBdgB,MAAM,EAAE;MACNH,aAAa,EAAE;QACbI,QAAQ,EAAE,IADG;QAEb;QACAC,SAAS,EAAE;UACTC,OAAO,EAAE;QADA,CAHE;QAMb;QACAC,UAAU,EAAE;UACVD,OAAO,EAAE;QADC;MAPC,CADT;MAYNL,GAAG,EAAE;QACHO,WAAW,EAAE,EADV;QAEHF,OAAO,EAAE,KAFN;QAGHG,UAAU,EAAE,IAHT;QAIHC,UAAU,EAAE;UACVJ,OAAO,EAAE;QADC,CAJT;QAOHK,UAAU,EAAE;UACVC,IAAI,EAAExB,SAAS,CAACyB;QADN,CAPT;QAUHC,SAAS,EAAE;UACTF,IAAI,EAAExB,SAAS,CAAC2B;QADP;MAVR,CAZC;MA0BNb,MAAM,EAAE;QACNI,OAAO,EAAE,IADH;QAENU,QAAQ,EAAE;MAFJ,CA1BF;MA8BNC,GAAG,EAAE;QACHX,OAAO,EAAE;MADN;IA9BC,CArBM;IAuDdY,OAAO,EAAE;MACPZ,OAAO,EAAE;IADF,CAvDK;IA0Dda,SAAS,EAAE;MACTC,WAAW,EAAE,IADJ;MAETC,SAAS,EAAE;IAFF;EA1DG,CAAhB;EAgEA,OAAO9B,OAAP;AACD,CAnED"},"metadata":{},"sourceType":"script"}