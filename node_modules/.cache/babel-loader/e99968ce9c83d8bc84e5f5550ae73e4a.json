{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _asyncIterator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar _require = require('ipfs-unixfs-exporter'),\n    walkPath = _require.walkPath;\n\nvar log = require('debug')('ipfs:mfs:utils:to-trail');\n/**\n * @typedef {import('../').MfsContext} MfsContext\n * @typedef {object} MfsTrail\n * @property {string} name\n * @property {import('multiformats/cid').CID} cid\n * @property {number} [size]\n * @property {string} [type]\n *\n * TODO: export supported types from unixfs-exporter and use for `type` above\n */\n\n/**\n * @param {MfsContext} context\n * @param {string} path\n * @returns {Promise<MfsTrail[]>}\n */\n\n\nvar toTrail = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(context, path) {\n    var output, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, fsEntry;\n\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            log(\"Creating trail for path \".concat(path));\n            output = [];\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context.prev = 4;\n            _iterator = _asyncIterator(walkPath(path, context.repo.blocks));\n\n          case 6:\n            _context.next = 8;\n            return _iterator.next();\n\n          case 8:\n            if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n              _context.next = 14;\n              break;\n            }\n\n            fsEntry = _step.value;\n            output.push({\n              name: fsEntry.name,\n              cid: fsEntry.cid,\n              size: fsEntry.size,\n              type: fsEntry.type\n            });\n\n          case 11:\n            _iteratorAbruptCompletion = false;\n            _context.next = 6;\n            break;\n\n          case 14:\n            _context.next = 20;\n            break;\n\n          case 16:\n            _context.prev = 16;\n            _context.t0 = _context[\"catch\"](4);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 20:\n            _context.prev = 20;\n            _context.prev = 21;\n\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context.next = 25;\n              break;\n            }\n\n            _context.next = 25;\n            return _iterator.return();\n\n          case 25:\n            _context.prev = 25;\n\n            if (!_didIteratorError) {\n              _context.next = 28;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 28:\n            return _context.finish(25);\n\n          case 29:\n            return _context.finish(20);\n\n          case 30:\n            return _context.abrupt(\"return\", output);\n\n          case 31:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[4, 16, 20, 30], [21,, 25, 29]]);\n  }));\n\n  return function toTrail(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = toTrail;","map":{"version":3,"names":["require","walkPath","log","toTrail","context","path","output","repo","blocks","fsEntry","push","name","cid","size","type","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/files/utils/to-trail.js"],"sourcesContent":["'use strict'\n\nconst { walkPath } = require('ipfs-unixfs-exporter')\nconst log = require('debug')('ipfs:mfs:utils:to-trail')\n\n/**\n * @typedef {import('../').MfsContext} MfsContext\n * @typedef {object} MfsTrail\n * @property {string} name\n * @property {import('multiformats/cid').CID} cid\n * @property {number} [size]\n * @property {string} [type]\n *\n * TODO: export supported types from unixfs-exporter and use for `type` above\n */\n\n/**\n * @param {MfsContext} context\n * @param {string} path\n * @returns {Promise<MfsTrail[]>}\n */\nconst toTrail = async (context, path) => {\n  log(`Creating trail for path ${path}`)\n\n  const output = []\n\n  for await (const fsEntry of walkPath(path, context.repo.blocks)) {\n    output.push({\n      name: fsEntry.name,\n      cid: fsEntry.cid,\n      size: fsEntry.size,\n      type: fsEntry.type\n    })\n  }\n\n  return output\n}\n\nmodule.exports = toTrail\n"],"mappings":"AAAA;;;;;;;;AAEA,eAAqBA,OAAO,CAAC,sBAAD,CAA5B;AAAA,IAAQC,QAAR,YAAQA,QAAR;;AACA,IAAMC,GAAG,GAAGF,OAAO,CAAC,OAAD,CAAP,CAAiB,yBAAjB,CAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AACA,IAAMG,OAAO;EAAA,sEAAG,iBAAOC,OAAP,EAAgBC,IAAhB;IAAA;;IAAA;MAAA;QAAA;UAAA;YACdH,GAAG,mCAA4BG,IAA5B,EAAH;YAEMC,MAHQ,GAGC,EAHD;YAAA;YAAA;YAAA;YAAA,2BAKcL,QAAQ,CAACI,IAAD,EAAOD,OAAO,CAACG,IAAR,CAAaC,MAApB,CALtB;;UAAA;YAAA;YAAA;;UAAA;YAAA;cAAA;cAAA;YAAA;;YAKGC,OALH;YAMZH,MAAM,CAACI,IAAP,CAAY;cACVC,IAAI,EAAEF,OAAO,CAACE,IADJ;cAEVC,GAAG,EAAEH,OAAO,CAACG,GAFH;cAGVC,IAAI,EAAEJ,OAAO,CAACI,IAHJ;cAIVC,IAAI,EAAEL,OAAO,CAACK;YAJJ,CAAZ;;UANY;YAAA;YAAA;YAAA;;UAAA;YAAA;YAAA;;UAAA;YAAA;YAAA;YAAA;YAAA;;UAAA;YAAA;YAAA;;YAAA;cAAA;cAAA;YAAA;;YAAA;YAAA;;UAAA;YAAA;;YAAA;cAAA;cAAA;YAAA;;YAAA;;UAAA;YAAA;;UAAA;YAAA;;UAAA;YAAA,iCAcPR,MAdO;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAH;;EAAA,gBAAPH,OAAO;IAAA;EAAA;AAAA,GAAb;;AAiBAY,MAAM,CAACC,OAAP,GAAiBb,OAAjB"},"metadata":{},"sourceType":"script"}