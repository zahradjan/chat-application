{"ast":null,"code":"'use strict'; // @ts-ignore nat-api does not export types\n\nconst NatAPI = require('@motrix/nat-api');\n\nconst debug = require('debug');\n\nconst {\n  promisify\n} = require('es6-promisify');\n\nconst {\n  Multiaddr\n} = require('multiaddr');\n\nconst log = Object.assign(debug('libp2p:nat'), {\n  error: debug('libp2p:nat:err')\n});\n\nconst {\n  isBrowser\n} = require('wherearewe');\n\nconst retry = require('p-retry'); // @ts-ignore private-api does not export types\n\n\nconst isPrivateIp = require('private-ip');\n\nconst pkg = require('../package.json');\n\nconst errcode = require('err-code');\n\nconst {\n  codes: {\n    ERR_INVALID_PARAMETERS\n  }\n} = require('./errors');\n\nconst isLoopback = require('libp2p-utils/src/multiaddr/is-loopback');\n\nconst DEFAULT_TTL = 7200;\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('./transport-manager')} TransportManager\n * @typedef {import('./address-manager')} AddressManager\n */\n\n/**\n * @typedef {Object} NatManagerProperties\n * @property {PeerId} peerId - The peer ID of the current node\n * @property {TransportManager} transportManager - A transport manager\n * @property {AddressManager} addressManager - An address manager\n *\n * @typedef {Object} NatManagerOptions\n * @property {boolean} enabled - Whether to enable the NAT manager\n * @property {string} [externalIp] - Pass a value to use instead of auto-detection\n * @property {string} [description] - A string value to use for the port mapping description on the gateway\n * @property {number} [ttl = DEFAULT_TTL] - How long UPnP port mappings should last for in seconds (minimum 1200)\n * @property {boolean} [keepAlive] - Whether to automatically refresh UPnP port mappings when their TTL is reached\n * @property {string} [gateway] - Pass a value to use instead of auto-detection\n * @property {object} [pmp] - PMP options\n * @property {boolean} [pmp.enabled] - Whether to enable PMP as well as UPnP\n */\n\nfunction highPort() {\n  let min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1024;\n  let max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 65535;\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nclass NatManager {\n  /**\n   * @class\n   * @param {NatManagerProperties & NatManagerOptions} options\n   */\n  constructor(_ref) {\n    let {\n      peerId,\n      addressManager,\n      transportManager,\n      ...options\n    } = _ref;\n    this._peerId = peerId;\n    this._addressManager = addressManager;\n    this._transportManager = transportManager;\n    this._enabled = options.enabled;\n    this._externalIp = options.externalIp;\n    this._options = {\n      description: options.description || `${pkg.name}@${pkg.version} ${this._peerId}`,\n      ttl: options.ttl || DEFAULT_TTL,\n      autoUpdate: options.keepAlive || true,\n      gateway: options.gateway,\n      enablePMP: Boolean(options.pmp && options.pmp.enabled)\n    };\n\n    if (this._options.ttl < DEFAULT_TTL) {\n      throw errcode(new Error(`NatManager ttl should be at least ${DEFAULT_TTL} seconds`), ERR_INVALID_PARAMETERS);\n    }\n  }\n  /**\n   * Starts the NAT manager\n   */\n\n\n  start() {\n    if (isBrowser || !this._enabled) {\n      return;\n    } // done async to not slow down startup\n\n\n    this._start().catch(err => {\n      // hole punching errors are non-fatal\n      log.error(err);\n    });\n  }\n\n  async _start() {\n    const addrs = this._transportManager.getAddrs();\n\n    for (const addr of addrs) {\n      // try to open uPnP ports for each thin waist address\n      const {\n        family,\n        host,\n        port,\n        transport\n      } = addr.toOptions();\n\n      if (!addr.isThinWaistAddress() || transport !== 'tcp') {\n        // only bare tcp addresses\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      if (isLoopback(addr)) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      if (family !== 4) {\n        // ignore ipv6\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      const client = this._getClient();\n\n      const publicIp = this._externalIp || (await client.externalIp());\n\n      if (isPrivateIp(publicIp)) {\n        throw new Error(`${publicIp} is private - please set config.nat.externalIp to an externally routable IP or ensure you are not behind a double NAT`);\n      }\n\n      const publicPort = highPort();\n      log(`opening uPnP connection from ${publicIp}:${publicPort} to ${host}:${port}`);\n      await client.map({\n        publicPort,\n        privatePort: port,\n        protocol: transport.toUpperCase()\n      });\n\n      this._addressManager.addObservedAddr(Multiaddr.fromNodeAddress({\n        family: 4,\n        address: publicIp,\n        port: publicPort\n      }, transport));\n    }\n  }\n\n  _getClient() {\n    if (this._client) {\n      return this._client;\n    }\n\n    const client = new NatAPI(this._options);\n    /** @type {(...any: any) => any} */\n\n    const map = promisify(client.map.bind(client));\n    /** @type {(...any: any) => any} */\n\n    const destroy = promisify(client.destroy.bind(client));\n    /** @type {(...any: any) => any} */\n\n    const externalIp = promisify(client.externalIp.bind(client)); // these are all network operations so add a retry\n\n    this._client = {\n      /**\n       * @param  {...any} args\n       * @returns {Promise<void>}\n       */\n      map: function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return retry(() => map(...args), {\n          onFailedAttempt: log.error,\n          unref: true\n        });\n      },\n\n      /**\n       * @param  {...any} args\n       * @returns {Promise<void>}\n       */\n      destroy: function () {\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        return retry(() => destroy(...args), {\n          onFailedAttempt: log.error,\n          unref: true\n        });\n      },\n\n      /**\n       * @param  {...any} args\n       * @returns {Promise<string>}\n       */\n      externalIp: function () {\n        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n\n        return retry(() => externalIp(...args), {\n          onFailedAttempt: log.error,\n          unref: true\n        });\n      }\n    };\n    return this._client;\n  }\n  /**\n   * Stops the NAT manager\n   *\n   * @async\n   */\n\n\n  async stop() {\n    if (isBrowser || !this._client) {\n      return;\n    }\n\n    try {\n      await this._client.destroy();\n      this._client = null;\n    } catch (err) {\n      log.error(err);\n    }\n  }\n\n}\n\nmodule.exports = NatManager;","map":{"version":3,"names":["NatAPI","require","debug","promisify","Multiaddr","log","Object","assign","error","isBrowser","retry","isPrivateIp","pkg","errcode","codes","ERR_INVALID_PARAMETERS","isLoopback","DEFAULT_TTL","highPort","min","max","Math","floor","random","NatManager","constructor","peerId","addressManager","transportManager","options","_peerId","_addressManager","_transportManager","_enabled","enabled","_externalIp","externalIp","_options","description","name","version","ttl","autoUpdate","keepAlive","gateway","enablePMP","Boolean","pmp","Error","start","_start","catch","err","addrs","getAddrs","addr","family","host","port","transport","toOptions","isThinWaistAddress","client","_getClient","publicIp","publicPort","map","privatePort","protocol","toUpperCase","addObservedAddr","fromNodeAddress","address","_client","bind","destroy","args","onFailedAttempt","unref","stop","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p/src/nat-manager.js"],"sourcesContent":["'use strict'\n\n// @ts-ignore nat-api does not export types\nconst NatAPI = require('@motrix/nat-api')\nconst debug = require('debug')\nconst { promisify } = require('es6-promisify')\nconst { Multiaddr } = require('multiaddr')\nconst log = Object.assign(debug('libp2p:nat'), {\n  error: debug('libp2p:nat:err')\n})\nconst { isBrowser } = require('wherearewe')\nconst retry = require('p-retry')\n// @ts-ignore private-api does not export types\nconst isPrivateIp = require('private-ip')\nconst pkg = require('../package.json')\nconst errcode = require('err-code')\nconst {\n  codes: { ERR_INVALID_PARAMETERS }\n} = require('./errors')\nconst isLoopback = require('libp2p-utils/src/multiaddr/is-loopback')\n\nconst DEFAULT_TTL = 7200\n\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('./transport-manager')} TransportManager\n * @typedef {import('./address-manager')} AddressManager\n */\n\n/**\n * @typedef {Object} NatManagerProperties\n * @property {PeerId} peerId - The peer ID of the current node\n * @property {TransportManager} transportManager - A transport manager\n * @property {AddressManager} addressManager - An address manager\n *\n * @typedef {Object} NatManagerOptions\n * @property {boolean} enabled - Whether to enable the NAT manager\n * @property {string} [externalIp] - Pass a value to use instead of auto-detection\n * @property {string} [description] - A string value to use for the port mapping description on the gateway\n * @property {number} [ttl = DEFAULT_TTL] - How long UPnP port mappings should last for in seconds (minimum 1200)\n * @property {boolean} [keepAlive] - Whether to automatically refresh UPnP port mappings when their TTL is reached\n * @property {string} [gateway] - Pass a value to use instead of auto-detection\n * @property {object} [pmp] - PMP options\n * @property {boolean} [pmp.enabled] - Whether to enable PMP as well as UPnP\n */\n\nfunction highPort (min = 1024, max = 65535) {\n  return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\nclass NatManager {\n  /**\n   * @class\n   * @param {NatManagerProperties & NatManagerOptions} options\n   */\n  constructor ({ peerId, addressManager, transportManager, ...options }) {\n    this._peerId = peerId\n    this._addressManager = addressManager\n    this._transportManager = transportManager\n\n    this._enabled = options.enabled\n    this._externalIp = options.externalIp\n    this._options = {\n      description: options.description || `${pkg.name}@${pkg.version} ${this._peerId}`,\n      ttl: options.ttl || DEFAULT_TTL,\n      autoUpdate: options.keepAlive || true,\n      gateway: options.gateway,\n      enablePMP: Boolean(options.pmp && options.pmp.enabled)\n    }\n\n    if (this._options.ttl < DEFAULT_TTL) {\n      throw errcode(new Error(`NatManager ttl should be at least ${DEFAULT_TTL} seconds`), ERR_INVALID_PARAMETERS)\n    }\n  }\n\n  /**\n   * Starts the NAT manager\n   */\n  start () {\n    if (isBrowser || !this._enabled) {\n      return\n    }\n\n    // done async to not slow down startup\n    this._start().catch((err) => {\n      // hole punching errors are non-fatal\n      log.error(err)\n    })\n  }\n\n  async _start () {\n    const addrs = this._transportManager.getAddrs()\n\n    for (const addr of addrs) {\n      // try to open uPnP ports for each thin waist address\n      const { family, host, port, transport } = addr.toOptions()\n\n      if (!addr.isThinWaistAddress() || transport !== 'tcp') {\n        // only bare tcp addresses\n        // eslint-disable-next-line no-continue\n        continue\n      }\n\n      if (isLoopback(addr)) {\n        // eslint-disable-next-line no-continue\n        continue\n      }\n\n      if (family !== 4) {\n        // ignore ipv6\n        // eslint-disable-next-line no-continue\n        continue\n      }\n\n      const client = this._getClient()\n      const publicIp = this._externalIp || await client.externalIp()\n\n      if (isPrivateIp(publicIp)) {\n        throw new Error(`${publicIp} is private - please set config.nat.externalIp to an externally routable IP or ensure you are not behind a double NAT`)\n      }\n\n      const publicPort = highPort()\n\n      log(`opening uPnP connection from ${publicIp}:${publicPort} to ${host}:${port}`)\n\n      await client.map({\n        publicPort,\n        privatePort: port,\n        protocol: transport.toUpperCase()\n      })\n\n      this._addressManager.addObservedAddr(Multiaddr.fromNodeAddress({\n        family: 4,\n        address: publicIp,\n        port: publicPort\n      }, transport))\n    }\n  }\n\n  _getClient () {\n    if (this._client) {\n      return this._client\n    }\n\n    const client = new NatAPI(this._options)\n\n    /** @type {(...any: any) => any} */\n    const map = promisify(client.map.bind(client))\n    /** @type {(...any: any) => any} */\n    const destroy = promisify(client.destroy.bind(client))\n    /** @type {(...any: any) => any} */\n    const externalIp = promisify(client.externalIp.bind(client))\n\n    // these are all network operations so add a retry\n    this._client = {\n      /**\n       * @param  {...any} args\n       * @returns {Promise<void>}\n       */\n      map: (...args) => retry(() => map(...args), { onFailedAttempt: log.error, unref: true }),\n\n      /**\n       * @param  {...any} args\n       * @returns {Promise<void>}\n       */\n      destroy: (...args) => retry(() => destroy(...args), { onFailedAttempt: log.error, unref: true }),\n\n      /**\n       * @param  {...any} args\n       * @returns {Promise<string>}\n       */\n      externalIp: (...args) => retry(() => externalIp(...args), { onFailedAttempt: log.error, unref: true })\n    }\n\n    return this._client\n  }\n\n  /**\n   * Stops the NAT manager\n   *\n   * @async\n   */\n  async stop () {\n    if (isBrowser || !this._client) {\n      return\n    }\n\n    try {\n      await this._client.destroy()\n      this._client = null\n    } catch (err) {\n      log.error(err)\n    }\n  }\n}\n\nmodule.exports = NatManager\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}