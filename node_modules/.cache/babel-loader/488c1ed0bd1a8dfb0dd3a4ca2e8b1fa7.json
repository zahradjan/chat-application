{"ast":null,"code":"'use strict';\n\nmodule.exports = Receptacle;\n\nvar toMS = require('ms');\n\nvar cache = Receptacle.prototype;\nvar counter = new Date() % 1e9;\n\nfunction getUID() {\n  return (Math.random() * 1e9 >>> 0) + counter++;\n}\n/**\n * Creates a cache with a maximum key size.\n *\n * @constructor\n * @param {Object} options\n * @param {Number} [options.max=Infinity] the maximum number of keys allowed in the cache (lru).\n * @param {Array} [options.items=[]] the default items in the cache.\n */\n\n\nfunction Receptacle(options) {\n  options = options || {};\n  this.id = options.id || getUID();\n  this.max = options.max || Infinity;\n  this.items = options.items || [];\n  this._lookup = {};\n  this.size = this.items.length;\n  this.lastModified = new Date(options.lastModified || new Date()); // Setup initial timers and indexes for the cache.\n\n  for (var item, ttl, i = this.items.length; i--;) {\n    item = this.items[i];\n    ttl = new Date(item.expires) - new Date();\n    this._lookup[item.key] = item;\n    if (ttl > 0) this.expire(item.key, ttl);else if (ttl <= 0) this.delete(item.key);\n  }\n}\n/**\n * Tests if a key is currently in the cache.\n * Does not check if slot is empty.\n *\n * @param {String} key - the key to retrieve from the cache.\n * @return {Boolean}\n */\n\n\ncache.has = function (key) {\n  return key in this._lookup;\n};\n/**\n * Retrieves a key from the cache and marks it as recently used.\n *\n * @param {String} key - the key to retrieve from the cache.\n * @return {*}\n */\n\n\ncache.get = function (key) {\n  if (!this.has(key)) return null;\n  var record = this._lookup[key]; // Update expiry for \"refresh\" keys\n\n  if (record.refresh) this.expire(key, record.refresh); // Move to front of the line.\n\n  this.items.splice(this.items.indexOf(record), 1);\n  this.items.push(record);\n  return record.value;\n};\n/**\n * Retrieves user meta data for a cached item.\n *\n * @param {String} key - the key to retrieve meta data from the cache.\n * @return {*}\n */\n\n\ncache.meta = function (key) {\n  if (!this.has(key)) return null;\n  var record = this._lookup[key];\n  if (!('meta' in record)) return null;\n  return record.meta;\n};\n/**\n * Puts a key into the cache with an optional expiry time.\n *\n * @param {String} key - the key for the value in the cache.\n * @param {*} value - the value to place at the key.\n * @param {Number} [options.ttl] - a time after which the key will be removed.\n * @return {Receptacle}\n */\n\n\ncache.set = function (key, value, options) {\n  var oldRecord = this._lookup[key];\n  var record = this._lookup[key] = {\n    key: key,\n    value: value\n  }; // Mark cache as modified.\n\n  this.lastModified = new Date();\n\n  if (oldRecord) {\n    // Replace an old key.\n    clearTimeout(oldRecord.timeout);\n    this.items.splice(this.items.indexOf(oldRecord), 1, record);\n  } else {\n    // Remove least used item if needed.\n    if (this.size >= this.max) this.delete(this.items[0].key); // Add a new key.\n\n    this.items.push(record);\n    this.size++;\n  }\n\n  if (options) {\n    // Setup key expiry.\n    if ('ttl' in options) this.expire(key, options.ttl); // Store user options in the record.\n\n    if ('meta' in options) record.meta = options.meta; // Mark a auto refresh key.\n\n    if (options.refresh) record.refresh = options.ttl;\n  }\n\n  return this;\n};\n/**\n * Deletes an item from the cache.\n *\n * @param {String} key - the key to remove.\n * @return {Receptacle}\n */\n\n\ncache.delete = function (key) {\n  var record = this._lookup[key];\n  if (!record) return false;\n  this.lastModified = new Date();\n  this.items.splice(this.items.indexOf(record), 1);\n  clearTimeout(record.timeout);\n  delete this._lookup[key];\n  this.size--;\n  return this;\n};\n/**\n * Utility to register a key that will be removed after some time.\n *\n * @param {String} key - the key to remove.\n * @param {Number} [ms] - the timeout before removal.\n * @return {Receptacle}\n */\n\n\ncache.expire = function (key, ttl) {\n  var ms = ttl || 0;\n  var record = this._lookup[key];\n  if (!record) return this;\n  if (typeof ms === 'string') ms = toMS(ttl);\n  if (typeof ms !== 'number') throw new TypeError('Expiration time must be a string or number.');\n  clearTimeout(record.timeout);\n  record.timeout = setTimeout(this.delete.bind(this, record.key), ms);\n  record.expires = Number(new Date()) + ms;\n  return this;\n};\n/**\n * Deletes all items from the cache.\n * @return {Receptacle}\n */\n\n\ncache.clear = function () {\n  for (var i = this.items.length; i--;) this.delete(this.items[i].key);\n\n  return this;\n};\n/**\n * Fixes serialization issues in polyfilled environments.\n * Ensures non-cyclical serialized object.\n */\n\n\ncache.toJSON = function () {\n  var items = new Array(this.items.length);\n  var item;\n\n  for (var i = items.length; i--;) {\n    item = this.items[i];\n    items[i] = {\n      key: item.key,\n      meta: item.meta,\n      value: item.value,\n      expires: item.expires,\n      refresh: item.refresh\n    };\n  }\n\n  return {\n    id: this.id,\n    max: isFinite(this.max) ? this.max : undefined,\n    lastModified: this.lastModified,\n    items: items\n  };\n};","map":{"version":3,"names":["module","exports","Receptacle","toMS","require","cache","prototype","counter","Date","getUID","Math","random","options","id","max","Infinity","items","_lookup","size","length","lastModified","item","ttl","i","expires","key","expire","delete","has","get","record","refresh","splice","indexOf","push","value","meta","set","oldRecord","clearTimeout","timeout","ms","TypeError","setTimeout","bind","Number","clear","toJSON","Array","isFinite","undefined"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/receptacle/index.js"],"sourcesContent":["'use strict'\n\nmodule.exports = Receptacle\nvar toMS = require('ms')\nvar cache = Receptacle.prototype\nvar counter = new Date() % 1e9\n\nfunction getUID () { return (Math.random() * 1e9 >>> 0) + (counter++) }\n\n/**\n * Creates a cache with a maximum key size.\n *\n * @constructor\n * @param {Object} options\n * @param {Number} [options.max=Infinity] the maximum number of keys allowed in the cache (lru).\n * @param {Array} [options.items=[]] the default items in the cache.\n */\nfunction Receptacle (options) {\n  options = options || {}\n  this.id = options.id || getUID()\n  this.max = options.max || Infinity\n  this.items = options.items || []\n  this._lookup = {}\n  this.size = this.items.length\n  this.lastModified = new Date(options.lastModified || new Date())\n\n  // Setup initial timers and indexes for the cache.\n  for (var item, ttl, i = this.items.length; i--;) {\n    item = this.items[i]\n    ttl = new Date(item.expires) - new Date()\n    this._lookup[item.key] = item\n    if (ttl > 0) this.expire(item.key, ttl)\n    else if (ttl <= 0) this.delete(item.key)\n  }\n}\n\n/**\n * Tests if a key is currently in the cache.\n * Does not check if slot is empty.\n *\n * @param {String} key - the key to retrieve from the cache.\n * @return {Boolean}\n */\ncache.has = function (key) {\n  return key in this._lookup\n}\n\n/**\n * Retrieves a key from the cache and marks it as recently used.\n *\n * @param {String} key - the key to retrieve from the cache.\n * @return {*}\n */\ncache.get = function (key) {\n  if (!this.has(key)) return null\n  var record = this._lookup[key]\n  // Update expiry for \"refresh\" keys\n  if (record.refresh) this.expire(key, record.refresh)\n  // Move to front of the line.\n  this.items.splice(this.items.indexOf(record), 1)\n  this.items.push(record)\n  return record.value\n}\n\n/**\n * Retrieves user meta data for a cached item.\n *\n * @param {String} key - the key to retrieve meta data from the cache.\n * @return {*}\n */\ncache.meta = function (key) {\n  if (!this.has(key)) return null\n  var record = this._lookup[key]\n  if (!('meta' in record)) return null\n  return record.meta\n}\n\n/**\n * Puts a key into the cache with an optional expiry time.\n *\n * @param {String} key - the key for the value in the cache.\n * @param {*} value - the value to place at the key.\n * @param {Number} [options.ttl] - a time after which the key will be removed.\n * @return {Receptacle}\n */\ncache.set = function (key, value, options) {\n  var oldRecord = this._lookup[key]\n  var record = this._lookup[key] = { key: key, value: value }\n  // Mark cache as modified.\n  this.lastModified = new Date()\n\n  if (oldRecord) {\n    // Replace an old key.\n    clearTimeout(oldRecord.timeout)\n    this.items.splice(this.items.indexOf(oldRecord), 1, record)\n  } else {\n    // Remove least used item if needed.\n    if (this.size >= this.max) this.delete(this.items[0].key)\n    // Add a new key.\n    this.items.push(record)\n    this.size++\n  }\n\n  if (options) {\n    // Setup key expiry.\n    if ('ttl' in options) this.expire(key, options.ttl)\n    // Store user options in the record.\n    if ('meta' in options) record.meta = options.meta\n    // Mark a auto refresh key.\n    if (options.refresh) record.refresh = options.ttl\n  }\n\n  return this\n}\n\n/**\n * Deletes an item from the cache.\n *\n * @param {String} key - the key to remove.\n * @return {Receptacle}\n */\ncache.delete = function (key) {\n  var record = this._lookup[key]\n  if (!record) return false\n  this.lastModified = new Date()\n  this.items.splice(this.items.indexOf(record), 1)\n  clearTimeout(record.timeout)\n  delete this._lookup[key]\n  this.size--\n  return this\n}\n\n/**\n * Utility to register a key that will be removed after some time.\n *\n * @param {String} key - the key to remove.\n * @param {Number} [ms] - the timeout before removal.\n * @return {Receptacle}\n */\ncache.expire = function (key, ttl) {\n  var ms = ttl || 0\n  var record = this._lookup[key]\n  if (!record) return this\n  if (typeof ms === 'string') ms = toMS(ttl)\n  if (typeof ms !== 'number') throw new TypeError('Expiration time must be a string or number.')\n  clearTimeout(record.timeout)\n  record.timeout = setTimeout(this.delete.bind(this, record.key), ms)\n  record.expires = Number(new Date()) + ms\n  return this\n}\n\n/**\n * Deletes all items from the cache.\n * @return {Receptacle}\n */\ncache.clear = function () {\n  for (var i = this.items.length; i--;) this.delete(this.items[i].key)\n  return this\n}\n\n/**\n * Fixes serialization issues in polyfilled environments.\n * Ensures non-cyclical serialized object.\n */\ncache.toJSON = function () {\n  var items = new Array(this.items.length)\n  var item\n  for (var i = items.length; i--;) {\n    item = this.items[i]\n    items[i] = {\n      key: item.key,\n      meta: item.meta,\n      value: item.value,\n      expires: item.expires,\n      refresh: item.refresh\n    }\n  }\n\n  return {\n    id: this.id,\n    max: isFinite(this.max) ? this.max : undefined,\n    lastModified: this.lastModified,\n    items: items\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}