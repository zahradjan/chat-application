{"ast":null,"code":"'use strict';\n\nconst {\n  importer\n} = require('ipfs-unixfs-importer');\n\nconst {\n  normaliseInput\n} = require('ipfs-core-utils/src/files/normalise-input/index');\n\nconst {\n  parseChunkerString\n} = require('./utils');\n\nconst {\n  pipe\n} = require('it-pipe');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst mergeOptions = require('merge-options').bind({\n  ignoreUndefined: true\n});\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-unixfs-importer').ImportResult} ImportResult\n */\n\n/**\n * @typedef {Object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../../types').Preload} preload\n * @property {import('ipfs-core-types/src/root').ShardingOptions} [options]\n *\n * @param {Context} context\n */\n\n\nmodule.exports = _ref => {\n  let {\n    repo,\n    preload,\n    options\n  } = _ref;\n  const isShardingEnabled = options && options.sharding;\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"addAll\"]}\n   */\n\n  async function* addAll(source) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const opts = mergeOptions({\n      shardSplitThreshold: isShardingEnabled ? 1000 : Infinity,\n      strategy: 'balanced'\n    }, options, { ...parseChunkerString(options.chunker)\n    }); // CID v0 is for multihashes encoded with sha2-256\n\n    if (opts.hashAlg && opts.hashAlg !== 'sha2-256' && opts.cidVersion !== 1) {\n      opts.cidVersion = 1;\n    }\n\n    if (opts.trickle) {\n      opts.strategy = 'trickle';\n    }\n\n    if (opts.strategy === 'trickle') {\n      opts.leafType = 'raw';\n      opts.reduceSingleLeafToSelf = false;\n    }\n\n    if (opts.cidVersion > 0 && opts.rawLeaves === undefined) {\n      // if the cid version is 1 or above, use raw leaves as this is\n      // what go does.\n      opts.rawLeaves = true;\n    }\n\n    if (opts.hashAlg !== undefined && opts.rawLeaves === undefined) {\n      // if a non-default hash alg has been specified, use raw leaves as this is\n      // what go does.\n      opts.rawLeaves = true;\n    }\n\n    delete opts.trickle;\n    /** @type {Record<string, number>} */\n\n    const totals = {};\n\n    if (opts.progress) {\n      const prog = opts.progress;\n      /**\n       * @param {number} bytes\n       * @param {string} path\n       */\n\n      opts.progress = (bytes, path) => {\n        if (!totals[path]) {\n          totals[path] = 0;\n        }\n\n        totals[path] += bytes;\n        prog(totals[path], path);\n      };\n    }\n\n    const iterator = pipe(normaliseInput(source),\n    /**\n     * @param {AsyncIterable<import('ipfs-unixfs-importer').ImportCandidate>} source\n     */\n    source => importer(source, repo.blocks, { ...opts,\n      pin: false\n    }), transformFile(opts), preloadFile(preload, opts), pinFile(repo, opts));\n    const releaseLock = await repo.gcLock.readLock();\n\n    try {\n      for await (const added of iterator) {\n        // do not keep file totals around forever\n        delete totals[added.path];\n        yield added;\n      }\n    } finally {\n      releaseLock();\n    }\n  }\n\n  return withTimeoutOption(addAll);\n};\n/**\n * @param {import('ipfs-core-types/src/root').AddAllOptions} opts\n */\n\n\nfunction transformFile(opts) {\n  /**\n   * @param {AsyncGenerator<ImportResult, void, undefined>} source\n   */\n  async function* transformFile(source) {\n    for await (const file of source) {\n      let cid = file.cid;\n\n      if (opts.cidVersion === 1) {\n        cid = cid.toV1();\n      }\n\n      let path = file.path ? file.path : cid.toString();\n\n      if (opts.wrapWithDirectory && !file.path) {\n        path = '';\n      }\n\n      yield {\n        path,\n        cid: cid,\n        size: file.size,\n        mode: file.unixfs && file.unixfs.mode,\n        mtime: file.unixfs && file.unixfs.mtime\n      };\n    }\n  }\n\n  return transformFile;\n}\n/**\n * @param {(cid: CID) => void} preload\n * @param {import('ipfs-core-types/src/root').AddAllOptions} opts\n */\n\n\nfunction preloadFile(preload, opts) {\n  /**\n   * @param {AsyncGenerator<ImportResult, void, undefined>} source\n   */\n  async function* maybePreloadFile(source) {\n    for await (const file of source) {\n      const isRootFile = !file.path || opts.wrapWithDirectory ? file.path === '' : !file.path.includes('/');\n      const shouldPreload = isRootFile && !opts.onlyHash && opts.preload !== false;\n\n      if (shouldPreload) {\n        preload(file.cid);\n      }\n\n      yield file;\n    }\n  }\n\n  return maybePreloadFile;\n}\n/**\n * @param {import('ipfs-repo').IPFSRepo} repo\n * @param {import('ipfs-core-types/src/root').AddAllOptions} opts\n */\n\n\nfunction pinFile(repo, opts) {\n  /**\n   * @param {AsyncGenerator<ImportResult, void, undefined>} source\n   */\n  async function* maybePinFile(source) {\n    for await (const file of source) {\n      // Pin a file if it is the root dir of a recursive add or the single file\n      // of a direct add.\n      const isRootDir = !(file.path && file.path.includes('/'));\n      const shouldPin = (opts.pin == null ? true : opts.pin) && isRootDir && !opts.onlyHash;\n\n      if (shouldPin) {\n        await repo.pins.pinRecursively(file.cid);\n      }\n\n      yield file;\n    }\n  }\n\n  return maybePinFile;\n}","map":{"version":3,"names":["importer","require","normaliseInput","parseChunkerString","pipe","withTimeoutOption","mergeOptions","bind","ignoreUndefined","module","exports","repo","preload","options","isShardingEnabled","sharding","addAll","source","opts","shardSplitThreshold","Infinity","strategy","chunker","hashAlg","cidVersion","trickle","leafType","reduceSingleLeafToSelf","rawLeaves","undefined","totals","progress","prog","bytes","path","iterator","blocks","pin","transformFile","preloadFile","pinFile","releaseLock","gcLock","readLock","added","file","cid","toV1","toString","wrapWithDirectory","size","mode","unixfs","mtime","maybePreloadFile","isRootFile","includes","shouldPreload","onlyHash","maybePinFile","isRootDir","shouldPin","pins","pinRecursively"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/add-all/index.js"],"sourcesContent":["'use strict'\n\nconst { importer } = require('ipfs-unixfs-importer')\nconst { normaliseInput } = require('ipfs-core-utils/src/files/normalise-input/index')\nconst { parseChunkerString } = require('./utils')\nconst { pipe } = require('it-pipe')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst mergeOptions = require('merge-options').bind({ ignoreUndefined: true })\n\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-unixfs-importer').ImportResult} ImportResult\n */\n\n/**\n * @typedef {Object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../../types').Preload} preload\n * @property {import('ipfs-core-types/src/root').ShardingOptions} [options]\n *\n * @param {Context} context\n */\nmodule.exports = ({ repo, preload, options }) => {\n  const isShardingEnabled = options && options.sharding\n\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"addAll\"]}\n   */\n  async function * addAll (source, options = {}) {\n    const opts = mergeOptions({\n      shardSplitThreshold: isShardingEnabled ? 1000 : Infinity,\n      strategy: 'balanced'\n    }, options, {\n      ...parseChunkerString(options.chunker)\n    })\n\n    // CID v0 is for multihashes encoded with sha2-256\n    if (opts.hashAlg && opts.hashAlg !== 'sha2-256' && opts.cidVersion !== 1) {\n      opts.cidVersion = 1\n    }\n\n    if (opts.trickle) {\n      opts.strategy = 'trickle'\n    }\n\n    if (opts.strategy === 'trickle') {\n      opts.leafType = 'raw'\n      opts.reduceSingleLeafToSelf = false\n    }\n\n    if (opts.cidVersion > 0 && opts.rawLeaves === undefined) {\n      // if the cid version is 1 or above, use raw leaves as this is\n      // what go does.\n      opts.rawLeaves = true\n    }\n\n    if (opts.hashAlg !== undefined && opts.rawLeaves === undefined) {\n      // if a non-default hash alg has been specified, use raw leaves as this is\n      // what go does.\n      opts.rawLeaves = true\n    }\n\n    delete opts.trickle\n\n    /** @type {Record<string, number>} */\n    const totals = {}\n\n    if (opts.progress) {\n      const prog = opts.progress\n\n      /**\n       * @param {number} bytes\n       * @param {string} path\n       */\n      opts.progress = (bytes, path) => {\n        if (!totals[path]) {\n          totals[path] = 0\n        }\n\n        totals[path] += bytes\n\n        prog(totals[path], path)\n      }\n    }\n\n    const iterator = pipe(\n      normaliseInput(source),\n      /**\n       * @param {AsyncIterable<import('ipfs-unixfs-importer').ImportCandidate>} source\n       */\n      source => importer(source, repo.blocks, {\n        ...opts,\n        pin: false\n      }),\n      transformFile(opts),\n      preloadFile(preload, opts),\n      pinFile(repo, opts)\n    )\n\n    const releaseLock = await repo.gcLock.readLock()\n\n    try {\n      for await (const added of iterator) {\n        // do not keep file totals around forever\n        delete totals[added.path]\n\n        yield added\n      }\n    } finally {\n      releaseLock()\n    }\n  }\n\n  return withTimeoutOption(addAll)\n}\n\n/**\n * @param {import('ipfs-core-types/src/root').AddAllOptions} opts\n */\nfunction transformFile (opts) {\n  /**\n   * @param {AsyncGenerator<ImportResult, void, undefined>} source\n   */\n  async function * transformFile (source) {\n    for await (const file of source) {\n      let cid = file.cid\n\n      if (opts.cidVersion === 1) {\n        cid = cid.toV1()\n      }\n\n      let path = file.path ? file.path : cid.toString()\n\n      if (opts.wrapWithDirectory && !file.path) {\n        path = ''\n      }\n\n      yield {\n        path,\n        cid: cid,\n        size: file.size,\n        mode: file.unixfs && file.unixfs.mode,\n        mtime: file.unixfs && file.unixfs.mtime\n      }\n    }\n  }\n\n  return transformFile\n}\n\n/**\n * @param {(cid: CID) => void} preload\n * @param {import('ipfs-core-types/src/root').AddAllOptions} opts\n */\nfunction preloadFile (preload, opts) {\n  /**\n   * @param {AsyncGenerator<ImportResult, void, undefined>} source\n   */\n  async function * maybePreloadFile (source) {\n    for await (const file of source) {\n      const isRootFile = !file.path || opts.wrapWithDirectory\n        ? file.path === ''\n        : !file.path.includes('/')\n\n      const shouldPreload = isRootFile && !opts.onlyHash && opts.preload !== false\n\n      if (shouldPreload) {\n        preload(file.cid)\n      }\n\n      yield file\n    }\n  }\n\n  return maybePreloadFile\n}\n\n/**\n * @param {import('ipfs-repo').IPFSRepo} repo\n * @param {import('ipfs-core-types/src/root').AddAllOptions} opts\n */\nfunction pinFile (repo, opts) {\n  /**\n   * @param {AsyncGenerator<ImportResult, void, undefined>} source\n   */\n  async function * maybePinFile (source) {\n    for await (const file of source) {\n      // Pin a file if it is the root dir of a recursive add or the single file\n      // of a direct add.\n      const isRootDir = !(file.path && file.path.includes('/'))\n      const shouldPin = (opts.pin == null ? true : opts.pin) && isRootDir && !opts.onlyHash\n\n      if (shouldPin) {\n        await repo.pins.pinRecursively(file.cid)\n      }\n\n      yield file\n    }\n  }\n\n  return maybePinFile\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}