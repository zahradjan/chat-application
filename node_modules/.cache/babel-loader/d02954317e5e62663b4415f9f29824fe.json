{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _objectSpread = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _awaitAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _wrapAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nvar _asyncIterator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar _require = require('multiaddr'),\n    Multiaddr = _require.Multiaddr;\n\nvar toCamel = require('../lib/object-to-camel');\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n * @typedef {import('multiformats/cid').CID} CID\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {DHTAPI[\"provide\"]}\n   */\n  function provide(_x) {\n    return _provide.apply(this, arguments);\n  }\n\n  function _provide() {\n    _provide = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(cids) {\n      var options,\n          cidArr,\n          res,\n          _iteratorAbruptCompletion,\n          _didIteratorError,\n          _iteratorError,\n          _iterator,\n          _step,\n          message,\n          _args = arguments;\n\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {\n                recursive: false\n              };\n\n              /** @type {CID[]} */\n              cidArr = Array.isArray(cids) ? cids : [cids];\n              _context.next = 4;\n              return _awaitAsyncGenerator(api.post('dht/provide', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: cidArr.map(function (cid) {\n                    return cid.toString();\n                  })\n                }, options)),\n                headers: options.headers\n              }));\n\n            case 4:\n              res = _context.sent;\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 7;\n              _iterator = _asyncIterator(res.ndjson());\n\n            case 9:\n              _context.next = 11;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 11:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 20;\n                break;\n              }\n\n              message = _step.value;\n              message = toCamel(message);\n\n              if (message.responses) {\n                message.responses = message.responses.map(function (\n                /** @type {{ ID: string, Addrs: string[] }} */\n                _ref) {\n                  var ID = _ref.ID,\n                      Addrs = _ref.Addrs;\n                  return {\n                    id: ID,\n                    addrs: (Addrs || []).map(function (\n                    /** @type {string} **/\n                    a) {\n                      return new Multiaddr(a);\n                    })\n                  };\n                });\n              } else {\n                message.responses = [];\n              }\n\n              _context.next = 17;\n              return message;\n\n            case 17:\n              _iteratorAbruptCompletion = false;\n              _context.next = 9;\n              break;\n\n            case 20:\n              _context.next = 26;\n              break;\n\n            case 22:\n              _context.prev = 22;\n              _context.t0 = _context[\"catch\"](7);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n\n            case 26:\n              _context.prev = 26;\n              _context.prev = 27;\n\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 31;\n                break;\n              }\n\n              _context.next = 31;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 31:\n              _context.prev = 31;\n\n              if (!_didIteratorError) {\n                _context.next = 34;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 34:\n              return _context.finish(31);\n\n            case 35:\n              return _context.finish(26);\n\n            case 36:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[7, 22, 26, 36], [27,, 31, 35]]);\n    }));\n    return _provide.apply(this, arguments);\n  }\n\n  return provide;\n});","map":{"version":3,"names":["require","Multiaddr","toCamel","configure","toUrlSearchParams","module","exports","api","provide","cids","options","recursive","cidArr","Array","isArray","post","signal","searchParams","arg","map","cid","toString","headers","res","ndjson","message","responses","ID","Addrs","id","addrs","a"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-http-client/src/dht/provide.js"],"sourcesContent":["'use strict'\n\nconst { Multiaddr } = require('multiaddr')\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n * @typedef {import('multiformats/cid').CID} CID\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"provide\"]}\n   */\n  async function * provide (cids, options = { recursive: false }) {\n    /** @type {CID[]} */\n    const cidArr = Array.isArray(cids) ? cids : [cids]\n\n    const res = await api.post('dht/provide', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cidArr.map(cid => cid.toString()),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (let message of res.ndjson()) {\n      message = toCamel(message)\n      if (message.responses) {\n        message.responses = message.responses.map((/** @type {{ ID: string, Addrs: string[] }} */ { ID, Addrs }) => ({\n          id: ID,\n          addrs: (Addrs || []).map((/** @type {string} **/ a) => new Multiaddr(a))\n        }))\n      } else {\n        message.responses = []\n      }\n      yield message\n    }\n  }\n\n  return provide\n})\n"],"mappings":"AAAA;;;;;;;;;;;;AAEA,eAAsBA,OAAO,CAAC,WAAD,CAA7B;AAAA,IAAQC,SAAR,YAAQA,SAAR;;AACA,IAAMC,OAAO,GAAGF,OAAO,CAAC,wBAAD,CAAvB;;AACA,IAAMG,SAAS,GAAGH,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMI,iBAAiB,GAAGJ,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;AACA;;;AAEAK,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAAC,UAAAI,GAAG,EAAI;EAChC;AACF;AACA;EAHkC,SAIfC,OAJe;IAAA;EAAA;;EAAA;IAAA,wEAIhC,iBAA0BC,IAA1B;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;;MAAA;QAAA;UAAA;YAAA;cAAgCC,OAAhC,2DAA0C;gBAAEC,SAAS,EAAE;cAAb,CAA1C;;cACE;cACMC,MAFR,GAEiBC,KAAK,CAACC,OAAN,CAAcL,IAAd,IAAsBA,IAAtB,GAA6B,CAACA,IAAD,CAF9C;cAAA;cAAA,4BAIoBF,GAAG,CAACQ,IAAJ,CAAS,aAAT,EAAwB;gBACxCC,MAAM,EAAEN,OAAO,CAACM,MADwB;gBAExCC,YAAY,EAAEb,iBAAiB;kBAC7Bc,GAAG,EAAEN,MAAM,CAACO,GAAP,CAAW,UAAAC,GAAG;oBAAA,OAAIA,GAAG,CAACC,QAAJ,EAAJ;kBAAA,CAAd;gBADwB,GAE1BX,OAF0B,EAFS;gBAMxCY,OAAO,EAAEZ,OAAO,CAACY;cANuB,CAAxB,CAJpB;;YAAA;cAIQC,GAJR;cAAA;cAAA;cAAA;cAAA,2BAa4BA,GAAG,CAACC,MAAJ,EAb5B;;YAAA;cAAA;cAAA;;YAAA;cAAA;gBAAA;gBAAA;cAAA;;cAaiBC,OAbjB;cAcIA,OAAO,GAAGvB,OAAO,CAACuB,OAAD,CAAjB;;cACA,IAAIA,OAAO,CAACC,SAAZ,EAAuB;gBACrBD,OAAO,CAACC,SAAR,GAAoBD,OAAO,CAACC,SAAR,CAAkBP,GAAlB,CAAsB;gBAAC;gBAAD;kBAAA,IAAkDQ,EAAlD,QAAkDA,EAAlD;kBAAA,IAAsDC,KAAtD,QAAsDA,KAAtD;kBAAA,OAAmE;oBAC3GC,EAAE,EAAEF,EADuG;oBAE3GG,KAAK,EAAE,CAACF,KAAK,IAAI,EAAV,EAAcT,GAAd,CAAkB;oBAAC;oBAAuBY,CAAxB;sBAAA,OAA8B,IAAI9B,SAAJ,CAAc8B,CAAd,CAA9B;oBAAA,CAAlB;kBAFoG,CAAnE;gBAAA,CAAtB,CAApB;cAID,CALD,MAKO;gBACLN,OAAO,CAACC,SAAR,GAAoB,EAApB;cACD;;cAtBL;cAuBI,OAAMD,OAAN;;YAvBJ;cAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;;cAAA;gBAAA;gBAAA;cAAA;;cAAA;cAAA;;YAAA;cAAA;;cAAA;gBAAA;gBAAA;cAAA;;cAAA;;YAAA;cAAA;;YAAA;cAAA;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAJgC;IAAA;EAAA;;EA+BhC,OAAOjB,OAAP;AACD,CAhCyB,CAA1B"},"metadata":{},"sourceType":"script"}