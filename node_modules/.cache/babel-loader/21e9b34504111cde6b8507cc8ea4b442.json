{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar Service = require('../utils/service');\n/**\n * @param {Object} config\n * @param {import('../types').NetworkService} config.network\n * @param {import('peer-id')} config.peerId\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../types').Print} config.print\n * @param {import('../types').Preload} config.preload\n * @param {import('../types').MfsPreload} config.mfsPreload\n * @param {import('./ipns')} config.ipns\n * @param {import('libp2p/src/keychain')} config.keychain\n * @param {import('../types').Options} config.options\n */\n\n\nmodule.exports = function (_ref) {\n  var network = _ref.network,\n      preload = _ref.preload,\n      peerId = _ref.peerId,\n      keychain = _ref.keychain,\n      repo = _ref.repo,\n      ipns = _ref.ipns,\n      mfsPreload = _ref.mfsPreload,\n      print = _ref.print,\n      options = _ref.options;\n\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"start\"]}\n   */\n  var start = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var _yield$Service$start, libp2p;\n\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return Service.start(network, {\n                peerId: peerId,\n                repo: repo,\n                print: print,\n                options: options\n              });\n\n            case 2:\n              _yield$Service$start = _context.sent;\n              libp2p = _yield$Service$start.libp2p;\n              _context.next = 6;\n              return Promise.all([ipns.startOnline({\n                keychain: keychain,\n                libp2p: libp2p,\n                peerId: peerId,\n                repo: repo\n              }), preload.start(), mfsPreload.start()]);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function start() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return start;\n};","map":{"version":3,"names":["Service","require","module","exports","network","preload","peerId","keychain","repo","ipns","mfsPreload","print","options","start","libp2p","Promise","all","startOnline"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/start.js"],"sourcesContent":["'use strict'\n\nconst Service = require('../utils/service')\n\n/**\n * @param {Object} config\n * @param {import('../types').NetworkService} config.network\n * @param {import('peer-id')} config.peerId\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../types').Print} config.print\n * @param {import('../types').Preload} config.preload\n * @param {import('../types').MfsPreload} config.mfsPreload\n * @param {import('./ipns')} config.ipns\n * @param {import('libp2p/src/keychain')} config.keychain\n * @param {import('../types').Options} config.options\n */\nmodule.exports = ({ network, preload, peerId, keychain, repo, ipns, mfsPreload, print, options }) => {\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"start\"]}\n   */\n  const start = async () => {\n    const { libp2p } = await Service.start(network, {\n      peerId,\n      repo,\n      print,\n      options\n    })\n\n    await Promise.all([\n      ipns.startOnline({ keychain, libp2p, peerId, repo }),\n      preload.start(),\n      mfsPreload.start()\n    ])\n  }\n\n  return start\n}\n"],"mappings":"AAAA;;;;;;AAEA,IAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,gBAAoF;EAAA,IAAjFC,OAAiF,QAAjFA,OAAiF;EAAA,IAAxEC,OAAwE,QAAxEA,OAAwE;EAAA,IAA/DC,MAA+D,QAA/DA,MAA+D;EAAA,IAAvDC,QAAuD,QAAvDA,QAAuD;EAAA,IAA7CC,IAA6C,QAA7CA,IAA6C;EAAA,IAAvCC,IAAuC,QAAvCA,IAAuC;EAAA,IAAjCC,UAAiC,QAAjCA,UAAiC;EAAA,IAArBC,KAAqB,QAArBA,KAAqB;EAAA,IAAdC,OAAc,QAAdA,OAAc;;EACnG;AACF;AACA;EACE,IAAMC,KAAK;IAAA,uEAAG;MAAA;;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,OACab,OAAO,CAACa,KAAR,CAAcT,OAAd,EAAuB;gBAC9CE,MAAM,EAANA,MAD8C;gBAE9CE,IAAI,EAAJA,IAF8C;gBAG9CG,KAAK,EAALA,KAH8C;gBAI9CC,OAAO,EAAPA;cAJ8C,CAAvB,CADb;;YAAA;cAAA;cACJE,MADI,wBACJA,MADI;cAAA;cAAA,OAQNC,OAAO,CAACC,GAAR,CAAY,CAChBP,IAAI,CAACQ,WAAL,CAAiB;gBAAEV,QAAQ,EAARA,QAAF;gBAAYO,MAAM,EAANA,MAAZ;gBAAoBR,MAAM,EAANA,MAApB;gBAA4BE,IAAI,EAAJA;cAA5B,CAAjB,CADgB,EAEhBH,OAAO,CAACQ,KAAR,EAFgB,EAGhBH,UAAU,CAACG,KAAX,EAHgB,CAAZ,CARM;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAH;;IAAA,gBAALA,KAAK;MAAA;IAAA;EAAA,GAAX;;EAeA,OAAOA,KAAP;AACD,CApBD"},"metadata":{},"sourceType":"script"}