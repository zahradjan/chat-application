{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _inherits = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar io = require('orbit-db-io');\n\nvar Buffer = require('safe-buffer/').Buffer;\n\nvar AccessController = require('./access-controller-interface');\n\nvar type = 'legacy-ipfs';\n\nvar LegacyIPFSAccessController = /*#__PURE__*/function (_AccessController) {\n  _inherits(LegacyIPFSAccessController, _AccessController);\n\n  var _super = _createSuper(LegacyIPFSAccessController);\n\n  function LegacyIPFSAccessController(ipfs, options) {\n    var _this;\n\n    _classCallCheck(this, LegacyIPFSAccessController);\n\n    _this = _super.call(this);\n    _this._ipfs = ipfs;\n    _this._write = Array.from(options.write || []);\n    return _this;\n  } // Returns the type of the access controller\n\n\n  _createClass(LegacyIPFSAccessController, [{\n    key: \"write\",\n    get: // Return a Set of keys that have `access` capability\n    function get() {\n      return this._write;\n    }\n  }, {\n    key: \"canAppend\",\n    value: function () {\n      var _canAppend = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(entry, identityProvider) {\n        var publicKey;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // Allow if access list contain the writer's publicKey or is '*'\n                publicKey = entry.key;\n\n                if (!(this.write.includes(publicKey) || this.write.includes('*'))) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", true);\n\n              case 3:\n                return _context.abrupt(\"return\", false);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function canAppend(_x, _x2) {\n        return _canAppend.apply(this, arguments);\n      }\n\n      return canAppend;\n    }()\n  }, {\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(address) {\n        var access;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // Transform '/ipfs/QmPFtHi3cmfZerxtH9ySLdzpg1yFhocYDZgEZywdUXHxFU'\n                // to 'QmPFtHi3cmfZerxtH9ySLdzpg1yFhocYDZgEZywdUXHxFU'\n                if (address.indexOf('/ipfs') === 0) {\n                  address = address.split('/')[2];\n                }\n\n                _context2.prev = 1;\n                _context2.next = 4;\n                return io.read(this._ipfs, address);\n\n              case 4:\n                access = _context2.sent;\n                this._write = access.write;\n                _context2.next = 11;\n                break;\n\n              case 8:\n                _context2.prev = 8;\n                _context2.t0 = _context2[\"catch\"](1);\n                console.log('LegacyIPFSAccessController.load ERROR:', _context2.t0);\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[1, 8]]);\n      }));\n\n      function load(_x3) {\n        return _load.apply(this, arguments);\n      }\n\n      return load;\n    }()\n  }, {\n    key: \"save\",\n    value: function () {\n      var _save = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(options) {\n        var cid, access;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                access = {\n                  admin: [],\n                  write: this.write,\n                  read: []\n                };\n                _context3.prev = 1;\n                _context3.next = 4;\n                return io.write(this._ipfs, 'raw', Buffer.from(JSON.stringify(access, null, 2)), {\n                  format: 'dag-pb'\n                });\n\n              case 4:\n                cid = _context3.sent;\n                _context3.next = 10;\n                break;\n\n              case 7:\n                _context3.prev = 7;\n                _context3.t0 = _context3[\"catch\"](1);\n                console.log('LegacyIPFSAccessController.save ERROR:', _context3.t0);\n\n              case 10:\n                return _context3.abrupt(\"return\", {\n                  address: cid,\n                  skipManifest: true\n                });\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[1, 7]]);\n      }));\n\n      function save(_x4) {\n        return _save.apply(this, arguments);\n      }\n\n      return save;\n    }()\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return type;\n    }\n  }, {\n    key: \"create\",\n    value: function () {\n      var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(orbitdb) {\n        var options,\n            _args4 = arguments;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                options = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};\n                options = _objectSpread(_objectSpread({}, options), {\n                  write: options.write || [orbitdb.identity.publicKey]\n                });\n                return _context4.abrupt(\"return\", new LegacyIPFSAccessController(orbitdb._ipfs, options));\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function create(_x5) {\n        return _create.apply(this, arguments);\n      }\n\n      return create;\n    }()\n  }]);\n\n  return LegacyIPFSAccessController;\n}(AccessController);\n\nmodule.exports = LegacyIPFSAccessController;","map":{"version":3,"names":["io","require","Buffer","AccessController","type","LegacyIPFSAccessController","ipfs","options","_ipfs","_write","Array","from","write","entry","identityProvider","publicKey","key","includes","address","indexOf","split","read","access","console","log","admin","JSON","stringify","format","cid","skipManifest","orbitdb","identity","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/orbit-db-access-controllers/src/legacy-ipfs-access-controller.js"],"sourcesContent":["'use strict'\nconst io = require('orbit-db-io')\nconst Buffer = require('safe-buffer/').Buffer\nconst AccessController = require('./access-controller-interface')\nconst type = 'legacy-ipfs'\n\nclass LegacyIPFSAccessController extends AccessController {\n  constructor (ipfs, options) {\n    super()\n    this._ipfs = ipfs\n    this._write = Array.from(options.write || [])\n  }\n\n  // Returns the type of the access controller\n  static get type () { return type }\n\n  // Return a Set of keys that have `access` capability\n  get write () {\n    return this._write\n  }\n\n  async canAppend (entry, identityProvider) {\n    // Allow if access list contain the writer's publicKey or is '*'\n    const publicKey = entry.key\n    if (this.write.includes(publicKey) ||\n      this.write.includes('*')) {\n      return true\n    }\n    return false\n  }\n\n  async load (address) {\n    // Transform '/ipfs/QmPFtHi3cmfZerxtH9ySLdzpg1yFhocYDZgEZywdUXHxFU'\n    // to 'QmPFtHi3cmfZerxtH9ySLdzpg1yFhocYDZgEZywdUXHxFU'\n    if (address.indexOf('/ipfs') === 0) { address = address.split('/')[2] }\n\n    try {\n      const access = await io.read(this._ipfs, address)\n      this._write = access.write\n    } catch (e) {\n      console.log('LegacyIPFSAccessController.load ERROR:', e)\n    }\n  }\n\n  async save (options) {\n    let cid\n    const access = { admin: [], write: this.write, read: [] }\n    try {\n      cid = await io.write(this._ipfs, 'raw', Buffer.from(JSON.stringify(access, null, 2)), { format: 'dag-pb' })\n    } catch (e) {\n      console.log('LegacyIPFSAccessController.save ERROR:', e)\n    }\n    // return the manifest data\n    return { address: cid, skipManifest: true }\n  }\n\n  static async create (orbitdb, options = {}) {\n    options = { ...options, ...{ write: options.write || [orbitdb.identity.publicKey] } }\n    return new LegacyIPFSAccessController(orbitdb._ipfs, options)\n  }\n}\n\nmodule.exports = LegacyIPFSAccessController\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}