{"ast":null,"code":"import diff from 'hyperdiff';\nimport EventEmitter from 'events';\nimport clone from 'lodash.clonedeep';\nimport Connection from './connection.js';\nimport encoding from './encoding.js';\nimport * as directConnection from './direct-connection-handler.js';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nconst DEFAULT_OPTIONS = {\n  pollInterval: 1000\n};\nlet index = 0;\nexport default class PubSubRoom extends EventEmitter {\n  constructor(libp2p, topic, options) {\n    super();\n    this._libp2p = libp2p.libp2p || libp2p;\n    this._topic = topic;\n    this._options = Object.assign({}, clone(DEFAULT_OPTIONS), clone(options));\n    this._peers = [];\n    this._connections = {};\n    this._handleDirectMessage = this._handleDirectMessage.bind(this);\n    this._handleMessage = this._onMessage.bind(this);\n\n    if (!this._libp2p.pubsub) {\n      throw new Error('pubsub has not been configured');\n    }\n\n    this._interval = setInterval(this._pollPeers.bind(this), this._options.pollInterval);\n    directConnection.handle(libp2p);\n    directConnection.emitter.on(this._topic, this._handleDirectMessage);\n\n    this._libp2p.pubsub.subscribe(this._topic);\n\n    this._libp2p.pubsub.addEventListener('message', this._handleMessage);\n\n    this._idx = index++;\n  }\n\n  getPeers() {\n    return this._peers.slice(0);\n  }\n\n  hasPeer(peer) {\n    return Boolean(this._peers.find(p => p.toString() === peer.toString()));\n  }\n\n  async leave() {\n    clearInterval(this._interval);\n    Object.keys(this._connections).forEach(peer => {\n      this._connections[peer].stop();\n    });\n    directConnection.emitter.removeListener(this._topic, this._handleDirectMessage); // directConnection.unhandle(this._libp2p)\n\n    await this._libp2p.pubsub.unsubscribe(this._topic);\n\n    this._libp2p.pubsub.removeEventListener('message', this._handleMessage);\n  }\n\n  async broadcast(_message) {\n    const message = encoding(_message);\n    await this._libp2p.pubsub.publish(this._topic, message);\n  }\n\n  sendTo(peer, message) {\n    let conn = this._connections[peer];\n\n    if (!conn) {\n      conn = new Connection(peer, this._libp2p, this);\n      conn.on('error', err => this.emit('error', err));\n      this._connections[peer] = conn;\n      conn.once('disconnect', () => {\n        delete this._connections[peer];\n        this._peers = this._peers.filter(p => p.toString() !== peer.toString());\n        this.emit('peer left', peer);\n      });\n    } // We should use the same sequence number generation as js-libp2p-floosub does:\n    // const seqno = Uint8Array.from(utils.randomSeqno())\n    // Until we figure out a good way to bring in the js-libp2p-floosub's randomSeqno\n    // generator, let's use 0 as the sequence number for all private messages\n\n\n    const seqno = 0n;\n    const msg = {\n      to: peer,\n      from: this._libp2p.peerId.toString(),\n      data: uint8ArrayToString(uint8ArrayFromString(message), 'hex'),\n      seqno: seqno.toString(),\n      topic: this._topic\n    };\n    conn.push(uint8ArrayFromString(JSON.stringify(msg)));\n  }\n\n  async _pollPeers() {\n    const newPeers = (await this._libp2p.pubsub.getSubscribers(this._topic)).sort();\n\n    if (this._emitChanges(newPeers)) {\n      this._peers = newPeers;\n    }\n  }\n\n  _emitChanges(newPeers) {\n    const differences = diff(this._peers.map(p => p.toString()), newPeers.map(p => p.toString()));\n    differences.added.forEach(peer => this.emit('peer joined', peer));\n    differences.removed.forEach(peer => this.emit('peer left', peer));\n    return differences.added.length > 0 || differences.removed.length > 0;\n  }\n\n  _onMessage(event) {\n    const message = event.detail;\n\n    if (message.topic === this._topic) {\n      this.emit('message', message);\n    }\n  }\n\n  _handleDirectMessage(message) {\n    if (message.to.toString() !== this._libp2p.peerId.toString()) {\n      return;\n    }\n\n    if (message.topic === this._topic) {\n      const m = Object.assign({}, message);\n      delete m.to;\n      this.emit('message', m);\n    }\n  }\n\n}","map":{"version":3,"names":["diff","EventEmitter","clone","Connection","encoding","directConnection","fromString","uint8ArrayFromString","toString","uint8ArrayToString","DEFAULT_OPTIONS","pollInterval","index","PubSubRoom","constructor","libp2p","topic","options","_libp2p","_topic","_options","Object","assign","_peers","_connections","_handleDirectMessage","bind","_handleMessage","_onMessage","pubsub","Error","_interval","setInterval","_pollPeers","handle","emitter","on","subscribe","addEventListener","_idx","getPeers","slice","hasPeer","peer","Boolean","find","p","leave","clearInterval","keys","forEach","stop","removeListener","unsubscribe","removeEventListener","broadcast","_message","message","publish","sendTo","conn","err","emit","once","filter","seqno","msg","to","from","peerId","data","push","JSON","stringify","newPeers","getSubscribers","sort","_emitChanges","differences","map","added","removed","length","event","detail","m"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-pubsub-room/src/index.js"],"sourcesContent":["import diff from 'hyperdiff'\nimport EventEmitter from 'events'\nimport clone from 'lodash.clonedeep'\nimport Connection from './connection.js'\nimport encoding from './encoding.js'\nimport * as directConnection from './direct-connection-handler.js'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\n\nconst DEFAULT_OPTIONS = {\n  pollInterval: 1000\n}\n\nlet index = 0\n\nexport default class PubSubRoom extends EventEmitter {\n  constructor (libp2p, topic, options) {\n    super()\n    this._libp2p = libp2p.libp2p || libp2p\n    this._topic = topic\n    this._options = Object.assign({}, clone(DEFAULT_OPTIONS), clone(options))\n    this._peers = []\n    this._connections = {}\n\n    this._handleDirectMessage = this._handleDirectMessage.bind(this)\n    this._handleMessage = this._onMessage.bind(this)\n\n    if (!this._libp2p.pubsub) {\n      throw new Error('pubsub has not been configured')\n    }\n\n    this._interval = setInterval(\n      this._pollPeers.bind(this),\n      this._options.pollInterval\n    )\n\n    directConnection.handle(libp2p)\n    directConnection.emitter.on(this._topic, this._handleDirectMessage)\n\n    this._libp2p.pubsub.subscribe(this._topic)\n    this._libp2p.pubsub.addEventListener('message', this._handleMessage)\n\n    this._idx = index++\n  }\n\n  getPeers () {\n    return this._peers.slice(0)\n  }\n\n  hasPeer (peer) {\n    return Boolean(this._peers.find(p => p.toString() === peer.toString()))\n  }\n\n  async leave () {\n    clearInterval(this._interval)\n    Object.keys(this._connections).forEach((peer) => {\n      this._connections[peer].stop()\n    })\n    directConnection.emitter.removeListener(this._topic, this._handleDirectMessage)\n    // directConnection.unhandle(this._libp2p)\n    await this._libp2p.pubsub.unsubscribe(this._topic)\n    this._libp2p.pubsub.removeEventListener('message', this._handleMessage)\n  }\n\n  async broadcast (_message) {\n    const message = encoding(_message)\n    await this._libp2p.pubsub.publish(this._topic, message)\n  }\n\n  sendTo (peer, message) {\n    let conn = this._connections[peer]\n    if (!conn) {\n      conn = new Connection(peer, this._libp2p, this)\n      conn.on('error', (err) => this.emit('error', err))\n      this._connections[peer] = conn\n\n      conn.once('disconnect', () => {\n        delete this._connections[peer]\n        this._peers = this._peers.filter((p) => p.toString() !== peer.toString())\n        this.emit('peer left', peer)\n      })\n    }\n\n    // We should use the same sequence number generation as js-libp2p-floosub does:\n    // const seqno = Uint8Array.from(utils.randomSeqno())\n\n    // Until we figure out a good way to bring in the js-libp2p-floosub's randomSeqno\n    // generator, let's use 0 as the sequence number for all private messages\n    const seqno = 0n\n\n    const msg = {\n      to: peer,\n      from: this._libp2p.peerId.toString(),\n      data: uint8ArrayToString(uint8ArrayFromString(message), 'hex'),\n      seqno: seqno.toString(),\n      topic: this._topic\n    }\n\n    conn.push(uint8ArrayFromString(JSON.stringify(msg)))\n  }\n\n  async _pollPeers () {\n    const newPeers = (await this._libp2p.pubsub.getSubscribers(this._topic)).sort()\n\n    if (this._emitChanges(newPeers)) {\n      this._peers = newPeers\n    }\n  }\n\n  _emitChanges (newPeers) {\n    const differences = diff(this._peers.map(p => p.toString()), newPeers.map(p => p.toString()))\n\n    differences.added.forEach((peer) => this.emit('peer joined', peer))\n    differences.removed.forEach((peer) => this.emit('peer left', peer))\n\n    return differences.added.length > 0 || differences.removed.length > 0\n  }\n\n  _onMessage (event) {\n    const message = event.detail\n\n    if (message.topic === this._topic) {\n      this.emit('message', message)\n    }\n  }\n\n  _handleDirectMessage (message) {\n    if (message.to.toString() !== this._libp2p.peerId.toString()) {\n      return\n    }\n\n    if (message.topic === this._topic) {\n      const m = Object.assign({}, message)\n      delete m.to\n      this.emit('message', m)\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}