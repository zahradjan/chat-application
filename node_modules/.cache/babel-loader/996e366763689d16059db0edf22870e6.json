{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _inherits = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar debug = require('debug');\n\nvar log = Object.assign(debug('libp2p:peer-store:proto-book'), {\n  error: debug('libp2p:peer-store:proto-book:err')\n});\n\nvar errcode = require('err-code');\n\nvar _require = require('uint8arrays/equals'),\n    uint8ArrayEquals = _require.equals;\n\nvar PeerId = require('peer-id');\n\nvar Book = require('./book');\n\nvar _require2 = require('../errors'),\n    ERR_INVALID_PARAMETERS = _require2.codes.ERR_INVALID_PARAMETERS;\n/**\n * @typedef {import('./')} PeerStore\n */\n\n/**\n * @extends {Book}\n *\n * @fires MetadataBook#change:metadata\n */\n\n\nvar MetadataBook = /*#__PURE__*/function (_Book) {\n  _inherits(MetadataBook, _Book);\n\n  var _super = _createSuper(MetadataBook);\n\n  /**\n   * The MetadataBook is responsible for keeping the known supported\n   * protocols of a peer.\n   *\n   * @class\n   * @param {PeerStore} peerStore\n   */\n  function MetadataBook(peerStore) {\n    var _this;\n\n    _classCallCheck(this, MetadataBook);\n\n    /**\n     * PeerStore Event emitter, used by the MetadataBook to emit:\n     * \"change:metadata\" - emitted when the known metadata of a peer change.\n     */\n    _this = _super.call(this, {\n      peerStore: peerStore,\n      eventName: 'change:metadata',\n      eventProperty: 'metadata'\n    });\n    /**\n     * Map known peers to their known protocols.\n     *\n     * @type {Map<string, Map<string, Uint8Array>>}\n     */\n\n    _this.data = new Map();\n    return _this;\n  }\n  /**\n   * Set metadata key and value of a provided peer.\n   *\n   * @override\n   * @param {PeerId} peerId\n   * @param {string} key - metadata key\n   * @param {Uint8Array} value - metadata value\n   * @returns {MetadataBook}\n   */\n  // @ts-ignore override with more then the parameters expected in Book\n\n\n  _createClass(MetadataBook, [{\n    key: \"set\",\n    value: function set(peerId, key, value) {\n      if (!PeerId.isPeerId(peerId)) {\n        log.error('peerId must be an instance of peer-id to store data');\n        throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n      }\n\n      if (typeof key !== 'string' || !(value instanceof Uint8Array)) {\n        log.error('valid key and value must be provided to store data');\n        throw errcode(new Error('valid key and value must be provided'), ERR_INVALID_PARAMETERS);\n      }\n\n      this._setValue(peerId, key, value);\n\n      return this;\n    }\n    /**\n     * Set data into the datastructure\n     *\n     * @override\n     * @param {PeerId} peerId\n     * @param {string} key\n     * @param {Uint8Array} value\n     */\n\n  }, {\n    key: \"_setValue\",\n    value: function _setValue(peerId, key, value) {\n      var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n          _ref$emit = _ref.emit,\n          emit = _ref$emit === void 0 ? true : _ref$emit;\n\n      var id = peerId.toB58String();\n      var rec = this.data.get(id) || new Map();\n      var recMap = rec.get(key); // Already exists and is equal\n\n      if (recMap && uint8ArrayEquals(value, recMap)) {\n        log(\"the metadata provided to store is equal to the already stored for \".concat(id, \" on \").concat(key));\n        return;\n      }\n\n      rec.set(key, value);\n      this.data.set(id, rec);\n      emit && this._emit(peerId, key);\n    }\n    /**\n     * Get the known data of a provided peer.\n     *\n     * @param {PeerId} peerId\n     * @returns {Map<string, Uint8Array>|undefined}\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(peerId) {\n      if (!PeerId.isPeerId(peerId)) {\n        throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n      }\n\n      return this.data.get(peerId.toB58String());\n    }\n    /**\n     * Get specific metadata value, if it exists\n     *\n     * @param {PeerId} peerId\n     * @param {string} key\n     * @returns {Uint8Array | undefined}\n     */\n\n  }, {\n    key: \"getValue\",\n    value: function getValue(peerId, key) {\n      if (!PeerId.isPeerId(peerId)) {\n        throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n      }\n\n      var rec = this.data.get(peerId.toB58String());\n      return rec && rec.get(key);\n    }\n    /**\n     * Deletes the provided peer from the book.\n     *\n     * @param {PeerId} peerId\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(peerId) {\n      if (!PeerId.isPeerId(peerId)) {\n        throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n      }\n\n      if (!this.data.delete(peerId.toB58String())) {\n        return false;\n      }\n\n      this._emit(peerId);\n\n      return true;\n    }\n    /**\n     * Deletes the provided peer metadata key from the book.\n     *\n     * @param {PeerId} peerId\n     * @param {string} key\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"deleteValue\",\n    value: function deleteValue(peerId, key) {\n      if (!PeerId.isPeerId(peerId)) {\n        throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n      }\n\n      var rec = this.data.get(peerId.toB58String());\n\n      if (!rec || !rec.delete(key)) {\n        return false;\n      }\n\n      this._emit(peerId, key);\n\n      return true;\n    }\n  }]);\n\n  return MetadataBook;\n}(Book);\n\nmodule.exports = MetadataBook;","map":{"version":3,"names":["debug","require","log","Object","assign","error","errcode","uint8ArrayEquals","equals","PeerId","Book","ERR_INVALID_PARAMETERS","codes","MetadataBook","peerStore","eventName","eventProperty","data","Map","peerId","key","value","isPeerId","Error","Uint8Array","_setValue","emit","id","toB58String","rec","get","recMap","set","_emit","delete","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p/src/peer-store/metadata-book.js"],"sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = Object.assign(debug('libp2p:peer-store:proto-book'), {\n  error: debug('libp2p:peer-store:proto-book:err')\n})\nconst errcode = require('err-code')\nconst { equals: uint8ArrayEquals } = require('uint8arrays/equals')\n\nconst PeerId = require('peer-id')\n\nconst Book = require('./book')\n\nconst {\n  codes: { ERR_INVALID_PARAMETERS }\n} = require('../errors')\n\n/**\n * @typedef {import('./')} PeerStore\n */\n\n/**\n * @extends {Book}\n *\n * @fires MetadataBook#change:metadata\n */\nclass MetadataBook extends Book {\n  /**\n   * The MetadataBook is responsible for keeping the known supported\n   * protocols of a peer.\n   *\n   * @class\n   * @param {PeerStore} peerStore\n   */\n  constructor (peerStore) {\n    /**\n     * PeerStore Event emitter, used by the MetadataBook to emit:\n     * \"change:metadata\" - emitted when the known metadata of a peer change.\n     */\n    super({\n      peerStore,\n      eventName: 'change:metadata',\n      eventProperty: 'metadata'\n    })\n\n    /**\n     * Map known peers to their known protocols.\n     *\n     * @type {Map<string, Map<string, Uint8Array>>}\n     */\n    this.data = new Map()\n  }\n\n  /**\n   * Set metadata key and value of a provided peer.\n   *\n   * @override\n   * @param {PeerId} peerId\n   * @param {string} key - metadata key\n   * @param {Uint8Array} value - metadata value\n   * @returns {MetadataBook}\n   */\n  // @ts-ignore override with more then the parameters expected in Book\n  set (peerId, key, value) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data')\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    if (typeof key !== 'string' || !(value instanceof Uint8Array)) {\n      log.error('valid key and value must be provided to store data')\n      throw errcode(new Error('valid key and value must be provided'), ERR_INVALID_PARAMETERS)\n    }\n\n    this._setValue(peerId, key, value)\n\n    return this\n  }\n\n  /**\n   * Set data into the datastructure\n   *\n   * @override\n   * @param {PeerId} peerId\n   * @param {string} key\n   * @param {Uint8Array} value\n   */\n  _setValue (peerId, key, value, { emit = true } = {}) {\n    const id = peerId.toB58String()\n    const rec = this.data.get(id) || new Map()\n    const recMap = rec.get(key)\n\n    // Already exists and is equal\n    if (recMap && uint8ArrayEquals(value, recMap)) {\n      log(`the metadata provided to store is equal to the already stored for ${id} on ${key}`)\n      return\n    }\n\n    rec.set(key, value)\n    this.data.set(id, rec)\n\n    emit && this._emit(peerId, key)\n  }\n\n  /**\n   * Get the known data of a provided peer.\n   *\n   * @param {PeerId} peerId\n   * @returns {Map<string, Uint8Array>|undefined}\n   */\n  get (peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    return this.data.get(peerId.toB58String())\n  }\n\n  /**\n   * Get specific metadata value, if it exists\n   *\n   * @param {PeerId} peerId\n   * @param {string} key\n   * @returns {Uint8Array | undefined}\n   */\n  getValue (peerId, key) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    const rec = this.data.get(peerId.toB58String())\n    return rec && rec.get(key)\n  }\n\n  /**\n   * Deletes the provided peer from the book.\n   *\n   * @param {PeerId} peerId\n   * @returns {boolean}\n   */\n  delete (peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    if (!this.data.delete(peerId.toB58String())) {\n      return false\n    }\n\n    this._emit(peerId)\n\n    return true\n  }\n\n  /**\n   * Deletes the provided peer metadata key from the book.\n   *\n   * @param {PeerId} peerId\n   * @param {string} key\n   * @returns {boolean}\n   */\n  deleteValue (peerId, key) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    const rec = this.data.get(peerId.toB58String())\n\n    if (!rec || !rec.delete(key)) {\n      return false\n    }\n\n    this._emit(peerId, key)\n\n    return true\n  }\n}\n\nmodule.exports = MetadataBook\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}