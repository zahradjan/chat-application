{"ast":null,"code":"'use strict';\n\nconst errcode = require('err-code');\n\nconst {\n  toString: uint8ArrayToString\n} = require('uint8arrays/to-string');\n/**\n * Select the best record out of the given records.\n *\n * @param {import('libp2p-interfaces/src/types').DhtSelectors} selectors\n * @param {Uint8Array} k\n * @param {Array<Uint8Array>} records\n */\n\n\nconst bestRecord = (selectors, k, records) => {\n  if (records.length === 0) {\n    const errMsg = 'No records given';\n    throw errcode(new Error(errMsg), 'ERR_NO_RECORDS_RECEIVED');\n  }\n\n  const kStr = uint8ArrayToString(k);\n  const parts = kStr.split('/');\n\n  if (parts.length < 3) {\n    const errMsg = 'Record key does not have a selector function';\n    throw errcode(new Error(errMsg), 'ERR_NO_SELECTOR_FUNCTION_FOR_RECORD_KEY');\n  }\n\n  const selector = selectors[parts[1].toString()];\n\n  if (!selector) {\n    const errMsg = `Unrecognized key prefix: ${parts[1]}`;\n    throw errcode(new Error(errMsg), 'ERR_UNRECOGNIZED_KEY_PREFIX');\n  }\n\n  if (records.length === 1) {\n    return 0;\n  }\n\n  return selector(k, records);\n};\n\nmodule.exports = {\n  bestRecord: bestRecord,\n  selectors: require('./selectors')\n};","map":{"version":3,"names":["errcode","require","toString","uint8ArrayToString","bestRecord","selectors","k","records","length","errMsg","Error","kStr","parts","split","selector","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-record/src/selection.js"],"sourcesContent":["'use strict'\n\nconst errcode = require('err-code')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\n\n/**\n * Select the best record out of the given records.\n *\n * @param {import('libp2p-interfaces/src/types').DhtSelectors} selectors\n * @param {Uint8Array} k\n * @param {Array<Uint8Array>} records\n */\nconst bestRecord = (selectors, k, records) => {\n  if (records.length === 0) {\n    const errMsg = 'No records given'\n\n    throw errcode(new Error(errMsg), 'ERR_NO_RECORDS_RECEIVED')\n  }\n\n  const kStr = uint8ArrayToString(k)\n  const parts = kStr.split('/')\n\n  if (parts.length < 3) {\n    const errMsg = 'Record key does not have a selector function'\n\n    throw errcode(new Error(errMsg), 'ERR_NO_SELECTOR_FUNCTION_FOR_RECORD_KEY')\n  }\n\n  const selector = selectors[parts[1].toString()]\n\n  if (!selector) {\n    const errMsg = `Unrecognized key prefix: ${parts[1]}`\n\n    throw errcode(new Error(errMsg), 'ERR_UNRECOGNIZED_KEY_PREFIX')\n  }\n\n  if (records.length === 1) {\n    return 0\n  }\n\n  return selector(k, records)\n}\n\nmodule.exports = {\n  bestRecord: bestRecord,\n  selectors: require('./selectors')\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAM;EAAEC,QAAQ,EAAEC;AAAZ,IAAmCF,OAAO,CAAC,uBAAD,CAAhD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMG,UAAU,GAAG,CAACC,SAAD,EAAYC,CAAZ,EAAeC,OAAf,KAA2B;EAC5C,IAAIA,OAAO,CAACC,MAAR,KAAmB,CAAvB,EAA0B;IACxB,MAAMC,MAAM,GAAG,kBAAf;IAEA,MAAMT,OAAO,CAAC,IAAIU,KAAJ,CAAUD,MAAV,CAAD,EAAoB,yBAApB,CAAb;EACD;;EAED,MAAME,IAAI,GAAGR,kBAAkB,CAACG,CAAD,CAA/B;EACA,MAAMM,KAAK,GAAGD,IAAI,CAACE,KAAL,CAAW,GAAX,CAAd;;EAEA,IAAID,KAAK,CAACJ,MAAN,GAAe,CAAnB,EAAsB;IACpB,MAAMC,MAAM,GAAG,8CAAf;IAEA,MAAMT,OAAO,CAAC,IAAIU,KAAJ,CAAUD,MAAV,CAAD,EAAoB,yCAApB,CAAb;EACD;;EAED,MAAMK,QAAQ,GAAGT,SAAS,CAACO,KAAK,CAAC,CAAD,CAAL,CAASV,QAAT,EAAD,CAA1B;;EAEA,IAAI,CAACY,QAAL,EAAe;IACb,MAAML,MAAM,GAAI,4BAA2BG,KAAK,CAAC,CAAD,CAAI,EAApD;IAEA,MAAMZ,OAAO,CAAC,IAAIU,KAAJ,CAAUD,MAAV,CAAD,EAAoB,6BAApB,CAAb;EACD;;EAED,IAAIF,OAAO,CAACC,MAAR,KAAmB,CAAvB,EAA0B;IACxB,OAAO,CAAP;EACD;;EAED,OAAOM,QAAQ,CAACR,CAAD,EAAIC,OAAJ,CAAf;AACD,CA7BD;;AA+BAQ,MAAM,CAACC,OAAP,GAAiB;EACfZ,UAAU,EAAEA,UADG;EAEfC,SAAS,EAAEJ,OAAO,CAAC,aAAD;AAFH,CAAjB"},"metadata":{},"sourceType":"script"}