{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _slicedToArray = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar _createForOfIteratorHelper = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('../../types').NetworkService} config.network\n */\n\n\nmodule.exports = function (_ref) {\n  var network = _ref.network;\n\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API[\"peers\"]}\n   */\n  function peers() {\n    return _peers.apply(this, arguments);\n  }\n\n  function _peers() {\n    _peers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var options,\n          _yield$network$use,\n          libp2p,\n          peers,\n          _iterator,\n          _step,\n          _step$value,\n          peerId,\n          connections,\n          _iterator2,\n          _step2,\n          connection,\n          peer,\n          _args = arguments;\n\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              _context.next = 3;\n              return network.use(options);\n\n            case 3:\n              _yield$network$use = _context.sent;\n              libp2p = _yield$network$use.libp2p;\n              peers = [];\n              _iterator = _createForOfIteratorHelper(libp2p.connections);\n\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  _step$value = _slicedToArray(_step.value, 2), peerId = _step$value[0], connections = _step$value[1];\n                  _iterator2 = _createForOfIteratorHelper(connections);\n\n                  try {\n                    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                      connection = _step2.value;\n\n                      /** @type {import('ipfs-core-types/src/swarm').PeersResult} */\n                      peer = {\n                        addr: connection.remoteAddr,\n                        peer: peerId\n                      };\n\n                      if (options.verbose || options.direction) {\n                        peer.direction = connection.stat.direction;\n                      }\n\n                      if (options.verbose) {\n                        peer.muxer = connection.stat.multiplexer;\n                        peer.latency = 'n/a';\n                        peer.streams = []; // TODO: get this from libp2p\n                      }\n\n                      peers.push(peer);\n                    }\n                  } catch (err) {\n                    _iterator2.e(err);\n                  } finally {\n                    _iterator2.f();\n                  }\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n\n              return _context.abrupt(\"return\", peers);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _peers.apply(this, arguments);\n  }\n\n  return withTimeoutOption(peers);\n};","map":{"version":3,"names":["withTimeoutOption","require","module","exports","network","peers","options","use","libp2p","connections","peerId","connection","peer","addr","remoteAddr","verbose","direction","stat","muxer","multiplexer","latency","streams","push"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/swarm/peers.js"],"sourcesContent":["'use strict'\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @param {Object} config\n * @param {import('../../types').NetworkService} config.network\n */\nmodule.exports = ({ network }) => {\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API[\"peers\"]}\n   */\n  async function peers (options = {}) {\n    const { libp2p } = await network.use(options)\n    const peers = []\n\n    for (const [peerId, connections] of libp2p.connections) {\n      for (const connection of connections) {\n        /** @type {import('ipfs-core-types/src/swarm').PeersResult} */\n        const peer = {\n          addr: connection.remoteAddr,\n          peer: peerId\n        }\n\n        if (options.verbose || options.direction) {\n          peer.direction = connection.stat.direction\n        }\n\n        if (options.verbose) {\n          peer.muxer = connection.stat.multiplexer\n          peer.latency = 'n/a'\n          peer.streams = [] // TODO: get this from libp2p\n        }\n\n        peers.push(peer)\n      }\n    }\n\n    return peers\n  }\n\n  return withTimeoutOption(peers)\n}\n"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,iBAAiB,GAAGC,OAAO,CAAC,yCAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,gBAAiB;EAAA,IAAdC,OAAc,QAAdA,OAAc;;EAChC;AACF;AACA;EAHkC,SAIjBC,KAJiB;IAAA;EAAA;;EAAA;IAAA,oEAIhC;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;;MAAA;QAAA;UAAA;YAAA;cAAsBC,OAAtB,2DAAgC,EAAhC;cAAA;cAAA,OAC2BF,OAAO,CAACG,GAAR,CAAYD,OAAZ,CAD3B;;YAAA;cAAA;cACUE,MADV,sBACUA,MADV;cAEQH,KAFR,GAEgB,EAFhB;cAAA,uCAIsCG,MAAM,CAACC,WAJ7C;;cAAA;gBAIE,oDAAwD;kBAAA,8CAA5CC,MAA4C,mBAApCD,WAAoC;kBAAA,wCAC7BA,WAD6B;;kBAAA;oBACtD,uDAAsC;sBAA3BE,UAA2B;;sBACpC;sBACMC,IAF8B,GAEvB;wBACXC,IAAI,EAAEF,UAAU,CAACG,UADN;wBAEXF,IAAI,EAAEF;sBAFK,CAFuB;;sBAOpC,IAAIJ,OAAO,CAACS,OAAR,IAAmBT,OAAO,CAACU,SAA/B,EAA0C;wBACxCJ,IAAI,CAACI,SAAL,GAAiBL,UAAU,CAACM,IAAX,CAAgBD,SAAjC;sBACD;;sBAED,IAAIV,OAAO,CAACS,OAAZ,EAAqB;wBACnBH,IAAI,CAACM,KAAL,GAAaP,UAAU,CAACM,IAAX,CAAgBE,WAA7B;wBACAP,IAAI,CAACQ,OAAL,GAAe,KAAf;wBACAR,IAAI,CAACS,OAAL,GAAe,EAAf,CAHmB,CAGD;sBACnB;;sBAEDhB,KAAK,CAACiB,IAAN,CAAWV,IAAX;oBACD;kBAnBqD;oBAAA;kBAAA;oBAAA;kBAAA;gBAoBvD;cAxBH;gBAAA;cAAA;gBAAA;cAAA;;cAAA,iCA0BSP,KA1BT;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAJgC;IAAA;EAAA;;EAiChC,OAAOL,iBAAiB,CAACK,KAAD,CAAxB;AACD,CAlCD"},"metadata":{},"sourceType":"script"}