{"ast":null,"code":"'use strict';\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst first = require('it-first');\n\nconst last = require('it-last');\n\nconst {\n  resolve\n} = require('../../utils');\n\nconst errCode = require('err-code');\n/**\n * @param {Object} config\n * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\n\n\nmodule.exports = _ref => {\n  let {\n    codecs,\n    repo,\n    preload\n  } = _ref;\n\n  /**\n   * @type {import('ipfs-core-types/src/dag').API[\"get\"]}\n   */\n  const get = async function get(cid) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (options.preload !== false) {\n      preload(cid);\n    }\n\n    if (options.path) {\n      const entry = options.localResolve ? await first(resolve(cid, options.path, codecs, repo, options)) : await last(resolve(cid, options.path, codecs, repo, options));\n      /** @type {import('ipfs-core-types/src/dag').GetResult} - first and last will return undefined when empty */\n\n      const result = entry;\n\n      if (!result) {\n        throw errCode(new Error('Not found'), 'ERR_NOT_FOUND');\n      }\n\n      return result;\n    }\n\n    const codec = await codecs.getCodec(cid.code);\n    const block = await repo.blocks.get(cid, options);\n    const node = codec.decode(block);\n    return {\n      value: node,\n      remainderPath: ''\n    };\n  };\n\n  return withTimeoutOption(get);\n};","map":{"version":3,"names":["withTimeoutOption","require","first","last","resolve","errCode","module","exports","codecs","repo","preload","get","cid","options","path","entry","localResolve","result","Error","codec","getCodec","code","block","blocks","node","decode","value","remainderPath"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/dag/get.js"],"sourcesContent":["'use strict'\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst first = require('it-first')\nconst last = require('it-last')\nconst { resolve } = require('../../utils')\nconst errCode = require('err-code')\n\n/**\n * @param {Object} config\n * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nmodule.exports = ({ codecs, repo, preload }) => {\n  /**\n   * @type {import('ipfs-core-types/src/dag').API[\"get\"]}\n   */\n  const get = async function get (cid, options = {}) {\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    if (options.path) {\n      const entry = options.localResolve\n        ? await first(resolve(cid, options.path, codecs, repo, options))\n        : await last(resolve(cid, options.path, codecs, repo, options))\n      /** @type {import('ipfs-core-types/src/dag').GetResult} - first and last will return undefined when empty */\n      const result = (entry)\n\n      if (!result) {\n        throw errCode(new Error('Not found'), 'ERR_NOT_FOUND')\n      }\n\n      return result\n    }\n\n    const codec = await codecs.getCodec(cid.code)\n    const block = await repo.blocks.get(cid, options)\n    const node = codec.decode(block)\n\n    return {\n      value: node,\n      remainderPath: ''\n    }\n  }\n\n  return withTimeoutOption(get)\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,yCAAD,CAAjC;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,UAAD,CAArB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,SAAD,CAApB;;AACA,MAAM;EAAEG;AAAF,IAAcH,OAAO,CAAC,aAAD,CAA3B;;AACA,MAAMI,OAAO,GAAGJ,OAAO,CAAC,UAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACAK,MAAM,CAACC,OAAP,GAAiB,QAA+B;EAAA,IAA9B;IAAEC,MAAF;IAAUC,IAAV;IAAgBC;EAAhB,CAA8B;;EAC9C;AACF;AACA;EACE,MAAMC,GAAG,GAAG,eAAeA,GAAf,CAAoBC,GAApB,EAAuC;IAAA,IAAdC,OAAc,uEAAJ,EAAI;;IACjD,IAAIA,OAAO,CAACH,OAAR,KAAoB,KAAxB,EAA+B;MAC7BA,OAAO,CAACE,GAAD,CAAP;IACD;;IAED,IAAIC,OAAO,CAACC,IAAZ,EAAkB;MAChB,MAAMC,KAAK,GAAGF,OAAO,CAACG,YAAR,GACV,MAAMd,KAAK,CAACE,OAAO,CAACQ,GAAD,EAAMC,OAAO,CAACC,IAAd,EAAoBN,MAApB,EAA4BC,IAA5B,EAAkCI,OAAlC,CAAR,CADD,GAEV,MAAMV,IAAI,CAACC,OAAO,CAACQ,GAAD,EAAMC,OAAO,CAACC,IAAd,EAAoBN,MAApB,EAA4BC,IAA5B,EAAkCI,OAAlC,CAAR,CAFd;MAGA;;MACA,MAAMI,MAAM,GAAIF,KAAhB;;MAEA,IAAI,CAACE,MAAL,EAAa;QACX,MAAMZ,OAAO,CAAC,IAAIa,KAAJ,CAAU,WAAV,CAAD,EAAyB,eAAzB,CAAb;MACD;;MAED,OAAOD,MAAP;IACD;;IAED,MAAME,KAAK,GAAG,MAAMX,MAAM,CAACY,QAAP,CAAgBR,GAAG,CAACS,IAApB,CAApB;IACA,MAAMC,KAAK,GAAG,MAAMb,IAAI,CAACc,MAAL,CAAYZ,GAAZ,CAAgBC,GAAhB,EAAqBC,OAArB,CAApB;IACA,MAAMW,IAAI,GAAGL,KAAK,CAACM,MAAN,CAAaH,KAAb,CAAb;IAEA,OAAO;MACLI,KAAK,EAAEF,IADF;MAELG,aAAa,EAAE;IAFV,CAAP;EAID,CA3BD;;EA6BA,OAAO3B,iBAAiB,CAACW,GAAD,CAAxB;AACD,CAlCD"},"metadata":{},"sourceType":"script"}