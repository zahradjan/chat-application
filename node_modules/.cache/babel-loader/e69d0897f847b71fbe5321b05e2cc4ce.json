{"ast":null,"code":"'use strict';\n\nrequire('node-forge/lib/aes');\n\nconst forge = require('node-forge/lib/forge');\n\nconst {\n  toString: uint8ArrayToString\n} = require('uint8arrays/to-string');\n\nconst {\n  fromString: uint8ArrayFromString\n} = require('uint8arrays/from-string');\n\nmodule.exports = {\n  createCipheriv: (mode, key, iv) => {\n    const cipher2 = forge.cipher.createCipher('AES-CTR', uint8ArrayToString(key, 'ascii'));\n    cipher2.start({\n      iv: uint8ArrayToString(iv, 'ascii')\n    });\n    return {\n      update: data => {\n        cipher2.update(forge.util.createBuffer(uint8ArrayToString(data, 'ascii')));\n        return uint8ArrayFromString(cipher2.output.getBytes(), 'ascii');\n      }\n    };\n  },\n  createDecipheriv: (mode, key, iv) => {\n    const cipher2 = forge.cipher.createDecipher('AES-CTR', uint8ArrayToString(key, 'ascii'));\n    cipher2.start({\n      iv: uint8ArrayToString(iv, 'ascii')\n    });\n    return {\n      update: data => {\n        cipher2.update(forge.util.createBuffer(uint8ArrayToString(data, 'ascii')));\n        return uint8ArrayFromString(cipher2.output.getBytes(), 'ascii');\n      }\n    };\n  }\n};","map":{"version":3,"names":["require","forge","toString","uint8ArrayToString","fromString","uint8ArrayFromString","module","exports","createCipheriv","mode","key","iv","cipher2","cipher","createCipher","start","update","data","util","createBuffer","output","getBytes","createDecipheriv","createDecipher"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-crypto/src/aes/ciphers-browser.js"],"sourcesContent":["'use strict'\n\nrequire('node-forge/lib/aes')\nconst forge = require('node-forge/lib/forge')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\n\nmodule.exports = {\n  createCipheriv: (mode, key, iv) => {\n    const cipher2 = forge.cipher.createCipher('AES-CTR', uint8ArrayToString(key, 'ascii'))\n    cipher2.start({ iv: uint8ArrayToString(iv, 'ascii') })\n    return {\n      update: (data) => {\n        cipher2.update(forge.util.createBuffer(uint8ArrayToString(data, 'ascii')))\n        return uint8ArrayFromString(cipher2.output.getBytes(), 'ascii')\n      }\n    }\n  },\n  createDecipheriv: (mode, key, iv) => {\n    const cipher2 = forge.cipher.createDecipher('AES-CTR', uint8ArrayToString(key, 'ascii'))\n    cipher2.start({ iv: uint8ArrayToString(iv, 'ascii') })\n    return {\n      update: (data) => {\n        cipher2.update(forge.util.createBuffer(uint8ArrayToString(data, 'ascii')))\n        return uint8ArrayFromString(cipher2.output.getBytes(), 'ascii')\n      }\n    }\n  }\n}\n"],"mappings":"AAAA;;AAEAA,OAAO,CAAC,oBAAD,CAAP;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,sBAAD,CAArB;;AACA,MAAM;EAAEE,QAAQ,EAAEC;AAAZ,IAAmCH,OAAO,CAAC,uBAAD,CAAhD;;AACA,MAAM;EAAEI,UAAU,EAAEC;AAAd,IAAuCL,OAAO,CAAC,yBAAD,CAApD;;AAEAM,MAAM,CAACC,OAAP,GAAiB;EACfC,cAAc,EAAE,CAACC,IAAD,EAAOC,GAAP,EAAYC,EAAZ,KAAmB;IACjC,MAAMC,OAAO,GAAGX,KAAK,CAACY,MAAN,CAAaC,YAAb,CAA0B,SAA1B,EAAqCX,kBAAkB,CAACO,GAAD,EAAM,OAAN,CAAvD,CAAhB;IACAE,OAAO,CAACG,KAAR,CAAc;MAAEJ,EAAE,EAAER,kBAAkB,CAACQ,EAAD,EAAK,OAAL;IAAxB,CAAd;IACA,OAAO;MACLK,MAAM,EAAGC,IAAD,IAAU;QAChBL,OAAO,CAACI,MAAR,CAAef,KAAK,CAACiB,IAAN,CAAWC,YAAX,CAAwBhB,kBAAkB,CAACc,IAAD,EAAO,OAAP,CAA1C,CAAf;QACA,OAAOZ,oBAAoB,CAACO,OAAO,CAACQ,MAAR,CAAeC,QAAf,EAAD,EAA4B,OAA5B,CAA3B;MACD;IAJI,CAAP;EAMD,CAVc;EAWfC,gBAAgB,EAAE,CAACb,IAAD,EAAOC,GAAP,EAAYC,EAAZ,KAAmB;IACnC,MAAMC,OAAO,GAAGX,KAAK,CAACY,MAAN,CAAaU,cAAb,CAA4B,SAA5B,EAAuCpB,kBAAkB,CAACO,GAAD,EAAM,OAAN,CAAzD,CAAhB;IACAE,OAAO,CAACG,KAAR,CAAc;MAAEJ,EAAE,EAAER,kBAAkB,CAACQ,EAAD,EAAK,OAAL;IAAxB,CAAd;IACA,OAAO;MACLK,MAAM,EAAGC,IAAD,IAAU;QAChBL,OAAO,CAACI,MAAR,CAAef,KAAK,CAACiB,IAAN,CAAWC,YAAX,CAAwBhB,kBAAkB,CAACc,IAAD,EAAO,OAAP,CAA1C,CAAf;QACA,OAAOZ,oBAAoB,CAACO,OAAO,CAACQ,MAAR,CAAeC,QAAf,EAAD,EAA4B,OAA5B,CAA3B;MACD;IAJI,CAAP;EAMD;AApBc,CAAjB"},"metadata":{},"sourceType":"script"}