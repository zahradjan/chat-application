{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _objectSpread = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nvar _require2 = require('uint8arrays/from-string'),\n    uint8ArrayFromString = _require2.fromString;\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {ObjectAPI[\"get\"]}\n   */\n  function get(_x) {\n    return _get.apply(this, arguments);\n  }\n\n  function _get() {\n    _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(cid) {\n      var options,\n          res,\n          data,\n          _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _context.next = 3;\n              return api.post('object/get', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: \"\".concat(cid instanceof Uint8Array ? CID.decode(cid) : cid),\n                  dataEncoding: 'base64'\n                }, options)),\n                headers: options.headers\n              });\n\n            case 3:\n              res = _context.sent;\n              _context.next = 6;\n              return res.json();\n\n            case 6:\n              data = _context.sent;\n              return _context.abrupt(\"return\", {\n                Data: uint8ArrayFromString(data.Data, 'base64pad'),\n                Links: (data.Links || []).map(function (\n                /** @type {any} */\n                link) {\n                  return {\n                    Name: link.Name,\n                    Hash: CID.parse(link.Hash),\n                    Tsize: link.Size\n                  };\n                })\n              });\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _get.apply(this, arguments);\n  }\n\n  return get;\n});","map":{"version":3,"names":["require","CID","configure","toUrlSearchParams","uint8ArrayFromString","fromString","module","exports","api","get","cid","options","post","signal","searchParams","arg","Uint8Array","decode","dataEncoding","headers","res","json","data","Data","Links","map","link","Name","Hash","parse","Tsize","Size"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-http-client/src/object/get.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectAPI[\"get\"]}\n   */\n  async function get (cid, options = {}) {\n    const res = await api.post('object/get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? CID.decode(cid) : cid}`,\n        dataEncoding: 'base64',\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return {\n      Data: uint8ArrayFromString(data.Data, 'base64pad'),\n      Links: (data.Links || []).map((/** @type {any} */ link) => ({\n        Name: link.Name,\n        Hash: CID.parse(link.Hash),\n        Tsize: link.Size\n      }))\n    }\n  }\n  return get\n})\n"],"mappings":"AAAA;;;;;;;;AAEA,eAAgBA,OAAO,CAAC,kBAAD,CAAvB;AAAA,IAAQC,GAAR,YAAQA,GAAR;;AACA,IAAMC,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;;AACA,gBAA6CA,OAAO,CAAC,yBAAD,CAApD;AAAA,IAAoBI,oBAApB,aAAQC,UAAR;AAEA;AACA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiBL,SAAS,CAAC,UAAAM,GAAG,EAAI;EAChC;AACF;AACA;EAHkC,SAIjBC,GAJiB;IAAA;EAAA;;EAAA;IAAA,kEAIhC,iBAAoBC,GAApB;MAAA;MAAA;MAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAyBC,OAAzB,2DAAmC,EAAnC;cAAA;cAAA,OACoBH,GAAG,CAACI,IAAJ,CAAS,YAAT,EAAuB;gBACvCC,MAAM,EAAEF,OAAO,CAACE,MADuB;gBAEvCC,YAAY,EAAEX,iBAAiB;kBAC7BY,GAAG,YAAKL,GAAG,YAAYM,UAAf,GAA4Bf,GAAG,CAACgB,MAAJ,CAAWP,GAAX,CAA5B,GAA8CA,GAAnD,CAD0B;kBAE7BQ,YAAY,EAAE;gBAFe,GAG1BP,OAH0B,EAFQ;gBAOvCQ,OAAO,EAAER,OAAO,CAACQ;cAPsB,CAAvB,CADpB;;YAAA;cACQC,GADR;cAAA;cAAA,OAUqBA,GAAG,CAACC,IAAJ,EAVrB;;YAAA;cAUQC,IAVR;cAAA,iCAYS;gBACLC,IAAI,EAAEnB,oBAAoB,CAACkB,IAAI,CAACC,IAAN,EAAY,WAAZ,CADrB;gBAELC,KAAK,EAAE,CAACF,IAAI,CAACE,KAAL,IAAc,EAAf,EAAmBC,GAAnB,CAAuB;gBAAC;gBAAmBC,IAApB;kBAAA,OAA8B;oBAC1DC,IAAI,EAAED,IAAI,CAACC,IAD+C;oBAE1DC,IAAI,EAAE3B,GAAG,CAAC4B,KAAJ,CAAUH,IAAI,CAACE,IAAf,CAFoD;oBAG1DE,KAAK,EAAEJ,IAAI,CAACK;kBAH8C,CAA9B;gBAAA,CAAvB;cAFF,CAZT;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAJgC;IAAA;EAAA;;EAyBhC,OAAOtB,GAAP;AACD,CA1ByB,CAA1B"},"metadata":{},"sourceType":"script"}