{"ast":null,"code":"import _classCallCheck from \"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/* eslint-disable no-param-reassign */\nimport * as common from './common';\nimport * as constants from './v4/constants';\nimport { AddressError } from './address-error';\nimport { BigInteger } from 'jsbn';\nimport { sprintf } from 'sprintf-js';\n/**\n * Represents an IPv4 address\n * @class Address4\n * @param {string} address - An IPv4 address string\n */\n\nexport var Address4 = /*#__PURE__*/function () {\n  function Address4(address) {\n    _classCallCheck(this, Address4);\n\n    this.groups = constants.GROUPS;\n    this.parsedAddress = [];\n    this.parsedSubnet = '';\n    this.subnet = '/32';\n    this.subnetMask = 32;\n    this.v4 = true;\n    /**\n     * Returns true if the address is correct, false otherwise\n     * @memberof Address4\n     * @instance\n     * @returns {Boolean}\n     */\n\n    this.isCorrect = common.isCorrect(constants.BITS);\n    /**\n     * Returns true if the given address is in the subnet of the current address\n     * @memberof Address4\n     * @instance\n     * @returns {boolean}\n     */\n\n    this.isInSubnet = common.isInSubnet;\n    this.address = address;\n    var subnet = constants.RE_SUBNET_STRING.exec(address);\n\n    if (subnet) {\n      this.parsedSubnet = subnet[0].replace('/', '');\n      this.subnetMask = parseInt(this.parsedSubnet, 10);\n      this.subnet = \"/\".concat(this.subnetMask);\n\n      if (this.subnetMask < 0 || this.subnetMask > constants.BITS) {\n        throw new AddressError('Invalid subnet mask.');\n      }\n\n      address = address.replace(constants.RE_SUBNET_STRING, '');\n    }\n\n    this.addressMinusSuffix = address;\n    this.parsedAddress = this.parse(address);\n  }\n\n  _createClass(Address4, [{\n    key: \"parse\",\n    value:\n    /*\n     * Parses a v4 address\n     */\n    function parse(address) {\n      var groups = address.split('.');\n\n      if (!address.match(constants.RE_ADDRESS)) {\n        throw new AddressError('Invalid IPv4 address.');\n      }\n\n      return groups;\n    }\n    /**\n     * Returns the correct form of an address\n     * @memberof Address4\n     * @instance\n     * @returns {String}\n     */\n\n  }, {\n    key: \"correctForm\",\n    value: function correctForm() {\n      return this.parsedAddress.map(function (part) {\n        return parseInt(part, 10);\n      }).join('.');\n    }\n    /**\n     * Converts a hex string to an IPv4 address object\n     * @memberof Address4\n     * @static\n     * @param {string} hex - a hex string to convert\n     * @returns {Address4}\n     */\n\n  }, {\n    key: \"toHex\",\n    value:\n    /**\n     * Converts an IPv4 address object to a hex string\n     * @memberof Address4\n     * @instance\n     * @returns {String}\n     */\n    function toHex() {\n      return this.parsedAddress.map(function (part) {\n        return sprintf('%02x', parseInt(part, 10));\n      }).join(':');\n    }\n    /**\n     * Converts an IPv4 address object to an array of bytes\n     * @memberof Address4\n     * @instance\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      return this.parsedAddress.map(function (part) {\n        return parseInt(part, 10);\n      });\n    }\n    /**\n     * Converts an IPv4 address object to an IPv6 address group\n     * @memberof Address4\n     * @instance\n     * @returns {String}\n     */\n\n  }, {\n    key: \"toGroup6\",\n    value: function toGroup6() {\n      var output = [];\n      var i;\n\n      for (i = 0; i < constants.GROUPS; i += 2) {\n        var hex = sprintf('%02x%02x', parseInt(this.parsedAddress[i], 10), parseInt(this.parsedAddress[i + 1], 10));\n        output.push(sprintf('%x', parseInt(hex, 16)));\n      }\n\n      return output.join(':');\n    }\n    /**\n     * Returns the address as a BigInteger\n     * @memberof Address4\n     * @instance\n     * @returns {BigInteger}\n     */\n\n  }, {\n    key: \"bigInteger\",\n    value: function bigInteger() {\n      return new BigInteger(this.parsedAddress.map(function (n) {\n        return sprintf('%02x', parseInt(n, 10));\n      }).join(''), 16);\n    }\n    /**\n     * Helper function getting start address.\n     * @memberof Address4\n     * @instance\n     * @returns {BigInteger}\n     */\n\n  }, {\n    key: \"_startAddress\",\n    value: function _startAddress() {\n      return new BigInteger(this.mask() + '0'.repeat(constants.BITS - this.subnetMask), 2);\n    }\n    /**\n     * The first address in the range given by this address' subnet.\n     * Often referred to as the Network Address.\n     * @memberof Address4\n     * @instance\n     * @returns {Address4}\n     */\n\n  }, {\n    key: \"startAddress\",\n    value: function startAddress() {\n      return Address4.fromBigInteger(this._startAddress());\n    }\n    /**\n     * The first host address in the range given by this address's subnet ie\n     * the first address after the Network Address\n     * @memberof Address4\n     * @instance\n     * @returns {Address4}\n     */\n\n  }, {\n    key: \"startAddressExclusive\",\n    value: function startAddressExclusive() {\n      var adjust = new BigInteger('1');\n      return Address4.fromBigInteger(this._startAddress().add(adjust));\n    }\n    /**\n     * Helper function getting end address.\n     * @memberof Address4\n     * @instance\n     * @returns {BigInteger}\n     */\n\n  }, {\n    key: \"_endAddress\",\n    value: function _endAddress() {\n      return new BigInteger(this.mask() + '1'.repeat(constants.BITS - this.subnetMask), 2);\n    }\n    /**\n     * The last address in the range given by this address' subnet\n     * Often referred to as the Broadcast\n     * @memberof Address4\n     * @instance\n     * @returns {Address4}\n     */\n\n  }, {\n    key: \"endAddress\",\n    value: function endAddress() {\n      return Address4.fromBigInteger(this._endAddress());\n    }\n    /**\n     * The last host address in the range given by this address's subnet ie\n     * the last address prior to the Broadcast Address\n     * @memberof Address4\n     * @instance\n     * @returns {Address4}\n     */\n\n  }, {\n    key: \"endAddressExclusive\",\n    value: function endAddressExclusive() {\n      var adjust = new BigInteger('1');\n      return Address4.fromBigInteger(this._endAddress().subtract(adjust));\n    }\n    /**\n     * Converts a BigInteger to a v4 address object\n     * @memberof Address4\n     * @static\n     * @param {BigInteger} bigInteger - a BigInteger to convert\n     * @returns {Address4}\n     */\n\n  }, {\n    key: \"mask\",\n    value:\n    /**\n     * Returns the first n bits of the address, defaulting to the\n     * subnet mask\n     * @memberof Address4\n     * @instance\n     * @returns {String}\n     */\n    function mask(_mask) {\n      if (_mask === undefined) {\n        _mask = this.subnetMask;\n      }\n\n      return this.getBitsBase2(0, _mask);\n    }\n    /**\n     * Returns the bits in the given range as a base-2 string\n     * @memberof Address4\n     * @instance\n     * @returns {string}\n     */\n\n  }, {\n    key: \"getBitsBase2\",\n    value: function getBitsBase2(start, end) {\n      return this.binaryZeroPad().slice(start, end);\n    }\n    /**\n     * Return the reversed ip6.arpa form of the address\n     * @memberof Address4\n     * @param {Object} options\n     * @param {boolean} options.omitSuffix - omit the \"in-addr.arpa\" suffix\n     * @instance\n     * @returns {String}\n     */\n\n  }, {\n    key: \"reverseForm\",\n    value: function reverseForm(options) {\n      if (!options) {\n        options = {};\n      }\n\n      var reversed = this.correctForm().split('.').reverse().join('.');\n\n      if (options.omitSuffix) {\n        return reversed;\n      }\n\n      return sprintf('%s.in-addr.arpa.', reversed);\n    }\n    /**\n     * Returns true if the given address is a multicast address\n     * @memberof Address4\n     * @instance\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isMulticast\",\n    value: function isMulticast() {\n      return this.isInSubnet(new Address4('224.0.0.0/4'));\n    }\n    /**\n     * Returns a zero-padded base-2 string representation of the address\n     * @memberof Address4\n     * @instance\n     * @returns {string}\n     */\n\n  }, {\n    key: \"binaryZeroPad\",\n    value: function binaryZeroPad() {\n      return this.bigInteger().toString(2).padStart(constants.BITS, '0');\n    }\n    /**\n     * Groups an IPv4 address for inclusion at the end of an IPv6 address\n     * @returns {String}\n     */\n\n  }, {\n    key: \"groupForV6\",\n    value: function groupForV6() {\n      var segments = this.parsedAddress;\n      return this.address.replace(constants.RE_ADDRESS, sprintf('<span class=\"hover-group group-v4 group-6\">%s</span>.<span class=\"hover-group group-v4 group-7\">%s</span>', segments.slice(0, 2).join('.'), segments.slice(2, 4).join('.')));\n    }\n  }], [{\n    key: \"isValid\",\n    value: function isValid(address) {\n      try {\n        // eslint-disable-next-line no-new\n        new Address4(address);\n        return true;\n      } catch (e) {\n        return false;\n      }\n    }\n  }, {\n    key: \"fromHex\",\n    value: function fromHex(hex) {\n      var padded = hex.replace(/:/g, '').padStart(8, '0');\n      var groups = [];\n      var i;\n\n      for (i = 0; i < 8; i += 2) {\n        var h = padded.slice(i, i + 2);\n        groups.push(parseInt(h, 16));\n      }\n\n      return new Address4(groups.join('.'));\n    }\n    /**\n     * Converts an integer into a IPv4 address object\n     * @memberof Address4\n     * @static\n     * @param {integer} integer - a number to convert\n     * @returns {Address4}\n     */\n\n  }, {\n    key: \"fromInteger\",\n    value: function fromInteger(integer) {\n      return Address4.fromHex(integer.toString(16));\n    }\n    /**\n     * Return an address from in-addr.arpa form\n     * @memberof Address4\n     * @static\n     * @param {string} arpaFormAddress - an 'in-addr.arpa' form ipv4 address\n     * @returns {Adress4}\n     * @example\n     * var address = Address4.fromArpa(42.2.0.192.in-addr.arpa.)\n     * address.correctForm(); // '192.0.2.42'\n     */\n\n  }, {\n    key: \"fromArpa\",\n    value: function fromArpa(arpaFormAddress) {\n      // remove ending \".in-addr.arpa.\" or just \".\"\n      var leader = arpaFormAddress.replace(/(\\.in-addr\\.arpa)?\\.$/, '');\n      var address = leader.split('.').reverse().join('.');\n      return new Address4(address);\n    }\n  }, {\n    key: \"fromBigInteger\",\n    value: function fromBigInteger(bigInteger) {\n      return Address4.fromInteger(parseInt(bigInteger.toString(), 10));\n    }\n  }]);\n\n  return Address4;\n}();","map":{"version":3,"mappings":"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","names":["common","constants","AddressError","BigInteger","sprintf","Address4","address","GROUPS","isCorrect","BITS","isInSubnet","subnet","RE_SUBNET_STRING","exec","parsedSubnet","replace","subnetMask","parseInt","addressMinusSuffix","parsedAddress","parse","groups","split","match","RE_ADDRESS","map","part","join","output","i","hex","push","n","mask","repeat","fromBigInteger","_startAddress","adjust","add","_endAddress","subtract","undefined","getBitsBase2","start","end","binaryZeroPad","slice","options","reversed","correctForm","reverse","omitSuffix","bigInteger","toString","padStart","segments","e","padded","h","integer","fromHex","arpaFormAddress","leader","fromInteger"],"sourceRoot":"","sources":["../../../lib/ipv4.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}