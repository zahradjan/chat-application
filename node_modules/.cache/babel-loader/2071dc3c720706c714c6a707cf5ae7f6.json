{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar Envelope = require('./envelope');\n\nvar PeerRecord = require('./peer-record');\n/**\n * @typedef {import('../')} Libp2p\n */\n\n/**\n * Create (or update if existing) self peer record and store it in the AddressBook.\n *\n * @param {Libp2p} libp2p\n * @returns {Promise<void>}\n */\n\n\nfunction updateSelfPeerRecord(_x) {\n  return _updateSelfPeerRecord.apply(this, arguments);\n}\n\nfunction _updateSelfPeerRecord() {\n  _updateSelfPeerRecord = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(libp2p) {\n    var peerRecord, envelope;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            peerRecord = new PeerRecord({\n              peerId: libp2p.peerId,\n              multiaddrs: libp2p.multiaddrs\n            });\n            _context.next = 3;\n            return Envelope.seal(peerRecord, libp2p.peerId);\n\n          case 3:\n            envelope = _context.sent;\n            libp2p.peerStore.addressBook.consumePeerRecord(envelope);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _updateSelfPeerRecord.apply(this, arguments);\n}\n\nmodule.exports.updateSelfPeerRecord = updateSelfPeerRecord;","map":{"version":3,"names":["Envelope","require","PeerRecord","updateSelfPeerRecord","libp2p","peerRecord","peerId","multiaddrs","seal","envelope","peerStore","addressBook","consumePeerRecord","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p/src/record/utils.js"],"sourcesContent":["'use strict'\n\nconst Envelope = require('./envelope')\nconst PeerRecord = require('./peer-record')\n\n/**\n * @typedef {import('../')} Libp2p\n */\n\n/**\n * Create (or update if existing) self peer record and store it in the AddressBook.\n *\n * @param {Libp2p} libp2p\n * @returns {Promise<void>}\n */\nasync function updateSelfPeerRecord (libp2p) {\n  const peerRecord = new PeerRecord({\n    peerId: libp2p.peerId,\n    multiaddrs: libp2p.multiaddrs\n  })\n  const envelope = await Envelope.seal(peerRecord, libp2p.peerId)\n  libp2p.peerStore.addressBook.consumePeerRecord(envelope)\n}\n\nmodule.exports.updateSelfPeerRecord = updateSelfPeerRecord\n"],"mappings":"AAAA;;;;;;AAEA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAxB;;AACA,IAAMC,UAAU,GAAGD,OAAO,CAAC,eAAD,CAA1B;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;SACeE,oB;;;;;qFAAf,iBAAqCC,MAArC;IAAA;IAAA;MAAA;QAAA;UAAA;YACQC,UADR,GACqB,IAAIH,UAAJ,CAAe;cAChCI,MAAM,EAAEF,MAAM,CAACE,MADiB;cAEhCC,UAAU,EAAEH,MAAM,CAACG;YAFa,CAAf,CADrB;YAAA;YAAA,OAKyBP,QAAQ,CAACQ,IAAT,CAAcH,UAAd,EAA0BD,MAAM,CAACE,MAAjC,CALzB;;UAAA;YAKQG,QALR;YAMEL,MAAM,CAACM,SAAP,CAAiBC,WAAjB,CAA6BC,iBAA7B,CAA+CH,QAA/C;;UANF;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AASAI,MAAM,CAACC,OAAP,CAAeX,oBAAf,GAAsCA,oBAAtC"},"metadata":{},"sourceType":"script"}