{"ast":null,"code":"/*eslint-disable*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\"); // Common aliases\n\n\nvar $Reader = $protobuf.Reader,\n    $Writer = $protobuf.Writer,\n    $util = $protobuf.util; // Exported root namespace\n\nvar $root = $protobuf.roots[\"libp2p-peer-record\"] || ($protobuf.roots[\"libp2p-peer-record\"] = {});\n\n$root.PeerRecord = function () {\n  /**\n   * Properties of a PeerRecord.\n   * @exports IPeerRecord\n   * @interface IPeerRecord\n   * @property {Uint8Array|null} [peerId] PeerRecord peerId\n   * @property {number|null} [seq] PeerRecord seq\n   * @property {Array.<PeerRecord.IAddressInfo>|null} [addresses] PeerRecord addresses\n   */\n\n  /**\n   * Constructs a new PeerRecord.\n   * @exports PeerRecord\n   * @classdesc Represents a PeerRecord.\n   * @implements IPeerRecord\n   * @constructor\n   * @param {IPeerRecord=} [p] Properties to set\n   */\n  function PeerRecord(p) {\n    this.addresses = [];\n    if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n  }\n  /**\n   * PeerRecord peerId.\n   * @member {Uint8Array} peerId\n   * @memberof PeerRecord\n   * @instance\n   */\n\n\n  PeerRecord.prototype.peerId = $util.newBuffer([]);\n  /**\n   * PeerRecord seq.\n   * @member {number} seq\n   * @memberof PeerRecord\n   * @instance\n   */\n\n  PeerRecord.prototype.seq = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * PeerRecord addresses.\n   * @member {Array.<PeerRecord.IAddressInfo>} addresses\n   * @memberof PeerRecord\n   * @instance\n   */\n\n  PeerRecord.prototype.addresses = $util.emptyArray;\n  /**\n   * Encodes the specified PeerRecord message. Does not implicitly {@link PeerRecord.verify|verify} messages.\n   * @function encode\n   * @memberof PeerRecord\n   * @static\n   * @param {IPeerRecord} m PeerRecord message or plain object to encode\n   * @param {$protobuf.Writer} [w] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n  PeerRecord.encode = function encode(m, w) {\n    if (!w) w = $Writer.create();\n    if (m.peerId != null && Object.hasOwnProperty.call(m, \"peerId\")) w.uint32(10).bytes(m.peerId);\n    if (m.seq != null && Object.hasOwnProperty.call(m, \"seq\")) w.uint32(16).uint64(m.seq);\n\n    if (m.addresses != null && m.addresses.length) {\n      for (var i = 0; i < m.addresses.length; ++i) $root.PeerRecord.AddressInfo.encode(m.addresses[i], w.uint32(26).fork()).ldelim();\n    }\n\n    return w;\n  };\n  /**\n   * Decodes a PeerRecord message from the specified reader or buffer.\n   * @function decode\n   * @memberof PeerRecord\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n   * @param {number} [l] Message length if known beforehand\n   * @returns {PeerRecord} PeerRecord\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  PeerRecord.decode = function decode(r, l) {\n    if (!(r instanceof $Reader)) r = $Reader.create(r);\n    var c = l === undefined ? r.len : r.pos + l,\n        m = new $root.PeerRecord();\n\n    while (r.pos < c) {\n      var t = r.uint32();\n\n      switch (t >>> 3) {\n        case 1:\n          m.peerId = r.bytes();\n          break;\n\n        case 2:\n          m.seq = r.uint64();\n          break;\n\n        case 3:\n          if (!(m.addresses && m.addresses.length)) m.addresses = [];\n          m.addresses.push($root.PeerRecord.AddressInfo.decode(r, r.uint32()));\n          break;\n\n        default:\n          r.skipType(t & 7);\n          break;\n      }\n    }\n\n    return m;\n  };\n  /**\n   * Creates a PeerRecord message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof PeerRecord\n   * @static\n   * @param {Object.<string,*>} d Plain object\n   * @returns {PeerRecord} PeerRecord\n   */\n\n\n  PeerRecord.fromObject = function fromObject(d) {\n    if (d instanceof $root.PeerRecord) return d;\n    var m = new $root.PeerRecord();\n\n    if (d.peerId != null) {\n      if (typeof d.peerId === \"string\") $util.base64.decode(d.peerId, m.peerId = $util.newBuffer($util.base64.length(d.peerId)), 0);else if (d.peerId.length) m.peerId = d.peerId;\n    }\n\n    if (d.seq != null) {\n      if ($util.Long) (m.seq = $util.Long.fromValue(d.seq)).unsigned = true;else if (typeof d.seq === \"string\") m.seq = parseInt(d.seq, 10);else if (typeof d.seq === \"number\") m.seq = d.seq;else if (typeof d.seq === \"object\") m.seq = new $util.LongBits(d.seq.low >>> 0, d.seq.high >>> 0).toNumber(true);\n    }\n\n    if (d.addresses) {\n      if (!Array.isArray(d.addresses)) throw TypeError(\".PeerRecord.addresses: array expected\");\n      m.addresses = [];\n\n      for (var i = 0; i < d.addresses.length; ++i) {\n        if (typeof d.addresses[i] !== \"object\") throw TypeError(\".PeerRecord.addresses: object expected\");\n        m.addresses[i] = $root.PeerRecord.AddressInfo.fromObject(d.addresses[i]);\n      }\n    }\n\n    return m;\n  };\n  /**\n   * Creates a plain object from a PeerRecord message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof PeerRecord\n   * @static\n   * @param {PeerRecord} m PeerRecord\n   * @param {$protobuf.IConversionOptions} [o] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  PeerRecord.toObject = function toObject(m, o) {\n    if (!o) o = {};\n    var d = {};\n\n    if (o.arrays || o.defaults) {\n      d.addresses = [];\n    }\n\n    if (o.defaults) {\n      if (o.bytes === String) d.peerId = \"\";else {\n        d.peerId = [];\n        if (o.bytes !== Array) d.peerId = $util.newBuffer(d.peerId);\n      }\n\n      if ($util.Long) {\n        var n = new $util.Long(0, 0, true);\n        d.seq = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n      } else d.seq = o.longs === String ? \"0\" : 0;\n    }\n\n    if (m.peerId != null && m.hasOwnProperty(\"peerId\")) {\n      d.peerId = o.bytes === String ? $util.base64.encode(m.peerId, 0, m.peerId.length) : o.bytes === Array ? Array.prototype.slice.call(m.peerId) : m.peerId;\n    }\n\n    if (m.seq != null && m.hasOwnProperty(\"seq\")) {\n      if (typeof m.seq === \"number\") d.seq = o.longs === String ? String(m.seq) : m.seq;else d.seq = o.longs === String ? $util.Long.prototype.toString.call(m.seq) : o.longs === Number ? new $util.LongBits(m.seq.low >>> 0, m.seq.high >>> 0).toNumber(true) : m.seq;\n    }\n\n    if (m.addresses && m.addresses.length) {\n      d.addresses = [];\n\n      for (var j = 0; j < m.addresses.length; ++j) {\n        d.addresses[j] = $root.PeerRecord.AddressInfo.toObject(m.addresses[j], o);\n      }\n    }\n\n    return d;\n  };\n  /**\n   * Converts this PeerRecord to JSON.\n   * @function toJSON\n   * @memberof PeerRecord\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  PeerRecord.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  PeerRecord.AddressInfo = function () {\n    /**\n     * Properties of an AddressInfo.\n     * @memberof PeerRecord\n     * @interface IAddressInfo\n     * @property {Uint8Array|null} [multiaddr] AddressInfo multiaddr\n     */\n\n    /**\n     * Constructs a new AddressInfo.\n     * @memberof PeerRecord\n     * @classdesc Represents an AddressInfo.\n     * @implements IAddressInfo\n     * @constructor\n     * @param {PeerRecord.IAddressInfo=} [p] Properties to set\n     */\n    function AddressInfo(p) {\n      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n    }\n    /**\n     * AddressInfo multiaddr.\n     * @member {Uint8Array} multiaddr\n     * @memberof PeerRecord.AddressInfo\n     * @instance\n     */\n\n\n    AddressInfo.prototype.multiaddr = $util.newBuffer([]);\n    /**\n     * Encodes the specified AddressInfo message. Does not implicitly {@link PeerRecord.AddressInfo.verify|verify} messages.\n     * @function encode\n     * @memberof PeerRecord.AddressInfo\n     * @static\n     * @param {PeerRecord.IAddressInfo} m AddressInfo message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n    AddressInfo.encode = function encode(m, w) {\n      if (!w) w = $Writer.create();\n      if (m.multiaddr != null && Object.hasOwnProperty.call(m, \"multiaddr\")) w.uint32(10).bytes(m.multiaddr);\n      return w;\n    };\n    /**\n     * Decodes an AddressInfo message from the specified reader or buffer.\n     * @function decode\n     * @memberof PeerRecord.AddressInfo\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {PeerRecord.AddressInfo} AddressInfo\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    AddressInfo.decode = function decode(r, l) {\n      if (!(r instanceof $Reader)) r = $Reader.create(r);\n      var c = l === undefined ? r.len : r.pos + l,\n          m = new $root.PeerRecord.AddressInfo();\n\n      while (r.pos < c) {\n        var t = r.uint32();\n\n        switch (t >>> 3) {\n          case 1:\n            m.multiaddr = r.bytes();\n            break;\n\n          default:\n            r.skipType(t & 7);\n            break;\n        }\n      }\n\n      return m;\n    };\n    /**\n     * Creates an AddressInfo message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof PeerRecord.AddressInfo\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {PeerRecord.AddressInfo} AddressInfo\n     */\n\n\n    AddressInfo.fromObject = function fromObject(d) {\n      if (d instanceof $root.PeerRecord.AddressInfo) return d;\n      var m = new $root.PeerRecord.AddressInfo();\n\n      if (d.multiaddr != null) {\n        if (typeof d.multiaddr === \"string\") $util.base64.decode(d.multiaddr, m.multiaddr = $util.newBuffer($util.base64.length(d.multiaddr)), 0);else if (d.multiaddr.length) m.multiaddr = d.multiaddr;\n      }\n\n      return m;\n    };\n    /**\n     * Creates a plain object from an AddressInfo message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof PeerRecord.AddressInfo\n     * @static\n     * @param {PeerRecord.AddressInfo} m AddressInfo\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    AddressInfo.toObject = function toObject(m, o) {\n      if (!o) o = {};\n      var d = {};\n\n      if (o.defaults) {\n        if (o.bytes === String) d.multiaddr = \"\";else {\n          d.multiaddr = [];\n          if (o.bytes !== Array) d.multiaddr = $util.newBuffer(d.multiaddr);\n        }\n      }\n\n      if (m.multiaddr != null && m.hasOwnProperty(\"multiaddr\")) {\n        d.multiaddr = o.bytes === String ? $util.base64.encode(m.multiaddr, 0, m.multiaddr.length) : o.bytes === Array ? Array.prototype.slice.call(m.multiaddr) : m.multiaddr;\n      }\n\n      return d;\n    };\n    /**\n     * Converts this AddressInfo to JSON.\n     * @function toJSON\n     * @memberof PeerRecord.AddressInfo\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    AddressInfo.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return AddressInfo;\n  }();\n\n  return PeerRecord;\n}();\n\nmodule.exports = $root;","map":{"version":3,"names":["$protobuf","require","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","PeerRecord","p","addresses","ks","Object","keys","i","length","prototype","peerId","newBuffer","seq","Long","fromBits","emptyArray","encode","m","w","create","hasOwnProperty","call","uint32","bytes","uint64","AddressInfo","fork","ldelim","decode","r","l","c","undefined","len","pos","t","push","skipType","fromObject","d","base64","fromValue","unsigned","parseInt","LongBits","low","high","toNumber","Array","isArray","TypeError","toObject","o","arrays","defaults","String","n","longs","toString","Number","slice","j","toJSON","constructor","toJSONOptions","multiaddr","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p/src/record/peer-record/peer-record.js"],"sourcesContent":["/*eslint-disable*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"libp2p-peer-record\"] || ($protobuf.roots[\"libp2p-peer-record\"] = {});\n\n$root.PeerRecord = (function() {\n\n    /**\n     * Properties of a PeerRecord.\n     * @exports IPeerRecord\n     * @interface IPeerRecord\n     * @property {Uint8Array|null} [peerId] PeerRecord peerId\n     * @property {number|null} [seq] PeerRecord seq\n     * @property {Array.<PeerRecord.IAddressInfo>|null} [addresses] PeerRecord addresses\n     */\n\n    /**\n     * Constructs a new PeerRecord.\n     * @exports PeerRecord\n     * @classdesc Represents a PeerRecord.\n     * @implements IPeerRecord\n     * @constructor\n     * @param {IPeerRecord=} [p] Properties to set\n     */\n    function PeerRecord(p) {\n        this.addresses = [];\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * PeerRecord peerId.\n     * @member {Uint8Array} peerId\n     * @memberof PeerRecord\n     * @instance\n     */\n    PeerRecord.prototype.peerId = $util.newBuffer([]);\n\n    /**\n     * PeerRecord seq.\n     * @member {number} seq\n     * @memberof PeerRecord\n     * @instance\n     */\n    PeerRecord.prototype.seq = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * PeerRecord addresses.\n     * @member {Array.<PeerRecord.IAddressInfo>} addresses\n     * @memberof PeerRecord\n     * @instance\n     */\n    PeerRecord.prototype.addresses = $util.emptyArray;\n\n    /**\n     * Encodes the specified PeerRecord message. Does not implicitly {@link PeerRecord.verify|verify} messages.\n     * @function encode\n     * @memberof PeerRecord\n     * @static\n     * @param {IPeerRecord} m PeerRecord message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    PeerRecord.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.peerId != null && Object.hasOwnProperty.call(m, \"peerId\"))\n            w.uint32(10).bytes(m.peerId);\n        if (m.seq != null && Object.hasOwnProperty.call(m, \"seq\"))\n            w.uint32(16).uint64(m.seq);\n        if (m.addresses != null && m.addresses.length) {\n            for (var i = 0; i < m.addresses.length; ++i)\n                $root.PeerRecord.AddressInfo.encode(m.addresses[i], w.uint32(26).fork()).ldelim();\n        }\n        return w;\n    };\n\n    /**\n     * Decodes a PeerRecord message from the specified reader or buffer.\n     * @function decode\n     * @memberof PeerRecord\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {PeerRecord} PeerRecord\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    PeerRecord.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.PeerRecord();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.peerId = r.bytes();\n                break;\n            case 2:\n                m.seq = r.uint64();\n                break;\n            case 3:\n                if (!(m.addresses && m.addresses.length))\n                    m.addresses = [];\n                m.addresses.push($root.PeerRecord.AddressInfo.decode(r, r.uint32()));\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a PeerRecord message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof PeerRecord\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {PeerRecord} PeerRecord\n     */\n    PeerRecord.fromObject = function fromObject(d) {\n        if (d instanceof $root.PeerRecord)\n            return d;\n        var m = new $root.PeerRecord();\n        if (d.peerId != null) {\n            if (typeof d.peerId === \"string\")\n                $util.base64.decode(d.peerId, m.peerId = $util.newBuffer($util.base64.length(d.peerId)), 0);\n            else if (d.peerId.length)\n                m.peerId = d.peerId;\n        }\n        if (d.seq != null) {\n            if ($util.Long)\n                (m.seq = $util.Long.fromValue(d.seq)).unsigned = true;\n            else if (typeof d.seq === \"string\")\n                m.seq = parseInt(d.seq, 10);\n            else if (typeof d.seq === \"number\")\n                m.seq = d.seq;\n            else if (typeof d.seq === \"object\")\n                m.seq = new $util.LongBits(d.seq.low >>> 0, d.seq.high >>> 0).toNumber(true);\n        }\n        if (d.addresses) {\n            if (!Array.isArray(d.addresses))\n                throw TypeError(\".PeerRecord.addresses: array expected\");\n            m.addresses = [];\n            for (var i = 0; i < d.addresses.length; ++i) {\n                if (typeof d.addresses[i] !== \"object\")\n                    throw TypeError(\".PeerRecord.addresses: object expected\");\n                m.addresses[i] = $root.PeerRecord.AddressInfo.fromObject(d.addresses[i]);\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a PeerRecord message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof PeerRecord\n     * @static\n     * @param {PeerRecord} m PeerRecord\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    PeerRecord.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.arrays || o.defaults) {\n            d.addresses = [];\n        }\n        if (o.defaults) {\n            if (o.bytes === String)\n                d.peerId = \"\";\n            else {\n                d.peerId = [];\n                if (o.bytes !== Array)\n                    d.peerId = $util.newBuffer(d.peerId);\n            }\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, true);\n                d.seq = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.seq = o.longs === String ? \"0\" : 0;\n        }\n        if (m.peerId != null && m.hasOwnProperty(\"peerId\")) {\n            d.peerId = o.bytes === String ? $util.base64.encode(m.peerId, 0, m.peerId.length) : o.bytes === Array ? Array.prototype.slice.call(m.peerId) : m.peerId;\n        }\n        if (m.seq != null && m.hasOwnProperty(\"seq\")) {\n            if (typeof m.seq === \"number\")\n                d.seq = o.longs === String ? String(m.seq) : m.seq;\n            else\n                d.seq = o.longs === String ? $util.Long.prototype.toString.call(m.seq) : o.longs === Number ? new $util.LongBits(m.seq.low >>> 0, m.seq.high >>> 0).toNumber(true) : m.seq;\n        }\n        if (m.addresses && m.addresses.length) {\n            d.addresses = [];\n            for (var j = 0; j < m.addresses.length; ++j) {\n                d.addresses[j] = $root.PeerRecord.AddressInfo.toObject(m.addresses[j], o);\n            }\n        }\n        return d;\n    };\n\n    /**\n     * Converts this PeerRecord to JSON.\n     * @function toJSON\n     * @memberof PeerRecord\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    PeerRecord.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    PeerRecord.AddressInfo = (function() {\n\n        /**\n         * Properties of an AddressInfo.\n         * @memberof PeerRecord\n         * @interface IAddressInfo\n         * @property {Uint8Array|null} [multiaddr] AddressInfo multiaddr\n         */\n\n        /**\n         * Constructs a new AddressInfo.\n         * @memberof PeerRecord\n         * @classdesc Represents an AddressInfo.\n         * @implements IAddressInfo\n         * @constructor\n         * @param {PeerRecord.IAddressInfo=} [p] Properties to set\n         */\n        function AddressInfo(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * AddressInfo multiaddr.\n         * @member {Uint8Array} multiaddr\n         * @memberof PeerRecord.AddressInfo\n         * @instance\n         */\n        AddressInfo.prototype.multiaddr = $util.newBuffer([]);\n\n        /**\n         * Encodes the specified AddressInfo message. Does not implicitly {@link PeerRecord.AddressInfo.verify|verify} messages.\n         * @function encode\n         * @memberof PeerRecord.AddressInfo\n         * @static\n         * @param {PeerRecord.IAddressInfo} m AddressInfo message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AddressInfo.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.multiaddr != null && Object.hasOwnProperty.call(m, \"multiaddr\"))\n                w.uint32(10).bytes(m.multiaddr);\n            return w;\n        };\n\n        /**\n         * Decodes an AddressInfo message from the specified reader or buffer.\n         * @function decode\n         * @memberof PeerRecord.AddressInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {PeerRecord.AddressInfo} AddressInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AddressInfo.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.PeerRecord.AddressInfo();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.multiaddr = r.bytes();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        /**\n         * Creates an AddressInfo message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof PeerRecord.AddressInfo\n         * @static\n         * @param {Object.<string,*>} d Plain object\n         * @returns {PeerRecord.AddressInfo} AddressInfo\n         */\n        AddressInfo.fromObject = function fromObject(d) {\n            if (d instanceof $root.PeerRecord.AddressInfo)\n                return d;\n            var m = new $root.PeerRecord.AddressInfo();\n            if (d.multiaddr != null) {\n                if (typeof d.multiaddr === \"string\")\n                    $util.base64.decode(d.multiaddr, m.multiaddr = $util.newBuffer($util.base64.length(d.multiaddr)), 0);\n                else if (d.multiaddr.length)\n                    m.multiaddr = d.multiaddr;\n            }\n            return m;\n        };\n\n        /**\n         * Creates a plain object from an AddressInfo message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof PeerRecord.AddressInfo\n         * @static\n         * @param {PeerRecord.AddressInfo} m AddressInfo\n         * @param {$protobuf.IConversionOptions} [o] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AddressInfo.toObject = function toObject(m, o) {\n            if (!o)\n                o = {};\n            var d = {};\n            if (o.defaults) {\n                if (o.bytes === String)\n                    d.multiaddr = \"\";\n                else {\n                    d.multiaddr = [];\n                    if (o.bytes !== Array)\n                        d.multiaddr = $util.newBuffer(d.multiaddr);\n                }\n            }\n            if (m.multiaddr != null && m.hasOwnProperty(\"multiaddr\")) {\n                d.multiaddr = o.bytes === String ? $util.base64.encode(m.multiaddr, 0, m.multiaddr.length) : o.bytes === Array ? Array.prototype.slice.call(m.multiaddr) : m.multiaddr;\n            }\n            return d;\n        };\n\n        /**\n         * Converts this AddressInfo to JSON.\n         * @function toJSON\n         * @memberof PeerRecord.AddressInfo\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AddressInfo.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return AddressInfo;\n    })();\n\n    return PeerRecord;\n})();\n\nmodule.exports = $root;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}