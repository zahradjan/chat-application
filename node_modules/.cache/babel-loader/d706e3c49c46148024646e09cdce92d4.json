{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _inherits = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar _wrapAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nvar _awaitAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _asyncIterator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar _asyncGeneratorDelegate = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate.js\").default;\n\nvar _require = require('interface-blockstore'),\n    BlockstoreAdapter = _require.BlockstoreAdapter;\n\nvar merge = require('it-merge');\n\nvar pushable = require('it-pushable');\n\nvar filter = require('it-filter');\n/**\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('interface-blockstore').Query} Query\n * @typedef {import('interface-blockstore').KeyQuery} KeyQuery\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-bitswap').IPFSBitswap} Bitswap\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/block').RmOptions} RmOptions\n */\n\n/**\n * BlockStorage is a hybrid block datastore. It stores data in a local\n * datastore and may retrieve data from a remote Exchange.\n * It uses an internal `datastore.Datastore` instance to store values.\n *\n * @implements {Blockstore}\n */\n\n\nvar BlockStorage = /*#__PURE__*/function (_BlockstoreAdapter) {\n  _inherits(BlockStorage, _BlockstoreAdapter);\n\n  var _super = _createSuper(BlockStorage);\n\n  /**\n   * Create a new BlockStorage\n   *\n   * @param {Blockstore} blockstore\n   * @param {Bitswap} bitswap\n   */\n  function BlockStorage(blockstore, bitswap) {\n    var _this6;\n\n    _classCallCheck(this, BlockStorage);\n\n    _this6 = _super.call(this);\n    _this6.child = blockstore;\n    _this6.bitswap = bitswap;\n    return _this6;\n  }\n\n  _createClass(BlockStorage, [{\n    key: \"open\",\n    value: function open() {\n      return this.child.open();\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      return this.child.close();\n    }\n  }, {\n    key: \"unwrap\",\n    value: function unwrap() {\n      return this.child;\n    }\n    /**\n     * Put a block to the underlying datastore\n     *\n     * @param {CID} cid\n     * @param {Uint8Array} block\n     * @param {AbortOptions} [options]\n     */\n\n  }, {\n    key: \"put\",\n    value: function () {\n      var _put = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(cid, block) {\n        var options,\n            _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n                _context.next = 3;\n                return this.has(cid);\n\n              case 3:\n                if (!_context.sent) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 5:\n                if (!this.bitswap.isStarted()) {\n                  _context.next = 10;\n                  break;\n                }\n\n                _context.next = 8;\n                return this.bitswap.put(cid, block, options);\n\n              case 8:\n                _context.next = 12;\n                break;\n\n              case 10:\n                _context.next = 12;\n                return this.child.put(cid, block, options);\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function put(_x, _x2) {\n        return _put.apply(this, arguments);\n      }\n\n      return put;\n    }()\n    /**\n     * Put a multiple blocks to the underlying datastore\n     *\n     * @param {AsyncIterable<{ key: CID, value: Uint8Array }> | Iterable<{ key: CID, value: Uint8Array }>} blocks\n     * @param {AbortOptions} [options]\n     */\n\n  }, {\n    key: \"putMany\",\n    value: function putMany(blocks) {\n      var _this = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var missingBlocks;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                missingBlocks = filter(blocks, /*#__PURE__*/function () {\n                  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_ref) {\n                    var key;\n                    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            key = _ref.key;\n                            _context2.next = 3;\n                            return _this.has(key);\n\n                          case 3:\n                            return _context2.abrupt(\"return\", !_context2.sent);\n\n                          case 4:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2);\n                  }));\n\n                  return function (_x3) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }());\n\n                if (!_this.bitswap.isStarted()) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                return _context3.delegateYield(_asyncGeneratorDelegate(_asyncIterator(_this.bitswap.putMany(missingBlocks, options)), _awaitAsyncGenerator), \"t0\", 3);\n\n              case 3:\n                _context3.next = 6;\n                break;\n\n              case 5:\n                return _context3.delegateYield(_asyncGeneratorDelegate(_asyncIterator(_this.child.putMany(missingBlocks, options)), _awaitAsyncGenerator), \"t1\", 6);\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    }\n    /**\n     * Get a block by cid\n     *\n     * @param {CID} cid\n     * @param {AbortOptions} [options]\n     */\n\n  }, {\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(cid) {\n        var options,\n            _args4 = arguments;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                options = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};\n                _context4.next = 3;\n                return this.has(cid);\n\n              case 3:\n                _context4.t0 = !_context4.sent;\n\n                if (!_context4.t0) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                _context4.t0 = this.bitswap.isStarted();\n\n              case 6:\n                if (!_context4.t0) {\n                  _context4.next = 10;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", this.bitswap.get(cid, options));\n\n              case 10:\n                return _context4.abrupt(\"return\", this.child.get(cid, options));\n\n              case 11:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function get(_x4) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }()\n    /**\n     * Get multiple blocks back from an array of cids\n     *\n     * @param {AsyncIterable<CID> | Iterable<CID>} cids\n     * @param {AbortOptions} [options]\n     */\n\n  }, {\n    key: \"getMany\",\n    value: function getMany(cids) {\n      var _this2 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var getFromBitswap, getFromChild;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                getFromBitswap = pushable();\n                getFromChild = pushable();\n                Promise.resolve().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n                  var _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, cid;\n\n                  return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          _iteratorAbruptCompletion = false;\n                          _didIteratorError = false;\n                          _context5.prev = 2;\n                          _iterator = _asyncIterator(cids);\n\n                        case 4:\n                          _context5.next = 6;\n                          return _iterator.next();\n\n                        case 6:\n                          if (!(_iteratorAbruptCompletion = !(_step = _context5.sent).done)) {\n                            _context5.next = 21;\n                            break;\n                          }\n\n                          cid = _step.value;\n                          _context5.next = 10;\n                          return _this2.has(cid);\n\n                        case 10:\n                          _context5.t0 = !_context5.sent;\n\n                          if (!_context5.t0) {\n                            _context5.next = 13;\n                            break;\n                          }\n\n                          _context5.t0 = _this2.bitswap.isStarted();\n\n                        case 13:\n                          if (!_context5.t0) {\n                            _context5.next = 17;\n                            break;\n                          }\n\n                          getFromBitswap.push(cid);\n                          _context5.next = 18;\n                          break;\n\n                        case 17:\n                          getFromChild.push(cid);\n\n                        case 18:\n                          _iteratorAbruptCompletion = false;\n                          _context5.next = 4;\n                          break;\n\n                        case 21:\n                          _context5.next = 27;\n                          break;\n\n                        case 23:\n                          _context5.prev = 23;\n                          _context5.t1 = _context5[\"catch\"](2);\n                          _didIteratorError = true;\n                          _iteratorError = _context5.t1;\n\n                        case 27:\n                          _context5.prev = 27;\n                          _context5.prev = 28;\n\n                          if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                            _context5.next = 32;\n                            break;\n                          }\n\n                          _context5.next = 32;\n                          return _iterator.return();\n\n                        case 32:\n                          _context5.prev = 32;\n\n                          if (!_didIteratorError) {\n                            _context5.next = 35;\n                            break;\n                          }\n\n                          throw _iteratorError;\n\n                        case 35:\n                          return _context5.finish(32);\n\n                        case 36:\n                          return _context5.finish(27);\n\n                        case 37:\n                          getFromBitswap.end();\n                          getFromChild.end();\n\n                        case 39:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, _callee5, null, [[2, 23, 27, 37], [28,, 32, 36]]);\n                })));\n                return _context6.delegateYield(_asyncGeneratorDelegate(_asyncIterator(merge(_this2.bitswap.getMany(getFromBitswap, options), _this2.child.getMany(getFromChild, options))), _awaitAsyncGenerator), \"t0\", 4);\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }))();\n    }\n    /**\n     * Delete a block from the blockstore\n     *\n     * @param {CID} cid\n     * @param {RmOptions} [options]\n     */\n\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(cid, options) {\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.child.delete(cid, options);\n\n              case 2:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function _delete(_x5, _x6) {\n        return _delete2.apply(this, arguments);\n      }\n\n      return _delete;\n    }()\n    /**\n     * Delete multiple blocks from the blockstore\n     *\n     * @param {AsyncIterable<CID> | Iterable<CID>} cids\n     * @param {RmOptions} [options]\n     */\n\n  }, {\n    key: \"deleteMany\",\n    value: function deleteMany(cids, options) {\n      var _this3 = this;\n\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                return _context8.delegateYield(_asyncGeneratorDelegate(_asyncIterator(_this3.child.deleteMany(cids, options)), _awaitAsyncGenerator), \"t0\", 1);\n\n              case 1:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }))();\n    }\n    /**\n     * @param {CID} cid\n     * @param {AbortOptions} options\n     */\n\n  }, {\n    key: \"has\",\n    value: function () {\n      var _has = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(cid) {\n        var options,\n            _args9 = arguments;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                options = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : {};\n                return _context9.abrupt(\"return\", this.child.has(cid, options));\n\n              case 2:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function has(_x7) {\n        return _has.apply(this, arguments);\n      }\n\n      return has;\n    }()\n    /**\n     * @param {Query} q\n     * @param {AbortOptions} options\n     */\n\n  }, {\n    key: \"query\",\n    value: function query(q) {\n      var _this4 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                return _context10.delegateYield(_asyncGeneratorDelegate(_asyncIterator(_this4.child.query(q, options)), _awaitAsyncGenerator), \"t0\", 1);\n\n              case 1:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10);\n      }))();\n    }\n    /**\n     * @param {KeyQuery} q\n     * @param {AbortOptions} options\n     */\n\n  }, {\n    key: \"queryKeys\",\n    value: function queryKeys(q) {\n      var _this5 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                return _context11.delegateYield(_asyncGeneratorDelegate(_asyncIterator(_this5.child.queryKeys(q, options)), _awaitAsyncGenerator), \"t0\", 1);\n\n              case 1:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11);\n      }))();\n    }\n  }]);\n\n  return BlockStorage;\n}(BlockstoreAdapter);\n\nmodule.exports = BlockStorage;","map":{"version":3,"names":["require","BlockstoreAdapter","merge","pushable","filter","BlockStorage","blockstore","bitswap","child","open","close","cid","block","options","has","isStarted","put","blocks","missingBlocks","key","putMany","get","cids","getFromBitswap","getFromChild","Promise","resolve","then","push","end","getMany","delete","deleteMany","q","query","queryKeys","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/block-storage.js"],"sourcesContent":["'use strict'\n\nconst { BlockstoreAdapter } = require('interface-blockstore')\nconst merge = require('it-merge')\nconst pushable = require('it-pushable')\nconst filter = require('it-filter')\n\n/**\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('interface-blockstore').Query} Query\n * @typedef {import('interface-blockstore').KeyQuery} KeyQuery\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-bitswap').IPFSBitswap} Bitswap\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/block').RmOptions} RmOptions\n */\n\n/**\n * BlockStorage is a hybrid block datastore. It stores data in a local\n * datastore and may retrieve data from a remote Exchange.\n * It uses an internal `datastore.Datastore` instance to store values.\n *\n * @implements {Blockstore}\n */\nclass BlockStorage extends BlockstoreAdapter {\n  /**\n   * Create a new BlockStorage\n   *\n   * @param {Blockstore} blockstore\n   * @param {Bitswap} bitswap\n   */\n  constructor (blockstore, bitswap) {\n    super()\n\n    this.child = blockstore\n    this.bitswap = bitswap\n  }\n\n  open () {\n    return this.child.open()\n  }\n\n  close () {\n    return this.child.close()\n  }\n\n  unwrap () {\n    return this.child\n  }\n\n  /**\n   * Put a block to the underlying datastore\n   *\n   * @param {CID} cid\n   * @param {Uint8Array} block\n   * @param {AbortOptions} [options]\n   */\n  async put (cid, block, options = {}) {\n    if (await this.has(cid)) {\n      return\n    }\n\n    if (this.bitswap.isStarted()) {\n      await this.bitswap.put(cid, block, options)\n    } else {\n      await this.child.put(cid, block, options)\n    }\n  }\n\n  /**\n   * Put a multiple blocks to the underlying datastore\n   *\n   * @param {AsyncIterable<{ key: CID, value: Uint8Array }> | Iterable<{ key: CID, value: Uint8Array }>} blocks\n   * @param {AbortOptions} [options]\n   */\n  async * putMany (blocks, options = {}) {\n    const missingBlocks = filter(blocks, async ({ key }) => { return !(await this.has(key)) })\n\n    if (this.bitswap.isStarted()) {\n      yield * this.bitswap.putMany(missingBlocks, options)\n    } else {\n      yield * this.child.putMany(missingBlocks, options)\n    }\n  }\n\n  /**\n   * Get a block by cid\n   *\n   * @param {CID} cid\n   * @param {AbortOptions} [options]\n   */\n  async get (cid, options = {}) {\n    if (!(await this.has(cid)) && this.bitswap.isStarted()) {\n      return this.bitswap.get(cid, options)\n    } else {\n      return this.child.get(cid, options)\n    }\n  }\n\n  /**\n   * Get multiple blocks back from an array of cids\n   *\n   * @param {AsyncIterable<CID> | Iterable<CID>} cids\n   * @param {AbortOptions} [options]\n   */\n  async * getMany (cids, options = {}) {\n    const getFromBitswap = pushable()\n    const getFromChild = pushable()\n\n    Promise.resolve().then(async () => {\n      for await (const cid of cids) {\n        if (!(await this.has(cid)) && this.bitswap.isStarted()) {\n          getFromBitswap.push(cid)\n        } else {\n          getFromChild.push(cid)\n        }\n      }\n\n      getFromBitswap.end()\n      getFromChild.end()\n    })\n\n    yield * merge(\n      this.bitswap.getMany(getFromBitswap, options),\n      this.child.getMany(getFromChild, options)\n    )\n  }\n\n  /**\n   * Delete a block from the blockstore\n   *\n   * @param {CID} cid\n   * @param {RmOptions} [options]\n   */\n  async delete (cid, options) {\n    await this.child.delete(cid, options)\n  }\n\n  /**\n   * Delete multiple blocks from the blockstore\n   *\n   * @param {AsyncIterable<CID> | Iterable<CID>} cids\n   * @param {RmOptions} [options]\n   */\n  async * deleteMany (cids, options) {\n    yield * this.child.deleteMany(cids, options)\n  }\n\n  /**\n   * @param {CID} cid\n   * @param {AbortOptions} options\n   */\n  async has (cid, options = {}) {\n    return this.child.has(cid, options)\n  }\n\n  /**\n   * @param {Query} q\n   * @param {AbortOptions} options\n   */\n  async * query (q, options = {}) {\n    yield * this.child.query(q, options)\n  }\n\n  /**\n   * @param {KeyQuery} q\n   * @param {AbortOptions} options\n   */\n  async * queryKeys (q, options = {}) {\n    yield * this.child.queryKeys(q, options)\n  }\n}\n\nmodule.exports = BlockStorage\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;AAEA,eAA8BA,OAAO,CAAC,sBAAD,CAArC;AAAA,IAAQC,iBAAR,YAAQA,iBAAR;;AACA,IAAMC,KAAK,GAAGF,OAAO,CAAC,UAAD,CAArB;;AACA,IAAMG,QAAQ,GAAGH,OAAO,CAAC,aAAD,CAAxB;;AACA,IAAMI,MAAM,GAAGJ,OAAO,CAAC,WAAD,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACMK,Y;;;;;EACJ;AACF;AACA;AACA;AACA;AACA;EACE,sBAAaC,UAAb,EAAyBC,OAAzB,EAAkC;IAAA;;IAAA;;IAChC;IAEA,OAAKC,KAAL,GAAaF,UAAb;IACA,OAAKC,OAAL,GAAeA,OAAf;IAJgC;EAKjC;;;;WAED,gBAAQ;MACN,OAAO,KAAKC,KAAL,CAAWC,IAAX,EAAP;IACD;;;WAED,iBAAS;MACP,OAAO,KAAKD,KAAL,CAAWE,KAAX,EAAP;IACD;;;WAED,kBAAU;MACR,OAAO,KAAKF,KAAZ;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;;4EACE,iBAAWG,GAAX,EAAgBC,KAAhB;QAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAuBC,OAAvB,2DAAiC,EAAjC;gBAAA;gBAAA,OACY,KAAKC,GAAL,CAASH,GAAT,CADZ;;cAAA;gBAAA;kBAAA;kBAAA;gBAAA;;gBAAA;;cAAA;gBAAA,KAKM,KAAKJ,OAAL,CAAaQ,SAAb,EALN;kBAAA;kBAAA;gBAAA;;gBAAA;gBAAA,OAMU,KAAKR,OAAL,CAAaS,GAAb,CAAiBL,GAAjB,EAAsBC,KAAtB,EAA6BC,OAA7B,CANV;;cAAA;gBAAA;gBAAA;;cAAA;gBAAA;gBAAA,OAQU,KAAKL,KAAL,CAAWQ,GAAX,CAAeL,GAAf,EAAoBC,KAApB,EAA2BC,OAA3B,CARV;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;IAYA;AACF;AACA;AACA;AACA;AACA;;;;WACE,iBAAiBI,MAAjB,EAAuC;MAAA;;MAAA,IAAdJ,OAAc,uEAAJ,EAAI;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAC/BK,aAD+B,GACfd,MAAM,CAACa,MAAD;kBAAA,uEAAS;oBAAA;oBAAA;sBAAA;wBAAA;0BAAA;4BAASE,GAAT,QAASA,GAAT;4BAAA;4BAAA,OAAoC,KAAI,CAACL,GAAL,CAASK,GAAT,CAApC;;0BAAA;4BAAA;;0BAAA;0BAAA;4BAAA;wBAAA;sBAAA;oBAAA;kBAAA,CAAT;;kBAAA;oBAAA;kBAAA;gBAAA,IADS;;gBAAA,KAGjC,KAAI,CAACZ,OAAL,CAAaQ,SAAb,EAHiC;kBAAA;kBAAA;gBAAA;;gBAInC,sEAAQ,KAAI,CAACR,OAAL,CAAaa,OAAb,CAAqBF,aAArB,EAAoCL,OAApC,CAAR;;cAJmC;gBAAA;gBAAA;;cAAA;gBAMnC,sEAAQ,KAAI,CAACL,KAAL,CAAWY,OAAX,CAAmBF,aAAnB,EAAkCL,OAAlC,CAAR;;cANmC;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAQtC;IAED;AACF;AACA;AACA;AACA;AACA;;;;;4EACE,kBAAWF,GAAX;QAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAgBE,OAAhB,8DAA0B,EAA1B;gBAAA;gBAAA,OACc,KAAKC,GAAL,CAASH,GAAT,CADd;;cAAA;gBAAA;;gBAAA;kBAAA;kBAAA;gBAAA;;gBAAA,eACgC,KAAKJ,OAAL,CAAaQ,SAAb,EADhC;;cAAA;gBAAA;kBAAA;kBAAA;gBAAA;;gBAAA,kCAEW,KAAKR,OAAL,CAAac,GAAb,CAAiBV,GAAjB,EAAsBE,OAAtB,CAFX;;cAAA;gBAAA,kCAIW,KAAKL,KAAL,CAAWa,GAAX,CAAeV,GAAf,EAAoBE,OAApB,CAJX;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;IAQA;AACF;AACA;AACA;AACA;AACA;;;;WACE,iBAAiBS,IAAjB,EAAqC;MAAA;;MAAA,IAAdT,OAAc,uEAAJ,EAAI;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAC7BU,cAD6B,GACZpB,QAAQ,EADI;gBAE7BqB,YAF6B,GAEdrB,QAAQ,EAFM;gBAInCsB,OAAO,CAACC,OAAR,GAAkBC,IAAlB,0EAAuB;kBAAA;;kBAAA;oBAAA;sBAAA;wBAAA;0BAAA;0BAAA;0BAAA;0BAAA,2BACGL,IADH;;wBAAA;0BAAA;0BAAA;;wBAAA;0BAAA;4BAAA;4BAAA;0BAAA;;0BACJX,GADI;0BAAA;0BAAA,OAEP,MAAI,CAACG,GAAL,CAASH,GAAT,CAFO;;wBAAA;0BAAA;;0BAAA;4BAAA;4BAAA;0BAAA;;0BAAA,eAEW,MAAI,CAACJ,OAAL,CAAaQ,SAAb,EAFX;;wBAAA;0BAAA;4BAAA;4BAAA;0BAAA;;0BAGjBQ,cAAc,CAACK,IAAf,CAAoBjB,GAApB;0BAHiB;0BAAA;;wBAAA;0BAKjBa,YAAY,CAACI,IAAb,CAAkBjB,GAAlB;;wBALiB;0BAAA;0BAAA;0BAAA;;wBAAA;0BAAA;0BAAA;;wBAAA;0BAAA;0BAAA;0BAAA;0BAAA;;wBAAA;0BAAA;0BAAA;;0BAAA;4BAAA;4BAAA;0BAAA;;0BAAA;0BAAA;;wBAAA;0BAAA;;0BAAA;4BAAA;4BAAA;0BAAA;;0BAAA;;wBAAA;0BAAA;;wBAAA;0BAAA;;wBAAA;0BASrBY,cAAc,CAACM,GAAf;0BACAL,YAAY,CAACK,GAAb;;wBAVqB;wBAAA;0BAAA;sBAAA;oBAAA;kBAAA;gBAAA,CAAvB;gBAaA,sEAAQ3B,KAAK,CACX,MAAI,CAACK,OAAL,CAAauB,OAAb,CAAqBP,cAArB,EAAqCV,OAArC,CADW,EAEX,MAAI,CAACL,KAAL,CAAWsB,OAAX,CAAmBN,YAAnB,EAAiCX,OAAjC,CAFW,CAAb;;cAjBmC;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAqBpC;IAED;AACF;AACA;AACA;AACA;AACA;;;;;gFACE,kBAAcF,GAAd,EAAmBE,OAAnB;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACQ,KAAKL,KAAL,CAAWuB,MAAX,CAAkBpB,GAAlB,EAAuBE,OAAvB,CADR;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;IAIA;AACF;AACA;AACA;AACA;AACA;;;;WACE,oBAAoBS,IAApB,EAA0BT,OAA1B,EAAmC;MAAA;;MAAA;QAAA;UAAA;YAAA;cAAA;gBACjC,sEAAQ,MAAI,CAACL,KAAL,CAAWwB,UAAX,CAAsBV,IAAtB,EAA4BT,OAA5B,CAAR;;cADiC;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAElC;IAED;AACF;AACA;AACA;;;;;4EACE,kBAAWF,GAAX;QAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAgBE,OAAhB,8DAA0B,EAA1B;gBAAA,kCACS,KAAKL,KAAL,CAAWM,GAAX,CAAeH,GAAf,EAAoBE,OAApB,CADT;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;IAIA;AACF;AACA;AACA;;;;WACE,eAAeoB,CAAf,EAAgC;MAAA;;MAAA,IAAdpB,OAAc,uEAAJ,EAAI;MAAA;QAAA;UAAA;YAAA;cAAA;gBAC9B,uEAAQ,MAAI,CAACL,KAAL,CAAW0B,KAAX,CAAiBD,CAAjB,EAAoBpB,OAApB,CAAR;;cAD8B;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAE/B;IAED;AACF;AACA;AACA;;;;WACE,mBAAmBoB,CAAnB,EAAoC;MAAA;;MAAA,IAAdpB,OAAc,uEAAJ,EAAI;MAAA;QAAA;UAAA;YAAA;cAAA;gBAClC,uEAAQ,MAAI,CAACL,KAAL,CAAW2B,SAAX,CAAqBF,CAArB,EAAwBpB,OAAxB,CAAR;;cADkC;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAEnC;;;;EAlJwBZ,iB;;AAqJ3BmC,MAAM,CAACC,OAAP,GAAiBhC,YAAjB"},"metadata":{},"sourceType":"script"}