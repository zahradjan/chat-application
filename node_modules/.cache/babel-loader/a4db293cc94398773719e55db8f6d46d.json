{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _awaitAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _wrapAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nvar _asyncIterator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar _require = require('it-pipe'),\n    pipe = _require.pipe;\n\nvar lp = require('it-length-prefixed');\n\nvar Message = require('../message');\n\nvar handlers = require('./handlers');\n\nvar utils = require('../utils');\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream\n */\n\n/**\n * @param {import('../index')} dht\n */\n\n\nmodule.exports = function (dht) {\n  var log = utils.logger(dht.peerId, 'rpc');\n  var getMessageHandler = handlers(dht);\n  /**\n   * Process incoming DHT messages.\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   */\n\n  function handleMessage(_x, _x2) {\n    return _handleMessage.apply(this, arguments);\n  }\n  /**\n   * Handle incoming streams on the dht protocol\n   *\n   * @param {object} props\n   * @param {MuxedStream} props.stream\n   * @param {import('libp2p-interfaces/src/connection').Connection} props.connection\n   */\n\n\n  function _handleMessage() {\n    _handleMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(peerId, msg) {\n      var handler;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // get handler & execute it\n              handler = getMessageHandler(msg.type);\n              _context.prev = 1;\n              _context.next = 4;\n              return dht._add(peerId);\n\n            case 4:\n              _context.next = 9;\n              break;\n\n            case 6:\n              _context.prev = 6;\n              _context.t0 = _context[\"catch\"](1);\n              log.error('Failed to update the kbucket store', _context.t0);\n\n            case 9:\n              if (handler) {\n                _context.next = 12;\n                break;\n              }\n\n              log.error(\"no handler found for message type: \".concat(msg.type));\n              return _context.abrupt(\"return\");\n\n            case 12:\n              return _context.abrupt(\"return\", handler(peerId, msg));\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 6]]);\n    }));\n    return _handleMessage.apply(this, arguments);\n  }\n\n  function onIncomingStream(_x3) {\n    return _onIncomingStream.apply(this, arguments);\n  }\n\n  function _onIncomingStream() {\n    _onIncomingStream = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(_ref) {\n      var stream, connection, peerId, idB58Str;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              stream = _ref.stream, connection = _ref.connection;\n              peerId = connection.remotePeer;\n              _context3.prev = 2;\n              _context3.next = 5;\n              return dht._add(peerId);\n\n            case 5:\n              _context3.next = 10;\n              break;\n\n            case 7:\n              _context3.prev = 7;\n              _context3.t0 = _context3[\"catch\"](2);\n              log.error(_context3.t0);\n\n            case 10:\n              idB58Str = peerId.toB58String();\n              log('from: %s', idB58Str);\n              _context3.next = 14;\n              return pipe(stream.source, lp.decode(),\n              /**\n               * @param {AsyncIterable<Uint8Array>} source\n               */\n              function (source) {\n                return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n                  var _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, msg, desMessage, res;\n\n                  return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          _iteratorAbruptCompletion = false;\n                          _didIteratorError = false;\n                          _context2.prev = 2;\n                          _iterator = _asyncIterator(source);\n\n                        case 4:\n                          _context2.next = 6;\n                          return _awaitAsyncGenerator(_iterator.next());\n\n                        case 6:\n                          if (!(_iteratorAbruptCompletion = !(_step = _context2.sent).done)) {\n                            _context2.next = 18;\n                            break;\n                          }\n\n                          msg = _step.value;\n                          // handle the message\n                          desMessage = Message.deserialize(msg.slice());\n                          _context2.next = 11;\n                          return _awaitAsyncGenerator(handleMessage(peerId, desMessage));\n\n                        case 11:\n                          res = _context2.sent;\n\n                          if (!res) {\n                            _context2.next = 15;\n                            break;\n                          }\n\n                          _context2.next = 15;\n                          return res.serialize();\n\n                        case 15:\n                          _iteratorAbruptCompletion = false;\n                          _context2.next = 4;\n                          break;\n\n                        case 18:\n                          _context2.next = 24;\n                          break;\n\n                        case 20:\n                          _context2.prev = 20;\n                          _context2.t0 = _context2[\"catch\"](2);\n                          _didIteratorError = true;\n                          _iteratorError = _context2.t0;\n\n                        case 24:\n                          _context2.prev = 24;\n                          _context2.prev = 25;\n\n                          if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                            _context2.next = 29;\n                            break;\n                          }\n\n                          _context2.next = 29;\n                          return _awaitAsyncGenerator(_iterator.return());\n\n                        case 29:\n                          _context2.prev = 29;\n\n                          if (!_didIteratorError) {\n                            _context2.next = 32;\n                            break;\n                          }\n\n                          throw _iteratorError;\n\n                        case 32:\n                          return _context2.finish(29);\n\n                        case 33:\n                          return _context2.finish(24);\n\n                        case 34:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2, null, [[2, 20, 24, 34], [25,, 29, 33]]);\n                }))();\n              }, lp.encode(), stream.sink);\n\n            case 14:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[2, 7]]);\n    }));\n    return _onIncomingStream.apply(this, arguments);\n  }\n\n  return onIncomingStream;\n};","map":{"version":3,"names":["require","pipe","lp","Message","handlers","utils","module","exports","dht","log","logger","peerId","getMessageHandler","handleMessage","msg","handler","type","_add","error","onIncomingStream","stream","connection","remotePeer","idB58Str","toB58String","source","decode","desMessage","deserialize","slice","res","serialize","encode","sink"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-kad-dht/src/rpc/index.js"],"sourcesContent":["'use strict'\n\nconst { pipe } = require('it-pipe')\nconst lp = require('it-length-prefixed')\n\nconst Message = require('../message')\nconst handlers = require('./handlers')\nconst utils = require('../utils')\n\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream\n */\n\n/**\n * @param {import('../index')} dht\n */\nmodule.exports = (dht) => {\n  const log = utils.logger(dht.peerId, 'rpc')\n  const getMessageHandler = handlers(dht)\n\n  /**\n   * Process incoming DHT messages.\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   */\n  async function handleMessage (peerId, msg) {\n    // get handler & execute it\n    const handler = getMessageHandler(msg.type)\n\n    try {\n      await dht._add(peerId)\n    } catch (err) {\n      log.error('Failed to update the kbucket store', err)\n    }\n\n    if (!handler) {\n      log.error(`no handler found for message type: ${msg.type}`)\n      return\n    }\n\n    return handler(peerId, msg)\n  }\n\n  /**\n   * Handle incoming streams on the dht protocol\n   *\n   * @param {object} props\n   * @param {MuxedStream} props.stream\n   * @param {import('libp2p-interfaces/src/connection').Connection} props.connection\n   */\n  async function onIncomingStream ({ stream, connection }) {\n    const peerId = connection.remotePeer\n\n    try {\n      await dht._add(peerId)\n    } catch (err) {\n      log.error(err)\n    }\n\n    const idB58Str = peerId.toB58String()\n    log('from: %s', idB58Str)\n\n    await pipe(\n      stream.source,\n      lp.decode(),\n      /**\n       * @param {AsyncIterable<Uint8Array>} source\n       */\n      source => (async function * () {\n        for await (const msg of source) {\n          // handle the message\n          const desMessage = Message.deserialize(msg.slice())\n          const res = await handleMessage(peerId, desMessage)\n\n          // Not all handlers will return a response\n          if (res) {\n            yield res.serialize()\n          }\n        }\n      })(),\n      lp.encode(),\n      stream.sink\n    )\n  }\n\n  return onIncomingStream\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}