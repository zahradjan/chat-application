{"ast":null,"code":"'use strict';\n\nconst utils = require('../utils');\n\nconst pMap = require('p-map');\n\nconst {\n  equals: uint8ArrayEquals\n} = require('uint8arrays/equals');\n\nconst {\n  compare: uint8ArrayCompare\n} = require('uint8arrays/compare');\n\nconst {\n  xor: uint8ArrayXor\n} = require('uint8arrays/xor');\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('../').PeerData} PeerData\n */\n\n/**\n * Maintains a list of peerIds sorted by distance from a DHT key.\n */\n\n\nclass PeerDistanceList {\n  /**\n   * Creates a new PeerDistanceList.\n   *\n   * @param {Uint8Array} originDhtKey - the DHT key from which distance is calculated\n   * @param {number} capacity - the maximum size of the list\n   */\n  constructor(originDhtKey, capacity) {\n    this.originDhtKey = originDhtKey;\n    this.capacity = capacity;\n    /** @type {{ peerId: PeerId, distance: Uint8Array }[]} */\n\n    this.peerDistances = [];\n  }\n  /**\n   * The length of the list\n   */\n\n\n  get length() {\n    return this.peerDistances.length;\n  }\n  /**\n   * The peerIds in the list, in order of distance from the origin key\n   */\n\n\n  get peers() {\n    return this.peerDistances.map(pd => pd.peerId);\n  }\n  /**\n   * Add a peerId to the list.\n   *\n   * @param {PeerId} peerId\n   */\n\n\n  async add(peerId) {\n    if (this.peerDistances.find(pd => uint8ArrayEquals(pd.peerId.id, peerId.id))) {\n      return;\n    }\n\n    const dhtKey = await utils.convertPeerId(peerId);\n    const el = {\n      peerId,\n      distance: uint8ArrayXor(this.originDhtKey, dhtKey)\n    };\n    this.peerDistances.push(el);\n    this.peerDistances.sort((a, b) => uint8ArrayCompare(a.distance, b.distance));\n    this.peerDistances = this.peerDistances.slice(0, this.capacity);\n  }\n  /**\n   * Indicates whether any of the peerIds passed as a parameter are closer\n   * to the origin key than the furthest peerId in the PeerDistanceList.\n   *\n   * @param {PeerId[]} peerIds\n   */\n\n\n  async anyCloser(peerIds) {\n    if (!peerIds.length) {\n      return false;\n    }\n\n    if (!this.length) {\n      return true;\n    }\n\n    const dhtKeys = await pMap(peerIds, peerId => utils.convertPeerId(peerId));\n    const furthestDistance = this.peerDistances[this.peerDistances.length - 1].distance;\n\n    for (const dhtKey of dhtKeys) {\n      const keyDistance = uint8ArrayXor(this.originDhtKey, dhtKey);\n\n      if (uint8ArrayCompare(keyDistance, furthestDistance) < 0) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n}\n\nmodule.exports = PeerDistanceList;","map":{"version":3,"names":["utils","require","pMap","equals","uint8ArrayEquals","compare","uint8ArrayCompare","xor","uint8ArrayXor","PeerDistanceList","constructor","originDhtKey","capacity","peerDistances","length","peers","map","pd","peerId","add","find","id","dhtKey","convertPeerId","el","distance","push","sort","a","b","slice","anyCloser","peerIds","dhtKeys","furthestDistance","keyDistance","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-kad-dht/src/peer-list/peer-distance-list.js"],"sourcesContent":["'use strict'\n\nconst utils = require('../utils')\nconst pMap = require('p-map')\nconst { equals: uint8ArrayEquals } = require('uint8arrays/equals')\nconst { compare: uint8ArrayCompare } = require('uint8arrays/compare')\nconst { xor: uint8ArrayXor } = require('uint8arrays/xor')\n\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('../').PeerData} PeerData\n */\n\n/**\n * Maintains a list of peerIds sorted by distance from a DHT key.\n */\nclass PeerDistanceList {\n  /**\n   * Creates a new PeerDistanceList.\n   *\n   * @param {Uint8Array} originDhtKey - the DHT key from which distance is calculated\n   * @param {number} capacity - the maximum size of the list\n   */\n  constructor (originDhtKey, capacity) {\n    this.originDhtKey = originDhtKey\n    this.capacity = capacity\n\n    /** @type {{ peerId: PeerId, distance: Uint8Array }[]} */\n    this.peerDistances = []\n  }\n\n  /**\n   * The length of the list\n   */\n  get length () {\n    return this.peerDistances.length\n  }\n\n  /**\n   * The peerIds in the list, in order of distance from the origin key\n   */\n  get peers () {\n    return this.peerDistances.map(pd => pd.peerId)\n  }\n\n  /**\n   * Add a peerId to the list.\n   *\n   * @param {PeerId} peerId\n   */\n  async add (peerId) {\n    if (this.peerDistances.find(pd => uint8ArrayEquals(pd.peerId.id, peerId.id))) {\n      return\n    }\n\n    const dhtKey = await utils.convertPeerId(peerId)\n    const el = {\n      peerId,\n      distance: uint8ArrayXor(this.originDhtKey, dhtKey)\n    }\n\n    this.peerDistances.push(el)\n    this.peerDistances.sort((a, b) => uint8ArrayCompare(a.distance, b.distance))\n    this.peerDistances = this.peerDistances.slice(0, this.capacity)\n  }\n\n  /**\n   * Indicates whether any of the peerIds passed as a parameter are closer\n   * to the origin key than the furthest peerId in the PeerDistanceList.\n   *\n   * @param {PeerId[]} peerIds\n   */\n  async anyCloser (peerIds) {\n    if (!peerIds.length) {\n      return false\n    }\n\n    if (!this.length) {\n      return true\n    }\n\n    const dhtKeys = await pMap(peerIds, (peerId) => utils.convertPeerId(peerId))\n    const furthestDistance = this.peerDistances[this.peerDistances.length - 1].distance\n\n    for (const dhtKey of dhtKeys) {\n      const keyDistance = uint8ArrayXor(this.originDhtKey, dhtKey)\n\n      if (uint8ArrayCompare(keyDistance, furthestDistance) < 0) {\n        return true\n      }\n    }\n\n    return false\n  }\n}\n\nmodule.exports = PeerDistanceList\n"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAArB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,OAAD,CAApB;;AACA,MAAM;EAAEE,MAAM,EAAEC;AAAV,IAA+BH,OAAO,CAAC,oBAAD,CAA5C;;AACA,MAAM;EAAEI,OAAO,EAAEC;AAAX,IAAiCL,OAAO,CAAC,qBAAD,CAA9C;;AACA,MAAM;EAAEM,GAAG,EAAEC;AAAP,IAAyBP,OAAO,CAAC,iBAAD,CAAtC;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AACA,MAAMQ,gBAAN,CAAuB;EACrB;AACF;AACA;AACA;AACA;AACA;EACEC,WAAW,CAAEC,YAAF,EAAgBC,QAAhB,EAA0B;IACnC,KAAKD,YAAL,GAAoBA,YAApB;IACA,KAAKC,QAAL,GAAgBA,QAAhB;IAEA;;IACA,KAAKC,aAAL,GAAqB,EAArB;EACD;EAED;AACF;AACA;;;EACY,IAANC,MAAM,GAAI;IACZ,OAAO,KAAKD,aAAL,CAAmBC,MAA1B;EACD;EAED;AACF;AACA;;;EACW,IAALC,KAAK,GAAI;IACX,OAAO,KAAKF,aAAL,CAAmBG,GAAnB,CAAuBC,EAAE,IAAIA,EAAE,CAACC,MAAhC,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACW,MAAHC,GAAG,CAAED,MAAF,EAAU;IACjB,IAAI,KAAKL,aAAL,CAAmBO,IAAnB,CAAwBH,EAAE,IAAIb,gBAAgB,CAACa,EAAE,CAACC,MAAH,CAAUG,EAAX,EAAeH,MAAM,CAACG,EAAtB,CAA9C,CAAJ,EAA8E;MAC5E;IACD;;IAED,MAAMC,MAAM,GAAG,MAAMtB,KAAK,CAACuB,aAAN,CAAoBL,MAApB,CAArB;IACA,MAAMM,EAAE,GAAG;MACTN,MADS;MAETO,QAAQ,EAAEjB,aAAa,CAAC,KAAKG,YAAN,EAAoBW,MAApB;IAFd,CAAX;IAKA,KAAKT,aAAL,CAAmBa,IAAnB,CAAwBF,EAAxB;IACA,KAAKX,aAAL,CAAmBc,IAAnB,CAAwB,CAACC,CAAD,EAAIC,CAAJ,KAAUvB,iBAAiB,CAACsB,CAAC,CAACH,QAAH,EAAaI,CAAC,CAACJ,QAAf,CAAnD;IACA,KAAKZ,aAAL,GAAqB,KAAKA,aAAL,CAAmBiB,KAAnB,CAAyB,CAAzB,EAA4B,KAAKlB,QAAjC,CAArB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACiB,MAATmB,SAAS,CAAEC,OAAF,EAAW;IACxB,IAAI,CAACA,OAAO,CAAClB,MAAb,EAAqB;MACnB,OAAO,KAAP;IACD;;IAED,IAAI,CAAC,KAAKA,MAAV,EAAkB;MAChB,OAAO,IAAP;IACD;;IAED,MAAMmB,OAAO,GAAG,MAAM/B,IAAI,CAAC8B,OAAD,EAAWd,MAAD,IAAYlB,KAAK,CAACuB,aAAN,CAAoBL,MAApB,CAAtB,CAA1B;IACA,MAAMgB,gBAAgB,GAAG,KAAKrB,aAAL,CAAmB,KAAKA,aAAL,CAAmBC,MAAnB,GAA4B,CAA/C,EAAkDW,QAA3E;;IAEA,KAAK,MAAMH,MAAX,IAAqBW,OAArB,EAA8B;MAC5B,MAAME,WAAW,GAAG3B,aAAa,CAAC,KAAKG,YAAN,EAAoBW,MAApB,CAAjC;;MAEA,IAAIhB,iBAAiB,CAAC6B,WAAD,EAAcD,gBAAd,CAAjB,GAAmD,CAAvD,EAA0D;QACxD,OAAO,IAAP;MACD;IACF;;IAED,OAAO,KAAP;EACD;;AA7EoB;;AAgFvBE,MAAM,CAACC,OAAP,GAAiB5B,gBAAjB"},"metadata":{},"sourceType":"script"}