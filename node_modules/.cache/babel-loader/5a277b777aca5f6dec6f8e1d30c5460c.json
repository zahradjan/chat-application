{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _slicedToArray = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar _createForOfIteratorHelper = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _objectSpread = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar debug = require('debug');\n\nvar log = Object.assign(debug('libp2p:transports'), {\n  error: debug('libp2p:transports:err')\n});\n\nvar pSettle = require('p-settle');\n\nvar _require = require('./errors'),\n    codes = _require.codes;\n\nvar errCode = require('err-code');\n\nvar _require2 = require('./record/utils'),\n    updateSelfPeerRecord = _require2.updateSelfPeerRecord;\n/**\n * @typedef {import('multiaddr').Multiaddr} Multiaddr\n * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection\n * @typedef {import('libp2p-interfaces/src/transport/types').TransportFactory<any, any>} TransportFactory\n * @typedef {import('libp2p-interfaces/src/transport/types').Transport<any, any>} Transport\n *\n * @typedef {Object} TransportManagerProperties\n * @property {import('./')} libp2p\n * @property {import('./upgrader')} upgrader\n *\n * @typedef {Object} TransportManagerOptions\n * @property {number} [faultTolerance = FAULT_TOLERANCE.FATAL_ALL] - Address listen error tolerance.\n */\n\n\nvar TransportManager = /*#__PURE__*/function () {\n  /**\n   * @class\n   * @param {TransportManagerProperties & TransportManagerOptions} options\n   */\n  function TransportManager(_ref) {\n    var libp2p = _ref.libp2p,\n        upgrader = _ref.upgrader,\n        _ref$faultTolerance = _ref.faultTolerance,\n        faultTolerance = _ref$faultTolerance === void 0 ? FAULT_TOLERANCE.FATAL_ALL : _ref$faultTolerance;\n\n    _classCallCheck(this, TransportManager);\n\n    this.libp2p = libp2p;\n    this.upgrader = upgrader;\n    /** @type {Map<string, Transport>} */\n\n    this._transports = new Map();\n    this._listeners = new Map();\n    this._listenerOptions = new Map();\n    this.faultTolerance = faultTolerance;\n  }\n  /**\n   * Adds a `Transport` to the manager\n   *\n   * @param {string} key\n   * @param {TransportFactory} Transport\n   * @param {*} transportOptions - Additional options to pass to the transport\n   * @returns {void}\n   */\n\n\n  _createClass(TransportManager, [{\n    key: \"add\",\n    value: function add(key, Transport) {\n      var transportOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      log('adding %s', key);\n\n      if (!key) {\n        throw errCode(new Error(\"Transport must have a valid key, was given '\".concat(key, \"'\")), codes.ERR_INVALID_KEY);\n      }\n\n      if (this._transports.has(key)) {\n        throw errCode(new Error('There is already a transport with this key'), codes.ERR_DUPLICATE_TRANSPORT);\n      }\n\n      var transport = new Transport(_objectSpread(_objectSpread({}, transportOptions), {}, {\n        libp2p: this.libp2p,\n        upgrader: this.upgrader\n      }));\n\n      this._transports.set(key, transport);\n\n      this._listenerOptions.set(key, transportOptions.listenerOptions || {});\n\n      if (!this._listeners.has(key)) {\n        this._listeners.set(key, []);\n      }\n    }\n    /**\n     * Stops all listeners\n     *\n     * @async\n     */\n\n  }, {\n    key: \"close\",\n    value: function () {\n      var _close = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var tasks, _iterator, _step, _step$value, key, listeners, listener, _iterator2, _step2, _key;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                tasks = [];\n                _iterator = _createForOfIteratorHelper(this._listeners);\n\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    _step$value = _slicedToArray(_step.value, 2), key = _step$value[0], listeners = _step$value[1];\n                    log('closing listeners for %s', key);\n\n                    while (listeners.length) {\n                      listener = listeners.pop();\n                      listener.removeAllListeners('listening');\n                      listener.removeAllListeners('close');\n                      tasks.push(listener.close());\n                    }\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n                _context.next = 5;\n                return Promise.all(tasks);\n\n              case 5:\n                log('all listeners closed');\n                _iterator2 = _createForOfIteratorHelper(this._listeners.keys());\n\n                try {\n                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                    _key = _step2.value;\n\n                    this._listeners.set(_key, []);\n                  }\n                } catch (err) {\n                  _iterator2.e(err);\n                } finally {\n                  _iterator2.f();\n                }\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function close() {\n        return _close.apply(this, arguments);\n      }\n\n      return close;\n    }()\n    /**\n     * Dials the given Multiaddr over it's supported transport\n     *\n     * @param {Multiaddr} ma\n     * @param {*} options\n     * @returns {Promise<Connection>}\n     */\n\n  }, {\n    key: \"dial\",\n    value: function () {\n      var _dial = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(ma, options) {\n        var transport;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                transport = this.transportForMultiaddr(ma);\n\n                if (transport) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                throw errCode(new Error(\"No transport available for address \".concat(String(ma))), codes.ERR_TRANSPORT_UNAVAILABLE);\n\n              case 3:\n                _context2.prev = 3;\n                _context2.next = 6;\n                return transport.dial(ma, options);\n\n              case 6:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 9:\n                _context2.prev = 9;\n                _context2.t0 = _context2[\"catch\"](3);\n                if (!_context2.t0.code) _context2.t0.code = codes.ERR_TRANSPORT_DIAL_FAILED;\n                throw _context2.t0;\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[3, 9]]);\n      }));\n\n      function dial(_x, _x2) {\n        return _dial.apply(this, arguments);\n      }\n\n      return dial;\n    }()\n    /**\n     * Returns all Multiaddr's the listeners are using\n     *\n     * @returns {Multiaddr[]}\n     */\n\n  }, {\n    key: \"getAddrs\",\n    value: function getAddrs() {\n      /** @type {Multiaddr[]} */\n      var addrs = [];\n\n      var _iterator3 = _createForOfIteratorHelper(this._listeners.values()),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var listeners = _step3.value;\n\n          var _iterator4 = _createForOfIteratorHelper(listeners),\n              _step4;\n\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              var listener = _step4.value;\n              addrs = [].concat(_toConsumableArray(addrs), _toConsumableArray(listener.getAddrs()));\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return addrs;\n    }\n    /**\n     * Returns all the transports instances.\n     *\n     * @returns {IterableIterator<Transport>}\n     */\n\n  }, {\n    key: \"getTransports\",\n    value: function getTransports() {\n      return this._transports.values();\n    }\n    /**\n     * Finds a transport that matches the given Multiaddr\n     *\n     * @param {Multiaddr} ma\n     * @returns {Transport|null}\n     */\n\n  }, {\n    key: \"transportForMultiaddr\",\n    value: function transportForMultiaddr(ma) {\n      var _iterator5 = _createForOfIteratorHelper(this._transports.values()),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var transport = _step5.value;\n          var addrs = transport.filter([ma]);\n          if (addrs.length) return transport;\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      return null;\n    }\n    /**\n     * Starts listeners for each listen Multiaddr.\n     *\n     * @async\n     * @param {Multiaddr[]} addrs - addresses to attempt to listen on\n     */\n\n  }, {\n    key: \"listen\",\n    value: function () {\n      var _listen = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(addrs) {\n        var _this = this;\n\n        var couldNotListen, _iterator6, _step6, _step6$value, key, transport, supportedAddrs, tasks, _iterator7, _step7, addr, listener, results, isListening, message;\n\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(!addrs || addrs.length === 0)) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                log('no addresses were provided for listening, this node is dial only');\n                return _context3.abrupt(\"return\");\n\n              case 3:\n                couldNotListen = [];\n                _iterator6 = _createForOfIteratorHelper(this._transports.entries());\n                _context3.prev = 5;\n\n                _iterator6.s();\n\n              case 7:\n                if ((_step6 = _iterator6.n()).done) {\n                  _context3.next = 24;\n                  break;\n                }\n\n                _step6$value = _slicedToArray(_step6.value, 2), key = _step6$value[0], transport = _step6$value[1];\n                supportedAddrs = transport.filter(addrs);\n                tasks = []; // For each supported multiaddr, create a listener\n\n                _iterator7 = _createForOfIteratorHelper(supportedAddrs);\n\n                try {\n                  for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                    addr = _step7.value;\n                    log('creating listener for %s on %s', key, addr);\n                    listener = transport.createListener(this._listenerOptions.get(key));\n\n                    this._listeners.get(key).push(listener); // Track listen/close events\n\n\n                    listener.on('listening', function () {\n                      return updateSelfPeerRecord(_this.libp2p);\n                    });\n                    listener.on('close', function () {\n                      return updateSelfPeerRecord(_this.libp2p);\n                    }); // We need to attempt to listen on everything\n\n                    tasks.push(listener.listen(addr));\n                  } // Keep track of transports we had no addresses for\n\n                } catch (err) {\n                  _iterator7.e(err);\n                } finally {\n                  _iterator7.f();\n                }\n\n                if (!(tasks.length === 0)) {\n                  _context3.next = 16;\n                  break;\n                }\n\n                couldNotListen.push(key);\n                return _context3.abrupt(\"continue\", 22);\n\n              case 16:\n                _context3.next = 18;\n                return pSettle(tasks);\n\n              case 18:\n                results = _context3.sent;\n                // If we are listening on at least 1 address, succeed.\n                // TODO: we should look at adding a retry (`p-retry`) here to better support\n                // listening on remote addresses as they may be offline. We could then potentially\n                // just wait for any (`p-any`) listener to succeed on each transport before returning\n                isListening = results.find(function (r) {\n                  return r.isFulfilled === true;\n                });\n\n                if (!(!isListening && this.faultTolerance !== FAULT_TOLERANCE.NO_FATAL)) {\n                  _context3.next = 22;\n                  break;\n                }\n\n                throw errCode(new Error(\"Transport (\".concat(key, \") could not listen on any available address\")), codes.ERR_NO_VALID_ADDRESSES);\n\n              case 22:\n                _context3.next = 7;\n                break;\n\n              case 24:\n                _context3.next = 29;\n                break;\n\n              case 26:\n                _context3.prev = 26;\n                _context3.t0 = _context3[\"catch\"](5);\n\n                _iterator6.e(_context3.t0);\n\n              case 29:\n                _context3.prev = 29;\n\n                _iterator6.f();\n\n                return _context3.finish(29);\n\n              case 32:\n                if (!(couldNotListen.length === this._transports.size)) {\n                  _context3.next = 37;\n                  break;\n                }\n\n                message = \"no valid addresses were provided for transports [\".concat(couldNotListen, \"]\");\n\n                if (!(this.faultTolerance === FAULT_TOLERANCE.FATAL_ALL)) {\n                  _context3.next = 36;\n                  break;\n                }\n\n                throw errCode(new Error(message), codes.ERR_NO_VALID_ADDRESSES);\n\n              case 36:\n                log(\"libp2p in dial mode only: \".concat(message));\n\n              case 37:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[5, 26, 29, 32]]);\n      }));\n\n      function listen(_x3) {\n        return _listen.apply(this, arguments);\n      }\n\n      return listen;\n    }()\n    /**\n     * Removes the given transport from the manager.\n     * If a transport has any running listeners, they will be closed.\n     *\n     * @async\n     * @param {string} key\n     */\n\n  }, {\n    key: \"remove\",\n    value: function () {\n      var _remove = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(key) {\n        var _iterator8, _step8, listener;\n\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                log('removing %s', key);\n\n                if (!this._listeners.has(key)) {\n                  _context4.next = 21;\n                  break;\n                }\n\n                // Close any running listeners\n                _iterator8 = _createForOfIteratorHelper(this._listeners.get(key));\n                _context4.prev = 3;\n\n                _iterator8.s();\n\n              case 5:\n                if ((_step8 = _iterator8.n()).done) {\n                  _context4.next = 13;\n                  break;\n                }\n\n                listener = _step8.value;\n                listener.removeAllListeners('listening');\n                listener.removeAllListeners('close');\n                _context4.next = 11;\n                return listener.close();\n\n              case 11:\n                _context4.next = 5;\n                break;\n\n              case 13:\n                _context4.next = 18;\n                break;\n\n              case 15:\n                _context4.prev = 15;\n                _context4.t0 = _context4[\"catch\"](3);\n\n                _iterator8.e(_context4.t0);\n\n              case 18:\n                _context4.prev = 18;\n\n                _iterator8.f();\n\n                return _context4.finish(18);\n\n              case 21:\n                this._transports.delete(key);\n\n                this._listeners.delete(key);\n\n              case 23:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[3, 15, 18, 21]]);\n      }));\n\n      function remove(_x4) {\n        return _remove.apply(this, arguments);\n      }\n\n      return remove;\n    }()\n    /**\n     * Removes all transports from the manager.\n     * If any listeners are running, they will be closed.\n     *\n     * @async\n     */\n\n  }, {\n    key: \"removeAll\",\n    value: function () {\n      var _removeAll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var tasks, _iterator9, _step9, key;\n\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                tasks = [];\n                _iterator9 = _createForOfIteratorHelper(this._transports.keys());\n\n                try {\n                  for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n                    key = _step9.value;\n                    tasks.push(this.remove(key));\n                  }\n                } catch (err) {\n                  _iterator9.e(err);\n                } finally {\n                  _iterator9.f();\n                }\n\n                _context5.next = 5;\n                return Promise.all(tasks);\n\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function removeAll() {\n        return _removeAll.apply(this, arguments);\n      }\n\n      return removeAll;\n    }()\n  }]);\n\n  return TransportManager;\n}();\n/**\n * Enum Transport Manager Fault Tolerance values.\n * FATAL_ALL should be used for failing in any listen circumstance.\n * NO_FATAL should be used for not failing when not listening.\n *\n * @readonly\n * @enum {number}\n */\n\n\nvar FAULT_TOLERANCE = {\n  FATAL_ALL: 0,\n  NO_FATAL: 1\n};\nTransportManager.FaultTolerance = FAULT_TOLERANCE;\nmodule.exports = TransportManager;","map":{"version":3,"names":["debug","require","log","Object","assign","error","pSettle","codes","errCode","updateSelfPeerRecord","TransportManager","libp2p","upgrader","faultTolerance","FAULT_TOLERANCE","FATAL_ALL","_transports","Map","_listeners","_listenerOptions","key","Transport","transportOptions","Error","ERR_INVALID_KEY","has","ERR_DUPLICATE_TRANSPORT","transport","set","listenerOptions","tasks","listeners","length","listener","pop","removeAllListeners","push","close","Promise","all","keys","ma","options","transportForMultiaddr","String","ERR_TRANSPORT_UNAVAILABLE","dial","code","ERR_TRANSPORT_DIAL_FAILED","addrs","values","getAddrs","filter","couldNotListen","entries","supportedAddrs","addr","createListener","get","on","listen","results","isListening","find","r","isFulfilled","NO_FATAL","ERR_NO_VALID_ADDRESSES","size","message","delete","remove","FaultTolerance","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p/src/transport-manager.js"],"sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = Object.assign(debug('libp2p:transports'), {\n  error: debug('libp2p:transports:err')\n})\n\nconst pSettle = require('p-settle')\nconst { codes } = require('./errors')\nconst errCode = require('err-code')\n\nconst { updateSelfPeerRecord } = require('./record/utils')\n\n/**\n * @typedef {import('multiaddr').Multiaddr} Multiaddr\n * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection\n * @typedef {import('libp2p-interfaces/src/transport/types').TransportFactory<any, any>} TransportFactory\n * @typedef {import('libp2p-interfaces/src/transport/types').Transport<any, any>} Transport\n *\n * @typedef {Object} TransportManagerProperties\n * @property {import('./')} libp2p\n * @property {import('./upgrader')} upgrader\n *\n * @typedef {Object} TransportManagerOptions\n * @property {number} [faultTolerance = FAULT_TOLERANCE.FATAL_ALL] - Address listen error tolerance.\n */\n\nclass TransportManager {\n  /**\n   * @class\n   * @param {TransportManagerProperties & TransportManagerOptions} options\n   */\n  constructor ({ libp2p, upgrader, faultTolerance = FAULT_TOLERANCE.FATAL_ALL }) {\n    this.libp2p = libp2p\n    this.upgrader = upgrader\n    /** @type {Map<string, Transport>} */\n    this._transports = new Map()\n    this._listeners = new Map()\n    this._listenerOptions = new Map()\n    this.faultTolerance = faultTolerance\n  }\n\n  /**\n   * Adds a `Transport` to the manager\n   *\n   * @param {string} key\n   * @param {TransportFactory} Transport\n   * @param {*} transportOptions - Additional options to pass to the transport\n   * @returns {void}\n   */\n  add (key, Transport, transportOptions = {}) {\n    log('adding %s', key)\n    if (!key) {\n      throw errCode(new Error(`Transport must have a valid key, was given '${key}'`), codes.ERR_INVALID_KEY)\n    }\n    if (this._transports.has(key)) {\n      throw errCode(new Error('There is already a transport with this key'), codes.ERR_DUPLICATE_TRANSPORT)\n    }\n\n    const transport = new Transport({\n      ...transportOptions,\n      libp2p: this.libp2p,\n      upgrader: this.upgrader\n    })\n\n    this._transports.set(key, transport)\n    this._listenerOptions.set(key, transportOptions.listenerOptions || {})\n    if (!this._listeners.has(key)) {\n      this._listeners.set(key, [])\n    }\n  }\n\n  /**\n   * Stops all listeners\n   *\n   * @async\n   */\n  async close () {\n    const tasks = []\n    for (const [key, listeners] of this._listeners) {\n      log('closing listeners for %s', key)\n      while (listeners.length) {\n        const listener = listeners.pop()\n        listener.removeAllListeners('listening')\n        listener.removeAllListeners('close')\n        tasks.push(listener.close())\n      }\n    }\n\n    await Promise.all(tasks)\n    log('all listeners closed')\n    for (const key of this._listeners.keys()) {\n      this._listeners.set(key, [])\n    }\n  }\n\n  /**\n   * Dials the given Multiaddr over it's supported transport\n   *\n   * @param {Multiaddr} ma\n   * @param {*} options\n   * @returns {Promise<Connection>}\n   */\n  async dial (ma, options) {\n    const transport = this.transportForMultiaddr(ma)\n    if (!transport) {\n      throw errCode(new Error(`No transport available for address ${String(ma)}`), codes.ERR_TRANSPORT_UNAVAILABLE)\n    }\n\n    try {\n      return await transport.dial(ma, options)\n    } catch (err) {\n      if (!err.code) err.code = codes.ERR_TRANSPORT_DIAL_FAILED\n      throw err\n    }\n  }\n\n  /**\n   * Returns all Multiaddr's the listeners are using\n   *\n   * @returns {Multiaddr[]}\n   */\n  getAddrs () {\n    /** @type {Multiaddr[]} */\n    let addrs = []\n    for (const listeners of this._listeners.values()) {\n      for (const listener of listeners) {\n        addrs = [...addrs, ...listener.getAddrs()]\n      }\n    }\n    return addrs\n  }\n\n  /**\n   * Returns all the transports instances.\n   *\n   * @returns {IterableIterator<Transport>}\n   */\n  getTransports () {\n    return this._transports.values()\n  }\n\n  /**\n   * Finds a transport that matches the given Multiaddr\n   *\n   * @param {Multiaddr} ma\n   * @returns {Transport|null}\n   */\n  transportForMultiaddr (ma) {\n    for (const transport of this._transports.values()) {\n      const addrs = transport.filter([ma])\n      if (addrs.length) return transport\n    }\n    return null\n  }\n\n  /**\n   * Starts listeners for each listen Multiaddr.\n   *\n   * @async\n   * @param {Multiaddr[]} addrs - addresses to attempt to listen on\n   */\n  async listen (addrs) {\n    if (!addrs || addrs.length === 0) {\n      log('no addresses were provided for listening, this node is dial only')\n      return\n    }\n\n    const couldNotListen = []\n    for (const [key, transport] of this._transports.entries()) {\n      const supportedAddrs = transport.filter(addrs)\n      const tasks = []\n\n      // For each supported multiaddr, create a listener\n      for (const addr of supportedAddrs) {\n        log('creating listener for %s on %s', key, addr)\n        const listener = transport.createListener(this._listenerOptions.get(key))\n        this._listeners.get(key).push(listener)\n\n        // Track listen/close events\n        listener.on('listening', () => updateSelfPeerRecord(this.libp2p))\n        listener.on('close', () => updateSelfPeerRecord(this.libp2p))\n\n        // We need to attempt to listen on everything\n        tasks.push(listener.listen(addr))\n      }\n\n      // Keep track of transports we had no addresses for\n      if (tasks.length === 0) {\n        couldNotListen.push(key)\n        continue\n      }\n\n      const results = await pSettle(tasks)\n      // If we are listening on at least 1 address, succeed.\n      // TODO: we should look at adding a retry (`p-retry`) here to better support\n      // listening on remote addresses as they may be offline. We could then potentially\n      // just wait for any (`p-any`) listener to succeed on each transport before returning\n      const isListening = results.find(r => r.isFulfilled === true)\n      if (!isListening && this.faultTolerance !== FAULT_TOLERANCE.NO_FATAL) {\n        throw errCode(new Error(`Transport (${key}) could not listen on any available address`), codes.ERR_NO_VALID_ADDRESSES)\n      }\n    }\n\n    // If no transports were able to listen, throw an error. This likely\n    // means we were given addresses we do not have transports for\n    if (couldNotListen.length === this._transports.size) {\n      const message = `no valid addresses were provided for transports [${couldNotListen}]`\n      if (this.faultTolerance === FAULT_TOLERANCE.FATAL_ALL) {\n        throw errCode(new Error(message), codes.ERR_NO_VALID_ADDRESSES)\n      }\n      log(`libp2p in dial mode only: ${message}`)\n    }\n  }\n\n  /**\n   * Removes the given transport from the manager.\n   * If a transport has any running listeners, they will be closed.\n   *\n   * @async\n   * @param {string} key\n   */\n  async remove (key) {\n    log('removing %s', key)\n    if (this._listeners.has(key)) {\n      // Close any running listeners\n      for (const listener of this._listeners.get(key)) {\n        listener.removeAllListeners('listening')\n        listener.removeAllListeners('close')\n        await listener.close()\n      }\n    }\n\n    this._transports.delete(key)\n    this._listeners.delete(key)\n  }\n\n  /**\n   * Removes all transports from the manager.\n   * If any listeners are running, they will be closed.\n   *\n   * @async\n   */\n  async removeAll () {\n    const tasks = []\n    for (const key of this._transports.keys()) {\n      tasks.push(this.remove(key))\n    }\n\n    await Promise.all(tasks)\n  }\n}\n\n/**\n * Enum Transport Manager Fault Tolerance values.\n * FATAL_ALL should be used for failing in any listen circumstance.\n * NO_FATAL should be used for not failing when not listening.\n *\n * @readonly\n * @enum {number}\n */\nconst FAULT_TOLERANCE = {\n  FATAL_ALL: 0,\n  NO_FATAL: 1\n}\n\nTransportManager.FaultTolerance = FAULT_TOLERANCE\n\nmodule.exports = TransportManager\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}