{"ast":null,"code":"'use strict';\n\nconst errcode = require('err-code');\n\nconst CIPHER_MODES = {\n  16: 'aes-128-ctr',\n  32: 'aes-256-ctr'\n};\n\nmodule.exports = function (key) {\n  const mode = CIPHER_MODES[key.length];\n\n  if (!mode) {\n    const modes = Object.entries(CIPHER_MODES).map(_ref => {\n      let [k, v] = _ref;\n      return `${k} (${v})`;\n    }).join(' / ');\n    throw errcode(new Error(`Invalid key length ${key.length} bytes. Must be ${modes}`), 'ERR_INVALID_KEY_LENGTH');\n  }\n\n  return mode;\n};","map":{"version":3,"names":["errcode","require","CIPHER_MODES","module","exports","key","mode","length","modes","Object","entries","map","k","v","join","Error"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-crypto/src/aes/cipher-mode.js"],"sourcesContent":["'use strict'\n\nconst errcode = require('err-code')\n\nconst CIPHER_MODES = {\n  16: 'aes-128-ctr',\n  32: 'aes-256-ctr'\n}\n\nmodule.exports = function (key) {\n  const mode = CIPHER_MODES[key.length]\n  if (!mode) {\n    const modes = Object.entries(CIPHER_MODES).map(([k, v]) => `${k} (${v})`).join(' / ')\n    throw errcode(new Error(`Invalid key length ${key.length} bytes. Must be ${modes}`), 'ERR_INVALID_KEY_LENGTH')\n  }\n  return mode\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AAEA,MAAMC,YAAY,GAAG;EACnB,IAAI,aADe;EAEnB,IAAI;AAFe,CAArB;;AAKAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,GAAV,EAAe;EAC9B,MAAMC,IAAI,GAAGJ,YAAY,CAACG,GAAG,CAACE,MAAL,CAAzB;;EACA,IAAI,CAACD,IAAL,EAAW;IACT,MAAME,KAAK,GAAGC,MAAM,CAACC,OAAP,CAAeR,YAAf,EAA6BS,GAA7B,CAAiC;MAAA,IAAC,CAACC,CAAD,EAAIC,CAAJ,CAAD;MAAA,OAAa,GAAED,CAAE,KAAIC,CAAE,GAAvB;IAAA,CAAjC,EAA4DC,IAA5D,CAAiE,KAAjE,CAAd;IACA,MAAMd,OAAO,CAAC,IAAIe,KAAJ,CAAW,sBAAqBV,GAAG,CAACE,MAAO,mBAAkBC,KAAM,EAAnE,CAAD,EAAwE,wBAAxE,CAAb;EACD;;EACD,OAAOF,IAAP;AACD,CAPD"},"metadata":{},"sourceType":"script"}