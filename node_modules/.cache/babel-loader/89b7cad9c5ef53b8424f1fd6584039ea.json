{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar errCode = require('err-code');\n\nvar ipfsUnixfs = require('ipfs-unixfs');\n\nvar findCidInShard = require('../../utils/find-cid-in-shard.js');\n\nvar dagPb = require('@ipld/dag-pb');\n\nvar file = require('./content/file.js');\n\nvar directory = require('./content/directory.js');\n\nvar hamtShardedDirectory = require('./content/hamt-sharded-directory.js');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\n\nvar findLinkCid = function findLinkCid(node, name) {\n  var link = node.Links.find(function (link) {\n    return link.Name === name;\n  });\n  return link && link.Hash;\n};\n\nvar contentExporters = {\n  raw: file,\n  file: file,\n  directory: directory,\n  'hamt-sharded-directory': hamtShardedDirectory,\n  metadata: function metadata(cid, node, unixfs, path, resolve, depth, blockstore) {\n    return function () {\n      return [];\n    };\n  },\n  symlink: function symlink(cid, node, unixfs, path, resolve, depth, blockstore) {\n    return function () {\n      return [];\n    };\n  }\n};\n\nvar unixFsResolver = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(cid, name, path, toResolve, resolve, depth, blockstore, options) {\n    var block, node, unixfs, next, linkCid, nextName, nextPath;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return blockstore.get(cid, options);\n\n          case 2:\n            block = _context.sent;\n            node = dagPb.decode(block);\n\n            if (!name) {\n              name = cid.toString();\n            }\n\n            if (!(node.Data == null)) {\n              _context.next = 7;\n              break;\n            }\n\n            throw errCode__default[\"default\"](new Error('no data in PBNode'), 'ERR_NOT_UNIXFS');\n\n          case 7:\n            _context.prev = 7;\n            unixfs = ipfsUnixfs.UnixFS.unmarshal(node.Data);\n            _context.next = 14;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](7);\n            throw errCode__default[\"default\"](_context.t0, 'ERR_NOT_UNIXFS');\n\n          case 14:\n            if (!path) {\n              path = name;\n            }\n\n            if (!toResolve.length) {\n              _context.next = 28;\n              break;\n            }\n\n            if (!(unixfs && unixfs.type === 'hamt-sharded-directory')) {\n              _context.next = 22;\n              break;\n            }\n\n            _context.next = 19;\n            return findCidInShard(node, toResolve[0], blockstore);\n\n          case 19:\n            linkCid = _context.sent;\n            _context.next = 23;\n            break;\n\n          case 22:\n            linkCid = findLinkCid(node, toResolve[0]);\n\n          case 23:\n            if (linkCid) {\n              _context.next = 25;\n              break;\n            }\n\n            throw errCode__default[\"default\"](new Error('file does not exist'), 'ERR_NOT_FOUND');\n\n          case 25:\n            nextName = toResolve.shift();\n            nextPath = \"\".concat(path, \"/\").concat(nextName);\n            next = {\n              cid: linkCid,\n              toResolve: toResolve,\n              name: nextName || '',\n              path: nextPath\n            };\n\n          case 28:\n            return _context.abrupt(\"return\", {\n              entry: {\n                type: unixfs.isDirectory() ? 'directory' : 'file',\n                name: name,\n                path: path,\n                cid: cid,\n                content: contentExporters[unixfs.type](cid, node, unixfs, path, resolve, depth, blockstore),\n                unixfs: unixfs,\n                depth: depth,\n                node: node,\n                size: unixfs.fileSize()\n              },\n              next: next\n            });\n\n          case 29:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[7, 11]]);\n  }));\n\n  return function unixFsResolver(_x, _x2, _x3, _x4, _x5, _x6, _x7, _x8) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = unixFsResolver;","map":{"version":3,"names":["errCode","require","ipfsUnixfs","findCidInShard","dagPb","file","directory","hamtShardedDirectory","_interopDefaultLegacy","e","errCode__default","findLinkCid","node","name","link","Links","find","Name","Hash","contentExporters","raw","metadata","cid","unixfs","path","resolve","depth","blockstore","symlink","unixFsResolver","toResolve","options","get","block","decode","toString","Data","Error","UnixFS","unmarshal","length","type","linkCid","nextName","shift","nextPath","next","entry","isDirectory","content","size","fileSize","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-unixfs-exporter/cjs/src/resolvers/unixfs-v1/index.js"],"sourcesContent":["'use strict';\n\nvar errCode = require('err-code');\nvar ipfsUnixfs = require('ipfs-unixfs');\nvar findCidInShard = require('../../utils/find-cid-in-shard.js');\nvar dagPb = require('@ipld/dag-pb');\nvar file = require('./content/file.js');\nvar directory = require('./content/directory.js');\nvar hamtShardedDirectory = require('./content/hamt-sharded-directory.js');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\n\nconst findLinkCid = (node, name) => {\n  const link = node.Links.find(link => link.Name === name);\n  return link && link.Hash;\n};\nconst contentExporters = {\n  raw: file,\n  file: file,\n  directory: directory,\n  'hamt-sharded-directory': hamtShardedDirectory,\n  metadata: (cid, node, unixfs, path, resolve, depth, blockstore) => {\n    return () => [];\n  },\n  symlink: (cid, node, unixfs, path, resolve, depth, blockstore) => {\n    return () => [];\n  }\n};\nconst unixFsResolver = async (cid, name, path, toResolve, resolve, depth, blockstore, options) => {\n  const block = await blockstore.get(cid, options);\n  const node = dagPb.decode(block);\n  let unixfs;\n  let next;\n  if (!name) {\n    name = cid.toString();\n  }\n  if (node.Data == null) {\n    throw errCode__default[\"default\"](new Error('no data in PBNode'), 'ERR_NOT_UNIXFS');\n  }\n  try {\n    unixfs = ipfsUnixfs.UnixFS.unmarshal(node.Data);\n  } catch (err) {\n    throw errCode__default[\"default\"](err, 'ERR_NOT_UNIXFS');\n  }\n  if (!path) {\n    path = name;\n  }\n  if (toResolve.length) {\n    let linkCid;\n    if (unixfs && unixfs.type === 'hamt-sharded-directory') {\n      linkCid = await findCidInShard(node, toResolve[0], blockstore);\n    } else {\n      linkCid = findLinkCid(node, toResolve[0]);\n    }\n    if (!linkCid) {\n      throw errCode__default[\"default\"](new Error('file does not exist'), 'ERR_NOT_FOUND');\n    }\n    const nextName = toResolve.shift();\n    const nextPath = `${ path }/${ nextName }`;\n    next = {\n      cid: linkCid,\n      toResolve,\n      name: nextName || '',\n      path: nextPath\n    };\n  }\n  return {\n    entry: {\n      type: unixfs.isDirectory() ? 'directory' : 'file',\n      name,\n      path,\n      cid,\n      content: contentExporters[unixfs.type](cid, node, unixfs, path, resolve, depth, blockstore),\n      unixfs,\n      depth,\n      node,\n      size: unixfs.fileSize()\n    },\n    next\n  };\n};\n\nmodule.exports = unixFsResolver;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}