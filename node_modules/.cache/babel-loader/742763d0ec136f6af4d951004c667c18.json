{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar noop = function noop() {};\n\nvar topologySymbol = Symbol.for('@libp2p/js-interfaces/topology');\n/**\n * @typedef {import('peer-id')} PeerId\n */\n\n/**\n * @typedef {Object} Options\n * @property {number} [min=0] - minimum needed connections.\n * @property {number} [max=Infinity] - maximum needed connections.\n * @property {Handlers} [handlers]\n *\n * @typedef {Object} Handlers\n * @property {(peerId: PeerId, conn: Connection) => void} [onConnect] - protocol \"onConnect\" handler\n * @property {(peerId: PeerId, error?:Error) => void} [onDisconnect] - protocol \"onDisconnect\" handler\n *\n * @typedef {import('../connection/connection')} Connection\n */\n\nvar Topology = /*#__PURE__*/function (_Symbol$toStringTag) {\n  /**\n   * @param {Options} options\n   */\n  function Topology(_ref) {\n    var _ref$min = _ref.min,\n        min = _ref$min === void 0 ? 0 : _ref$min,\n        _ref$max = _ref.max,\n        max = _ref$max === void 0 ? Infinity : _ref$max,\n        _ref$handlers = _ref.handlers,\n        handlers = _ref$handlers === void 0 ? {} : _ref$handlers;\n\n    _classCallCheck(this, Topology);\n\n    this.min = min;\n    this.max = max; // Handlers\n\n    this._onConnect = handlers.onConnect || noop;\n    this._onDisconnect = handlers.onDisconnect || noop;\n    /**\n     * Set of peers that support the protocol.\n     *\n     * @type {Set<string>}\n     */\n\n    this.peers = new Set();\n  }\n\n  _createClass(Topology, [{\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return 'Topology';\n    }\n  }, {\n    key: topologySymbol,\n    get: function get() {\n      return true;\n    }\n    /**\n     * Checks if the given value is a Topology instance.\n     *\n     * @param {any} other\n     * @returns {other is Topology}\n     */\n\n  }, {\n    key: \"registrar\",\n    set:\n    /**\n     * @param {any} registrar\n     */\n    function set(registrar) {\n      // eslint-disable-line\n      this._registrar = registrar;\n    }\n    /**\n     * Notify about peer disconnected event.\n     *\n     * @param {PeerId} peerId\n     * @returns {void}\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect(peerId) {\n      this._onDisconnect(peerId);\n    }\n  }], [{\n    key: \"isTopology\",\n    value: function isTopology(other) {\n      return Boolean(other && other[topologySymbol]);\n    }\n  }]);\n\n  return Topology;\n}(Symbol.toStringTag);\n\nmodule.exports = Topology;","map":{"version":3,"names":["noop","topologySymbol","Symbol","for","Topology","min","max","Infinity","handlers","_onConnect","onConnect","_onDisconnect","onDisconnect","peers","Set","registrar","_registrar","peerId","other","Boolean","toStringTag","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-interfaces/src/topology/index.js"],"sourcesContent":["'use strict'\n\nconst noop = () => {}\nconst topologySymbol = Symbol.for('@libp2p/js-interfaces/topology')\n\n/**\n * @typedef {import('peer-id')} PeerId\n */\n\n/**\n * @typedef {Object} Options\n * @property {number} [min=0] - minimum needed connections.\n * @property {number} [max=Infinity] - maximum needed connections.\n * @property {Handlers} [handlers]\n *\n * @typedef {Object} Handlers\n * @property {(peerId: PeerId, conn: Connection) => void} [onConnect] - protocol \"onConnect\" handler\n * @property {(peerId: PeerId, error?:Error) => void} [onDisconnect] - protocol \"onDisconnect\" handler\n *\n * @typedef {import('../connection/connection')} Connection\n */\n\nclass Topology {\n  /**\n   * @param {Options} options\n   */\n  constructor ({\n    min = 0,\n    max = Infinity,\n    handlers = {}\n  }) {\n    this.min = min\n    this.max = max\n\n    // Handlers\n    this._onConnect = handlers.onConnect || noop\n    this._onDisconnect = handlers.onDisconnect || noop\n\n    /**\n     * Set of peers that support the protocol.\n     *\n     * @type {Set<string>}\n     */\n    this.peers = new Set()\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'Topology'\n  }\n\n  get [topologySymbol] () {\n    return true\n  }\n\n  /**\n   * Checks if the given value is a Topology instance.\n   *\n   * @param {any} other\n   * @returns {other is Topology}\n   */\n  static isTopology (other) {\n    return Boolean(other && other[topologySymbol])\n  }\n\n  /**\n   * @param {any} registrar\n   */\n  set registrar (registrar) { // eslint-disable-line\n    this._registrar = registrar\n  }\n\n  /**\n   * Notify about peer disconnected event.\n   *\n   * @param {PeerId} peerId\n   * @returns {void}\n   */\n  disconnect (peerId) {\n    this._onDisconnect(peerId)\n  }\n}\n\nmodule.exports = Topology\n"],"mappings":"AAAA;;;;;;AAEA,IAAMA,IAAI,GAAG,SAAPA,IAAO,GAAM,CAAE,CAArB;;AACA,IAAMC,cAAc,GAAGC,MAAM,CAACC,GAAP,CAAW,gCAAX,CAAvB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEMC,Q;EACJ;AACF;AACA;EACE,wBAIG;IAAA,oBAHDC,GAGC;IAAA,IAHDA,GAGC,yBAHK,CAGL;IAAA,oBAFDC,GAEC;IAAA,IAFDA,GAEC,yBAFKC,QAEL;IAAA,yBADDC,QACC;IAAA,IADDA,QACC,8BADU,EACV;;IAAA;;IACD,KAAKH,GAAL,GAAWA,GAAX;IACA,KAAKC,GAAL,GAAWA,GAAX,CAFC,CAID;;IACA,KAAKG,UAAL,GAAkBD,QAAQ,CAACE,SAAT,IAAsBV,IAAxC;IACA,KAAKW,aAAL,GAAqBH,QAAQ,CAACI,YAAT,IAAyBZ,IAA9C;IAEA;AACJ;AACA;AACA;AACA;;IACI,KAAKa,KAAL,GAAa,IAAIC,GAAJ,EAAb;EACD;;;;SAED,eAA4B;MAC1B,OAAO,UAAP;IACD;;SAEIb,c;SAAL,eAAwB;MACtB,OAAO,IAAP;IACD;IAED;AACF;AACA;AACA;AACA;AACA;;;;;IAKE;AACF;AACA;IACE,aAAec,SAAf,EAA0B;MAAE;MAC1B,KAAKC,UAAL,GAAkBD,SAAlB;IACD;IAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,oBAAYE,MAAZ,EAAoB;MAClB,KAAKN,aAAL,CAAmBM,MAAnB;IACD;;;WAnBD,oBAAmBC,KAAnB,EAA0B;MACxB,OAAOC,OAAO,CAACD,KAAK,IAAIA,KAAK,CAACjB,cAAD,CAAf,CAAd;IACD;;;;EAhBIC,MAAM,CAACkB,W;;AAoCdC,MAAM,CAACC,OAAP,GAAiBlB,QAAjB"},"metadata":{},"sourceType":"script"}