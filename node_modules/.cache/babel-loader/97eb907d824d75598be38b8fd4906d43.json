{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _objectSpread = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _awaitAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _wrapAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nvar _asyncIterator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar _require = require('multiaddr'),\n    Multiaddr = _require.Multiaddr;\n\nvar toCamel = require('../lib/object-to-camel');\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {DHTAPI[\"query\"]}\n   */\n  function query(_x) {\n    return _query.apply(this, arguments);\n  }\n\n  function _query() {\n    _query = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(peerId) {\n      var options,\n          res,\n          _iteratorAbruptCompletion,\n          _didIteratorError,\n          _iteratorError,\n          _iterator,\n          _step,\n          message,\n          _args = arguments;\n\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _context.next = 3;\n              return _awaitAsyncGenerator(api.post('dht/query', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: peerId.toString()\n                }, options)),\n                headers: options.headers\n              }));\n\n            case 3:\n              res = _context.sent;\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 6;\n              _iterator = _asyncIterator(res.ndjson());\n\n            case 8:\n              _context.next = 10;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 10:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 19;\n                break;\n              }\n\n              message = _step.value;\n              message = toCamel(message);\n              message.responses = (message.responses || []).map(function (\n              /** @type {{ ID: string, Addrs: string[] }} */\n              _ref) {\n                var ID = _ref.ID,\n                    Addrs = _ref.Addrs;\n                return {\n                  id: ID,\n                  addrs: (Addrs || []).map(function (\n                  /** @type {string} **/\n                  a) {\n                    return new Multiaddr(a);\n                  })\n                };\n              });\n              _context.next = 16;\n              return message;\n\n            case 16:\n              _iteratorAbruptCompletion = false;\n              _context.next = 8;\n              break;\n\n            case 19:\n              _context.next = 25;\n              break;\n\n            case 21:\n              _context.prev = 21;\n              _context.t0 = _context[\"catch\"](6);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n\n            case 25:\n              _context.prev = 25;\n              _context.prev = 26;\n\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 30;\n                break;\n              }\n\n              _context.next = 30;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 30:\n              _context.prev = 30;\n\n              if (!_didIteratorError) {\n                _context.next = 33;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 33:\n              return _context.finish(30);\n\n            case 34:\n              return _context.finish(25);\n\n            case 35:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[6, 21, 25, 35], [26,, 30, 34]]);\n    }));\n    return _query.apply(this, arguments);\n  }\n\n  return query;\n});","map":{"version":3,"names":["require","Multiaddr","toCamel","configure","toUrlSearchParams","module","exports","api","query","peerId","options","post","signal","searchParams","arg","toString","headers","res","ndjson","message","responses","map","ID","Addrs","id","addrs","a"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-http-client/src/dht/query.js"],"sourcesContent":["'use strict'\n\nconst { Multiaddr } = require('multiaddr')\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"query\"]}\n   */\n  async function * query (peerId, options = {}) {\n    const res = await api.post('dht/query', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: peerId.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (let message of res.ndjson()) {\n      message = toCamel(message)\n      message.responses = (message.responses || []).map((/** @type {{ ID: string, Addrs: string[] }} */ { ID, Addrs }) => ({\n        id: ID,\n        addrs: (Addrs || []).map((/** @type {string} **/ a) => new Multiaddr(a))\n      }))\n      yield message\n    }\n  }\n\n  return query\n})\n"],"mappings":"AAAA;;;;;;;;;;;;AAEA,eAAsBA,OAAO,CAAC,WAAD,CAA7B;AAAA,IAAQC,SAAR,YAAQA,SAAR;;AACA,IAAMC,OAAO,GAAGF,OAAO,CAAC,wBAAD,CAAvB;;AACA,IAAMG,SAAS,GAAGH,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMI,iBAAiB,GAAGJ,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAK,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAAC,UAAAI,GAAG,EAAI;EAChC;AACF;AACA;EAHkC,SAIfC,KAJe;IAAA;EAAA;;EAAA;IAAA,sEAIhC,iBAAwBC,MAAxB;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;;MAAA;QAAA;UAAA;YAAA;cAAgCC,OAAhC,2DAA0C,EAA1C;cAAA;cAAA,4BACoBH,GAAG,CAACI,IAAJ,CAAS,WAAT,EAAsB;gBACtCC,MAAM,EAAEF,OAAO,CAACE,MADsB;gBAEtCC,YAAY,EAAET,iBAAiB;kBAC7BU,GAAG,EAAEL,MAAM,CAACM,QAAP;gBADwB,GAE1BL,OAF0B,EAFO;gBAMtCM,OAAO,EAAEN,OAAO,CAACM;cANqB,CAAtB,CADpB;;YAAA;cACQC,GADR;cAAA;cAAA;cAAA;cAAA,2BAU4BA,GAAG,CAACC,MAAJ,EAV5B;;YAAA;cAAA;cAAA;;YAAA;cAAA;gBAAA;gBAAA;cAAA;;cAUiBC,OAVjB;cAWIA,OAAO,GAAGjB,OAAO,CAACiB,OAAD,CAAjB;cACAA,OAAO,CAACC,SAAR,GAAoB,CAACD,OAAO,CAACC,SAAR,IAAqB,EAAtB,EAA0BC,GAA1B,CAA8B;cAAC;cAAD;gBAAA,IAAkDC,EAAlD,QAAkDA,EAAlD;gBAAA,IAAsDC,KAAtD,QAAsDA,KAAtD;gBAAA,OAAmE;kBACnHC,EAAE,EAAEF,EAD+G;kBAEnHG,KAAK,EAAE,CAACF,KAAK,IAAI,EAAV,EAAcF,GAAd,CAAkB;kBAAC;kBAAuBK,CAAxB;oBAAA,OAA8B,IAAIzB,SAAJ,CAAcyB,CAAd,CAA9B;kBAAA,CAAlB;gBAF4G,CAAnE;cAAA,CAA9B,CAApB;cAZJ;cAgBI,OAAMP,OAAN;;YAhBJ;cAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;;cAAA;gBAAA;gBAAA;cAAA;;cAAA;cAAA;;YAAA;cAAA;;cAAA;gBAAA;gBAAA;cAAA;;cAAA;;YAAA;cAAA;;YAAA;cAAA;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAJgC;IAAA;EAAA;;EAwBhC,OAAOX,KAAP;AACD,CAzByB,CAA1B"},"metadata":{},"sourceType":"script"}