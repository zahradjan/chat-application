{"ast":null,"code":"const BufferList = require('bl/BufferList');\n\nmodule.exports = source => {\n  const reader = async function* () {\n    let bytes = yield; // Allows us to receive 8 when reader.next(8) is called\n\n    let bl = new BufferList();\n\n    for await (const chunk of source) {\n      if (!bytes) {\n        bytes = yield bl.append(chunk);\n        bl = new BufferList();\n        continue;\n      }\n\n      bl.append(chunk);\n\n      while (bl.length >= bytes) {\n        const data = bl.shallowSlice(0, bytes);\n        bl.consume(bytes);\n        bytes = yield data; // If we no longer want a specific byte length, we yield the rest now\n\n        if (!bytes) {\n          if (bl.length) {\n            bytes = yield bl;\n            bl = new BufferList();\n          }\n\n          break; // bytes is null and/or no more buffer to yield\n        }\n      }\n    } // Consumer wants more bytes but the source has ended and our buffer\n    // is not big enough to satisfy.\n\n\n    if (bytes) {\n      throw Object.assign(new Error(`stream ended before ${bytes} bytes became available`), {\n        code: 'ERR_UNDER_READ',\n        buffer: bl\n      });\n    }\n  }();\n\n  reader.next();\n  return reader;\n};","map":{"version":3,"names":["BufferList","require","module","exports","source","reader","bytes","bl","chunk","append","length","data","shallowSlice","consume","Object","assign","Error","code","buffer","next"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/it-reader/index.js"],"sourcesContent":["const BufferList = require('bl/BufferList')\n\nmodule.exports = source => {\n  const reader = (async function * () {\n    let bytes = yield // Allows us to receive 8 when reader.next(8) is called\n    let bl = new BufferList()\n\n    for await (const chunk of source) {\n      if (!bytes) {\n        bytes = yield bl.append(chunk)\n        bl = new BufferList()\n        continue\n      }\n\n      bl.append(chunk)\n\n      while (bl.length >= bytes) {\n        const data = bl.shallowSlice(0, bytes)\n        bl.consume(bytes)\n        bytes = yield data\n\n        // If we no longer want a specific byte length, we yield the rest now\n        if (!bytes) {\n          if (bl.length) {\n            bytes = yield bl\n            bl = new BufferList()\n          }\n          break // bytes is null and/or no more buffer to yield\n        }\n      }\n    }\n\n    // Consumer wants more bytes but the source has ended and our buffer\n    // is not big enough to satisfy.\n    if (bytes) {\n      throw Object.assign(\n        new Error(`stream ended before ${bytes} bytes became available`),\n        { code: 'ERR_UNDER_READ', buffer: bl }\n      )\n    }\n  })()\n\n  reader.next()\n  return reader\n}\n"],"mappings":"AAAA,MAAMA,UAAU,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,MAAM,IAAI;EACzB,MAAMC,MAAM,GAAI,mBAAoB;IAClC,IAAIC,KAAK,GAAG,KAAZ,CADkC,CAChB;;IAClB,IAAIC,EAAE,GAAG,IAAIP,UAAJ,EAAT;;IAEA,WAAW,MAAMQ,KAAjB,IAA0BJ,MAA1B,EAAkC;MAChC,IAAI,CAACE,KAAL,EAAY;QACVA,KAAK,GAAG,MAAMC,EAAE,CAACE,MAAH,CAAUD,KAAV,CAAd;QACAD,EAAE,GAAG,IAAIP,UAAJ,EAAL;QACA;MACD;;MAEDO,EAAE,CAACE,MAAH,CAAUD,KAAV;;MAEA,OAAOD,EAAE,CAACG,MAAH,IAAaJ,KAApB,EAA2B;QACzB,MAAMK,IAAI,GAAGJ,EAAE,CAACK,YAAH,CAAgB,CAAhB,EAAmBN,KAAnB,CAAb;QACAC,EAAE,CAACM,OAAH,CAAWP,KAAX;QACAA,KAAK,GAAG,MAAMK,IAAd,CAHyB,CAKzB;;QACA,IAAI,CAACL,KAAL,EAAY;UACV,IAAIC,EAAE,CAACG,MAAP,EAAe;YACbJ,KAAK,GAAG,MAAMC,EAAd;YACAA,EAAE,GAAG,IAAIP,UAAJ,EAAL;UACD;;UACD,MALU,CAKJ;QACP;MACF;IACF,CA3BiC,CA6BlC;IACA;;;IACA,IAAIM,KAAJ,EAAW;MACT,MAAMQ,MAAM,CAACC,MAAP,CACJ,IAAIC,KAAJ,CAAW,uBAAsBV,KAAM,yBAAvC,CADI,EAEJ;QAAEW,IAAI,EAAE,gBAAR;QAA0BC,MAAM,EAAEX;MAAlC,CAFI,CAAN;IAID;EACF,CArCc,EAAf;;EAuCAF,MAAM,CAACc,IAAP;EACA,OAAOd,MAAP;AACD,CA1CD"},"metadata":{},"sourceType":"script"}