{"ast":null,"code":"'use strict';\n\nvar schema = require('protocol-buffers-schema');\n\nconst {\n  Buffer\n} = require('buffer');\n\nvar compile = require('./compile');\n\nvar flatten = function (values) {\n  if (!values) return null;\n  var result = {};\n  Object.keys(values).forEach(function (k) {\n    result[k] = values[k].value;\n  });\n  return result;\n};\n\nmodule.exports = function (proto, opts) {\n  if (!opts) opts = {};\n  if (!proto) throw new Error('Pass in a .proto string or a protobuf-schema parsed object');\n  var sch = typeof proto === 'object' && !Buffer.isBuffer(proto) ? proto : schema.parse(proto); // to not make toString,toJSON enumarable we make a fire-and-forget prototype\n\n  var Messages = function () {\n    var self = this;\n    compile(sch, opts.encodings || {}).forEach(function (m) {\n      self[m.name] = flatten(m.values) || m;\n    });\n  };\n\n  Messages.prototype.toString = function () {\n    return schema.stringify(sch);\n  };\n\n  Messages.prototype.toJSON = function () {\n    return sch;\n  };\n\n  return new Messages();\n};","map":{"version":3,"names":["schema","require","Buffer","compile","flatten","values","result","Object","keys","forEach","k","value","module","exports","proto","opts","Error","sch","isBuffer","parse","Messages","self","encodings","m","name","prototype","toString","stringify","toJSON"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/protons/src/index.js"],"sourcesContent":["'use strict'\n\nvar schema = require('protocol-buffers-schema')\nconst { Buffer } = require('buffer')\nvar compile = require('./compile')\n\nvar flatten = function (values) {\n  if (!values) return null\n  var result = {}\n  Object.keys(values).forEach(function (k) {\n    result[k] = values[k].value\n  })\n  return result\n}\n\nmodule.exports = function (proto, opts) {\n  if (!opts) opts = {}\n  if (!proto) throw new Error('Pass in a .proto string or a protobuf-schema parsed object')\n\n  var sch = (typeof proto === 'object' && !Buffer.isBuffer(proto)) ? proto : schema.parse(proto)\n\n  // to not make toString,toJSON enumarable we make a fire-and-forget prototype\n  var Messages = function () {\n    var self = this\n\n    compile(sch, opts.encodings || {}).forEach(function (m) {\n      self[m.name] = flatten(m.values) || m\n    })\n  }\n\n  Messages.prototype.toString = function () {\n    return schema.stringify(sch)\n  }\n\n  Messages.prototype.toJSON = function () {\n    return sch\n  }\n\n  return new Messages()\n}\n"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,yBAAD,CAApB;;AACA,MAAM;EAAEC;AAAF,IAAaD,OAAO,CAAC,QAAD,CAA1B;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,WAAD,CAArB;;AAEA,IAAIG,OAAO,GAAG,UAAUC,MAAV,EAAkB;EAC9B,IAAI,CAACA,MAAL,EAAa,OAAO,IAAP;EACb,IAAIC,MAAM,GAAG,EAAb;EACAC,MAAM,CAACC,IAAP,CAAYH,MAAZ,EAAoBI,OAApB,CAA4B,UAAUC,CAAV,EAAa;IACvCJ,MAAM,CAACI,CAAD,CAAN,GAAYL,MAAM,CAACK,CAAD,CAAN,CAAUC,KAAtB;EACD,CAFD;EAGA,OAAOL,MAAP;AACD,CAPD;;AASAM,MAAM,CAACC,OAAP,GAAiB,UAAUC,KAAV,EAAiBC,IAAjB,EAAuB;EACtC,IAAI,CAACA,IAAL,EAAWA,IAAI,GAAG,EAAP;EACX,IAAI,CAACD,KAAL,EAAY,MAAM,IAAIE,KAAJ,CAAU,4DAAV,CAAN;EAEZ,IAAIC,GAAG,GAAI,OAAOH,KAAP,KAAiB,QAAjB,IAA6B,CAACZ,MAAM,CAACgB,QAAP,CAAgBJ,KAAhB,CAA/B,GAAyDA,KAAzD,GAAiEd,MAAM,CAACmB,KAAP,CAAaL,KAAb,CAA3E,CAJsC,CAMtC;;EACA,IAAIM,QAAQ,GAAG,YAAY;IACzB,IAAIC,IAAI,GAAG,IAAX;IAEAlB,OAAO,CAACc,GAAD,EAAMF,IAAI,CAACO,SAAL,IAAkB,EAAxB,CAAP,CAAmCb,OAAnC,CAA2C,UAAUc,CAAV,EAAa;MACtDF,IAAI,CAACE,CAAC,CAACC,IAAH,CAAJ,GAAepB,OAAO,CAACmB,CAAC,CAAClB,MAAH,CAAP,IAAqBkB,CAApC;IACD,CAFD;EAGD,CAND;;EAQAH,QAAQ,CAACK,SAAT,CAAmBC,QAAnB,GAA8B,YAAY;IACxC,OAAO1B,MAAM,CAAC2B,SAAP,CAAiBV,GAAjB,CAAP;EACD,CAFD;;EAIAG,QAAQ,CAACK,SAAT,CAAmBG,MAAnB,GAA4B,YAAY;IACtC,OAAOX,GAAP;EACD,CAFD;;EAIA,OAAO,IAAIG,QAAJ,EAAP;AACD,CAxBD"},"metadata":{},"sourceType":"script"}