{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encode = void 0;\n/**\n * Encode an object into the logfmt format.\n *\n * The option object accepts an `encodeKeys` option. When `true`, the keys, in\n * addition to the values, of the object will be encoded. This is generally not\n * necessary, but useful the keys being encoded isn't known.\n */\n\nfunction encode(obj) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let result = '';\n\n  for (const key in obj) {\n    const value = obj[key];\n    let encodedValue = value;\n\n    if (value == null) {\n      encodedValue = '';\n    } else {\n      encodedValue = encodeString(String(value));\n    }\n\n    const keyString = opts.encodeKeys ? encodeString(key) : key;\n    result += `${keyString}=${encodedValue} `;\n  }\n\n  return result.trim();\n}\n\nexports.encode = encode;\n\nfunction encodeString(string) {\n  if (string === '') {\n    return '\"\"';\n  }\n\n  let encoded = string.split(/\\n/g).join(' ');\n  if (/[\"\\\\]/.test(encoded)) encoded = encoded.replace(/[\"\\\\]/g, '\\\\$&');\n\n  if (/[\\s=]/.test(encoded)) {\n    encoded = `\"${encoded}\"`;\n  }\n\n  return encoded;\n}","map":{"version":3,"mappings":";;;;;;AAMA;;;;;;;;AAOA,SAAgBA,MAAhB,CAAuBC,GAAvB,EAAgE;EAAA,IAAxBC,IAAwB,uEAAF,EAAE;EAC9D,IAAIC,MAAM,GAAG,EAAb;;EAEA,KAAK,MAAMC,GAAX,IAAkBH,GAAlB,EAAuB;IACrB,MAAMI,KAAK,GAAGJ,GAAG,CAACG,GAAD,CAAjB;IAEA,IAAIE,YAAY,GAAGD,KAAnB;;IAEA,IAAIA,KAAK,IAAI,IAAb,EAAmB;MACjBC,YAAY,GAAG,EAAf;IACD,CAFD,MAEO;MACLA,YAAY,GAAGC,YAAY,CAACC,MAAM,CAACH,KAAD,CAAP,CAA3B;IACD;;IAED,MAAMI,SAAS,GAAGP,IAAI,CAACQ,UAAL,GAAkBH,YAAY,CAACH,GAAD,CAA9B,GAAsCA,GAAxD;IAEAD,MAAM,IAAI,GAAGM,SAAS,IAAIH,YAAY,GAAtC;EACD;;EAED,OAAOH,MAAM,CAACQ,IAAP,EAAP;AACD;;AApBDC;;AAsBA,SAASL,YAAT,CAAsBM,MAAtB,EAAoC;EAClC,IAAIA,MAAM,KAAK,EAAf,EAAmB;IACjB,OAAO,IAAP;EACD;;EAED,IAAIC,OAAO,GAAGD,MAAM,CAACE,KAAP,CAAa,KAAb,EAAoBC,IAApB,CAAyB,GAAzB,CAAd;EACA,IAAI,QAAQC,IAAR,CAAaH,OAAb,CAAJ,EAA2BA,OAAO,GAAGA,OAAO,CAACI,OAAR,CAAgB,QAAhB,EAA0B,MAA1B,CAAV;;EAE3B,IAAI,QAAQD,IAAR,CAAaH,OAAb,CAAJ,EAA2B;IACzBA,OAAO,GAAG,IAAIA,OAAO,GAArB;EACD;;EAED,OAAOA,OAAP;AACD","names":["encode","obj","opts","result","key","value","encodedValue","encodeString","String","keyString","encodeKeys","trim","exports","string","encoded","split","join","test","replace"],"sourceRoot":"","sources":["../lib/encode.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}