{"ast":null,"code":"'use strict';\n\nconst PeerId = require('peer-id');\n\nconst {\n  Multiaddr\n} = require('multiaddr');\n\nconst mafmt = require('mafmt');\n\nconst {\n  EventEmitter\n} = require('events');\n\nconst debug = require('debug');\n\nconst log = Object.assign(debug('libp2p:bootstrap'), {\n  error: debug('libp2p:bootstrap:error')\n});\n/**\n * Emits 'peer' events on a regular interval for each peer in the provided list.\n */\n\nclass Bootstrap extends EventEmitter {\n  /**\n   * Constructs a new Bootstrap.\n   *\n   * @param {Object} options\n   * @param {Array<string>} options.list - the list of peer addresses in multi-address format\n   * @param {number} [options.interval = 10000] - the interval between emitting addresses in milliseconds\n   *\n   */\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      list: []\n    };\n\n    if (!options.list || !options.list.length) {\n      throw new Error('Bootstrap requires a list of peer addresses');\n    }\n\n    super();\n    this._list = options.list;\n    this._interval = options.interval || 10000;\n    this._timer = null;\n  }\n  /**\n   * Start emitting events.\n   */\n\n\n  start() {\n    if (this._timer) {\n      return;\n    }\n\n    this._timer = setInterval(() => this._discoverBootstrapPeers(), this._interval);\n    log('Starting bootstrap node discovery');\n\n    this._discoverBootstrapPeers();\n  }\n  /**\n   * Emit each address in the list as a PeerInfo.\n   */\n\n\n  _discoverBootstrapPeers() {\n    if (!this._timer) {\n      return;\n    }\n\n    this._list.forEach(candidate => {\n      if (!mafmt.P2P.matches(candidate)) {\n        return log.error('Invalid multiaddr');\n      }\n\n      const ma = new Multiaddr(candidate);\n      const peerIdStr = ma.getPeerId();\n\n      if (!peerIdStr) {\n        log.error('Invalid bootstrap multiaddr without peer id');\n        return;\n      }\n\n      const peerId = PeerId.createFromB58String(peerIdStr);\n\n      try {\n        this.emit('peer', {\n          id: peerId,\n          multiaddrs: [ma]\n        });\n      } catch (err) {\n        log.error('Invalid bootstrap peer id', err);\n      }\n    });\n  }\n  /**\n   * Stop emitting events.\n   */\n\n\n  stop() {\n    if (this._timer) clearInterval(this._timer);\n    this._timer = null;\n  }\n\n}\n\nexports = module.exports = Bootstrap;\nexports.tag = 'bootstrap';","map":{"version":3,"names":["PeerId","require","Multiaddr","mafmt","EventEmitter","debug","log","Object","assign","error","Bootstrap","constructor","options","list","length","Error","_list","_interval","interval","_timer","start","setInterval","_discoverBootstrapPeers","forEach","candidate","P2P","matches","ma","peerIdStr","getPeerId","peerId","createFromB58String","emit","id","multiaddrs","err","stop","clearInterval","exports","module","tag"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-bootstrap/src/index.js"],"sourcesContent":["'use strict'\n\nconst PeerId = require('peer-id')\nconst { Multiaddr } = require('multiaddr')\nconst mafmt = require('mafmt')\nconst { EventEmitter } = require('events')\nconst debug = require('debug')\n\nconst log = Object.assign(debug('libp2p:bootstrap'), {\n  error: debug('libp2p:bootstrap:error')\n})\n\n/**\n * Emits 'peer' events on a regular interval for each peer in the provided list.\n */\nclass Bootstrap extends EventEmitter {\n  /**\n   * Constructs a new Bootstrap.\n   *\n   * @param {Object} options\n   * @param {Array<string>} options.list - the list of peer addresses in multi-address format\n   * @param {number} [options.interval = 10000] - the interval between emitting addresses in milliseconds\n   *\n   */\n  constructor (options = { list: [] }) {\n    if (!options.list || !options.list.length) {\n      throw new Error('Bootstrap requires a list of peer addresses')\n    }\n    super()\n\n    this._list = options.list\n    this._interval = options.interval || 10000\n    this._timer = null\n  }\n\n  /**\n   * Start emitting events.\n   */\n  start () {\n    if (this._timer) {\n      return\n    }\n\n    this._timer = setInterval(() => this._discoverBootstrapPeers(), this._interval)\n    log('Starting bootstrap node discovery')\n    this._discoverBootstrapPeers()\n  }\n\n  /**\n   * Emit each address in the list as a PeerInfo.\n   */\n  _discoverBootstrapPeers () {\n    if (!this._timer) {\n      return\n    }\n\n    this._list.forEach((candidate) => {\n      if (!mafmt.P2P.matches(candidate)) {\n        return log.error('Invalid multiaddr')\n      }\n\n      const ma = new Multiaddr(candidate)\n      const peerIdStr = ma.getPeerId()\n\n      if (!peerIdStr) {\n        log.error('Invalid bootstrap multiaddr without peer id')\n        return\n      }\n\n      const peerId = PeerId.createFromB58String(peerIdStr)\n\n      try {\n        this.emit('peer', {\n          id: peerId,\n          multiaddrs: [ma]\n        })\n      } catch (err) {\n        log.error('Invalid bootstrap peer id', err)\n      }\n    })\n  }\n\n  /**\n   * Stop emitting events.\n   */\n  stop () {\n    if (this._timer) clearInterval(this._timer)\n    this._timer = null\n  }\n}\n\nexports = module.exports = Bootstrap\nexports.tag = 'bootstrap'\n"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAtB;;AACA,MAAM;EAAEC;AAAF,IAAgBD,OAAO,CAAC,WAAD,CAA7B;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AACA,MAAM;EAAEG;AAAF,IAAmBH,OAAO,CAAC,QAAD,CAAhC;;AACA,MAAMI,KAAK,GAAGJ,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAMK,GAAG,GAAGC,MAAM,CAACC,MAAP,CAAcH,KAAK,CAAC,kBAAD,CAAnB,EAAyC;EACnDI,KAAK,EAAEJ,KAAK,CAAC,wBAAD;AADuC,CAAzC,CAAZ;AAIA;AACA;AACA;;AACA,MAAMK,SAAN,SAAwBN,YAAxB,CAAqC;EACnC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEO,WAAW,GAA0B;IAAA,IAAxBC,OAAwB,uEAAd;MAAEC,IAAI,EAAE;IAAR,CAAc;;IACnC,IAAI,CAACD,OAAO,CAACC,IAAT,IAAiB,CAACD,OAAO,CAACC,IAAR,CAAaC,MAAnC,EAA2C;MACzC,MAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;IACD;;IACD;IAEA,KAAKC,KAAL,GAAaJ,OAAO,CAACC,IAArB;IACA,KAAKI,SAAL,GAAiBL,OAAO,CAACM,QAAR,IAAoB,KAArC;IACA,KAAKC,MAAL,GAAc,IAAd;EACD;EAED;AACF;AACA;;;EACEC,KAAK,GAAI;IACP,IAAI,KAAKD,MAAT,EAAiB;MACf;IACD;;IAED,KAAKA,MAAL,GAAcE,WAAW,CAAC,MAAM,KAAKC,uBAAL,EAAP,EAAuC,KAAKL,SAA5C,CAAzB;IACAX,GAAG,CAAC,mCAAD,CAAH;;IACA,KAAKgB,uBAAL;EACD;EAED;AACF;AACA;;;EACEA,uBAAuB,GAAI;IACzB,IAAI,CAAC,KAAKH,MAAV,EAAkB;MAChB;IACD;;IAED,KAAKH,KAAL,CAAWO,OAAX,CAAoBC,SAAD,IAAe;MAChC,IAAI,CAACrB,KAAK,CAACsB,GAAN,CAAUC,OAAV,CAAkBF,SAAlB,CAAL,EAAmC;QACjC,OAAOlB,GAAG,CAACG,KAAJ,CAAU,mBAAV,CAAP;MACD;;MAED,MAAMkB,EAAE,GAAG,IAAIzB,SAAJ,CAAcsB,SAAd,CAAX;MACA,MAAMI,SAAS,GAAGD,EAAE,CAACE,SAAH,EAAlB;;MAEA,IAAI,CAACD,SAAL,EAAgB;QACdtB,GAAG,CAACG,KAAJ,CAAU,6CAAV;QACA;MACD;;MAED,MAAMqB,MAAM,GAAG9B,MAAM,CAAC+B,mBAAP,CAA2BH,SAA3B,CAAf;;MAEA,IAAI;QACF,KAAKI,IAAL,CAAU,MAAV,EAAkB;UAChBC,EAAE,EAAEH,MADY;UAEhBI,UAAU,EAAE,CAACP,EAAD;QAFI,CAAlB;MAID,CALD,CAKE,OAAOQ,GAAP,EAAY;QACZ7B,GAAG,CAACG,KAAJ,CAAU,2BAAV,EAAuC0B,GAAvC;MACD;IACF,CAvBD;EAwBD;EAED;AACF;AACA;;;EACEC,IAAI,GAAI;IACN,IAAI,KAAKjB,MAAT,EAAiBkB,aAAa,CAAC,KAAKlB,MAAN,CAAb;IACjB,KAAKA,MAAL,GAAc,IAAd;EACD;;AAzEkC;;AA4ErCmB,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiB5B,SAA3B;AACA4B,OAAO,CAACE,GAAR,GAAc,WAAd"},"metadata":{},"sourceType":"script"}