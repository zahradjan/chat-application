{"ast":null,"code":"'use strict';\n\nconst multihashing = require('multihashing-async');\n\nconst protobuf = require('protons');\n\nconst bs58 = require('bs58');\n\nconst crypto = require('./ed25519');\n\nconst pbm = protobuf(require('./keys.proto'));\n\nclass Ed25519PublicKey {\n  constructor(key) {\n    this._key = ensureKey(key, crypto.publicKeyLength);\n  }\n\n  verify(data, sig, callback) {\n    ensure(callback);\n    crypto.hashAndVerify(this._key, sig, data, callback);\n  }\n\n  marshal() {\n    return Buffer.from(this._key);\n  }\n\n  get bytes() {\n    return pbm.PublicKey.encode({\n      Type: pbm.KeyType.Ed25519,\n      Data: this.marshal()\n    });\n  }\n\n  equals(key) {\n    return this.bytes.equals(key.bytes);\n  }\n\n  hash(callback) {\n    ensure(callback);\n    multihashing(this.bytes, 'sha2-256', callback);\n  }\n\n}\n\nclass Ed25519PrivateKey {\n  // key       - 64 byte Uint8Array or Buffer containing private key\n  // publicKey - 32 byte Uint8Array or Buffer containing public key\n  constructor(key, publicKey) {\n    this._key = ensureKey(key, crypto.privateKeyLength);\n    this._publicKey = ensureKey(publicKey, crypto.publicKeyLength);\n  }\n\n  sign(message, callback) {\n    ensure(callback);\n    crypto.hashAndSign(this._key, message, callback);\n  }\n\n  get public() {\n    if (!this._publicKey) {\n      throw new Error('public key not provided');\n    }\n\n    return new Ed25519PublicKey(this._publicKey);\n  }\n\n  marshal() {\n    return Buffer.concat([Buffer.from(this._key), Buffer.from(this._publicKey)]);\n  }\n\n  get bytes() {\n    return pbm.PrivateKey.encode({\n      Type: pbm.KeyType.Ed25519,\n      Data: this.marshal()\n    });\n  }\n\n  equals(key) {\n    return this.bytes.equals(key.bytes);\n  }\n\n  hash(callback) {\n    ensure(callback);\n    multihashing(this.bytes, 'sha2-256', callback);\n  }\n  /**\n   * Gets the ID of the key.\n   *\n   * The key id is the base58 encoding of the SHA-256 multihash of its public key.\n   * The public key is a protobuf encoding containing a type and the DER encoding\n   * of the PKCS SubjectPublicKeyInfo.\n   *\n   * @param {function(Error, id)} callback\n   * @returns {undefined}\n   */\n\n\n  id(callback) {\n    this.public.hash((err, hash) => {\n      if (err) {\n        return callback(err);\n      }\n\n      callback(null, bs58.encode(hash));\n    });\n  }\n\n}\n\nfunction unmarshalEd25519PrivateKey(bytes, callback) {\n  try {\n    bytes = ensureKey(bytes, crypto.privateKeyLength + crypto.publicKeyLength);\n  } catch (err) {\n    return callback(err);\n  }\n\n  const privateKeyBytes = bytes.slice(0, crypto.privateKeyLength);\n  const publicKeyBytes = bytes.slice(crypto.privateKeyLength, bytes.length);\n  callback(null, new Ed25519PrivateKey(privateKeyBytes, publicKeyBytes));\n}\n\nfunction unmarshalEd25519PublicKey(bytes) {\n  bytes = ensureKey(bytes, crypto.publicKeyLength);\n  return new Ed25519PublicKey(bytes);\n}\n\nfunction generateKeyPair(_bits, cb) {\n  if (cb === undefined && typeof _bits === 'function') {\n    cb = _bits;\n  }\n\n  crypto.generateKey((err, keys) => {\n    if (err) {\n      return cb(err);\n    }\n\n    let privkey;\n\n    try {\n      privkey = new Ed25519PrivateKey(keys.secretKey, keys.publicKey);\n    } catch (err) {\n      cb(err);\n      return;\n    }\n\n    cb(null, privkey);\n  });\n}\n\nfunction generateKeyPairFromSeed(seed, _bits, cb) {\n  if (cb === undefined && typeof _bits === 'function') {\n    cb = _bits;\n  }\n\n  crypto.generateKeyFromSeed(seed, (err, keys) => {\n    if (err) {\n      return cb(err);\n    }\n\n    let privkey;\n\n    try {\n      privkey = new Ed25519PrivateKey(keys.secretKey, keys.publicKey);\n    } catch (err) {\n      cb(err);\n      return;\n    }\n\n    cb(null, privkey);\n  });\n}\n\nfunction ensure(cb) {\n  if (typeof cb !== 'function') {\n    throw new Error('callback is required');\n  }\n}\n\nfunction ensureKey(key, length) {\n  if (Buffer.isBuffer(key)) {\n    key = new Uint8Array(key);\n  }\n\n  if (!(key instanceof Uint8Array) || key.length !== length) {\n    throw new Error('Key must be a Uint8Array or Buffer of length ' + length);\n  }\n\n  return key;\n}\n\nmodule.exports = {\n  Ed25519PublicKey,\n  Ed25519PrivateKey,\n  unmarshalEd25519PrivateKey,\n  unmarshalEd25519PublicKey,\n  generateKeyPair,\n  generateKeyPairFromSeed\n};","map":{"version":3,"names":["multihashing","require","protobuf","bs58","crypto","pbm","Ed25519PublicKey","constructor","key","_key","ensureKey","publicKeyLength","verify","data","sig","callback","ensure","hashAndVerify","marshal","Buffer","from","bytes","PublicKey","encode","Type","KeyType","Ed25519","Data","equals","hash","Ed25519PrivateKey","publicKey","privateKeyLength","_publicKey","sign","message","hashAndSign","public","Error","concat","PrivateKey","id","err","unmarshalEd25519PrivateKey","privateKeyBytes","slice","publicKeyBytes","length","unmarshalEd25519PublicKey","generateKeyPair","_bits","cb","undefined","generateKey","keys","privkey","secretKey","generateKeyPairFromSeed","seed","generateKeyFromSeed","isBuffer","Uint8Array","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/orbit-db-keystore/node_modules/libp2p-crypto/src/keys/ed25519-class.js"],"sourcesContent":["'use strict'\n\nconst multihashing = require('multihashing-async')\nconst protobuf = require('protons')\nconst bs58 = require('bs58')\n\nconst crypto = require('./ed25519')\nconst pbm = protobuf(require('./keys.proto'))\n\nclass Ed25519PublicKey {\n  constructor (key) {\n    this._key = ensureKey(key, crypto.publicKeyLength)\n  }\n\n  verify (data, sig, callback) {\n    ensure(callback)\n    crypto.hashAndVerify(this._key, sig, data, callback)\n  }\n\n  marshal () {\n    return Buffer.from(this._key)\n  }\n\n  get bytes () {\n    return pbm.PublicKey.encode({\n      Type: pbm.KeyType.Ed25519,\n      Data: this.marshal()\n    })\n  }\n\n  equals (key) {\n    return this.bytes.equals(key.bytes)\n  }\n\n  hash (callback) {\n    ensure(callback)\n    multihashing(this.bytes, 'sha2-256', callback)\n  }\n}\n\nclass Ed25519PrivateKey {\n  // key       - 64 byte Uint8Array or Buffer containing private key\n  // publicKey - 32 byte Uint8Array or Buffer containing public key\n  constructor (key, publicKey) {\n    this._key = ensureKey(key, crypto.privateKeyLength)\n    this._publicKey = ensureKey(publicKey, crypto.publicKeyLength)\n  }\n\n  sign (message, callback) {\n    ensure(callback)\n    crypto.hashAndSign(this._key, message, callback)\n  }\n\n  get public () {\n    if (!this._publicKey) {\n      throw new Error('public key not provided')\n    }\n\n    return new Ed25519PublicKey(this._publicKey)\n  }\n\n  marshal () {\n    return Buffer.concat([Buffer.from(this._key), Buffer.from(this._publicKey)])\n  }\n\n  get bytes () {\n    return pbm.PrivateKey.encode({\n      Type: pbm.KeyType.Ed25519,\n      Data: this.marshal()\n    })\n  }\n\n  equals (key) {\n    return this.bytes.equals(key.bytes)\n  }\n\n  hash (callback) {\n    ensure(callback)\n    multihashing(this.bytes, 'sha2-256', callback)\n  }\n\n  /**\n   * Gets the ID of the key.\n   *\n   * The key id is the base58 encoding of the SHA-256 multihash of its public key.\n   * The public key is a protobuf encoding containing a type and the DER encoding\n   * of the PKCS SubjectPublicKeyInfo.\n   *\n   * @param {function(Error, id)} callback\n   * @returns {undefined}\n   */\n  id (callback) {\n    this.public.hash((err, hash) => {\n      if (err) {\n        return callback(err)\n      }\n      callback(null, bs58.encode(hash))\n    })\n  }\n}\n\nfunction unmarshalEd25519PrivateKey (bytes, callback) {\n  try {\n    bytes = ensureKey(bytes, crypto.privateKeyLength + crypto.publicKeyLength)\n  } catch (err) {\n    return callback(err)\n  }\n  const privateKeyBytes = bytes.slice(0, crypto.privateKeyLength)\n  const publicKeyBytes = bytes.slice(crypto.privateKeyLength, bytes.length)\n  callback(null, new Ed25519PrivateKey(privateKeyBytes, publicKeyBytes))\n}\n\nfunction unmarshalEd25519PublicKey (bytes) {\n  bytes = ensureKey(bytes, crypto.publicKeyLength)\n  return new Ed25519PublicKey(bytes)\n}\n\nfunction generateKeyPair (_bits, cb) {\n  if (cb === undefined && typeof _bits === 'function') {\n    cb = _bits\n  }\n\n  crypto.generateKey((err, keys) => {\n    if (err) {\n      return cb(err)\n    }\n    let privkey\n    try {\n      privkey = new Ed25519PrivateKey(keys.secretKey, keys.publicKey)\n    } catch (err) {\n      cb(err)\n      return\n    }\n\n    cb(null, privkey)\n  })\n}\n\nfunction generateKeyPairFromSeed (seed, _bits, cb) {\n  if (cb === undefined && typeof _bits === 'function') {\n    cb = _bits\n  }\n\n  crypto.generateKeyFromSeed(seed, (err, keys) => {\n    if (err) {\n      return cb(err)\n    }\n    let privkey\n    try {\n      privkey = new Ed25519PrivateKey(keys.secretKey, keys.publicKey)\n    } catch (err) {\n      cb(err)\n      return\n    }\n\n    cb(null, privkey)\n  })\n}\n\nfunction ensure (cb) {\n  if (typeof cb !== 'function') {\n    throw new Error('callback is required')\n  }\n}\n\nfunction ensureKey (key, length) {\n  if (Buffer.isBuffer(key)) {\n    key = new Uint8Array(key)\n  }\n  if (!(key instanceof Uint8Array) || key.length !== length) {\n    throw new Error('Key must be a Uint8Array or Buffer of length ' + length)\n  }\n  return key\n}\n\nmodule.exports = {\n  Ed25519PublicKey,\n  Ed25519PrivateKey,\n  unmarshalEd25519PrivateKey,\n  unmarshalEd25519PublicKey,\n  generateKeyPair,\n  generateKeyPairFromSeed\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}