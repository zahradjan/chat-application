{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar Key = require('interface-datastore').Key;\n\nvar debug = require('debug');\n\nvar log = debug('ipfs:repo:version');\n\nvar _require = require('uint8arrays/to-string'),\n    uint8ArrayToString = _require.toString;\n\nvar _require2 = require('uint8arrays/from-string'),\n    uint8ArrayFromString = _require2.fromString;\n\nvar _require3 = require('ipfs-repo-migrations/src/utils'),\n    hasWithFallback = _require3.hasWithFallback,\n    getWithFallback = _require3.getWithFallback;\n\nvar versionKey = new Key('version');\n/**\n *\n * @param {import('interface-datastore').Datastore} store\n */\n\nmodule.exports = function (store) {\n  return {\n    /**\n     * Check if a version file exists.\n     *\n     */\n    exists: function exists() {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", hasWithFallback(versionKey, store.has.bind(store), store));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n\n    /**\n     * Get the current version.\n     *\n     * @returns {Promise<number>}\n     */\n    get: function get() {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var buf;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return getWithFallback(versionKey, store.get.bind(store), store.has.bind(store), store);\n\n              case 2:\n                buf = _context2.sent;\n                return _context2.abrupt(\"return\", parseInt(uint8ArrayToString(buf), 10));\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n\n    /**\n     * Set the version of the repo, writing it to the underlying store.\n     *\n     * @param {number} version\n     * @returns {Promise<void>}\n     */\n    set: function set(version) {\n      return store.put(versionKey, uint8ArrayFromString(String(version)));\n    },\n\n    /**\n     * Check the current version, and returns true if versions matches\n     *\n     * @param {number} expected\n     */\n    check: function check(expected) {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var version, compatibleVersion;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return _this.get();\n\n              case 2:\n                version = _context3.sent;\n                log('comparing version: %s and %s', version, expected); // Version 6 and 7 are the same\n                // TODO: Clean up the compatibility logic. Repo feature detection would be ideal, or a better version schema\n\n                compatibleVersion = version === 6 && expected === 7 || expected === 6 && version === 7;\n                return _context3.abrupt(\"return\", version === expected || compatibleVersion);\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    }\n  };\n};","map":{"version":3,"names":["Key","require","debug","log","uint8ArrayToString","toString","uint8ArrayFromString","fromString","hasWithFallback","getWithFallback","versionKey","module","exports","store","exists","has","bind","get","buf","parseInt","set","version","put","String","check","expected","compatibleVersion"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-repo/src/version.js"],"sourcesContent":["'use strict'\n\nconst Key = require('interface-datastore').Key\nconst debug = require('debug')\nconst log = debug('ipfs:repo:version')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\nconst {\n  hasWithFallback,\n  getWithFallback\n// @ts-ignore\n} = require('ipfs-repo-migrations/src/utils')\n\nconst versionKey = new Key('version')\n\n/**\n *\n * @param {import('interface-datastore').Datastore} store\n */\nmodule.exports = (store) => {\n  return {\n    /**\n     * Check if a version file exists.\n     *\n     */\n    async exists () { // eslint-disable-line require-await\n      // level-js@5.x cannot read keys from level-js@4.x dbs so fall back to\n      // using IndexedDB API with string keys - only necessary until we do\n      // the migratiion to v10 or above\n      return hasWithFallback(versionKey, store.has.bind(store), store)\n    },\n    /**\n     * Get the current version.\n     *\n     * @returns {Promise<number>}\n     */\n    async get () {\n      // level-js@5.x cannot read keys from level-js@4.x dbs so fall back to\n      // using IndexedDB API with string keys - only necessary until we do\n      // the migratiion to v10 or above\n      const buf = await getWithFallback(versionKey, store.get.bind(store), store.has.bind(store), store)\n      return parseInt(uint8ArrayToString(buf), 10)\n    },\n    /**\n     * Set the version of the repo, writing it to the underlying store.\n     *\n     * @param {number} version\n     * @returns {Promise<void>}\n     */\n    set (version) {\n      return store.put(versionKey, uint8ArrayFromString(String(version)))\n    },\n    /**\n     * Check the current version, and returns true if versions matches\n     *\n     * @param {number} expected\n     */\n    async check (expected) {\n      const version = await this.get()\n      log('comparing version: %s and %s', version, expected)\n      // Version 6 and 7 are the same\n      // TODO: Clean up the compatibility logic. Repo feature detection would be ideal, or a better version schema\n      const compatibleVersion = (version === 6 && expected === 7) || (expected === 6 && version === 7)\n\n      return version === expected || compatibleVersion\n    }\n  }\n}\n"],"mappings":"AAAA;;;;;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,qBAAD,CAAP,CAA+BD,GAA3C;;AACA,IAAME,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,IAAME,GAAG,GAAGD,KAAK,CAAC,mBAAD,CAAjB;;AACA,eAAyCD,OAAO,CAAC,uBAAD,CAAhD;AAAA,IAAkBG,kBAAlB,YAAQC,QAAR;;AACA,gBAA6CJ,OAAO,CAAC,yBAAD,CAApD;AAAA,IAAoBK,oBAApB,aAAQC,UAAR;;AACA,gBAIIN,OAAO,CAAC,gCAAD,CAJX;AAAA,IACEO,eADF,aACEA,eADF;AAAA,IAEEC,eAFF,aAEEA,eAFF;;AAMA,IAAMC,UAAU,GAAG,IAAIV,GAAJ,CAAQ,SAAR,CAAnB;AAEA;AACA;AACA;AACA;;AACAW,MAAM,CAACC,OAAP,GAAiB,UAACC,KAAD,EAAW;EAC1B,OAAO;IACL;AACJ;AACA;AACA;IACUC,MALD,oBAKW;MAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,iCAIPN,eAAe,CAACE,UAAD,EAAaG,KAAK,CAACE,GAAN,CAAUC,IAAV,CAAeH,KAAf,CAAb,EAAoCA,KAApC,CAJR;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAKf,CAVI;;IAWL;AACJ;AACA;AACA;AACA;IACUI,GAhBD,iBAgBQ;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OAIOR,eAAe,CAACC,UAAD,EAAaG,KAAK,CAACI,GAAN,CAAUD,IAAV,CAAeH,KAAf,CAAb,EAAoCA,KAAK,CAACE,GAAN,CAAUC,IAAV,CAAeH,KAAf,CAApC,EAA2DA,KAA3D,CAJtB;;cAAA;gBAILK,GAJK;gBAAA,kCAKJC,QAAQ,CAACf,kBAAkB,CAACc,GAAD,CAAnB,EAA0B,EAA1B,CALJ;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAMZ,CAtBI;;IAuBL;AACJ;AACA;AACA;AACA;AACA;IACIE,GA7BK,eA6BAC,OA7BA,EA6BS;MACZ,OAAOR,KAAK,CAACS,GAAN,CAAUZ,UAAV,EAAsBJ,oBAAoB,CAACiB,MAAM,CAACF,OAAD,CAAP,CAA1C,CAAP;IACD,CA/BI;;IAgCL;AACJ;AACA;AACA;AACA;IACUG,KArCD,iBAqCQC,QArCR,EAqCkB;MAAA;;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACC,KAAI,CAACR,GAAL,EADD;;cAAA;gBACfI,OADe;gBAErBlB,GAAG,CAAC,8BAAD,EAAiCkB,OAAjC,EAA0CI,QAA1C,CAAH,CAFqB,CAGrB;gBACA;;gBACMC,iBALe,GAKML,OAAO,KAAK,CAAZ,IAAiBI,QAAQ,KAAK,CAA/B,IAAsCA,QAAQ,KAAK,CAAb,IAAkBJ,OAAO,KAAK,CALzE;gBAAA,kCAOdA,OAAO,KAAKI,QAAZ,IAAwBC,iBAPV;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAQtB;EA7CI,CAAP;AA+CD,CAhDD"},"metadata":{},"sourceType":"script"}