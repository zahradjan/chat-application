{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _objectSpread = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _assertThisInitialized = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\n\nvar _inherits = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar _asyncGeneratorDelegate = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate.js\").default;\n\nvar _awaitAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _wrapAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nvar _asyncIterator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar _require = require('events'),\n    EventEmitter = _require.EventEmitter;\n\nvar errcode = require('err-code');\n\nvar libp2pRecord = require('libp2p-record');\n\nvar _require2 = require('interface-datastore'),\n    MemoryDatastore = _require2.MemoryDatastore;\n\nvar _require3 = require('uint8arrays/equals'),\n    uint8ArrayEquals = _require3.equals;\n\nvar _require4 = require('uint8arrays/to-string'),\n    uint8ArrayToString = _require4.toString;\n\nvar RoutingTable = require('./routing-table');\n\nvar utils = require('./utils');\n\nvar c = require('./constants');\n\nvar Network = require('./network');\n\nvar contentFetching = require('./content-fetching');\n\nvar contentRouting = require('./content-routing');\n\nvar peerRouting = require('./peer-routing');\n\nvar Message = require('./message');\n\nvar Providers = require('./providers');\n\nvar QueryManager = require('./query-manager');\n\nvar Record = libp2pRecord.Record;\n/**\n * @typedef {*} Libp2p\n * @typedef {*} PeerStore\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {*} Dialer\n * @typedef {*} Registrar\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('multiaddr').Multiaddr} Multiaddr\n * @typedef {object} PeerData\n * @property {PeerId} id\n * @property {Multiaddr[]} multiaddrs\n */\n\n/**\n * A DHT implementation modeled after Kademlia with S/Kademlia modifications.\n * Original implementation in go: https://github.com/libp2p/go-libp2p-kad-dht.\n */\n\nvar KadDHT = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(KadDHT, _EventEmitter);\n\n  var _super = _createSuper(KadDHT);\n\n  /**\n   * Create a new KadDHT.\n   *\n   * @param {Object} props\n   * @param {Libp2p} props.libp2p - the libp2p instance\n   * @param {Dialer} props.dialer - libp2p dialer instance\n   * @param {PeerId} props.peerId - peer's peerId\n   * @param {PeerStore} props.peerStore - libp2p peerStore\n   * @param {Registrar} props.registrar - libp2p registrar instance\n   * @param {string} [props.protocolPrefix = '/ipfs'] - libp2p registrar handle protocol\n   * @param {boolean} [props.forceProtocolLegacy = false] - WARNING: this is not recommended and should only be used for legacy purposes\n   * @param {number} props.kBucketSize - k-bucket size (default 20)\n   * @param {boolean} props.clientMode - If true, the DHT will not respond to queries. This should be true if your node will not be dialable. (default: false)\n   * @param {number} props.concurrency - alpha concurrency of queries (default 3)\n   * @param {Datastore} props.datastore - datastore (default MemoryDatastore)\n   * @param {object} props.validators - validators object with namespace as keys and function(key, record, callback)\n   * @param {object} props.selectors - selectors object with namespace as keys and function(key, records)\n   * @param {function(import('libp2p-record').Record, PeerId): void} [props.onPut] - Called when an entry is added to or changed in the datastore\n   * @param {function(import('libp2p-record').Record): void} [props.onRemove] - Called when an entry is removed from the datastore\n   */\n  function KadDHT(_ref) {\n    var _this3;\n\n    var libp2p = _ref.libp2p,\n        dialer = _ref.dialer,\n        peerId = _ref.peerId,\n        peerStore = _ref.peerStore,\n        registrar = _ref.registrar,\n        _ref$protocolPrefix = _ref.protocolPrefix,\n        protocolPrefix = _ref$protocolPrefix === void 0 ? '/ipfs' : _ref$protocolPrefix,\n        _ref$forceProtocolLeg = _ref.forceProtocolLegacy,\n        forceProtocolLegacy = _ref$forceProtocolLeg === void 0 ? false : _ref$forceProtocolLeg,\n        _ref$datastore = _ref.datastore,\n        datastore = _ref$datastore === void 0 ? new MemoryDatastore() : _ref$datastore,\n        _ref$kBucketSize = _ref.kBucketSize,\n        kBucketSize = _ref$kBucketSize === void 0 ? c.K : _ref$kBucketSize,\n        _ref$clientMode = _ref.clientMode,\n        clientMode = _ref$clientMode === void 0 ? false : _ref$clientMode,\n        _ref$concurrency = _ref.concurrency,\n        concurrency = _ref$concurrency === void 0 ? c.ALPHA : _ref$concurrency,\n        _ref$validators = _ref.validators,\n        validators = _ref$validators === void 0 ? {} : _ref$validators,\n        _ref$selectors = _ref.selectors,\n        selectors = _ref$selectors === void 0 ? {} : _ref$selectors,\n        _ref$onPut = _ref.onPut,\n        onPut = _ref$onPut === void 0 ? function () {} : _ref$onPut,\n        _ref$onRemove = _ref.onRemove,\n        onRemove = _ref$onRemove === void 0 ? function () {} : _ref$onRemove;\n\n    _classCallCheck(this, KadDHT);\n\n    _this3 = _super.call(this);\n\n    if (!dialer) {\n      throw new Error('libp2p-kad-dht requires an instance of Dialer');\n    }\n    /**\n     * Local reference to the libp2p instance. May be undefined.\n     *\n     * @type {Libp2p}\n     */\n\n\n    _this3.libp2p = libp2p;\n    /**\n     * Local reference to the libp2p dialer instance\n     *\n     * @type {Dialer}\n     */\n\n    _this3.dialer = dialer;\n    /**\n     * Local peer-id\n     *\n     * @type {PeerId}\n     */\n\n    _this3.peerId = peerId;\n    /**\n     * Local PeerStore\n     *\n     * @type {PeerStore}\n     */\n\n    _this3.peerStore = peerStore;\n    /**\n     * Local peer info\n     *\n     * @type {Registrar}\n     */\n\n    _this3.registrar = registrar;\n    /**\n     * Registrar protocol\n     *\n     * @type {string}\n     */\n\n    _this3.protocol = protocolPrefix + (forceProtocolLegacy ? '' : c.PROTOCOL_DHT);\n    /**\n     * k-bucket size\n     *\n     * @type {number}\n     */\n\n    _this3.kBucketSize = kBucketSize;\n    _this3._clientMode = clientMode;\n    /**\n     * ALPHA concurrency at which each query path with run, defaults to 3\n     *\n     * @type {number}\n     */\n\n    _this3.concurrency = concurrency;\n    /**\n     * Number of disjoint query paths to use\n     * This is set to `kBucketSize`/2 per the S/Kademlia paper\n     *\n     * @type {number}\n     */\n\n    _this3.disjointPaths = Math.ceil(_this3.kBucketSize / 2);\n    /**\n     * The routing table.\n     *\n     * @type {RoutingTable}\n     */\n\n    _this3.routingTable = new RoutingTable(_assertThisInitialized(_this3), {\n      kBucketSize: _this3.kBucketSize\n    });\n    /**\n     * Reference to the datastore, uses an in-memory store if none given.\n     *\n     * @type {Datastore}\n     */\n\n    _this3.datastore = datastore;\n    /**\n     * Provider management\n     *\n     * @type {Providers}\n     */\n\n    _this3.providers = new Providers(_this3.datastore, _this3.peerId);\n    _this3.validators = _objectSpread({\n      pk: libp2pRecord.validator.validators.pk\n    }, validators);\n    _this3.selectors = _objectSpread({\n      pk: libp2pRecord.selection.selectors.pk\n    }, selectors);\n    _this3.network = new Network(_assertThisInitialized(_this3));\n    _this3._log = utils.logger(_this3.peerId);\n    /**\n     * Keeps track of running queries\n     *\n     * @type {QueryManager}\n     */\n\n    _this3._queryManager = new QueryManager();\n    _this3._running = false; // DHT components\n\n    _this3.contentFetching = contentFetching(_assertThisInitialized(_this3));\n    _this3.contentRouting = contentRouting(_assertThisInitialized(_this3));\n    _this3.peerRouting = peerRouting(_assertThisInitialized(_this3)); // datastore events\n\n    _this3.onPut = onPut;\n    _this3.onRemove = onRemove;\n    return _this3;\n  }\n  /**\n   * Is this DHT running.\n   */\n\n\n  _createClass(KadDHT, [{\n    key: \"isStarted\",\n    get: function get() {\n      return this._running;\n    }\n    /**\n     * Start listening to incoming connections.\n     */\n\n  }, {\n    key: \"start\",\n    value: function start() {\n      this._running = true;\n      return Promise.all([this.providers.start(), this._queryManager.start(), this.network.start(), this.routingTable.start()]);\n    }\n    /**\n     * Stop accepting incoming connections and sending outgoing\n     * messages.\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this._running = false;\n      return Promise.all([this.providers.stop(), this._queryManager.stop(), this.network.stop(), this.routingTable.stop()]);\n    }\n    /**\n     * Store the given key/value  pair in the DHT.\n     *\n     * @param {Uint8Array} key\n     * @param {Uint8Array} value\n     * @param {Object} [options] - put options\n     * @param {number} [options.minPeers] - minimum number of peers required to successfully put (default: closestPeers.length)\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"put\",\n    value: function () {\n      var _put = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(key, value) {\n        var options,\n            _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n                return _context.abrupt(\"return\", this.contentFetching.put(key, value, options));\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function put(_x, _x2) {\n        return _put.apply(this, arguments);\n      }\n\n      return put;\n    }()\n    /**\n     * Get the value to the given key.\n     * Times out after 1 minute by default.\n     *\n     * @param {Uint8Array} key\n     * @param {Object} [options] - get options\n     * @param {number} [options.timeout] - optional timeout (default: 60000)\n     * @returns {Promise<Uint8Array>}\n     */\n\n  }, {\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(key) {\n        var options,\n            _args2 = arguments;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n                return _context2.abrupt(\"return\", this.contentFetching.get(key, options));\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function get(_x3) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }()\n    /**\n     * Get the `n` values to the given key without sorting.\n     *\n     * @param {Uint8Array} key\n     * @param {number} nvals\n     * @param {Object} [options] - get options\n     * @param {number} [options.timeout] - optional timeout (default: 60000)\n     */\n\n  }, {\n    key: \"getMany\",\n    value: function () {\n      var _getMany = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(key, nvals) {\n        var options,\n            _args3 = arguments;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                options = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : {};\n                return _context3.abrupt(\"return\", this.contentFetching.getMany(key, nvals, options));\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getMany(_x4, _x5) {\n        return _getMany.apply(this, arguments);\n      }\n\n      return getMany;\n    }()\n    /**\n     * Remove the given key from the local datastore.\n     *\n     * @param {Uint8Array} key\n     */\n\n  }, {\n    key: \"removeLocal\",\n    value: function () {\n      var _removeLocal = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(key) {\n        var dsKey;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this._log(\"removeLocal: \".concat(uint8ArrayToString(key, 'base32')));\n\n                dsKey = utils.bufferToKey(key);\n                _context4.prev = 2;\n                _context4.next = 5;\n                return this.datastore.delete(dsKey);\n\n              case 5:\n                _context4.next = 12;\n                break;\n\n              case 7:\n                _context4.prev = 7;\n                _context4.t0 = _context4[\"catch\"](2);\n\n                if (!(_context4.t0.code === 'ERR_NOT_FOUND')) {\n                  _context4.next = 11;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", undefined);\n\n              case 11:\n                throw _context4.t0;\n\n              case 12:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[2, 7]]);\n      }));\n\n      function removeLocal(_x6) {\n        return _removeLocal.apply(this, arguments);\n      }\n\n      return removeLocal;\n    }()\n    /**\n     * @param {Uint8Array} key\n     * @param {Uint8Array} value\n     */\n\n  }, {\n    key: \"_putLocal\",\n    value: function () {\n      var _putLocal2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(key, value) {\n        var dsKey;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                this._log(\"_putLocal: \".concat(uint8ArrayToString(key, 'base32')));\n\n                dsKey = utils.bufferToKey(key);\n                _context5.next = 4;\n                return this.datastore.put(dsKey, value);\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function _putLocal(_x7, _x8) {\n        return _putLocal2.apply(this, arguments);\n      }\n\n      return _putLocal;\n    }() // ----------- Content Routing\n\n    /**\n     * Announce to the network that we can provide given key's value.\n     *\n     * @param {CID} key\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"provide\",\n    value: function () {\n      var _provide = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(key) {\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                return _context6.abrupt(\"return\", this.contentRouting.provide(key));\n\n              case 1:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function provide(_x9) {\n        return _provide.apply(this, arguments);\n      }\n\n      return provide;\n    }()\n    /**\n     * Search the dht for up to `K` providers of the given CID.\n     *\n     * @param {CID} key\n     * @param {Object} [options] - findProviders options\n     * @param {number} [options.timeout=60000] - how long the query should maximally run, in milliseconds (default: 60000)\n     * @param {number} [options.maxNumProviders=5] - maximum number of providers to find\n     * @returns {AsyncIterable<{ id: PeerId, multiaddrs: Multiaddr[] }>}\n     */\n\n  }, {\n    key: \"findProviders\",\n    value: function findProviders(key) {\n      var _this = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        timeout: 6000,\n        maxNumProviders: 5\n      };\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, peerData;\n\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _iteratorAbruptCompletion = false;\n                _didIteratorError = false;\n                _context7.prev = 2;\n                _iterator = _asyncIterator(_this.contentRouting.findProviders(key, options));\n\n              case 4:\n                _context7.next = 6;\n                return _awaitAsyncGenerator(_iterator.next());\n\n              case 6:\n                if (!(_iteratorAbruptCompletion = !(_step = _context7.sent).done)) {\n                  _context7.next = 13;\n                  break;\n                }\n\n                peerData = _step.value;\n                _context7.next = 10;\n                return peerData;\n\n              case 10:\n                _iteratorAbruptCompletion = false;\n                _context7.next = 4;\n                break;\n\n              case 13:\n                _context7.next = 19;\n                break;\n\n              case 15:\n                _context7.prev = 15;\n                _context7.t0 = _context7[\"catch\"](2);\n                _didIteratorError = true;\n                _iteratorError = _context7.t0;\n\n              case 19:\n                _context7.prev = 19;\n                _context7.prev = 20;\n\n                if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                  _context7.next = 24;\n                  break;\n                }\n\n                _context7.next = 24;\n                return _awaitAsyncGenerator(_iterator.return());\n\n              case 24:\n                _context7.prev = 24;\n\n                if (!_didIteratorError) {\n                  _context7.next = 27;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 27:\n                return _context7.finish(24);\n\n              case 28:\n                return _context7.finish(19);\n\n              case 29:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, null, [[2, 15, 19, 29], [20,, 24, 28]]);\n      }))();\n    } // ----------- Peer Routing -----------\n\n    /**\n     * Search for a peer with the given ID.\n     *\n     * @param {PeerId} id\n     * @param {Object} [options] - findPeer options\n     * @param {number} [options.timeout=60000] - how long the query should maximally run, in milliseconds (default: 60000)\n     * @returns {Promise<{ id: PeerId, multiaddrs: Multiaddr[] }>}\n     */\n\n  }, {\n    key: \"findPeer\",\n    value: function () {\n      var _findPeer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(id) {\n        var options,\n            _args8 = arguments;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                options = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : {\n                  timeout: 60000\n                };\n                return _context8.abrupt(\"return\", this.peerRouting.findPeer(id, options));\n\n              case 2:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function findPeer(_x10) {\n        return _findPeer.apply(this, arguments);\n      }\n\n      return findPeer;\n    }()\n    /**\n     * Kademlia 'node lookup' operation.\n     *\n     * @param {Uint8Array} key\n     * @param {Object} [options]\n     * @param {boolean} [options.shallow = false] - shallow query\n     */\n\n  }, {\n    key: \"getClosestPeers\",\n    value: function getClosestPeers(key) {\n      var _this2 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        shallow: false\n      };\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                return _context9.delegateYield(_asyncGeneratorDelegate(_asyncIterator(_this2.peerRouting.getClosestPeers(key, options)), _awaitAsyncGenerator), \"t0\", 1);\n\n              case 1:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9);\n      }))();\n    }\n    /**\n     * Get the public key for the given peer id.\n     *\n     * @param {PeerId} peer\n     */\n\n  }, {\n    key: \"getPublicKey\",\n    value: function getPublicKey(peer) {\n      return this.peerRouting.getPublicKey(peer);\n    } // ----------- Discovery -----------\n\n    /**\n     * @param {PeerId} peerId\n     * @param {Multiaddr[]} multiaddrs\n     */\n\n  }, {\n    key: \"_peerDiscovered\",\n    value: function _peerDiscovered(peerId, multiaddrs) {\n      this.emit('peer', {\n        id: peerId,\n        multiaddrs: multiaddrs\n      });\n    } // ----------- Internals -----------\n\n    /**\n     * Returns the routing tables closest peers, for the key of\n     * the message.\n     *\n     * @param {Message} msg\n     */\n\n  }, {\n    key: \"_nearestPeersToQuery\",\n    value: function () {\n      var _nearestPeersToQuery2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(msg) {\n        var _this4 = this;\n\n        var key, ids;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return utils.convertBuffer(msg.key);\n\n              case 2:\n                key = _context10.sent;\n                ids = this.routingTable.closestPeers(key, this.kBucketSize);\n                return _context10.abrupt(\"return\", ids.map(function (p) {\n                  /** @type {{ id: PeerId, addresses: { multiaddr: Multiaddr }[] }} */\n                  var peer = _this4.peerStore.get(p);\n\n                  return {\n                    id: p,\n                    multiaddrs: peer ? peer.addresses.map(function (address) {\n                      return address.multiaddr;\n                    }) : []\n                  };\n                }));\n\n              case 5:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function _nearestPeersToQuery(_x11) {\n        return _nearestPeersToQuery2.apply(this, arguments);\n      }\n\n      return _nearestPeersToQuery;\n    }()\n    /**\n     * Get the nearest peers to the given query, but iff closer\n     * than self.\n     *\n     * @param {Message} msg\n     * @param {PeerId} peerId\n     */\n\n  }, {\n    key: \"_betterPeersToQuery\",\n    value: function () {\n      var _betterPeersToQuery2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(msg, peerId) {\n        var _this5 = this;\n\n        var closer;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                this._log('betterPeersToQuery');\n\n                _context11.next = 3;\n                return this._nearestPeersToQuery(msg);\n\n              case 3:\n                closer = _context11.sent;\n                return _context11.abrupt(\"return\", closer.filter(function (closer) {\n                  if (_this5._isSelf(closer.id)) {\n                    // Should bail, not sure\n                    _this5._log.error('trying to return self as closer');\n\n                    return false;\n                  }\n\n                  return !closer.id.isEqual(peerId);\n                }));\n\n              case 5:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function _betterPeersToQuery(_x12, _x13) {\n        return _betterPeersToQuery2.apply(this, arguments);\n      }\n\n      return _betterPeersToQuery;\n    }()\n    /**\n     * Try to fetch a given record by from the local datastore.\n     * Returns the record iff it is still valid, meaning\n     * - it was either authored by this node, or\n     * - it was received less than `MAX_RECORD_AGE` ago.\n     *\n     * @param {Uint8Array} key\n     */\n\n  }, {\n    key: \"_checkLocalDatastore\",\n    value: function () {\n      var _checkLocalDatastore2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(key) {\n        var dsKey, rawRecord, record;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                this._log(\"checkLocalDatastore: \".concat(uint8ArrayToString(key), \" %b\"), key);\n\n                dsKey = utils.bufferToKey(key); // Fetch value from ds\n\n                _context12.prev = 2;\n                _context12.next = 5;\n                return this.datastore.get(dsKey);\n\n              case 5:\n                rawRecord = _context12.sent;\n                _context12.next = 13;\n                break;\n\n              case 8:\n                _context12.prev = 8;\n                _context12.t0 = _context12[\"catch\"](2);\n\n                if (!(_context12.t0.code === 'ERR_NOT_FOUND')) {\n                  _context12.next = 12;\n                  break;\n                }\n\n                return _context12.abrupt(\"return\", undefined);\n\n              case 12:\n                throw _context12.t0;\n\n              case 13:\n                // Create record from the returned bytes\n                record = Record.deserialize(rawRecord);\n\n                if (record) {\n                  _context12.next = 16;\n                  break;\n                }\n\n                throw errcode(new Error('Invalid record'), 'ERR_INVALID_RECORD');\n\n              case 16:\n                if (!(record.timeReceived == null || utils.now() - record.timeReceived.getTime() > c.MAX_RECORD_AGE)) {\n                  _context12.next = 21;\n                  break;\n                }\n\n                _context12.next = 19;\n                return this.datastore.delete(dsKey);\n\n              case 19:\n                this.onRemove(record);\n                return _context12.abrupt(\"return\", undefined);\n\n              case 21:\n                return _context12.abrupt(\"return\", record);\n\n              case 22:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this, [[2, 8]]);\n      }));\n\n      function _checkLocalDatastore(_x14) {\n        return _checkLocalDatastore2.apply(this, arguments);\n      }\n\n      return _checkLocalDatastore;\n    }()\n    /**\n     * Add the peer to the routing table and update it in the peerStore.\n     *\n     * @param {PeerId} peerId\n     */\n\n  }, {\n    key: \"_add\",\n    value: function () {\n      var _add2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(peerId) {\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return this.routingTable.add(peerId);\n\n              case 2:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function _add(_x15) {\n        return _add2.apply(this, arguments);\n      }\n\n      return _add;\n    }()\n    /**\n     * Verify a record without searching the DHT.\n     *\n     * @param {import('libp2p-record').Record} record\n     */\n\n  }, {\n    key: \"_verifyRecordLocally\",\n    value: function () {\n      var _verifyRecordLocally2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(record) {\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                this._log('verifyRecordLocally');\n\n                _context14.next = 3;\n                return libp2pRecord.validator.verifyRecord(this.validators, record);\n\n              case 3:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function _verifyRecordLocally(_x16) {\n        return _verifyRecordLocally2.apply(this, arguments);\n      }\n\n      return _verifyRecordLocally;\n    }()\n    /**\n     * Is the given peer id our PeerId?\n     *\n     * @param {PeerId} other\n     */\n\n  }, {\n    key: \"_isSelf\",\n    value: function _isSelf(other) {\n      return other && uint8ArrayEquals(this.peerId.id, other.id);\n    }\n    /**\n     * Store the given key/value pair at the peer `target`.\n     *\n     * @param {Uint8Array} key\n     * @param {Uint8Array} rec - encoded record\n     * @param {PeerId} target\n     */\n\n  }, {\n    key: \"_putValueToPeer\",\n    value: function () {\n      var _putValueToPeer2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(key, rec, target) {\n        var msg, resp;\n        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                msg = new Message(Message.TYPES.PUT_VALUE, key, 0);\n                msg.record = Record.deserialize(rec);\n                _context15.next = 4;\n                return this.network.sendRequest(target, msg);\n\n              case 4:\n                resp = _context15.sent;\n\n                if (!(resp.record && !uint8ArrayEquals(resp.record.value, Record.deserialize(rec).value))) {\n                  _context15.next = 7;\n                  break;\n                }\n\n                throw errcode(new Error('value not put correctly'), 'ERR_PUT_VALUE_INVALID');\n\n              case 7:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function _putValueToPeer(_x17, _x18, _x19) {\n        return _putValueToPeer2.apply(this, arguments);\n      }\n\n      return _putValueToPeer;\n    }()\n    /**\n     * Query a particular peer for the value for the given key.\n     * It will either return the value or a list of closer peers.\n     *\n     * Note: The peerStore is updated with new addresses found for the given peer.\n     *\n     * @param {PeerId} peer\n     * @param {Uint8Array} key\n     */\n\n  }, {\n    key: \"_getValueOrPeers\",\n    value: function () {\n      var _getValueOrPeers2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(peer, key) {\n        var msg, peers, record, errMsg;\n        return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _context16.next = 2;\n                return this._getValueSingle(peer, key);\n\n              case 2:\n                msg = _context16.sent;\n                peers = msg.closerPeers;\n                record = msg.record;\n\n                if (!record) {\n                  _context16.next = 17;\n                  break;\n                }\n\n                _context16.prev = 6;\n                _context16.next = 9;\n                return this._verifyRecordOnline(record);\n\n              case 9:\n                _context16.next = 16;\n                break;\n\n              case 11:\n                _context16.prev = 11;\n                _context16.t0 = _context16[\"catch\"](6);\n                errMsg = 'invalid record received, discarded';\n\n                this._log(errMsg);\n\n                throw errcode(new Error(errMsg), 'ERR_INVALID_RECORD');\n\n              case 16:\n                return _context16.abrupt(\"return\", {\n                  record: record,\n                  peers: peers\n                });\n\n              case 17:\n                if (!(peers.length > 0)) {\n                  _context16.next = 19;\n                  break;\n                }\n\n                return _context16.abrupt(\"return\", {\n                  peers: peers\n                });\n\n              case 19:\n                throw errcode(new Error('Not found'), 'ERR_NOT_FOUND');\n\n              case 20:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this, [[6, 11]]);\n      }));\n\n      function _getValueOrPeers(_x20, _x21) {\n        return _getValueOrPeers2.apply(this, arguments);\n      }\n\n      return _getValueOrPeers;\n    }()\n    /**\n     * Get a value via rpc call for the given parameters.\n     *\n     * @param {PeerId} peer\n     * @param {Uint8Array} key\n     */\n\n  }, {\n    key: \"_getValueSingle\",\n    value: function () {\n      var _getValueSingle2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(peer, key) {\n        var msg;\n        return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                // eslint-disable-line require-await\n                msg = new Message(Message.TYPES.GET_VALUE, key, 0);\n                return _context17.abrupt(\"return\", this.network.sendRequest(peer, msg));\n\n              case 2:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function _getValueSingle(_x22, _x23) {\n        return _getValueSingle2.apply(this, arguments);\n      }\n\n      return _getValueSingle;\n    }()\n    /**\n     * Verify a record, fetching missing public keys from the network.\n     * Calls back with an error if the record is invalid.\n     *\n     * @param {import('libp2p-record').Record} record\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"_verifyRecordOnline\",\n    value: function () {\n      var _verifyRecordOnline2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(record) {\n        return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                _context18.next = 2;\n                return libp2pRecord.validator.verifyRecord(this.validators, record);\n\n              case 2:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function _verifyRecordOnline(_x24) {\n        return _verifyRecordOnline2.apply(this, arguments);\n      }\n\n      return _verifyRecordOnline;\n    }()\n  }]);\n\n  return KadDHT;\n}(EventEmitter);\n\nmodule.exports = KadDHT;\nmodule.exports.multicodec = '/ipfs' + c.PROTOCOL_DHT;","map":{"version":3,"names":["require","EventEmitter","errcode","libp2pRecord","MemoryDatastore","uint8ArrayEquals","equals","uint8ArrayToString","toString","RoutingTable","utils","c","Network","contentFetching","contentRouting","peerRouting","Message","Providers","QueryManager","Record","KadDHT","libp2p","dialer","peerId","peerStore","registrar","protocolPrefix","forceProtocolLegacy","datastore","kBucketSize","K","clientMode","concurrency","ALPHA","validators","selectors","onPut","onRemove","Error","protocol","PROTOCOL_DHT","_clientMode","disjointPaths","Math","ceil","routingTable","providers","pk","validator","selection","network","_log","logger","_queryManager","_running","Promise","all","start","stop","key","value","options","put","get","nvals","getMany","dsKey","bufferToKey","delete","code","undefined","provide","timeout","maxNumProviders","findProviders","peerData","id","findPeer","shallow","getClosestPeers","peer","getPublicKey","multiaddrs","emit","msg","convertBuffer","ids","closestPeers","map","p","addresses","address","multiaddr","_nearestPeersToQuery","closer","filter","_isSelf","error","isEqual","rawRecord","record","deserialize","timeReceived","now","getTime","MAX_RECORD_AGE","add","verifyRecord","other","rec","target","TYPES","PUT_VALUE","sendRequest","resp","_getValueSingle","peers","closerPeers","_verifyRecordOnline","errMsg","length","GET_VALUE","module","exports","multicodec"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-kad-dht/src/index.js"],"sourcesContent":["'use strict'\n\nconst { EventEmitter } = require('events')\nconst errcode = require('err-code')\n\nconst libp2pRecord = require('libp2p-record')\nconst { MemoryDatastore } = require('interface-datastore')\nconst { equals: uint8ArrayEquals } = require('uint8arrays/equals')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\n\nconst RoutingTable = require('./routing-table')\nconst utils = require('./utils')\nconst c = require('./constants')\nconst Network = require('./network')\nconst contentFetching = require('./content-fetching')\nconst contentRouting = require('./content-routing')\nconst peerRouting = require('./peer-routing')\nconst Message = require('./message')\nconst Providers = require('./providers')\nconst QueryManager = require('./query-manager')\n\nconst Record = libp2pRecord.Record\n\n/**\n * @typedef {*} Libp2p\n * @typedef {*} PeerStore\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {*} Dialer\n * @typedef {*} Registrar\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('multiaddr').Multiaddr} Multiaddr\n * @typedef {object} PeerData\n * @property {PeerId} id\n * @property {Multiaddr[]} multiaddrs\n */\n\n/**\n * A DHT implementation modeled after Kademlia with S/Kademlia modifications.\n * Original implementation in go: https://github.com/libp2p/go-libp2p-kad-dht.\n */\nclass KadDHT extends EventEmitter {\n  /**\n   * Create a new KadDHT.\n   *\n   * @param {Object} props\n   * @param {Libp2p} props.libp2p - the libp2p instance\n   * @param {Dialer} props.dialer - libp2p dialer instance\n   * @param {PeerId} props.peerId - peer's peerId\n   * @param {PeerStore} props.peerStore - libp2p peerStore\n   * @param {Registrar} props.registrar - libp2p registrar instance\n   * @param {string} [props.protocolPrefix = '/ipfs'] - libp2p registrar handle protocol\n   * @param {boolean} [props.forceProtocolLegacy = false] - WARNING: this is not recommended and should only be used for legacy purposes\n   * @param {number} props.kBucketSize - k-bucket size (default 20)\n   * @param {boolean} props.clientMode - If true, the DHT will not respond to queries. This should be true if your node will not be dialable. (default: false)\n   * @param {number} props.concurrency - alpha concurrency of queries (default 3)\n   * @param {Datastore} props.datastore - datastore (default MemoryDatastore)\n   * @param {object} props.validators - validators object with namespace as keys and function(key, record, callback)\n   * @param {object} props.selectors - selectors object with namespace as keys and function(key, records)\n   * @param {function(import('libp2p-record').Record, PeerId): void} [props.onPut] - Called when an entry is added to or changed in the datastore\n   * @param {function(import('libp2p-record').Record): void} [props.onRemove] - Called when an entry is removed from the datastore\n   */\n  constructor ({\n    libp2p,\n    dialer,\n    peerId,\n    peerStore,\n    registrar,\n    protocolPrefix = '/ipfs',\n    forceProtocolLegacy = false,\n    datastore = new MemoryDatastore(),\n    kBucketSize = c.K,\n    clientMode = false,\n    concurrency = c.ALPHA,\n    validators = {},\n    selectors = {},\n    onPut = () => {},\n    onRemove = () => {}\n  }) {\n    super()\n\n    if (!dialer) {\n      throw new Error('libp2p-kad-dht requires an instance of Dialer')\n    }\n\n    /**\n     * Local reference to the libp2p instance. May be undefined.\n     *\n     * @type {Libp2p}\n     */\n    this.libp2p = libp2p\n\n    /**\n     * Local reference to the libp2p dialer instance\n     *\n     * @type {Dialer}\n     */\n    this.dialer = dialer\n\n    /**\n     * Local peer-id\n     *\n     * @type {PeerId}\n     */\n    this.peerId = peerId\n\n    /**\n     * Local PeerStore\n     *\n     * @type {PeerStore}\n     */\n    this.peerStore = peerStore\n\n    /**\n     * Local peer info\n     *\n     * @type {Registrar}\n     */\n    this.registrar = registrar\n\n    /**\n     * Registrar protocol\n     *\n     * @type {string}\n     */\n    this.protocol = protocolPrefix + (forceProtocolLegacy ? '' : c.PROTOCOL_DHT)\n\n    /**\n     * k-bucket size\n     *\n     * @type {number}\n     */\n    this.kBucketSize = kBucketSize\n\n    this._clientMode = clientMode\n\n    /**\n     * ALPHA concurrency at which each query path with run, defaults to 3\n     *\n     * @type {number}\n     */\n    this.concurrency = concurrency\n\n    /**\n     * Number of disjoint query paths to use\n     * This is set to `kBucketSize`/2 per the S/Kademlia paper\n     *\n     * @type {number}\n     */\n    this.disjointPaths = Math.ceil(this.kBucketSize / 2)\n\n    /**\n     * The routing table.\n     *\n     * @type {RoutingTable}\n     */\n    this.routingTable = new RoutingTable(this, { kBucketSize: this.kBucketSize })\n\n    /**\n     * Reference to the datastore, uses an in-memory store if none given.\n     *\n     * @type {Datastore}\n     */\n    this.datastore = datastore\n\n    /**\n     * Provider management\n     *\n     * @type {Providers}\n     */\n    this.providers = new Providers(this.datastore, this.peerId)\n\n    this.validators = {\n      pk: libp2pRecord.validator.validators.pk,\n      ...validators\n    }\n\n    this.selectors = {\n      pk: libp2pRecord.selection.selectors.pk,\n      ...selectors\n    }\n\n    this.network = new Network(this)\n\n    this._log = utils.logger(this.peerId)\n\n    /**\n     * Keeps track of running queries\n     *\n     * @type {QueryManager}\n     */\n    this._queryManager = new QueryManager()\n\n    this._running = false\n\n    // DHT components\n    this.contentFetching = contentFetching(this)\n    this.contentRouting = contentRouting(this)\n    this.peerRouting = peerRouting(this)\n\n    // datastore events\n    this.onPut = onPut\n    this.onRemove = onRemove\n  }\n\n  /**\n   * Is this DHT running.\n   */\n  get isStarted () {\n    return this._running\n  }\n\n  /**\n   * Start listening to incoming connections.\n   */\n  start () {\n    this._running = true\n\n    return Promise.all([\n      this.providers.start(),\n      this._queryManager.start(),\n      this.network.start(),\n      this.routingTable.start()\n    ])\n  }\n\n  /**\n   * Stop accepting incoming connections and sending outgoing\n   * messages.\n   */\n  stop () {\n    this._running = false\n\n    return Promise.all([\n      this.providers.stop(),\n      this._queryManager.stop(),\n      this.network.stop(),\n      this.routingTable.stop()\n    ])\n  }\n\n  /**\n   * Store the given key/value  pair in the DHT.\n   *\n   * @param {Uint8Array} key\n   * @param {Uint8Array} value\n   * @param {Object} [options] - put options\n   * @param {number} [options.minPeers] - minimum number of peers required to successfully put (default: closestPeers.length)\n   * @returns {Promise<void>}\n   */\n  async put (key, value, options = {}) { // eslint-disable-line require-await\n    return this.contentFetching.put(key, value, options)\n  }\n\n  /**\n   * Get the value to the given key.\n   * Times out after 1 minute by default.\n   *\n   * @param {Uint8Array} key\n   * @param {Object} [options] - get options\n   * @param {number} [options.timeout] - optional timeout (default: 60000)\n   * @returns {Promise<Uint8Array>}\n   */\n  async get (key, options = {}) { // eslint-disable-line require-await\n    return this.contentFetching.get(key, options)\n  }\n\n  /**\n   * Get the `n` values to the given key without sorting.\n   *\n   * @param {Uint8Array} key\n   * @param {number} nvals\n   * @param {Object} [options] - get options\n   * @param {number} [options.timeout] - optional timeout (default: 60000)\n   */\n  async getMany (key, nvals, options = {}) { // eslint-disable-line require-await\n    return this.contentFetching.getMany(key, nvals, options)\n  }\n\n  /**\n   * Remove the given key from the local datastore.\n   *\n   * @param {Uint8Array} key\n   */\n  async removeLocal (key) {\n    this._log(`removeLocal: ${uint8ArrayToString(key, 'base32')}`)\n    const dsKey = utils.bufferToKey(key)\n\n    try {\n      await this.datastore.delete(dsKey)\n    } catch (err) {\n      if (err.code === 'ERR_NOT_FOUND') {\n        return undefined\n      }\n      throw err\n    }\n  }\n\n  /**\n   * @param {Uint8Array} key\n   * @param {Uint8Array} value\n   */\n  async _putLocal (key, value) {\n    this._log(`_putLocal: ${uint8ArrayToString(key, 'base32')}`)\n    const dsKey = utils.bufferToKey(key)\n\n    await this.datastore.put(dsKey, value)\n  }\n\n  // ----------- Content Routing\n\n  /**\n   * Announce to the network that we can provide given key's value.\n   *\n   * @param {CID} key\n   * @returns {Promise<void>}\n   */\n  async provide (key) { // eslint-disable-line require-await\n    return this.contentRouting.provide(key)\n  }\n\n  /**\n   * Search the dht for up to `K` providers of the given CID.\n   *\n   * @param {CID} key\n   * @param {Object} [options] - findProviders options\n   * @param {number} [options.timeout=60000] - how long the query should maximally run, in milliseconds (default: 60000)\n   * @param {number} [options.maxNumProviders=5] - maximum number of providers to find\n   * @returns {AsyncIterable<{ id: PeerId, multiaddrs: Multiaddr[] }>}\n   */\n  async * findProviders (key, options = { timeout: 6000, maxNumProviders: 5 }) {\n    for await (const peerData of this.contentRouting.findProviders(key, options)) {\n      yield peerData\n    }\n  }\n\n  // ----------- Peer Routing -----------\n\n  /**\n   * Search for a peer with the given ID.\n   *\n   * @param {PeerId} id\n   * @param {Object} [options] - findPeer options\n   * @param {number} [options.timeout=60000] - how long the query should maximally run, in milliseconds (default: 60000)\n   * @returns {Promise<{ id: PeerId, multiaddrs: Multiaddr[] }>}\n   */\n  async findPeer (id, options = { timeout: 60000 }) { // eslint-disable-line require-await\n    return this.peerRouting.findPeer(id, options)\n  }\n\n  /**\n   * Kademlia 'node lookup' operation.\n   *\n   * @param {Uint8Array} key\n   * @param {Object} [options]\n   * @param {boolean} [options.shallow = false] - shallow query\n   */\n  async * getClosestPeers (key, options = { shallow: false }) {\n    yield * this.peerRouting.getClosestPeers(key, options)\n  }\n\n  /**\n   * Get the public key for the given peer id.\n   *\n   * @param {PeerId} peer\n   */\n  getPublicKey (peer) {\n    return this.peerRouting.getPublicKey(peer)\n  }\n\n  // ----------- Discovery -----------\n\n  /**\n   * @param {PeerId} peerId\n   * @param {Multiaddr[]} multiaddrs\n   */\n  _peerDiscovered (peerId, multiaddrs) {\n    this.emit('peer', {\n      id: peerId,\n      multiaddrs\n    })\n  }\n\n  // ----------- Internals -----------\n\n  /**\n   * Returns the routing tables closest peers, for the key of\n   * the message.\n   *\n   * @param {Message} msg\n   */\n  async _nearestPeersToQuery (msg) {\n    const key = await utils.convertBuffer(msg.key)\n    const ids = this.routingTable.closestPeers(key, this.kBucketSize)\n\n    return ids.map((p) => {\n      /** @type {{ id: PeerId, addresses: { multiaddr: Multiaddr }[] }} */\n      const peer = this.peerStore.get(p)\n\n      return {\n        id: p,\n        multiaddrs: peer ? peer.addresses.map((address) => address.multiaddr) : []\n      }\n    })\n  }\n\n  /**\n   * Get the nearest peers to the given query, but iff closer\n   * than self.\n   *\n   * @param {Message} msg\n   * @param {PeerId} peerId\n   */\n  async _betterPeersToQuery (msg, peerId) {\n    this._log('betterPeersToQuery')\n    const closer = await this._nearestPeersToQuery(msg)\n\n    return closer.filter((closer) => {\n      if (this._isSelf(closer.id)) {\n        // Should bail, not sure\n        this._log.error('trying to return self as closer')\n        return false\n      }\n\n      return !closer.id.isEqual(peerId)\n    })\n  }\n\n  /**\n   * Try to fetch a given record by from the local datastore.\n   * Returns the record iff it is still valid, meaning\n   * - it was either authored by this node, or\n   * - it was received less than `MAX_RECORD_AGE` ago.\n   *\n   * @param {Uint8Array} key\n   */\n\n  async _checkLocalDatastore (key) {\n    this._log(`checkLocalDatastore: ${uint8ArrayToString(key)} %b`, key)\n    const dsKey = utils.bufferToKey(key)\n\n    // Fetch value from ds\n    let rawRecord\n    try {\n      rawRecord = await this.datastore.get(dsKey)\n    } catch (err) {\n      if (err.code === 'ERR_NOT_FOUND') {\n        return undefined\n      }\n      throw err\n    }\n\n    // Create record from the returned bytes\n    const record = Record.deserialize(rawRecord)\n\n    if (!record) {\n      throw errcode(new Error('Invalid record'), 'ERR_INVALID_RECORD')\n    }\n\n    // Check validity: compare time received with max record age\n    if (record.timeReceived == null ||\n      utils.now() - record.timeReceived.getTime() > c.MAX_RECORD_AGE) {\n      // If record is bad delete it and return\n      await this.datastore.delete(dsKey)\n      this.onRemove(record)\n      return undefined\n    }\n\n    // Record is valid\n    return record\n  }\n\n  /**\n   * Add the peer to the routing table and update it in the peerStore.\n   *\n   * @param {PeerId} peerId\n   */\n  async _add (peerId) {\n    await this.routingTable.add(peerId)\n  }\n\n  /**\n   * Verify a record without searching the DHT.\n   *\n   * @param {import('libp2p-record').Record} record\n   */\n  async _verifyRecordLocally (record) {\n    this._log('verifyRecordLocally')\n\n    await libp2pRecord.validator.verifyRecord(this.validators, record)\n  }\n\n  /**\n   * Is the given peer id our PeerId?\n   *\n   * @param {PeerId} other\n   */\n  _isSelf (other) {\n    return other && uint8ArrayEquals(this.peerId.id, other.id)\n  }\n\n  /**\n   * Store the given key/value pair at the peer `target`.\n   *\n   * @param {Uint8Array} key\n   * @param {Uint8Array} rec - encoded record\n   * @param {PeerId} target\n   */\n  async _putValueToPeer (key, rec, target) {\n    const msg = new Message(Message.TYPES.PUT_VALUE, key, 0)\n    msg.record = Record.deserialize(rec)\n\n    const resp = await this.network.sendRequest(target, msg)\n\n    if (resp.record && !uint8ArrayEquals(resp.record.value, Record.deserialize(rec).value)) {\n      throw errcode(new Error('value not put correctly'), 'ERR_PUT_VALUE_INVALID')\n    }\n  }\n\n  /**\n   * Query a particular peer for the value for the given key.\n   * It will either return the value or a list of closer peers.\n   *\n   * Note: The peerStore is updated with new addresses found for the given peer.\n   *\n   * @param {PeerId} peer\n   * @param {Uint8Array} key\n   */\n  async _getValueOrPeers (peer, key) {\n    const msg = await this._getValueSingle(peer, key)\n\n    const peers = msg.closerPeers\n    const record = msg.record\n\n    if (record) {\n      // We have a record\n      try {\n        await this._verifyRecordOnline(record)\n      } catch (err) {\n        const errMsg = 'invalid record received, discarded'\n        this._log(errMsg)\n        throw errcode(new Error(errMsg), 'ERR_INVALID_RECORD')\n      }\n\n      return { record, peers }\n    }\n\n    if (peers.length > 0) {\n      return { peers }\n    }\n\n    throw errcode(new Error('Not found'), 'ERR_NOT_FOUND')\n  }\n\n  /**\n   * Get a value via rpc call for the given parameters.\n   *\n   * @param {PeerId} peer\n   * @param {Uint8Array} key\n   */\n  async _getValueSingle (peer, key) { // eslint-disable-line require-await\n    const msg = new Message(Message.TYPES.GET_VALUE, key, 0)\n    return this.network.sendRequest(peer, msg)\n  }\n\n  /**\n   * Verify a record, fetching missing public keys from the network.\n   * Calls back with an error if the record is invalid.\n   *\n   * @param {import('libp2p-record').Record} record\n   * @returns {Promise<void>}\n   */\n  async _verifyRecordOnline (record) {\n    await libp2pRecord.validator.verifyRecord(this.validators, record)\n  }\n}\n\nmodule.exports = KadDHT\nmodule.exports.multicodec = '/ipfs' + c.PROTOCOL_DHT\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}