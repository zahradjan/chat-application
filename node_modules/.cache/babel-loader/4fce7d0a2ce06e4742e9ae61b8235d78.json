{"ast":null,"code":"'use strict'; // dns-nodejs gets replaced by dns-browser when bundled\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar dns = require('../runtime/dns-nodejs');\n\nvar withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {string} domain\n * @returns {string}\n */\n\n\nfunction fqdnFixups(domain) {\n  // Allow resolution of .eth names via .eth.link\n  // More context at the go-ipfs counterpart: https://github.com/ipfs/go-ipfs/pull/6448\n  if (domain.endsWith('.eth')) {\n    domain = domain.replace(/.eth$/, '.eth.link');\n  }\n\n  return domain;\n}\n\nmodule.exports = function () {\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"dns\"]}\n   */\n  var resolveDNS = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(domain) {\n      var options,\n          _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {\n                recursive: true\n              };\n\n              if (!(typeof domain !== 'string')) {\n                _context.next = 3;\n                break;\n              }\n\n              throw new Error('Invalid arguments, domain must be a string');\n\n            case 3:\n              domain = fqdnFixups(domain);\n              return _context.abrupt(\"return\", dns(domain, options));\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function resolveDNS(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return withTimeoutOption(resolveDNS);\n};","map":{"version":3,"names":["dns","require","withTimeoutOption","fqdnFixups","domain","endsWith","replace","module","exports","resolveDNS","options","recursive","Error"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/dns.js"],"sourcesContent":["'use strict'\n\n// dns-nodejs gets replaced by dns-browser when bundled\nconst dns = require('../runtime/dns-nodejs')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @param {string} domain\n * @returns {string}\n */\nfunction fqdnFixups (domain) {\n  // Allow resolution of .eth names via .eth.link\n  // More context at the go-ipfs counterpart: https://github.com/ipfs/go-ipfs/pull/6448\n  if (domain.endsWith('.eth')) {\n    domain = domain.replace(/.eth$/, '.eth.link')\n  }\n  return domain\n}\n\nmodule.exports = () => {\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"dns\"]}\n   */\n  const resolveDNS = async (domain, options = { recursive: true }) => { // eslint-disable-line require-await\n    if (typeof domain !== 'string') {\n      throw new Error('Invalid arguments, domain must be a string')\n    }\n\n    domain = fqdnFixups(domain)\n\n    return dns(domain, options)\n  }\n\n  return withTimeoutOption(resolveDNS)\n}\n"],"mappings":"AAAA,a,CAEA;;;;;;AACA,IAAMA,GAAG,GAAGC,OAAO,CAAC,uBAAD,CAAnB;;AACA,IAAMC,iBAAiB,GAAGD,OAAO,CAAC,yCAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AACA,SAASE,UAAT,CAAqBC,MAArB,EAA6B;EAC3B;EACA;EACA,IAAIA,MAAM,CAACC,QAAP,CAAgB,MAAhB,CAAJ,EAA6B;IAC3BD,MAAM,GAAGA,MAAM,CAACE,OAAP,CAAe,OAAf,EAAwB,WAAxB,CAAT;EACD;;EACD,OAAOF,MAAP;AACD;;AAEDG,MAAM,CAACC,OAAP,GAAiB,YAAM;EACrB;AACF;AACA;EACE,IAAMC,UAAU;IAAA,sEAAG,iBAAOL,MAAP;MAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAeM,OAAf,2DAAyB;gBAAEC,SAAS,EAAE;cAAb,CAAzB;;cAAA,MACb,OAAOP,MAAP,KAAkB,QADL;gBAAA;gBAAA;cAAA;;cAAA,MAET,IAAIQ,KAAJ,CAAU,4CAAV,CAFS;;YAAA;cAKjBR,MAAM,GAAGD,UAAU,CAACC,MAAD,CAAnB;cALiB,iCAOVJ,GAAG,CAACI,MAAD,EAASM,OAAT,CAPO;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAH;;IAAA,gBAAVD,UAAU;MAAA;IAAA;EAAA,GAAhB;;EAUA,OAAOP,iBAAiB,CAACO,UAAD,CAAxB;AACD,CAfD"},"metadata":{},"sourceType":"script"}