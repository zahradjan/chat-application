{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _require = require('nanoid'),\n    nanoid = _require.nanoid;\n\nvar _require2 = require('uint8arrays/to-string'),\n    uint8ArrayToString = _require2.toString;\n\nvar _require3 = require('uint8arrays/from-string'),\n    uint8ArrayFromString = _require3.fromString;\n\nvar pathSepS = '/';\nvar pathSepB = new TextEncoder().encode(pathSepS);\nvar pathSep = pathSepB[0];\n/**\n * A Key represents the unique identifier of an object.\n * Our Key scheme is inspired by file systems and Google App Engine key model.\n * Keys are meant to be unique across a system. Keys are hierarchical,\n * incorporating more and more specific namespaces. Thus keys can be deemed\n * 'children' or 'ancestors' of other keys:\n * - `new Key('/Comedy')`\n * - `new Key('/Comedy/MontyPython')`\n * Also, every namespace can be parametrized to embed relevant object\n * information. For example, the Key `name` (most specific namespace) could\n * include the object type:\n * - `new Key('/Comedy/MontyPython/Actor:JohnCleese')`\n * - `new Key('/Comedy/MontyPython/Sketch:CheeseShop')`\n * - `new Key('/Comedy/MontyPython/Sketch:CheeseShop/Character:Mousebender')`\n *\n */\n\nvar Key = /*#__PURE__*/function (_Symbol$toStringTag) {\n  /**\n   * @param {string | Uint8Array} s\n   * @param {boolean} [clean]\n   */\n  function Key(s, clean) {\n    _classCallCheck(this, Key);\n\n    if (typeof s === 'string') {\n      this._buf = uint8ArrayFromString(s);\n    } else if (s instanceof Uint8Array) {\n      this._buf = s;\n    } else {\n      throw new Error('Invalid key, should be String of Uint8Array');\n    }\n\n    if (clean == null) {\n      clean = true;\n    }\n\n    if (clean) {\n      this.clean();\n    }\n\n    if (this._buf.byteLength === 0 || this._buf[0] !== pathSep) {\n      throw new Error('Invalid key');\n    }\n  }\n  /**\n   * Convert to the string representation\n   *\n   * @param {import('uint8arrays/to-string').SupportedEncodings} [encoding='utf8'] - The encoding to use.\n   * @returns {string}\n   */\n\n\n  _createClass(Key, [{\n    key: \"toString\",\n    value: function toString() {\n      var encoding = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'utf8';\n      return uint8ArrayToString(this._buf, encoding);\n    }\n    /**\n     * Return the Uint8Array representation of the key\n     *\n     * @returns {Uint8Array}\n     */\n\n  }, {\n    key: \"uint8Array\",\n    value: function uint8Array() {\n      return this._buf;\n    }\n    /**\n     * Return string representation of the key\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return \"Key(\".concat(this.toString(), \")\");\n    }\n    /**\n     * Constructs a key out of a namespace array.\n     *\n     * @param {Array<string>} list - The array of namespaces\n     * @returns {Key}\n     *\n     * @example\n     * ```js\n     * Key.withNamespaces(['one', 'two'])\n     * // => Key('/one/two')\n     * ```\n     */\n\n  }, {\n    key: \"clean\",\n    value:\n    /**\n     * Cleanup the current key\n     *\n     * @returns {void}\n     */\n    function clean() {\n      if (!this._buf || this._buf.byteLength === 0) {\n        this._buf = pathSepB;\n      }\n\n      if (this._buf[0] !== pathSep) {\n        var bytes = new Uint8Array(this._buf.byteLength + 1);\n        bytes.fill(pathSep, 0, 1);\n        bytes.set(this._buf, 1);\n        this._buf = bytes;\n      } // normalize does not remove trailing slashes\n\n\n      while (this._buf.byteLength > 1 && this._buf[this._buf.byteLength - 1] === pathSep) {\n        this._buf = this._buf.subarray(0, -1);\n      }\n    }\n    /**\n     * Check if the given key is sorted lower than ourself.\n     *\n     * @param {Key} key - The other Key to check against\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"less\",\n    value: function less(key) {\n      var list1 = this.list();\n      var list2 = key.list();\n\n      for (var i = 0; i < list1.length; i++) {\n        if (list2.length < i + 1) {\n          return false;\n        }\n\n        var c1 = list1[i];\n        var c2 = list2[i];\n\n        if (c1 < c2) {\n          return true;\n        } else if (c1 > c2) {\n          return false;\n        }\n      }\n\n      return list1.length < list2.length;\n    }\n    /**\n     * Returns the key with all parts in reversed order.\n     *\n     * @returns {Key}\n     *\n     * @example\n     * ```js\n     * new Key('/Comedy/MontyPython/Actor:JohnCleese').reverse()\n     * // => Key('/Actor:JohnCleese/MontyPython/Comedy')\n     * ```\n     */\n\n  }, {\n    key: \"reverse\",\n    value: function reverse() {\n      return Key.withNamespaces(this.list().slice().reverse());\n    }\n    /**\n     * Returns the `namespaces` making up this Key.\n     *\n     * @returns {Array<string>}\n     */\n\n  }, {\n    key: \"namespaces\",\n    value: function namespaces() {\n      return this.list();\n    }\n    /** Returns the \"base\" namespace of this key.\n     *\n     * @returns {string}\n     *\n     * @example\n     * ```js\n     * new Key('/Comedy/MontyPython/Actor:JohnCleese').baseNamespace()\n     * // => 'Actor:JohnCleese'\n     * ```\n     */\n\n  }, {\n    key: \"baseNamespace\",\n    value: function baseNamespace() {\n      var ns = this.namespaces();\n      return ns[ns.length - 1];\n    }\n    /**\n     * Returns the `list` representation of this key.\n     *\n     * @returns {Array<string>}\n     *\n     * @example\n     * ```js\n     * new Key('/Comedy/MontyPython/Actor:JohnCleese').list()\n     * // => ['Comedy', 'MontyPythong', 'Actor:JohnCleese']\n     * ```\n     */\n\n  }, {\n    key: \"list\",\n    value: function list() {\n      return this.toString().split(pathSepS).slice(1);\n    }\n    /**\n     * Returns the \"type\" of this key (value of last namespace).\n     *\n     * @returns {string}\n     *\n     * @example\n     * ```js\n     * new Key('/Comedy/MontyPython/Actor:JohnCleese').type()\n     * // => 'Actor'\n     * ```\n     */\n\n  }, {\n    key: \"type\",\n    value: function type() {\n      return namespaceType(this.baseNamespace());\n    }\n    /**\n     * Returns the \"name\" of this key (field of last namespace).\n     *\n     * @returns {string}\n     *\n     * @example\n     * ```js\n     * new Key('/Comedy/MontyPython/Actor:JohnCleese').name()\n     * // => 'JohnCleese'\n     * ```\n     */\n\n  }, {\n    key: \"name\",\n    value: function name() {\n      return namespaceValue(this.baseNamespace());\n    }\n    /**\n     * Returns an \"instance\" of this type key (appends value to namespace).\n     *\n     * @param {string} s - The string to append.\n     * @returns {Key}\n     *\n     * @example\n     * ```js\n     * new Key('/Comedy/MontyPython/Actor').instance('JohnClesse')\n     * // => Key('/Comedy/MontyPython/Actor:JohnCleese')\n     * ```\n     */\n\n  }, {\n    key: \"instance\",\n    value: function instance(s) {\n      return new Key(this.toString() + ':' + s);\n    }\n    /**\n     * Returns the \"path\" of this key (parent + type).\n     *\n     * @returns {Key}\n     *\n     * @example\n     * ```js\n     * new Key('/Comedy/MontyPython/Actor:JohnCleese').path()\n     * // => Key('/Comedy/MontyPython/Actor')\n     * ```\n     */\n\n  }, {\n    key: \"path\",\n    value: function path() {\n      var p = this.parent().toString();\n\n      if (!p.endsWith(pathSepS)) {\n        p += pathSepS;\n      }\n\n      p += this.type();\n      return new Key(p);\n    }\n    /**\n     * Returns the `parent` Key of this Key.\n     *\n     * @returns {Key}\n     *\n     * @example\n     * ```js\n     * new Key(\"/Comedy/MontyPython/Actor:JohnCleese\").parent()\n     * // => Key(\"/Comedy/MontyPython\")\n     * ```\n     */\n\n  }, {\n    key: \"parent\",\n    value: function parent() {\n      var list = this.list();\n\n      if (list.length === 1) {\n        return new Key(pathSepS);\n      }\n\n      return new Key(list.slice(0, -1).join(pathSepS));\n    }\n    /**\n     * Returns the `child` Key of this Key.\n     *\n     * @param {Key} key - The child Key to add\n     * @returns {Key}\n     *\n     * @example\n     * ```js\n     * new Key('/Comedy/MontyPython').child(new Key('Actor:JohnCleese'))\n     * // => Key('/Comedy/MontyPython/Actor:JohnCleese')\n     * ```\n     */\n\n  }, {\n    key: \"child\",\n    value: function child(key) {\n      if (this.toString() === pathSepS) {\n        return key;\n      } else if (key.toString() === pathSepS) {\n        return this;\n      }\n\n      return new Key(this.toString() + key.toString(), false);\n    }\n    /**\n     * Returns whether this key is a prefix of `other`\n     *\n     * @param {Key} other - The other key to test against\n     * @returns {boolean}\n     *\n     * @example\n     * ```js\n     * new Key('/Comedy').isAncestorOf('/Comedy/MontyPython')\n     * // => true\n     * ```\n     */\n\n  }, {\n    key: \"isAncestorOf\",\n    value: function isAncestorOf(other) {\n      if (other.toString() === this.toString()) {\n        return false;\n      }\n\n      return other.toString().startsWith(this.toString());\n    }\n    /**\n     * Returns whether this key is a contains another as prefix.\n     *\n     * @param {Key} other - The other Key to test against\n     * @returns {boolean}\n     *\n     * @example\n     * ```js\n     * new Key('/Comedy/MontyPython').isDecendantOf('/Comedy')\n     * // => true\n     * ```\n     */\n\n  }, {\n    key: \"isDecendantOf\",\n    value: function isDecendantOf(other) {\n      if (other.toString() === this.toString()) {\n        return false;\n      }\n\n      return this.toString().startsWith(other.toString());\n    }\n    /**\n     * Checks if this key has only one namespace.\n     *\n     * @returns {boolean}\n     *\n     */\n\n  }, {\n    key: \"isTopLevel\",\n    value: function isTopLevel() {\n      return this.list().length === 1;\n    }\n    /**\n     * Concats one or more Keys into one new Key.\n     *\n     * @param {Array<Key>} keys - The array of keys to concatenate\n     * @returns {Key}\n     */\n\n  }, {\n    key: \"concat\",\n    value: function concat() {\n      for (var _len = arguments.length, keys = new Array(_len), _key = 0; _key < _len; _key++) {\n        keys[_key] = arguments[_key];\n      }\n\n      return Key.withNamespaces([].concat(_toConsumableArray(this.namespaces()), _toConsumableArray(flatten(keys.map(function (key) {\n        return key.namespaces();\n      })))));\n    }\n  }], [{\n    key: \"withNamespaces\",\n    value: function withNamespaces(list) {\n      return new Key(list.join(pathSepS));\n    }\n    /**\n     * Returns a randomly (uuid) generated key.\n     *\n     * @returns {Key}\n     *\n     * @example\n     * ```js\n     * Key.random()\n     * // => Key('/f98719ea086343f7b71f32ea9d9d521d')\n     * ```\n     */\n\n  }, {\n    key: \"random\",\n    value: function random() {\n      return new Key(nanoid().replace(/-/g, ''));\n    }\n    /**\n     * @param {*} other\n     */\n\n  }, {\n    key: \"asKey\",\n    value: function asKey(other) {\n      if (other instanceof Uint8Array || typeof other === 'string') {\n        // we can create a key from this\n        return new Key(other);\n      }\n\n      if (other.uint8Array) {\n        // this is an older version or may have crossed the esm/cjs boundary\n        return new Key(other.uint8Array());\n      }\n\n      return null;\n    }\n  }]);\n\n  return Key;\n}(Symbol.toStringTag);\n/**\n * The first component of a namespace. `foo` in `foo:bar`\n *\n * @param {string} ns\n * @returns {string}\n */\n\n\nfunction namespaceType(ns) {\n  var parts = ns.split(':');\n\n  if (parts.length < 2) {\n    return '';\n  }\n\n  return parts.slice(0, -1).join(':');\n}\n/**\n * The last component of a namespace, `baz` in `foo:bar:baz`.\n *\n * @param {string} ns\n * @returns {string}\n */\n\n\nfunction namespaceValue(ns) {\n  var parts = ns.split(':');\n  return parts[parts.length - 1];\n}\n/**\n * Flatten array of arrays (only one level)\n *\n * @template T\n * @param {Array<T|T[]>} arr\n * @returns {T[]}\n */\n\n\nfunction flatten(arr) {\n  var _ref;\n\n  return (\n    /** @type {T[]} */\n    (_ref = []).concat.apply(_ref, _toConsumableArray(arr))\n  );\n}\n\nmodule.exports = Key;","map":{"version":3,"names":["require","nanoid","uint8ArrayToString","toString","uint8ArrayFromString","fromString","pathSepS","pathSepB","TextEncoder","encode","pathSep","Key","s","clean","_buf","Uint8Array","Error","byteLength","encoding","bytes","fill","set","subarray","key","list1","list","list2","i","length","c1","c2","withNamespaces","slice","reverse","ns","namespaces","split","namespaceType","baseNamespace","namespaceValue","p","parent","endsWith","type","join","other","startsWith","keys","flatten","map","replace","uint8Array","Symbol","toStringTag","parts","arr","concat","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/interface-datastore/src/key.js"],"sourcesContent":["'use strict'\n\nconst { nanoid } = require('nanoid')\n\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\n\nconst pathSepS = '/'\nconst pathSepB = new TextEncoder().encode(pathSepS)\nconst pathSep = pathSepB[0]\n\n/**\n * A Key represents the unique identifier of an object.\n * Our Key scheme is inspired by file systems and Google App Engine key model.\n * Keys are meant to be unique across a system. Keys are hierarchical,\n * incorporating more and more specific namespaces. Thus keys can be deemed\n * 'children' or 'ancestors' of other keys:\n * - `new Key('/Comedy')`\n * - `new Key('/Comedy/MontyPython')`\n * Also, every namespace can be parametrized to embed relevant object\n * information. For example, the Key `name` (most specific namespace) could\n * include the object type:\n * - `new Key('/Comedy/MontyPython/Actor:JohnCleese')`\n * - `new Key('/Comedy/MontyPython/Sketch:CheeseShop')`\n * - `new Key('/Comedy/MontyPython/Sketch:CheeseShop/Character:Mousebender')`\n *\n */\nclass Key {\n  /**\n   * @param {string | Uint8Array} s\n   * @param {boolean} [clean]\n   */\n  constructor (s, clean) {\n    if (typeof s === 'string') {\n      this._buf = uint8ArrayFromString(s)\n    } else if (s instanceof Uint8Array) {\n      this._buf = s\n    } else {\n      throw new Error('Invalid key, should be String of Uint8Array')\n    }\n\n    if (clean == null) {\n      clean = true\n    }\n\n    if (clean) {\n      this.clean()\n    }\n\n    if (this._buf.byteLength === 0 || this._buf[0] !== pathSep) {\n      throw new Error('Invalid key')\n    }\n  }\n\n  /**\n   * Convert to the string representation\n   *\n   * @param {import('uint8arrays/to-string').SupportedEncodings} [encoding='utf8'] - The encoding to use.\n   * @returns {string}\n   */\n  toString (encoding = 'utf8') {\n    return uint8ArrayToString(this._buf, encoding)\n  }\n\n  /**\n   * Return the Uint8Array representation of the key\n   *\n   * @returns {Uint8Array}\n   */\n  uint8Array () {\n    return this._buf\n  }\n\n  /**\n   * Return string representation of the key\n   *\n   * @returns {string}\n   */\n  get [Symbol.toStringTag] () {\n    return `Key(${this.toString()})`\n  }\n\n  /**\n   * Constructs a key out of a namespace array.\n   *\n   * @param {Array<string>} list - The array of namespaces\n   * @returns {Key}\n   *\n   * @example\n   * ```js\n   * Key.withNamespaces(['one', 'two'])\n   * // => Key('/one/two')\n   * ```\n   */\n  static withNamespaces (list) {\n    return new Key(list.join(pathSepS))\n  }\n\n  /**\n   * Returns a randomly (uuid) generated key.\n   *\n   * @returns {Key}\n   *\n   * @example\n   * ```js\n   * Key.random()\n   * // => Key('/f98719ea086343f7b71f32ea9d9d521d')\n   * ```\n   */\n  static random () {\n    return new Key(nanoid().replace(/-/g, ''))\n  }\n\n  /**\n   * @param {*} other\n   */\n  static asKey (other) {\n    if (other instanceof Uint8Array || typeof other === 'string') {\n      // we can create a key from this\n      return new Key(other)\n    }\n\n    if (other.uint8Array) {\n      // this is an older version or may have crossed the esm/cjs boundary\n      return new Key(other.uint8Array())\n    }\n\n    return null\n  }\n\n  /**\n   * Cleanup the current key\n   *\n   * @returns {void}\n   */\n  clean () {\n    if (!this._buf || this._buf.byteLength === 0) {\n      this._buf = pathSepB\n    }\n\n    if (this._buf[0] !== pathSep) {\n      const bytes = new Uint8Array(this._buf.byteLength + 1)\n      bytes.fill(pathSep, 0, 1)\n      bytes.set(this._buf, 1)\n      this._buf = bytes\n    }\n\n    // normalize does not remove trailing slashes\n    while (this._buf.byteLength > 1 && this._buf[this._buf.byteLength - 1] === pathSep) {\n      this._buf = this._buf.subarray(0, -1)\n    }\n  }\n\n  /**\n   * Check if the given key is sorted lower than ourself.\n   *\n   * @param {Key} key - The other Key to check against\n   * @returns {boolean}\n   */\n  less (key) {\n    const list1 = this.list()\n    const list2 = key.list()\n\n    for (let i = 0; i < list1.length; i++) {\n      if (list2.length < i + 1) {\n        return false\n      }\n\n      const c1 = list1[i]\n      const c2 = list2[i]\n\n      if (c1 < c2) {\n        return true\n      } else if (c1 > c2) {\n        return false\n      }\n    }\n\n    return list1.length < list2.length\n  }\n\n  /**\n   * Returns the key with all parts in reversed order.\n   *\n   * @returns {Key}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython/Actor:JohnCleese').reverse()\n   * // => Key('/Actor:JohnCleese/MontyPython/Comedy')\n   * ```\n   */\n  reverse () {\n    return Key.withNamespaces(this.list().slice().reverse())\n  }\n\n  /**\n   * Returns the `namespaces` making up this Key.\n   *\n   * @returns {Array<string>}\n   */\n  namespaces () {\n    return this.list()\n  }\n\n  /** Returns the \"base\" namespace of this key.\n   *\n   * @returns {string}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython/Actor:JohnCleese').baseNamespace()\n   * // => 'Actor:JohnCleese'\n   * ```\n   */\n  baseNamespace () {\n    const ns = this.namespaces()\n    return ns[ns.length - 1]\n  }\n\n  /**\n   * Returns the `list` representation of this key.\n   *\n   * @returns {Array<string>}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython/Actor:JohnCleese').list()\n   * // => ['Comedy', 'MontyPythong', 'Actor:JohnCleese']\n   * ```\n   */\n  list () {\n    return this.toString().split(pathSepS).slice(1)\n  }\n\n  /**\n   * Returns the \"type\" of this key (value of last namespace).\n   *\n   * @returns {string}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython/Actor:JohnCleese').type()\n   * // => 'Actor'\n   * ```\n   */\n  type () {\n    return namespaceType(this.baseNamespace())\n  }\n\n  /**\n   * Returns the \"name\" of this key (field of last namespace).\n   *\n   * @returns {string}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython/Actor:JohnCleese').name()\n   * // => 'JohnCleese'\n   * ```\n   */\n  name () {\n    return namespaceValue(this.baseNamespace())\n  }\n\n  /**\n   * Returns an \"instance\" of this type key (appends value to namespace).\n   *\n   * @param {string} s - The string to append.\n   * @returns {Key}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython/Actor').instance('JohnClesse')\n   * // => Key('/Comedy/MontyPython/Actor:JohnCleese')\n   * ```\n   */\n  instance (s) {\n    return new Key(this.toString() + ':' + s)\n  }\n\n  /**\n   * Returns the \"path\" of this key (parent + type).\n   *\n   * @returns {Key}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython/Actor:JohnCleese').path()\n   * // => Key('/Comedy/MontyPython/Actor')\n   * ```\n   */\n  path () {\n    let p = this.parent().toString()\n    if (!p.endsWith(pathSepS)) {\n      p += pathSepS\n    }\n    p += this.type()\n    return new Key(p)\n  }\n\n  /**\n   * Returns the `parent` Key of this Key.\n   *\n   * @returns {Key}\n   *\n   * @example\n   * ```js\n   * new Key(\"/Comedy/MontyPython/Actor:JohnCleese\").parent()\n   * // => Key(\"/Comedy/MontyPython\")\n   * ```\n   */\n  parent () {\n    const list = this.list()\n    if (list.length === 1) {\n      return new Key(pathSepS)\n    }\n\n    return new Key(list.slice(0, -1).join(pathSepS))\n  }\n\n  /**\n   * Returns the `child` Key of this Key.\n   *\n   * @param {Key} key - The child Key to add\n   * @returns {Key}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython').child(new Key('Actor:JohnCleese'))\n   * // => Key('/Comedy/MontyPython/Actor:JohnCleese')\n   * ```\n   */\n  child (key) {\n    if (this.toString() === pathSepS) {\n      return key\n    } else if (key.toString() === pathSepS) {\n      return this\n    }\n\n    return new Key(this.toString() + key.toString(), false)\n  }\n\n  /**\n   * Returns whether this key is a prefix of `other`\n   *\n   * @param {Key} other - The other key to test against\n   * @returns {boolean}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy').isAncestorOf('/Comedy/MontyPython')\n   * // => true\n   * ```\n   */\n  isAncestorOf (other) {\n    if (other.toString() === this.toString()) {\n      return false\n    }\n\n    return other.toString().startsWith(this.toString())\n  }\n\n  /**\n   * Returns whether this key is a contains another as prefix.\n   *\n   * @param {Key} other - The other Key to test against\n   * @returns {boolean}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython').isDecendantOf('/Comedy')\n   * // => true\n   * ```\n   */\n  isDecendantOf (other) {\n    if (other.toString() === this.toString()) {\n      return false\n    }\n\n    return this.toString().startsWith(other.toString())\n  }\n\n  /**\n   * Checks if this key has only one namespace.\n   *\n   * @returns {boolean}\n   *\n   */\n  isTopLevel () {\n    return this.list().length === 1\n  }\n\n  /**\n   * Concats one or more Keys into one new Key.\n   *\n   * @param {Array<Key>} keys - The array of keys to concatenate\n   * @returns {Key}\n   */\n  concat (...keys) {\n    return Key.withNamespaces([...this.namespaces(), ...flatten(keys.map(key => key.namespaces()))])\n  }\n}\n\n/**\n * The first component of a namespace. `foo` in `foo:bar`\n *\n * @param {string} ns\n * @returns {string}\n */\nfunction namespaceType (ns) {\n  const parts = ns.split(':')\n  if (parts.length < 2) {\n    return ''\n  }\n  return parts.slice(0, -1).join(':')\n}\n\n/**\n * The last component of a namespace, `baz` in `foo:bar:baz`.\n *\n * @param {string} ns\n * @returns {string}\n */\nfunction namespaceValue (ns) {\n  const parts = ns.split(':')\n  return parts[parts.length - 1]\n}\n\n/**\n * Flatten array of arrays (only one level)\n *\n * @template T\n * @param {Array<T|T[]>} arr\n * @returns {T[]}\n */\nfunction flatten (arr) {\n  return /** @type {T[]} */([]).concat(...arr)\n}\n\nmodule.exports = Key\n"],"mappings":"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AP;QACD;MACF;;MAED,OAAON,KAAK,CAACI,MAAN,GAAeF,KAAK,CAACE,MAA5B;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,mBAAW;MACT,OAAOjB,GAAG,CAACoB,cAAJ,CAAmB,KAAKN,IAAL,GAAYO,KAAZ,GAAoBC,OAApB,EAAnB,CAAP;IACD;IAED;AACF;AACA;AACA;AACA;;;;WACE,sBAAc;MACZ,OAAO,KAAKR,IAAL,EAAP;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,yBAAiB;MACf,IAAMS,EAAE,GAAG,KAAKC,UAAL,EAAX;MACA,OAAOD,EAAE,CAACA,EAAE,CAACN,MAAH,GAAY,CAAb,CAAT;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,gBAAQ;MACN,OAAO,KAAKzB,QAAL,GAAgBiC,KAAhB,CAAsB9B,QAAtB,EAAgC0B,KAAhC,CAAsC,CAAtC,CAAP;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,gBAAQ;MACN,OAAOK,aAAa,CAAC,KAAKC,aAAL,EAAD,CAApB;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,gBAAQ;MACN,OAAOC,cAAc,CAAC,KAAKD,aAAL,EAAD,CAArB;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,kBAAU1B,CAAV,EAAa;MACX,OAAO,IAAID,GAAJ,CAAQ,KAAKR,QAAL,KAAkB,GAAlB,GAAwBS,CAAhC,CAAP;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,gBAAQ;MACN,IAAI4B,CAAC,GAAG,KAAKC,MAAL,GAActC,QAAd,EAAR;;MACA,IAAI,CAACqC,CAAC,CAACE,QAAF,CAAWpC,QAAX,CAAL,EAA2B;QACzBkC,CAAC,IAAIlC,QAA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"},"metadata":{},"sourceType":"script"}