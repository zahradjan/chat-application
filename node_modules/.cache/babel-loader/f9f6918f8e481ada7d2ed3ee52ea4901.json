{"ast":null,"code":"'use strict';\n\nconst Entry = require('./entry');\n\nconst {\n  base58btc\n} = require('multiformats/bases/base58');\n/**\n * @template T\n * @param {(v:T) => number} fn\n * @param {T[]} list\n * @returns {T[]}\n */\n\n\nconst sortBy = (fn, list) => {\n  return Array.prototype.slice.call(list, 0).sort((a, b) => {\n    const aa = fn(a);\n    const bb = fn(b);\n    return aa < bb ? -1 : aa > bb ? 1 : 0;\n  });\n};\n/**\n * @typedef {import('multiformats').CID} CID\n */\n\n\nclass Wantlist {\n  /**\n   *\n   * @param {import('../../stats')} [stats]\n   */\n  constructor(stats) {\n    /** @type {Map<string, Entry>} */\n    this.set = new Map();\n    this._stats = stats;\n  }\n\n  get length() {\n    return this.set.size;\n  }\n  /**\n   * @param {CID} cid\n   * @param {number} priority\n   * @param {import('../message/message').Message.Wantlist.WantType} wantType\n   */\n\n\n  add(cid, priority, wantType) {\n    // Have to import here to avoid circular reference\n    const Message = require('../message');\n\n    const cidStr = cid.toString(base58btc);\n    const entry = this.set.get(cidStr);\n\n    if (entry) {\n      entry.inc();\n      entry.priority = priority; // We can only overwrite want-have with want-block\n\n      if (entry.wantType === Message.WantType.Have && wantType === Message.WantType.Block) {\n        entry.wantType = wantType;\n      }\n    } else {\n      this.set.set(cidStr, new Entry(cid, priority, wantType));\n\n      if (this._stats) {\n        this._stats.push(null, 'wantListSize', 1);\n      }\n    }\n  }\n  /**\n   * @param {CID} cid\n   */\n\n\n  remove(cid) {\n    const cidStr = cid.toString(base58btc);\n    const entry = this.set.get(cidStr);\n\n    if (!entry) {\n      return;\n    }\n\n    entry.dec(); // only delete when no refs are held\n\n    if (entry.hasRefs()) {\n      return;\n    }\n\n    this.set.delete(cidStr);\n\n    if (this._stats) {\n      this._stats.push(null, 'wantListSize', -1);\n    }\n  }\n  /**\n   * @param {string} cidStr\n   */\n\n\n  removeForce(cidStr) {\n    if (this.set.has(cidStr)) {\n      this.set.delete(cidStr);\n    }\n  }\n  /**\n   * @param {(entry:Entry, key:string) => void} fn\n   */\n\n\n  forEach(fn) {\n    return this.set.forEach(fn);\n  }\n\n  entries() {\n    return this.set.entries();\n  }\n\n  sortedEntries() {\n    // TODO: Figure out if this is an actual bug.\n    // @ts-expect-error - Property 'key' does not exist on type 'WantListEntry'\n    return new Map(sortBy(o => o[1].key, Array.from(this.set.entries())));\n  }\n  /**\n   * @param {CID} cid\n   */\n\n\n  contains(cid) {\n    const cidStr = cid.toString(base58btc);\n    return this.set.has(cidStr);\n  }\n  /**\n   * @param {CID} cid\n   */\n\n\n  get(cid) {\n    const cidStr = cid.toString(base58btc);\n    return this.set.get(cidStr);\n  }\n\n}\n\nWantlist.Entry = Entry;\nmodule.exports = Wantlist;","map":{"version":3,"names":["Entry","require","base58btc","sortBy","fn","list","Array","prototype","slice","call","sort","a","b","aa","bb","Wantlist","constructor","stats","set","Map","_stats","length","size","add","cid","priority","wantType","Message","cidStr","toString","entry","get","inc","WantType","Have","Block","push","remove","dec","hasRefs","delete","removeForce","has","forEach","entries","sortedEntries","o","key","from","contains","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-bitswap/src/types/wantlist/index.js"],"sourcesContent":["'use strict'\n\nconst Entry = require('./entry')\nconst { base58btc } = require('multiformats/bases/base58')\n\n/**\n * @template T\n * @param {(v:T) => number} fn\n * @param {T[]} list\n * @returns {T[]}\n */\nconst sortBy = (fn, list) => {\n  return Array.prototype.slice.call(list, 0).sort((a, b) => {\n    const aa = fn(a)\n    const bb = fn(b)\n    return aa < bb ? -1 : aa > bb ? 1 : 0\n  })\n}\n\n/**\n * @typedef {import('multiformats').CID} CID\n */\n\nclass Wantlist {\n  /**\n   *\n   * @param {import('../../stats')} [stats]\n   */\n  constructor (stats) {\n    /** @type {Map<string, Entry>} */\n    this.set = new Map()\n    this._stats = stats\n  }\n\n  get length () {\n    return this.set.size\n  }\n\n  /**\n   * @param {CID} cid\n   * @param {number} priority\n   * @param {import('../message/message').Message.Wantlist.WantType} wantType\n   */\n  add (cid, priority, wantType) {\n    // Have to import here to avoid circular reference\n    const Message = require('../message')\n\n    const cidStr = cid.toString(base58btc)\n    const entry = this.set.get(cidStr)\n\n    if (entry) {\n      entry.inc()\n      entry.priority = priority\n\n      // We can only overwrite want-have with want-block\n      if (entry.wantType === Message.WantType.Have && wantType === Message.WantType.Block) {\n        entry.wantType = wantType\n      }\n    } else {\n      this.set.set(cidStr, new Entry(cid, priority, wantType))\n      if (this._stats) {\n        this._stats.push(null, 'wantListSize', 1)\n      }\n    }\n  }\n\n  /**\n   * @param {CID} cid\n   */\n  remove (cid) {\n    const cidStr = cid.toString(base58btc)\n    const entry = this.set.get(cidStr)\n\n    if (!entry) {\n      return\n    }\n\n    entry.dec()\n\n    // only delete when no refs are held\n    if (entry.hasRefs()) {\n      return\n    }\n\n    this.set.delete(cidStr)\n    if (this._stats) {\n      this._stats.push(null, 'wantListSize', -1)\n    }\n  }\n\n  /**\n   * @param {string} cidStr\n   */\n  removeForce (cidStr) {\n    if (this.set.has(cidStr)) {\n      this.set.delete(cidStr)\n    }\n  }\n\n  /**\n   * @param {(entry:Entry, key:string) => void} fn\n   */\n  forEach (fn) {\n    return this.set.forEach(fn)\n  }\n\n  entries () {\n    return this.set.entries()\n  }\n\n  sortedEntries () {\n    // TODO: Figure out if this is an actual bug.\n    // @ts-expect-error - Property 'key' does not exist on type 'WantListEntry'\n    return new Map(sortBy(o => o[1].key, Array.from(this.set.entries())))\n  }\n\n  /**\n   * @param {CID} cid\n   */\n  contains (cid) {\n    const cidStr = cid.toString(base58btc)\n    return this.set.has(cidStr)\n  }\n\n  /**\n   * @param {CID} cid\n   */\n  get (cid) {\n    const cidStr = cid.toString(base58btc)\n    return this.set.get(cidStr)\n  }\n}\n\nWantlist.Entry = Entry\nmodule.exports = Wantlist\n"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACA,MAAM;EAAEC;AAAF,IAAgBD,OAAO,CAAC,2BAAD,CAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAME,MAAM,GAAG,CAACC,EAAD,EAAKC,IAAL,KAAc;EAC3B,OAAOC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BJ,IAA3B,EAAiC,CAAjC,EAAoCK,IAApC,CAAyC,CAACC,CAAD,EAAIC,CAAJ,KAAU;IACxD,MAAMC,EAAE,GAAGT,EAAE,CAACO,CAAD,CAAb;IACA,MAAMG,EAAE,GAAGV,EAAE,CAACQ,CAAD,CAAb;IACA,OAAOC,EAAE,GAAGC,EAAL,GAAU,CAAC,CAAX,GAAeD,EAAE,GAAGC,EAAL,GAAU,CAAV,GAAc,CAApC;EACD,CAJM,CAAP;AAKD,CAND;AAQA;AACA;AACA;;;AAEA,MAAMC,QAAN,CAAe;EACb;AACF;AACA;AACA;EACEC,WAAW,CAAEC,KAAF,EAAS;IAClB;IACA,KAAKC,GAAL,GAAW,IAAIC,GAAJ,EAAX;IACA,KAAKC,MAAL,GAAcH,KAAd;EACD;;EAES,IAANI,MAAM,GAAI;IACZ,OAAO,KAAKH,GAAL,CAASI,IAAhB;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEC,GAAG,CAAEC,GAAF,EAAOC,QAAP,EAAiBC,QAAjB,EAA2B;IAC5B;IACA,MAAMC,OAAO,GAAG1B,OAAO,CAAC,YAAD,CAAvB;;IAEA,MAAM2B,MAAM,GAAGJ,GAAG,CAACK,QAAJ,CAAa3B,SAAb,CAAf;IACA,MAAM4B,KAAK,GAAG,KAAKZ,GAAL,CAASa,GAAT,CAAaH,MAAb,CAAd;;IAEA,IAAIE,KAAJ,EAAW;MACTA,KAAK,CAACE,GAAN;MACAF,KAAK,CAACL,QAAN,GAAiBA,QAAjB,CAFS,CAIT;;MACA,IAAIK,KAAK,CAACJ,QAAN,KAAmBC,OAAO,CAACM,QAAR,CAAiBC,IAApC,IAA4CR,QAAQ,KAAKC,OAAO,CAACM,QAAR,CAAiBE,KAA9E,EAAqF;QACnFL,KAAK,CAACJ,QAAN,GAAiBA,QAAjB;MACD;IACF,CARD,MAQO;MACL,KAAKR,GAAL,CAASA,GAAT,CAAaU,MAAb,EAAqB,IAAI5B,KAAJ,CAAUwB,GAAV,EAAeC,QAAf,EAAyBC,QAAzB,CAArB;;MACA,IAAI,KAAKN,MAAT,EAAiB;QACf,KAAKA,MAAL,CAAYgB,IAAZ,CAAiB,IAAjB,EAAuB,cAAvB,EAAuC,CAAvC;MACD;IACF;EACF;EAED;AACF;AACA;;;EACEC,MAAM,CAAEb,GAAF,EAAO;IACX,MAAMI,MAAM,GAAGJ,GAAG,CAACK,QAAJ,CAAa3B,SAAb,CAAf;IACA,MAAM4B,KAAK,GAAG,KAAKZ,GAAL,CAASa,GAAT,CAAaH,MAAb,CAAd;;IAEA,IAAI,CAACE,KAAL,EAAY;MACV;IACD;;IAEDA,KAAK,CAACQ,GAAN,GARW,CAUX;;IACA,IAAIR,KAAK,CAACS,OAAN,EAAJ,EAAqB;MACnB;IACD;;IAED,KAAKrB,GAAL,CAASsB,MAAT,CAAgBZ,MAAhB;;IACA,IAAI,KAAKR,MAAT,EAAiB;MACf,KAAKA,MAAL,CAAYgB,IAAZ,CAAiB,IAAjB,EAAuB,cAAvB,EAAuC,CAAC,CAAxC;IACD;EACF;EAED;AACF;AACA;;;EACEK,WAAW,CAAEb,MAAF,EAAU;IACnB,IAAI,KAAKV,GAAL,CAASwB,GAAT,CAAad,MAAb,CAAJ,EAA0B;MACxB,KAAKV,GAAL,CAASsB,MAAT,CAAgBZ,MAAhB;IACD;EACF;EAED;AACF;AACA;;;EACEe,OAAO,CAAEvC,EAAF,EAAM;IACX,OAAO,KAAKc,GAAL,CAASyB,OAAT,CAAiBvC,EAAjB,CAAP;EACD;;EAEDwC,OAAO,GAAI;IACT,OAAO,KAAK1B,GAAL,CAAS0B,OAAT,EAAP;EACD;;EAEDC,aAAa,GAAI;IACf;IACA;IACA,OAAO,IAAI1B,GAAJ,CAAQhB,MAAM,CAAC2C,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAD,CAAKC,GAAX,EAAgBzC,KAAK,CAAC0C,IAAN,CAAW,KAAK9B,GAAL,CAAS0B,OAAT,EAAX,CAAhB,CAAd,CAAP;EACD;EAED;AACF;AACA;;;EACEK,QAAQ,CAAEzB,GAAF,EAAO;IACb,MAAMI,MAAM,GAAGJ,GAAG,CAACK,QAAJ,CAAa3B,SAAb,CAAf;IACA,OAAO,KAAKgB,GAAL,CAASwB,GAAT,CAAad,MAAb,CAAP;EACD;EAED;AACF;AACA;;;EACEG,GAAG,CAAEP,GAAF,EAAO;IACR,MAAMI,MAAM,GAAGJ,GAAG,CAACK,QAAJ,CAAa3B,SAAb,CAAf;IACA,OAAO,KAAKgB,GAAL,CAASa,GAAT,CAAaH,MAAb,CAAP;EACD;;AA3GY;;AA8Gfb,QAAQ,CAACf,KAAT,GAAiBA,KAAjB;AACAkD,MAAM,CAACC,OAAP,GAAiBpC,QAAjB"},"metadata":{},"sourceType":"script"}