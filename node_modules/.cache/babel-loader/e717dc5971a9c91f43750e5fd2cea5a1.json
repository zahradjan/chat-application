{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _wrapAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nvar _awaitAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _asyncIterator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar _asyncGeneratorDelegate = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate.js\").default;\n\nvar dirFlat = require('./dir-flat.js');\n\nvar flatToShard = require('./flat-to-shard.js');\n\nvar dir = require('./dir.js');\n\nvar toPathComponents = require('./utils/to-path-components.js');\n\nfunction addToTree(_x6, _x7, _x8) {\n  return _addToTree.apply(this, arguments);\n}\n\nfunction _addToTree() {\n  _addToTree = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(elem, tree, options) {\n    var pathElems, lastIndex, parent, currentPath, i, pathElem, last, dir$1;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            pathElems = toPathComponents(elem.path || '');\n            lastIndex = pathElems.length - 1;\n            parent = tree;\n            currentPath = '';\n            i = 0;\n\n          case 5:\n            if (!(i < pathElems.length)) {\n              _context3.next = 30;\n              break;\n            }\n\n            pathElem = pathElems[i];\n            currentPath += \"\".concat(currentPath ? '/' : '').concat(pathElem);\n            last = i === lastIndex;\n            parent.dirty = true;\n            parent.cid = undefined;\n            parent.size = undefined;\n\n            if (!last) {\n              _context3.next = 20;\n              break;\n            }\n\n            _context3.next = 15;\n            return parent.put(pathElem, elem);\n\n          case 15:\n            _context3.next = 17;\n            return flatToShard(null, parent, options.shardSplitThreshold, options);\n\n          case 17:\n            tree = _context3.sent;\n            _context3.next = 27;\n            break;\n\n          case 20:\n            _context3.next = 22;\n            return parent.get(pathElem);\n\n          case 22:\n            dir$1 = _context3.sent;\n\n            if (!dir$1 || !(dir$1 instanceof dir)) {\n              dir$1 = new dirFlat({\n                root: false,\n                dir: true,\n                parent: parent,\n                parentKey: pathElem,\n                path: currentPath,\n                dirty: true,\n                flat: true,\n                mtime: dir$1 && dir$1.unixfs && dir$1.unixfs.mtime,\n                mode: dir$1 && dir$1.unixfs && dir$1.unixfs.mode\n              }, options);\n            }\n\n            _context3.next = 26;\n            return parent.put(pathElem, dir$1);\n\n          case 26:\n            parent = dir$1;\n\n          case 27:\n            i++;\n            _context3.next = 5;\n            break;\n\n          case 30:\n            return _context3.abrupt(\"return\", tree);\n\n          case 31:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _addToTree.apply(this, arguments);\n}\n\nfunction flushAndYield(_x, _x2) {\n  return _flushAndYield.apply(this, arguments);\n}\n\nfunction _flushAndYield() {\n  _flushAndYield = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(tree, blockstore) {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (tree instanceof dir) {\n              _context.next = 5;\n              break;\n            }\n\n            if (!(tree && tree.unixfs && tree.unixfs.isDirectory())) {\n              _context.next = 4;\n              break;\n            }\n\n            _context.next = 4;\n            return tree;\n\n          case 4:\n            return _context.abrupt(\"return\");\n\n          case 5:\n            return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(tree.flush(blockstore)), _awaitAsyncGenerator), \"t0\", 6);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _flushAndYield.apply(this, arguments);\n}\n\nfunction treeBuilder(_x3, _x4, _x5) {\n  return _treeBuilder.apply(this, arguments);\n}\n\nfunction _treeBuilder() {\n  _treeBuilder = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(source, block, options) {\n    var tree, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, entry, _iteratorAbruptCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, unwrapped;\n\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            tree = new dirFlat({\n              root: true,\n              dir: true,\n              path: '',\n              dirty: true,\n              flat: true\n            }, options);\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context2.prev = 3;\n            _iterator = _asyncIterator(source);\n\n          case 5:\n            _context2.next = 7;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 7:\n            if (!(_iteratorAbruptCompletion = !(_step = _context2.sent).done)) {\n              _context2.next = 20;\n              break;\n            }\n\n            entry = _step.value;\n\n            if (entry) {\n              _context2.next = 11;\n              break;\n            }\n\n            return _context2.abrupt(\"continue\", 17);\n\n          case 11:\n            _context2.next = 13;\n            return _awaitAsyncGenerator(addToTree(entry, tree, options));\n\n          case 13:\n            tree = _context2.sent;\n\n            if (!(!entry.unixfs || !entry.unixfs.isDirectory())) {\n              _context2.next = 17;\n              break;\n            }\n\n            _context2.next = 17;\n            return entry;\n\n          case 17:\n            _iteratorAbruptCompletion = false;\n            _context2.next = 5;\n            break;\n\n          case 20:\n            _context2.next = 26;\n            break;\n\n          case 22:\n            _context2.prev = 22;\n            _context2.t0 = _context2[\"catch\"](3);\n            _didIteratorError = true;\n            _iteratorError = _context2.t0;\n\n          case 26:\n            _context2.prev = 26;\n            _context2.prev = 27;\n\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context2.next = 31;\n              break;\n            }\n\n            _context2.next = 31;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 31:\n            _context2.prev = 31;\n\n            if (!_didIteratorError) {\n              _context2.next = 34;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 34:\n            return _context2.finish(31);\n\n          case 35:\n            return _context2.finish(26);\n\n          case 36:\n            if (!options.wrapWithDirectory) {\n              _context2.next = 40;\n              break;\n            }\n\n            return _context2.delegateYield(_asyncGeneratorDelegate(_asyncIterator(flushAndYield(tree, block)), _awaitAsyncGenerator), \"t1\", 38);\n\n          case 38:\n            _context2.next = 70;\n            break;\n\n          case 40:\n            _iteratorAbruptCompletion2 = false;\n            _didIteratorError2 = false;\n            _context2.prev = 42;\n            _iterator2 = _asyncIterator(tree.eachChildSeries());\n\n          case 44:\n            _context2.next = 46;\n            return _awaitAsyncGenerator(_iterator2.next());\n\n          case 46:\n            if (!(_iteratorAbruptCompletion2 = !(_step2 = _context2.sent).done)) {\n              _context2.next = 54;\n              break;\n            }\n\n            unwrapped = _step2.value;\n\n            if (unwrapped) {\n              _context2.next = 50;\n              break;\n            }\n\n            return _context2.abrupt(\"continue\", 51);\n\n          case 50:\n            return _context2.delegateYield(_asyncGeneratorDelegate(_asyncIterator(flushAndYield(unwrapped.child, block)), _awaitAsyncGenerator), \"t2\", 51);\n\n          case 51:\n            _iteratorAbruptCompletion2 = false;\n            _context2.next = 44;\n            break;\n\n          case 54:\n            _context2.next = 60;\n            break;\n\n          case 56:\n            _context2.prev = 56;\n            _context2.t3 = _context2[\"catch\"](42);\n            _didIteratorError2 = true;\n            _iteratorError2 = _context2.t3;\n\n          case 60:\n            _context2.prev = 60;\n            _context2.prev = 61;\n\n            if (!(_iteratorAbruptCompletion2 && _iterator2.return != null)) {\n              _context2.next = 65;\n              break;\n            }\n\n            _context2.next = 65;\n            return _awaitAsyncGenerator(_iterator2.return());\n\n          case 65:\n            _context2.prev = 65;\n\n            if (!_didIteratorError2) {\n              _context2.next = 68;\n              break;\n            }\n\n            throw _iteratorError2;\n\n          case 68:\n            return _context2.finish(65);\n\n          case 69:\n            return _context2.finish(60);\n\n          case 70:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[3, 22, 26, 36], [27,, 31, 35], [42, 56, 60, 70], [61,, 65, 69]]);\n  }));\n  return _treeBuilder.apply(this, arguments);\n}\n\nmodule.exports = treeBuilder;","map":{"version":3,"names":["dirFlat","require","flatToShard","dir","toPathComponents","addToTree","elem","tree","options","pathElems","path","lastIndex","length","parent","currentPath","i","pathElem","last","dirty","cid","undefined","size","put","shardSplitThreshold","get","dir$1","root","parentKey","flat","mtime","unixfs","mode","flushAndYield","blockstore","isDirectory","flush","treeBuilder","source","block","entry","wrapWithDirectory","eachChildSeries","unwrapped","child","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-unixfs-importer/cjs/src/tree-builder.js"],"sourcesContent":["'use strict';\n\nvar dirFlat = require('./dir-flat.js');\nvar flatToShard = require('./flat-to-shard.js');\nvar dir = require('./dir.js');\nvar toPathComponents = require('./utils/to-path-components.js');\n\nasync function addToTree(elem, tree, options) {\n  const pathElems = toPathComponents(elem.path || '');\n  const lastIndex = pathElems.length - 1;\n  let parent = tree;\n  let currentPath = '';\n  for (let i = 0; i < pathElems.length; i++) {\n    const pathElem = pathElems[i];\n    currentPath += `${ currentPath ? '/' : '' }${ pathElem }`;\n    const last = i === lastIndex;\n    parent.dirty = true;\n    parent.cid = undefined;\n    parent.size = undefined;\n    if (last) {\n      await parent.put(pathElem, elem);\n      tree = await flatToShard(null, parent, options.shardSplitThreshold, options);\n    } else {\n      let dir$1 = await parent.get(pathElem);\n      if (!dir$1 || !(dir$1 instanceof dir)) {\n        dir$1 = new dirFlat({\n          root: false,\n          dir: true,\n          parent: parent,\n          parentKey: pathElem,\n          path: currentPath,\n          dirty: true,\n          flat: true,\n          mtime: dir$1 && dir$1.unixfs && dir$1.unixfs.mtime,\n          mode: dir$1 && dir$1.unixfs && dir$1.unixfs.mode\n        }, options);\n      }\n      await parent.put(pathElem, dir$1);\n      parent = dir$1;\n    }\n  }\n  return tree;\n}\nasync function* flushAndYield(tree, blockstore) {\n  if (!(tree instanceof dir)) {\n    if (tree && tree.unixfs && tree.unixfs.isDirectory()) {\n      yield tree;\n    }\n    return;\n  }\n  yield* tree.flush(blockstore);\n}\nasync function* treeBuilder(source, block, options) {\n  let tree = new dirFlat({\n    root: true,\n    dir: true,\n    path: '',\n    dirty: true,\n    flat: true\n  }, options);\n  for await (const entry of source) {\n    if (!entry) {\n      continue;\n    }\n    tree = await addToTree(entry, tree, options);\n    if (!entry.unixfs || !entry.unixfs.isDirectory()) {\n      yield entry;\n    }\n  }\n  if (options.wrapWithDirectory) {\n    yield* flushAndYield(tree, block);\n  } else {\n    for await (const unwrapped of tree.eachChildSeries()) {\n      if (!unwrapped) {\n        continue;\n      }\n      yield* flushAndYield(unwrapped.child, block);\n    }\n  }\n}\n\nmodule.exports = treeBuilder;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}