{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _inherits = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar EventEmitter = require('events').EventEmitter;\n/**\n * Interface for OrbitDB Access Controllers\n *\n * Any OrbitDB access controller needs to define and implement\n * the methods defined by the interface here.\n */\n\n\nvar AccessController = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(AccessController, _EventEmitter);\n\n  var _super = _createSuper(AccessController);\n\n  function AccessController() {\n    _classCallCheck(this, AccessController);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(AccessController, [{\n    key: \"type\",\n    get:\n    /*\n      Return the type for this controller\n      NOTE! This is the only property of the interface that\n      shouldn't be overridden in the inherited Access Controller\n    */\n    function get() {\n      return this.constructor.type;\n    }\n    /* Each Access Controller has some address to anchor to */\n\n  }, {\n    key: \"address\",\n    get: function get() {}\n    /*\n      Called by the databases (the log) to see if entry should\n      be allowed in the database. Return true if the entry is allowed,\n      false is not allowed\n    */\n\n  }, {\n    key: \"canAppend\",\n    value: function () {\n      var _canAppend = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(entry, identityProvider) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function canAppend(_x, _x2) {\n        return _canAppend.apply(this, arguments);\n      }\n\n      return canAppend;\n    }()\n    /* Add and remove access */\n\n  }, {\n    key: \"grant\",\n    value: function () {\n      var _grant = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(access, identity) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", false);\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function grant(_x3, _x4) {\n        return _grant.apply(this, arguments);\n      }\n\n      return grant;\n    }()\n  }, {\n    key: \"revoke\",\n    value: function () {\n      var _revoke = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(access, identity) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", false);\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function revoke(_x5, _x6) {\n        return _revoke.apply(this, arguments);\n      }\n\n      return revoke;\n    }()\n    /* AC creation and loading */\n\n  }, {\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(address) {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function load(_x7) {\n        return _load.apply(this, arguments);\n      }\n\n      return load;\n    }()\n    /* Returns AC manifest parameters object */\n\n  }, {\n    key: \"save\",\n    value: function () {\n      var _save = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function save() {\n        return _save.apply(this, arguments);\n      }\n\n      return save;\n    }()\n    /* Called when the database for this AC gets closed */\n\n  }, {\n    key: \"close\",\n    value: function () {\n      var _close = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      function close() {\n        return _close.apply(this, arguments);\n      }\n\n      return close;\n    }()\n  }], [{\n    key: \"create\",\n    value:\n    /*\n      Every AC needs to have a 'Factory' method\n      that creates an instance of the AccessController\n    */\n    function () {\n      var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(orbitdb, options) {\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      function create(_x8, _x9) {\n        return _create.apply(this, arguments);\n      }\n\n      return create;\n    }()\n    /* Return the type for this controller */\n\n  }, {\n    key: \"type\",\n    get: function get() {\n      throw new Error('\\'static get type ()\\' needs to be defined in the inheriting class');\n    }\n  }]);\n\n  return AccessController;\n}(EventEmitter);\n\nmodule.exports = AccessController;","map":{"version":3,"names":["EventEmitter","require","AccessController","constructor","type","entry","identityProvider","access","identity","address","orbitdb","options","Error","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/orbit-db-access-controllers/src/access-controller-interface.js"],"sourcesContent":["'use strict'\n\nconst EventEmitter = require('events').EventEmitter\n\n/**\n * Interface for OrbitDB Access Controllers\n *\n * Any OrbitDB access controller needs to define and implement\n * the methods defined by the interface here.\n */\nclass AccessController extends EventEmitter {\n  /*\n    Every AC needs to have a 'Factory' method\n    that creates an instance of the AccessController\n  */\n  static async create (orbitdb, options) {}\n\n  /* Return the type for this controller */\n  static get type () {\n    throw new Error('\\'static get type ()\\' needs to be defined in the inheriting class')\n  }\n\n  /*\n    Return the type for this controller\n    NOTE! This is the only property of the interface that\n    shouldn't be overridden in the inherited Access Controller\n  */\n  get type () {\n    return this.constructor.type\n  }\n\n  /* Each Access Controller has some address to anchor to */\n  get address () {}\n\n  /*\n    Called by the databases (the log) to see if entry should\n    be allowed in the database. Return true if the entry is allowed,\n    false is not allowed\n  */\n  async canAppend (entry, identityProvider) {}\n\n  /* Add and remove access */\n  async grant (access, identity) { return false }\n  async revoke (access, identity) { return false }\n\n  /* AC creation and loading */\n  async load (address) {}\n  /* Returns AC manifest parameters object */\n  async save () {}\n  /* Called when the database for this AC gets closed */\n  async close () {}\n}\n\nmodule.exports = AccessController\n"],"mappings":"AAAA;;;;;;;;;;;;;;AAEA,IAAMA,YAAY,GAAGC,OAAO,CAAC,QAAD,CAAP,CAAkBD,YAAvC;AAEA;AACA;AACA;AACA;AACA;AACA;;;IACME,gB;;;;;;;;;;;;;;IAYJ;AACF;AACA;AACA;AACA;IACE,eAAY;MACV,OAAO,KAAKC,WAAL,CAAiBC,IAAxB;IACD;IAED;;;;SACA,eAAe,CAAE;IAEjB;AACF;AACA;AACA;AACA;;;;;kFACE,iBAAiBC,KAAjB,EAAwBC,gBAAxB;QAAA;UAAA;YAAA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;IAEA;;;;;8EACA,kBAAaC,MAAb,EAAqBC,QAArB;QAAA;UAAA;YAAA;cAAA;gBAAA,kCAAwC,KAAxC;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;;;;+EACA,kBAAcD,MAAd,EAAsBC,QAAtB;QAAA;UAAA;YAAA;cAAA;gBAAA,kCAAyC,KAAzC;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;IAEA;;;;;6EACA,kBAAYC,OAAZ;QAAA;UAAA;YAAA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;IACA;;;;;6EACA;QAAA;UAAA;YAAA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;IACA;;;;;8EACA;QAAA;UAAA;YAAA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;;;;IAvCA;AACF;AACA;AACA;;+EACE,kBAAqBC,OAArB,EAA8BC,OAA9B;QAAA;UAAA;YAAA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;IAEA;;;;SACA,eAAmB;MACjB,MAAM,IAAIC,KAAJ,CAAU,oEAAV,CAAN;IACD;;;;EAV4BZ,Y;;AA2C/Ba,MAAM,CAACC,OAAP,GAAiBZ,gBAAjB"},"metadata":{},"sourceType":"script"}