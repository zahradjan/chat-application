{"ast":null,"code":"'use strict';\n\nconst mergeOptions = require('merge-options').bind({\n  ignoreUndefined: true\n});\n\nconst toMfsPath = require('./utils/to-mfs-path');\n\nconst {\n  exporter\n} = require('ipfs-unixfs-exporter');\n\nconst log = require('debug')('ipfs:mfs:stat');\n\nconst errCode = require('err-code');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst dagPb = require('@ipld/dag-pb');\n/**\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} withLocal\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\n\n\nconst defaultOptions = {\n  withLocal: false\n};\n/**\n * @typedef {import('ipfs-core-types/src/files').StatResult} StatResult\n */\n\n/**\n * @param {MfsContext} context\n */\n\nmodule.exports = context => {\n  /**\n   * @type {import('ipfs-core-types/src/files').API[\"stat\"]}\n   */\n  async function mfsStat(path) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    /** @type {DefaultOptions} */\n    options = mergeOptions(defaultOptions, options);\n    log(`Fetching stats for ${path}`);\n    const {\n      type,\n      cid,\n      mfsPath\n    } = await toMfsPath(context, path, options);\n    const exportPath = type === 'ipfs' && cid ? cid : mfsPath;\n    let file;\n\n    try {\n      file = await exporter(exportPath, context.repo.blocks);\n    } catch (err) {\n      if (err.code === 'ERR_NOT_FOUND') {\n        throw errCode(new Error(`${path} does not exist`), 'ERR_NOT_FOUND');\n      }\n\n      throw err;\n    }\n\n    if (!statters[file.type]) {\n      throw new Error(`Cannot stat codec ${file.cid.code}`);\n    }\n\n    return statters[file.type](file);\n  }\n\n  return withTimeoutOption(mfsStat);\n};\n/** @type {Record<string, (file:any) => StatResult>} */\n\n\nconst statters = {\n  /**\n   * @param {import('ipfs-unixfs-exporter').RawNode} file\n   */\n  raw: file => {\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      blocks: 0,\n      type: 'file',\n      // for go compatibility\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    };\n  },\n\n  /**\n   * @param {import('ipfs-unixfs-exporter').UnixFSFile} file\n   */\n  file: file => {\n    /** @type {StatResult} */\n    const stat = {\n      cid: file.cid,\n      type: 'file',\n      size: file.unixfs.fileSize(),\n      cumulativeSize: dagPb.encode(file.node).length + (file.node.Links || []).reduce((acc, curr) => acc + (curr.Tsize || 0), 0),\n      blocks: file.unixfs.blockSizes.length,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false,\n      mode: file.unixfs.mode\n    };\n\n    if (file.unixfs.mtime) {\n      stat.mtime = file.unixfs.mtime;\n    }\n\n    return stat;\n  },\n\n  /**\n   * @param {import('ipfs-unixfs-exporter').UnixFSDirectory} file\n   */\n  directory: file => {\n    /** @type {StatResult} */\n    const stat = {\n      cid: file.cid,\n      type: 'directory',\n      size: 0,\n      cumulativeSize: dagPb.encode(file.node).length + (file.node.Links || []).reduce((acc, curr) => acc + (curr.Tsize || 0), 0),\n      blocks: file.node.Links.length,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false,\n      mode: file.unixfs.mode\n    };\n\n    if (file.unixfs.mtime) {\n      stat.mtime = file.unixfs.mtime;\n    }\n\n    return stat;\n  },\n\n  /**\n   * @param {import('ipfs-unixfs-exporter').ObjectNode} file\n   */\n  object: file => {\n    /** @type {StatResult} */\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      type: 'file',\n      // for go compatibility\n      blocks: 0,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    };\n  },\n\n  /**\n   * @param {import('ipfs-unixfs-exporter').IdentityNode} file\n   */\n  identity: file => {\n    /** @type {StatResult} */\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      blocks: 0,\n      type: 'file',\n      // for go compatibility\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    };\n  }\n};","map":{"version":3,"names":["mergeOptions","require","bind","ignoreUndefined","toMfsPath","exporter","log","errCode","withTimeoutOption","dagPb","defaultOptions","withLocal","module","exports","context","mfsStat","path","options","type","cid","mfsPath","exportPath","file","repo","blocks","err","code","Error","statters","raw","size","node","length","cumulativeSize","local","undefined","sizeLocal","withLocality","stat","unixfs","fileSize","encode","Links","reduce","acc","curr","Tsize","blockSizes","mode","mtime","directory","object","identity"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/files/stat.js"],"sourcesContent":["'use strict'\n\nconst mergeOptions = require('merge-options').bind({ ignoreUndefined: true })\nconst toMfsPath = require('./utils/to-mfs-path')\nconst { exporter } = require('ipfs-unixfs-exporter')\nconst log = require('debug')('ipfs:mfs:stat')\nconst errCode = require('err-code')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst dagPb = require('@ipld/dag-pb')\n\n/**\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} withLocal\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  withLocal: false\n}\n\n/**\n * @typedef {import('ipfs-core-types/src/files').StatResult} StatResult\n */\n\n/**\n * @param {MfsContext} context\n */\nmodule.exports = (context) => {\n  /**\n   * @type {import('ipfs-core-types/src/files').API[\"stat\"]}\n   */\n  async function mfsStat (path, options = {}) {\n    /** @type {DefaultOptions} */\n    options = mergeOptions(defaultOptions, options)\n\n    log(`Fetching stats for ${path}`)\n\n    const {\n      type,\n      cid,\n      mfsPath\n    } = await toMfsPath(context, path, options)\n\n    const exportPath = type === 'ipfs' && cid ? cid : mfsPath\n    let file\n\n    try {\n      file = await exporter(exportPath, context.repo.blocks)\n    } catch (err) {\n      if (err.code === 'ERR_NOT_FOUND') {\n        throw errCode(new Error(`${path} does not exist`), 'ERR_NOT_FOUND')\n      }\n\n      throw err\n    }\n\n    if (!statters[file.type]) {\n      throw new Error(`Cannot stat codec ${file.cid.code}`)\n    }\n\n    return statters[file.type](file)\n  }\n\n  return withTimeoutOption(mfsStat)\n}\n\n/** @type {Record<string, (file:any) => StatResult>} */\nconst statters = {\n  /**\n   * @param {import('ipfs-unixfs-exporter').RawNode} file\n   */\n  raw: (file) => {\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      blocks: 0,\n      type: 'file', // for go compatibility\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    }\n  },\n  /**\n   * @param {import('ipfs-unixfs-exporter').UnixFSFile} file\n   */\n  file: (file) => {\n    /** @type {StatResult} */\n    const stat = {\n      cid: file.cid,\n      type: 'file',\n      size: file.unixfs.fileSize(),\n      cumulativeSize: dagPb.encode(file.node).length + (file.node.Links || []).reduce((acc, curr) => acc + (curr.Tsize || 0), 0),\n      blocks: file.unixfs.blockSizes.length,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false,\n      mode: file.unixfs.mode\n    }\n\n    if (file.unixfs.mtime) {\n      stat.mtime = file.unixfs.mtime\n    }\n\n    return stat\n  },\n  /**\n   * @param {import('ipfs-unixfs-exporter').UnixFSDirectory} file\n   */\n  directory: (file) => {\n    /** @type {StatResult} */\n    const stat = {\n      cid: file.cid,\n      type: 'directory',\n      size: 0,\n      cumulativeSize: dagPb.encode(file.node).length + (file.node.Links || []).reduce((acc, curr) => acc + (curr.Tsize || 0), 0),\n      blocks: file.node.Links.length,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false,\n      mode: file.unixfs.mode\n    }\n\n    if (file.unixfs.mtime) {\n      stat.mtime = file.unixfs.mtime\n    }\n\n    return stat\n  },\n  /**\n   * @param {import('ipfs-unixfs-exporter').ObjectNode} file\n   */\n  object: (file) => {\n    /** @type {StatResult} */\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      type: 'file', // for go compatibility\n      blocks: 0,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    }\n  },\n  /**\n   * @param {import('ipfs-unixfs-exporter').IdentityNode} file\n   */\n  identity: (file) => {\n    /** @type {StatResult} */\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      blocks: 0,\n      type: 'file', // for go compatibility\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}