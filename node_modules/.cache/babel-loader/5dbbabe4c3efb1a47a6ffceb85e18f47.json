{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _createForOfIteratorHelper = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _objectSpread = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _awaitAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _wrapAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nvar _asyncIterator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar _require = require('multiaddr'),\n    Multiaddr = _require.Multiaddr;\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nvar _require2 = require('./response-types'),\n    Provider = _require2.Provider;\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {DHTAPI[\"findProvs\"]}\n   */\n  function findProvs(_x) {\n    return _findProvs.apply(this, arguments);\n  }\n\n  function _findProvs() {\n    _findProvs = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(cid) {\n      var options,\n          res,\n          _iteratorAbruptCompletion,\n          _didIteratorError,\n          _iteratorError,\n          _iterator,\n          _step,\n          message,\n          _iterator2,\n          _step2,\n          _step2$value,\n          ID,\n          Addrs,\n          _args = arguments;\n\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _context.next = 3;\n              return _awaitAsyncGenerator(api.post('dht/findprovs', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: cid.toString()\n                }, options)),\n                headers: options.headers\n              }));\n\n            case 3:\n              res = _context.sent;\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 6;\n              _iterator = _asyncIterator(res.ndjson());\n\n            case 8:\n              _context.next = 10;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 10:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 33;\n                break;\n              }\n\n              message = _step.value;\n\n              if (!(message.Type === Provider && message.Responses)) {\n                _context.next = 30;\n                break;\n              }\n\n              _iterator2 = _createForOfIteratorHelper(message.Responses);\n              _context.prev = 14;\n\n              _iterator2.s();\n\n            case 16:\n              if ((_step2 = _iterator2.n()).done) {\n                _context.next = 22;\n                break;\n              }\n\n              _step2$value = _step2.value, ID = _step2$value.ID, Addrs = _step2$value.Addrs;\n              _context.next = 20;\n              return {\n                id: ID,\n                addrs: (Addrs || []).map(function (\n                /** @type {string} **/\n                a) {\n                  return new Multiaddr(a);\n                })\n              };\n\n            case 20:\n              _context.next = 16;\n              break;\n\n            case 22:\n              _context.next = 27;\n              break;\n\n            case 24:\n              _context.prev = 24;\n              _context.t0 = _context[\"catch\"](14);\n\n              _iterator2.e(_context.t0);\n\n            case 27:\n              _context.prev = 27;\n\n              _iterator2.f();\n\n              return _context.finish(27);\n\n            case 30:\n              _iteratorAbruptCompletion = false;\n              _context.next = 8;\n              break;\n\n            case 33:\n              _context.next = 39;\n              break;\n\n            case 35:\n              _context.prev = 35;\n              _context.t1 = _context[\"catch\"](6);\n              _didIteratorError = true;\n              _iteratorError = _context.t1;\n\n            case 39:\n              _context.prev = 39;\n              _context.prev = 40;\n\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 44;\n                break;\n              }\n\n              _context.next = 44;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 44:\n              _context.prev = 44;\n\n              if (!_didIteratorError) {\n                _context.next = 47;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 47:\n              return _context.finish(44);\n\n            case 48:\n              return _context.finish(39);\n\n            case 49:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[6, 35, 39, 49], [14, 24, 27, 30], [40,, 44, 48]]);\n    }));\n    return _findProvs.apply(this, arguments);\n  }\n\n  return findProvs;\n});","map":{"version":3,"names":["require","Multiaddr","configure","toUrlSearchParams","Provider","module","exports","api","findProvs","cid","options","post","signal","searchParams","arg","toString","headers","res","ndjson","message","Type","Responses","ID","Addrs","id","addrs","map","a"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-http-client/src/dht/find-provs.js"],"sourcesContent":["'use strict'\n\nconst { Multiaddr } = require('multiaddr')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst { Provider } = require('./response-types')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"findProvs\"]}\n   */\n  async function * findProvs (cid, options = {}) {\n    const res = await api.post('dht/findprovs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const message of res.ndjson()) {\n      if (message.Type === Provider && message.Responses) {\n        for (const { ID, Addrs } of message.Responses) {\n          yield {\n            id: ID,\n            addrs: (Addrs || []).map((/** @type {string} **/ a) => new Multiaddr(a))\n          }\n        }\n      }\n    }\n  }\n\n  return findProvs\n})\n"],"mappings":"AAAA;;;;;;;;;;;;;;AAEA,eAAsBA,OAAO,CAAC,WAAD,CAA7B;AAAA,IAAQC,SAAR,YAAQA,SAAR;;AACA,IAAMC,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;;AACA,gBAAqBA,OAAO,CAAC,kBAAD,CAA5B;AAAA,IAAQI,QAAR,aAAQA,QAAR;AAEA;AACA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAAC,UAAAK,GAAG,EAAI;EAChC;AACF;AACA;EAHkC,SAIfC,SAJe;IAAA;EAAA;;EAAA;IAAA,0EAIhC,iBAA4BC,GAA5B;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;;MAAA;QAAA;UAAA;YAAA;cAAiCC,OAAjC,2DAA2C,EAA3C;cAAA;cAAA,4BACoBH,GAAG,CAACI,IAAJ,CAAS,eAAT,EAA0B;gBAC1CC,MAAM,EAAEF,OAAO,CAACE,MAD0B;gBAE1CC,YAAY,EAAEV,iBAAiB;kBAC7BW,GAAG,EAAEL,GAAG,CAACM,QAAJ;gBADwB,GAE1BL,OAF0B,EAFW;gBAM1CM,OAAO,EAAEN,OAAO,CAACM;cANyB,CAA1B,CADpB;;YAAA;cACQC,GADR;cAAA;cAAA;cAAA;cAAA,2BAU8BA,GAAG,CAACC,MAAJ,EAV9B;;YAAA;cAAA;cAAA;;YAAA;cAAA;gBAAA;gBAAA;cAAA;;cAUmBC,OAVnB;;cAAA,MAWQA,OAAO,CAACC,IAAR,KAAiBhB,QAAjB,IAA6Be,OAAO,CAACE,SAX7C;gBAAA;gBAAA;cAAA;;cAAA,wCAYkCF,OAAO,CAACE,SAZ1C;cAAA;;cAAA;;YAAA;cAAA;gBAAA;gBAAA;cAAA;;cAAA,6BAYmBC,EAZnB,gBAYmBA,EAZnB,EAYuBC,KAZvB,gBAYuBA,KAZvB;cAAA;cAaQ,OAAM;gBACJC,EAAE,EAAEF,EADA;gBAEJG,KAAK,EAAE,CAACF,KAAK,IAAI,EAAV,EAAcG,GAAd,CAAkB;gBAAC;gBAAuBC,CAAxB;kBAAA,OAA8B,IAAI1B,SAAJ,CAAc0B,CAAd,CAA9B;gBAAA,CAAlB;cAFH,CAAN;;YAbR;cAAA;cAAA;;YAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;;cAAA;;YAAA;cAAA;;cAAA;;cAAA;;YAAA;cAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;;cAAA;gBAAA;gBAAA;cAAA;;cAAA;cAAA;;YAAA;cAAA;;cAAA;gBAAA;gBAAA;cAAA;;cAAA;;YAAA;cAAA;;YAAA;cAAA;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAJgC;IAAA;EAAA;;EA0BhC,OAAOnB,SAAP;AACD,CA3ByB,CAA1B"},"metadata":{},"sourceType":"script"}