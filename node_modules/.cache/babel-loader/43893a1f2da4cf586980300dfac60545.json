{"ast":null,"code":"'use strict';\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n * @param {import('ipfs-core-utils/src/multihashes')} config.hashers\n * @param {import('../../types').Preload} config.preload\n */\n\n\nmodule.exports = _ref => {\n  let {\n    repo,\n    codecs,\n    hashers,\n    preload\n  } = _ref;\n\n  /**\n   * @type {import('ipfs-core-types/src/dag').API[\"put\"]}\n   */\n  async function put(dagNode) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const release = options.pin ? await repo.gcLock.readLock() : null;\n\n    try {\n      const codecName = options.format || 'dag-cbor';\n      const cidVersion = options.version != null ? options.version : codecName === 'dag-pb' ? 0 : 1;\n      const codec = await codecs.getCodec(codecName);\n\n      if (!codec) {\n        throw new Error(`Unknown codec ${options.format}, please configure additional BlockCodecs for this IPFS instance`);\n      }\n\n      const hasher = await hashers.getHasher(options.hashAlg || 'sha2-256');\n\n      if (!hasher) {\n        throw new Error(`Unknown hash algorithm ${options.hashAlg}, please configure additional MultihashHashers for this IPFS instance`);\n      }\n\n      const buf = codec.encode(dagNode);\n      const hash = await hasher.digest(buf);\n      const cid = CID.create(cidVersion, codec.code, hash);\n      await repo.blocks.put(cid, buf, {\n        signal: options.signal\n      });\n\n      if (options.pin) {\n        await repo.pins.pinRecursively(cid);\n      }\n\n      if (options.preload !== false) {\n        preload(cid);\n      }\n\n      return cid;\n    } finally {\n      if (release) {\n        release();\n      }\n    }\n  }\n\n  return withTimeoutOption(put);\n};","map":{"version":3,"names":["CID","require","withTimeoutOption","module","exports","repo","codecs","hashers","preload","put","dagNode","options","release","pin","gcLock","readLock","codecName","format","cidVersion","version","codec","getCodec","Error","hasher","getHasher","hashAlg","buf","encode","hash","digest","cid","create","code","blocks","signal","pins","pinRecursively"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/dag/put.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n * @param {import('ipfs-core-utils/src/multihashes')} config.hashers\n * @param {import('../../types').Preload} config.preload\n */\nmodule.exports = ({ repo, codecs, hashers, preload }) => {\n  /**\n   * @type {import('ipfs-core-types/src/dag').API[\"put\"]}\n   */\n  async function put (dagNode, options = {}) {\n    const release = options.pin ? await repo.gcLock.readLock() : null\n\n    try {\n      const codecName = options.format || 'dag-cbor'\n      const cidVersion = options.version != null ? options.version : (codecName === 'dag-pb' ? 0 : 1)\n      const codec = await codecs.getCodec(codecName)\n\n      if (!codec) {\n        throw new Error(`Unknown codec ${options.format}, please configure additional BlockCodecs for this IPFS instance`)\n      }\n\n      const hasher = await hashers.getHasher(options.hashAlg || 'sha2-256')\n\n      if (!hasher) {\n        throw new Error(`Unknown hash algorithm ${options.hashAlg}, please configure additional MultihashHashers for this IPFS instance`)\n      }\n\n      const buf = codec.encode(dagNode)\n      const hash = await hasher.digest(buf)\n      const cid = CID.create(cidVersion, codec.code, hash)\n\n      await repo.blocks.put(cid, buf, {\n        signal: options.signal\n      })\n\n      if (options.pin) {\n        await repo.pins.pinRecursively(cid)\n      }\n\n      if (options.preload !== false) {\n        preload(cid)\n      }\n\n      return cid\n    } finally {\n      if (release) {\n        release()\n      }\n    }\n  }\n\n  return withTimeoutOption(put)\n}\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA;AAAF,IAAUC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,yCAAD,CAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAiB,QAAwC;EAAA,IAAvC;IAAEC,IAAF;IAAQC,MAAR;IAAgBC,OAAhB;IAAyBC;EAAzB,CAAuC;;EACvD;AACF;AACA;EACE,eAAeC,GAAf,CAAoBC,OAApB,EAA2C;IAAA,IAAdC,OAAc,uEAAJ,EAAI;IACzC,MAAMC,OAAO,GAAGD,OAAO,CAACE,GAAR,GAAc,MAAMR,IAAI,CAACS,MAAL,CAAYC,QAAZ,EAApB,GAA6C,IAA7D;;IAEA,IAAI;MACF,MAAMC,SAAS,GAAGL,OAAO,CAACM,MAAR,IAAkB,UAApC;MACA,MAAMC,UAAU,GAAGP,OAAO,CAACQ,OAAR,IAAmB,IAAnB,GAA0BR,OAAO,CAACQ,OAAlC,GAA6CH,SAAS,KAAK,QAAd,GAAyB,CAAzB,GAA6B,CAA7F;MACA,MAAMI,KAAK,GAAG,MAAMd,MAAM,CAACe,QAAP,CAAgBL,SAAhB,CAApB;;MAEA,IAAI,CAACI,KAAL,EAAY;QACV,MAAM,IAAIE,KAAJ,CAAW,iBAAgBX,OAAO,CAACM,MAAO,kEAA1C,CAAN;MACD;;MAED,MAAMM,MAAM,GAAG,MAAMhB,OAAO,CAACiB,SAAR,CAAkBb,OAAO,CAACc,OAAR,IAAmB,UAArC,CAArB;;MAEA,IAAI,CAACF,MAAL,EAAa;QACX,MAAM,IAAID,KAAJ,CAAW,0BAAyBX,OAAO,CAACc,OAAQ,uEAApD,CAAN;MACD;;MAED,MAAMC,GAAG,GAAGN,KAAK,CAACO,MAAN,CAAajB,OAAb,CAAZ;MACA,MAAMkB,IAAI,GAAG,MAAML,MAAM,CAACM,MAAP,CAAcH,GAAd,CAAnB;MACA,MAAMI,GAAG,GAAG9B,GAAG,CAAC+B,MAAJ,CAAWb,UAAX,EAAuBE,KAAK,CAACY,IAA7B,EAAmCJ,IAAnC,CAAZ;MAEA,MAAMvB,IAAI,CAAC4B,MAAL,CAAYxB,GAAZ,CAAgBqB,GAAhB,EAAqBJ,GAArB,EAA0B;QAC9BQ,MAAM,EAAEvB,OAAO,CAACuB;MADc,CAA1B,CAAN;;MAIA,IAAIvB,OAAO,CAACE,GAAZ,EAAiB;QACf,MAAMR,IAAI,CAAC8B,IAAL,CAAUC,cAAV,CAAyBN,GAAzB,CAAN;MACD;;MAED,IAAInB,OAAO,CAACH,OAAR,KAAoB,KAAxB,EAA+B;QAC7BA,OAAO,CAACsB,GAAD,CAAP;MACD;;MAED,OAAOA,GAAP;IACD,CAhCD,SAgCU;MACR,IAAIlB,OAAJ,EAAa;QACXA,OAAO;MACR;IACF;EACF;;EAED,OAAOV,iBAAiB,CAACO,GAAD,CAAxB;AACD,CA/CD"},"metadata":{},"sourceType":"script"}