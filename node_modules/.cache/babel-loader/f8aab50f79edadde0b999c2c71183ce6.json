{"ast":null,"code":"'use strict';\n\nvar dirSharded = require('./dir-sharded.js');\n\nvar dirFlat = require('./dir-flat.js');\n\nasync function flatToShard(child, dir, threshold, options) {\n  let newDir = dir;\n\n  if (dir instanceof dirFlat && dir.directChildrenCount() >= threshold) {\n    newDir = await convertToShard(dir, options);\n  }\n\n  const parent = newDir.parent;\n\n  if (parent) {\n    if (newDir !== dir) {\n      if (child) {\n        child.parent = newDir;\n      }\n\n      if (!newDir.parentKey) {\n        throw new Error('No parent key found');\n      }\n\n      await parent.put(newDir.parentKey, newDir);\n    }\n\n    return flatToShard(newDir, parent, threshold, options);\n  }\n\n  return newDir;\n}\n\nasync function convertToShard(oldDir, options) {\n  const newDir = new dirSharded({\n    root: oldDir.root,\n    dir: true,\n    parent: oldDir.parent,\n    parentKey: oldDir.parentKey,\n    path: oldDir.path,\n    dirty: oldDir.dirty,\n    flat: false,\n    mtime: oldDir.mtime,\n    mode: oldDir.mode\n  }, options);\n\n  for await (const {\n    key,\n    child\n  } of oldDir.eachChildSeries()) {\n    await newDir.put(key, child);\n  }\n\n  return newDir;\n}\n\nmodule.exports = flatToShard;","map":{"version":3,"names":["dirSharded","require","dirFlat","flatToShard","child","dir","threshold","options","newDir","directChildrenCount","convertToShard","parent","parentKey","Error","put","oldDir","root","path","dirty","flat","mtime","mode","key","eachChildSeries","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-unixfs-importer/cjs/src/flat-to-shard.js"],"sourcesContent":["'use strict';\n\nvar dirSharded = require('./dir-sharded.js');\nvar dirFlat = require('./dir-flat.js');\n\nasync function flatToShard(child, dir, threshold, options) {\n  let newDir = dir;\n  if (dir instanceof dirFlat && dir.directChildrenCount() >= threshold) {\n    newDir = await convertToShard(dir, options);\n  }\n  const parent = newDir.parent;\n  if (parent) {\n    if (newDir !== dir) {\n      if (child) {\n        child.parent = newDir;\n      }\n      if (!newDir.parentKey) {\n        throw new Error('No parent key found');\n      }\n      await parent.put(newDir.parentKey, newDir);\n    }\n    return flatToShard(newDir, parent, threshold, options);\n  }\n  return newDir;\n}\nasync function convertToShard(oldDir, options) {\n  const newDir = new dirSharded({\n    root: oldDir.root,\n    dir: true,\n    parent: oldDir.parent,\n    parentKey: oldDir.parentKey,\n    path: oldDir.path,\n    dirty: oldDir.dirty,\n    flat: false,\n    mtime: oldDir.mtime,\n    mode: oldDir.mode\n  }, options);\n  for await (const {key, child} of oldDir.eachChildSeries()) {\n    await newDir.put(key, child);\n  }\n  return newDir;\n}\n\nmodule.exports = flatToShard;\n"],"mappings":"AAAA;;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,kBAAD,CAAxB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,eAAD,CAArB;;AAEA,eAAeE,WAAf,CAA2BC,KAA3B,EAAkCC,GAAlC,EAAuCC,SAAvC,EAAkDC,OAAlD,EAA2D;EACzD,IAAIC,MAAM,GAAGH,GAAb;;EACA,IAAIA,GAAG,YAAYH,OAAf,IAA0BG,GAAG,CAACI,mBAAJ,MAA6BH,SAA3D,EAAsE;IACpEE,MAAM,GAAG,MAAME,cAAc,CAACL,GAAD,EAAME,OAAN,CAA7B;EACD;;EACD,MAAMI,MAAM,GAAGH,MAAM,CAACG,MAAtB;;EACA,IAAIA,MAAJ,EAAY;IACV,IAAIH,MAAM,KAAKH,GAAf,EAAoB;MAClB,IAAID,KAAJ,EAAW;QACTA,KAAK,CAACO,MAAN,GAAeH,MAAf;MACD;;MACD,IAAI,CAACA,MAAM,CAACI,SAAZ,EAAuB;QACrB,MAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;MACD;;MACD,MAAMF,MAAM,CAACG,GAAP,CAAWN,MAAM,CAACI,SAAlB,EAA6BJ,MAA7B,CAAN;IACD;;IACD,OAAOL,WAAW,CAACK,MAAD,EAASG,MAAT,EAAiBL,SAAjB,EAA4BC,OAA5B,CAAlB;EACD;;EACD,OAAOC,MAAP;AACD;;AACD,eAAeE,cAAf,CAA8BK,MAA9B,EAAsCR,OAAtC,EAA+C;EAC7C,MAAMC,MAAM,GAAG,IAAIR,UAAJ,CAAe;IAC5BgB,IAAI,EAAED,MAAM,CAACC,IADe;IAE5BX,GAAG,EAAE,IAFuB;IAG5BM,MAAM,EAAEI,MAAM,CAACJ,MAHa;IAI5BC,SAAS,EAAEG,MAAM,CAACH,SAJU;IAK5BK,IAAI,EAAEF,MAAM,CAACE,IALe;IAM5BC,KAAK,EAAEH,MAAM,CAACG,KANc;IAO5BC,IAAI,EAAE,KAPsB;IAQ5BC,KAAK,EAAEL,MAAM,CAACK,KARc;IAS5BC,IAAI,EAAEN,MAAM,CAACM;EATe,CAAf,EAUZd,OAVY,CAAf;;EAWA,WAAW,MAAM;IAACe,GAAD;IAAMlB;EAAN,CAAjB,IAAiCW,MAAM,CAACQ,eAAP,EAAjC,EAA2D;IACzD,MAAMf,MAAM,CAACM,GAAP,CAAWQ,GAAX,EAAgBlB,KAAhB,CAAN;EACD;;EACD,OAAOI,MAAP;AACD;;AAEDgB,MAAM,CAACC,OAAP,GAAiBtB,WAAjB"},"metadata":{},"sourceType":"script"}