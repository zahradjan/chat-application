{"ast":null,"code":"'use strict'; // dns-nodejs gets replaced by dns-browser when bundled\n\nconst dns = require('../runtime/dns-nodejs');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {string} domain\n * @returns {string}\n */\n\n\nfunction fqdnFixups(domain) {\n  // Allow resolution of .eth names via .eth.link\n  // More context at the go-ipfs counterpart: https://github.com/ipfs/go-ipfs/pull/6448\n  if (domain.endsWith('.eth')) {\n    domain = domain.replace(/.eth$/, '.eth.link');\n  }\n\n  return domain;\n}\n\nmodule.exports = () => {\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"dns\"]}\n   */\n  const resolveDNS = async function (domain) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      recursive: true\n    };\n\n    // eslint-disable-line require-await\n    if (typeof domain !== 'string') {\n      throw new Error('Invalid arguments, domain must be a string');\n    }\n\n    domain = fqdnFixups(domain);\n    return dns(domain, options);\n  };\n\n  return withTimeoutOption(resolveDNS);\n};","map":{"version":3,"names":["dns","require","withTimeoutOption","fqdnFixups","domain","endsWith","replace","module","exports","resolveDNS","options","recursive","Error"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/dns.js"],"sourcesContent":["'use strict'\n\n// dns-nodejs gets replaced by dns-browser when bundled\nconst dns = require('../runtime/dns-nodejs')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @param {string} domain\n * @returns {string}\n */\nfunction fqdnFixups (domain) {\n  // Allow resolution of .eth names via .eth.link\n  // More context at the go-ipfs counterpart: https://github.com/ipfs/go-ipfs/pull/6448\n  if (domain.endsWith('.eth')) {\n    domain = domain.replace(/.eth$/, '.eth.link')\n  }\n  return domain\n}\n\nmodule.exports = () => {\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"dns\"]}\n   */\n  const resolveDNS = async (domain, options = { recursive: true }) => { // eslint-disable-line require-await\n    if (typeof domain !== 'string') {\n      throw new Error('Invalid arguments, domain must be a string')\n    }\n\n    domain = fqdnFixups(domain)\n\n    return dns(domain, options)\n  }\n\n  return withTimeoutOption(resolveDNS)\n}\n"],"mappings":"AAAA,a,CAEA;;AACA,MAAMA,GAAG,GAAGC,OAAO,CAAC,uBAAD,CAAnB;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,yCAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AACA,SAASE,UAAT,CAAqBC,MAArB,EAA6B;EAC3B;EACA;EACA,IAAIA,MAAM,CAACC,QAAP,CAAgB,MAAhB,CAAJ,EAA6B;IAC3BD,MAAM,GAAGA,MAAM,CAACE,OAAP,CAAe,OAAf,EAAwB,WAAxB,CAAT;EACD;;EACD,OAAOF,MAAP;AACD;;AAEDG,MAAM,CAACC,OAAP,GAAiB,MAAM;EACrB;AACF;AACA;EACE,MAAMC,UAAU,GAAG,gBAAOL,MAAP,EAAiD;IAAA,IAAlCM,OAAkC,uEAAxB;MAAEC,SAAS,EAAE;IAAb,CAAwB;;IAAE;IACpE,IAAI,OAAOP,MAAP,KAAkB,QAAtB,EAAgC;MAC9B,MAAM,IAAIQ,KAAJ,CAAU,4CAAV,CAAN;IACD;;IAEDR,MAAM,GAAGD,UAAU,CAACC,MAAD,CAAnB;IAEA,OAAOJ,GAAG,CAACI,MAAD,EAASM,OAAT,CAAV;EACD,CARD;;EAUA,OAAOR,iBAAiB,CAACO,UAAD,CAAxB;AACD,CAfD"},"metadata":{},"sourceType":"script"}