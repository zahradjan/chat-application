{"ast":null,"code":"/* eslint-disable no-param-reassign */\nimport * as common from './common';\nimport * as constants from './v4/constants';\nimport { AddressError } from './address-error';\nimport { BigInteger } from 'jsbn';\nimport { sprintf } from 'sprintf-js';\n/**\n * Represents an IPv4 address\n * @class Address4\n * @param {string} address - An IPv4 address string\n */\n\nexport class Address4 {\n  constructor(address) {\n    this.groups = constants.GROUPS;\n    this.parsedAddress = [];\n    this.parsedSubnet = '';\n    this.subnet = '/32';\n    this.subnetMask = 32;\n    this.v4 = true;\n    /**\n     * Returns true if the address is correct, false otherwise\n     * @memberof Address4\n     * @instance\n     * @returns {Boolean}\n     */\n\n    this.isCorrect = common.isCorrect(constants.BITS);\n    /**\n     * Returns true if the given address is in the subnet of the current address\n     * @memberof Address4\n     * @instance\n     * @returns {boolean}\n     */\n\n    this.isInSubnet = common.isInSubnet;\n    this.address = address;\n    const subnet = constants.RE_SUBNET_STRING.exec(address);\n\n    if (subnet) {\n      this.parsedSubnet = subnet[0].replace('/', '');\n      this.subnetMask = parseInt(this.parsedSubnet, 10);\n      this.subnet = `/${this.subnetMask}`;\n\n      if (this.subnetMask < 0 || this.subnetMask > constants.BITS) {\n        throw new AddressError('Invalid subnet mask.');\n      }\n\n      address = address.replace(constants.RE_SUBNET_STRING, '');\n    }\n\n    this.addressMinusSuffix = address;\n    this.parsedAddress = this.parse(address);\n  }\n\n  static isValid(address) {\n    try {\n      // eslint-disable-next-line no-new\n      new Address4(address);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n  /*\n   * Parses a v4 address\n   */\n\n\n  parse(address) {\n    const groups = address.split('.');\n\n    if (!address.match(constants.RE_ADDRESS)) {\n      throw new AddressError('Invalid IPv4 address.');\n    }\n\n    return groups;\n  }\n  /**\n   * Returns the correct form of an address\n   * @memberof Address4\n   * @instance\n   * @returns {String}\n   */\n\n\n  correctForm() {\n    return this.parsedAddress.map(part => parseInt(part, 10)).join('.');\n  }\n  /**\n   * Converts a hex string to an IPv4 address object\n   * @memberof Address4\n   * @static\n   * @param {string} hex - a hex string to convert\n   * @returns {Address4}\n   */\n\n\n  static fromHex(hex) {\n    const padded = hex.replace(/:/g, '').padStart(8, '0');\n    const groups = [];\n    let i;\n\n    for (i = 0; i < 8; i += 2) {\n      const h = padded.slice(i, i + 2);\n      groups.push(parseInt(h, 16));\n    }\n\n    return new Address4(groups.join('.'));\n  }\n  /**\n   * Converts an integer into a IPv4 address object\n   * @memberof Address4\n   * @static\n   * @param {integer} integer - a number to convert\n   * @returns {Address4}\n   */\n\n\n  static fromInteger(integer) {\n    return Address4.fromHex(integer.toString(16));\n  }\n  /**\n   * Return an address from in-addr.arpa form\n   * @memberof Address4\n   * @static\n   * @param {string} arpaFormAddress - an 'in-addr.arpa' form ipv4 address\n   * @returns {Adress4}\n   * @example\n   * var address = Address4.fromArpa(42.2.0.192.in-addr.arpa.)\n   * address.correctForm(); // '192.0.2.42'\n   */\n\n\n  static fromArpa(arpaFormAddress) {\n    // remove ending \".in-addr.arpa.\" or just \".\"\n    const leader = arpaFormAddress.replace(/(\\.in-addr\\.arpa)?\\.$/, '');\n    const address = leader.split('.').reverse().join('.');\n    return new Address4(address);\n  }\n  /**\n   * Converts an IPv4 address object to a hex string\n   * @memberof Address4\n   * @instance\n   * @returns {String}\n   */\n\n\n  toHex() {\n    return this.parsedAddress.map(part => sprintf('%02x', parseInt(part, 10))).join(':');\n  }\n  /**\n   * Converts an IPv4 address object to an array of bytes\n   * @memberof Address4\n   * @instance\n   * @returns {Array}\n   */\n\n\n  toArray() {\n    return this.parsedAddress.map(part => parseInt(part, 10));\n  }\n  /**\n   * Converts an IPv4 address object to an IPv6 address group\n   * @memberof Address4\n   * @instance\n   * @returns {String}\n   */\n\n\n  toGroup6() {\n    const output = [];\n    let i;\n\n    for (i = 0; i < constants.GROUPS; i += 2) {\n      const hex = sprintf('%02x%02x', parseInt(this.parsedAddress[i], 10), parseInt(this.parsedAddress[i + 1], 10));\n      output.push(sprintf('%x', parseInt(hex, 16)));\n    }\n\n    return output.join(':');\n  }\n  /**\n   * Returns the address as a BigInteger\n   * @memberof Address4\n   * @instance\n   * @returns {BigInteger}\n   */\n\n\n  bigInteger() {\n    return new BigInteger(this.parsedAddress.map(n => sprintf('%02x', parseInt(n, 10))).join(''), 16);\n  }\n  /**\n   * Helper function getting start address.\n   * @memberof Address4\n   * @instance\n   * @returns {BigInteger}\n   */\n\n\n  _startAddress() {\n    return new BigInteger(this.mask() + '0'.repeat(constants.BITS - this.subnetMask), 2);\n  }\n  /**\n   * The first address in the range given by this address' subnet.\n   * Often referred to as the Network Address.\n   * @memberof Address4\n   * @instance\n   * @returns {Address4}\n   */\n\n\n  startAddress() {\n    return Address4.fromBigInteger(this._startAddress());\n  }\n  /**\n   * The first host address in the range given by this address's subnet ie\n   * the first address after the Network Address\n   * @memberof Address4\n   * @instance\n   * @returns {Address4}\n   */\n\n\n  startAddressExclusive() {\n    const adjust = new BigInteger('1');\n    return Address4.fromBigInteger(this._startAddress().add(adjust));\n  }\n  /**\n   * Helper function getting end address.\n   * @memberof Address4\n   * @instance\n   * @returns {BigInteger}\n   */\n\n\n  _endAddress() {\n    return new BigInteger(this.mask() + '1'.repeat(constants.BITS - this.subnetMask), 2);\n  }\n  /**\n   * The last address in the range given by this address' subnet\n   * Often referred to as the Broadcast\n   * @memberof Address4\n   * @instance\n   * @returns {Address4}\n   */\n\n\n  endAddress() {\n    return Address4.fromBigInteger(this._endAddress());\n  }\n  /**\n   * The last host address in the range given by this address's subnet ie\n   * the last address prior to the Broadcast Address\n   * @memberof Address4\n   * @instance\n   * @returns {Address4}\n   */\n\n\n  endAddressExclusive() {\n    const adjust = new BigInteger('1');\n    return Address4.fromBigInteger(this._endAddress().subtract(adjust));\n  }\n  /**\n   * Converts a BigInteger to a v4 address object\n   * @memberof Address4\n   * @static\n   * @param {BigInteger} bigInteger - a BigInteger to convert\n   * @returns {Address4}\n   */\n\n\n  static fromBigInteger(bigInteger) {\n    return Address4.fromInteger(parseInt(bigInteger.toString(), 10));\n  }\n  /**\n   * Returns the first n bits of the address, defaulting to the\n   * subnet mask\n   * @memberof Address4\n   * @instance\n   * @returns {String}\n   */\n\n\n  mask(mask) {\n    if (mask === undefined) {\n      mask = this.subnetMask;\n    }\n\n    return this.getBitsBase2(0, mask);\n  }\n  /**\n   * Returns the bits in the given range as a base-2 string\n   * @memberof Address4\n   * @instance\n   * @returns {string}\n   */\n\n\n  getBitsBase2(start, end) {\n    return this.binaryZeroPad().slice(start, end);\n  }\n  /**\n   * Return the reversed ip6.arpa form of the address\n   * @memberof Address4\n   * @param {Object} options\n   * @param {boolean} options.omitSuffix - omit the \"in-addr.arpa\" suffix\n   * @instance\n   * @returns {String}\n   */\n\n\n  reverseForm(options) {\n    if (!options) {\n      options = {};\n    }\n\n    const reversed = this.correctForm().split('.').reverse().join('.');\n\n    if (options.omitSuffix) {\n      return reversed;\n    }\n\n    return sprintf('%s.in-addr.arpa.', reversed);\n  }\n  /**\n   * Returns true if the given address is a multicast address\n   * @memberof Address4\n   * @instance\n   * @returns {boolean}\n   */\n\n\n  isMulticast() {\n    return this.isInSubnet(new Address4('224.0.0.0/4'));\n  }\n  /**\n   * Returns a zero-padded base-2 string representation of the address\n   * @memberof Address4\n   * @instance\n   * @returns {string}\n   */\n\n\n  binaryZeroPad() {\n    return this.bigInteger().toString(2).padStart(constants.BITS, '0');\n  }\n  /**\n   * Groups an IPv4 address for inclusion at the end of an IPv6 address\n   * @returns {String}\n   */\n\n\n  groupForV6() {\n    const segments = this.parsedAddress;\n    return this.address.replace(constants.RE_ADDRESS, sprintf('<span class=\"hover-group group-v4 group-6\">%s</span>.<span class=\"hover-group group-v4 group-7\">%s</span>', segments.slice(0, 2).join('.'), segments.slice(2, 4).join('.')));\n  }\n\n}","map":{"version":3,"mappings":"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","names":["common","constants","AddressError","BigInteger","sprintf","Address4","constructor","address","GROUPS","isCorrect","BITS","isInSubnet","subnet","RE_SUBNET_STRING","exec","parsedSubnet","replace","subnetMask","parseInt","addressMinusSuffix","parsedAddress","parse","isValid","e","groups","split","match","RE_ADDRESS","correctForm","map","part","join","fromHex","hex","padded","padStart","i","h","slice","push","fromInteger","integer","toString","fromArpa","arpaFormAddress","leader","reverse","toHex","toArray","toGroup6","output","bigInteger","n","_startAddress","mask","repeat","startAddress","fromBigInteger","startAddressExclusive","adjust","add","_endAddress","endAddress","endAddressExclusive","subtract","undefined","getBitsBase2","start","end","binaryZeroPad","reverseForm","options","reversed","omitSuffix","isMulticast","groupForV6","segments"],"sourceRoot":"","sources":["../../../lib/ipv4.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}