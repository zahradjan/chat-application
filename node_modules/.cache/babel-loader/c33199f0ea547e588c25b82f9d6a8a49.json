{"ast":null,"code":"import OrbitDB from \"orbit-db\";\nimport IPFS from \"ipfs\";\nimport { makeAutoObservable } from \"mobx\";\nexport default class DataStore {\n  constructor(rootStore) {\n    this.rootStore = rootStore;\n    this.peers = [];\n    makeAutoObservable(this);\n  }\n\n  async init() {\n    if (!this.rootStore.sessionStore.isAuthenticated()) throw Error(\"User is not defined\");\n    if (this.ipfsNode !== undefined) return;\n    if (this.orbitDb !== undefined) return;\n    const dbConfig = {\n      // If database doesn't exist, create it\n      create: true,\n      // Don't wait to load from the network\n      sync: true,\n      // directory: `/orbitdb/decentio-orbitdb-chat-${Math.random()}}`,\n      // Load only the local version of the database\n      localOnly: false,\n      // Allow anyone to write to the database,\n      // otherwise only the creator of the database can write\n      accessController: {\n        write: [\"*\"]\n      }\n    };\n    const ipfsConfig = {\n      // preload: { enabled: false },\n      relay: {\n        enabled: true,\n        hop: {\n          enabled: true,\n          active: true\n        }\n      },\n      repo: `/orbitdb/decentio-orbitdb-chat-ipfs-${this.rootStore.sessionStore._user}}`,\n      EXPERIMENTAL: {\n        pubsub: true\n      },\n      config: {\n        Addresses: {\n          Swarm: [\"/dns4/wrtc-star2.sjc.dwebops.pub/tcp/443/wss/p2p-webrtc-star/\", \"/dns4/webrtc-star.discovery.libp2p.io/tcp/443/wss/p2p-webrtc-star/\", \"/dns4/wrtc-star1.par.dwebops.pub/tcp/443/wss/p2p-webrtc-star\", \"/dns4/wrtc-star2.sjc.dwebops.pub/tcp/443/wss/p2p-webrtc-star\"]\n        },\n        Bootstrap: []\n      }\n    };\n    await this.start(ipfsConfig, dbConfig);\n  }\n\n  async start(ipfsConf, orbitDbconf) {\n    console.log(this.ipfsNode);\n    console.log(this.orbitDb);\n    await this.startIpfsNode(ipfsConf);\n    await this.startOrbitDb(orbitDbconf);\n    console.log(this.ipfsNode);\n    console.log(this.orbitDb);\n    this.peerId = await this.getPeerId();\n    console.log(this.orbitDb.identity.id);\n    setInterval(async () => {\n      const peers = await this.getIpfsPeers();\n      console.log(peers);\n      await peers.map(async peerId => {\n        try {\n          await this.connectToPeer(peerId.peer);\n        } catch {}\n      }); // const topics = await this.ipfsNode.pubsub.ls();\n      // console.log(topics);\n    }, 10000);\n    this.ipfsNode.libp2p.connectionManager.on(\"peer:connect\", this.onPeerConnect.bind(this));\n  }\n\n  async onPeerConnect(connection) {\n    console.log(\"Peer connected:\" + connection.remotePeer._idB58String);\n  }\n\n  async getPeerId() {\n    if (this.ipfsNode === undefined) throw Error(\"IPFS Node not defined\");\n    const peerInfo = await this.ipfsNode.id();\n    return peerInfo.id;\n  }\n\n  async connectToPeer(multiaddr) {\n    let protocol = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"/dnsaddr/bootstrap.libp2p.io/p2p/\";\n\n    try {\n      await this.ipfsNode.swarm.connect(protocol + multiaddr);\n    } catch (err) {\n      console.log(err);\n      await this.ipfsNode.swarm.connect(protocol + multiaddr);\n    }\n  }\n\n  async startIpfsNode(ipfsConf) {\n    this.ipfsNode = await IPFS.create(ipfsConf);\n  }\n\n  async startOrbitDb(orbitDbconf) {\n    this.orbitDb = await OrbitDB.createInstance(this.ipfsNode, orbitDbconf);\n  }\n\n  async getIpfsPeers() {\n    const peers = await this.ipfsNode.swarm.peers(); // console.log(peers);\n\n    return peers;\n  }\n\n  async handleStop() {\n    await this.orbitDb.disconnect();\n    await this.ipfsNode.stop();\n    delete this.orbitDb;\n    delete this.ipfsNode;\n  }\n\n}","map":{"version":3,"names":["OrbitDB","IPFS","makeAutoObservable","DataStore","constructor","rootStore","peers","init","sessionStore","isAuthenticated","Error","ipfsNode","undefined","orbitDb","dbConfig","create","sync","localOnly","accessController","write","ipfsConfig","relay","enabled","hop","active","repo","_user","EXPERIMENTAL","pubsub","config","Addresses","Swarm","Bootstrap","start","ipfsConf","orbitDbconf","console","log","startIpfsNode","startOrbitDb","peerId","getPeerId","identity","id","setInterval","getIpfsPeers","map","connectToPeer","peer","libp2p","connectionManager","on","onPeerConnect","bind","connection","remotePeer","_idB58String","peerInfo","multiaddr","protocol","swarm","connect","err","createInstance","handleStop","disconnect","stop"],"sources":["C:/Users/zajan/GitHub/chatApplication/src/data/store/DataStore.js"],"sourcesContent":["import OrbitDB from \"orbit-db\";\r\nimport IPFS from \"ipfs\";\r\nimport { makeAutoObservable } from \"mobx\";\r\nexport default class DataStore {\r\n  ipfsNode;\r\n  orbitDb;\r\n  peerId;\r\n  constructor(rootStore) {\r\n    this.rootStore = rootStore;\r\n    this.peers = [];\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  async init() {\r\n    if (!this.rootStore.sessionStore.isAuthenticated()) throw Error(\"User is not defined\");\r\n    if (this.ipfsNode !== undefined) return;\r\n    if (this.orbitDb !== undefined) return;\r\n\r\n    const dbConfig = {\r\n      // If database doesn't exist, create it\r\n      create: true,\r\n      // Don't wait to load from the network\r\n      sync: true,\r\n      // directory: `/orbitdb/decentio-orbitdb-chat-${Math.random()}}`,\r\n      // Load only the local version of the database\r\n      localOnly: false,\r\n      // Allow anyone to write to the database,\r\n      // otherwise only the creator of the database can write\r\n      accessController: {\r\n        write: [\"*\"],\r\n      },\r\n    };\r\n    const ipfsConfig = {\r\n      // preload: { enabled: false },\r\n      relay: { enabled: true, hop: { enabled: true, active: true } },\r\n      repo: `/orbitdb/decentio-orbitdb-chat-ipfs-${this.rootStore.sessionStore._user}}`,\r\n      EXPERIMENTAL: {\r\n        pubsub: true,\r\n      },\r\n\r\n      config: {\r\n        Addresses: {\r\n          Swarm: [\r\n            \"/dns4/wrtc-star2.sjc.dwebops.pub/tcp/443/wss/p2p-webrtc-star/\",\r\n            \"/dns4/webrtc-star.discovery.libp2p.io/tcp/443/wss/p2p-webrtc-star/\",\r\n            \"/dns4/wrtc-star1.par.dwebops.pub/tcp/443/wss/p2p-webrtc-star\",\r\n            \"/dns4/wrtc-star2.sjc.dwebops.pub/tcp/443/wss/p2p-webrtc-star\",\r\n          ],\r\n        },\r\n        Bootstrap: [],\r\n      },\r\n    };\r\n\r\n    await this.start(ipfsConfig, dbConfig);\r\n  }\r\n\r\n  async start(ipfsConf, orbitDbconf) {\r\n    console.log(this.ipfsNode);\r\n    console.log(this.orbitDb);\r\n    await this.startIpfsNode(ipfsConf);\r\n    await this.startOrbitDb(orbitDbconf);\r\n    console.log(this.ipfsNode);\r\n    console.log(this.orbitDb);\r\n    this.peerId = await this.getPeerId();\r\n    console.log(this.orbitDb.identity.id);\r\n    setInterval(async () => {\r\n      const peers = await this.getIpfsPeers();\r\n      console.log(peers);\r\n      await peers.map(async (peerId) => {\r\n        try {\r\n          await this.connectToPeer(peerId.peer);\r\n        } catch {}\r\n      });\r\n      // const topics = await this.ipfsNode.pubsub.ls();\r\n      // console.log(topics);\r\n    }, 10000);\r\n    this.ipfsNode.libp2p.connectionManager.on(\"peer:connect\", this.onPeerConnect.bind(this));\r\n  }\r\n  async onPeerConnect(connection) {\r\n    console.log(\"Peer connected:\" + connection.remotePeer._idB58String);\r\n  }\r\n\r\n  async getPeerId() {\r\n    if (this.ipfsNode === undefined) throw Error(\"IPFS Node not defined\");\r\n    const peerInfo = await this.ipfsNode.id();\r\n    return peerInfo.id;\r\n  }\r\n\r\n  async connectToPeer(multiaddr, protocol = \"/dnsaddr/bootstrap.libp2p.io/p2p/\") {\r\n    try {\r\n      await this.ipfsNode.swarm.connect(protocol + multiaddr);\r\n    } catch (err) {\r\n      console.log(err);\r\n      await this.ipfsNode.swarm.connect(protocol + multiaddr);\r\n    }\r\n  }\r\n\r\n  async startIpfsNode(ipfsConf) {\r\n    this.ipfsNode = await IPFS.create(ipfsConf);\r\n  }\r\n  async startOrbitDb(orbitDbconf) {\r\n    this.orbitDb = await OrbitDB.createInstance(this.ipfsNode, orbitDbconf);\r\n  }\r\n  async getIpfsPeers() {\r\n    const peers = await this.ipfsNode.swarm.peers();\r\n    // console.log(peers);\r\n    return peers;\r\n  }\r\n\r\n  async handleStop() {\r\n    await this.orbitDb.disconnect();\r\n    await this.ipfsNode.stop();\r\n    delete this.orbitDb;\r\n    delete this.ipfsNode;\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}