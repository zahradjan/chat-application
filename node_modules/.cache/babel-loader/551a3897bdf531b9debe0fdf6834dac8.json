{"ast":null,"code":"'use strict';\n\nconst secp256k1 = require('secp256k1');\n\nconst multihashing = require('multihashing-async');\n\nconst setImmediate = require('async/setImmediate');\n\nconst HASH_ALGORITHM = 'sha2-256';\n\nmodule.exports = randomBytes => {\n  const privateKeyLength = 32;\n\n  function generateKey(callback) {\n    const done = (err, res) => setImmediate(() => callback(err, res));\n\n    let privateKey;\n\n    do {\n      privateKey = randomBytes(32);\n    } while (!secp256k1.privateKeyVerify(privateKey));\n\n    done(null, privateKey);\n  }\n\n  function hashAndSign(key, msg, callback) {\n    const done = (err, res) => setImmediate(() => callback(err, res));\n\n    multihashing.digest(msg, HASH_ALGORITHM, (err, digest) => {\n      if (err) {\n        return done(err);\n      }\n\n      try {\n        const sig = secp256k1.sign(digest, key);\n        const sigDER = secp256k1.signatureExport(sig.signature);\n        return done(null, sigDER);\n      } catch (err) {\n        done(err);\n      }\n    });\n  }\n\n  function hashAndVerify(key, sig, msg, callback) {\n    const done = (err, res) => setImmediate(() => callback(err, res));\n\n    multihashing.digest(msg, HASH_ALGORITHM, (err, digest) => {\n      if (err) {\n        return done(err);\n      }\n\n      try {\n        sig = secp256k1.signatureImport(sig);\n        const valid = secp256k1.verify(digest, sig, key);\n        return done(null, valid);\n      } catch (err) {\n        done(err);\n      }\n    });\n  }\n\n  function compressPublicKey(key) {\n    if (!secp256k1.publicKeyVerify(key)) {\n      throw new Error('Invalid public key');\n    }\n\n    return secp256k1.publicKeyConvert(key, true);\n  }\n\n  function decompressPublicKey(key) {\n    return secp256k1.publicKeyConvert(key, false);\n  }\n\n  function validatePrivateKey(key) {\n    if (!secp256k1.privateKeyVerify(key)) {\n      throw new Error('Invalid private key');\n    }\n  }\n\n  function validatePublicKey(key) {\n    if (!secp256k1.publicKeyVerify(key)) {\n      throw new Error('Invalid public key');\n    }\n  }\n\n  function computePublicKey(privateKey) {\n    validatePrivateKey(privateKey);\n    return secp256k1.publicKeyCreate(privateKey);\n  }\n\n  return {\n    generateKey: generateKey,\n    privateKeyLength: privateKeyLength,\n    hashAndSign: hashAndSign,\n    hashAndVerify: hashAndVerify,\n    compressPublicKey: compressPublicKey,\n    decompressPublicKey: decompressPublicKey,\n    validatePrivateKey: validatePrivateKey,\n    validatePublicKey: validatePublicKey,\n    computePublicKey: computePublicKey\n  };\n};","map":{"version":3,"names":["secp256k1","require","multihashing","setImmediate","HASH_ALGORITHM","module","exports","randomBytes","privateKeyLength","generateKey","callback","done","err","res","privateKey","privateKeyVerify","hashAndSign","key","msg","digest","sig","sign","sigDER","signatureExport","signature","hashAndVerify","signatureImport","valid","verify","compressPublicKey","publicKeyVerify","Error","publicKeyConvert","decompressPublicKey","validatePrivateKey","validatePublicKey","computePublicKey","publicKeyCreate"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-crypto-secp256k1/src/crypto.js"],"sourcesContent":["'use strict'\n\nconst secp256k1 = require('secp256k1')\nconst multihashing = require('multihashing-async')\nconst setImmediate = require('async/setImmediate')\n\nconst HASH_ALGORITHM = 'sha2-256'\n\nmodule.exports = (randomBytes) => {\n  const privateKeyLength = 32\n\n  function generateKey (callback) {\n    const done = (err, res) => setImmediate(() => callback(err, res))\n\n    let privateKey\n    do {\n      privateKey = randomBytes(32)\n    } while (!secp256k1.privateKeyVerify(privateKey))\n\n    done(null, privateKey)\n  }\n\n  function hashAndSign (key, msg, callback) {\n    const done = (err, res) => setImmediate(() => callback(err, res))\n\n    multihashing.digest(msg, HASH_ALGORITHM, (err, digest) => {\n      if (err) { return done(err) }\n\n      try {\n        const sig = secp256k1.sign(digest, key)\n        const sigDER = secp256k1.signatureExport(sig.signature)\n        return done(null, sigDER)\n      } catch (err) { done(err) }\n    })\n  }\n\n  function hashAndVerify (key, sig, msg, callback) {\n    const done = (err, res) => setImmediate(() => callback(err, res))\n\n    multihashing.digest(msg, HASH_ALGORITHM, (err, digest) => {\n      if (err) { return done(err) }\n      try {\n        sig = secp256k1.signatureImport(sig)\n        const valid = secp256k1.verify(digest, sig, key)\n        return done(null, valid)\n      } catch (err) { done(err) }\n    })\n  }\n\n  function compressPublicKey (key) {\n    if (!secp256k1.publicKeyVerify(key)) {\n      throw new Error('Invalid public key')\n    }\n    return secp256k1.publicKeyConvert(key, true)\n  }\n\n  function decompressPublicKey (key) {\n    return secp256k1.publicKeyConvert(key, false)\n  }\n\n  function validatePrivateKey (key) {\n    if (!secp256k1.privateKeyVerify(key)) {\n      throw new Error('Invalid private key')\n    }\n  }\n\n  function validatePublicKey (key) {\n    if (!secp256k1.publicKeyVerify(key)) {\n      throw new Error('Invalid public key')\n    }\n  }\n\n  function computePublicKey (privateKey) {\n    validatePrivateKey(privateKey)\n    return secp256k1.publicKeyCreate(privateKey)\n  }\n\n  return {\n    generateKey: generateKey,\n    privateKeyLength: privateKeyLength,\n    hashAndSign: hashAndSign,\n    hashAndVerify: hashAndVerify,\n    compressPublicKey: compressPublicKey,\n    decompressPublicKey: decompressPublicKey,\n    validatePrivateKey: validatePrivateKey,\n    validatePublicKey: validatePublicKey,\n    computePublicKey: computePublicKey\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}