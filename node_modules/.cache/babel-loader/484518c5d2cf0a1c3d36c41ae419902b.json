{"ast":null,"code":"'use strict';\n\nconst PeerId = require('peer-id');\n/** @type {{success:true, time:0, text: ''}} */\n\n\nconst basePacket = {\n  success: true,\n  time: 0,\n  text: ''\n};\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('../types').NetworkService} config.network\n */\n\n\nmodule.exports = _ref => {\n  let {\n    network\n  } = _ref;\n\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"ping\"]}\n   */\n  async function* ping(peerId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      libp2p\n    } = await network.use();\n    options.count = options.count || 10;\n    const peer = PeerId.createFromB58String(peerId);\n    const storedPeer = libp2p.peerStore.get(peer);\n    let id = storedPeer && storedPeer.id;\n\n    if (!id) {\n      yield { ...basePacket,\n        text: `Looking up peer ${peerId}`\n      };\n      const remotePeer = await libp2p.peerRouting.findPeer(peer);\n      id = remotePeer && remotePeer.id;\n    }\n\n    if (!id) {\n      throw new Error('Peer was not found');\n    }\n\n    yield { ...basePacket,\n      text: `PING ${id.toB58String()}`\n    };\n    let packetCount = 0;\n    let totalTime = 0;\n\n    for (let i = 0; i < options.count; i++) {\n      try {\n        const time = await libp2p.ping(id);\n        totalTime += time;\n        packetCount++;\n        yield { ...basePacket,\n          time\n        };\n      } catch (err) {\n        yield { ...basePacket,\n          success: false,\n          text: err.toString()\n        };\n      }\n    }\n\n    if (packetCount) {\n      const average = totalTime / packetCount;\n      yield { ...basePacket,\n        text: `Average latency: ${average}ms`\n      };\n    }\n  }\n\n  return withTimeoutOption(ping);\n};\n/**\n * @typedef {Pong|PingFailure|StatusUpdate} Packet\n * Note that not all ping response objects are \"pongs\".\n * A \"pong\" message can be identified by a truthy success property and an empty\n * text property. Other ping responses are failures or status updates.\n *\n * @typedef {Object} Pong\n * @property {true} success\n * @property {number} time\n * @property {''} text\n *\n * @typedef {Object} PingFailure\n * @property {false} success\n * @property {number} time\n * @property {string} text\n *\n * @typedef {Object} StatusUpdate\n * @property {true} success\n * @property {0} time\n * @property {string} text\n *\n * @typedef {PingSettings & AbortOptions} PingOptions\n *\n * @typedef {Object} PingSettings\n * @property {number} [count=10] - The number of ping messages to send\n *\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */","map":{"version":3,"names":["PeerId","require","basePacket","success","time","text","withTimeoutOption","module","exports","network","ping","peerId","options","libp2p","use","count","peer","createFromB58String","storedPeer","peerStore","get","id","remotePeer","peerRouting","findPeer","Error","toB58String","packetCount","totalTime","i","err","toString","average"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/ping.js"],"sourcesContent":["'use strict'\n\nconst PeerId = require('peer-id')\n/** @type {{success:true, time:0, text: ''}} */\nconst basePacket = { success: true, time: 0, text: '' }\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @param {Object} config\n * @param {import('../types').NetworkService} config.network\n */\nmodule.exports = ({ network }) => {\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"ping\"]}\n   */\n  async function * ping (peerId, options = {}) {\n    const { libp2p } = await network.use()\n    options.count = options.count || 10\n\n    const peer = PeerId.createFromB58String(peerId)\n\n    const storedPeer = libp2p.peerStore.get(peer)\n    let id = storedPeer && storedPeer.id\n\n    if (!id) {\n      yield { ...basePacket, text: `Looking up peer ${peerId}` }\n      const remotePeer = await libp2p.peerRouting.findPeer(peer)\n\n      id = remotePeer && remotePeer.id\n    }\n\n    if (!id) {\n      throw new Error('Peer was not found')\n    }\n\n    yield { ...basePacket, text: `PING ${id.toB58String()}` }\n\n    let packetCount = 0\n    let totalTime = 0\n\n    for (let i = 0; i < options.count; i++) {\n      try {\n        const time = await libp2p.ping(id)\n        totalTime += time\n        packetCount++\n        yield { ...basePacket, time }\n      } catch (err) {\n        yield { ...basePacket, success: false, text: err.toString() }\n      }\n    }\n\n    if (packetCount) {\n      const average = totalTime / packetCount\n      yield { ...basePacket, text: `Average latency: ${average}ms` }\n    }\n  }\n\n  return withTimeoutOption(ping)\n}\n\n/**\n * @typedef {Pong|PingFailure|StatusUpdate} Packet\n * Note that not all ping response objects are \"pongs\".\n * A \"pong\" message can be identified by a truthy success property and an empty\n * text property. Other ping responses are failures or status updates.\n *\n * @typedef {Object} Pong\n * @property {true} success\n * @property {number} time\n * @property {''} text\n *\n * @typedef {Object} PingFailure\n * @property {false} success\n * @property {number} time\n * @property {string} text\n *\n * @typedef {Object} StatusUpdate\n * @property {true} success\n * @property {0} time\n * @property {string} text\n *\n * @typedef {PingSettings & AbortOptions} PingOptions\n *\n * @typedef {Object} PingSettings\n * @property {number} [count=10] - The number of ping messages to send\n *\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAtB;AACA;;;AACA,MAAMC,UAAU,GAAG;EAAEC,OAAO,EAAE,IAAX;EAAiBC,IAAI,EAAE,CAAvB;EAA0BC,IAAI,EAAE;AAAhC,CAAnB;;AACA,MAAMC,iBAAiB,GAAGL,OAAO,CAAC,yCAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AACAM,MAAM,CAACC,OAAP,GAAiB,QAAiB;EAAA,IAAhB;IAAEC;EAAF,CAAgB;;EAChC;AACF;AACA;EACE,gBAAiBC,IAAjB,CAAuBC,MAAvB,EAA6C;IAAA,IAAdC,OAAc,uEAAJ,EAAI;IAC3C,MAAM;MAAEC;IAAF,IAAa,MAAMJ,OAAO,CAACK,GAAR,EAAzB;IACAF,OAAO,CAACG,KAAR,GAAgBH,OAAO,CAACG,KAAR,IAAiB,EAAjC;IAEA,MAAMC,IAAI,GAAGhB,MAAM,CAACiB,mBAAP,CAA2BN,MAA3B,CAAb;IAEA,MAAMO,UAAU,GAAGL,MAAM,CAACM,SAAP,CAAiBC,GAAjB,CAAqBJ,IAArB,CAAnB;IACA,IAAIK,EAAE,GAAGH,UAAU,IAAIA,UAAU,CAACG,EAAlC;;IAEA,IAAI,CAACA,EAAL,EAAS;MACP,MAAM,EAAE,GAAGnB,UAAL;QAAiBG,IAAI,EAAG,mBAAkBM,MAAO;MAAjD,CAAN;MACA,MAAMW,UAAU,GAAG,MAAMT,MAAM,CAACU,WAAP,CAAmBC,QAAnB,CAA4BR,IAA5B,CAAzB;MAEAK,EAAE,GAAGC,UAAU,IAAIA,UAAU,CAACD,EAA9B;IACD;;IAED,IAAI,CAACA,EAAL,EAAS;MACP,MAAM,IAAII,KAAJ,CAAU,oBAAV,CAAN;IACD;;IAED,MAAM,EAAE,GAAGvB,UAAL;MAAiBG,IAAI,EAAG,QAAOgB,EAAE,CAACK,WAAH,EAAiB;IAAhD,CAAN;IAEA,IAAIC,WAAW,GAAG,CAAlB;IACA,IAAIC,SAAS,GAAG,CAAhB;;IAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjB,OAAO,CAACG,KAA5B,EAAmCc,CAAC,EAApC,EAAwC;MACtC,IAAI;QACF,MAAMzB,IAAI,GAAG,MAAMS,MAAM,CAACH,IAAP,CAAYW,EAAZ,CAAnB;QACAO,SAAS,IAAIxB,IAAb;QACAuB,WAAW;QACX,MAAM,EAAE,GAAGzB,UAAL;UAAiBE;QAAjB,CAAN;MACD,CALD,CAKE,OAAO0B,GAAP,EAAY;QACZ,MAAM,EAAE,GAAG5B,UAAL;UAAiBC,OAAO,EAAE,KAA1B;UAAiCE,IAAI,EAAEyB,GAAG,CAACC,QAAJ;QAAvC,CAAN;MACD;IACF;;IAED,IAAIJ,WAAJ,EAAiB;MACf,MAAMK,OAAO,GAAGJ,SAAS,GAAGD,WAA5B;MACA,MAAM,EAAE,GAAGzB,UAAL;QAAiBG,IAAI,EAAG,oBAAmB2B,OAAQ;MAAnD,CAAN;IACD;EACF;;EAED,OAAO1B,iBAAiB,CAACI,IAAD,CAAxB;AACD,CA/CD;AAiDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"script"}