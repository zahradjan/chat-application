{"ast":null,"code":"'use strict'; // JS treats subjects of bitwise operators as SIGNED 32 bit numbers,\n// which means the maximum amount of bits we can store inside each byte\n// is 7..\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar BITS_PER_BYTE = 7;\n\nmodule.exports = /*#__PURE__*/function () {\n  function SparseArray() {\n    _classCallCheck(this, SparseArray);\n\n    this._bitArrays = [];\n    this._data = [];\n    this._length = 0;\n    this._changedLength = false;\n    this._changedData = false;\n  }\n\n  _createClass(SparseArray, [{\n    key: \"set\",\n    value: function set(index, value) {\n      var pos = this._internalPositionFor(index, false);\n\n      if (value === undefined) {\n        // unsetting\n        if (pos !== -1) {\n          // remove item from bit array and array itself\n          this._unsetInternalPos(pos);\n\n          this._unsetBit(index);\n\n          this._changedLength = true;\n          this._changedData = true;\n        }\n      } else {\n        var needsSort = false;\n\n        if (pos === -1) {\n          pos = this._data.length;\n\n          this._setBit(index);\n\n          this._changedData = true;\n        } else {\n          needsSort = true;\n        }\n\n        this._setInternalPos(pos, index, value, needsSort);\n\n        this._changedLength = true;\n      }\n    }\n  }, {\n    key: \"unset\",\n    value: function unset(index) {\n      this.set(index, undefined);\n    }\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      this._sortData();\n\n      var pos = this._internalPositionFor(index, true);\n\n      if (pos === -1) {\n        return undefined;\n      }\n\n      return this._data[pos][1];\n    }\n  }, {\n    key: \"push\",\n    value: function push(value) {\n      this.set(this.length, value);\n      return this.length;\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      this._sortData();\n\n      if (this._changedLength) {\n        var last = this._data[this._data.length - 1];\n        this._length = last ? last[0] + 1 : 0;\n        this._changedLength = false;\n      }\n\n      return this._length;\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(iterator) {\n      var i = 0;\n\n      while (i < this.length) {\n        iterator(this.get(i), i, this);\n        i++;\n      }\n    }\n  }, {\n    key: \"map\",\n    value: function map(iterator) {\n      var i = 0;\n      var mapped = new Array(this.length);\n\n      while (i < this.length) {\n        mapped[i] = iterator(this.get(i), i, this);\n        i++;\n      }\n\n      return mapped;\n    }\n  }, {\n    key: \"reduce\",\n    value: function reduce(reducer, initialValue) {\n      var i = 0;\n      var acc = initialValue;\n\n      while (i < this.length) {\n        var value = this.get(i);\n        acc = reducer(acc, value, i);\n        i++;\n      }\n\n      return acc;\n    }\n  }, {\n    key: \"find\",\n    value: function find(finder) {\n      var i = 0,\n          found,\n          last;\n\n      while (i < this.length && !found) {\n        last = this.get(i);\n        found = finder(last);\n        i++;\n      }\n\n      return found ? last : undefined;\n    }\n  }, {\n    key: \"_internalPositionFor\",\n    value: function _internalPositionFor(index, noCreate) {\n      var bytePos = this._bytePosFor(index, noCreate);\n\n      if (bytePos >= this._bitArrays.length) {\n        return -1;\n      }\n\n      var byte = this._bitArrays[bytePos];\n      var bitPos = index - bytePos * BITS_PER_BYTE;\n      var exists = (byte & 1 << bitPos) > 0;\n\n      if (!exists) {\n        return -1;\n      }\n\n      var previousPopCount = this._bitArrays.slice(0, bytePos).reduce(popCountReduce, 0);\n\n      var mask = ~(0xffffffff << bitPos + 1);\n      var bytePopCount = popCount(byte & mask);\n      var arrayPos = previousPopCount + bytePopCount - 1;\n      return arrayPos;\n    }\n  }, {\n    key: \"_bytePosFor\",\n    value: function _bytePosFor(index, noCreate) {\n      var bytePos = Math.floor(index / BITS_PER_BYTE);\n      var targetLength = bytePos + 1;\n\n      while (!noCreate && this._bitArrays.length < targetLength) {\n        this._bitArrays.push(0);\n      }\n\n      return bytePos;\n    }\n  }, {\n    key: \"_setBit\",\n    value: function _setBit(index) {\n      var bytePos = this._bytePosFor(index, false);\n\n      this._bitArrays[bytePos] |= 1 << index - bytePos * BITS_PER_BYTE;\n    }\n  }, {\n    key: \"_unsetBit\",\n    value: function _unsetBit(index) {\n      var bytePos = this._bytePosFor(index, false);\n\n      this._bitArrays[bytePos] &= ~(1 << index - bytePos * BITS_PER_BYTE);\n    }\n  }, {\n    key: \"_setInternalPos\",\n    value: function _setInternalPos(pos, index, value, needsSort) {\n      var data = this._data;\n      var elem = [index, value];\n\n      if (needsSort) {\n        this._sortData();\n\n        data[pos] = elem;\n      } else {\n        // new element. just shove it into the array\n        // but be nice about where we shove it\n        // in order to make sorting it later easier\n        if (data.length) {\n          if (data[data.length - 1][0] >= index) {\n            data.push(elem);\n          } else if (data[0][0] <= index) {\n            data.unshift(elem);\n          } else {\n            var randomIndex = Math.round(data.length / 2);\n            this._data = data.slice(0, randomIndex).concat(elem).concat(data.slice(randomIndex));\n          }\n        } else {\n          this._data.push(elem);\n        }\n\n        this._changedData = true;\n        this._changedLength = true;\n      }\n    }\n  }, {\n    key: \"_unsetInternalPos\",\n    value: function _unsetInternalPos(pos) {\n      this._data.splice(pos, 1);\n    }\n  }, {\n    key: \"_sortData\",\n    value: function _sortData() {\n      if (this._changedData) {\n        this._data.sort(sortInternal);\n      }\n\n      this._changedData = false;\n    }\n  }, {\n    key: \"bitField\",\n    value: function bitField() {\n      var bytes = [];\n      var pendingBitsForResultingByte = 8;\n      var pendingBitsForNewByte = 0;\n      var resultingByte = 0;\n      var newByte;\n\n      var pending = this._bitArrays.slice();\n\n      while (pending.length || pendingBitsForNewByte) {\n        if (pendingBitsForNewByte === 0) {\n          newByte = pending.shift();\n          pendingBitsForNewByte = 7;\n        }\n\n        var usingBits = Math.min(pendingBitsForNewByte, pendingBitsForResultingByte);\n        var mask = ~(255 << usingBits);\n        var masked = newByte & mask;\n        resultingByte |= masked << 8 - pendingBitsForResultingByte;\n        newByte = newByte >>> usingBits;\n        pendingBitsForNewByte -= usingBits;\n        pendingBitsForResultingByte -= usingBits;\n\n        if (!pendingBitsForResultingByte || !pendingBitsForNewByte && !pending.length) {\n          bytes.push(resultingByte);\n          resultingByte = 0;\n          pendingBitsForResultingByte = 8;\n        }\n      } // remove trailing zeroes\n\n\n      for (var i = bytes.length - 1; i > 0; i--) {\n        var value = bytes[i];\n\n        if (value === 0) {\n          bytes.pop();\n        } else {\n          break;\n        }\n      }\n\n      return bytes;\n    }\n  }, {\n    key: \"compactArray\",\n    value: function compactArray() {\n      this._sortData();\n\n      return this._data.map(valueOnly);\n    }\n  }]);\n\n  return SparseArray;\n}();\n\nfunction popCountReduce(count, byte) {\n  return count + popCount(byte);\n}\n\nfunction popCount(_v) {\n  var v = _v;\n  v = v - (v >> 1 & 0x55555555); // reuse input as temporary\n\n  v = (v & 0x33333333) + (v >> 2 & 0x33333333); // temp\n\n  return (v + (v >> 4) & 0xF0F0F0F) * 0x1010101 >> 24;\n}\n\nfunction sortInternal(a, b) {\n  return a[0] - b[0];\n}\n\nfunction valueOnly(elem) {\n  return elem[1];\n}","map":{"version":3,"names":["BITS_PER_BYTE","module","exports","_bitArrays","_data","_length","_changedLength","_changedData","index","value","pos","_internalPositionFor","undefined","_unsetInternalPos","_unsetBit","needsSort","length","_setBit","_setInternalPos","set","_sortData","last","iterator","i","get","mapped","Array","reducer","initialValue","acc","finder","found","noCreate","bytePos","_bytePosFor","byte","bitPos","exists","previousPopCount","slice","reduce","popCountReduce","mask","bytePopCount","popCount","arrayPos","Math","floor","targetLength","push","data","elem","unshift","randomIndex","round","concat","splice","sort","sortInternal","bytes","pendingBitsForResultingByte","pendingBitsForNewByte","resultingByte","newByte","pending","shift","usingBits","min","masked","pop","map","valueOnly","count","_v","v","a","b"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/sparse-array/index.js"],"sourcesContent":["'use strict'\n\n// JS treats subjects of bitwise operators as SIGNED 32 bit numbers,\n// which means the maximum amount of bits we can store inside each byte\n// is 7..\nconst BITS_PER_BYTE = 7\n\nmodule.exports = class SparseArray {\n  constructor () {\n    this._bitArrays = []\n    this._data = []\n    this._length = 0\n    this._changedLength = false\n    this._changedData = false\n  }\n\n  set (index, value) {\n    let pos = this._internalPositionFor(index, false)\n    if (value === undefined) {\n      // unsetting\n      if (pos !== -1) {\n        // remove item from bit array and array itself\n        this._unsetInternalPos(pos)\n        this._unsetBit(index)\n        this._changedLength = true\n        this._changedData = true\n      }\n    } else {\n      let needsSort = false\n      if (pos === -1) {\n        pos = this._data.length\n        this._setBit(index)\n        this._changedData = true\n      } else {\n        needsSort = true\n      }\n      this._setInternalPos(pos, index, value, needsSort)\n      this._changedLength = true\n    }\n  }\n\n  unset (index) {\n    this.set(index, undefined)\n  }\n\n  get (index) {\n    this._sortData()\n    const pos = this._internalPositionFor(index, true)\n    if (pos === -1) {\n      return undefined\n    }\n    return this._data[pos][1]\n  }\n\n  push (value) {\n    this.set(this.length, value)\n    return this.length\n  }\n\n  get length () {\n    this._sortData()\n    if (this._changedLength) {\n      const last = this._data[this._data.length - 1]\n      this._length = last ? last[0] + 1 : 0\n      this._changedLength = false\n    }\n    return this._length\n  }\n\n  forEach (iterator) {\n    let i = 0\n    while(i < this.length) {\n      iterator(this.get(i), i, this)\n      i++\n    }\n  }\n\n  map (iterator) {\n    let i = 0\n    let mapped = new Array(this.length)\n    while(i < this.length) {\n      mapped[i] = iterator(this.get(i), i, this)\n      i++\n    }\n    return mapped\n  }\n\n  reduce (reducer, initialValue) {\n    let i = 0\n    let acc = initialValue\n    while(i < this.length) {\n      const value = this.get(i)\n      acc = reducer(acc, value, i)\n      i++\n    }\n    return acc\n  }\n\n  find (finder) {\n    let i = 0, found, last\n    while ((i < this.length) && !found) {\n      last = this.get(i)\n      found = finder(last)\n      i++\n    }\n    return found ? last : undefined\n  }\n\n  _internalPositionFor (index, noCreate) {\n    const bytePos = this._bytePosFor(index, noCreate)\n    if (bytePos >= this._bitArrays.length) {\n      return -1\n    }\n    const byte = this._bitArrays[bytePos]\n    const bitPos = index - bytePos * BITS_PER_BYTE\n    const exists = (byte & (1 << bitPos)) > 0\n    if (!exists) {\n      return -1\n    }\n    const previousPopCount = this._bitArrays.slice(0, bytePos).reduce(popCountReduce, 0)\n\n    const mask = ~(0xffffffff << (bitPos + 1))\n    const bytePopCount = popCount(byte & mask)\n    const arrayPos = previousPopCount + bytePopCount - 1\n    return arrayPos\n  }\n\n  _bytePosFor (index, noCreate) {\n    const bytePos = Math.floor(index / BITS_PER_BYTE)\n    const targetLength = bytePos + 1\n    while (!noCreate && this._bitArrays.length < targetLength) {\n      this._bitArrays.push(0)\n    }\n    return bytePos\n  }\n\n  _setBit (index) {\n    const bytePos = this._bytePosFor(index, false)\n    this._bitArrays[bytePos] |= (1 << (index - (bytePos * BITS_PER_BYTE)))\n  }\n\n  _unsetBit(index) {\n    const bytePos = this._bytePosFor(index, false)\n    this._bitArrays[bytePos] &= ~(1 << (index - (bytePos * BITS_PER_BYTE)))\n  }\n\n  _setInternalPos(pos, index, value, needsSort) {\n    const data =this._data\n    const elem = [index, value]\n    if (needsSort) {\n      this._sortData()\n      data[pos] = elem\n    } else {\n      // new element. just shove it into the array\n      // but be nice about where we shove it\n      // in order to make sorting it later easier\n      if (data.length) {\n        if (data[data.length - 1][0] >= index) {\n          data.push(elem)\n        } else if (data[0][0] <= index) {\n          data.unshift(elem)\n        } else {\n          const randomIndex = Math.round(data.length / 2)\n          this._data = data.slice(0, randomIndex).concat(elem).concat(data.slice(randomIndex))\n        }\n      } else {\n        this._data.push(elem)\n      }\n      this._changedData = true\n      this._changedLength = true\n    }\n  }\n\n  _unsetInternalPos (pos) {\n    this._data.splice(pos, 1)\n  }\n\n  _sortData () {\n    if (this._changedData) {\n      this._data.sort(sortInternal)\n    }\n\n    this._changedData = false\n  }\n\n  bitField () {\n    const bytes = []\n    let pendingBitsForResultingByte = 8\n    let pendingBitsForNewByte = 0\n    let resultingByte = 0\n    let newByte\n    const pending = this._bitArrays.slice()\n    while (pending.length || pendingBitsForNewByte) {\n      if (pendingBitsForNewByte === 0) {\n        newByte = pending.shift()\n        pendingBitsForNewByte = 7\n      }\n\n      const usingBits = Math.min(pendingBitsForNewByte, pendingBitsForResultingByte)\n      const mask = ~(0b11111111 << usingBits)\n      const masked = newByte & mask\n      resultingByte |= masked << (8 - pendingBitsForResultingByte)\n      newByte = newByte >>> usingBits\n      pendingBitsForNewByte -= usingBits\n      pendingBitsForResultingByte -= usingBits\n\n      if (!pendingBitsForResultingByte || (!pendingBitsForNewByte && !pending.length)) {\n        bytes.push(resultingByte)\n        resultingByte = 0\n        pendingBitsForResultingByte = 8\n      }\n    }\n\n    // remove trailing zeroes\n    for(var i = bytes.length - 1; i > 0; i--) {\n      const value = bytes[i]\n      if (value === 0) {\n        bytes.pop()\n      } else {\n        break\n      }\n    }\n\n    return bytes\n  }\n\n  compactArray () {\n    this._sortData()\n    return this._data.map(valueOnly)\n  }\n}\n\nfunction popCountReduce (count, byte) {\n  return count + popCount(byte)\n}\n\nfunction popCount(_v) {\n  let v = _v\n  v = v - ((v >> 1) & 0x55555555)                    // reuse input as temporary\n  v = (v & 0x33333333) + ((v >> 2) & 0x33333333)     // temp\n  return ((v + (v >> 4) & 0xF0F0F0F) * 0x1010101) >> 24\n}\n\nfunction sortInternal (a, b) {\n  return a[0] - b[0]\n}\n\nfunction valueOnly (elem) {\n  return elem[1]\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}