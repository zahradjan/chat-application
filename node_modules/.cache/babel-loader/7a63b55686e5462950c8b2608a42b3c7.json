{"ast":null,"code":"'use strict';\n\nconst {\n  EventEmitter\n} = require('events');\n\nconst errcode = require('err-code');\n\nconst libp2pRecord = require('libp2p-record');\n\nconst {\n  MemoryDatastore\n} = require('interface-datastore');\n\nconst {\n  equals: uint8ArrayEquals\n} = require('uint8arrays/equals');\n\nconst {\n  toString: uint8ArrayToString\n} = require('uint8arrays/to-string');\n\nconst RoutingTable = require('./routing-table');\n\nconst utils = require('./utils');\n\nconst c = require('./constants');\n\nconst Network = require('./network');\n\nconst contentFetching = require('./content-fetching');\n\nconst contentRouting = require('./content-routing');\n\nconst peerRouting = require('./peer-routing');\n\nconst Message = require('./message');\n\nconst Providers = require('./providers');\n\nconst QueryManager = require('./query-manager');\n\nconst Record = libp2pRecord.Record;\n/**\n * @typedef {*} Libp2p\n * @typedef {*} PeerStore\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {*} Dialer\n * @typedef {*} Registrar\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('multiaddr').Multiaddr} Multiaddr\n * @typedef {object} PeerData\n * @property {PeerId} id\n * @property {Multiaddr[]} multiaddrs\n */\n\n/**\n * A DHT implementation modeled after Kademlia with S/Kademlia modifications.\n * Original implementation in go: https://github.com/libp2p/go-libp2p-kad-dht.\n */\n\nclass KadDHT extends EventEmitter {\n  /**\n   * Create a new KadDHT.\n   *\n   * @param {Object} props\n   * @param {Libp2p} props.libp2p - the libp2p instance\n   * @param {Dialer} props.dialer - libp2p dialer instance\n   * @param {PeerId} props.peerId - peer's peerId\n   * @param {PeerStore} props.peerStore - libp2p peerStore\n   * @param {Registrar} props.registrar - libp2p registrar instance\n   * @param {string} [props.protocolPrefix = '/ipfs'] - libp2p registrar handle protocol\n   * @param {boolean} [props.forceProtocolLegacy = false] - WARNING: this is not recommended and should only be used for legacy purposes\n   * @param {number} props.kBucketSize - k-bucket size (default 20)\n   * @param {boolean} props.clientMode - If true, the DHT will not respond to queries. This should be true if your node will not be dialable. (default: false)\n   * @param {number} props.concurrency - alpha concurrency of queries (default 3)\n   * @param {Datastore} props.datastore - datastore (default MemoryDatastore)\n   * @param {object} props.validators - validators object with namespace as keys and function(key, record, callback)\n   * @param {object} props.selectors - selectors object with namespace as keys and function(key, records)\n   * @param {function(import('libp2p-record').Record, PeerId): void} [props.onPut] - Called when an entry is added to or changed in the datastore\n   * @param {function(import('libp2p-record').Record): void} [props.onRemove] - Called when an entry is removed from the datastore\n   */\n  constructor(_ref) {\n    let {\n      libp2p,\n      dialer,\n      peerId,\n      peerStore,\n      registrar,\n      protocolPrefix = '/ipfs',\n      forceProtocolLegacy = false,\n      datastore = new MemoryDatastore(),\n      kBucketSize = c.K,\n      clientMode = false,\n      concurrency = c.ALPHA,\n      validators = {},\n      selectors = {},\n      onPut = () => {},\n      onRemove = () => {}\n    } = _ref;\n    super();\n\n    if (!dialer) {\n      throw new Error('libp2p-kad-dht requires an instance of Dialer');\n    }\n    /**\n     * Local reference to the libp2p instance. May be undefined.\n     *\n     * @type {Libp2p}\n     */\n\n\n    this.libp2p = libp2p;\n    /**\n     * Local reference to the libp2p dialer instance\n     *\n     * @type {Dialer}\n     */\n\n    this.dialer = dialer;\n    /**\n     * Local peer-id\n     *\n     * @type {PeerId}\n     */\n\n    this.peerId = peerId;\n    /**\n     * Local PeerStore\n     *\n     * @type {PeerStore}\n     */\n\n    this.peerStore = peerStore;\n    /**\n     * Local peer info\n     *\n     * @type {Registrar}\n     */\n\n    this.registrar = registrar;\n    /**\n     * Registrar protocol\n     *\n     * @type {string}\n     */\n\n    this.protocol = protocolPrefix + (forceProtocolLegacy ? '' : c.PROTOCOL_DHT);\n    /**\n     * k-bucket size\n     *\n     * @type {number}\n     */\n\n    this.kBucketSize = kBucketSize;\n    this._clientMode = clientMode;\n    /**\n     * ALPHA concurrency at which each query path with run, defaults to 3\n     *\n     * @type {number}\n     */\n\n    this.concurrency = concurrency;\n    /**\n     * Number of disjoint query paths to use\n     * This is set to `kBucketSize`/2 per the S/Kademlia paper\n     *\n     * @type {number}\n     */\n\n    this.disjointPaths = Math.ceil(this.kBucketSize / 2);\n    /**\n     * The routing table.\n     *\n     * @type {RoutingTable}\n     */\n\n    this.routingTable = new RoutingTable(this, {\n      kBucketSize: this.kBucketSize\n    });\n    /**\n     * Reference to the datastore, uses an in-memory store if none given.\n     *\n     * @type {Datastore}\n     */\n\n    this.datastore = datastore;\n    /**\n     * Provider management\n     *\n     * @type {Providers}\n     */\n\n    this.providers = new Providers(this.datastore, this.peerId);\n    this.validators = {\n      pk: libp2pRecord.validator.validators.pk,\n      ...validators\n    };\n    this.selectors = {\n      pk: libp2pRecord.selection.selectors.pk,\n      ...selectors\n    };\n    this.network = new Network(this);\n    this._log = utils.logger(this.peerId);\n    /**\n     * Keeps track of running queries\n     *\n     * @type {QueryManager}\n     */\n\n    this._queryManager = new QueryManager();\n    this._running = false; // DHT components\n\n    this.contentFetching = contentFetching(this);\n    this.contentRouting = contentRouting(this);\n    this.peerRouting = peerRouting(this); // datastore events\n\n    this.onPut = onPut;\n    this.onRemove = onRemove;\n  }\n  /**\n   * Is this DHT running.\n   */\n\n\n  get isStarted() {\n    return this._running;\n  }\n  /**\n   * Start listening to incoming connections.\n   */\n\n\n  start() {\n    this._running = true;\n    return Promise.all([this.providers.start(), this._queryManager.start(), this.network.start(), this.routingTable.start()]);\n  }\n  /**\n   * Stop accepting incoming connections and sending outgoing\n   * messages.\n   */\n\n\n  stop() {\n    this._running = false;\n    return Promise.all([this.providers.stop(), this._queryManager.stop(), this.network.stop(), this.routingTable.stop()]);\n  }\n  /**\n   * Store the given key/value  pair in the DHT.\n   *\n   * @param {Uint8Array} key\n   * @param {Uint8Array} value\n   * @param {Object} [options] - put options\n   * @param {number} [options.minPeers] - minimum number of peers required to successfully put (default: closestPeers.length)\n   * @returns {Promise<void>}\n   */\n\n\n  async put(key, value) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    // eslint-disable-line require-await\n    return this.contentFetching.put(key, value, options);\n  }\n  /**\n   * Get the value to the given key.\n   * Times out after 1 minute by default.\n   *\n   * @param {Uint8Array} key\n   * @param {Object} [options] - get options\n   * @param {number} [options.timeout] - optional timeout (default: 60000)\n   * @returns {Promise<Uint8Array>}\n   */\n\n\n  async get(key) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // eslint-disable-line require-await\n    return this.contentFetching.get(key, options);\n  }\n  /**\n   * Get the `n` values to the given key without sorting.\n   *\n   * @param {Uint8Array} key\n   * @param {number} nvals\n   * @param {Object} [options] - get options\n   * @param {number} [options.timeout] - optional timeout (default: 60000)\n   */\n\n\n  async getMany(key, nvals) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    // eslint-disable-line require-await\n    return this.contentFetching.getMany(key, nvals, options);\n  }\n  /**\n   * Remove the given key from the local datastore.\n   *\n   * @param {Uint8Array} key\n   */\n\n\n  async removeLocal(key) {\n    this._log(`removeLocal: ${uint8ArrayToString(key, 'base32')}`);\n\n    const dsKey = utils.bufferToKey(key);\n\n    try {\n      await this.datastore.delete(dsKey);\n    } catch (err) {\n      if (err.code === 'ERR_NOT_FOUND') {\n        return undefined;\n      }\n\n      throw err;\n    }\n  }\n  /**\n   * @param {Uint8Array} key\n   * @param {Uint8Array} value\n   */\n\n\n  async _putLocal(key, value) {\n    this._log(`_putLocal: ${uint8ArrayToString(key, 'base32')}`);\n\n    const dsKey = utils.bufferToKey(key);\n    await this.datastore.put(dsKey, value);\n  } // ----------- Content Routing\n\n  /**\n   * Announce to the network that we can provide given key's value.\n   *\n   * @param {CID} key\n   * @returns {Promise<void>}\n   */\n\n\n  async provide(key) {\n    // eslint-disable-line require-await\n    return this.contentRouting.provide(key);\n  }\n  /**\n   * Search the dht for up to `K` providers of the given CID.\n   *\n   * @param {CID} key\n   * @param {Object} [options] - findProviders options\n   * @param {number} [options.timeout=60000] - how long the query should maximally run, in milliseconds (default: 60000)\n   * @param {number} [options.maxNumProviders=5] - maximum number of providers to find\n   * @returns {AsyncIterable<{ id: PeerId, multiaddrs: Multiaddr[] }>}\n   */\n\n\n  async *findProviders(key) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      timeout: 6000,\n      maxNumProviders: 5\n    };\n\n    for await (const peerData of this.contentRouting.findProviders(key, options)) {\n      yield peerData;\n    }\n  } // ----------- Peer Routing -----------\n\n  /**\n   * Search for a peer with the given ID.\n   *\n   * @param {PeerId} id\n   * @param {Object} [options] - findPeer options\n   * @param {number} [options.timeout=60000] - how long the query should maximally run, in milliseconds (default: 60000)\n   * @returns {Promise<{ id: PeerId, multiaddrs: Multiaddr[] }>}\n   */\n\n\n  async findPeer(id) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      timeout: 60000\n    };\n    // eslint-disable-line require-await\n    return this.peerRouting.findPeer(id, options);\n  }\n  /**\n   * Kademlia 'node lookup' operation.\n   *\n   * @param {Uint8Array} key\n   * @param {Object} [options]\n   * @param {boolean} [options.shallow = false] - shallow query\n   */\n\n\n  async *getClosestPeers(key) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      shallow: false\n    };\n    yield* this.peerRouting.getClosestPeers(key, options);\n  }\n  /**\n   * Get the public key for the given peer id.\n   *\n   * @param {PeerId} peer\n   */\n\n\n  getPublicKey(peer) {\n    return this.peerRouting.getPublicKey(peer);\n  } // ----------- Discovery -----------\n\n  /**\n   * @param {PeerId} peerId\n   * @param {Multiaddr[]} multiaddrs\n   */\n\n\n  _peerDiscovered(peerId, multiaddrs) {\n    this.emit('peer', {\n      id: peerId,\n      multiaddrs\n    });\n  } // ----------- Internals -----------\n\n  /**\n   * Returns the routing tables closest peers, for the key of\n   * the message.\n   *\n   * @param {Message} msg\n   */\n\n\n  async _nearestPeersToQuery(msg) {\n    const key = await utils.convertBuffer(msg.key);\n    const ids = this.routingTable.closestPeers(key, this.kBucketSize);\n    return ids.map(p => {\n      /** @type {{ id: PeerId, addresses: { multiaddr: Multiaddr }[] }} */\n      const peer = this.peerStore.get(p);\n      return {\n        id: p,\n        multiaddrs: peer ? peer.addresses.map(address => address.multiaddr) : []\n      };\n    });\n  }\n  /**\n   * Get the nearest peers to the given query, but iff closer\n   * than self.\n   *\n   * @param {Message} msg\n   * @param {PeerId} peerId\n   */\n\n\n  async _betterPeersToQuery(msg, peerId) {\n    this._log('betterPeersToQuery');\n\n    const closer = await this._nearestPeersToQuery(msg);\n    return closer.filter(closer => {\n      if (this._isSelf(closer.id)) {\n        // Should bail, not sure\n        this._log.error('trying to return self as closer');\n\n        return false;\n      }\n\n      return !closer.id.isEqual(peerId);\n    });\n  }\n  /**\n   * Try to fetch a given record by from the local datastore.\n   * Returns the record iff it is still valid, meaning\n   * - it was either authored by this node, or\n   * - it was received less than `MAX_RECORD_AGE` ago.\n   *\n   * @param {Uint8Array} key\n   */\n\n\n  async _checkLocalDatastore(key) {\n    this._log(`checkLocalDatastore: ${uint8ArrayToString(key)} %b`, key);\n\n    const dsKey = utils.bufferToKey(key); // Fetch value from ds\n\n    let rawRecord;\n\n    try {\n      rawRecord = await this.datastore.get(dsKey);\n    } catch (err) {\n      if (err.code === 'ERR_NOT_FOUND') {\n        return undefined;\n      }\n\n      throw err;\n    } // Create record from the returned bytes\n\n\n    const record = Record.deserialize(rawRecord);\n\n    if (!record) {\n      throw errcode(new Error('Invalid record'), 'ERR_INVALID_RECORD');\n    } // Check validity: compare time received with max record age\n\n\n    if (record.timeReceived == null || utils.now() - record.timeReceived.getTime() > c.MAX_RECORD_AGE) {\n      // If record is bad delete it and return\n      await this.datastore.delete(dsKey);\n      this.onRemove(record);\n      return undefined;\n    } // Record is valid\n\n\n    return record;\n  }\n  /**\n   * Add the peer to the routing table and update it in the peerStore.\n   *\n   * @param {PeerId} peerId\n   */\n\n\n  async _add(peerId) {\n    await this.routingTable.add(peerId);\n  }\n  /**\n   * Verify a record without searching the DHT.\n   *\n   * @param {import('libp2p-record').Record} record\n   */\n\n\n  async _verifyRecordLocally(record) {\n    this._log('verifyRecordLocally');\n\n    await libp2pRecord.validator.verifyRecord(this.validators, record);\n  }\n  /**\n   * Is the given peer id our PeerId?\n   *\n   * @param {PeerId} other\n   */\n\n\n  _isSelf(other) {\n    return other && uint8ArrayEquals(this.peerId.id, other.id);\n  }\n  /**\n   * Store the given key/value pair at the peer `target`.\n   *\n   * @param {Uint8Array} key\n   * @param {Uint8Array} rec - encoded record\n   * @param {PeerId} target\n   */\n\n\n  async _putValueToPeer(key, rec, target) {\n    const msg = new Message(Message.TYPES.PUT_VALUE, key, 0);\n    msg.record = Record.deserialize(rec);\n    const resp = await this.network.sendRequest(target, msg);\n\n    if (resp.record && !uint8ArrayEquals(resp.record.value, Record.deserialize(rec).value)) {\n      throw errcode(new Error('value not put correctly'), 'ERR_PUT_VALUE_INVALID');\n    }\n  }\n  /**\n   * Query a particular peer for the value for the given key.\n   * It will either return the value or a list of closer peers.\n   *\n   * Note: The peerStore is updated with new addresses found for the given peer.\n   *\n   * @param {PeerId} peer\n   * @param {Uint8Array} key\n   */\n\n\n  async _getValueOrPeers(peer, key) {\n    const msg = await this._getValueSingle(peer, key);\n    const peers = msg.closerPeers;\n    const record = msg.record;\n\n    if (record) {\n      // We have a record\n      try {\n        await this._verifyRecordOnline(record);\n      } catch (err) {\n        const errMsg = 'invalid record received, discarded';\n\n        this._log(errMsg);\n\n        throw errcode(new Error(errMsg), 'ERR_INVALID_RECORD');\n      }\n\n      return {\n        record,\n        peers\n      };\n    }\n\n    if (peers.length > 0) {\n      return {\n        peers\n      };\n    }\n\n    throw errcode(new Error('Not found'), 'ERR_NOT_FOUND');\n  }\n  /**\n   * Get a value via rpc call for the given parameters.\n   *\n   * @param {PeerId} peer\n   * @param {Uint8Array} key\n   */\n\n\n  async _getValueSingle(peer, key) {\n    // eslint-disable-line require-await\n    const msg = new Message(Message.TYPES.GET_VALUE, key, 0);\n    return this.network.sendRequest(peer, msg);\n  }\n  /**\n   * Verify a record, fetching missing public keys from the network.\n   * Calls back with an error if the record is invalid.\n   *\n   * @param {import('libp2p-record').Record} record\n   * @returns {Promise<void>}\n   */\n\n\n  async _verifyRecordOnline(record) {\n    await libp2pRecord.validator.verifyRecord(this.validators, record);\n  }\n\n}\n\nmodule.exports = KadDHT;\nmodule.exports.multicodec = '/ipfs' + c.PROTOCOL_DHT;","map":{"version":3,"names":["EventEmitter","require","errcode","libp2pRecord","MemoryDatastore","equals","uint8ArrayEquals","toString","uint8ArrayToString","RoutingTable","utils","c","Network","contentFetching","contentRouting","peerRouting","Message","Providers","QueryManager","Record","KadDHT","constructor","libp2p","dialer","peerId","peerStore","registrar","protocolPrefix","forceProtocolLegacy","datastore","kBucketSize","K","clientMode","concurrency","ALPHA","validators","selectors","onPut","onRemove","Error","protocol","PROTOCOL_DHT","_clientMode","disjointPaths","Math","ceil","routingTable","providers","pk","validator","selection","network","_log","logger","_queryManager","_running","isStarted","start","Promise","all","stop","put","key","value","options","get","getMany","nvals","removeLocal","dsKey","bufferToKey","delete","err","code","undefined","_putLocal","provide","findProviders","timeout","maxNumProviders","peerData","findPeer","id","getClosestPeers","shallow","getPublicKey","peer","_peerDiscovered","multiaddrs","emit","_nearestPeersToQuery","msg","convertBuffer","ids","closestPeers","map","p","addresses","address","multiaddr","_betterPeersToQuery","closer","filter","_isSelf","error","isEqual","_checkLocalDatastore","rawRecord","record","deserialize","timeReceived","now","getTime","MAX_RECORD_AGE","_add","add","_verifyRecordLocally","verifyRecord","other","_putValueToPeer","rec","target","TYPES","PUT_VALUE","resp","sendRequest","_getValueOrPeers","_getValueSingle","peers","closerPeers","_verifyRecordOnline","errMsg","length","GET_VALUE","module","exports","multicodec"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-kad-dht/src/index.js"],"sourcesContent":["'use strict'\n\nconst { EventEmitter } = require('events')\nconst errcode = require('err-code')\n\nconst libp2pRecord = require('libp2p-record')\nconst { MemoryDatastore } = require('interface-datastore')\nconst { equals: uint8ArrayEquals } = require('uint8arrays/equals')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\n\nconst RoutingTable = require('./routing-table')\nconst utils = require('./utils')\nconst c = require('./constants')\nconst Network = require('./network')\nconst contentFetching = require('./content-fetching')\nconst contentRouting = require('./content-routing')\nconst peerRouting = require('./peer-routing')\nconst Message = require('./message')\nconst Providers = require('./providers')\nconst QueryManager = require('./query-manager')\n\nconst Record = libp2pRecord.Record\n\n/**\n * @typedef {*} Libp2p\n * @typedef {*} PeerStore\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {*} Dialer\n * @typedef {*} Registrar\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('multiaddr').Multiaddr} Multiaddr\n * @typedef {object} PeerData\n * @property {PeerId} id\n * @property {Multiaddr[]} multiaddrs\n */\n\n/**\n * A DHT implementation modeled after Kademlia with S/Kademlia modifications.\n * Original implementation in go: https://github.com/libp2p/go-libp2p-kad-dht.\n */\nclass KadDHT extends EventEmitter {\n  /**\n   * Create a new KadDHT.\n   *\n   * @param {Object} props\n   * @param {Libp2p} props.libp2p - the libp2p instance\n   * @param {Dialer} props.dialer - libp2p dialer instance\n   * @param {PeerId} props.peerId - peer's peerId\n   * @param {PeerStore} props.peerStore - libp2p peerStore\n   * @param {Registrar} props.registrar - libp2p registrar instance\n   * @param {string} [props.protocolPrefix = '/ipfs'] - libp2p registrar handle protocol\n   * @param {boolean} [props.forceProtocolLegacy = false] - WARNING: this is not recommended and should only be used for legacy purposes\n   * @param {number} props.kBucketSize - k-bucket size (default 20)\n   * @param {boolean} props.clientMode - If true, the DHT will not respond to queries. This should be true if your node will not be dialable. (default: false)\n   * @param {number} props.concurrency - alpha concurrency of queries (default 3)\n   * @param {Datastore} props.datastore - datastore (default MemoryDatastore)\n   * @param {object} props.validators - validators object with namespace as keys and function(key, record, callback)\n   * @param {object} props.selectors - selectors object with namespace as keys and function(key, records)\n   * @param {function(import('libp2p-record').Record, PeerId): void} [props.onPut] - Called when an entry is added to or changed in the datastore\n   * @param {function(import('libp2p-record').Record): void} [props.onRemove] - Called when an entry is removed from the datastore\n   */\n  constructor ({\n    libp2p,\n    dialer,\n    peerId,\n    peerStore,\n    registrar,\n    protocolPrefix = '/ipfs',\n    forceProtocolLegacy = false,\n    datastore = new MemoryDatastore(),\n    kBucketSize = c.K,\n    clientMode = false,\n    concurrency = c.ALPHA,\n    validators = {},\n    selectors = {},\n    onPut = () => {},\n    onRemove = () => {}\n  }) {\n    super()\n\n    if (!dialer) {\n      throw new Error('libp2p-kad-dht requires an instance of Dialer')\n    }\n\n    /**\n     * Local reference to the libp2p instance. May be undefined.\n     *\n     * @type {Libp2p}\n     */\n    this.libp2p = libp2p\n\n    /**\n     * Local reference to the libp2p dialer instance\n     *\n     * @type {Dialer}\n     */\n    this.dialer = dialer\n\n    /**\n     * Local peer-id\n     *\n     * @type {PeerId}\n     */\n    this.peerId = peerId\n\n    /**\n     * Local PeerStore\n     *\n     * @type {PeerStore}\n     */\n    this.peerStore = peerStore\n\n    /**\n     * Local peer info\n     *\n     * @type {Registrar}\n     */\n    this.registrar = registrar\n\n    /**\n     * Registrar protocol\n     *\n     * @type {string}\n     */\n    this.protocol = protocolPrefix + (forceProtocolLegacy ? '' : c.PROTOCOL_DHT)\n\n    /**\n     * k-bucket size\n     *\n     * @type {number}\n     */\n    this.kBucketSize = kBucketSize\n\n    this._clientMode = clientMode\n\n    /**\n     * ALPHA concurrency at which each query path with run, defaults to 3\n     *\n     * @type {number}\n     */\n    this.concurrency = concurrency\n\n    /**\n     * Number of disjoint query paths to use\n     * This is set to `kBucketSize`/2 per the S/Kademlia paper\n     *\n     * @type {number}\n     */\n    this.disjointPaths = Math.ceil(this.kBucketSize / 2)\n\n    /**\n     * The routing table.\n     *\n     * @type {RoutingTable}\n     */\n    this.routingTable = new RoutingTable(this, { kBucketSize: this.kBucketSize })\n\n    /**\n     * Reference to the datastore, uses an in-memory store if none given.\n     *\n     * @type {Datastore}\n     */\n    this.datastore = datastore\n\n    /**\n     * Provider management\n     *\n     * @type {Providers}\n     */\n    this.providers = new Providers(this.datastore, this.peerId)\n\n    this.validators = {\n      pk: libp2pRecord.validator.validators.pk,\n      ...validators\n    }\n\n    this.selectors = {\n      pk: libp2pRecord.selection.selectors.pk,\n      ...selectors\n    }\n\n    this.network = new Network(this)\n\n    this._log = utils.logger(this.peerId)\n\n    /**\n     * Keeps track of running queries\n     *\n     * @type {QueryManager}\n     */\n    this._queryManager = new QueryManager()\n\n    this._running = false\n\n    // DHT components\n    this.contentFetching = contentFetching(this)\n    this.contentRouting = contentRouting(this)\n    this.peerRouting = peerRouting(this)\n\n    // datastore events\n    this.onPut = onPut\n    this.onRemove = onRemove\n  }\n\n  /**\n   * Is this DHT running.\n   */\n  get isStarted () {\n    return this._running\n  }\n\n  /**\n   * Start listening to incoming connections.\n   */\n  start () {\n    this._running = true\n\n    return Promise.all([\n      this.providers.start(),\n      this._queryManager.start(),\n      this.network.start(),\n      this.routingTable.start()\n    ])\n  }\n\n  /**\n   * Stop accepting incoming connections and sending outgoing\n   * messages.\n   */\n  stop () {\n    this._running = false\n\n    return Promise.all([\n      this.providers.stop(),\n      this._queryManager.stop(),\n      this.network.stop(),\n      this.routingTable.stop()\n    ])\n  }\n\n  /**\n   * Store the given key/value  pair in the DHT.\n   *\n   * @param {Uint8Array} key\n   * @param {Uint8Array} value\n   * @param {Object} [options] - put options\n   * @param {number} [options.minPeers] - minimum number of peers required to successfully put (default: closestPeers.length)\n   * @returns {Promise<void>}\n   */\n  async put (key, value, options = {}) { // eslint-disable-line require-await\n    return this.contentFetching.put(key, value, options)\n  }\n\n  /**\n   * Get the value to the given key.\n   * Times out after 1 minute by default.\n   *\n   * @param {Uint8Array} key\n   * @param {Object} [options] - get options\n   * @param {number} [options.timeout] - optional timeout (default: 60000)\n   * @returns {Promise<Uint8Array>}\n   */\n  async get (key, options = {}) { // eslint-disable-line require-await\n    return this.contentFetching.get(key, options)\n  }\n\n  /**\n   * Get the `n` values to the given key without sorting.\n   *\n   * @param {Uint8Array} key\n   * @param {number} nvals\n   * @param {Object} [options] - get options\n   * @param {number} [options.timeout] - optional timeout (default: 60000)\n   */\n  async getMany (key, nvals, options = {}) { // eslint-disable-line require-await\n    return this.contentFetching.getMany(key, nvals, options)\n  }\n\n  /**\n   * Remove the given key from the local datastore.\n   *\n   * @param {Uint8Array} key\n   */\n  async removeLocal (key) {\n    this._log(`removeLocal: ${uint8ArrayToString(key, 'base32')}`)\n    const dsKey = utils.bufferToKey(key)\n\n    try {\n      await this.datastore.delete(dsKey)\n    } catch (err) {\n      if (err.code === 'ERR_NOT_FOUND') {\n        return undefined\n      }\n      throw err\n    }\n  }\n\n  /**\n   * @param {Uint8Array} key\n   * @param {Uint8Array} value\n   */\n  async _putLocal (key, value) {\n    this._log(`_putLocal: ${uint8ArrayToString(key, 'base32')}`)\n    const dsKey = utils.bufferToKey(key)\n\n    await this.datastore.put(dsKey, value)\n  }\n\n  // ----------- Content Routing\n\n  /**\n   * Announce to the network that we can provide given key's value.\n   *\n   * @param {CID} key\n   * @returns {Promise<void>}\n   */\n  async provide (key) { // eslint-disable-line require-await\n    return this.contentRouting.provide(key)\n  }\n\n  /**\n   * Search the dht for up to `K` providers of the given CID.\n   *\n   * @param {CID} key\n   * @param {Object} [options] - findProviders options\n   * @param {number} [options.timeout=60000] - how long the query should maximally run, in milliseconds (default: 60000)\n   * @param {number} [options.maxNumProviders=5] - maximum number of providers to find\n   * @returns {AsyncIterable<{ id: PeerId, multiaddrs: Multiaddr[] }>}\n   */\n  async * findProviders (key, options = { timeout: 6000, maxNumProviders: 5 }) {\n    for await (const peerData of this.contentRouting.findProviders(key, options)) {\n      yield peerData\n    }\n  }\n\n  // ----------- Peer Routing -----------\n\n  /**\n   * Search for a peer with the given ID.\n   *\n   * @param {PeerId} id\n   * @param {Object} [options] - findPeer options\n   * @param {number} [options.timeout=60000] - how long the query should maximally run, in milliseconds (default: 60000)\n   * @returns {Promise<{ id: PeerId, multiaddrs: Multiaddr[] }>}\n   */\n  async findPeer (id, options = { timeout: 60000 }) { // eslint-disable-line require-await\n    return this.peerRouting.findPeer(id, options)\n  }\n\n  /**\n   * Kademlia 'node lookup' operation.\n   *\n   * @param {Uint8Array} key\n   * @param {Object} [options]\n   * @param {boolean} [options.shallow = false] - shallow query\n   */\n  async * getClosestPeers (key, options = { shallow: false }) {\n    yield * this.peerRouting.getClosestPeers(key, options)\n  }\n\n  /**\n   * Get the public key for the given peer id.\n   *\n   * @param {PeerId} peer\n   */\n  getPublicKey (peer) {\n    return this.peerRouting.getPublicKey(peer)\n  }\n\n  // ----------- Discovery -----------\n\n  /**\n   * @param {PeerId} peerId\n   * @param {Multiaddr[]} multiaddrs\n   */\n  _peerDiscovered (peerId, multiaddrs) {\n    this.emit('peer', {\n      id: peerId,\n      multiaddrs\n    })\n  }\n\n  // ----------- Internals -----------\n\n  /**\n   * Returns the routing tables closest peers, for the key of\n   * the message.\n   *\n   * @param {Message} msg\n   */\n  async _nearestPeersToQuery (msg) {\n    const key = await utils.convertBuffer(msg.key)\n    const ids = this.routingTable.closestPeers(key, this.kBucketSize)\n\n    return ids.map((p) => {\n      /** @type {{ id: PeerId, addresses: { multiaddr: Multiaddr }[] }} */\n      const peer = this.peerStore.get(p)\n\n      return {\n        id: p,\n        multiaddrs: peer ? peer.addresses.map((address) => address.multiaddr) : []\n      }\n    })\n  }\n\n  /**\n   * Get the nearest peers to the given query, but iff closer\n   * than self.\n   *\n   * @param {Message} msg\n   * @param {PeerId} peerId\n   */\n  async _betterPeersToQuery (msg, peerId) {\n    this._log('betterPeersToQuery')\n    const closer = await this._nearestPeersToQuery(msg)\n\n    return closer.filter((closer) => {\n      if (this._isSelf(closer.id)) {\n        // Should bail, not sure\n        this._log.error('trying to return self as closer')\n        return false\n      }\n\n      return !closer.id.isEqual(peerId)\n    })\n  }\n\n  /**\n   * Try to fetch a given record by from the local datastore.\n   * Returns the record iff it is still valid, meaning\n   * - it was either authored by this node, or\n   * - it was received less than `MAX_RECORD_AGE` ago.\n   *\n   * @param {Uint8Array} key\n   */\n\n  async _checkLocalDatastore (key) {\n    this._log(`checkLocalDatastore: ${uint8ArrayToString(key)} %b`, key)\n    const dsKey = utils.bufferToKey(key)\n\n    // Fetch value from ds\n    let rawRecord\n    try {\n      rawRecord = await this.datastore.get(dsKey)\n    } catch (err) {\n      if (err.code === 'ERR_NOT_FOUND') {\n        return undefined\n      }\n      throw err\n    }\n\n    // Create record from the returned bytes\n    const record = Record.deserialize(rawRecord)\n\n    if (!record) {\n      throw errcode(new Error('Invalid record'), 'ERR_INVALID_RECORD')\n    }\n\n    // Check validity: compare time received with max record age\n    if (record.timeReceived == null ||\n      utils.now() - record.timeReceived.getTime() > c.MAX_RECORD_AGE) {\n      // If record is bad delete it and return\n      await this.datastore.delete(dsKey)\n      this.onRemove(record)\n      return undefined\n    }\n\n    // Record is valid\n    return record\n  }\n\n  /**\n   * Add the peer to the routing table and update it in the peerStore.\n   *\n   * @param {PeerId} peerId\n   */\n  async _add (peerId) {\n    await this.routingTable.add(peerId)\n  }\n\n  /**\n   * Verify a record without searching the DHT.\n   *\n   * @param {import('libp2p-record').Record} record\n   */\n  async _verifyRecordLocally (record) {\n    this._log('verifyRecordLocally')\n\n    await libp2pRecord.validator.verifyRecord(this.validators, record)\n  }\n\n  /**\n   * Is the given peer id our PeerId?\n   *\n   * @param {PeerId} other\n   */\n  _isSelf (other) {\n    return other && uint8ArrayEquals(this.peerId.id, other.id)\n  }\n\n  /**\n   * Store the given key/value pair at the peer `target`.\n   *\n   * @param {Uint8Array} key\n   * @param {Uint8Array} rec - encoded record\n   * @param {PeerId} target\n   */\n  async _putValueToPeer (key, rec, target) {\n    const msg = new Message(Message.TYPES.PUT_VALUE, key, 0)\n    msg.record = Record.deserialize(rec)\n\n    const resp = await this.network.sendRequest(target, msg)\n\n    if (resp.record && !uint8ArrayEquals(resp.record.value, Record.deserialize(rec).value)) {\n      throw errcode(new Error('value not put correctly'), 'ERR_PUT_VALUE_INVALID')\n    }\n  }\n\n  /**\n   * Query a particular peer for the value for the given key.\n   * It will either return the value or a list of closer peers.\n   *\n   * Note: The peerStore is updated with new addresses found for the given peer.\n   *\n   * @param {PeerId} peer\n   * @param {Uint8Array} key\n   */\n  async _getValueOrPeers (peer, key) {\n    const msg = await this._getValueSingle(peer, key)\n\n    const peers = msg.closerPeers\n    const record = msg.record\n\n    if (record) {\n      // We have a record\n      try {\n        await this._verifyRecordOnline(record)\n      } catch (err) {\n        const errMsg = 'invalid record received, discarded'\n        this._log(errMsg)\n        throw errcode(new Error(errMsg), 'ERR_INVALID_RECORD')\n      }\n\n      return { record, peers }\n    }\n\n    if (peers.length > 0) {\n      return { peers }\n    }\n\n    throw errcode(new Error('Not found'), 'ERR_NOT_FOUND')\n  }\n\n  /**\n   * Get a value via rpc call for the given parameters.\n   *\n   * @param {PeerId} peer\n   * @param {Uint8Array} key\n   */\n  async _getValueSingle (peer, key) { // eslint-disable-line require-await\n    const msg = new Message(Message.TYPES.GET_VALUE, key, 0)\n    return this.network.sendRequest(peer, msg)\n  }\n\n  /**\n   * Verify a record, fetching missing public keys from the network.\n   * Calls back with an error if the record is invalid.\n   *\n   * @param {import('libp2p-record').Record} record\n   * @returns {Promise<void>}\n   */\n  async _verifyRecordOnline (record) {\n    await libp2pRecord.validator.verifyRecord(this.validators, record)\n  }\n}\n\nmodule.exports = KadDHT\nmodule.exports.multicodec = '/ipfs' + c.PROTOCOL_DHT\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}