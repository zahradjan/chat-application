{"ast":null,"code":"'use strict';\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst errcode = require('err-code');\n\nconst Message = require('../../message');\n\nconst utils = require('../../utils');\n/**\n * @typedef {import('peer-id')} PeerId\n */\n\n/**\n * @param {import('../../index')} dht\n */\n\n\nmodule.exports = dht => {\n  const log = utils.logger(dht.peerId, 'rpc:get-providers');\n  /**\n   * Process `GetProviders` DHT messages.\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   */\n\n  async function getProviders(peerId, msg) {\n    let cid;\n\n    try {\n      cid = CID.decode(msg.key);\n    } catch (err) {\n      throw errcode(new Error(`Invalid CID: ${err.message}`), 'ERR_INVALID_CID');\n    }\n\n    log('%s', cid.toString());\n    const dsKey = utils.bufferToKey(cid.bytes);\n    const [has, peers, closer] = await Promise.all([dht.datastore.has(dsKey), dht.providers.getProviders(cid), dht._betterPeersToQuery(msg, peerId)]);\n    const providerPeers = peers.map(peerId => ({\n      id: peerId,\n      multiaddrs: []\n    }));\n    const closerPeers = closer.map(c => ({\n      id: c.id,\n      multiaddrs: []\n    }));\n\n    if (has) {\n      providerPeers.push({\n        id: dht.peerId,\n        multiaddrs: []\n      });\n    }\n\n    const response = new Message(msg.type, msg.key, msg.clusterLevel);\n\n    if (providerPeers.length > 0) {\n      response.providerPeers = providerPeers;\n    }\n\n    if (closerPeers.length > 0) {\n      response.closerPeers = closerPeers;\n    }\n\n    log('got %s providers %s closerPeers', providerPeers.length, closerPeers.length);\n    return response;\n  }\n\n  return getProviders;\n};","map":{"version":3,"names":["CID","require","errcode","Message","utils","module","exports","dht","log","logger","peerId","getProviders","msg","cid","decode","key","err","Error","message","toString","dsKey","bufferToKey","bytes","has","peers","closer","Promise","all","datastore","providers","_betterPeersToQuery","providerPeers","map","id","multiaddrs","closerPeers","c","push","response","type","clusterLevel","length"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-kad-dht/src/rpc/handlers/get-providers.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst errcode = require('err-code')\n\nconst Message = require('../../message')\nconst utils = require('../../utils')\n\n/**\n * @typedef {import('peer-id')} PeerId\n */\n\n/**\n * @param {import('../../index')} dht\n */\nmodule.exports = (dht) => {\n  const log = utils.logger(dht.peerId, 'rpc:get-providers')\n\n  /**\n   * Process `GetProviders` DHT messages.\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   */\n  async function getProviders (peerId, msg) {\n    let cid\n    try {\n      cid = CID.decode(msg.key)\n    } catch (err) {\n      throw errcode(new Error(`Invalid CID: ${err.message}`), 'ERR_INVALID_CID')\n    }\n\n    log('%s', cid.toString())\n    const dsKey = utils.bufferToKey(cid.bytes)\n\n    const [has, peers, closer] = await Promise.all([\n      dht.datastore.has(dsKey),\n      dht.providers.getProviders(cid),\n      dht._betterPeersToQuery(msg, peerId)\n    ])\n\n    const providerPeers = peers.map((peerId) => ({\n      id: peerId,\n      multiaddrs: []\n    }))\n    const closerPeers = closer.map((c) => ({\n      id: c.id,\n      multiaddrs: []\n    }))\n\n    if (has) {\n      providerPeers.push({\n        id: dht.peerId,\n        multiaddrs: []\n      })\n    }\n\n    const response = new Message(msg.type, msg.key, msg.clusterLevel)\n\n    if (providerPeers.length > 0) {\n      response.providerPeers = providerPeers\n    }\n\n    if (closerPeers.length > 0) {\n      response.closerPeers = closerPeers\n    }\n\n    log('got %s providers %s closerPeers', providerPeers.length, closerPeers.length)\n    return response\n  }\n\n  return getProviders\n}\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA;AAAF,IAAUC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AAEA,MAAME,OAAO,GAAGF,OAAO,CAAC,eAAD,CAAvB;;AACA,MAAMG,KAAK,GAAGH,OAAO,CAAC,aAAD,CAArB;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AACAI,MAAM,CAACC,OAAP,GAAkBC,GAAD,IAAS;EACxB,MAAMC,GAAG,GAAGJ,KAAK,CAACK,MAAN,CAAaF,GAAG,CAACG,MAAjB,EAAyB,mBAAzB,CAAZ;EAEA;AACF;AACA;AACA;AACA;AACA;;EACE,eAAeC,YAAf,CAA6BD,MAA7B,EAAqCE,GAArC,EAA0C;IACxC,IAAIC,GAAJ;;IACA,IAAI;MACFA,GAAG,GAAGb,GAAG,CAACc,MAAJ,CAAWF,GAAG,CAACG,GAAf,CAAN;IACD,CAFD,CAEE,OAAOC,GAAP,EAAY;MACZ,MAAMd,OAAO,CAAC,IAAIe,KAAJ,CAAW,gBAAeD,GAAG,CAACE,OAAQ,EAAtC,CAAD,EAA2C,iBAA3C,CAAb;IACD;;IAEDV,GAAG,CAAC,IAAD,EAAOK,GAAG,CAACM,QAAJ,EAAP,CAAH;IACA,MAAMC,KAAK,GAAGhB,KAAK,CAACiB,WAAN,CAAkBR,GAAG,CAACS,KAAtB,CAAd;IAEA,MAAM,CAACC,GAAD,EAAMC,KAAN,EAAaC,MAAb,IAAuB,MAAMC,OAAO,CAACC,GAAR,CAAY,CAC7CpB,GAAG,CAACqB,SAAJ,CAAcL,GAAd,CAAkBH,KAAlB,CAD6C,EAE7Cb,GAAG,CAACsB,SAAJ,CAAclB,YAAd,CAA2BE,GAA3B,CAF6C,EAG7CN,GAAG,CAACuB,mBAAJ,CAAwBlB,GAAxB,EAA6BF,MAA7B,CAH6C,CAAZ,CAAnC;IAMA,MAAMqB,aAAa,GAAGP,KAAK,CAACQ,GAAN,CAAWtB,MAAD,KAAa;MAC3CuB,EAAE,EAAEvB,MADuC;MAE3CwB,UAAU,EAAE;IAF+B,CAAb,CAAV,CAAtB;IAIA,MAAMC,WAAW,GAAGV,MAAM,CAACO,GAAP,CAAYI,CAAD,KAAQ;MACrCH,EAAE,EAAEG,CAAC,CAACH,EAD+B;MAErCC,UAAU,EAAE;IAFyB,CAAR,CAAX,CAApB;;IAKA,IAAIX,GAAJ,EAAS;MACPQ,aAAa,CAACM,IAAd,CAAmB;QACjBJ,EAAE,EAAE1B,GAAG,CAACG,MADS;QAEjBwB,UAAU,EAAE;MAFK,CAAnB;IAID;;IAED,MAAMI,QAAQ,GAAG,IAAInC,OAAJ,CAAYS,GAAG,CAAC2B,IAAhB,EAAsB3B,GAAG,CAACG,GAA1B,EAA+BH,GAAG,CAAC4B,YAAnC,CAAjB;;IAEA,IAAIT,aAAa,CAACU,MAAd,GAAuB,CAA3B,EAA8B;MAC5BH,QAAQ,CAACP,aAAT,GAAyBA,aAAzB;IACD;;IAED,IAAII,WAAW,CAACM,MAAZ,GAAqB,CAAzB,EAA4B;MAC1BH,QAAQ,CAACH,WAAT,GAAuBA,WAAvB;IACD;;IAED3B,GAAG,CAAC,iCAAD,EAAoCuB,aAAa,CAACU,MAAlD,EAA0DN,WAAW,CAACM,MAAtE,CAAH;IACA,OAAOH,QAAP;EACD;;EAED,OAAO3B,YAAP;AACD,CAzDD"},"metadata":{},"sourceType":"script"}