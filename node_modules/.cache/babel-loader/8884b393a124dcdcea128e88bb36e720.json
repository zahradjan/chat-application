{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _objectSpread = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _wrapAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nvar _awaitAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _asyncIterator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar _asyncGeneratorDelegate = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate.js\").default;\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar configure = require('./lib/configure');\n\nvar toUrlSearchParams = require('./lib/to-url-search-params');\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {RootAPI[\"get\"]}\n   */\n  function get(_x) {\n    return _get.apply(this, arguments);\n  }\n\n  function _get() {\n    _get = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(path) {\n      var options,\n          opts,\n          res,\n          _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n\n              /** @type {Record<string, any>} */\n              opts = _objectSpread({\n                arg: \"\".concat(path instanceof Uint8Array ? CID.decode(path) : path)\n              }, options);\n\n              if (opts.compressionLevel) {\n                opts['compression-level'] = opts.compressionLevel;\n                delete opts.compressionLevel;\n              }\n\n              _context.next = 5;\n              return _awaitAsyncGenerator(api.post('get', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(opts),\n                headers: options.headers\n              }));\n\n            case 5:\n              res = _context.sent;\n              return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(res.iterator()), _awaitAsyncGenerator), \"t0\", 7);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _get.apply(this, arguments);\n  }\n\n  return get;\n});","map":{"version":3,"names":["require","CID","configure","toUrlSearchParams","module","exports","api","get","path","options","opts","arg","Uint8Array","decode","compressionLevel","post","signal","searchParams","headers","res","iterator"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-http-client/src/get.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('./lib/configure')\nconst toUrlSearchParams = require('./lib/to-url-search-params')\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {RootAPI[\"get\"]}\n   */\n  async function * get (path, options = {}) {\n    /** @type {Record<string, any>} */\n    const opts = {\n      arg: `${path instanceof Uint8Array ? CID.decode(path) : path}`,\n      ...options\n    }\n\n    if (opts.compressionLevel) {\n      opts['compression-level'] = opts.compressionLevel\n      delete opts.compressionLevel\n    }\n\n    const res = await api.post('get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(opts),\n      headers: options.headers\n    })\n\n    yield * res.iterator()\n  }\n\n  return get\n})\n"],"mappings":"AAAA;;;;;;;;;;;;;;AAEA,eAAgBA,OAAO,CAAC,kBAAD,CAAvB;AAAA,IAAQC,GAAR,YAAQA,GAAR;;AACA,IAAMC,SAAS,GAAGF,OAAO,CAAC,iBAAD,CAAzB;;AACA,IAAMG,iBAAiB,GAAGH,OAAO,CAAC,4BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAI,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAAC,UAAAI,GAAG,EAAI;EAChC;AACF;AACA;EAHkC,SAIfC,GAJe;IAAA;EAAA;;EAAA;IAAA,oEAIhC,iBAAsBC,IAAtB;MAAA;MAAA;MAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAA4BC,OAA5B,2DAAsC,EAAtC;;cACE;cACMC,IAFR;gBAGIC,GAAG,YAAKH,IAAI,YAAYI,UAAhB,GAA6BX,GAAG,CAACY,MAAJ,CAAWL,IAAX,CAA7B,GAAgDA,IAArD;cAHP,GAIOC,OAJP;;cAOE,IAAIC,IAAI,CAACI,gBAAT,EAA2B;gBACzBJ,IAAI,CAAC,mBAAD,CAAJ,GAA4BA,IAAI,CAACI,gBAAjC;gBACA,OAAOJ,IAAI,CAACI,gBAAZ;cACD;;cAVH;cAAA,4BAYoBR,GAAG,CAACS,IAAJ,CAAS,KAAT,EAAgB;gBAChCC,MAAM,EAAEP,OAAO,CAACO,MADgB;gBAEhCC,YAAY,EAAEd,iBAAiB,CAACO,IAAD,CAFC;gBAGhCQ,OAAO,EAAET,OAAO,CAACS;cAHe,CAAhB,CAZpB;;YAAA;cAYQC,GAZR;cAkBE,qEAAQA,GAAG,CAACC,QAAJ,EAAR;;YAlBF;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAJgC;IAAA;EAAA;;EAyBhC,OAAOb,GAAP;AACD,CA1ByB,CAA1B"},"metadata":{},"sourceType":"script"}