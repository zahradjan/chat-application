{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\n\nvar _slicedToArray = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar _createForOfIteratorHelper = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar SortedMap = require('../utils/sorted-map');\n/**\n * @typedef {Object} PopTaskResult\n * @property {PeerId} [peerId]\n * @property {Task[]} tasks\n * @property {number} pendingSize\n *\n * @typedef {Object} PendingTask\n * @property {number} created\n * @property {Task} task\n *\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('./types').Task} Task\n * @typedef {import('./types').TaskMerger} TaskMerger\n */\n\n/**\n * The task merger that is used by default.\n * Assumes that new tasks do not add any information over existing tasks,\n * and doesn't try to merge.\n *\n * @type {TaskMerger}\n */\n\n\nvar DefaultTaskMerger = {\n  hasNewInfo: function hasNewInfo() {\n    return false;\n  },\n  merge: function merge() {}\n};\n/**\n * Queue of requests to be processed by the engine.\n * The requests from each peer are added to the peer's queue, sorted by\n * priority.\n * Tasks are popped in priority order from the best peer - see popTasks()\n * for more details.\n */\n\nvar RequestQueue = /*#__PURE__*/function () {\n  /**\n   * @param {TaskMerger} [taskMerger]\n   */\n  function RequestQueue() {\n    var taskMerger = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DefaultTaskMerger;\n\n    _classCallCheck(this, RequestQueue);\n\n    this._taskMerger = taskMerger;\n    /** @type {SortedMap<string, PeerTasks>} */\n\n    this._byPeer = new SortedMap([], PeerTasks.compare);\n  }\n  /**\n   * Push tasks onto the queue for the given peer\n   *\n   * @param {PeerId} peerId\n   * @param {Task[]} tasks\n   * @returns {void}\n   */\n\n\n  _createClass(RequestQueue, [{\n    key: \"pushTasks\",\n    value: function pushTasks(peerId, tasks) {\n      var peerTasks = this._byPeer.get(peerId.toB58String());\n\n      if (!peerTasks) {\n        peerTasks = new PeerTasks(peerId, this._taskMerger);\n      }\n\n      peerTasks.pushTasks(tasks);\n\n      this._byPeer.set(peerId.toB58String(), peerTasks);\n    }\n    /**\n     * Choose the peer with the least active work (or if all have the same active\n     * work, the most pending tasks) and pop off the highest priority tasks until\n     * the total size is at least targetMinBytes.\n     * This puts the popped tasks into the \"active\" state, meaning they are\n     * actively being processed (and cannot be modified).\n     *\n     * @param {number} targetMinBytes - the minimum total size of tasks to pop\n     * @returns {PopTaskResult}\n     */\n\n  }, {\n    key: \"popTasks\",\n    value: function popTasks(targetMinBytes) {\n      // Get the queue of tasks for the best peer and pop off tasks up to\n      // targetMinBytes\n      var peerTasks = this._head();\n\n      if (peerTasks === undefined) {\n        return {\n          tasks: [],\n          pendingSize: 0\n        };\n      }\n\n      var _peerTasks$popTasks = peerTasks.popTasks(targetMinBytes),\n          tasks = _peerTasks$popTasks.tasks,\n          pendingSize = _peerTasks$popTasks.pendingSize;\n\n      if (tasks.length === 0) {\n        return {\n          tasks: tasks,\n          pendingSize: pendingSize\n        };\n      }\n\n      var peerId = peerTasks.peerId;\n\n      if (peerTasks.isIdle()) {\n        // If there are no more tasks for the peer, free up its memory\n        this._byPeer.delete(peerId.toB58String());\n      } else {\n        // If there are still tasks remaining, update the sort order of peerTasks\n        // (because it depends on the number of pending tasks)\n        this._byPeer.update(0);\n      }\n\n      return {\n        peerId: peerId,\n        tasks: tasks,\n        pendingSize: pendingSize\n      };\n    }\n    /**\n     * @private\n     * @returns {PeerTasks|undefined}\n     */\n\n  }, {\n    key: \"_head\",\n    value: function _head() {\n      // Shortcut\n      if (this._byPeer.size === 0) {\n        return undefined;\n      } // eslint-disable-next-line no-unreachable-loop\n\n\n      var _iterator = _createForOfIteratorHelper(this._byPeer),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              v = _step$value[1];\n\n          return v;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return undefined;\n    }\n    /**\n     * Remove the task with the given topic for the given peer.\n     *\n     * @param {string} topic\n     * @param {PeerId} peerId\n     * @returns {void}\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(topic, peerId) {\n      var peerTasks = this._byPeer.get(peerId.toB58String());\n\n      peerTasks && peerTasks.remove(topic);\n    }\n    /**\n     * Called when the tasks for the given peer complete.\n     *\n     * @param {PeerId} peerId\n     * @param {Task[]} tasks\n     * @returns {void}\n     */\n\n  }, {\n    key: \"tasksDone\",\n    value: function tasksDone(peerId, tasks) {\n      var peerTasks = this._byPeer.get(peerId.toB58String());\n\n      if (!peerTasks) {\n        return;\n      }\n\n      var i = this._byPeer.indexOf(peerId.toB58String());\n\n      var _iterator2 = _createForOfIteratorHelper(tasks),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var task = _step2.value;\n          peerTasks.taskDone(task);\n        } // Marking the tasks as done takes them out of the \"active\" state, and the\n        // sort order depends on the size of the active tasks, so we need to update\n        // the order.\n\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      this._byPeer.update(i);\n    }\n  }]);\n\n  return RequestQueue;\n}();\n/**\n * Queue of tasks for a particular peer, sorted by priority.\n */\n\n\nvar PeerTasks = /*#__PURE__*/function () {\n  /**\n   * @param {PeerId} peerId\n   * @param {TaskMerger} taskMerger\n   */\n  function PeerTasks(peerId, taskMerger) {\n    _classCallCheck(this, PeerTasks);\n\n    this.peerId = peerId;\n    this._taskMerger = taskMerger;\n    this._activeTotalSize = 0;\n    this._pending = new PendingTasks();\n    this._active = new Set();\n  }\n  /**\n   * Push tasks onto the queue.\n   *\n   * @param {Task[]} tasks\n   * @returns {void}\n   */\n\n\n  _createClass(PeerTasks, [{\n    key: \"pushTasks\",\n    value: function pushTasks(tasks) {\n      var _iterator3 = _createForOfIteratorHelper(tasks),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var t = _step3.value;\n\n          this._pushTask(t);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n    /**\n     * @private\n     * @param {Task} task\n     * @returns {void}\n     */\n\n  }, {\n    key: \"_pushTask\",\n    value: function _pushTask(task) {\n      // If the new task doesn't add any more information over what we\n      // already have in the active queue, then we can skip the new task\n      if (!this._taskHasMoreInfoThanActiveTasks(task)) {\n        return;\n      } // If there is already a non-active (pending) task with this topic\n\n\n      var existingTask = this._pending.get(task.topic);\n\n      if (existingTask) {\n        // If the new task has a higher priority than the old task,\n        if (task.priority > existingTask.priority) {\n          // Update the priority and the task's position in the queue\n          this._pending.updatePriority(task.topic, task.priority);\n        } // Merge the information from the new task into the existing task\n\n\n        this._taskMerger.merge(task, existingTask); // A task with the topic exists, so we don't need to add\n        // the new task to the queue\n\n\n        return;\n      } // Push the new task onto the queue\n\n\n      this._pending.add(task);\n    }\n    /**\n     * Indicates whether the new task adds any more information over tasks that are\n     * already in the active task queue\n     *\n     * @private\n     * @param {Task} task\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"_taskHasMoreInfoThanActiveTasks\",\n    value: function _taskHasMoreInfoThanActiveTasks(task) {\n      var tasksWithTopic = [];\n\n      var _iterator4 = _createForOfIteratorHelper(this._active),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var activeTask = _step4.value;\n\n          if (activeTask.topic === task.topic) {\n            tasksWithTopic.push(activeTask);\n          }\n        } // No tasks with that topic, so the new task adds information\n\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      if (tasksWithTopic.length === 0) {\n        return true;\n      }\n\n      return this._taskMerger.hasNewInfo(task, tasksWithTopic);\n    }\n    /**\n     * Pop tasks off the queue such that the total size is at least targetMinBytes\n     *\n     * @param {number} targetMinBytes\n     * @returns {PopTaskResult}\n     */\n\n  }, {\n    key: \"popTasks\",\n    value: function popTasks(targetMinBytes) {\n      var size = 0;\n      var tasks = []; // Keep popping tasks until we get up to targetMinBytes (or one item over\n      // targetMinBytes)\n\n      var pendingTasks = this._pending.tasks();\n\n      for (var i = 0; i < pendingTasks.length && size < targetMinBytes; i++) {\n        var task = pendingTasks[i];\n        tasks.push(task);\n        size += task.size; // Move tasks from pending to active\n\n        this._pending.delete(task.topic);\n\n        this._activeTotalSize += task.size;\n\n        this._active.add(task);\n      }\n\n      return {\n        tasks: tasks,\n        pendingSize: this._pending.totalSize\n      };\n    }\n    /**\n     * Called when a task completes.\n     * Note: must be the same reference as returned from popTasks.\n     *\n     * @param {Task} task\n     * @returns {void}\n     */\n\n  }, {\n    key: \"taskDone\",\n    value: function taskDone(task) {\n      if (this._active.has(task)) {\n        this._activeTotalSize -= task.size;\n\n        this._active.delete(task);\n      }\n    }\n    /**\n     * Remove pending tasks with the given topic\n     *\n     * @param {string} topic\n     * @returns {void}\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(topic) {\n      this._pending.delete(topic);\n    }\n    /**\n     * No work to be done, this PeerTasks object can be freed.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isIdle\",\n    value: function isIdle() {\n      return this._pending.length === 0 && this._active.size === 0;\n    }\n    /**\n     * Compare PeerTasks\n     *\n     * @template Key\n     * @param {[Key, PeerTasks]} a\n     * @param {[Key, PeerTasks]} b\n     * @returns {number}\n     */\n\n  }], [{\n    key: \"compare\",\n    value: function compare(a, b) {\n      // Move peers with no pending tasks to the back of the queue\n      if (a[1]._pending.length === 0) {\n        return 1;\n      }\n\n      if (b[1]._pending.length === 0) {\n        return -1;\n      } // If the amount of active work is the same\n\n\n      if (a[1]._activeTotalSize === b[1]._activeTotalSize) {\n        // Choose the peer with the most pending work\n        return b[1]._pending.length - a[1]._pending.length;\n      } // Choose the peer with the least amount of active work (\"keep peers busy\")\n\n\n      return a[1]._activeTotalSize - b[1]._activeTotalSize;\n    }\n  }]);\n\n  return PeerTasks;\n}();\n/**\n * Queue of pending tasks for a particular peer, sorted by priority.\n */\n\n\nvar PendingTasks = /*#__PURE__*/function () {\n  function PendingTasks() {\n    _classCallCheck(this, PendingTasks);\n\n    /** @type {SortedMap<string, PendingTask>} */\n    this._tasks = new SortedMap([], this._compare);\n  }\n\n  _createClass(PendingTasks, [{\n    key: \"length\",\n    get: function get() {\n      return this._tasks.size;\n    }\n    /**\n     * Sum of the size of all pending tasks\n     *\n     * @type {number}\n     **/\n\n  }, {\n    key: \"totalSize\",\n    get: function get() {\n      return _toConsumableArray(this._tasks.values()).reduce(function (a, t) {\n        return a + t.task.size;\n      }, 0);\n    }\n    /**\n     * @param {string} topic\n     * @returns {Task|void}\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(topic) {\n      return (this._tasks.get(topic) || {}).task;\n    }\n    /**\n     * @param {Task} task\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(task) {\n      this._tasks.set(task.topic, {\n        created: Date.now(),\n        task: task\n      });\n    }\n    /**\n     * @param {string} topic\n     * @returns {void}\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(topic) {\n      this._tasks.delete(topic);\n    } // All pending tasks, in priority order\n\n  }, {\n    key: \"tasks\",\n    value: function tasks() {\n      return _toConsumableArray(this._tasks.values()).map(function (i) {\n        return i.task;\n      });\n    }\n    /**\n     * Update the priority of the task with the given topic, and update the order\n     *\n     * @param {string} topic\n     * @param {number} priority\n     * @returns {void}\n     **/\n\n  }, {\n    key: \"updatePriority\",\n    value: function updatePriority(topic, priority) {\n      var obj = this._tasks.get(topic);\n\n      if (!obj) {\n        return;\n      }\n\n      var i = this._tasks.indexOf(topic);\n\n      obj.task.priority = priority;\n\n      this._tasks.update(i);\n    }\n    /**\n     * Sort by priority desc then FIFO\n     *\n     * @param {[string, PendingTask]} a\n     * @param {[string, PendingTask]} b\n     * @returns {number}\n     * @private\n     */\n\n  }, {\n    key: \"_compare\",\n    value: function _compare(a, b) {\n      if (a[1].task.priority === b[1].task.priority) {\n        // FIFO\n        return a[1].created - b[1].created;\n      } // Priority high -> low\n\n\n      return b[1].task.priority - a[1].task.priority;\n    }\n  }]);\n\n  return PendingTasks;\n}();\n\nmodule.exports = RequestQueue;","map":{"version":3,"names":["SortedMap","require","DefaultTaskMerger","hasNewInfo","merge","RequestQueue","taskMerger","_taskMerger","_byPeer","PeerTasks","compare","peerId","tasks","peerTasks","get","toB58String","pushTasks","set","targetMinBytes","_head","undefined","pendingSize","popTasks","length","isIdle","delete","update","size","v","topic","remove","i","indexOf","task","taskDone","_activeTotalSize","_pending","PendingTasks","_active","Set","t","_pushTask","_taskHasMoreInfoThanActiveTasks","existingTask","priority","updatePriority","add","tasksWithTopic","activeTask","push","pendingTasks","totalSize","has","a","b","_tasks","_compare","values","reduce","created","Date","now","map","obj","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-bitswap/src/decision-engine/req-queue.js"],"sourcesContent":["'use strict'\n\nconst SortedMap = require('../utils/sorted-map')\n\n/**\n * @typedef {Object} PopTaskResult\n * @property {PeerId} [peerId]\n * @property {Task[]} tasks\n * @property {number} pendingSize\n *\n * @typedef {Object} PendingTask\n * @property {number} created\n * @property {Task} task\n *\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('./types').Task} Task\n * @typedef {import('./types').TaskMerger} TaskMerger\n */\n\n/**\n * The task merger that is used by default.\n * Assumes that new tasks do not add any information over existing tasks,\n * and doesn't try to merge.\n *\n * @type {TaskMerger}\n */\nconst DefaultTaskMerger = {\n  hasNewInfo () {\n    return false\n  },\n\n  merge () {}\n}\n\n/**\n * Queue of requests to be processed by the engine.\n * The requests from each peer are added to the peer's queue, sorted by\n * priority.\n * Tasks are popped in priority order from the best peer - see popTasks()\n * for more details.\n */\nclass RequestQueue {\n  /**\n   * @param {TaskMerger} [taskMerger]\n   */\n  constructor (taskMerger = DefaultTaskMerger) {\n    this._taskMerger = taskMerger\n    /** @type {SortedMap<string, PeerTasks>} */\n    this._byPeer = new SortedMap([], PeerTasks.compare)\n  }\n\n  /**\n   * Push tasks onto the queue for the given peer\n   *\n   * @param {PeerId} peerId\n   * @param {Task[]} tasks\n   * @returns {void}\n   */\n  pushTasks (peerId, tasks) {\n    let peerTasks = this._byPeer.get(peerId.toB58String())\n\n    if (!peerTasks) {\n      peerTasks = new PeerTasks(peerId, this._taskMerger)\n    }\n\n    peerTasks.pushTasks(tasks)\n    this._byPeer.set(peerId.toB58String(), peerTasks)\n  }\n\n  /**\n   * Choose the peer with the least active work (or if all have the same active\n   * work, the most pending tasks) and pop off the highest priority tasks until\n   * the total size is at least targetMinBytes.\n   * This puts the popped tasks into the \"active\" state, meaning they are\n   * actively being processed (and cannot be modified).\n   *\n   * @param {number} targetMinBytes - the minimum total size of tasks to pop\n   * @returns {PopTaskResult}\n   */\n  popTasks (targetMinBytes) {\n    // Get the queue of tasks for the best peer and pop off tasks up to\n    // targetMinBytes\n    const peerTasks = this._head()\n    if (peerTasks === undefined) {\n      return { tasks: [], pendingSize: 0 }\n    }\n\n    const { tasks, pendingSize } = peerTasks.popTasks(targetMinBytes)\n    if (tasks.length === 0) {\n      return { tasks, pendingSize }\n    }\n\n    const peerId = peerTasks.peerId\n    if (peerTasks.isIdle()) {\n      // If there are no more tasks for the peer, free up its memory\n      this._byPeer.delete(peerId.toB58String())\n    } else {\n      // If there are still tasks remaining, update the sort order of peerTasks\n      // (because it depends on the number of pending tasks)\n      this._byPeer.update(0)\n    }\n\n    return {\n      peerId, tasks, pendingSize\n    }\n  }\n\n  /**\n   * @private\n   * @returns {PeerTasks|undefined}\n   */\n  _head () {\n    // Shortcut\n    if (this._byPeer.size === 0) {\n      return undefined\n    }\n\n    // eslint-disable-next-line no-unreachable-loop\n    for (const [, v] of this._byPeer) {\n      return v\n    }\n\n    return undefined\n  }\n\n  /**\n   * Remove the task with the given topic for the given peer.\n   *\n   * @param {string} topic\n   * @param {PeerId} peerId\n   * @returns {void}\n   */\n  remove (topic, peerId) {\n    const peerTasks = this._byPeer.get(peerId.toB58String())\n    peerTasks && peerTasks.remove(topic)\n  }\n\n  /**\n   * Called when the tasks for the given peer complete.\n   *\n   * @param {PeerId} peerId\n   * @param {Task[]} tasks\n   * @returns {void}\n   */\n  tasksDone (peerId, tasks) {\n    const peerTasks = this._byPeer.get(peerId.toB58String())\n    if (!peerTasks) {\n      return\n    }\n\n    const i = this._byPeer.indexOf(peerId.toB58String())\n    for (const task of tasks) {\n      peerTasks.taskDone(task)\n    }\n\n    // Marking the tasks as done takes them out of the \"active\" state, and the\n    // sort order depends on the size of the active tasks, so we need to update\n    // the order.\n    this._byPeer.update(i)\n  }\n}\n\n/**\n * Queue of tasks for a particular peer, sorted by priority.\n */\nclass PeerTasks {\n  /**\n   * @param {PeerId} peerId\n   * @param {TaskMerger} taskMerger\n   */\n  constructor (peerId, taskMerger) {\n    this.peerId = peerId\n    this._taskMerger = taskMerger\n    this._activeTotalSize = 0\n    this._pending = new PendingTasks()\n    this._active = new Set()\n  }\n\n  /**\n   * Push tasks onto the queue.\n   *\n   * @param {Task[]} tasks\n   * @returns {void}\n   */\n  pushTasks (tasks) {\n    for (const t of tasks) {\n      this._pushTask(t)\n    }\n  }\n\n  /**\n   * @private\n   * @param {Task} task\n   * @returns {void}\n   */\n\n  _pushTask (task) {\n    // If the new task doesn't add any more information over what we\n    // already have in the active queue, then we can skip the new task\n    if (!this._taskHasMoreInfoThanActiveTasks(task)) {\n      return\n    }\n\n    // If there is already a non-active (pending) task with this topic\n    const existingTask = this._pending.get(task.topic)\n    if (existingTask) {\n      // If the new task has a higher priority than the old task,\n      if (task.priority > existingTask.priority) {\n        // Update the priority and the task's position in the queue\n        this._pending.updatePriority(task.topic, task.priority)\n      }\n\n      // Merge the information from the new task into the existing task\n      this._taskMerger.merge(task, existingTask)\n\n      // A task with the topic exists, so we don't need to add\n      // the new task to the queue\n      return\n    }\n\n    // Push the new task onto the queue\n    this._pending.add(task)\n  }\n\n  /**\n   * Indicates whether the new task adds any more information over tasks that are\n   * already in the active task queue\n   *\n   * @private\n   * @param {Task} task\n   * @returns {boolean}\n   */\n  _taskHasMoreInfoThanActiveTasks (task) {\n    const tasksWithTopic = []\n    for (const activeTask of this._active) {\n      if (activeTask.topic === task.topic) {\n        tasksWithTopic.push(activeTask)\n      }\n    }\n\n    // No tasks with that topic, so the new task adds information\n    if (tasksWithTopic.length === 0) {\n      return true\n    }\n\n    return this._taskMerger.hasNewInfo(task, tasksWithTopic)\n  }\n\n  /**\n   * Pop tasks off the queue such that the total size is at least targetMinBytes\n   *\n   * @param {number} targetMinBytes\n   * @returns {PopTaskResult}\n   */\n  popTasks (targetMinBytes) {\n    let size = 0\n    const tasks = []\n\n    // Keep popping tasks until we get up to targetMinBytes (or one item over\n    // targetMinBytes)\n    const pendingTasks = this._pending.tasks()\n    for (let i = 0; i < pendingTasks.length && size < targetMinBytes; i++) {\n      const task = pendingTasks[i]\n      tasks.push(task)\n      size += task.size\n\n      // Move tasks from pending to active\n      this._pending.delete(task.topic)\n      this._activeTotalSize += task.size\n      this._active.add(task)\n    }\n\n    return {\n      tasks, pendingSize: this._pending.totalSize\n    }\n  }\n\n  /**\n   * Called when a task completes.\n   * Note: must be the same reference as returned from popTasks.\n   *\n   * @param {Task} task\n   * @returns {void}\n   */\n  taskDone (task) {\n    if (this._active.has(task)) {\n      this._activeTotalSize -= task.size\n      this._active.delete(task)\n    }\n  }\n\n  /**\n   * Remove pending tasks with the given topic\n   *\n   * @param {string} topic\n   * @returns {void}\n   */\n  remove (topic) {\n    this._pending.delete(topic)\n  }\n\n  /**\n   * No work to be done, this PeerTasks object can be freed.\n   *\n   * @returns {boolean}\n   */\n  isIdle () {\n    return this._pending.length === 0 && this._active.size === 0\n  }\n\n  /**\n   * Compare PeerTasks\n   *\n   * @template Key\n   * @param {[Key, PeerTasks]} a\n   * @param {[Key, PeerTasks]} b\n   * @returns {number}\n   */\n  static compare (a, b) {\n    // Move peers with no pending tasks to the back of the queue\n    if (a[1]._pending.length === 0) {\n      return 1\n    }\n    if (b[1]._pending.length === 0) {\n      return -1\n    }\n\n    // If the amount of active work is the same\n    if (a[1]._activeTotalSize === b[1]._activeTotalSize) {\n      // Choose the peer with the most pending work\n      return b[1]._pending.length - a[1]._pending.length\n    }\n\n    // Choose the peer with the least amount of active work (\"keep peers busy\")\n    return a[1]._activeTotalSize - b[1]._activeTotalSize\n  }\n}\n\n/**\n * Queue of pending tasks for a particular peer, sorted by priority.\n */\nclass PendingTasks {\n  constructor () {\n    /** @type {SortedMap<string, PendingTask>} */\n    this._tasks = new SortedMap([], this._compare)\n  }\n\n  get length () {\n    return this._tasks.size\n  }\n\n  /**\n   * Sum of the size of all pending tasks\n   *\n   * @type {number}\n   **/\n  get totalSize () {\n    return [...this._tasks.values()].reduce((a, t) => a + t.task.size, 0)\n  }\n\n  /**\n   * @param {string} topic\n   * @returns {Task|void}\n   */\n  get (topic) {\n    return (this._tasks.get(topic) || {}).task\n  }\n\n  /**\n   * @param {Task} task\n   */\n  add (task) {\n    this._tasks.set(task.topic, {\n      created: Date.now(),\n      task\n    })\n  }\n\n  /**\n   * @param {string} topic\n   * @returns {void}\n   */\n  delete (topic) {\n    this._tasks.delete(topic)\n  }\n\n  // All pending tasks, in priority order\n  tasks () {\n    return [...this._tasks.values()].map(i => i.task)\n  }\n\n  /**\n   * Update the priority of the task with the given topic, and update the order\n   *\n   * @param {string} topic\n   * @param {number} priority\n   * @returns {void}\n   **/\n  updatePriority (topic, priority) {\n    const obj = this._tasks.get(topic)\n    if (!obj) {\n      return\n    }\n\n    const i = this._tasks.indexOf(topic)\n    obj.task.priority = priority\n    this._tasks.update(i)\n  }\n\n  /**\n   * Sort by priority desc then FIFO\n   *\n   * @param {[string, PendingTask]} a\n   * @param {[string, PendingTask]} b\n   * @returns {number}\n   * @private\n   */\n  _compare (a, b) {\n    if (a[1].task.priority === b[1].task.priority) {\n      // FIFO\n      return a[1].created - b[1].created\n    }\n    // Priority high -> low\n    return b[1].task.priority - a[1].task.priority\n  }\n}\n\nmodule.exports = RequestQueue\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}