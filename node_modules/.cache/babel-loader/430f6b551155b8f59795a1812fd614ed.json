{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst log = Object.assign(debug('libp2p:peer-store:key-book'), {\n  error: debug('libp2p:peer-store:key-book:err')\n});\n\nconst errcode = require('err-code');\n\nconst PeerId = require('peer-id');\n\nconst Book = require('./book');\n\nconst {\n  codes: {\n    ERR_INVALID_PARAMETERS\n  }\n} = require('../errors');\n/**\n * @typedef {import('./')} PeerStore\n * @typedef {import('libp2p-crypto').PublicKey} PublicKey\n */\n\n/**\n * @extends {Book}\n */\n\n\nclass KeyBook extends Book {\n  /**\n   * The KeyBook is responsible for keeping the known public keys of a peer.\n   *\n   * @class\n   * @param {PeerStore} peerStore\n   */\n  constructor(peerStore) {\n    super({\n      peerStore,\n      eventName: 'change:pubkey',\n      eventProperty: 'pubkey',\n      eventTransformer: data => data.pubKey\n    });\n    /**\n     * Map known peers to their known Public Key.\n     *\n     * @type {Map<string, PeerId>}\n     */\n\n    this.data = new Map();\n  }\n  /**\n   * Set the Peer public key.\n   *\n   * @override\n   * @param {PeerId} peerId\n   * @param {PublicKey} publicKey\n   * @returns {KeyBook}\n   */\n\n\n  set(peerId, publicKey) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data');\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n    }\n\n    const id = peerId.toB58String();\n    const recPeerId = this.data.get(id); // If no record available, and this is valid\n\n    if (!recPeerId && publicKey) {\n      // This might be unecessary, but we want to store the PeerId\n      // to avoid an async operation when reconstructing the PeerId\n      peerId.pubKey = publicKey;\n\n      this._setData(peerId, peerId);\n\n      log(`stored provided public key for ${id}`);\n    }\n\n    return this;\n  }\n  /**\n   * Get Public key of the given PeerId, if stored.\n   *\n   * @override\n   * @param {PeerId} peerId\n   * @returns {PublicKey | undefined}\n   */\n\n\n  get(peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n    }\n\n    const rec = this.data.get(peerId.toB58String());\n    return rec ? rec.pubKey : undefined;\n  }\n\n}\n\nmodule.exports = KeyBook;","map":{"version":3,"names":["debug","require","log","Object","assign","error","errcode","PeerId","Book","codes","ERR_INVALID_PARAMETERS","KeyBook","constructor","peerStore","eventName","eventProperty","eventTransformer","data","pubKey","Map","set","peerId","publicKey","isPeerId","Error","id","toB58String","recPeerId","get","_setData","rec","undefined","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p/src/peer-store/key-book.js"],"sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = Object.assign(debug('libp2p:peer-store:key-book'), {\n  error: debug('libp2p:peer-store:key-book:err')\n})\nconst errcode = require('err-code')\n\nconst PeerId = require('peer-id')\n\nconst Book = require('./book')\n\nconst {\n  codes: { ERR_INVALID_PARAMETERS }\n} = require('../errors')\n\n/**\n * @typedef {import('./')} PeerStore\n * @typedef {import('libp2p-crypto').PublicKey} PublicKey\n */\n\n/**\n * @extends {Book}\n */\nclass KeyBook extends Book {\n  /**\n   * The KeyBook is responsible for keeping the known public keys of a peer.\n   *\n   * @class\n   * @param {PeerStore} peerStore\n   */\n  constructor (peerStore) {\n    super({\n      peerStore,\n      eventName: 'change:pubkey',\n      eventProperty: 'pubkey',\n      eventTransformer: (data) => data.pubKey\n    })\n\n    /**\n     * Map known peers to their known Public Key.\n     *\n     * @type {Map<string, PeerId>}\n     */\n    this.data = new Map()\n  }\n\n  /**\n   * Set the Peer public key.\n   *\n   * @override\n   * @param {PeerId} peerId\n   * @param {PublicKey} publicKey\n   * @returns {KeyBook}\n   */\n  set (peerId, publicKey) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data')\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    const id = peerId.toB58String()\n    const recPeerId = this.data.get(id)\n\n    // If no record available, and this is valid\n    if (!recPeerId && publicKey) {\n      // This might be unecessary, but we want to store the PeerId\n      // to avoid an async operation when reconstructing the PeerId\n      peerId.pubKey = publicKey\n\n      this._setData(peerId, peerId)\n      log(`stored provided public key for ${id}`)\n    }\n\n    return this\n  }\n\n  /**\n   * Get Public key of the given PeerId, if stored.\n   *\n   * @override\n   * @param {PeerId} peerId\n   * @returns {PublicKey | undefined}\n   */\n  get (peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    const rec = this.data.get(peerId.toB58String())\n\n    return rec ? rec.pubKey : undefined\n  }\n}\n\nmodule.exports = KeyBook\n"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,GAAG,GAAGC,MAAM,CAACC,MAAP,CAAcJ,KAAK,CAAC,4BAAD,CAAnB,EAAmD;EAC7DK,KAAK,EAAEL,KAAK,CAAC,gCAAD;AADiD,CAAnD,CAAZ;;AAGA,MAAMM,OAAO,GAAGL,OAAO,CAAC,UAAD,CAAvB;;AAEA,MAAMM,MAAM,GAAGN,OAAO,CAAC,SAAD,CAAtB;;AAEA,MAAMO,IAAI,GAAGP,OAAO,CAAC,QAAD,CAApB;;AAEA,MAAM;EACJQ,KAAK,EAAE;IAAEC;EAAF;AADH,IAEFT,OAAO,CAAC,WAAD,CAFX;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AACA,MAAMU,OAAN,SAAsBH,IAAtB,CAA2B;EACzB;AACF;AACA;AACA;AACA;AACA;EACEI,WAAW,CAAEC,SAAF,EAAa;IACtB,MAAM;MACJA,SADI;MAEJC,SAAS,EAAE,eAFP;MAGJC,aAAa,EAAE,QAHX;MAIJC,gBAAgB,EAAGC,IAAD,IAAUA,IAAI,CAACC;IAJ7B,CAAN;IAOA;AACJ;AACA;AACA;AACA;;IACI,KAAKD,IAAL,GAAY,IAAIE,GAAJ,EAAZ;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEC,GAAG,CAAEC,MAAF,EAAUC,SAAV,EAAqB;IACtB,IAAI,CAACf,MAAM,CAACgB,QAAP,CAAgBF,MAAhB,CAAL,EAA8B;MAC5BnB,GAAG,CAACG,KAAJ,CAAU,qDAAV;MACA,MAAMC,OAAO,CAAC,IAAIkB,KAAJ,CAAU,uCAAV,CAAD,EAAqDd,sBAArD,CAAb;IACD;;IAED,MAAMe,EAAE,GAAGJ,MAAM,CAACK,WAAP,EAAX;IACA,MAAMC,SAAS,GAAG,KAAKV,IAAL,CAAUW,GAAV,CAAcH,EAAd,CAAlB,CAPsB,CAStB;;IACA,IAAI,CAACE,SAAD,IAAcL,SAAlB,EAA6B;MAC3B;MACA;MACAD,MAAM,CAACH,MAAP,GAAgBI,SAAhB;;MAEA,KAAKO,QAAL,CAAcR,MAAd,EAAsBA,MAAtB;;MACAnB,GAAG,CAAE,kCAAiCuB,EAAG,EAAtC,CAAH;IACD;;IAED,OAAO,IAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACEG,GAAG,CAAEP,MAAF,EAAU;IACX,IAAI,CAACd,MAAM,CAACgB,QAAP,CAAgBF,MAAhB,CAAL,EAA8B;MAC5B,MAAMf,OAAO,CAAC,IAAIkB,KAAJ,CAAU,uCAAV,CAAD,EAAqDd,sBAArD,CAAb;IACD;;IAED,MAAMoB,GAAG,GAAG,KAAKb,IAAL,CAAUW,GAAV,CAAcP,MAAM,CAACK,WAAP,EAAd,CAAZ;IAEA,OAAOI,GAAG,GAAGA,GAAG,CAACZ,MAAP,GAAgBa,SAA1B;EACD;;AApEwB;;AAuE3BC,MAAM,CAACC,OAAP,GAAiBtB,OAAjB"},"metadata":{},"sourceType":"script"}