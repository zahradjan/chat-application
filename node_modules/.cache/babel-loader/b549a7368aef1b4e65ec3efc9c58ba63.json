{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar addAll = require('./add-all');\n\nvar last = require('it-last');\n\nvar configure = require('./lib/configure');\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n/**\n * @param {import('./types').Options} options\n */\n\n\nmodule.exports = function (options) {\n  var all = addAll(options);\n  return configure(function () {\n    /**\n     * @type {RootAPI[\"add\"]}\n     */\n    function add(_x) {\n      return _add.apply(this, arguments);\n    }\n\n    function _add() {\n      _add = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(input) {\n        var options,\n            _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n                _context.next = 3;\n                return last(all(input, options));\n\n              case 3:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _add.apply(this, arguments);\n    }\n\n    return add;\n  })(options);\n};","map":{"version":3,"names":["addAll","require","last","configure","module","exports","options","all","add","input"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-http-client/src/add.js"],"sourcesContent":["'use strict'\n\nconst addAll = require('./add-all')\nconst last = require('it-last')\nconst configure = require('./lib/configure')\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n/**\n * @param {import('./types').Options} options\n */\nmodule.exports = (options) => {\n  const all = addAll(options)\n  return configure(() => {\n    /**\n     * @type {RootAPI[\"add\"]}\n     */\n    async function add (input, options = {}) {\n      // @ts-ignore - last may return undefined if source is empty\n      return await last(all(input, options))\n    }\n    return add\n  })(options)\n}\n"],"mappings":"AAAA;;;;;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,SAAD,CAApB;;AACA,IAAME,SAAS,GAAGF,OAAO,CAAC,iBAAD,CAAzB;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AACAG,MAAM,CAACC,OAAP,GAAiB,UAACC,OAAD,EAAa;EAC5B,IAAMC,GAAG,GAAGP,MAAM,CAACM,OAAD,CAAlB;EACA,OAAOH,SAAS,CAAC,YAAM;IACrB;AACJ;AACA;IAHyB,SAINK,GAJM;MAAA;IAAA;;IAAA;MAAA,kEAIrB,iBAAoBC,KAApB;QAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAA2BH,OAA3B,2DAAqC,EAArC;gBAAA;gBAAA,OAEeJ,IAAI,CAACK,GAAG,CAACE,KAAD,EAAQH,OAAR,CAAJ,CAFnB;;cAAA;gBAAA;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAJqB;MAAA;IAAA;;IAQrB,OAAOE,GAAP;EACD,CATe,CAAT,CASJF,OATI,CAAP;AAUD,CAZD"},"metadata":{},"sourceType":"script"}