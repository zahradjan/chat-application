{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('libp2p/src/keychain')} config.keychain\n */\n\n\nmodule.exports = function (_ref) {\n  var keychain = _ref.keychain;\n\n  /**\n   * @type {import('ipfs-core-types/src/key').API[\"rename\"]}\n   */\n  var rename = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(oldName, newName) {\n      var key;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return keychain.renameKey(oldName, newName);\n\n            case 2:\n              key = _context.sent;\n              return _context.abrupt(\"return\", {\n                was: oldName,\n                now: key.name,\n                id: key.id,\n                overwrite: false\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function rename(_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return withTimeoutOption(rename);\n};","map":{"version":3,"names":["withTimeoutOption","require","module","exports","keychain","rename","oldName","newName","renameKey","key","was","now","name","id","overwrite"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/key/rename.js"],"sourcesContent":["'use strict'\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @param {Object} config\n * @param {import('libp2p/src/keychain')} config.keychain\n */\nmodule.exports = ({ keychain }) => {\n  /**\n   * @type {import('ipfs-core-types/src/key').API[\"rename\"]}\n   */\n  const rename = async (oldName, newName) => {\n    const key = await keychain.renameKey(oldName, newName)\n\n    return {\n      was: oldName,\n      now: key.name,\n      id: key.id,\n      overwrite: false\n    }\n  }\n\n  return withTimeoutOption(rename)\n}\n"],"mappings":"AAAA;;;;;;AAEA,IAAMA,iBAAiB,GAAGC,OAAO,CAAC,yCAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,gBAAkB;EAAA,IAAfC,QAAe,QAAfA,QAAe;;EACjC;AACF;AACA;EACE,IAAMC,MAAM;IAAA,uEAAG,iBAAOC,OAAP,EAAgBC,OAAhB;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,OACKH,QAAQ,CAACI,SAAT,CAAmBF,OAAnB,EAA4BC,OAA5B,CADL;;YAAA;cACPE,GADO;cAAA,iCAGN;gBACLC,GAAG,EAAEJ,OADA;gBAELK,GAAG,EAAEF,GAAG,CAACG,IAFJ;gBAGLC,EAAE,EAAEJ,GAAG,CAACI,EAHH;gBAILC,SAAS,EAAE;cAJN,CAHM;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAH;;IAAA,gBAANT,MAAM;MAAA;IAAA;EAAA,GAAZ;;EAWA,OAAOL,iBAAiB,CAACK,MAAD,CAAxB;AACD,CAhBD"},"metadata":{},"sourceType":"script"}