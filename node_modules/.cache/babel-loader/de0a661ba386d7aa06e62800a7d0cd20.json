{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar last = require('it-last');\n/**\n * @param {Object} context\n * @param {import('ipfs-core-types/src/root').API[\"addAll\"]} context.addAll\n */\n\n\nmodule.exports = function (_ref) {\n  var addAll = _ref.addAll;\n\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"add\"]}\n   */\n  function add(_x) {\n    return _add.apply(this, arguments);\n  }\n\n  function _add() {\n    _add = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(entry) {\n      var options,\n          result,\n          _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _context.next = 3;\n              return last(addAll(entry, options));\n\n            case 3:\n              result = _context.sent;\n\n              if (!(result == null)) {\n                _context.next = 6;\n                break;\n              }\n\n              throw Error('Failed to add a file, if you see this please report a bug');\n\n            case 6:\n              return _context.abrupt(\"return\", result);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _add.apply(this, arguments);\n  }\n\n  return add;\n};","map":{"version":3,"names":["last","require","module","exports","addAll","add","entry","options","result","Error"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/add.js"],"sourcesContent":["'use strict'\n\nconst last = require('it-last')\n\n/**\n * @param {Object} context\n * @param {import('ipfs-core-types/src/root').API[\"addAll\"]} context.addAll\n */\nmodule.exports = ({ addAll }) => {\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"add\"]}\n   */\n  async function add (entry, options = {}) {\n    // @ts-ignore TODO: https://github.com/ipfs/js-ipfs/issues/3290\n    const result = await last(addAll(entry, options))\n    // Note this should never happen as `addAll` should yield at least one item\n    // but to satisfy type checker we perfom this check and for good measure\n    // throw an error in case it does happen.\n    if (result == null) {\n      throw Error('Failed to add a file, if you see this please report a bug')\n    }\n\n    return result\n  }\n\n  return add\n}\n"],"mappings":"AAAA;;;;;;AAEA,IAAMA,IAAI,GAAGC,OAAO,CAAC,SAAD,CAApB;AAEA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,gBAAgB;EAAA,IAAbC,MAAa,QAAbA,MAAa;;EAC/B;AACF;AACA;EAHiC,SAIhBC,GAJgB;IAAA;EAAA;;EAAA;IAAA,kEAI/B,iBAAoBC,KAApB;MAAA;MAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAA2BC,OAA3B,2DAAqC,EAArC;cAAA;cAAA,OAEuBP,IAAI,CAACI,MAAM,CAACE,KAAD,EAAQC,OAAR,CAAP,CAF3B;;YAAA;cAEQC,MAFR;;cAAA,MAMMA,MAAM,IAAI,IANhB;gBAAA;gBAAA;cAAA;;cAAA,MAOUC,KAAK,CAAC,2DAAD,CAPf;;YAAA;cAAA,iCAUSD,MAVT;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAJ+B;IAAA;EAAA;;EAiB/B,OAAOH,GAAP;AACD,CAlBD"},"metadata":{},"sourceType":"script"}