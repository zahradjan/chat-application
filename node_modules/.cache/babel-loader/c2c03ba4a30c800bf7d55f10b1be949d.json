{"ast":null,"code":"'use strict'; // @ts-ignore libp2p crypto has no types\n\nvar _createForOfIteratorHelper = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar randomBytes = require('libp2p-crypto/src/random-bytes');\n\nvar _require = require('uint8arrays/to-string'),\n    uint8ArrayToString = _require.toString;\n\nvar _require2 = require('uint8arrays/from-string'),\n    uint8ArrayFromString = _require2.fromString;\n\nvar PeerId = require('peer-id');\n\nvar _require3 = require('multiformats/hashes/sha2'),\n    sha256 = _require3.sha256;\n/**\n * @typedef {import('./message/rpc').RPC.IMessage} IMessage\n * @typedef {import('./message/rpc').RPC.Message} Message\n * @typedef {import('.').InMessage} NormalizedIMessage\n */\n\n/**\n * Generatea random sequence number.\n *\n * @returns {Uint8Array}\n * @private\n */\n\n\nvar randomSeqno = function randomSeqno() {\n  return randomBytes(8);\n};\n/**\n * Generate a message id, based on the `from` and `seqno`.\n *\n * @param {Uint8Array|string} from\n * @param {Uint8Array} seqno\n * @returns {Uint8Array}\n * @private\n */\n\n\nvar msgId = function msgId(from, seqno) {\n  var fromBytes;\n\n  if (from instanceof Uint8Array) {\n    fromBytes = PeerId.createFromBytes(from).id;\n  } else {\n    fromBytes = PeerId.parse(from).id;\n  }\n\n  var msgId = new Uint8Array(fromBytes.length + seqno.length);\n  msgId.set(fromBytes, 0);\n  msgId.set(seqno, fromBytes.length);\n  return msgId;\n};\n/**\n * Generate a message id, based on message `data`.\n *\n * @param {Uint8Array} data\n * @private\n */\n\n\nvar noSignMsgId = function noSignMsgId(data) {\n  return sha256.encode(data);\n};\n/**\n * Check if any member of the first set is also a member\n * of the second set.\n *\n * @param {Set<number>|Array<number>} a\n * @param {Set<number>|Array<number>} b\n * @returns {boolean}\n * @private\n */\n\n\nvar anyMatch = function anyMatch(a, b) {\n  var bHas;\n\n  if (Array.isArray(b)) {\n    /**\n     * @param {number} val\n     */\n    bHas = function bHas(val) {\n      return b.indexOf(val) > -1;\n    };\n  } else {\n    /**\n     * @param {number} val\n     */\n    bHas = function bHas(val) {\n      return b.has(val);\n    };\n  }\n\n  var _iterator = _createForOfIteratorHelper(a),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var val = _step.value;\n\n      if (bHas(val)) {\n        return true;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return false;\n};\n/**\n * Make everything an array.\n *\n * @template T\n * @param {T|T[]} maybeArray\n * @returns {T[]}\n * @private\n */\n\n\nvar ensureArray = function ensureArray(maybeArray) {\n  if (!Array.isArray(maybeArray)) {\n    return [maybeArray];\n  }\n\n  return maybeArray;\n};\n/**\n * Ensures `message.from` is base58 encoded\n *\n * @template {{from?:any}} T\n * @param {T & IMessage} message\n * @param {string} [peerId]\n * @returns {NormalizedIMessage}\n */\n\n\nvar normalizeInRpcMessage = function normalizeInRpcMessage(message, peerId) {\n  /** @type {NormalizedIMessage} */\n  // @ts-ignore receivedFrom not yet defined\n  var m = Object.assign({}, message);\n\n  if (message.from instanceof Uint8Array) {\n    m.from = uint8ArrayToString(message.from, 'base58btc');\n  }\n\n  if (peerId) {\n    m.receivedFrom = peerId;\n  }\n\n  return m;\n};\n/**\n * @template {{from?:any, data?:any}} T\n *\n * @param {T & NormalizedIMessage} message\n * @returns {Message}\n */\n\n\nvar normalizeOutRpcMessage = function normalizeOutRpcMessage(message) {\n  /** @type {Message} */\n  // @ts-ignore from not yet defined\n  var m = Object.assign({}, message);\n\n  if (typeof message.from === 'string') {\n    m.from = uint8ArrayFromString(message.from, 'base58btc');\n  }\n\n  if (typeof message.data === 'string') {\n    m.data = uint8ArrayFromString(message.data);\n  }\n\n  return m;\n};\n\nmodule.exports = {\n  randomSeqno: randomSeqno,\n  msgId: msgId,\n  noSignMsgId: noSignMsgId,\n  anyMatch: anyMatch,\n  ensureArray: ensureArray,\n  normalizeInRpcMessage: normalizeInRpcMessage,\n  normalizeOutRpcMessage: normalizeOutRpcMessage\n};","map":{"version":3,"names":["randomBytes","require","uint8ArrayToString","toString","uint8ArrayFromString","fromString","PeerId","sha256","randomSeqno","msgId","from","seqno","fromBytes","Uint8Array","createFromBytes","id","parse","length","set","noSignMsgId","data","encode","anyMatch","a","b","bHas","Array","isArray","val","indexOf","has","ensureArray","maybeArray","normalizeInRpcMessage","message","peerId","m","Object","assign","receivedFrom","normalizeOutRpcMessage","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-interfaces/src/pubsub/utils.js"],"sourcesContent":["'use strict'\n\n// @ts-ignore libp2p crypto has no types\nconst randomBytes = require('libp2p-crypto/src/random-bytes')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\nconst PeerId = require('peer-id')\nconst { sha256 } = require('multiformats/hashes/sha2')\n\n/**\n * @typedef {import('./message/rpc').RPC.IMessage} IMessage\n * @typedef {import('./message/rpc').RPC.Message} Message\n * @typedef {import('.').InMessage} NormalizedIMessage\n */\n\n/**\n * Generatea random sequence number.\n *\n * @returns {Uint8Array}\n * @private\n */\nconst randomSeqno = () => {\n  return randomBytes(8)\n}\n\n/**\n * Generate a message id, based on the `from` and `seqno`.\n *\n * @param {Uint8Array|string} from\n * @param {Uint8Array} seqno\n * @returns {Uint8Array}\n * @private\n */\nconst msgId = (from, seqno) => {\n  let fromBytes\n\n  if (from instanceof Uint8Array) {\n    fromBytes = PeerId.createFromBytes(from).id\n  } else {\n    fromBytes = PeerId.parse(from).id\n  }\n\n  const msgId = new Uint8Array(fromBytes.length + seqno.length)\n  msgId.set(fromBytes, 0)\n  msgId.set(seqno, fromBytes.length)\n  return msgId\n}\n\n/**\n * Generate a message id, based on message `data`.\n *\n * @param {Uint8Array} data\n * @private\n */\nconst noSignMsgId = (data) => sha256.encode(data)\n\n/**\n * Check if any member of the first set is also a member\n * of the second set.\n *\n * @param {Set<number>|Array<number>} a\n * @param {Set<number>|Array<number>} b\n * @returns {boolean}\n * @private\n */\nconst anyMatch = (a, b) => {\n  let bHas\n  if (Array.isArray(b)) {\n    /**\n     * @param {number} val\n     */\n    bHas = (val) => b.indexOf(val) > -1\n  } else {\n    /**\n     * @param {number} val\n     */\n    bHas = (val) => b.has(val)\n  }\n\n  for (const val of a) {\n    if (bHas(val)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Make everything an array.\n *\n * @template T\n * @param {T|T[]} maybeArray\n * @returns {T[]}\n * @private\n */\nconst ensureArray = (maybeArray) => {\n  if (!Array.isArray(maybeArray)) {\n    return [maybeArray]\n  }\n\n  return maybeArray\n}\n\n/**\n * Ensures `message.from` is base58 encoded\n *\n * @template {{from?:any}} T\n * @param {T & IMessage} message\n * @param {string} [peerId]\n * @returns {NormalizedIMessage}\n */\nconst normalizeInRpcMessage = (message, peerId) => {\n  /** @type {NormalizedIMessage} */\n  // @ts-ignore receivedFrom not yet defined\n  const m = Object.assign({}, message)\n  if (message.from instanceof Uint8Array) {\n    m.from = uint8ArrayToString(message.from, 'base58btc')\n  }\n  if (peerId) {\n    m.receivedFrom = peerId\n  }\n  return m\n}\n\n/**\n * @template {{from?:any, data?:any}} T\n *\n * @param {T & NormalizedIMessage} message\n * @returns {Message}\n */\nconst normalizeOutRpcMessage = (message) => {\n  /** @type {Message} */\n  // @ts-ignore from not yet defined\n  const m = Object.assign({}, message)\n  if (typeof message.from === 'string') {\n    m.from = uint8ArrayFromString(message.from, 'base58btc')\n  }\n  if (typeof message.data === 'string') {\n    m.data = uint8ArrayFromString(message.data)\n  }\n  return m\n}\n\nmodule.exports = {\n  randomSeqno,\n  msgId,\n  noSignMsgId,\n  anyMatch,\n  ensureArray,\n  normalizeInRpcMessage,\n  normalizeOutRpcMessage\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}