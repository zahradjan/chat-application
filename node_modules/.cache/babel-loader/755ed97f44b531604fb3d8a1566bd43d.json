{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _asyncIterator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar log = require('debug')('ipfs:mfs:utils:update-tree');\n\nvar addLink = require('./add-link');\n\nvar _require = require('@ipld/dag-pb'),\n    decode = _require.decode;\n\nvar defaultOptions = {\n  shardSplitThreshold: 1000\n};\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('multiformats/cid').CIDVersion} CIDVersion\n * @typedef {import('../').MfsContext} MfsContext\n * @typedef {import('./to-trail').MfsTrail} MfsTrail\n */\n\n/**\n * Loop backwards through the trail, replacing links of all components to update CIDs\n *\n * @param {MfsContext} context\n * @param {MfsTrail[]} trail\n * @param {object} options\n * @param {number} options.shardSplitThreshold\n * @param {string} options.hashAlg\n * @param {CIDVersion} options.cidVersion\n * @param {boolean} options.flush\n */\n\nvar updateTree = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(context, trail, options) {\n    var index, child, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, block, node, _cid, name, result, _child, cid;\n\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = Object.assign({}, defaultOptions, options);\n            log('Trail', trail);\n            trail = trail.slice().reverse();\n            index = 0;\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context.prev = 6;\n            _iterator = _asyncIterator(context.repo.blocks.getMany(trail.map(function (node) {\n              return node.cid;\n            })));\n\n          case 8:\n            _context.next = 10;\n            return _iterator.next();\n\n          case 10:\n            if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n              _context.next = 26;\n              break;\n            }\n\n            block = _step.value;\n            node = decode(block);\n            _cid = trail[index].cid;\n            name = trail[index].name;\n            index++;\n\n            if (child) {\n              _context.next = 19;\n              break;\n            }\n\n            child = {\n              cid: _cid,\n              name: name,\n              size: block.length\n            };\n            return _context.abrupt(\"continue\", 23);\n\n          case 19:\n            _context.next = 21;\n            return addLink(context, {\n              parent: node,\n              name: child.name,\n              cid: child.cid,\n              // TODO vmx 2021-04-05: check what to do with the size\n              size: child.size,\n              flush: options.flush,\n              shardSplitThreshold: options.shardSplitThreshold,\n              hashAlg: options.hashAlg,\n              cidVersion: options.cidVersion\n            });\n\n          case 21:\n            result = _context.sent;\n            // new child for next loop\n            child = {\n              cid: result.cid,\n              name: name,\n              // TODO vmx 2021-04-05: check what to do with the size\n              size: result.size\n            };\n\n          case 23:\n            _iteratorAbruptCompletion = false;\n            _context.next = 8;\n            break;\n\n          case 26:\n            _context.next = 32;\n            break;\n\n          case 28:\n            _context.prev = 28;\n            _context.t0 = _context[\"catch\"](6);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 32:\n            _context.prev = 32;\n            _context.prev = 33;\n\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context.next = 37;\n              break;\n            }\n\n            _context.next = 37;\n            return _iterator.return();\n\n          case 37:\n            _context.prev = 37;\n\n            if (!_didIteratorError) {\n              _context.next = 40;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 40:\n            return _context.finish(37);\n\n          case 41:\n            return _context.finish(32);\n\n          case 42:\n            // @ts-ignore - child is possibly undefined\n            _child = child, cid = _child.cid;\n            log(\"Final CID \".concat(cid));\n            return _context.abrupt(\"return\", cid);\n\n          case 45:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[6, 28, 32, 42], [33,, 37, 41]]);\n  }));\n\n  return function updateTree(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = updateTree;","map":{"version":3,"names":["log","require","addLink","decode","defaultOptions","shardSplitThreshold","updateTree","context","trail","options","Object","assign","slice","reverse","index","repo","blocks","getMany","map","node","cid","block","name","child","size","length","parent","flush","hashAlg","cidVersion","result","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/files/utils/update-tree.js"],"sourcesContent":["'use strict'\n\nconst log = require('debug')('ipfs:mfs:utils:update-tree')\nconst addLink = require('./add-link')\nconst {\n  decode\n} = require('@ipld/dag-pb')\n\nconst defaultOptions = {\n  shardSplitThreshold: 1000\n}\n\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('multiformats/cid').CIDVersion} CIDVersion\n * @typedef {import('../').MfsContext} MfsContext\n * @typedef {import('./to-trail').MfsTrail} MfsTrail\n */\n\n/**\n * Loop backwards through the trail, replacing links of all components to update CIDs\n *\n * @param {MfsContext} context\n * @param {MfsTrail[]} trail\n * @param {object} options\n * @param {number} options.shardSplitThreshold\n * @param {string} options.hashAlg\n * @param {CIDVersion} options.cidVersion\n * @param {boolean} options.flush\n */\nconst updateTree = async (context, trail, options) => {\n  options = Object.assign({}, defaultOptions, options)\n\n  log('Trail', trail)\n  trail = trail.slice().reverse()\n\n  let index = 0\n  let child\n\n  for await (const block of context.repo.blocks.getMany(trail.map(node => node.cid))) {\n    const node = decode(block)\n    const cid = trail[index].cid\n    const name = trail[index].name\n    index++\n\n    if (!child) {\n      child = {\n        cid,\n        name,\n        size: block.length\n      }\n\n      continue\n    }\n\n    /** @type {{ cid: CID, size: number }} */\n    const result = await addLink(context, {\n      parent: node,\n      name: child.name,\n      cid: child.cid,\n      // TODO vmx 2021-04-05: check what to do with the size\n      size: child.size,\n      flush: options.flush,\n      shardSplitThreshold: options.shardSplitThreshold,\n      hashAlg: options.hashAlg,\n      cidVersion: options.cidVersion\n    })\n\n    // new child for next loop\n    child = {\n      cid: result.cid,\n      name,\n      // TODO vmx 2021-04-05: check what to do with the size\n      size: result.size\n    }\n  }\n\n  // @ts-ignore - child is possibly undefined\n  const { cid } = child\n  log(`Final CID ${cid}`)\n\n  return cid\n}\n\nmodule.exports = updateTree\n"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,4BAAjB,CAAZ;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,YAAD,CAAvB;;AACA,eAEIA,OAAO,CAAC,cAAD,CAFX;AAAA,IACEE,MADF,YACEA,MADF;;AAIA,IAAMC,cAAc,GAAG;EACrBC,mBAAmB,EAAE;AADA,CAAvB;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,UAAU;EAAA,sEAAG,iBAAOC,OAAP,EAAgBC,KAAhB,EAAuBC,OAAvB;IAAA;;IAAA;MAAA;QAAA;UAAA;YACjBA,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,cAAlB,EAAkCK,OAAlC,CAAV;YAEAT,GAAG,CAAC,OAAD,EAAUQ,KAAV,CAAH;YACAA,KAAK,GAAGA,KAAK,CAACI,KAAN,GAAcC,OAAd,EAAR;YAEIC,KANa,GAML,CANK;YAAA;YAAA;YAAA;YAAA,2BASSP,OAAO,CAACQ,IAAR,CAAaC,MAAb,CAAoBC,OAApB,CAA4BT,KAAK,CAACU,GAAN,CAAU,UAAAC,IAAI;cAAA,OAAIA,IAAI,CAACC,GAAT;YAAA,CAAd,CAA5B,CATT;;UAAA;YAAA;YAAA;;UAAA;YAAA;cAAA;cAAA;YAAA;;YASAC,KATA;YAUTF,IAVS,GAUFhB,MAAM,CAACkB,KAAD,CAVJ;YAWTD,IAXS,GAWHZ,KAAK,CAACM,KAAD,CAAL,CAAaM,GAXV;YAYTE,IAZS,GAYFd,KAAK,CAACM,KAAD,CAAL,CAAaQ,IAZX;YAafR,KAAK;;YAbU,IAeVS,KAfU;cAAA;cAAA;YAAA;;YAgBbA,KAAK,GAAG;cACNH,GAAG,EAAHA,IADM;cAENE,IAAI,EAAJA,IAFM;cAGNE,IAAI,EAAEH,KAAK,CAACI;YAHN,CAAR;YAhBa;;UAAA;YAAA;YAAA,OA0BMvB,OAAO,CAACK,OAAD,EAAU;cACpCmB,MAAM,EAAEP,IAD4B;cAEpCG,IAAI,EAAEC,KAAK,CAACD,IAFwB;cAGpCF,GAAG,EAAEG,KAAK,CAACH,GAHyB;cAIpC;cACAI,IAAI,EAAED,KAAK,CAACC,IALwB;cAMpCG,KAAK,EAAElB,OAAO,CAACkB,KANqB;cAOpCtB,mBAAmB,EAAEI,OAAO,CAACJ,mBAPO;cAQpCuB,OAAO,EAAEnB,OAAO,CAACmB,OARmB;cASpCC,UAAU,EAAEpB,OAAO,CAACoB;YATgB,CAAV,CA1Bb;;UAAA;YA0BTC,MA1BS;YAsCf;YACAP,KAAK,GAAG;cACNH,GAAG,EAAEU,MAAM,CAACV,GADN;cAENE,IAAI,EAAJA,IAFM;cAGN;cACAE,IAAI,EAAEM,MAAM,CAACN;YAJP,CAAR;;UAvCe;YAAA;YAAA;YAAA;;UAAA;YAAA;YAAA;;UAAA;YAAA;YAAA;YAAA;YAAA;;UAAA;YAAA;YAAA;;YAAA;cAAA;cAAA;YAAA;;YAAA;YAAA;;UAAA;YAAA;;YAAA;cAAA;cAAA;YAAA;;YAAA;;UAAA;YAAA;;UAAA;YAAA;;UAAA;YA+CjB;YA/CiB,SAgDDD,KAhDC,EAgDTH,GAhDS,UAgDTA,GAhDS;YAiDjBpB,GAAG,qBAAcoB,GAAd,EAAH;YAjDiB,iCAmDVA,GAnDU;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAH;;EAAA,gBAAVd,UAAU;IAAA;EAAA;AAAA,GAAhB;;AAsDAyB,MAAM,CAACC,OAAP,GAAiB1B,UAAjB"},"metadata":{},"sourceType":"script"}