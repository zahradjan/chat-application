{"ast":null,"code":"// @ts-nocheck\n'use strict';\n/**\n * This code is based on `latency-monitor` (https://github.com/mlucool/latency-monitor) by `mlucool` (https://github.com/mlucool), available under Apache License 2.0 (https://github.com/mlucool/latency-monitor/blob/master/LICENSE)\n */\n\nconst {\n  EventEmitter\n} = require('events');\n\nconst VisibilityChangeEmitter = require('./visibility-change-emitter');\n\nconst debug = require('debug')('latency-monitor:LatencyMonitor');\n/**\n * @typedef {Object} SummaryObject\n * @property {number} events How many events were called\n * @property {number} minMS What was the min time for a cb to be called\n * @property {number} maxMS What was the max time for a cb to be called\n * @property {number} avgMs What was the average time for a cb to be called\n * @property {number} lengthMs How long this interval was in ms\n *\n * @typedef {Object} LatencyMonitorOptions\n * @property {number} [latencyCheckIntervalMs=500] - How often to add a latency check event (ms)\n * @property {number} [dataEmitIntervalMs=5000] - How often to summarize latency check events. null or 0 disables event firing\n * @property {Function} [asyncTestFn] - What cb-style async function to use\n * @property {number} [latencyRandomPercentage=5] - What percent (+/-) of latencyCheckIntervalMs should we randomly use? This helps avoid alignment to other events.\n */\n\n/**\n * A class to monitor latency of any async function which works in a browser or node. This works by periodically calling\n * the asyncTestFn and timing how long it takes the callback to be called. It can also periodically emit stats about this.\n * This can be disabled and stats can be pulled via setting dataEmitIntervalMs = 0.\n *\n * @extends {EventEmitter}\n *\n * The default implementation is an event loop latency monitor. This works by firing periodic events into the event loop\n * and timing how long it takes to get back.\n *\n * @example\n * const monitor = new LatencyMonitor();\n * monitor.on('data', (summary) => console.log('Event Loop Latency: %O', summary));\n *\n * @example\n * const monitor = new LatencyMonitor({latencyCheckIntervalMs: 1000, dataEmitIntervalMs: 60000, asyncTestFn:ping});\n * monitor.on('data', (summary) => console.log('Ping Pong Latency: %O', summary));\n */\n\n\nclass LatencyMonitor extends EventEmitter {\n  /**\n   * @class\n   * @param {LatencyMonitorOptions} [options]\n   */\n  constructor() {\n    let {\n      latencyCheckIntervalMs,\n      dataEmitIntervalMs,\n      asyncTestFn,\n      latencyRandomPercentage\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    const that = this; // 0 isn't valid here, so its ok to use ||\n\n    that.latencyCheckIntervalMs = latencyCheckIntervalMs || 500; // 0.5s\n\n    that.latencyRandomPercentage = latencyRandomPercentage || 10;\n    that._latecyCheckMultiply = 2 * (that.latencyRandomPercentage / 100.0) * that.latencyCheckIntervalMs;\n    that._latecyCheckSubtract = that._latecyCheckMultiply / 2;\n    that.dataEmitIntervalMs = dataEmitIntervalMs === null || dataEmitIntervalMs === 0 ? undefined : dataEmitIntervalMs || 5 * 1000; // 5s\n\n    debug('latencyCheckIntervalMs: %s dataEmitIntervalMs: %s', that.latencyCheckIntervalMs, that.dataEmitIntervalMs);\n\n    if (that.dataEmitIntervalMs) {\n      debug('Expecting ~%s events per summary', that.latencyCheckIntervalMs / that.dataEmitIntervalMs);\n    } else {\n      debug('Not emitting summaries');\n    }\n\n    that.asyncTestFn = asyncTestFn; // If there is no asyncFn, we measure latency\n  }\n\n  start() {\n    // If process: use high resolution timer\n    if (globalThis.process && globalThis.process.hrtime) {\n      // eslint-disable-line no-undef\n      debug('Using process.hrtime for timing');\n      this.now = globalThis.process.hrtime; // eslint-disable-line no-undef\n\n      this.getDeltaMS = startTime => {\n        const hrtime = this.now(startTime);\n        return hrtime[0] * 1000 + hrtime[1] / 1000000;\n      }; // Let's try for a timer that only monotonically increases\n\n    } else if (typeof window !== 'undefined' && window.performance && window.performance.now) {\n      debug('Using performance.now for timing');\n      this.now = window.performance.now.bind(window.performance);\n\n      this.getDeltaMS = startTime => Math.round(this.now() - startTime);\n    } else {\n      debug('Using Date.now for timing');\n      this.now = Date.now;\n\n      this.getDeltaMS = startTime => this.now() - startTime;\n    }\n\n    this._latencyData = this._initLatencyData(); // We check for isBrowser because of browsers set max rates of timeouts when a page is hidden,\n    // so we fall back to another library\n    // See: http://stackoverflow.com/questions/6032429/chrome-timeouts-interval-suspended-in-background-tabs\n\n    if (isBrowser()) {\n      this._visibilityChangeEmitter = new VisibilityChangeEmitter();\n\n      this._visibilityChangeEmitter.on('visibilityChange', pageInFocus => {\n        if (pageInFocus) {\n          this._startTimers();\n        } else {\n          this._emitSummary();\n\n          this._stopTimers();\n        }\n      });\n    }\n\n    if (!this._visibilityChangeEmitter || this._visibilityChangeEmitter.isVisible()) {\n      this._startTimers();\n    }\n  }\n\n  stop() {\n    this._stopTimers();\n  }\n  /**\n   * Start internal timers\n   *\n   * @private\n   */\n\n\n  _startTimers() {\n    // Timer already started, ignore this\n    if (this._checkLatencyID) {\n      return;\n    }\n\n    this._checkLatency();\n\n    if (this.dataEmitIntervalMs) {\n      this._emitIntervalID = setInterval(() => this._emitSummary(), this.dataEmitIntervalMs);\n\n      if (typeof this._emitIntervalID.unref === 'function') {\n        this._emitIntervalID.unref(); // Doesn't block exit\n\n      }\n    }\n  }\n  /**\n   * Stop internal timers\n   *\n   * @private\n   */\n\n\n  _stopTimers() {\n    if (this._checkLatencyID) {\n      clearTimeout(this._checkLatencyID);\n      this._checkLatencyID = undefined;\n    }\n\n    if (this._emitIntervalID) {\n      clearInterval(this._emitIntervalID);\n      this._emitIntervalID = undefined;\n    }\n  }\n  /**\n   * Emit summary only if there were events. It might not have any events if it was forced via a page hidden/show\n   *\n   * @private\n   */\n\n\n  _emitSummary() {\n    const summary = this.getSummary();\n\n    if (summary.events > 0) {\n      this.emit('data', summary);\n    }\n  }\n  /**\n   * Calling this function will end the collection period. If a timing event was already fired and somewhere in the queue,\n   * it will not count for this time period\n   *\n   * @returns {SummaryObject}\n   */\n\n\n  getSummary() {\n    // We might want to adjust for the number of expected events\n    // Example: first 1 event it comes back, then such a long blocker that the next emit check comes\n    // Then this fires - looks like no latency!!\n    const latency = {\n      events: this._latencyData.events,\n      minMs: this._latencyData.minMs,\n      maxMs: this._latencyData.maxMs,\n      avgMs: this._latencyData.events ? this._latencyData.totalMs / this._latencyData.events : Number.POSITIVE_INFINITY,\n      lengthMs: this.getDeltaMS(this._latencyData.startTime)\n    };\n    this._latencyData = this._initLatencyData(); // Clear\n\n    debug('Summary: %O', latency);\n    return latency;\n  }\n  /**\n   * Randomly calls an async fn every roughly latencyCheckIntervalMs (plus some randomness). If no async fn is found,\n   * it will simply report on event loop latency.\n   *\n   * @private\n   */\n\n\n  _checkLatency() {\n    const that = this; // Randomness is needed to avoid alignment by accident to regular things in the event loop\n\n    const randomness = Math.random() * that._latecyCheckMultiply - that._latecyCheckSubtract; // We use this to ensure that in case some overlap somehow, we don't take the wrong startTime/offset\n\n\n    const localData = {\n      deltaOffset: Math.ceil(that.latencyCheckIntervalMs + randomness),\n      startTime: that.now()\n    };\n\n    const cb = () => {\n      // We are already stopped, ignore this datapoint\n      if (!this._checkLatencyID) {\n        return;\n      }\n\n      const deltaMS = that.getDeltaMS(localData.startTime) - localData.deltaOffset;\n\n      that._checkLatency(); // Start again ASAP\n      // Add the data point. If this gets complex, refactor it\n\n\n      that._latencyData.events++;\n      that._latencyData.minMs = Math.min(that._latencyData.minMs, deltaMS);\n      that._latencyData.maxMs = Math.max(that._latencyData.maxMs, deltaMS);\n      that._latencyData.totalMs += deltaMS;\n      debug('MS: %s Data: %O', deltaMS, that._latencyData);\n    };\n\n    debug('localData: %O', localData);\n    this._checkLatencyID = setTimeout(() => {\n      // This gets rid of including event loop\n      if (that.asyncTestFn) {\n        // Clear timing related things\n        localData.deltaOffset = 0;\n        localData.startTime = that.now();\n        that.asyncTestFn(cb);\n      } else {\n        // setTimeout is not more accurate than 1ms, so this will ensure positive numbers. Add 1 to emitted data to remove.\n        // This is not the best, but for now it'll be just fine. This isn't meant to be sub ms accurate.\n        localData.deltaOffset -= 1; // If there is no function to test, we mean check latency which is a special case that is really cb => cb()\n        // We avoid that for the few extra function all overheads. Also, we want to keep the timers different\n\n        cb();\n      }\n    }, localData.deltaOffset);\n\n    if (typeof this._checkLatencyID.unref === 'function') {\n      this._checkLatencyID.unref(); // Doesn't block exit\n\n    }\n  }\n\n  _initLatencyData() {\n    return {\n      startTime: this.now(),\n      minMs: Number.POSITIVE_INFINITY,\n      maxMs: Number.NEGATIVE_INFINITY,\n      events: 0,\n      totalMs: 0\n    };\n  }\n\n}\n\nfunction isBrowser() {\n  return typeof window !== 'undefined';\n}\n\nmodule.exports = LatencyMonitor;","map":{"version":3,"names":["EventEmitter","require","VisibilityChangeEmitter","debug","LatencyMonitor","constructor","latencyCheckIntervalMs","dataEmitIntervalMs","asyncTestFn","latencyRandomPercentage","that","_latecyCheckMultiply","_latecyCheckSubtract","undefined","start","globalThis","process","hrtime","now","getDeltaMS","startTime","window","performance","bind","Math","round","Date","_latencyData","_initLatencyData","isBrowser","_visibilityChangeEmitter","on","pageInFocus","_startTimers","_emitSummary","_stopTimers","isVisible","stop","_checkLatencyID","_checkLatency","_emitIntervalID","setInterval","unref","clearTimeout","clearInterval","summary","getSummary","events","emit","latency","minMs","maxMs","avgMs","totalMs","Number","POSITIVE_INFINITY","lengthMs","randomness","random","localData","deltaOffset","ceil","cb","deltaMS","min","max","setTimeout","NEGATIVE_INFINITY","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p/src/connection-manager/latency-monitor.js"],"sourcesContent":["// @ts-nocheck\n'use strict'\n\n/**\n * This code is based on `latency-monitor` (https://github.com/mlucool/latency-monitor) by `mlucool` (https://github.com/mlucool), available under Apache License 2.0 (https://github.com/mlucool/latency-monitor/blob/master/LICENSE)\n */\n\nconst { EventEmitter } = require('events')\nconst VisibilityChangeEmitter = require('./visibility-change-emitter')\nconst debug = require('debug')('latency-monitor:LatencyMonitor')\n\n/**\n * @typedef {Object} SummaryObject\n * @property {number} events How many events were called\n * @property {number} minMS What was the min time for a cb to be called\n * @property {number} maxMS What was the max time for a cb to be called\n * @property {number} avgMs What was the average time for a cb to be called\n * @property {number} lengthMs How long this interval was in ms\n *\n * @typedef {Object} LatencyMonitorOptions\n * @property {number} [latencyCheckIntervalMs=500] - How often to add a latency check event (ms)\n * @property {number} [dataEmitIntervalMs=5000] - How often to summarize latency check events. null or 0 disables event firing\n * @property {Function} [asyncTestFn] - What cb-style async function to use\n * @property {number} [latencyRandomPercentage=5] - What percent (+/-) of latencyCheckIntervalMs should we randomly use? This helps avoid alignment to other events.\n */\n\n/**\n * A class to monitor latency of any async function which works in a browser or node. This works by periodically calling\n * the asyncTestFn and timing how long it takes the callback to be called. It can also periodically emit stats about this.\n * This can be disabled and stats can be pulled via setting dataEmitIntervalMs = 0.\n *\n * @extends {EventEmitter}\n *\n * The default implementation is an event loop latency monitor. This works by firing periodic events into the event loop\n * and timing how long it takes to get back.\n *\n * @example\n * const monitor = new LatencyMonitor();\n * monitor.on('data', (summary) => console.log('Event Loop Latency: %O', summary));\n *\n * @example\n * const monitor = new LatencyMonitor({latencyCheckIntervalMs: 1000, dataEmitIntervalMs: 60000, asyncTestFn:ping});\n * monitor.on('data', (summary) => console.log('Ping Pong Latency: %O', summary));\n */\nclass LatencyMonitor extends EventEmitter {\n  /**\n   * @class\n   * @param {LatencyMonitorOptions} [options]\n   */\n  constructor ({ latencyCheckIntervalMs, dataEmitIntervalMs, asyncTestFn, latencyRandomPercentage } = {}) {\n    super()\n    const that = this\n\n    // 0 isn't valid here, so its ok to use ||\n    that.latencyCheckIntervalMs = latencyCheckIntervalMs || 500 // 0.5s\n    that.latencyRandomPercentage = latencyRandomPercentage || 10\n    that._latecyCheckMultiply = 2 * (that.latencyRandomPercentage / 100.0) * that.latencyCheckIntervalMs\n    that._latecyCheckSubtract = that._latecyCheckMultiply / 2\n\n    that.dataEmitIntervalMs = (dataEmitIntervalMs === null || dataEmitIntervalMs === 0)\n      ? undefined\n      : dataEmitIntervalMs || 5 * 1000 // 5s\n    debug('latencyCheckIntervalMs: %s dataEmitIntervalMs: %s',\n      that.latencyCheckIntervalMs, that.dataEmitIntervalMs)\n    if (that.dataEmitIntervalMs) {\n      debug('Expecting ~%s events per summary', that.latencyCheckIntervalMs / that.dataEmitIntervalMs)\n    } else {\n      debug('Not emitting summaries')\n    }\n\n    that.asyncTestFn = asyncTestFn // If there is no asyncFn, we measure latency\n  }\n\n  start () {\n    // If process: use high resolution timer\n    if (globalThis.process && globalThis.process.hrtime) { // eslint-disable-line no-undef\n      debug('Using process.hrtime for timing')\n      this.now = globalThis.process.hrtime // eslint-disable-line no-undef\n      this.getDeltaMS = (startTime) => {\n        const hrtime = this.now(startTime)\n        return (hrtime[0] * 1000) + (hrtime[1] / 1000000)\n      }\n      // Let's try for a timer that only monotonically increases\n    } else if (typeof window !== 'undefined' && window.performance && window.performance.now) {\n      debug('Using performance.now for timing')\n      this.now = window.performance.now.bind(window.performance)\n      this.getDeltaMS = (startTime) => Math.round(this.now() - startTime)\n    } else {\n      debug('Using Date.now for timing')\n      this.now = Date.now\n      this.getDeltaMS = (startTime) => this.now() - startTime\n    }\n\n    this._latencyData = this._initLatencyData()\n\n    // We check for isBrowser because of browsers set max rates of timeouts when a page is hidden,\n    // so we fall back to another library\n    // See: http://stackoverflow.com/questions/6032429/chrome-timeouts-interval-suspended-in-background-tabs\n    if (isBrowser()) {\n      this._visibilityChangeEmitter = new VisibilityChangeEmitter()\n\n      this._visibilityChangeEmitter.on('visibilityChange', (pageInFocus) => {\n        if (pageInFocus) {\n          this._startTimers()\n        } else {\n          this._emitSummary()\n          this._stopTimers()\n        }\n      })\n    }\n\n    if (!this._visibilityChangeEmitter || this._visibilityChangeEmitter.isVisible()) {\n      this._startTimers()\n    }\n  }\n\n  stop () {\n    this._stopTimers()\n  }\n\n  /**\n   * Start internal timers\n   *\n   * @private\n   */\n  _startTimers () {\n    // Timer already started, ignore this\n    if (this._checkLatencyID) {\n      return\n    }\n    this._checkLatency()\n    if (this.dataEmitIntervalMs) {\n      this._emitIntervalID = setInterval(() => this._emitSummary(), this.dataEmitIntervalMs)\n      if (typeof this._emitIntervalID.unref === 'function') {\n        this._emitIntervalID.unref() // Doesn't block exit\n      }\n    }\n  }\n\n  /**\n   * Stop internal timers\n   *\n   * @private\n   */\n  _stopTimers () {\n    if (this._checkLatencyID) {\n      clearTimeout(this._checkLatencyID)\n      this._checkLatencyID = undefined\n    }\n    if (this._emitIntervalID) {\n      clearInterval(this._emitIntervalID)\n      this._emitIntervalID = undefined\n    }\n  }\n\n  /**\n   * Emit summary only if there were events. It might not have any events if it was forced via a page hidden/show\n   *\n   * @private\n   */\n  _emitSummary () {\n    const summary = this.getSummary()\n    if (summary.events > 0) {\n      this.emit('data', summary)\n    }\n  }\n\n  /**\n   * Calling this function will end the collection period. If a timing event was already fired and somewhere in the queue,\n   * it will not count for this time period\n   *\n   * @returns {SummaryObject}\n   */\n  getSummary () {\n    // We might want to adjust for the number of expected events\n    // Example: first 1 event it comes back, then such a long blocker that the next emit check comes\n    // Then this fires - looks like no latency!!\n    const latency = {\n      events: this._latencyData.events,\n      minMs: this._latencyData.minMs,\n      maxMs: this._latencyData.maxMs,\n      avgMs: this._latencyData.events\n        ? this._latencyData.totalMs / this._latencyData.events\n        : Number.POSITIVE_INFINITY,\n      lengthMs: this.getDeltaMS(this._latencyData.startTime)\n    }\n    this._latencyData = this._initLatencyData() // Clear\n\n    debug('Summary: %O', latency)\n    return latency\n  }\n\n  /**\n   * Randomly calls an async fn every roughly latencyCheckIntervalMs (plus some randomness). If no async fn is found,\n   * it will simply report on event loop latency.\n   *\n   * @private\n   */\n  _checkLatency () {\n    const that = this\n    // Randomness is needed to avoid alignment by accident to regular things in the event loop\n    const randomness = (Math.random() * that._latecyCheckMultiply) - that._latecyCheckSubtract\n\n    // We use this to ensure that in case some overlap somehow, we don't take the wrong startTime/offset\n    const localData = {\n      deltaOffset: Math.ceil(that.latencyCheckIntervalMs + randomness),\n      startTime: that.now()\n    }\n\n    const cb = () => {\n      // We are already stopped, ignore this datapoint\n      if (!this._checkLatencyID) {\n        return\n      }\n      const deltaMS = that.getDeltaMS(localData.startTime) - localData.deltaOffset\n      that._checkLatency() // Start again ASAP\n\n      // Add the data point. If this gets complex, refactor it\n      that._latencyData.events++\n      that._latencyData.minMs = Math.min(that._latencyData.minMs, deltaMS)\n      that._latencyData.maxMs = Math.max(that._latencyData.maxMs, deltaMS)\n      that._latencyData.totalMs += deltaMS\n      debug('MS: %s Data: %O', deltaMS, that._latencyData)\n    }\n    debug('localData: %O', localData)\n\n    this._checkLatencyID = setTimeout(() => {\n      // This gets rid of including event loop\n      if (that.asyncTestFn) {\n        // Clear timing related things\n        localData.deltaOffset = 0\n        localData.startTime = that.now()\n        that.asyncTestFn(cb)\n      } else {\n        // setTimeout is not more accurate than 1ms, so this will ensure positive numbers. Add 1 to emitted data to remove.\n        // This is not the best, but for now it'll be just fine. This isn't meant to be sub ms accurate.\n        localData.deltaOffset -= 1\n        // If there is no function to test, we mean check latency which is a special case that is really cb => cb()\n        // We avoid that for the few extra function all overheads. Also, we want to keep the timers different\n        cb()\n      }\n    }, localData.deltaOffset)\n\n    if (typeof this._checkLatencyID.unref === 'function') {\n      this._checkLatencyID.unref() // Doesn't block exit\n    }\n  }\n\n  _initLatencyData () {\n    return {\n      startTime: this.now(),\n      minMs: Number.POSITIVE_INFINITY,\n      maxMs: Number.NEGATIVE_INFINITY,\n      events: 0,\n      totalMs: 0\n    }\n  }\n}\n\nfunction isBrowser () {\n  return typeof window !== 'undefined'\n}\n\nmodule.exports = LatencyMonitor\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}