{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _awaitAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _wrapAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nvar _require = require('parse-duration'),\n    parseDuration = _require.default;\n\nvar errCode = require('err-code');\n\nvar withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @typedef {Object} BWOptions\n * @property {PeerId} [peer] - Specifies a peer to print bandwidth for\n * @property {string} [proto] - Specifies a protocol to print bandwidth for\n * @property {boolean} [poll] - Is used to yield bandwidth info at an interval\n * @property {number|string} [interval=1000] - The time interval to wait between updating output, if `poll` is `true`.\n *\n * @typedef {Object} BandwidthInfo\n * @property {bigint} totalIn\n * @property {bigint} totalOut\n * @property {number} rateIn\n * @property {number} rateOut\n *\n * @typedef {import('libp2p')} libp2p\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @param {libp2p} libp2p\n * @param {BWOptions} opts\n * @returns {BandwidthInfo}\n */\n\n\nfunction getBandwidthStats(libp2p, opts) {\n  var stats;\n\n  if (!libp2p.metrics) {\n    stats = undefined;\n  } else if (opts.peer) {\n    stats = libp2p.metrics.forPeer(opts.peer);\n  } else if (opts.proto) {\n    stats = libp2p.metrics.forProtocol(opts.proto);\n  } else {\n    stats = libp2p.metrics.global;\n  }\n\n  if (!stats) {\n    return {\n      totalIn: BigInt(0),\n      totalOut: BigInt(0),\n      rateIn: 0.0,\n      rateOut: 0.0\n    };\n  }\n\n  var _stats = stats,\n      movingAverages = _stats.movingAverages,\n      snapshot = _stats.snapshot;\n  return {\n    totalIn: BigInt(snapshot.dataReceived.integerValue().toString()),\n    totalOut: BigInt(snapshot.dataSent.integerValue().toString()),\n    rateIn: movingAverages.dataReceived[60000].movingAverage() / 60,\n    rateOut: movingAverages.dataSent[60000].movingAverage() / 60\n  };\n}\n/**\n * @param {Object} config\n * @param {import('../../types').NetworkService} config.network\n */\n\n\nmodule.exports = function (_ref2) {\n  var network = _ref2.network;\n\n  /**\n   * @type {import('ipfs-core-types/src/stats').API[\"bw\"]}\n   */\n  var bw = /*#__PURE__*/function () {\n    var _ref = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var options,\n          _yield$_awaitAsyncGen,\n          libp2p,\n          interval,\n          ms,\n          timeoutId,\n          _args = arguments;\n\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              _context.next = 3;\n              return _awaitAsyncGenerator(network.use(options));\n\n            case 3:\n              _yield$_awaitAsyncGen = _context.sent;\n              libp2p = _yield$_awaitAsyncGen.libp2p;\n\n              if (options.poll) {\n                _context.next = 9;\n                break;\n              }\n\n              _context.next = 8;\n              return getBandwidthStats(libp2p, options);\n\n            case 8:\n              return _context.abrupt(\"return\");\n\n            case 9:\n              interval = options.interval || 1000;\n              ms = -1;\n              _context.prev = 11;\n              ms = typeof interval === 'string' ? parseDuration(interval) || -1 : interval;\n\n              if (!(!ms || ms < 0)) {\n                _context.next = 15;\n                break;\n              }\n\n              throw new Error('invalid duration');\n\n            case 15:\n              _context.next = 20;\n              break;\n\n            case 17:\n              _context.prev = 17;\n              _context.t0 = _context[\"catch\"](11);\n              throw errCode(_context.t0, 'ERR_INVALID_POLL_INTERVAL');\n\n            case 20:\n              _context.prev = 20;\n\n            case 21:\n              if (!true) {\n                _context.next = 28;\n                break;\n              }\n\n              _context.next = 24;\n              return getBandwidthStats(libp2p, options);\n\n            case 24:\n              _context.next = 26;\n              return _awaitAsyncGenerator(new Promise(function (resolve) {\n                timeoutId = setTimeout(resolve, ms);\n              }));\n\n            case 26:\n              _context.next = 21;\n              break;\n\n            case 28:\n              _context.prev = 28;\n              clearTimeout(timeoutId);\n              return _context.finish(28);\n\n            case 31:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[11, 17], [20,, 28, 31]]);\n    }));\n\n    return function bw() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return withTimeoutOption(bw);\n};","map":{"version":3,"names":["require","parseDuration","default","errCode","withTimeoutOption","getBandwidthStats","libp2p","opts","stats","metrics","undefined","peer","forPeer","proto","forProtocol","global","totalIn","BigInt","totalOut","rateIn","rateOut","movingAverages","snapshot","dataReceived","integerValue","toString","dataSent","movingAverage","module","exports","network","bw","options","use","poll","interval","ms","Error","Promise","resolve","timeoutId","setTimeout","clearTimeout"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/stats/bw.js"],"sourcesContent":["'use strict'\n\nconst { default: parseDuration } = require('parse-duration')\nconst errCode = require('err-code')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @typedef {Object} BWOptions\n * @property {PeerId} [peer] - Specifies a peer to print bandwidth for\n * @property {string} [proto] - Specifies a protocol to print bandwidth for\n * @property {boolean} [poll] - Is used to yield bandwidth info at an interval\n * @property {number|string} [interval=1000] - The time interval to wait between updating output, if `poll` is `true`.\n *\n * @typedef {Object} BandwidthInfo\n * @property {bigint} totalIn\n * @property {bigint} totalOut\n * @property {number} rateIn\n * @property {number} rateOut\n *\n * @typedef {import('libp2p')} libp2p\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @param {libp2p} libp2p\n * @param {BWOptions} opts\n * @returns {BandwidthInfo}\n */\nfunction getBandwidthStats (libp2p, opts) {\n  let stats\n\n  if (!libp2p.metrics) {\n    stats = undefined\n  } else if (opts.peer) {\n    stats = libp2p.metrics.forPeer(opts.peer)\n  } else if (opts.proto) {\n    stats = libp2p.metrics.forProtocol(opts.proto)\n  } else {\n    stats = libp2p.metrics.global\n  }\n\n  if (!stats) {\n    return {\n      totalIn: BigInt(0),\n      totalOut: BigInt(0),\n      rateIn: 0.0,\n      rateOut: 0.0\n    }\n  }\n\n  const { movingAverages, snapshot } = stats\n\n  return {\n    totalIn: BigInt(snapshot.dataReceived.integerValue().toString()),\n    totalOut: BigInt(snapshot.dataSent.integerValue().toString()),\n    rateIn: movingAverages.dataReceived[60000].movingAverage() / 60,\n    rateOut: movingAverages.dataSent[60000].movingAverage() / 60\n  }\n}\n\n/**\n * @param {Object} config\n * @param {import('../../types').NetworkService} config.network\n */\nmodule.exports = ({ network }) => {\n  /**\n   * @type {import('ipfs-core-types/src/stats').API[\"bw\"]}\n   */\n  const bw = async function * (options = {}) {\n    const { libp2p } = await network.use(options)\n\n    if (!options.poll) {\n      yield getBandwidthStats(libp2p, options)\n      return\n    }\n\n    const interval = options.interval || 1000\n    let ms = -1\n    try {\n      ms = typeof interval === 'string' ? parseDuration(interval) || -1 : interval\n      if (!ms || ms < 0) throw new Error('invalid duration')\n    } catch (err) {\n      throw errCode(err, 'ERR_INVALID_POLL_INTERVAL')\n    }\n\n    let timeoutId\n    try {\n      while (true) {\n        yield getBandwidthStats(libp2p, options)\n        // eslint-disable-next-line no-loop-func\n        await new Promise(resolve => { timeoutId = setTimeout(resolve, ms) })\n      }\n    } finally {\n      clearTimeout(timeoutId)\n    }\n  }\n\n  return withTimeoutOption(bw)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}