{"ast":null,"code":"'use strict'; // MaxRecordAge specifies the maximum time that any node will hold onto a record\n// from the time its received. This does not apply to any other forms of validity that\n// the record may contain.\n// For example, a record may contain an ipns entry with an EOL saying its valid\n// until the year 2020 (a great time in the future). For that record to stick around\n// it must be rebroadcasted more frequently than once every 'MaxRecordAge'\n\nconst second = exports.second = 1000;\nconst minute = exports.minute = 60 * second;\nconst hour = exports.hour = 60 * minute;\nexports.MAX_RECORD_AGE = 36 * hour;\nexports.PROTOCOL_DHT = '/kad/1.0.0';\nexports.PROVIDERS_KEY_PREFIX = '/providers/';\nexports.PROVIDERS_LRU_CACHE_SIZE = 256;\nexports.PROVIDERS_VALIDITY = 24 * hour;\nexports.PROVIDERS_CLEANUP_INTERVAL = hour;\nexports.READ_MESSAGE_TIMEOUT = 10 * second; // The number of records that will be retrieved on a call to getMany()\n\nexports.GET_MANY_RECORD_COUNT = 16; // K is the maximum number of requests to perform before returning failure\n\nexports.K = 20; // Alpha is the concurrency for asynchronous requests\n\nexports.ALPHA = 3;","map":{"version":3,"names":["second","exports","minute","hour","MAX_RECORD_AGE","PROTOCOL_DHT","PROVIDERS_KEY_PREFIX","PROVIDERS_LRU_CACHE_SIZE","PROVIDERS_VALIDITY","PROVIDERS_CLEANUP_INTERVAL","READ_MESSAGE_TIMEOUT","GET_MANY_RECORD_COUNT","K","ALPHA"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-kad-dht/src/constants.js"],"sourcesContent":["'use strict'\n\n// MaxRecordAge specifies the maximum time that any node will hold onto a record\n// from the time its received. This does not apply to any other forms of validity that\n// the record may contain.\n// For example, a record may contain an ipns entry with an EOL saying its valid\n// until the year 2020 (a great time in the future). For that record to stick around\n// it must be rebroadcasted more frequently than once every 'MaxRecordAge'\n\nconst second = exports.second = 1000\nconst minute = exports.minute = 60 * second\nconst hour = exports.hour = 60 * minute\n\nexports.MAX_RECORD_AGE = 36 * hour\n\nexports.PROTOCOL_DHT = '/kad/1.0.0'\n\nexports.PROVIDERS_KEY_PREFIX = '/providers/'\n\nexports.PROVIDERS_LRU_CACHE_SIZE = 256\n\nexports.PROVIDERS_VALIDITY = 24 * hour\n\nexports.PROVIDERS_CLEANUP_INTERVAL = hour\n\nexports.READ_MESSAGE_TIMEOUT = 10 * second\n\n// The number of records that will be retrieved on a call to getMany()\nexports.GET_MANY_RECORD_COUNT = 16\n\n// K is the maximum number of requests to perform before returning failure\nexports.K = 20\n\n// Alpha is the concurrency for asynchronous requests\nexports.ALPHA = 3\n"],"mappings":"AAAA,a,CAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAACD,MAAR,GAAiB,IAAhC;AACA,MAAME,MAAM,GAAGD,OAAO,CAACC,MAAR,GAAiB,KAAKF,MAArC;AACA,MAAMG,IAAI,GAAGF,OAAO,CAACE,IAAR,GAAe,KAAKD,MAAjC;AAEAD,OAAO,CAACG,cAAR,GAAyB,KAAKD,IAA9B;AAEAF,OAAO,CAACI,YAAR,GAAuB,YAAvB;AAEAJ,OAAO,CAACK,oBAAR,GAA+B,aAA/B;AAEAL,OAAO,CAACM,wBAAR,GAAmC,GAAnC;AAEAN,OAAO,CAACO,kBAAR,GAA6B,KAAKL,IAAlC;AAEAF,OAAO,CAACQ,0BAAR,GAAqCN,IAArC;AAEAF,OAAO,CAACS,oBAAR,GAA+B,KAAKV,MAApC,C,CAEA;;AACAC,OAAO,CAACU,qBAAR,GAAgC,EAAhC,C,CAEA;;AACAV,OAAO,CAACW,CAAR,GAAY,EAAZ,C,CAEA;;AACAX,OAAO,CAACY,KAAR,GAAgB,CAAhB"},"metadata":{},"sourceType":"script"}