{"ast":null,"code":"'use strict';\n\nconst loadMfsRoot = require('./with-mfs-root');\n\nconst toPathComponents = require('./to-path-components');\n\nconst {\n  exporter\n} = require('ipfs-unixfs-exporter');\n\nconst errCode = require('err-code');\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst IPFS_PREFIX = 'ipfs';\n/**\n * @typedef {import('ipfs-unixfs-exporter').UnixFSEntry} UnixFSEntry\n * @typedef {import('ipfs-unixfs-exporter').ExporterOptions} ExporterOptions\n * @typedef {import('../').MfsContext} MfsContext\n *\n * @typedef {object} FilePath\n * @property {'mfs' | 'ipfs'} type\n * @property {'file'} entryType\n * @property {number} depth\n * @property {string} mfsPath\n * @property {string} mfsDirectory\n * @property {string[]} parts\n * @property {string} path\n * @property {string} name\n * @property {CID} cid\n * @property {boolean} exists\n * @property {import('ipfs-unixfs').UnixFS} unixfs\n * @property {(options?: ExporterOptions) => AsyncIterable<Uint8Array>} content\n *\n * @typedef {object} DirectoryPath\n * @property {'mfs' | 'ipfs'} type\n * @property {'directory'} entryType\n * @property {number} depth\n * @property {string} mfsPath\n * @property {string} mfsDirectory\n * @property {string[]} parts\n * @property {string} path\n * @property {string} name\n * @property {CID} cid\n * @property {boolean} exists\n * @property {import('ipfs-unixfs').UnixFS} unixfs\n * @property {(options?: ExporterOptions) => AsyncIterable<UnixFSEntry>} content\n *\n * @typedef {object} ObjectPath\n * @property {'mfs' | 'ipfs'} type\n * @property {'object'} entryType\n * @property {number} depth\n * @property {string} mfsPath\n * @property {string} mfsDirectory\n * @property {string[]} parts\n * @property {string} path\n * @property {string} name\n * @property {CID} cid\n * @property {boolean} exists\n * @property {(options?: ExporterOptions) => AsyncIterable<any>} content\n *\n * @typedef {object} RawPath\n * @property {'mfs' | 'ipfs'} type\n * @property {'raw'} entryType\n * @property {number} depth\n * @property {string} mfsPath\n * @property {string} mfsDirectory\n * @property {string[]} parts\n * @property {string} path\n * @property {string} name\n * @property {CID} cid\n * @property {boolean} exists\n * @property {(options?: ExporterOptions) => AsyncIterable<Uint8Array>} content\n *\n * @typedef {object} IdentityPath\n * @property {'mfs' | 'ipfs'} type\n * @property {'identity'} entryType\n * @property {number} depth\n * @property {string} mfsPath\n * @property {string} mfsDirectory\n * @property {string[]} parts\n * @property {string} path\n * @property {string} name\n * @property {CID} cid\n * @property {boolean} exists\n * @property {(options?: ExporterOptions) => AsyncIterable<Uint8Array>} content\n *\n * @typedef {FilePath | DirectoryPath | ObjectPath | RawPath | IdentityPath} MfsPath\n */\n\n/**\n * @param {MfsContext} context\n * @param {string | CID} path\n * @param {import('ipfs-core-types/src/utils').AbortOptions} [options]\n */\n\nconst toMfsPath = async (context, path, options) => {\n  const root = await loadMfsRoot(context, options);\n  /** @type {MfsPath} */\n  // @ts-ignore fields get set later\n\n  let output = {\n    entryType: 'file'\n  };\n  let ipfsPath = '';\n\n  if (CID.asCID(path)) {\n    ipfsPath = `/ipfs/${path}`;\n  } else {\n    ipfsPath = path.toString();\n  }\n\n  ipfsPath = ipfsPath.trim();\n  ipfsPath = ipfsPath.replace(/(\\/\\/+)/g, '/');\n\n  if (ipfsPath.endsWith('/') && ipfsPath.length > 1) {\n    ipfsPath = ipfsPath.substring(0, ipfsPath.length - 1);\n  }\n\n  if (!ipfsPath) {\n    throw errCode(new Error('paths must not be empty'), 'ERR_NO_PATH');\n  }\n\n  if (ipfsPath.substring(0, 1) !== '/') {\n    throw errCode(new Error('paths must start with a leading slash'), 'ERR_INVALID_PATH');\n  }\n\n  if (ipfsPath.substring(ipfsPath.length - 1) === '/') {\n    ipfsPath = ipfsPath.substring(0, ipfsPath.length - 1);\n  }\n\n  const pathComponents = toPathComponents(ipfsPath);\n\n  if (pathComponents[0] === IPFS_PREFIX) {\n    // e.g. /ipfs/QMfoo or /ipfs/Qmfoo/sub/path\n    let mfsDirectory;\n\n    if (pathComponents.length === 2) {\n      mfsDirectory = `/${pathComponents.join('/')}`;\n    } else {\n      mfsDirectory = `/${pathComponents.slice(0, pathComponents.length - 1).join('/')}`;\n    } // @ts-ignore fields being set\n\n\n    output = {\n      type: 'ipfs',\n      depth: pathComponents.length - 2,\n      entryType: 'file',\n      mfsPath: `/${pathComponents.join('/')}`,\n      mfsDirectory,\n      parts: pathComponents,\n      path: `/${pathComponents.join('/')}`,\n      name: pathComponents[pathComponents.length - 1]\n    };\n  } else {\n    const mfsPath = `/${IPFS_PREFIX}/${root}${pathComponents.length ? '/' + pathComponents.join('/') : ''}`;\n    const mfsDirectory = `/${IPFS_PREFIX}/${root}/${pathComponents.slice(0, pathComponents.length - 1).join('/')}`; // @ts-ignore fields being set\n\n    output = {\n      type: 'mfs',\n      depth: pathComponents.length,\n      entryType: 'file',\n      mfsDirectory,\n      mfsPath,\n      parts: pathComponents,\n      path: `/${pathComponents.join('/')}`,\n      name: pathComponents[pathComponents.length - 1]\n    };\n  }\n\n  const cidPath = output.type === 'mfs' ? output.mfsPath : output.path;\n\n  try {\n    const res = await exporter(cidPath, context.repo.blocks, options);\n    output.cid = res.cid;\n    output.mfsPath = `/ipfs/${res.path}`;\n    output.entryType = res.type;\n    output.content = res.content;\n\n    if ((output.entryType === 'file' || output.entryType === 'directory') && (res.type === 'file' || res.type === 'directory')) {\n      output.unixfs = res.unixfs;\n    }\n  } catch (err) {\n    if (err.code !== 'ERR_NOT_FOUND') {\n      throw err;\n    }\n  }\n\n  output.exists = Boolean(output.cid);\n  return output;\n};\n\nmodule.exports = toMfsPath;","map":{"version":3,"names":["loadMfsRoot","require","toPathComponents","exporter","errCode","CID","IPFS_PREFIX","toMfsPath","context","path","options","root","output","entryType","ipfsPath","asCID","toString","trim","replace","endsWith","length","substring","Error","pathComponents","mfsDirectory","join","slice","type","depth","mfsPath","parts","name","cidPath","res","repo","blocks","cid","content","unixfs","err","code","exists","Boolean","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/files/utils/to-mfs-path.js"],"sourcesContent":["'use strict'\n\nconst loadMfsRoot = require('./with-mfs-root')\nconst toPathComponents = require('./to-path-components')\nconst { exporter } = require('ipfs-unixfs-exporter')\nconst errCode = require('err-code')\nconst { CID } = require('multiformats/cid')\n\nconst IPFS_PREFIX = 'ipfs'\n\n/**\n * @typedef {import('ipfs-unixfs-exporter').UnixFSEntry} UnixFSEntry\n * @typedef {import('ipfs-unixfs-exporter').ExporterOptions} ExporterOptions\n * @typedef {import('../').MfsContext} MfsContext\n *\n * @typedef {object} FilePath\n * @property {'mfs' | 'ipfs'} type\n * @property {'file'} entryType\n * @property {number} depth\n * @property {string} mfsPath\n * @property {string} mfsDirectory\n * @property {string[]} parts\n * @property {string} path\n * @property {string} name\n * @property {CID} cid\n * @property {boolean} exists\n * @property {import('ipfs-unixfs').UnixFS} unixfs\n * @property {(options?: ExporterOptions) => AsyncIterable<Uint8Array>} content\n *\n * @typedef {object} DirectoryPath\n * @property {'mfs' | 'ipfs'} type\n * @property {'directory'} entryType\n * @property {number} depth\n * @property {string} mfsPath\n * @property {string} mfsDirectory\n * @property {string[]} parts\n * @property {string} path\n * @property {string} name\n * @property {CID} cid\n * @property {boolean} exists\n * @property {import('ipfs-unixfs').UnixFS} unixfs\n * @property {(options?: ExporterOptions) => AsyncIterable<UnixFSEntry>} content\n *\n * @typedef {object} ObjectPath\n * @property {'mfs' | 'ipfs'} type\n * @property {'object'} entryType\n * @property {number} depth\n * @property {string} mfsPath\n * @property {string} mfsDirectory\n * @property {string[]} parts\n * @property {string} path\n * @property {string} name\n * @property {CID} cid\n * @property {boolean} exists\n * @property {(options?: ExporterOptions) => AsyncIterable<any>} content\n *\n * @typedef {object} RawPath\n * @property {'mfs' | 'ipfs'} type\n * @property {'raw'} entryType\n * @property {number} depth\n * @property {string} mfsPath\n * @property {string} mfsDirectory\n * @property {string[]} parts\n * @property {string} path\n * @property {string} name\n * @property {CID} cid\n * @property {boolean} exists\n * @property {(options?: ExporterOptions) => AsyncIterable<Uint8Array>} content\n *\n * @typedef {object} IdentityPath\n * @property {'mfs' | 'ipfs'} type\n * @property {'identity'} entryType\n * @property {number} depth\n * @property {string} mfsPath\n * @property {string} mfsDirectory\n * @property {string[]} parts\n * @property {string} path\n * @property {string} name\n * @property {CID} cid\n * @property {boolean} exists\n * @property {(options?: ExporterOptions) => AsyncIterable<Uint8Array>} content\n *\n * @typedef {FilePath | DirectoryPath | ObjectPath | RawPath | IdentityPath} MfsPath\n */\n\n/**\n * @param {MfsContext} context\n * @param {string | CID} path\n * @param {import('ipfs-core-types/src/utils').AbortOptions} [options]\n */\nconst toMfsPath = async (context, path, options) => {\n  const root = await loadMfsRoot(context, options)\n\n  /** @type {MfsPath} */\n  // @ts-ignore fields get set later\n  let output = {\n    entryType: 'file'\n  }\n\n  let ipfsPath = ''\n\n  if (CID.asCID(path)) {\n    ipfsPath = `/ipfs/${path}`\n  } else {\n    ipfsPath = path.toString()\n  }\n\n  ipfsPath = ipfsPath.trim()\n  ipfsPath = ipfsPath.replace(/(\\/\\/+)/g, '/')\n\n  if (ipfsPath.endsWith('/') && ipfsPath.length > 1) {\n    ipfsPath = ipfsPath.substring(0, ipfsPath.length - 1)\n  }\n\n  if (!ipfsPath) {\n    throw errCode(new Error('paths must not be empty'), 'ERR_NO_PATH')\n  }\n\n  if (ipfsPath.substring(0, 1) !== '/') {\n    throw errCode(new Error('paths must start with a leading slash'), 'ERR_INVALID_PATH')\n  }\n\n  if (ipfsPath.substring(ipfsPath.length - 1) === '/') {\n    ipfsPath = ipfsPath.substring(0, ipfsPath.length - 1)\n  }\n\n  const pathComponents = toPathComponents(ipfsPath)\n\n  if (pathComponents[0] === IPFS_PREFIX) {\n    // e.g. /ipfs/QMfoo or /ipfs/Qmfoo/sub/path\n    let mfsDirectory\n\n    if (pathComponents.length === 2) {\n      mfsDirectory = `/${pathComponents.join('/')}`\n    } else {\n      mfsDirectory = `/${pathComponents.slice(0, pathComponents.length - 1).join('/')}`\n    }\n\n    // @ts-ignore fields being set\n    output = {\n      type: 'ipfs',\n      depth: pathComponents.length - 2,\n      entryType: 'file',\n\n      mfsPath: `/${pathComponents.join('/')}`,\n      mfsDirectory,\n      parts: pathComponents,\n      path: `/${pathComponents.join('/')}`,\n      name: pathComponents[pathComponents.length - 1]\n    }\n  } else {\n    const mfsPath = `/${IPFS_PREFIX}/${root}${pathComponents.length ? '/' + pathComponents.join('/') : ''}`\n    const mfsDirectory = `/${IPFS_PREFIX}/${root}/${pathComponents.slice(0, pathComponents.length - 1).join('/')}`\n\n    // @ts-ignore fields being set\n    output = {\n      type: 'mfs',\n      depth: pathComponents.length,\n      entryType: 'file',\n\n      mfsDirectory,\n      mfsPath,\n      parts: pathComponents,\n      path: `/${pathComponents.join('/')}`,\n      name: pathComponents[pathComponents.length - 1]\n    }\n  }\n\n  const cidPath = output.type === 'mfs' ? output.mfsPath : output.path\n\n  try {\n    const res = await exporter(cidPath, context.repo.blocks, options)\n\n    output.cid = res.cid\n    output.mfsPath = `/ipfs/${res.path}`\n    output.entryType = res.type\n    output.content = res.content\n\n    if ((output.entryType === 'file' || output.entryType === 'directory') && (res.type === 'file' || res.type === 'directory')) {\n      output.unixfs = res.unixfs\n    }\n  } catch (err) {\n    if (err.code !== 'ERR_NOT_FOUND') {\n      throw err\n    }\n  }\n\n  output.exists = Boolean(output.cid)\n\n  return output\n}\n\nmodule.exports = toMfsPath\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}