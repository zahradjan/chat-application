{"ast":null,"code":"'use strict';\n\nconst {\n  Key\n} = require('interface-datastore');\n\nconst {\n  CID\n} = require('multiformats');\n\nconst raw = require('multiformats/codecs/raw');\n\nconst errCode = require('err-code');\n\nconst {\n  base32\n} = require('multiformats/bases/base32');\n\nconst Digest = require('multiformats/hashes/digest');\n/**\n * Transform a cid to the appropriate datastore key.\n *\n * @param {CID} c\n */\n\n\nfunction cidToKey(c) {\n  const cid = CID.asCID(c);\n\n  if (cid == null) {\n    throw errCode(new Error('Not a valid cid'), 'ERR_INVALID_CID');\n  }\n\n  const encoded = base32.encode(cid.multihash.bytes);\n  return new Key('/' + encoded.slice(1).toUpperCase(), false);\n}\n/**\n * Transform a datastore Key instance to a CID\n * As Key is a multihash of the CID, it is reconstructed using IPLD's RAW codec.\n * Hence it is highly probable that stored CID will differ from a CID retrieved from blockstore.\n *\n * @param {Key} key\n */\n\n\nfunction keyToCid(key) {\n  // Block key is of the form /<base32 encoded string>\n  return CID.createV1(raw.code, keyToMultihash(key));\n}\n/**\n * @param {Key | string} key\n */\n\n\nfunction keyToMultihash(key) {\n  return Digest.decode(base32.decode(`b${key.toString().toLowerCase().substring(1)}`));\n}\n\nmodule.exports = {\n  cidToKey,\n  keyToCid,\n  keyToMultihash\n};","map":{"version":3,"names":["Key","require","CID","raw","errCode","base32","Digest","cidToKey","c","cid","asCID","Error","encoded","encode","multihash","bytes","slice","toUpperCase","keyToCid","key","createV1","code","keyToMultihash","decode","toString","toLowerCase","substring","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-repo/src/utils/blockstore.js"],"sourcesContent":["'use strict'\n\nconst { Key } = require('interface-datastore')\nconst { CID } = require('multiformats')\nconst raw = require('multiformats/codecs/raw')\nconst errCode = require('err-code')\nconst { base32 } = require('multiformats/bases/base32')\nconst Digest = require('multiformats/hashes/digest')\n\n/**\n * Transform a cid to the appropriate datastore key.\n *\n * @param {CID} c\n */\nfunction cidToKey (c) {\n  const cid = CID.asCID(c)\n\n  if (cid == null) {\n    throw errCode(new Error('Not a valid cid'), 'ERR_INVALID_CID')\n  }\n\n  const encoded = base32.encode(cid.multihash.bytes)\n\n  return new Key('/' + encoded.slice(1).toUpperCase(), false)\n}\n\n/**\n * Transform a datastore Key instance to a CID\n * As Key is a multihash of the CID, it is reconstructed using IPLD's RAW codec.\n * Hence it is highly probable that stored CID will differ from a CID retrieved from blockstore.\n *\n * @param {Key} key\n */\nfunction keyToCid (key) {\n  // Block key is of the form /<base32 encoded string>\n  return CID.createV1(raw.code, keyToMultihash(key))\n}\n\n/**\n * @param {Key | string} key\n */\nfunction keyToMultihash (key) {\n  return Digest.decode(base32.decode(`b${key.toString().toLowerCase().substring(1)}`))\n}\n\nmodule.exports = {\n  cidToKey,\n  keyToCid,\n  keyToMultihash\n}\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA;AAAF,IAAUC,OAAO,CAAC,qBAAD,CAAvB;;AACA,MAAM;EAAEC;AAAF,IAAUD,OAAO,CAAC,cAAD,CAAvB;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,yBAAD,CAAnB;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAM;EAAEI;AAAF,IAAaJ,OAAO,CAAC,2BAAD,CAA1B;;AACA,MAAMK,MAAM,GAAGL,OAAO,CAAC,4BAAD,CAAtB;AAEA;AACA;AACA;AACA;AACA;;;AACA,SAASM,QAAT,CAAmBC,CAAnB,EAAsB;EACpB,MAAMC,GAAG,GAAGP,GAAG,CAACQ,KAAJ,CAAUF,CAAV,CAAZ;;EAEA,IAAIC,GAAG,IAAI,IAAX,EAAiB;IACf,MAAML,OAAO,CAAC,IAAIO,KAAJ,CAAU,iBAAV,CAAD,EAA+B,iBAA/B,CAAb;EACD;;EAED,MAAMC,OAAO,GAAGP,MAAM,CAACQ,MAAP,CAAcJ,GAAG,CAACK,SAAJ,CAAcC,KAA5B,CAAhB;EAEA,OAAO,IAAIf,GAAJ,CAAQ,MAAMY,OAAO,CAACI,KAAR,CAAc,CAAd,EAAiBC,WAAjB,EAAd,EAA8C,KAA9C,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,QAAT,CAAmBC,GAAnB,EAAwB;EACtB;EACA,OAAOjB,GAAG,CAACkB,QAAJ,CAAajB,GAAG,CAACkB,IAAjB,EAAuBC,cAAc,CAACH,GAAD,CAArC,CAAP;AACD;AAED;AACA;AACA;;;AACA,SAASG,cAAT,CAAyBH,GAAzB,EAA8B;EAC5B,OAAOb,MAAM,CAACiB,MAAP,CAAclB,MAAM,CAACkB,MAAP,CAAe,IAAGJ,GAAG,CAACK,QAAJ,GAAeC,WAAf,GAA6BC,SAA7B,CAAuC,CAAvC,CAA0C,EAA5D,CAAd,CAAP;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiB;EACfrB,QADe;EAEfW,QAFe;EAGfI;AAHe,CAAjB"},"metadata":{},"sourceType":"script"}