{"ast":null,"code":"'use strict';\n\nconst {\n  base58btc\n} = require('multiformats/bases/base58');\n\nconst utils = require('../utils');\n\nconst Run = require('./run');\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {{from: PeerId, val: Uint8Array}} DHTQueryValue\n * @typedef {{from: PeerId, err: Error}} DHTQueryError\n * @typedef {DHTQueryValue | DHTQueryError} DHTQueryResult\n * @typedef {import('../').PeerData} PeerData\n *\n * @typedef {{ pathComplete?: boolean, queryComplete?: boolean, closerPeers?: PeerData[], peer?: PeerData, success?: boolean }} QueryResult\n */\n\n/**\n * User-supplied function to set up an individual disjoint path. Per-path\n * query state should be held in this function's closure.\n *\n * Accepts the numeric index from zero to numPaths - 1 and returns a function\n * to call on each peer in the query.\n *\n * @typedef {(pathIndex: number, numPaths: number) => QueryFunc } MakeQueryFunc\n */\n\n/**\n * Query function\n *\n * @typedef {(peer: PeerId) => Promise<QueryResult> } QueryFunc\n */\n\n/**\n * Divide peers up into disjoint paths (subqueries). Any peer can only be used once over all paths.\n * Within each path, query peers from closest to farthest away.\n */\n\n\nclass Query {\n  /**\n   * Create a new query. The makePath function is called once per disjoint path, so that per-path\n   * variables can be created in that scope. makePath then returns the actual query function (queryFunc) to\n   * use when on that path.\n   *\n   * @param {import('../index')} dht - DHT instance\n   * @param {Uint8Array} key\n   * @param {MakeQueryFunc} makePath - Called to set up each disjoint path. Must return the query function.\n   */\n  constructor(dht, key, makePath) {\n    this.dht = dht;\n    this.key = key;\n    this.makePath = makePath;\n    this._log = utils.logger(this.dht.peerId, 'query:' + base58btc.baseEncode(key));\n    this.running = false;\n    this._onStart = this._onStart.bind(this);\n    this._onComplete = this._onComplete.bind(this);\n  }\n  /**\n   * Run this query, start with the given list of peers first.\n   *\n   * @param {PeerId[]} peers\n   */\n\n\n  async run(peers) {\n    // eslint-disable-line require-await\n    if (!this.dht._queryManager.running) {\n      this._log.error('Attempt to run query after shutdown');\n\n      return {\n        finalSet: new Set(),\n        paths: []\n      };\n    }\n\n    if (peers.length === 0) {\n      this._log.error('Running query with no peers');\n\n      return {\n        finalSet: new Set(),\n        paths: []\n      };\n    }\n\n    this._run = new Run(this);\n\n    this._log(`query running with K=${this.dht.kBucketSize}, A=${this.dht.concurrency}, D=${Math.min(this.dht.disjointPaths, peers.length)}`);\n\n    this._run.once('start', this._onStart);\n\n    this._run.once('complete', this._onComplete);\n\n    return this._run.execute(peers);\n  }\n  /**\n   * Called when the run starts.\n   */\n\n\n  _onStart() {\n    this.running = true;\n    this._startTime = Date.now();\n\n    this._log('query:start'); // Register this query so we can stop it if the DHT stops\n\n\n    this.dht._queryManager.queryStarted(this);\n  }\n  /**\n   * Called when the run completes (even if there's an error).\n   */\n\n\n  _onComplete() {\n    // Ensure worker queues for all paths are stopped at the end of the query\n    this.stop();\n  }\n  /**\n   * Stop the query.\n   */\n\n\n  stop() {\n    this._log(`query:done in ${Date.now() - (this._startTime || 0)}ms`);\n\n    if (this._run) {\n      this._log(`${this._run.errors.length} of ${this._run.peersSeen.size} peers errored (${this._run.errors.length / this._run.peersSeen.size * 100}% fail rate)`);\n    }\n\n    if (!this.running) {\n      return;\n    }\n\n    this.running = false;\n\n    if (this._run) {\n      this._run.removeListener('start', this._onStart);\n\n      this._run.removeListener('complete', this._onComplete);\n\n      this._run.stop();\n    }\n\n    this.dht._queryManager.queryCompleted(this);\n  }\n\n}\n\nmodule.exports = Query;","map":{"version":3,"names":["base58btc","require","utils","Run","Query","constructor","dht","key","makePath","_log","logger","peerId","baseEncode","running","_onStart","bind","_onComplete","run","peers","_queryManager","error","finalSet","Set","paths","length","_run","kBucketSize","concurrency","Math","min","disjointPaths","once","execute","_startTime","Date","now","queryStarted","stop","errors","peersSeen","size","removeListener","queryCompleted","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-kad-dht/src/query/index.js"],"sourcesContent":["'use strict'\n\nconst { base58btc } = require('multiformats/bases/base58')\n\nconst utils = require('../utils')\nconst Run = require('./run')\n\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {{from: PeerId, val: Uint8Array}} DHTQueryValue\n * @typedef {{from: PeerId, err: Error}} DHTQueryError\n * @typedef {DHTQueryValue | DHTQueryError} DHTQueryResult\n * @typedef {import('../').PeerData} PeerData\n *\n * @typedef {{ pathComplete?: boolean, queryComplete?: boolean, closerPeers?: PeerData[], peer?: PeerData, success?: boolean }} QueryResult\n */\n\n/**\n * User-supplied function to set up an individual disjoint path. Per-path\n * query state should be held in this function's closure.\n *\n * Accepts the numeric index from zero to numPaths - 1 and returns a function\n * to call on each peer in the query.\n *\n * @typedef {(pathIndex: number, numPaths: number) => QueryFunc } MakeQueryFunc\n */\n\n/**\n * Query function\n *\n * @typedef {(peer: PeerId) => Promise<QueryResult> } QueryFunc\n */\n\n/**\n * Divide peers up into disjoint paths (subqueries). Any peer can only be used once over all paths.\n * Within each path, query peers from closest to farthest away.\n */\nclass Query {\n  /**\n   * Create a new query. The makePath function is called once per disjoint path, so that per-path\n   * variables can be created in that scope. makePath then returns the actual query function (queryFunc) to\n   * use when on that path.\n   *\n   * @param {import('../index')} dht - DHT instance\n   * @param {Uint8Array} key\n   * @param {MakeQueryFunc} makePath - Called to set up each disjoint path. Must return the query function.\n   */\n  constructor (dht, key, makePath) {\n    this.dht = dht\n    this.key = key\n    this.makePath = makePath\n    this._log = utils.logger(this.dht.peerId, 'query:' + base58btc.baseEncode(key))\n\n    this.running = false\n\n    this._onStart = this._onStart.bind(this)\n    this._onComplete = this._onComplete.bind(this)\n  }\n\n  /**\n   * Run this query, start with the given list of peers first.\n   *\n   * @param {PeerId[]} peers\n   */\n  async run (peers) { // eslint-disable-line require-await\n    if (!this.dht._queryManager.running) {\n      this._log.error('Attempt to run query after shutdown')\n      return { finalSet: new Set(), paths: [] }\n    }\n\n    if (peers.length === 0) {\n      this._log.error('Running query with no peers')\n      return { finalSet: new Set(), paths: [] }\n    }\n\n    this._run = new Run(this)\n\n    this._log(`query running with K=${this.dht.kBucketSize}, A=${this.dht.concurrency}, D=${Math.min(this.dht.disjointPaths, peers.length)}`)\n    this._run.once('start', this._onStart)\n    this._run.once('complete', this._onComplete)\n\n    return this._run.execute(peers)\n  }\n\n  /**\n   * Called when the run starts.\n   */\n  _onStart () {\n    this.running = true\n    this._startTime = Date.now()\n    this._log('query:start')\n\n    // Register this query so we can stop it if the DHT stops\n    this.dht._queryManager.queryStarted(this)\n  }\n\n  /**\n   * Called when the run completes (even if there's an error).\n   */\n  _onComplete () {\n    // Ensure worker queues for all paths are stopped at the end of the query\n    this.stop()\n  }\n\n  /**\n   * Stop the query.\n   */\n  stop () {\n    this._log(`query:done in ${Date.now() - (this._startTime || 0)}ms`)\n\n    if (this._run) {\n      this._log(`${this._run.errors.length} of ${this._run.peersSeen.size} peers errored (${this._run.errors.length / this._run.peersSeen.size * 100}% fail rate)`)\n    }\n\n    if (!this.running) {\n      return\n    }\n\n    this.running = false\n\n    if (this._run) {\n      this._run.removeListener('start', this._onStart)\n      this._run.removeListener('complete', this._onComplete)\n      this._run.stop()\n    }\n\n    this.dht._queryManager.queryCompleted(this)\n  }\n}\n\nmodule.exports = Query\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}