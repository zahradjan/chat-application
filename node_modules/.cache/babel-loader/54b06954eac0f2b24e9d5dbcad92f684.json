{"ast":null,"code":"'use strict';\n\nconst errCode = require('err-code');\n\nconst log = require('debug')('ipfs:mfs:utils:to-async-iterator');\n\nconst {\n  MFS_MAX_CHUNK_SIZE\n} = require('../../../utils');\n\nconst {\n  fromString: uint8ArrayFromString\n} = require('uint8arrays/from-string');\n/**\n * @param {*} content\n */\n\n\nconst toAsyncIterator = content => {\n  if (!content) {\n    throw errCode(new Error('paths must start with a leading slash'), 'ERR_INVALID_PATH');\n  }\n\n  if (typeof content === 'string' || content instanceof String) {\n    log('Content was a string');\n    content = uint8ArrayFromString(content.toString());\n  }\n\n  if (content.length) {\n    log('Content was array-like');\n    return {\n      [Symbol.asyncIterator]: function* bufferContent() {\n        yield content;\n      }\n    };\n  }\n\n  if (content[Symbol.asyncIterator]) {\n    log('Content was an async iterator');\n    return content;\n  }\n\n  if (content[Symbol.iterator]) {\n    log('Content was an iterator');\n    return content;\n  }\n\n  if (global.Blob && content instanceof global.Blob) {\n    // HTML5 Blob objects (including Files)\n    log('Content was an HTML5 Blob');\n    let index = 0;\n    const iterator = {\n      next: () => {\n        if (index > content.size) {\n          return {\n            done: true\n          };\n        }\n\n        return new Promise((resolve, reject) => {\n          const chunk = content.slice(index, MFS_MAX_CHUNK_SIZE);\n          index += MFS_MAX_CHUNK_SIZE;\n          const reader = new global.FileReader();\n          /**\n           * @param {{ error?: Error }} ev\n           */\n\n          const handleLoad = ev => {\n            // @ts-ignore No overload matches this call.\n            reader.removeEventListener('loadend', handleLoad, false);\n\n            if (ev.error) {\n              return reject(ev.error);\n            }\n\n            resolve({\n              done: false,\n              value: new Uint8Array(\n              /** @type {ArrayBuffer} */\n              reader.result)\n            });\n          }; // @ts-ignore No overload matches this call.\n\n\n          reader.addEventListener('loadend', handleLoad);\n          reader.readAsArrayBuffer(chunk);\n        });\n      }\n    };\n    return {\n      [Symbol.asyncIterator]: () => {\n        return iterator;\n      }\n    };\n  }\n\n  throw errCode(new Error(`Don't know how to convert ${content} into an async iterator`), 'ERR_INVALID_PARAMS');\n};\n\nmodule.exports = toAsyncIterator;","map":{"version":3,"names":["errCode","require","log","MFS_MAX_CHUNK_SIZE","fromString","uint8ArrayFromString","toAsyncIterator","content","Error","String","toString","length","Symbol","asyncIterator","bufferContent","iterator","global","Blob","index","next","size","done","Promise","resolve","reject","chunk","slice","reader","FileReader","handleLoad","ev","removeEventListener","error","value","Uint8Array","result","addEventListener","readAsArrayBuffer","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/files/utils/to-async-iterator.js"],"sourcesContent":["'use strict'\n\nconst errCode = require('err-code')\nconst log = require('debug')('ipfs:mfs:utils:to-async-iterator')\nconst {\n  MFS_MAX_CHUNK_SIZE\n} = require('../../../utils')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\n\n/**\n * @param {*} content\n */\nconst toAsyncIterator = (content) => {\n  if (!content) {\n    throw errCode(new Error('paths must start with a leading slash'), 'ERR_INVALID_PATH')\n  }\n\n  if (typeof content === 'string' || content instanceof String) {\n    log('Content was a string')\n\n    content = uint8ArrayFromString(content.toString())\n  }\n\n  if (content.length) {\n    log('Content was array-like')\n\n    return {\n      [Symbol.asyncIterator]: function * bufferContent () {\n        yield content\n      }\n    }\n  }\n\n  if (content[Symbol.asyncIterator]) {\n    log('Content was an async iterator')\n    return content\n  }\n\n  if (content[Symbol.iterator]) {\n    log('Content was an iterator')\n    return content\n  }\n\n  if (global.Blob && content instanceof global.Blob) {\n    // HTML5 Blob objects (including Files)\n    log('Content was an HTML5 Blob')\n\n    let index = 0\n\n    const iterator = {\n      next: () => {\n        if (index > content.size) {\n          return {\n            done: true\n          }\n        }\n\n        return new Promise((resolve, reject) => {\n          const chunk = content.slice(index, MFS_MAX_CHUNK_SIZE)\n          index += MFS_MAX_CHUNK_SIZE\n\n          const reader = new global.FileReader()\n\n          /**\n           * @param {{ error?: Error }} ev\n           */\n          const handleLoad = (ev) => {\n            // @ts-ignore No overload matches this call.\n            reader.removeEventListener('loadend', handleLoad, false)\n\n            if (ev.error) {\n              return reject(ev.error)\n            }\n\n            resolve({\n              done: false,\n              value: new Uint8Array(/** @type {ArrayBuffer} */(reader.result))\n            })\n          }\n\n          // @ts-ignore No overload matches this call.\n          reader.addEventListener('loadend', handleLoad)\n          reader.readAsArrayBuffer(chunk)\n        })\n      }\n    }\n\n    return {\n      [Symbol.asyncIterator]: () => {\n        return iterator\n      }\n    }\n  }\n\n  throw errCode(new Error(`Don't know how to convert ${content} into an async iterator`), 'ERR_INVALID_PARAMS')\n}\n\nmodule.exports = toAsyncIterator\n"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,OAAD,CAAP,CAAiB,kCAAjB,CAAZ;;AACA,MAAM;EACJE;AADI,IAEFF,OAAO,CAAC,gBAAD,CAFX;;AAGA,MAAM;EAAEG,UAAU,EAAEC;AAAd,IAAuCJ,OAAO,CAAC,yBAAD,CAApD;AAEA;AACA;AACA;;;AACA,MAAMK,eAAe,GAAIC,OAAD,IAAa;EACnC,IAAI,CAACA,OAAL,EAAc;IACZ,MAAMP,OAAO,CAAC,IAAIQ,KAAJ,CAAU,uCAAV,CAAD,EAAqD,kBAArD,CAAb;EACD;;EAED,IAAI,OAAOD,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,YAAYE,MAAtD,EAA8D;IAC5DP,GAAG,CAAC,sBAAD,CAAH;IAEAK,OAAO,GAAGF,oBAAoB,CAACE,OAAO,CAACG,QAAR,EAAD,CAA9B;EACD;;EAED,IAAIH,OAAO,CAACI,MAAZ,EAAoB;IAClBT,GAAG,CAAC,wBAAD,CAAH;IAEA,OAAO;MACL,CAACU,MAAM,CAACC,aAAR,GAAwB,UAAWC,aAAX,GAA4B;QAClD,MAAMP,OAAN;MACD;IAHI,CAAP;EAKD;;EAED,IAAIA,OAAO,CAACK,MAAM,CAACC,aAAR,CAAX,EAAmC;IACjCX,GAAG,CAAC,+BAAD,CAAH;IACA,OAAOK,OAAP;EACD;;EAED,IAAIA,OAAO,CAACK,MAAM,CAACG,QAAR,CAAX,EAA8B;IAC5Bb,GAAG,CAAC,yBAAD,CAAH;IACA,OAAOK,OAAP;EACD;;EAED,IAAIS,MAAM,CAACC,IAAP,IAAeV,OAAO,YAAYS,MAAM,CAACC,IAA7C,EAAmD;IACjD;IACAf,GAAG,CAAC,2BAAD,CAAH;IAEA,IAAIgB,KAAK,GAAG,CAAZ;IAEA,MAAMH,QAAQ,GAAG;MACfI,IAAI,EAAE,MAAM;QACV,IAAID,KAAK,GAAGX,OAAO,CAACa,IAApB,EAA0B;UACxB,OAAO;YACLC,IAAI,EAAE;UADD,CAAP;QAGD;;QAED,OAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;UACtC,MAAMC,KAAK,GAAGlB,OAAO,CAACmB,KAAR,CAAcR,KAAd,EAAqBf,kBAArB,CAAd;UACAe,KAAK,IAAIf,kBAAT;UAEA,MAAMwB,MAAM,GAAG,IAAIX,MAAM,CAACY,UAAX,EAAf;UAEA;AACV;AACA;;UACU,MAAMC,UAAU,GAAIC,EAAD,IAAQ;YACzB;YACAH,MAAM,CAACI,mBAAP,CAA2B,SAA3B,EAAsCF,UAAtC,EAAkD,KAAlD;;YAEA,IAAIC,EAAE,CAACE,KAAP,EAAc;cACZ,OAAOR,MAAM,CAACM,EAAE,CAACE,KAAJ,CAAb;YACD;;YAEDT,OAAO,CAAC;cACNF,IAAI,EAAE,KADA;cAENY,KAAK,EAAE,IAAIC,UAAJ;cAAe;cAA2BP,MAAM,CAACQ,MAAjD;YAFD,CAAD,CAAP;UAID,CAZD,CATsC,CAuBtC;;;UACAR,MAAM,CAACS,gBAAP,CAAwB,SAAxB,EAAmCP,UAAnC;UACAF,MAAM,CAACU,iBAAP,CAAyBZ,KAAzB;QACD,CA1BM,CAAP;MA2BD;IAnCc,CAAjB;IAsCA,OAAO;MACL,CAACb,MAAM,CAACC,aAAR,GAAwB,MAAM;QAC5B,OAAOE,QAAP;MACD;IAHI,CAAP;EAKD;;EAED,MAAMf,OAAO,CAAC,IAAIQ,KAAJ,CAAW,6BAA4BD,OAAQ,yBAA/C,CAAD,EAA2E,oBAA3E,CAAb;AACD,CAnFD;;AAqFA+B,MAAM,CAACC,OAAP,GAAiBjC,eAAjB"},"metadata":{},"sourceType":"script"}