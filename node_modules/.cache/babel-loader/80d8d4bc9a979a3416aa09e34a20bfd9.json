{"ast":null,"code":"'use strict';\n\nconst {\n  BlockstoreAdapter\n} = require('interface-blockstore');\n\nconst merge = require('it-merge');\n\nconst pushable = require('it-pushable');\n\nconst filter = require('it-filter');\n/**\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('interface-blockstore').Query} Query\n * @typedef {import('interface-blockstore').KeyQuery} KeyQuery\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-bitswap').IPFSBitswap} Bitswap\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/block').RmOptions} RmOptions\n */\n\n/**\n * BlockStorage is a hybrid block datastore. It stores data in a local\n * datastore and may retrieve data from a remote Exchange.\n * It uses an internal `datastore.Datastore` instance to store values.\n *\n * @implements {Blockstore}\n */\n\n\nclass BlockStorage extends BlockstoreAdapter {\n  /**\n   * Create a new BlockStorage\n   *\n   * @param {Blockstore} blockstore\n   * @param {Bitswap} bitswap\n   */\n  constructor(blockstore, bitswap) {\n    super();\n    this.child = blockstore;\n    this.bitswap = bitswap;\n  }\n\n  open() {\n    return this.child.open();\n  }\n\n  close() {\n    return this.child.close();\n  }\n\n  unwrap() {\n    return this.child;\n  }\n  /**\n   * Put a block to the underlying datastore\n   *\n   * @param {CID} cid\n   * @param {Uint8Array} block\n   * @param {AbortOptions} [options]\n   */\n\n\n  async put(cid, block) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (await this.has(cid)) {\n      return;\n    }\n\n    if (this.bitswap.isStarted()) {\n      await this.bitswap.put(cid, block, options);\n    } else {\n      await this.child.put(cid, block, options);\n    }\n  }\n  /**\n   * Put a multiple blocks to the underlying datastore\n   *\n   * @param {AsyncIterable<{ key: CID, value: Uint8Array }> | Iterable<{ key: CID, value: Uint8Array }>} blocks\n   * @param {AbortOptions} [options]\n   */\n\n\n  async *putMany(blocks) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const missingBlocks = filter(blocks, async _ref => {\n      let {\n        key\n      } = _ref;\n      return !(await this.has(key));\n    });\n\n    if (this.bitswap.isStarted()) {\n      yield* this.bitswap.putMany(missingBlocks, options);\n    } else {\n      yield* this.child.putMany(missingBlocks, options);\n    }\n  }\n  /**\n   * Get a block by cid\n   *\n   * @param {CID} cid\n   * @param {AbortOptions} [options]\n   */\n\n\n  async get(cid) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!(await this.has(cid)) && this.bitswap.isStarted()) {\n      return this.bitswap.get(cid, options);\n    } else {\n      return this.child.get(cid, options);\n    }\n  }\n  /**\n   * Get multiple blocks back from an array of cids\n   *\n   * @param {AsyncIterable<CID> | Iterable<CID>} cids\n   * @param {AbortOptions} [options]\n   */\n\n\n  async *getMany(cids) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const getFromBitswap = pushable();\n    const getFromChild = pushable();\n    Promise.resolve().then(async () => {\n      for await (const cid of cids) {\n        if (!(await this.has(cid)) && this.bitswap.isStarted()) {\n          getFromBitswap.push(cid);\n        } else {\n          getFromChild.push(cid);\n        }\n      }\n\n      getFromBitswap.end();\n      getFromChild.end();\n    });\n    yield* merge(this.bitswap.getMany(getFromBitswap, options), this.child.getMany(getFromChild, options));\n  }\n  /**\n   * Delete a block from the blockstore\n   *\n   * @param {CID} cid\n   * @param {RmOptions} [options]\n   */\n\n\n  async delete(cid, options) {\n    await this.child.delete(cid, options);\n  }\n  /**\n   * Delete multiple blocks from the blockstore\n   *\n   * @param {AsyncIterable<CID> | Iterable<CID>} cids\n   * @param {RmOptions} [options]\n   */\n\n\n  async *deleteMany(cids, options) {\n    yield* this.child.deleteMany(cids, options);\n  }\n  /**\n   * @param {CID} cid\n   * @param {AbortOptions} options\n   */\n\n\n  async has(cid) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.child.has(cid, options);\n  }\n  /**\n   * @param {Query} q\n   * @param {AbortOptions} options\n   */\n\n\n  async *query(q) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    yield* this.child.query(q, options);\n  }\n  /**\n   * @param {KeyQuery} q\n   * @param {AbortOptions} options\n   */\n\n\n  async *queryKeys(q) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    yield* this.child.queryKeys(q, options);\n  }\n\n}\n\nmodule.exports = BlockStorage;","map":{"version":3,"names":["BlockstoreAdapter","require","merge","pushable","filter","BlockStorage","constructor","blockstore","bitswap","child","open","close","unwrap","put","cid","block","options","has","isStarted","putMany","blocks","missingBlocks","key","get","getMany","cids","getFromBitswap","getFromChild","Promise","resolve","then","push","end","delete","deleteMany","query","q","queryKeys","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/block-storage.js"],"sourcesContent":["'use strict'\n\nconst { BlockstoreAdapter } = require('interface-blockstore')\nconst merge = require('it-merge')\nconst pushable = require('it-pushable')\nconst filter = require('it-filter')\n\n/**\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('interface-blockstore').Query} Query\n * @typedef {import('interface-blockstore').KeyQuery} KeyQuery\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-bitswap').IPFSBitswap} Bitswap\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/block').RmOptions} RmOptions\n */\n\n/**\n * BlockStorage is a hybrid block datastore. It stores data in a local\n * datastore and may retrieve data from a remote Exchange.\n * It uses an internal `datastore.Datastore` instance to store values.\n *\n * @implements {Blockstore}\n */\nclass BlockStorage extends BlockstoreAdapter {\n  /**\n   * Create a new BlockStorage\n   *\n   * @param {Blockstore} blockstore\n   * @param {Bitswap} bitswap\n   */\n  constructor (blockstore, bitswap) {\n    super()\n\n    this.child = blockstore\n    this.bitswap = bitswap\n  }\n\n  open () {\n    return this.child.open()\n  }\n\n  close () {\n    return this.child.close()\n  }\n\n  unwrap () {\n    return this.child\n  }\n\n  /**\n   * Put a block to the underlying datastore\n   *\n   * @param {CID} cid\n   * @param {Uint8Array} block\n   * @param {AbortOptions} [options]\n   */\n  async put (cid, block, options = {}) {\n    if (await this.has(cid)) {\n      return\n    }\n\n    if (this.bitswap.isStarted()) {\n      await this.bitswap.put(cid, block, options)\n    } else {\n      await this.child.put(cid, block, options)\n    }\n  }\n\n  /**\n   * Put a multiple blocks to the underlying datastore\n   *\n   * @param {AsyncIterable<{ key: CID, value: Uint8Array }> | Iterable<{ key: CID, value: Uint8Array }>} blocks\n   * @param {AbortOptions} [options]\n   */\n  async * putMany (blocks, options = {}) {\n    const missingBlocks = filter(blocks, async ({ key }) => { return !(await this.has(key)) })\n\n    if (this.bitswap.isStarted()) {\n      yield * this.bitswap.putMany(missingBlocks, options)\n    } else {\n      yield * this.child.putMany(missingBlocks, options)\n    }\n  }\n\n  /**\n   * Get a block by cid\n   *\n   * @param {CID} cid\n   * @param {AbortOptions} [options]\n   */\n  async get (cid, options = {}) {\n    if (!(await this.has(cid)) && this.bitswap.isStarted()) {\n      return this.bitswap.get(cid, options)\n    } else {\n      return this.child.get(cid, options)\n    }\n  }\n\n  /**\n   * Get multiple blocks back from an array of cids\n   *\n   * @param {AsyncIterable<CID> | Iterable<CID>} cids\n   * @param {AbortOptions} [options]\n   */\n  async * getMany (cids, options = {}) {\n    const getFromBitswap = pushable()\n    const getFromChild = pushable()\n\n    Promise.resolve().then(async () => {\n      for await (const cid of cids) {\n        if (!(await this.has(cid)) && this.bitswap.isStarted()) {\n          getFromBitswap.push(cid)\n        } else {\n          getFromChild.push(cid)\n        }\n      }\n\n      getFromBitswap.end()\n      getFromChild.end()\n    })\n\n    yield * merge(\n      this.bitswap.getMany(getFromBitswap, options),\n      this.child.getMany(getFromChild, options)\n    )\n  }\n\n  /**\n   * Delete a block from the blockstore\n   *\n   * @param {CID} cid\n   * @param {RmOptions} [options]\n   */\n  async delete (cid, options) {\n    await this.child.delete(cid, options)\n  }\n\n  /**\n   * Delete multiple blocks from the blockstore\n   *\n   * @param {AsyncIterable<CID> | Iterable<CID>} cids\n   * @param {RmOptions} [options]\n   */\n  async * deleteMany (cids, options) {\n    yield * this.child.deleteMany(cids, options)\n  }\n\n  /**\n   * @param {CID} cid\n   * @param {AbortOptions} options\n   */\n  async has (cid, options = {}) {\n    return this.child.has(cid, options)\n  }\n\n  /**\n   * @param {Query} q\n   * @param {AbortOptions} options\n   */\n  async * query (q, options = {}) {\n    yield * this.child.query(q, options)\n  }\n\n  /**\n   * @param {KeyQuery} q\n   * @param {AbortOptions} options\n   */\n  async * queryKeys (q, options = {}) {\n    yield * this.child.queryKeys(q, options)\n  }\n}\n\nmodule.exports = BlockStorage\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}