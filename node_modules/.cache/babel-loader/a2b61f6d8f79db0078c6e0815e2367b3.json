{"ast":null,"code":"'use strict'; // @ts-ignore - no types\n\nconst mortice = require('mortice');\n/**\n * @typedef {object} Lock\n * @property {(fn: (...args: any) => any) => (...args: any) => any} readLock\n * @property {(fn: (...args: any) => any) => (...args: any) => any} writeLock\n */\n\n/** @type {Lock} */\n\n\nlet lock;\n/**\n * @param {boolean} [repoOwner]\n */\n\nmodule.exports = function () {\n  let repoOwner = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n  if (lock) {\n    return lock;\n  }\n\n  const mutex = mortice({\n    // ordinarily the main thread would store the read/write lock but\n    // if we are the thread that owns the repo, we can store the lock\n    // on this process even if we are a worker thread\n    singleProcess: repoOwner\n  });\n  lock = {\n    readLock: func => {\n      return async function () {\n        const releaseLock = await mutex.readLock();\n\n        try {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          return await func.apply(null, args);\n        } finally {\n          releaseLock();\n        }\n      };\n    },\n    writeLock: func => {\n      return async function () {\n        const releaseLock = await mutex.writeLock();\n\n        try {\n          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n            args[_key2] = arguments[_key2];\n          }\n\n          return await func.apply(null, args);\n        } finally {\n          releaseLock();\n        }\n      };\n    }\n  };\n  return lock;\n};","map":{"version":3,"names":["mortice","require","lock","module","exports","repoOwner","mutex","singleProcess","readLock","func","releaseLock","args","apply","writeLock"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/files/utils/create-lock.js"],"sourcesContent":["'use strict'\n\n// @ts-ignore - no types\nconst mortice = require('mortice')\n\n/**\n * @typedef {object} Lock\n * @property {(fn: (...args: any) => any) => (...args: any) => any} readLock\n * @property {(fn: (...args: any) => any) => (...args: any) => any} writeLock\n */\n\n/** @type {Lock} */\nlet lock\n\n/**\n * @param {boolean} [repoOwner]\n */\nmodule.exports = (repoOwner = false) => {\n  if (lock) {\n    return lock\n  }\n\n  const mutex = mortice({\n    // ordinarily the main thread would store the read/write lock but\n    // if we are the thread that owns the repo, we can store the lock\n    // on this process even if we are a worker thread\n    singleProcess: repoOwner\n  })\n\n  lock = {\n    readLock: (func) => {\n      return async (...args) => {\n        const releaseLock = await mutex.readLock()\n\n        try {\n          return await func.apply(null, args)\n        } finally {\n          releaseLock()\n        }\n      }\n    },\n\n    writeLock: (func) => {\n      return async (...args) => {\n        const releaseLock = await mutex.writeLock()\n\n        try {\n          return await func.apply(null, args)\n        } finally {\n          releaseLock()\n        }\n      }\n    }\n  }\n\n  return lock\n}\n"],"mappings":"AAAA,a,CAEA;;AACA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;AACA,IAAIC,IAAJ;AAEA;AACA;AACA;;AACAC,MAAM,CAACC,OAAP,GAAiB,YAAuB;EAAA,IAAtBC,SAAsB,uEAAV,KAAU;;EACtC,IAAIH,IAAJ,EAAU;IACR,OAAOA,IAAP;EACD;;EAED,MAAMI,KAAK,GAAGN,OAAO,CAAC;IACpB;IACA;IACA;IACAO,aAAa,EAAEF;EAJK,CAAD,CAArB;EAOAH,IAAI,GAAG;IACLM,QAAQ,EAAGC,IAAD,IAAU;MAClB,OAAO,kBAAmB;QACxB,MAAMC,WAAW,GAAG,MAAMJ,KAAK,CAACE,QAAN,EAA1B;;QAEA,IAAI;UAAA,kCAHWG,IAGX;YAHWA,IAGX;UAAA;;UACF,OAAO,MAAMF,IAAI,CAACG,KAAL,CAAW,IAAX,EAAiBD,IAAjB,CAAb;QACD,CAFD,SAEU;UACRD,WAAW;QACZ;MACF,CARD;IASD,CAXI;IAaLG,SAAS,EAAGJ,IAAD,IAAU;MACnB,OAAO,kBAAmB;QACxB,MAAMC,WAAW,GAAG,MAAMJ,KAAK,CAACO,SAAN,EAA1B;;QAEA,IAAI;UAAA,mCAHWF,IAGX;YAHWA,IAGX;UAAA;;UACF,OAAO,MAAMF,IAAI,CAACG,KAAL,CAAW,IAAX,EAAiBD,IAAjB,CAAb;QACD,CAFD,SAEU;UACRD,WAAW;QACZ;MACF,CARD;IASD;EAvBI,CAAP;EA0BA,OAAOR,IAAP;AACD,CAvCD"},"metadata":{},"sourceType":"script"}