{"ast":null,"code":"import _defineProperty from \"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _asyncToGenerator from \"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createForOfIteratorHelper from \"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _slicedToArray from \"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncGeneratorDelegate from \"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/esm/asyncGeneratorDelegate.js\";\nimport _awaitAsyncGenerator from \"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime().mark(_syncBatch),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime().mark(syncBuffer),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime().mark(_syncConcat),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime().mark(_syncTake),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime().mark(_syncTime);\n\nfunction _batch(_x, _x2) {\n  return _batch2.apply(this, arguments);\n}\n\nfunction _batch2() {\n  _batch2 = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(size, iterable) {\n    var dataBatch, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, data;\n\n    return _regeneratorRuntime().wrap(function _callee13$(_context14) {\n      while (1) {\n        switch (_context14.prev = _context14.next) {\n          case 0:\n            dataBatch = [];\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context14.prev = 3;\n            _iterator = _asyncIterator(iterable);\n\n          case 5:\n            _context14.next = 7;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 7:\n            if (!(_iteratorAbruptCompletion = !(_step = _context14.sent).done)) {\n              _context14.next = 17;\n              break;\n            }\n\n            data = _step.value;\n            dataBatch.push(data);\n\n            if (!(dataBatch.length === size)) {\n              _context14.next = 14;\n              break;\n            }\n\n            _context14.next = 13;\n            return dataBatch;\n\n          case 13:\n            dataBatch = [];\n\n          case 14:\n            _iteratorAbruptCompletion = false;\n            _context14.next = 5;\n            break;\n\n          case 17:\n            _context14.next = 23;\n            break;\n\n          case 19:\n            _context14.prev = 19;\n            _context14.t0 = _context14[\"catch\"](3);\n            _didIteratorError = true;\n            _iteratorError = _context14.t0;\n\n          case 23:\n            _context14.prev = 23;\n            _context14.prev = 24;\n\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context14.next = 28;\n              break;\n            }\n\n            _context14.next = 28;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 28:\n            _context14.prev = 28;\n\n            if (!_didIteratorError) {\n              _context14.next = 31;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 31:\n            return _context14.finish(28);\n\n          case 32:\n            return _context14.finish(23);\n\n          case 33:\n            if (!(dataBatch.length > 0)) {\n              _context14.next = 36;\n              break;\n            }\n\n            _context14.next = 36;\n            return dataBatch;\n\n          case 36:\n          case \"end\":\n            return _context14.stop();\n        }\n      }\n    }, _callee13, null, [[3, 19, 23, 33], [24,, 28, 32]]);\n  }));\n  return _batch2.apply(this, arguments);\n}\n\nfunction _syncBatch(size, iterable) {\n  var dataBatch, _iterator18, _step18, data;\n\n  return _regeneratorRuntime().wrap(function _syncBatch$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          dataBatch = [];\n          _iterator18 = _createForOfIteratorHelper(iterable);\n          _context15.prev = 2;\n\n          _iterator18.s();\n\n        case 4:\n          if ((_step18 = _iterator18.n()).done) {\n            _context15.next = 13;\n            break;\n          }\n\n          data = _step18.value;\n          dataBatch.push(data);\n\n          if (!(dataBatch.length === size)) {\n            _context15.next = 11;\n            break;\n          }\n\n          _context15.next = 10;\n          return dataBatch;\n\n        case 10:\n          dataBatch = [];\n\n        case 11:\n          _context15.next = 4;\n          break;\n\n        case 13:\n          _context15.next = 18;\n          break;\n\n        case 15:\n          _context15.prev = 15;\n          _context15.t0 = _context15[\"catch\"](2);\n\n          _iterator18.e(_context15.t0);\n\n        case 18:\n          _context15.prev = 18;\n\n          _iterator18.f();\n\n          return _context15.finish(18);\n\n        case 21:\n          if (!(dataBatch.length > 0)) {\n            _context15.next = 24;\n            break;\n          }\n\n          _context15.next = 24;\n          return dataBatch;\n\n        case 24:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked, null, [[2, 15, 18, 21]]);\n}\n\nfunction batch(size, iterable) {\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return batch(size, curriedIterable);\n    };\n  }\n\n  if (iterable[Symbol.asyncIterator]) {\n    return _batch(size, iterable);\n  }\n\n  return _syncBatch(size, iterable);\n}\n\nvar TIMEOUT = Symbol('TIMEOUT');\n\nvar createTimer = function createTimer(duration) {\n  var timeoutId;\n  return [new Promise(function (resolve) {\n    timeoutId = setTimeout(function () {\n      return resolve(TIMEOUT);\n    }, duration);\n  }), function () {\n    clearTimeout(timeoutId);\n  }];\n}; // Like `batch` but flushes early if the `timeout` is reached\n// NOTE: The strategy is to only hold onto a single item for a maximum of `timeout` ms.\n\n\nfunction _batchWithTimeout(_x3, _x4, _x5) {\n  return _batchWithTimeout2.apply(this, arguments);\n}\n\nfunction _batchWithTimeout2() {\n  _batchWithTimeout2 = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(size, timeout, iterable) {\n    var iterator, pendingData, batchData, timer, clearTimer, startTimer, deleteTimer, res;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            iterator = iterable[Symbol.asyncIterator]();\n            batchData = [];\n\n            startTimer = function startTimer() {\n              deleteTimer();\n\n              var _createTimer = createTimer(timeout);\n\n              var _createTimer2 = _slicedToArray(_createTimer, 2);\n\n              timer = _createTimer2[0];\n              clearTimer = _createTimer2[1];\n            };\n\n            deleteTimer = function deleteTimer() {\n              if (clearTimer) {\n                clearTimer();\n              }\n\n              timer = undefined;\n            };\n\n            pendingData = iterator.next();\n\n          case 5:\n            if (!true) {\n              _context.next = 29;\n              break;\n            }\n\n            _context.next = 8;\n            return _awaitAsyncGenerator(timer ? Promise.race([pendingData, timer]) : pendingData);\n\n          case 8:\n            res = _context.sent;\n\n            if (!(res === TIMEOUT || res.done)) {\n              _context.next = 18;\n              break;\n            }\n\n            if (!batchData.length) {\n              _context.next = 14;\n              break;\n            }\n\n            _context.next = 13;\n            return batchData;\n\n          case 13:\n            batchData = [];\n\n          case 14:\n            deleteTimer(); // And exit appropriately\n\n            if (!(res !== TIMEOUT)) {\n              _context.next = 17;\n              break;\n            }\n\n            return _context.abrupt(\"break\", 29);\n\n          case 17:\n            return _context.abrupt(\"continue\", 5);\n\n          case 18:\n            // Fetch next item early doors (before we potentially yield)\n            pendingData = iterator.next(); // Then handle the value\n\n            batchData.push(res.value);\n\n            if (batchData.length === 1) {\n              // Start timer once we have at least 1 item ready to go\n              startTimer();\n            }\n\n            if (!(batchData.length === size)) {\n              _context.next = 27;\n              break;\n            }\n\n            _context.next = 24;\n            return batchData;\n\n          case 24:\n            batchData = [];\n            deleteTimer();\n            return _context.abrupt(\"continue\", 5);\n\n          case 27:\n            _context.next = 5;\n            break;\n\n          case 29:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _batchWithTimeout2.apply(this, arguments);\n}\n\nfunction batchWithTimeout(size, timeout, iterable) {\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return batchWithTimeout(size, timeout, curriedIterable);\n    };\n  }\n\n  if (iterable[Symbol.asyncIterator] && timeout !== Infinity) {\n    return _batchWithTimeout(size, timeout, iterable);\n  } // For sync iterables or an infinite timeout, the timeout is irrelevant so just fallback to regular `batch`.\n\n\n  return batch(size, iterable);\n}\n\nfunction getIterator(iterable) {\n  if (typeof iterable.next === 'function') {\n    return iterable;\n  }\n\n  if (typeof iterable[Symbol.iterator] === 'function') {\n    return iterable[Symbol.iterator]();\n  }\n\n  if (typeof iterable[Symbol.asyncIterator] === 'function') {\n    return iterable[Symbol.asyncIterator]();\n  }\n\n  throw new TypeError('\"values\" does not to conform to any of the iterator or iterable protocols');\n}\n\nfunction defer() {\n  var reject;\n  var resolve;\n  var promise = new Promise(function (resolveFunc, rejectFunc) {\n    resolve = resolveFunc;\n    reject = rejectFunc;\n  });\n  return {\n    promise: promise,\n    reject: reject,\n    resolve: resolve\n  };\n}\n\nfunction _buffer(size, iterable) {\n  var iterator = getIterator(iterable);\n  var resultQueue = [];\n  var readQueue = [];\n  var reading = false;\n  var ended = false;\n\n  function fulfillReadQueue() {\n    while (readQueue.length > 0 && resultQueue.length > 0) {\n      var readDeferred = readQueue.shift();\n\n      var _resultQueue$shift = resultQueue.shift(),\n          error = _resultQueue$shift.error,\n          value = _resultQueue$shift.value;\n\n      if (error) {\n        readDeferred.reject(error);\n      } else {\n        readDeferred.resolve({\n          done: false,\n          value: value\n        });\n      }\n    }\n\n    while (readQueue.length > 0 && ended) {\n      var _readQueue$shift = readQueue.shift(),\n          resolve = _readQueue$shift.resolve;\n\n      resolve({\n        done: true,\n        value: undefined\n      });\n    }\n  }\n\n  function fillQueue() {\n    return _fillQueue.apply(this, arguments);\n  }\n\n  function _fillQueue() {\n    _fillQueue = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {\n      var _yield$iterator$next, done, value;\n\n      return _regeneratorRuntime().wrap(function _callee14$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              if (!ended) {\n                _context16.next = 2;\n                break;\n              }\n\n              return _context16.abrupt(\"return\");\n\n            case 2:\n              if (!reading) {\n                _context16.next = 4;\n                break;\n              }\n\n              return _context16.abrupt(\"return\");\n\n            case 4:\n              if (!(resultQueue.length >= size)) {\n                _context16.next = 6;\n                break;\n              }\n\n              return _context16.abrupt(\"return\");\n\n            case 6:\n              reading = true;\n              _context16.prev = 7;\n              _context16.next = 10;\n              return iterator.next();\n\n            case 10:\n              _yield$iterator$next = _context16.sent;\n              done = _yield$iterator$next.done;\n              value = _yield$iterator$next.value;\n\n              if (done) {\n                ended = true;\n              } else {\n                resultQueue.push({\n                  value: value\n                });\n              }\n\n              _context16.next = 20;\n              break;\n\n            case 16:\n              _context16.prev = 16;\n              _context16.t0 = _context16[\"catch\"](7);\n              ended = true;\n              resultQueue.push({\n                error: _context16.t0\n              });\n\n            case 20:\n              fulfillReadQueue();\n              reading = false;\n              fillQueue();\n\n            case 23:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, _callee14, null, [[7, 16]]);\n    }));\n    return _fillQueue.apply(this, arguments);\n  }\n\n  function next() {\n    return _next.apply(this, arguments);\n  }\n\n  function _next() {\n    _next = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {\n      var _resultQueue$shift2, error, value, deferred;\n\n      return _regeneratorRuntime().wrap(function _callee15$(_context17) {\n        while (1) {\n          switch (_context17.prev = _context17.next) {\n            case 0:\n              if (!(resultQueue.length > 0)) {\n                _context17.next = 6;\n                break;\n              }\n\n              _resultQueue$shift2 = resultQueue.shift(), error = _resultQueue$shift2.error, value = _resultQueue$shift2.value;\n\n              if (!error) {\n                _context17.next = 4;\n                break;\n              }\n\n              throw error;\n\n            case 4:\n              fillQueue();\n              return _context17.abrupt(\"return\", {\n                done: false,\n                value: value\n              });\n\n            case 6:\n              if (!ended) {\n                _context17.next = 8;\n                break;\n              }\n\n              return _context17.abrupt(\"return\", {\n                done: true,\n                value: undefined\n              });\n\n            case 8:\n              deferred = defer();\n              readQueue.push(deferred);\n              fillQueue();\n              return _context17.abrupt(\"return\", deferred.promise);\n\n            case 12:\n            case \"end\":\n              return _context17.stop();\n          }\n        }\n      }, _callee15);\n    }));\n    return _next.apply(this, arguments);\n  }\n\n  var asyncIterableIterator = _defineProperty({\n    next: next\n  }, Symbol.asyncIterator, function () {\n    return asyncIterableIterator;\n  });\n\n  return asyncIterableIterator;\n}\n\nfunction syncBuffer(size, iterable) {\n  var valueQueue, e, _iterator19, _step19, value, _i, _valueQueue, _value;\n\n  return _regeneratorRuntime().wrap(function syncBuffer$(_context18) {\n    while (1) {\n      switch (_context18.prev = _context18.next) {\n        case 0:\n          valueQueue = [];\n          _context18.prev = 1;\n          _iterator19 = _createForOfIteratorHelper(iterable);\n          _context18.prev = 3;\n\n          _iterator19.s();\n\n        case 5:\n          if ((_step19 = _iterator19.n()).done) {\n            _context18.next = 14;\n            break;\n          }\n\n          value = _step19.value;\n          valueQueue.push(value);\n\n          if (!(valueQueue.length <= size)) {\n            _context18.next = 10;\n            break;\n          }\n\n          return _context18.abrupt(\"continue\", 12);\n\n        case 10:\n          _context18.next = 12;\n          return valueQueue.shift();\n\n        case 12:\n          _context18.next = 5;\n          break;\n\n        case 14:\n          _context18.next = 19;\n          break;\n\n        case 16:\n          _context18.prev = 16;\n          _context18.t0 = _context18[\"catch\"](3);\n\n          _iterator19.e(_context18.t0);\n\n        case 19:\n          _context18.prev = 19;\n\n          _iterator19.f();\n\n          return _context18.finish(19);\n\n        case 22:\n          _context18.next = 27;\n          break;\n\n        case 24:\n          _context18.prev = 24;\n          _context18.t1 = _context18[\"catch\"](1);\n          e = _context18.t1;\n\n        case 27:\n          _i = 0, _valueQueue = valueQueue;\n\n        case 28:\n          if (!(_i < _valueQueue.length)) {\n            _context18.next = 35;\n            break;\n          }\n\n          _value = _valueQueue[_i];\n          _context18.next = 32;\n          return _value;\n\n        case 32:\n          _i++;\n          _context18.next = 28;\n          break;\n\n        case 35:\n          if (!e) {\n            _context18.next = 37;\n            break;\n          }\n\n          throw e;\n\n        case 37:\n        case \"end\":\n          return _context18.stop();\n      }\n    }\n  }, _marked2, null, [[1, 24], [3, 16, 19, 22]]);\n}\n\nfunction buffer(size, iterable) {\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return buffer(size, curriedIterable);\n    };\n  }\n\n  if (size === 0) {\n    return iterable;\n  }\n\n  if (iterable[Symbol.asyncIterator]) {\n    return _buffer(size, iterable);\n  }\n\n  return syncBuffer(size, iterable);\n}\n\nfunction _collect(_x23) {\n  return _collect2.apply(this, arguments);\n}\n\nfunction _collect2() {\n  _collect2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee24(iterable) {\n    var values, _iteratorAbruptCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, value;\n\n    return _regeneratorRuntime().wrap(function _callee24$(_context30) {\n      while (1) {\n        switch (_context30.prev = _context30.next) {\n          case 0:\n            values = [];\n            _iteratorAbruptCompletion2 = false;\n            _didIteratorError2 = false;\n            _context30.prev = 3;\n            _iterator2 = _asyncIterator(iterable);\n\n          case 5:\n            _context30.next = 7;\n            return _iterator2.next();\n\n          case 7:\n            if (!(_iteratorAbruptCompletion2 = !(_step2 = _context30.sent).done)) {\n              _context30.next = 13;\n              break;\n            }\n\n            value = _step2.value;\n            values.push(value);\n\n          case 10:\n            _iteratorAbruptCompletion2 = false;\n            _context30.next = 5;\n            break;\n\n          case 13:\n            _context30.next = 19;\n            break;\n\n          case 15:\n            _context30.prev = 15;\n            _context30.t0 = _context30[\"catch\"](3);\n            _didIteratorError2 = true;\n            _iteratorError2 = _context30.t0;\n\n          case 19:\n            _context30.prev = 19;\n            _context30.prev = 20;\n\n            if (!(_iteratorAbruptCompletion2 && _iterator2.return != null)) {\n              _context30.next = 24;\n              break;\n            }\n\n            _context30.next = 24;\n            return _iterator2.return();\n\n          case 24:\n            _context30.prev = 24;\n\n            if (!_didIteratorError2) {\n              _context30.next = 27;\n              break;\n            }\n\n            throw _iteratorError2;\n\n          case 27:\n            return _context30.finish(24);\n\n          case 28:\n            return _context30.finish(19);\n\n          case 29:\n            return _context30.abrupt(\"return\", values);\n\n          case 30:\n          case \"end\":\n            return _context30.stop();\n        }\n      }\n    }, _callee24, null, [[3, 15, 19, 29], [20,, 24, 28]]);\n  }));\n  return _collect2.apply(this, arguments);\n}\n\nfunction collect(iterable) {\n  if (iterable[Symbol.asyncIterator]) {\n    return _collect(iterable);\n  }\n\n  return Array.from(iterable);\n}\n\nfunction _concat(_x6) {\n  return _concat2.apply(this, arguments);\n}\n\nfunction _concat2() {\n  _concat2 = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(iterables) {\n    var _iteratorAbruptCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, iterable;\n\n    return _regeneratorRuntime().wrap(function _callee16$(_context19) {\n      while (1) {\n        switch (_context19.prev = _context19.next) {\n          case 0:\n            _iteratorAbruptCompletion3 = false;\n            _didIteratorError3 = false;\n            _context19.prev = 2;\n            _iterator3 = _asyncIterator(iterables);\n\n          case 4:\n            _context19.next = 6;\n            return _awaitAsyncGenerator(_iterator3.next());\n\n          case 6:\n            if (!(_iteratorAbruptCompletion3 = !(_step3 = _context19.sent).done)) {\n              _context19.next = 12;\n              break;\n            }\n\n            iterable = _step3.value;\n            return _context19.delegateYield(_asyncGeneratorDelegate(_asyncIterator(iterable), _awaitAsyncGenerator), \"t0\", 9);\n\n          case 9:\n            _iteratorAbruptCompletion3 = false;\n            _context19.next = 4;\n            break;\n\n          case 12:\n            _context19.next = 18;\n            break;\n\n          case 14:\n            _context19.prev = 14;\n            _context19.t1 = _context19[\"catch\"](2);\n            _didIteratorError3 = true;\n            _iteratorError3 = _context19.t1;\n\n          case 18:\n            _context19.prev = 18;\n            _context19.prev = 19;\n\n            if (!(_iteratorAbruptCompletion3 && _iterator3.return != null)) {\n              _context19.next = 23;\n              break;\n            }\n\n            _context19.next = 23;\n            return _awaitAsyncGenerator(_iterator3.return());\n\n          case 23:\n            _context19.prev = 23;\n\n            if (!_didIteratorError3) {\n              _context19.next = 26;\n              break;\n            }\n\n            throw _iteratorError3;\n\n          case 26:\n            return _context19.finish(23);\n\n          case 27:\n            return _context19.finish(18);\n\n          case 28:\n          case \"end\":\n            return _context19.stop();\n        }\n      }\n    }, _callee16, null, [[2, 14, 18, 28], [19,, 23, 27]]);\n  }));\n  return _concat2.apply(this, arguments);\n}\n\nfunction _syncConcat(iterables) {\n  var _iterator20, _step20, iterable;\n\n  return _regeneratorRuntime().wrap(function _syncConcat$(_context20) {\n    while (1) {\n      switch (_context20.prev = _context20.next) {\n        case 0:\n          _iterator20 = _createForOfIteratorHelper(iterables);\n          _context20.prev = 1;\n\n          _iterator20.s();\n\n        case 3:\n          if ((_step20 = _iterator20.n()).done) {\n            _context20.next = 8;\n            break;\n          }\n\n          iterable = _step20.value;\n          return _context20.delegateYield(iterable, \"t0\", 6);\n\n        case 6:\n          _context20.next = 3;\n          break;\n\n        case 8:\n          _context20.next = 13;\n          break;\n\n        case 10:\n          _context20.prev = 10;\n          _context20.t1 = _context20[\"catch\"](1);\n\n          _iterator20.e(_context20.t1);\n\n        case 13:\n          _context20.prev = 13;\n\n          _iterator20.f();\n\n          return _context20.finish(13);\n\n        case 16:\n        case \"end\":\n          return _context20.stop();\n      }\n    }\n  }, _marked3, null, [[1, 10, 13, 16]]);\n}\n\nfunction concat() {\n  for (var _len3 = arguments.length, iterables = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    iterables[_key3] = arguments[_key3];\n  }\n\n  var hasAnyAsync = iterables.find(function (itr) {\n    return itr[Symbol.asyncIterator] !== undefined;\n  });\n\n  if (hasAnyAsync) {\n    return _concat(iterables);\n  } else {\n    return _syncConcat(iterables);\n  }\n}\n\nfunction _consume(_x24) {\n  return _consume2.apply(this, arguments);\n}\n\nfunction _consume2() {\n  _consume2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee25(iterable) {\n    var _iteratorAbruptCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, val;\n\n    return _regeneratorRuntime().wrap(function _callee25$(_context31) {\n      while (1) {\n        switch (_context31.prev = _context31.next) {\n          case 0:\n            _iteratorAbruptCompletion4 = false;\n            _didIteratorError4 = false;\n            _context31.prev = 2;\n            _iterator4 = _asyncIterator(iterable);\n\n          case 4:\n            _context31.next = 6;\n            return _iterator4.next();\n\n          case 6:\n            if (!(_iteratorAbruptCompletion4 = !(_step4 = _context31.sent).done)) {\n              _context31.next = 11;\n              break;\n            }\n\n            val = _step4.value;\n\n          case 8:\n            _iteratorAbruptCompletion4 = false;\n            _context31.next = 4;\n            break;\n\n          case 11:\n            _context31.next = 17;\n            break;\n\n          case 13:\n            _context31.prev = 13;\n            _context31.t0 = _context31[\"catch\"](2);\n            _didIteratorError4 = true;\n            _iteratorError4 = _context31.t0;\n\n          case 17:\n            _context31.prev = 17;\n            _context31.prev = 18;\n\n            if (!(_iteratorAbruptCompletion4 && _iterator4.return != null)) {\n              _context31.next = 22;\n              break;\n            }\n\n            _context31.next = 22;\n            return _iterator4.return();\n\n          case 22:\n            _context31.prev = 22;\n\n            if (!_didIteratorError4) {\n              _context31.next = 25;\n              break;\n            }\n\n            throw _iteratorError4;\n\n          case 25:\n            return _context31.finish(22);\n\n          case 26:\n            return _context31.finish(17);\n\n          case 27:\n          case \"end\":\n            return _context31.stop();\n        }\n      }\n    }, _callee25, null, [[2, 13, 17, 27], [18,, 22, 26]]);\n  }));\n  return _consume2.apply(this, arguments);\n}\n\nfunction consume(iterable) {\n  if (iterable[Symbol.asyncIterator]) {\n    return _consume(iterable);\n  }\n\n  var _iterator21 = _createForOfIteratorHelper(iterable),\n      _step21;\n\n  try {\n    for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {// do nothing\n\n      var val = _step21.value;\n    }\n  } catch (err) {\n    _iterator21.e(err);\n  } finally {\n    _iterator21.f();\n  }\n}\n\nfunction _filter(_x7, _x8) {\n  return _filter2.apply(this, arguments);\n}\n\nfunction _filter2() {\n  _filter2 = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(filterFunc, iterable) {\n    var _iteratorAbruptCompletion5, _didIteratorError5, _iteratorError5, _iterator5, _step5, data;\n\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _iteratorAbruptCompletion5 = false;\n            _didIteratorError5 = false;\n            _context2.prev = 2;\n            _iterator5 = _asyncIterator(iterable);\n\n          case 4:\n            _context2.next = 6;\n            return _awaitAsyncGenerator(_iterator5.next());\n\n          case 6:\n            if (!(_iteratorAbruptCompletion5 = !(_step5 = _context2.sent).done)) {\n              _context2.next = 16;\n              break;\n            }\n\n            data = _step5.value;\n            _context2.next = 10;\n            return _awaitAsyncGenerator(filterFunc(data));\n\n          case 10:\n            if (!_context2.sent) {\n              _context2.next = 13;\n              break;\n            }\n\n            _context2.next = 13;\n            return data;\n\n          case 13:\n            _iteratorAbruptCompletion5 = false;\n            _context2.next = 4;\n            break;\n\n          case 16:\n            _context2.next = 22;\n            break;\n\n          case 18:\n            _context2.prev = 18;\n            _context2.t0 = _context2[\"catch\"](2);\n            _didIteratorError5 = true;\n            _iteratorError5 = _context2.t0;\n\n          case 22:\n            _context2.prev = 22;\n            _context2.prev = 23;\n\n            if (!(_iteratorAbruptCompletion5 && _iterator5.return != null)) {\n              _context2.next = 27;\n              break;\n            }\n\n            _context2.next = 27;\n            return _awaitAsyncGenerator(_iterator5.return());\n\n          case 27:\n            _context2.prev = 27;\n\n            if (!_didIteratorError5) {\n              _context2.next = 30;\n              break;\n            }\n\n            throw _iteratorError5;\n\n          case 30:\n            return _context2.finish(27);\n\n          case 31:\n            return _context2.finish(22);\n\n          case 32:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[2, 18, 22, 32], [23,, 27, 31]]);\n  }));\n  return _filter2.apply(this, arguments);\n}\n\nfunction filter(filterFunc, iterable) {\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return _filter(filterFunc, curriedIterable);\n    };\n  }\n\n  return _filter(filterFunc, iterable);\n}\n\nfunction flatten(_x9) {\n  return _flatten.apply(this, arguments);\n}\n\nfunction _flatten() {\n  _flatten = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(iterable) {\n    var _iteratorAbruptCompletion6, _didIteratorError6, _iteratorError6, _iterator6, _step6, maybeItr;\n\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _iteratorAbruptCompletion6 = false;\n            _didIteratorError6 = false;\n            _context3.prev = 2;\n            _iterator6 = _asyncIterator(iterable);\n\n          case 4:\n            _context3.next = 6;\n            return _awaitAsyncGenerator(_iterator6.next());\n\n          case 6:\n            if (!(_iteratorAbruptCompletion6 = !(_step6 = _context3.sent).done)) {\n              _context3.next = 17;\n              break;\n            }\n\n            maybeItr = _step6.value;\n\n            if (!(maybeItr && typeof maybeItr !== 'string' && (maybeItr[Symbol.iterator] || maybeItr[Symbol.asyncIterator]))) {\n              _context3.next = 12;\n              break;\n            }\n\n            return _context3.delegateYield(_asyncGeneratorDelegate(_asyncIterator(flatten(maybeItr)), _awaitAsyncGenerator), \"t0\", 10);\n\n          case 10:\n            _context3.next = 14;\n            break;\n\n          case 12:\n            _context3.next = 14;\n            return maybeItr;\n\n          case 14:\n            _iteratorAbruptCompletion6 = false;\n            _context3.next = 4;\n            break;\n\n          case 17:\n            _context3.next = 23;\n            break;\n\n          case 19:\n            _context3.prev = 19;\n            _context3.t1 = _context3[\"catch\"](2);\n            _didIteratorError6 = true;\n            _iteratorError6 = _context3.t1;\n\n          case 23:\n            _context3.prev = 23;\n            _context3.prev = 24;\n\n            if (!(_iteratorAbruptCompletion6 && _iterator6.return != null)) {\n              _context3.next = 28;\n              break;\n            }\n\n            _context3.next = 28;\n            return _awaitAsyncGenerator(_iterator6.return());\n\n          case 28:\n            _context3.prev = 28;\n\n            if (!_didIteratorError6) {\n              _context3.next = 31;\n              break;\n            }\n\n            throw _iteratorError6;\n\n          case 31:\n            return _context3.finish(28);\n\n          case 32:\n            return _context3.finish(23);\n\n          case 33:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[2, 19, 23, 33], [24,, 28, 32]]);\n  }));\n  return _flatten.apply(this, arguments);\n}\n\nfunction _map(_x10, _x11) {\n  return _map2.apply(this, arguments);\n}\n\nfunction _map2() {\n  _map2 = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(func, iterable) {\n    var _iteratorAbruptCompletion7, _didIteratorError7, _iteratorError7, _iterator7, _step7, val;\n\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _iteratorAbruptCompletion7 = false;\n            _didIteratorError7 = false;\n            _context4.prev = 2;\n            _iterator7 = _asyncIterator(iterable);\n\n          case 4:\n            _context4.next = 6;\n            return _awaitAsyncGenerator(_iterator7.next());\n\n          case 6:\n            if (!(_iteratorAbruptCompletion7 = !(_step7 = _context4.sent).done)) {\n              _context4.next = 15;\n              break;\n            }\n\n            val = _step7.value;\n            _context4.next = 10;\n            return _awaitAsyncGenerator(func(val));\n\n          case 10:\n            _context4.next = 12;\n            return _context4.sent;\n\n          case 12:\n            _iteratorAbruptCompletion7 = false;\n            _context4.next = 4;\n            break;\n\n          case 15:\n            _context4.next = 21;\n            break;\n\n          case 17:\n            _context4.prev = 17;\n            _context4.t0 = _context4[\"catch\"](2);\n            _didIteratorError7 = true;\n            _iteratorError7 = _context4.t0;\n\n          case 21:\n            _context4.prev = 21;\n            _context4.prev = 22;\n\n            if (!(_iteratorAbruptCompletion7 && _iterator7.return != null)) {\n              _context4.next = 26;\n              break;\n            }\n\n            _context4.next = 26;\n            return _awaitAsyncGenerator(_iterator7.return());\n\n          case 26:\n            _context4.prev = 26;\n\n            if (!_didIteratorError7) {\n              _context4.next = 29;\n              break;\n            }\n\n            throw _iteratorError7;\n\n          case 29:\n            return _context4.finish(26);\n\n          case 30:\n            return _context4.finish(21);\n\n          case 31:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[2, 17, 21, 31], [22,, 26, 30]]);\n  }));\n  return _map2.apply(this, arguments);\n}\n\nfunction map(func, iterable) {\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return _map(func, curriedIterable);\n    };\n  }\n\n  return _map(func, iterable);\n}\n\nfunction flatMap(func, iterable) {\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return flatMap(func, curriedIterable);\n    };\n  }\n\n  return filter(function (i) {\n    return i !== undefined && i !== null;\n  }, flatten(map(func, iterable)));\n}\n\nfunction _flatTransform(concurrency, func, iterable) {\n  var iterator = getIterator(iterable);\n  var resultQueue = [];\n  var readQueue = [];\n  var ended = false;\n  var reading = false;\n  var inflightCount = 0;\n  var lastError = null;\n\n  function fulfillReadQueue() {\n    while (readQueue.length > 0 && resultQueue.length > 0) {\n      var _readQueue$shift2 = readQueue.shift(),\n          resolve = _readQueue$shift2.resolve;\n\n      var value = resultQueue.shift();\n      resolve({\n        done: false,\n        value: value\n      });\n    }\n\n    while (readQueue.length > 0 && inflightCount === 0 && ended) {\n      var _readQueue$shift3 = readQueue.shift(),\n          _resolve = _readQueue$shift3.resolve,\n          reject = _readQueue$shift3.reject;\n\n      if (lastError) {\n        reject(lastError);\n        lastError = null;\n      } else {\n        _resolve({\n          done: true,\n          value: undefined\n        });\n      }\n    }\n  }\n\n  function fillQueue() {\n    return _fillQueue2.apply(this, arguments);\n  }\n\n  function _fillQueue2() {\n    _fillQueue2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17() {\n      var _yield$iterator$next2, done, value;\n\n      return _regeneratorRuntime().wrap(function _callee17$(_context21) {\n        while (1) {\n          switch (_context21.prev = _context21.next) {\n            case 0:\n              if (!ended) {\n                _context21.next = 3;\n                break;\n              }\n\n              fulfillReadQueue();\n              return _context21.abrupt(\"return\");\n\n            case 3:\n              if (!reading) {\n                _context21.next = 5;\n                break;\n              }\n\n              return _context21.abrupt(\"return\");\n\n            case 5:\n              if (!(inflightCount + resultQueue.length >= concurrency)) {\n                _context21.next = 7;\n                break;\n              }\n\n              return _context21.abrupt(\"return\");\n\n            case 7:\n              reading = true;\n              inflightCount++;\n              _context21.prev = 9;\n              _context21.next = 12;\n              return iterator.next();\n\n            case 12:\n              _yield$iterator$next2 = _context21.sent;\n              done = _yield$iterator$next2.done;\n              value = _yield$iterator$next2.value;\n\n              if (done) {\n                ended = true;\n                inflightCount--;\n                fulfillReadQueue();\n              } else {\n                mapAndQueue(value);\n              }\n\n              _context21.next = 24;\n              break;\n\n            case 18:\n              _context21.prev = 18;\n              _context21.t0 = _context21[\"catch\"](9);\n              ended = true;\n              inflightCount--;\n              lastError = _context21.t0;\n              fulfillReadQueue();\n\n            case 24:\n              reading = false;\n              fillQueue();\n\n            case 26:\n            case \"end\":\n              return _context21.stop();\n          }\n        }\n      }, _callee17, null, [[9, 18]]);\n    }));\n    return _fillQueue2.apply(this, arguments);\n  }\n\n  function mapAndQueue(_x25) {\n    return _mapAndQueue.apply(this, arguments);\n  }\n\n  function _mapAndQueue() {\n    _mapAndQueue = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(itrValue) {\n      var value, _iteratorAbruptCompletion8, _didIteratorError8, _iteratorError8, _iterator8, _step8, asyncVal;\n\n      return _regeneratorRuntime().wrap(function _callee18$(_context22) {\n        while (1) {\n          switch (_context22.prev = _context22.next) {\n            case 0:\n              _context22.prev = 0;\n              _context22.next = 3;\n              return func(itrValue);\n\n            case 3:\n              value = _context22.sent;\n\n              if (!(value && value[Symbol.asyncIterator])) {\n                _context22.next = 35;\n                break;\n              }\n\n              _iteratorAbruptCompletion8 = false;\n              _didIteratorError8 = false;\n              _context22.prev = 7;\n              _iterator8 = _asyncIterator(value);\n\n            case 9:\n              _context22.next = 11;\n              return _iterator8.next();\n\n            case 11:\n              if (!(_iteratorAbruptCompletion8 = !(_step8 = _context22.sent).done)) {\n                _context22.next = 17;\n                break;\n              }\n\n              asyncVal = _step8.value;\n              resultQueue.push(asyncVal);\n\n            case 14:\n              _iteratorAbruptCompletion8 = false;\n              _context22.next = 9;\n              break;\n\n            case 17:\n              _context22.next = 23;\n              break;\n\n            case 19:\n              _context22.prev = 19;\n              _context22.t0 = _context22[\"catch\"](7);\n              _didIteratorError8 = true;\n              _iteratorError8 = _context22.t0;\n\n            case 23:\n              _context22.prev = 23;\n              _context22.prev = 24;\n\n              if (!(_iteratorAbruptCompletion8 && _iterator8.return != null)) {\n                _context22.next = 28;\n                break;\n              }\n\n              _context22.next = 28;\n              return _iterator8.return();\n\n            case 28:\n              _context22.prev = 28;\n\n              if (!_didIteratorError8) {\n                _context22.next = 31;\n                break;\n              }\n\n              throw _iteratorError8;\n\n            case 31:\n              return _context22.finish(28);\n\n            case 32:\n              return _context22.finish(23);\n\n            case 33:\n              _context22.next = 36;\n              break;\n\n            case 35:\n              resultQueue.push(value);\n\n            case 36:\n              _context22.next = 42;\n              break;\n\n            case 38:\n              _context22.prev = 38;\n              _context22.t1 = _context22[\"catch\"](0);\n              ended = true;\n              lastError = _context22.t1;\n\n            case 42:\n              inflightCount--;\n              fulfillReadQueue();\n              fillQueue();\n\n            case 45:\n            case \"end\":\n              return _context22.stop();\n          }\n        }\n      }, _callee18, null, [[0, 38], [7, 19, 23, 33], [24,, 28, 32]]);\n    }));\n    return _mapAndQueue.apply(this, arguments);\n  }\n\n  function next() {\n    return _next2.apply(this, arguments);\n  }\n\n  function _next2() {\n    _next2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19() {\n      var deferred, value;\n      return _regeneratorRuntime().wrap(function _callee19$(_context23) {\n        while (1) {\n          switch (_context23.prev = _context23.next) {\n            case 0:\n              if (!(resultQueue.length === 0)) {\n                _context23.next = 5;\n                break;\n              }\n\n              deferred = defer();\n              readQueue.push(deferred);\n              fillQueue();\n              return _context23.abrupt(\"return\", deferred.promise);\n\n            case 5:\n              value = resultQueue.shift();\n              fillQueue();\n              return _context23.abrupt(\"return\", {\n                done: false,\n                value: value\n              });\n\n            case 8:\n            case \"end\":\n              return _context23.stop();\n          }\n        }\n      }, _callee19);\n    }));\n    return _next2.apply(this, arguments);\n  }\n\n  var asyncIterableIterator = _defineProperty({\n    next: next\n  }, Symbol.asyncIterator, function () {\n    return asyncIterableIterator;\n  });\n\n  return asyncIterableIterator;\n}\n\nfunction flatTransform(concurrency, func, iterable) {\n  if (func === undefined) {\n    return function (curriedFunc, curriedIterable) {\n      return curriedIterable ? flatTransform(concurrency, curriedFunc, curriedIterable) : flatTransform(concurrency, curriedFunc);\n    };\n  }\n\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return flatTransform(concurrency, func, curriedIterable);\n    };\n  }\n\n  return filter(function (i) {\n    return i !== undefined && i !== null;\n  }, flatten(_flatTransform(concurrency, func, iterable)));\n}\n\nfunction onceReadable(_x26) {\n  return _onceReadable.apply(this, arguments);\n}\n\nfunction _onceReadable() {\n  _onceReadable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee26(stream) {\n    return _regeneratorRuntime().wrap(function _callee26$(_context32) {\n      while (1) {\n        switch (_context32.prev = _context32.next) {\n          case 0:\n            return _context32.abrupt(\"return\", new Promise(function (resolve) {\n              stream.once('readable', function () {\n                resolve();\n              });\n            }));\n\n          case 1:\n          case \"end\":\n            return _context32.stop();\n        }\n      }\n    }, _callee26);\n  }));\n  return _onceReadable.apply(this, arguments);\n}\n\nfunction _fromStream(_x12) {\n  return _fromStream2.apply(this, arguments);\n}\n\nfunction _fromStream2() {\n  _fromStream2 = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(stream) {\n    var data;\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            if (!true) {\n              _context5.next = 12;\n              break;\n            }\n\n            data = stream.read();\n\n            if (!(data !== null)) {\n              _context5.next = 6;\n              break;\n            }\n\n            _context5.next = 5;\n            return data;\n\n          case 5:\n            return _context5.abrupt(\"continue\", 0);\n\n          case 6:\n            if (!stream._readableState.ended) {\n              _context5.next = 8;\n              break;\n            }\n\n            return _context5.abrupt(\"break\", 12);\n\n          case 8:\n            _context5.next = 10;\n            return _awaitAsyncGenerator(onceReadable(stream));\n\n          case 10:\n            _context5.next = 0;\n            break;\n\n          case 12:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _fromStream2.apply(this, arguments);\n}\n\nfunction fromStream(stream) {\n  if (typeof stream[Symbol.asyncIterator] === 'function') {\n    return stream;\n  }\n\n  return _fromStream(stream);\n}\n\nfunction merge() {\n  return _merge.apply(this, arguments);\n}\n\nfunction _merge() {\n  _merge = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n    var _len,\n        iterables,\n        _key,\n        sources,\n        _iterator14,\n        _step14,\n        iterator,\n        nextVal,\n        _args6 = arguments;\n\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            for (_len = _args6.length, iterables = new Array(_len), _key = 0; _key < _len; _key++) {\n              iterables[_key] = _args6[_key];\n            }\n\n            sources = new Set(iterables.map(getIterator));\n\n          case 2:\n            if (!(sources.size > 0)) {\n              _context6.next = 29;\n              break;\n            }\n\n            _iterator14 = _createForOfIteratorHelper(sources);\n            _context6.prev = 4;\n\n            _iterator14.s();\n\n          case 6:\n            if ((_step14 = _iterator14.n()).done) {\n              _context6.next = 19;\n              break;\n            }\n\n            iterator = _step14.value;\n            _context6.next = 10;\n            return _awaitAsyncGenerator(iterator.next());\n\n          case 10:\n            nextVal = _context6.sent;\n\n            if (!nextVal.done) {\n              _context6.next = 15;\n              break;\n            }\n\n            sources.delete(iterator);\n            _context6.next = 17;\n            break;\n\n          case 15:\n            _context6.next = 17;\n            return nextVal.value;\n\n          case 17:\n            _context6.next = 6;\n            break;\n\n          case 19:\n            _context6.next = 24;\n            break;\n\n          case 21:\n            _context6.prev = 21;\n            _context6.t0 = _context6[\"catch\"](4);\n\n            _iterator14.e(_context6.t0);\n\n          case 24:\n            _context6.prev = 24;\n\n            _iterator14.f();\n\n            return _context6.finish(24);\n\n          case 27:\n            _context6.next = 2;\n            break;\n\n          case 29:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6, null, [[4, 21, 24, 27]]);\n  }));\n  return _merge.apply(this, arguments);\n}\n\nfunction pipeline(firstFn) {\n  var previousFn = firstFn();\n\n  for (var _len4 = arguments.length, fns = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n    fns[_key4 - 1] = arguments[_key4];\n  }\n\n  for (var _i2 = 0, _fns = fns; _i2 < _fns.length; _i2++) {\n    var func = _fns[_i2];\n    previousFn = func(previousFn);\n  }\n\n  return previousFn;\n}\n\nfunction _parallelMap(_x13, _x14, _x15) {\n  return _parallelMap2.apply(this, arguments);\n}\n\nfunction _parallelMap2() {\n  _parallelMap2 = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(concurrency, func, iterable) {\n    var transformError, wrapFunc, stopOnError, output, itr, _yield$_awaitAsyncGen, value, done, val;\n\n    return _regeneratorRuntime().wrap(function _callee7$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            transformError = null;\n\n            wrapFunc = function wrapFunc(value) {\n              return {\n                value: func(value)\n              };\n            };\n\n            stopOnError = /*#__PURE__*/_regeneratorRuntime().mark(function stopOnError(source) {\n              var _iterator15, _step15, value;\n\n              return _regeneratorRuntime().async(function stopOnError$(_context7) {\n                while (1) {\n                  switch (_context7.prev = _context7.next) {\n                    case 0:\n                      _iterator15 = _createForOfIteratorHelper(source);\n                      _context7.prev = 1;\n\n                      _iterator15.s();\n\n                    case 3:\n                      if ((_step15 = _iterator15.n()).done) {\n                        _context7.next = 11;\n                        break;\n                      }\n\n                      value = _step15.value;\n\n                      if (!transformError) {\n                        _context7.next = 7;\n                        break;\n                      }\n\n                      return _context7.abrupt(\"return\");\n\n                    case 7:\n                      _context7.next = 9;\n                      return value;\n\n                    case 9:\n                      _context7.next = 3;\n                      break;\n\n                    case 11:\n                      _context7.next = 16;\n                      break;\n\n                    case 13:\n                      _context7.prev = 13;\n                      _context7.t0 = _context7[\"catch\"](1);\n\n                      _iterator15.e(_context7.t0);\n\n                    case 16:\n                      _context7.prev = 16;\n\n                      _iterator15.f();\n\n                      return _context7.finish(16);\n\n                    case 19:\n                    case \"end\":\n                      return _context7.stop();\n                  }\n                }\n              }, stopOnError, null, [[1, 13, 16, 19]], Promise);\n            });\n            output = pipeline(function () {\n              return iterable;\n            }, buffer(1), stopOnError, map(wrapFunc), buffer(concurrency - 1));\n            itr = getIterator(output);\n\n          case 5:\n            if (!true) {\n              _context8.next = 27;\n              break;\n            }\n\n            _context8.next = 8;\n            return _awaitAsyncGenerator(itr.next());\n\n          case 8:\n            _yield$_awaitAsyncGen = _context8.sent;\n            value = _yield$_awaitAsyncGen.value;\n            done = _yield$_awaitAsyncGen.done;\n\n            if (!done) {\n              _context8.next = 13;\n              break;\n            }\n\n            return _context8.abrupt(\"break\", 27);\n\n          case 13:\n            _context8.prev = 13;\n            _context8.next = 16;\n            return _awaitAsyncGenerator(value.value);\n\n          case 16:\n            val = _context8.sent;\n\n            if (transformError) {\n              _context8.next = 20;\n              break;\n            }\n\n            _context8.next = 20;\n            return val;\n\n          case 20:\n            _context8.next = 25;\n            break;\n\n          case 22:\n            _context8.prev = 22;\n            _context8.t0 = _context8[\"catch\"](13);\n            transformError = _context8.t0;\n\n          case 25:\n            _context8.next = 5;\n            break;\n\n          case 27:\n            if (!transformError) {\n              _context8.next = 29;\n              break;\n            }\n\n            throw transformError;\n\n          case 29:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee7, null, [[13, 22]]);\n  }));\n  return _parallelMap2.apply(this, arguments);\n}\n\nfunction parallelMap(concurrency, func, iterable) {\n  if (func === undefined) {\n    return function (curriedFunc, curriedIterable) {\n      return parallelMap(concurrency, curriedFunc, curriedIterable);\n    };\n  }\n\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return parallelMap(concurrency, func, curriedIterable);\n    };\n  }\n\n  if (concurrency === 1) {\n    return map(func, iterable);\n  }\n\n  return _parallelMap(concurrency, func, iterable);\n}\n\nfunction parallelFlatMap(concurrency, func, iterable) {\n  if (func === undefined) {\n    return function (curriedFunc, curriedIterable) {\n      return curriedIterable ? parallelFlatMap(concurrency, curriedFunc, curriedIterable) : parallelFlatMap(concurrency, curriedFunc);\n    };\n  }\n\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return parallelFlatMap(concurrency, func, curriedIterable);\n    };\n  }\n\n  return filter(function (i) {\n    return i !== undefined && i !== null;\n  }, flatten(parallelMap(concurrency, func, iterable)));\n}\n\nfunction parallelMerge() {\n  return _parallelMerge.apply(this, arguments);\n}\n\nfunction _parallelMerge() {\n  _parallelMerge = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n    var _len2,\n        iterables,\n        _key2,\n        inputs,\n        concurrentWork,\n        values,\n        lastError,\n        errCb,\n        valueCb,\n        notifyError,\n        notifyDone,\n        waitForQueue,\n        queueNext,\n        _iterator16,\n        _step16,\n        _input,\n        _iterator17,\n        _step17,\n        _step17$value,\n        input,\n        value,\n        _args10 = arguments;\n\n    return _regeneratorRuntime().wrap(function _callee9$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            for (_len2 = _args10.length, iterables = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n              iterables[_key2] = _args10[_key2];\n            }\n\n            inputs = iterables.map(getIterator);\n            concurrentWork = new Set();\n            values = new Map();\n            lastError = null;\n            errCb = null;\n            valueCb = null;\n\n            notifyError = function notifyError(err) {\n              lastError = err;\n\n              if (errCb) {\n                errCb(err);\n              }\n            };\n\n            notifyDone = function notifyDone(value) {\n              if (valueCb) {\n                valueCb(value);\n              }\n            };\n\n            waitForQueue = function waitForQueue() {\n              return new Promise(function (resolve, reject) {\n                if (lastError) {\n                  reject(lastError);\n                }\n\n                if (values.size > 0) {\n                  return resolve();\n                }\n\n                valueCb = resolve;\n                errCb = reject;\n              });\n            };\n\n            queueNext = function queueNext(input) {\n              var nextVal = Promise.resolve(input.next()).then( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(_ref) {\n                  var done, value;\n                  return _regeneratorRuntime().wrap(function _callee8$(_context9) {\n                    while (1) {\n                      switch (_context9.prev = _context9.next) {\n                        case 0:\n                          done = _ref.done, value = _ref.value;\n\n                          if (!done) {\n                            values.set(input, value);\n                          }\n\n                          concurrentWork.delete(nextVal);\n\n                        case 3:\n                        case \"end\":\n                          return _context9.stop();\n                      }\n                    }\n                  }, _callee8);\n                }));\n\n                return function (_x22) {\n                  return _ref2.apply(this, arguments);\n                };\n              }());\n              concurrentWork.add(nextVal);\n              nextVal.then(notifyDone, notifyError);\n            };\n\n            _iterator16 = _createForOfIteratorHelper(inputs);\n\n            try {\n              for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n                _input = _step16.value;\n                queueNext(_input);\n              }\n            } catch (err) {\n              _iterator16.e(err);\n            } finally {\n              _iterator16.f();\n            }\n\n          case 13:\n            if (!true) {\n              _context10.next = 39;\n              break;\n            }\n\n            if (!(concurrentWork.size === 0 && values.size === 0)) {\n              _context10.next = 16;\n              break;\n            }\n\n            return _context10.abrupt(\"return\");\n\n          case 16:\n            _context10.next = 18;\n            return _awaitAsyncGenerator(waitForQueue());\n\n          case 18:\n            _iterator17 = _createForOfIteratorHelper(values);\n            _context10.prev = 19;\n\n            _iterator17.s();\n\n          case 21:\n            if ((_step17 = _iterator17.n()).done) {\n              _context10.next = 29;\n              break;\n            }\n\n            _step17$value = _slicedToArray(_step17.value, 2), input = _step17$value[0], value = _step17$value[1];\n            values.delete(input);\n            _context10.next = 26;\n            return value;\n\n          case 26:\n            queueNext(input);\n\n          case 27:\n            _context10.next = 21;\n            break;\n\n          case 29:\n            _context10.next = 34;\n            break;\n\n          case 31:\n            _context10.prev = 31;\n            _context10.t0 = _context10[\"catch\"](19);\n\n            _iterator17.e(_context10.t0);\n\n          case 34:\n            _context10.prev = 34;\n\n            _iterator17.f();\n\n            return _context10.finish(34);\n\n          case 37:\n            _context10.next = 13;\n            break;\n\n          case 39:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _callee9, null, [[19, 31, 34, 37]]);\n  }));\n  return _parallelMerge.apply(this, arguments);\n}\n\nfunction _reduce(_x27, _x28, _x29) {\n  return _reduce2.apply(this, arguments);\n}\n\nfunction _reduce2() {\n  _reduce2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee27(func, start, iterable) {\n    var value, _iteratorAbruptCompletion9, _didIteratorError9, _iteratorError9, _iterator9, _step9, nextItem;\n\n    return _regeneratorRuntime().wrap(function _callee27$(_context33) {\n      while (1) {\n        switch (_context33.prev = _context33.next) {\n          case 0:\n            value = start;\n            _iteratorAbruptCompletion9 = false;\n            _didIteratorError9 = false;\n            _context33.prev = 3;\n            _iterator9 = _asyncIterator(iterable);\n\n          case 5:\n            _context33.next = 7;\n            return _iterator9.next();\n\n          case 7:\n            if (!(_iteratorAbruptCompletion9 = !(_step9 = _context33.sent).done)) {\n              _context33.next = 15;\n              break;\n            }\n\n            nextItem = _step9.value;\n            _context33.next = 11;\n            return func(value, nextItem);\n\n          case 11:\n            value = _context33.sent;\n\n          case 12:\n            _iteratorAbruptCompletion9 = false;\n            _context33.next = 5;\n            break;\n\n          case 15:\n            _context33.next = 21;\n            break;\n\n          case 17:\n            _context33.prev = 17;\n            _context33.t0 = _context33[\"catch\"](3);\n            _didIteratorError9 = true;\n            _iteratorError9 = _context33.t0;\n\n          case 21:\n            _context33.prev = 21;\n            _context33.prev = 22;\n\n            if (!(_iteratorAbruptCompletion9 && _iterator9.return != null)) {\n              _context33.next = 26;\n              break;\n            }\n\n            _context33.next = 26;\n            return _iterator9.return();\n\n          case 26:\n            _context33.prev = 26;\n\n            if (!_didIteratorError9) {\n              _context33.next = 29;\n              break;\n            }\n\n            throw _iteratorError9;\n\n          case 29:\n            return _context33.finish(26);\n\n          case 30:\n            return _context33.finish(21);\n\n          case 31:\n            return _context33.abrupt(\"return\", value);\n\n          case 32:\n          case \"end\":\n            return _context33.stop();\n        }\n      }\n    }, _callee27, null, [[3, 17, 21, 31], [22,, 26, 30]]);\n  }));\n  return _reduce2.apply(this, arguments);\n}\n\nfunction reduce(func, start, iterable) {\n  if (start === undefined) {\n    return function (curriedStart, curriedIterable) {\n      return curriedIterable ? _reduce(func, curriedStart, curriedIterable) : reduce(func, curriedStart);\n    };\n  }\n\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return reduce(func, start, curriedIterable);\n    };\n  }\n\n  return _reduce(func, start, iterable);\n}\n\nfunction _take(_x16, _x17) {\n  return _take2.apply(this, arguments);\n}\n\nfunction _take2() {\n  _take2 = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(count, iterable) {\n    var taken, _iteratorAbruptCompletion10, _didIteratorError10, _iteratorError10, _iterator10, _step10, val;\n\n    return _regeneratorRuntime().wrap(function _callee10$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            taken = 0;\n            _iteratorAbruptCompletion10 = false;\n            _didIteratorError10 = false;\n            _context11.prev = 3;\n            _iterator10 = _asyncIterator(iterable);\n\n          case 5:\n            _context11.next = 7;\n            return _awaitAsyncGenerator(_iterator10.next());\n\n          case 7:\n            if (!(_iteratorAbruptCompletion10 = !(_step10 = _context11.sent).done)) {\n              _context11.next = 19;\n              break;\n            }\n\n            val = _step10.value;\n            _context11.next = 11;\n            return _awaitAsyncGenerator(val);\n\n          case 11:\n            _context11.next = 13;\n            return _context11.sent;\n\n          case 13:\n            taken++;\n\n            if (!(taken >= count)) {\n              _context11.next = 16;\n              break;\n            }\n\n            return _context11.abrupt(\"break\", 19);\n\n          case 16:\n            _iteratorAbruptCompletion10 = false;\n            _context11.next = 5;\n            break;\n\n          case 19:\n            _context11.next = 25;\n            break;\n\n          case 21:\n            _context11.prev = 21;\n            _context11.t0 = _context11[\"catch\"](3);\n            _didIteratorError10 = true;\n            _iteratorError10 = _context11.t0;\n\n          case 25:\n            _context11.prev = 25;\n            _context11.prev = 26;\n\n            if (!(_iteratorAbruptCompletion10 && _iterator10.return != null)) {\n              _context11.next = 30;\n              break;\n            }\n\n            _context11.next = 30;\n            return _awaitAsyncGenerator(_iterator10.return());\n\n          case 30:\n            _context11.prev = 30;\n\n            if (!_didIteratorError10) {\n              _context11.next = 33;\n              break;\n            }\n\n            throw _iteratorError10;\n\n          case 33:\n            return _context11.finish(30);\n\n          case 34:\n            return _context11.finish(25);\n\n          case 35:\n          case \"end\":\n            return _context11.stop();\n        }\n      }\n    }, _callee10, null, [[3, 21, 25, 35], [26,, 30, 34]]);\n  }));\n  return _take2.apply(this, arguments);\n}\n\nfunction _syncTake(count, iterable) {\n  var taken, _iterator22, _step22, val;\n\n  return _regeneratorRuntime().wrap(function _syncTake$(_context24) {\n    while (1) {\n      switch (_context24.prev = _context24.next) {\n        case 0:\n          taken = 0;\n          _iterator22 = _createForOfIteratorHelper(iterable);\n          _context24.prev = 2;\n\n          _iterator22.s();\n\n        case 4:\n          if ((_step22 = _iterator22.n()).done) {\n            _context24.next = 13;\n            break;\n          }\n\n          val = _step22.value;\n          _context24.next = 8;\n          return val;\n\n        case 8:\n          taken++;\n\n          if (!(taken >= count)) {\n            _context24.next = 11;\n            break;\n          }\n\n          return _context24.abrupt(\"break\", 13);\n\n        case 11:\n          _context24.next = 4;\n          break;\n\n        case 13:\n          _context24.next = 18;\n          break;\n\n        case 15:\n          _context24.prev = 15;\n          _context24.t0 = _context24[\"catch\"](2);\n\n          _iterator22.e(_context24.t0);\n\n        case 18:\n          _context24.prev = 18;\n\n          _iterator22.f();\n\n          return _context24.finish(18);\n\n        case 21:\n        case \"end\":\n          return _context24.stop();\n      }\n    }\n  }, _marked4, null, [[2, 15, 18, 21]]);\n}\n\nfunction take(count, iterable) {\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return take(count, curriedIterable);\n    };\n  }\n\n  if (iterable[Symbol.asyncIterator]) {\n    return _take(count, iterable);\n  }\n\n  return _syncTake(count, iterable);\n}\n\nfunction _asyncTap(_x18, _x19) {\n  return _asyncTap2.apply(this, arguments);\n}\n\nfunction _asyncTap2() {\n  _asyncTap2 = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(func, iterable) {\n    var _iteratorAbruptCompletion11, _didIteratorError11, _iteratorError11, _iterator11, _step11, val;\n\n    return _regeneratorRuntime().wrap(function _callee11$(_context12) {\n      while (1) {\n        switch (_context12.prev = _context12.next) {\n          case 0:\n            _iteratorAbruptCompletion11 = false;\n            _didIteratorError11 = false;\n            _context12.prev = 2;\n            _iterator11 = _asyncIterator(iterable);\n\n          case 4:\n            _context12.next = 6;\n            return _awaitAsyncGenerator(_iterator11.next());\n\n          case 6:\n            if (!(_iteratorAbruptCompletion11 = !(_step11 = _context12.sent).done)) {\n              _context12.next = 15;\n              break;\n            }\n\n            val = _step11.value;\n            _context12.next = 10;\n            return _awaitAsyncGenerator(func(val));\n\n          case 10:\n            _context12.next = 12;\n            return val;\n\n          case 12:\n            _iteratorAbruptCompletion11 = false;\n            _context12.next = 4;\n            break;\n\n          case 15:\n            _context12.next = 21;\n            break;\n\n          case 17:\n            _context12.prev = 17;\n            _context12.t0 = _context12[\"catch\"](2);\n            _didIteratorError11 = true;\n            _iteratorError11 = _context12.t0;\n\n          case 21:\n            _context12.prev = 21;\n            _context12.prev = 22;\n\n            if (!(_iteratorAbruptCompletion11 && _iterator11.return != null)) {\n              _context12.next = 26;\n              break;\n            }\n\n            _context12.next = 26;\n            return _awaitAsyncGenerator(_iterator11.return());\n\n          case 26:\n            _context12.prev = 26;\n\n            if (!_didIteratorError11) {\n              _context12.next = 29;\n              break;\n            }\n\n            throw _iteratorError11;\n\n          case 29:\n            return _context12.finish(26);\n\n          case 30:\n            return _context12.finish(21);\n\n          case 31:\n          case \"end\":\n            return _context12.stop();\n        }\n      }\n    }, _callee11, null, [[2, 17, 21, 31], [22,, 26, 30]]);\n  }));\n  return _asyncTap2.apply(this, arguments);\n}\n\nfunction tap(func, iterable) {\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return _asyncTap(func, curriedIterable);\n    };\n  }\n\n  return _asyncTap(func, iterable);\n}\n\nvar sleep = function sleep(ms) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, ms);\n  });\n};\n\nfunction _throttle(limit, interval, iterable) {\n  if (!Number.isFinite(limit)) {\n    throw new TypeError('Expected `limit` to be a finite number');\n  }\n\n  if (limit <= 0) {\n    throw new TypeError('Expected `limit` to be greater than 0');\n  }\n\n  if (!Number.isFinite(interval)) {\n    throw new TypeError('Expected `interval` to be a finite number');\n  }\n\n  return function () {\n    var _throttle2 = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20() {\n      var sent, time, _iteratorAbruptCompletion12, _didIteratorError12, _iteratorError12, _iterator12, _step12, val, elapsedMs, waitFor;\n\n      return _regeneratorRuntime().wrap(function _callee20$(_context25) {\n        while (1) {\n          switch (_context25.prev = _context25.next) {\n            case 0:\n              sent = 0;\n              _iteratorAbruptCompletion12 = false;\n              _didIteratorError12 = false;\n              _context25.prev = 3;\n              _iterator12 = _asyncIterator(iterable);\n\n            case 5:\n              _context25.next = 7;\n              return _awaitAsyncGenerator(_iterator12.next());\n\n            case 7:\n              if (!(_iteratorAbruptCompletion12 = !(_step12 = _context25.sent).done)) {\n                _context25.next = 27;\n                break;\n              }\n\n              val = _step12.value;\n\n              if (!(sent < limit)) {\n                _context25.next = 15;\n                break;\n              }\n\n              if (typeof time === 'undefined') {\n                time = Date.now();\n              }\n\n              sent++;\n              _context25.next = 14;\n              return val;\n\n            case 14:\n              return _context25.abrupt(\"continue\", 24);\n\n            case 15:\n              // Only wait if the interval hasn't already passed while we were\n              // yielding the previous values.\n              elapsedMs = Date.now() - time;\n              waitFor = interval - elapsedMs;\n\n              if (!(waitFor > 0)) {\n                _context25.next = 20;\n                break;\n              }\n\n              _context25.next = 20;\n              return _awaitAsyncGenerator(sleep(waitFor));\n\n            case 20:\n              time = Date.now();\n              sent = 1;\n              _context25.next = 24;\n              return val;\n\n            case 24:\n              _iteratorAbruptCompletion12 = false;\n              _context25.next = 5;\n              break;\n\n            case 27:\n              _context25.next = 33;\n              break;\n\n            case 29:\n              _context25.prev = 29;\n              _context25.t0 = _context25[\"catch\"](3);\n              _didIteratorError12 = true;\n              _iteratorError12 = _context25.t0;\n\n            case 33:\n              _context25.prev = 33;\n              _context25.prev = 34;\n\n              if (!(_iteratorAbruptCompletion12 && _iterator12.return != null)) {\n                _context25.next = 38;\n                break;\n              }\n\n              _context25.next = 38;\n              return _awaitAsyncGenerator(_iterator12.return());\n\n            case 38:\n              _context25.prev = 38;\n\n              if (!_didIteratorError12) {\n                _context25.next = 41;\n                break;\n              }\n\n              throw _iteratorError12;\n\n            case 41:\n              return _context25.finish(38);\n\n            case 42:\n              return _context25.finish(33);\n\n            case 43:\n            case \"end\":\n              return _context25.stop();\n          }\n        }\n      }, _callee20, null, [[3, 29, 33, 43], [34,, 38, 42]]);\n    }));\n\n    function __throttle() {\n      return _throttle2.apply(this, arguments);\n    }\n\n    return __throttle;\n  }()();\n}\n\nfunction throttle(limit, interval, iterable) {\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return _throttle(limit, interval, curriedIterable);\n    };\n  }\n\n  return _throttle(limit, interval, iterable);\n}\n\nfunction addTime(a, b) {\n  var seconds = a[0] + b[0];\n  var nanoseconds = a[1] + b[1];\n\n  if (nanoseconds >= 1000000000) {\n    var remainder = nanoseconds % 1000000000;\n    seconds += (nanoseconds - remainder) / 1000000000;\n    nanoseconds = remainder;\n  }\n\n  return [seconds, nanoseconds];\n}\n\nfunction _asyncTime(_x20, _x21) {\n  return _asyncTime2.apply(this, arguments);\n}\n\nfunction _asyncTime2() {\n  _asyncTime2 = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(config, iterable) {\n    var itr, total, start, _yield$_awaitAsyncGen2, value, done, delta;\n\n    return _regeneratorRuntime().wrap(function _callee12$(_context13) {\n      while (1) {\n        switch (_context13.prev = _context13.next) {\n          case 0:\n            itr = iterable[Symbol.asyncIterator]();\n            total = [0, 0];\n\n          case 2:\n            if (!true) {\n              _context13.next = 19;\n              break;\n            }\n\n            start = process.hrtime();\n            _context13.next = 6;\n            return _awaitAsyncGenerator(itr.next());\n\n          case 6:\n            _yield$_awaitAsyncGen2 = _context13.sent;\n            value = _yield$_awaitAsyncGen2.value;\n            done = _yield$_awaitAsyncGen2.done;\n            delta = process.hrtime(start);\n            total = addTime(total, delta);\n\n            if (config.progress) {\n              config.progress(delta, total);\n            }\n\n            if (!done) {\n              _context13.next = 15;\n              break;\n            }\n\n            if (config.total) {\n              config.total(total);\n            }\n\n            return _context13.abrupt(\"return\", value);\n\n          case 15:\n            _context13.next = 17;\n            return value;\n\n          case 17:\n            _context13.next = 2;\n            break;\n\n          case 19:\n          case \"end\":\n            return _context13.stop();\n        }\n      }\n    }, _callee12);\n  }));\n  return _asyncTime2.apply(this, arguments);\n}\n\nfunction _syncTime(config, iterable) {\n  var itr, total, start, _itr$next, value, done, delta;\n\n  return _regeneratorRuntime().wrap(function _syncTime$(_context26) {\n    while (1) {\n      switch (_context26.prev = _context26.next) {\n        case 0:\n          itr = iterable[Symbol.iterator]();\n          total = [0, 0];\n\n        case 2:\n          if (!true) {\n            _context26.next = 15;\n            break;\n          }\n\n          start = process.hrtime();\n          _itr$next = itr.next(), value = _itr$next.value, done = _itr$next.done;\n          delta = process.hrtime(start);\n          total = addTime(total, delta);\n\n          if (config.progress) {\n            config.progress(delta, total);\n          }\n\n          if (!done) {\n            _context26.next = 11;\n            break;\n          }\n\n          if (config.total) {\n            config.total(total);\n          }\n\n          return _context26.abrupt(\"return\", value);\n\n        case 11:\n          _context26.next = 13;\n          return value;\n\n        case 13:\n          _context26.next = 2;\n          break;\n\n        case 15:\n        case \"end\":\n          return _context26.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction time() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var iterable = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return time(config, curriedIterable);\n    };\n  }\n\n  if (iterable[Symbol.asyncIterator] !== undefined) {\n    return _asyncTime(config, iterable);\n  } else {\n    return _syncTime(config, iterable);\n  }\n}\n\nfunction _transform(concurrency, func, iterable) {\n  var iterator = getIterator(iterable);\n  var resultQueue = [];\n  var readQueue = [];\n  var ended = false;\n  var reading = false;\n  var inflightCount = 0;\n  var lastError = null;\n\n  function fulfillReadQueue() {\n    while (readQueue.length > 0 && resultQueue.length > 0) {\n      var _readQueue$shift4 = readQueue.shift(),\n          resolve = _readQueue$shift4.resolve;\n\n      var value = resultQueue.shift();\n      resolve({\n        done: false,\n        value: value\n      });\n    }\n\n    while (readQueue.length > 0 && inflightCount === 0 && ended) {\n      var _readQueue$shift5 = readQueue.shift(),\n          _resolve2 = _readQueue$shift5.resolve,\n          reject = _readQueue$shift5.reject;\n\n      if (lastError) {\n        reject(lastError);\n        lastError = null;\n      } else {\n        _resolve2({\n          done: true,\n          value: undefined\n        });\n      }\n    }\n  }\n\n  function fillQueue() {\n    return _fillQueue3.apply(this, arguments);\n  }\n\n  function _fillQueue3() {\n    _fillQueue3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21() {\n      var _yield$iterator$next3, done, value;\n\n      return _regeneratorRuntime().wrap(function _callee21$(_context27) {\n        while (1) {\n          switch (_context27.prev = _context27.next) {\n            case 0:\n              if (!ended) {\n                _context27.next = 3;\n                break;\n              }\n\n              fulfillReadQueue();\n              return _context27.abrupt(\"return\");\n\n            case 3:\n              if (!reading) {\n                _context27.next = 5;\n                break;\n              }\n\n              return _context27.abrupt(\"return\");\n\n            case 5:\n              if (!(inflightCount + resultQueue.length >= concurrency)) {\n                _context27.next = 7;\n                break;\n              }\n\n              return _context27.abrupt(\"return\");\n\n            case 7:\n              reading = true;\n              inflightCount++;\n              _context27.prev = 9;\n              _context27.next = 12;\n              return iterator.next();\n\n            case 12:\n              _yield$iterator$next3 = _context27.sent;\n              done = _yield$iterator$next3.done;\n              value = _yield$iterator$next3.value;\n\n              if (done) {\n                ended = true;\n                inflightCount--;\n                fulfillReadQueue();\n              } else {\n                mapAndQueue(value);\n              }\n\n              _context27.next = 24;\n              break;\n\n            case 18:\n              _context27.prev = 18;\n              _context27.t0 = _context27[\"catch\"](9);\n              ended = true;\n              inflightCount--;\n              lastError = _context27.t0;\n              fulfillReadQueue();\n\n            case 24:\n              reading = false;\n              fillQueue();\n\n            case 26:\n            case \"end\":\n              return _context27.stop();\n          }\n        }\n      }, _callee21, null, [[9, 18]]);\n    }));\n    return _fillQueue3.apply(this, arguments);\n  }\n\n  function mapAndQueue(_x30) {\n    return _mapAndQueue2.apply(this, arguments);\n  }\n\n  function _mapAndQueue2() {\n    _mapAndQueue2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee22(itrValue) {\n      var value;\n      return _regeneratorRuntime().wrap(function _callee22$(_context28) {\n        while (1) {\n          switch (_context28.prev = _context28.next) {\n            case 0:\n              _context28.prev = 0;\n              _context28.next = 3;\n              return func(itrValue);\n\n            case 3:\n              value = _context28.sent;\n              resultQueue.push(value);\n              _context28.next = 11;\n              break;\n\n            case 7:\n              _context28.prev = 7;\n              _context28.t0 = _context28[\"catch\"](0);\n              ended = true;\n              lastError = _context28.t0;\n\n            case 11:\n              inflightCount--;\n              fulfillReadQueue();\n              fillQueue();\n\n            case 14:\n            case \"end\":\n              return _context28.stop();\n          }\n        }\n      }, _callee22, null, [[0, 7]]);\n    }));\n    return _mapAndQueue2.apply(this, arguments);\n  }\n\n  function next() {\n    return _next3.apply(this, arguments);\n  }\n\n  function _next3() {\n    _next3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee23() {\n      var deferred, value;\n      return _regeneratorRuntime().wrap(function _callee23$(_context29) {\n        while (1) {\n          switch (_context29.prev = _context29.next) {\n            case 0:\n              if (!(resultQueue.length === 0)) {\n                _context29.next = 5;\n                break;\n              }\n\n              deferred = defer();\n              readQueue.push(deferred);\n              fillQueue();\n              return _context29.abrupt(\"return\", deferred.promise);\n\n            case 5:\n              value = resultQueue.shift();\n              fillQueue();\n              return _context29.abrupt(\"return\", {\n                done: false,\n                value: value\n              });\n\n            case 8:\n            case \"end\":\n              return _context29.stop();\n          }\n        }\n      }, _callee23);\n    }));\n    return _next3.apply(this, arguments);\n  }\n\n  var asyncIterableIterator = _defineProperty({\n    next: next\n  }, Symbol.asyncIterator, function () {\n    return asyncIterableIterator;\n  });\n\n  return asyncIterableIterator;\n}\n\nfunction transform(concurrency, func, iterable) {\n  if (func === undefined) {\n    return function (curriedFunc, curriedIterable) {\n      return curriedIterable ? transform(concurrency, curriedFunc, curriedIterable) : transform(concurrency, curriedFunc);\n    };\n  }\n\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return transform(concurrency, func, curriedIterable);\n    };\n  }\n\n  return _transform(concurrency, func, iterable);\n}\n\nfunction _writeToStream(_x31, _x32) {\n  return _writeToStream2.apply(this, arguments);\n}\n\nfunction _writeToStream2() {\n  _writeToStream2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee28(stream, iterable) {\n    var lastError, errCb, drainCb, notifyError, notifyDrain, cleanup, waitForDrain, _iteratorAbruptCompletion13, _didIteratorError13, _iteratorError13, _iterator13, _step13, value;\n\n    return _regeneratorRuntime().wrap(function _callee28$(_context34) {\n      while (1) {\n        switch (_context34.prev = _context34.next) {\n          case 0:\n            lastError = null;\n            errCb = null;\n            drainCb = null;\n\n            notifyError = function notifyError(err) {\n              lastError = err;\n\n              if (errCb) {\n                errCb(err);\n              }\n            };\n\n            notifyDrain = function notifyDrain() {\n              if (drainCb) {\n                drainCb();\n              }\n            };\n\n            cleanup = function cleanup() {\n              stream.removeListener('error', notifyError);\n              stream.removeListener('drain', notifyDrain);\n            };\n\n            stream.once('error', notifyError);\n\n            waitForDrain = function waitForDrain() {\n              return new Promise(function (resolve, reject) {\n                if (lastError) {\n                  return reject(lastError);\n                }\n\n                stream.once('drain', notifyDrain);\n                drainCb = resolve;\n                errCb = reject;\n              });\n            };\n\n            _iteratorAbruptCompletion13 = false;\n            _didIteratorError13 = false;\n            _context34.prev = 10;\n            _iterator13 = _asyncIterator(iterable);\n\n          case 12:\n            _context34.next = 14;\n            return _iterator13.next();\n\n          case 14:\n            if (!(_iteratorAbruptCompletion13 = !(_step13 = _context34.sent).done)) {\n              _context34.next = 24;\n              break;\n            }\n\n            value = _step13.value;\n\n            if (!(stream.write(value) === false)) {\n              _context34.next = 19;\n              break;\n            }\n\n            _context34.next = 19;\n            return waitForDrain();\n\n          case 19:\n            if (!lastError) {\n              _context34.next = 21;\n              break;\n            }\n\n            return _context34.abrupt(\"break\", 24);\n\n          case 21:\n            _iteratorAbruptCompletion13 = false;\n            _context34.next = 12;\n            break;\n\n          case 24:\n            _context34.next = 30;\n            break;\n\n          case 26:\n            _context34.prev = 26;\n            _context34.t0 = _context34[\"catch\"](10);\n            _didIteratorError13 = true;\n            _iteratorError13 = _context34.t0;\n\n          case 30:\n            _context34.prev = 30;\n            _context34.prev = 31;\n\n            if (!(_iteratorAbruptCompletion13 && _iterator13.return != null)) {\n              _context34.next = 35;\n              break;\n            }\n\n            _context34.next = 35;\n            return _iterator13.return();\n\n          case 35:\n            _context34.prev = 35;\n\n            if (!_didIteratorError13) {\n              _context34.next = 38;\n              break;\n            }\n\n            throw _iteratorError13;\n\n          case 38:\n            return _context34.finish(35);\n\n          case 39:\n            return _context34.finish(30);\n\n          case 40:\n            cleanup();\n\n            if (!lastError) {\n              _context34.next = 43;\n              break;\n            }\n\n            throw lastError;\n\n          case 43:\n          case \"end\":\n            return _context34.stop();\n        }\n      }\n    }, _callee28, null, [[10, 26, 30, 40], [31,, 35, 39]]);\n  }));\n  return _writeToStream2.apply(this, arguments);\n}\n\nfunction writeToStream(stream, iterable) {\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return _writeToStream(stream, curriedIterable);\n    };\n  }\n\n  return _writeToStream(stream, iterable);\n}\n\nexport { batch, batchWithTimeout, buffer, collect, concat, consume, filter, flatMap, flatTransform, flatten, fromStream, getIterator, map, merge, parallelFlatMap, parallelMap, parallelMerge, pipeline, reduce, take, tap, throttle, time, transform, writeToStream };","map":{"version":3,"names":["_syncBatch","syncBuffer","_syncConcat","_syncTake","_syncTime","_batch","size","iterable","dataBatch","data","push","length","batch","undefined","curriedIterable","Symbol","asyncIterator","TIMEOUT","createTimer","duration","timeoutId","Promise","resolve","setTimeout","clearTimeout","_batchWithTimeout","timeout","iterator","batchData","startTimer","deleteTimer","timer","clearTimer","pendingData","next","race","res","done","value","batchWithTimeout","Infinity","getIterator","TypeError","defer","reject","promise","resolveFunc","rejectFunc","_buffer","resultQueue","readQueue","reading","ended","fulfillReadQueue","readDeferred","shift","error","fillQueue","deferred","asyncIterableIterator","valueQueue","e","buffer","_collect","values","collect","Array","from","_concat","iterables","concat","hasAnyAsync","find","itr","_consume","val","consume","_filter","filterFunc","filter","flatten","maybeItr","_map","func","map","flatMap","i","_flatTransform","concurrency","inflightCount","lastError","mapAndQueue","itrValue","asyncVal","flatTransform","curriedFunc","onceReadable","stream","once","_fromStream","read","_readableState","fromStream","merge","sources","Set","nextVal","delete","pipeline","firstFn","previousFn","fns","_parallelMap","transformError","wrapFunc","stopOnError","source","output","parallelMap","parallelFlatMap","parallelMerge","inputs","concurrentWork","Map","errCb","valueCb","notifyError","err","notifyDone","waitForQueue","queueNext","input","then","set","add","_reduce","start","nextItem","reduce","curriedStart","_take","count","taken","take","_asyncTap","tap","sleep","ms","_throttle","limit","interval","Number","isFinite","sent","time","Date","now","elapsedMs","waitFor","__throttle","throttle","addTime","a","b","seconds","nanoseconds","remainder","_asyncTime","config","total","process","hrtime","delta","progress","_transform","transform","_writeToStream","drainCb","notifyDrain","cleanup","removeListener","waitForDrain","write","writeToStream"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/streaming-iterables/dist/index.mjs"],"sourcesContent":["async function* _batch(size, iterable) {\n    let dataBatch = [];\n    for await (const data of iterable) {\n        dataBatch.push(data);\n        if (dataBatch.length === size) {\n            yield dataBatch;\n            dataBatch = [];\n        }\n    }\n    if (dataBatch.length > 0) {\n        yield dataBatch;\n    }\n}\nfunction* _syncBatch(size, iterable) {\n    let dataBatch = [];\n    for (const data of iterable) {\n        dataBatch.push(data);\n        if (dataBatch.length === size) {\n            yield dataBatch;\n            dataBatch = [];\n        }\n    }\n    if (dataBatch.length > 0) {\n        yield dataBatch;\n    }\n}\nfunction batch(size, iterable) {\n    if (iterable === undefined) {\n        return curriedIterable => batch(size, curriedIterable);\n    }\n    if (iterable[Symbol.asyncIterator]) {\n        return _batch(size, iterable);\n    }\n    return _syncBatch(size, iterable);\n}\n\nconst TIMEOUT = Symbol('TIMEOUT');\nconst createTimer = (duration) => {\n    let timeoutId;\n    return [\n        new Promise(resolve => {\n            timeoutId = setTimeout(() => resolve(TIMEOUT), duration);\n        }),\n        () => {\n            clearTimeout(timeoutId);\n        },\n    ];\n};\n// Like `batch` but flushes early if the `timeout` is reached\n// NOTE: The strategy is to only hold onto a single item for a maximum of `timeout` ms.\nasync function* _batchWithTimeout(size, timeout, iterable) {\n    const iterator = iterable[Symbol.asyncIterator]();\n    let pendingData;\n    let batchData = [];\n    let timer;\n    let clearTimer;\n    const startTimer = () => {\n        deleteTimer();\n        [timer, clearTimer] = createTimer(timeout);\n    };\n    const deleteTimer = () => {\n        if (clearTimer) {\n            clearTimer();\n        }\n        timer = undefined;\n    };\n    pendingData = iterator.next();\n    while (true) {\n        const res = await (timer ? Promise.race([pendingData, timer]) : pendingData);\n        if (res === TIMEOUT || res.done) {\n            // Flush early (before we reach the batch size)\n            if (batchData.length) {\n                yield batchData;\n                batchData = [];\n            }\n            deleteTimer();\n            // And exit appropriately\n            if (res !== TIMEOUT) {\n                // done\n                break;\n            }\n            continue;\n        }\n        // Fetch next item early doors (before we potentially yield)\n        pendingData = iterator.next();\n        // Then handle the value\n        batchData.push(res.value);\n        if (batchData.length === 1) {\n            // Start timer once we have at least 1 item ready to go\n            startTimer();\n        }\n        if (batchData.length === size) {\n            yield batchData;\n            batchData = [];\n            deleteTimer();\n            continue;\n        }\n    }\n}\nfunction batchWithTimeout(size, timeout, iterable) {\n    if (iterable === undefined) {\n        return curriedIterable => batchWithTimeout(size, timeout, curriedIterable);\n    }\n    if (iterable[Symbol.asyncIterator] && timeout !== Infinity) {\n        return _batchWithTimeout(size, timeout, iterable);\n    }\n    // For sync iterables or an infinite timeout, the timeout is irrelevant so just fallback to regular `batch`.\n    return batch(size, iterable);\n}\n\nfunction getIterator(iterable) {\n    if (typeof iterable.next === 'function') {\n        return iterable;\n    }\n    if (typeof iterable[Symbol.iterator] === 'function') {\n        return iterable[Symbol.iterator]();\n    }\n    if (typeof iterable[Symbol.asyncIterator] === 'function') {\n        return iterable[Symbol.asyncIterator]();\n    }\n    throw new TypeError('\"values\" does not to conform to any of the iterator or iterable protocols');\n}\n\nfunction defer() {\n    let reject;\n    let resolve;\n    const promise = new Promise((resolveFunc, rejectFunc) => {\n        resolve = resolveFunc;\n        reject = rejectFunc;\n    });\n    return {\n        promise,\n        reject,\n        resolve,\n    };\n}\n\nfunction _buffer(size, iterable) {\n    const iterator = getIterator(iterable);\n    const resultQueue = [];\n    const readQueue = [];\n    let reading = false;\n    let ended = false;\n    function fulfillReadQueue() {\n        while (readQueue.length > 0 && resultQueue.length > 0) {\n            const readDeferred = readQueue.shift();\n            const { error, value } = resultQueue.shift();\n            if (error) {\n                readDeferred.reject(error);\n            }\n            else {\n                readDeferred.resolve({ done: false, value });\n            }\n        }\n        while (readQueue.length > 0 && ended) {\n            const { resolve } = readQueue.shift();\n            resolve({ done: true, value: undefined });\n        }\n    }\n    async function fillQueue() {\n        if (ended) {\n            return;\n        }\n        if (reading) {\n            return;\n        }\n        if (resultQueue.length >= size) {\n            return;\n        }\n        reading = true;\n        try {\n            const { done, value } = await iterator.next();\n            if (done) {\n                ended = true;\n            }\n            else {\n                resultQueue.push({ value });\n            }\n        }\n        catch (error) {\n            ended = true;\n            resultQueue.push({ error });\n        }\n        fulfillReadQueue();\n        reading = false;\n        fillQueue();\n    }\n    async function next() {\n        if (resultQueue.length > 0) {\n            const { error, value } = resultQueue.shift();\n            if (error) {\n                throw error;\n            }\n            fillQueue();\n            return { done: false, value };\n        }\n        if (ended) {\n            return { done: true, value: undefined }; // stupid ts\n        }\n        const deferred = defer();\n        readQueue.push(deferred);\n        fillQueue();\n        return deferred.promise;\n    }\n    const asyncIterableIterator = {\n        next,\n        [Symbol.asyncIterator]: () => asyncIterableIterator,\n    };\n    return asyncIterableIterator;\n}\nfunction* syncBuffer(size, iterable) {\n    const valueQueue = [];\n    let e;\n    try {\n        for (const value of iterable) {\n            valueQueue.push(value);\n            if (valueQueue.length <= size) {\n                continue;\n            }\n            yield valueQueue.shift();\n        }\n    }\n    catch (error) {\n        e = error;\n    }\n    for (const value of valueQueue) {\n        yield value;\n    }\n    if (e) {\n        throw e;\n    }\n}\nfunction buffer(size, iterable) {\n    if (iterable === undefined) {\n        return curriedIterable => buffer(size, curriedIterable);\n    }\n    if (size === 0) {\n        return iterable;\n    }\n    if (iterable[Symbol.asyncIterator]) {\n        return _buffer(size, iterable);\n    }\n    return syncBuffer(size, iterable);\n}\n\nasync function _collect(iterable) {\n    const values = [];\n    for await (const value of iterable) {\n        values.push(value);\n    }\n    return values;\n}\nfunction collect(iterable) {\n    if (iterable[Symbol.asyncIterator]) {\n        return _collect(iterable);\n    }\n    return Array.from(iterable);\n}\n\nasync function* _concat(iterables) {\n    for await (const iterable of iterables) {\n        yield* iterable;\n    }\n}\nfunction* _syncConcat(iterables) {\n    for (const iterable of iterables) {\n        yield* iterable;\n    }\n}\nfunction concat(...iterables) {\n    const hasAnyAsync = iterables.find(itr => itr[Symbol.asyncIterator] !== undefined);\n    if (hasAnyAsync) {\n        return _concat(iterables);\n    }\n    else {\n        return _syncConcat(iterables);\n    }\n}\n\nasync function _consume(iterable) {\n    for await (const val of iterable) {\n        // do nothing\n    }\n}\nfunction consume(iterable) {\n    if (iterable[Symbol.asyncIterator]) {\n        return _consume(iterable);\n    }\n    for (const val of iterable) {\n        // do nothing\n    }\n}\n\nasync function* _filter(filterFunc, iterable) {\n    for await (const data of iterable) {\n        if (await filterFunc(data)) {\n            yield data;\n        }\n    }\n}\nfunction filter(filterFunc, iterable) {\n    if (iterable === undefined) {\n        return (curriedIterable) => _filter(filterFunc, curriedIterable);\n    }\n    return _filter(filterFunc, iterable);\n}\n\nasync function* flatten(iterable) {\n    for await (const maybeItr of iterable) {\n        if (maybeItr && typeof maybeItr !== 'string' && (maybeItr[Symbol.iterator] || maybeItr[Symbol.asyncIterator])) {\n            yield* flatten(maybeItr);\n        }\n        else {\n            yield maybeItr;\n        }\n    }\n}\n\nasync function* _map(func, iterable) {\n    for await (const val of iterable) {\n        yield await func(val);\n    }\n}\nfunction map(func, iterable) {\n    if (iterable === undefined) {\n        return curriedIterable => _map(func, curriedIterable);\n    }\n    return _map(func, iterable);\n}\n\nfunction flatMap(func, iterable) {\n    if (iterable === undefined) {\n        return curriedIterable => flatMap(func, curriedIterable);\n    }\n    return filter(i => i !== undefined && i !== null, flatten(map(func, iterable)));\n}\n\nfunction _flatTransform(concurrency, func, iterable) {\n    const iterator = getIterator(iterable);\n    const resultQueue = [];\n    const readQueue = [];\n    let ended = false;\n    let reading = false;\n    let inflightCount = 0;\n    let lastError = null;\n    function fulfillReadQueue() {\n        while (readQueue.length > 0 && resultQueue.length > 0) {\n            const { resolve } = readQueue.shift();\n            const value = resultQueue.shift();\n            resolve({ done: false, value });\n        }\n        while (readQueue.length > 0 && inflightCount === 0 && ended) {\n            const { resolve, reject } = readQueue.shift();\n            if (lastError) {\n                reject(lastError);\n                lastError = null;\n            }\n            else {\n                resolve({ done: true, value: undefined });\n            }\n        }\n    }\n    async function fillQueue() {\n        if (ended) {\n            fulfillReadQueue();\n            return;\n        }\n        if (reading) {\n            return;\n        }\n        if (inflightCount + resultQueue.length >= concurrency) {\n            return;\n        }\n        reading = true;\n        inflightCount++;\n        try {\n            const { done, value } = await iterator.next();\n            if (done) {\n                ended = true;\n                inflightCount--;\n                fulfillReadQueue();\n            }\n            else {\n                mapAndQueue(value);\n            }\n        }\n        catch (error) {\n            ended = true;\n            inflightCount--;\n            lastError = error;\n            fulfillReadQueue();\n        }\n        reading = false;\n        fillQueue();\n    }\n    async function mapAndQueue(itrValue) {\n        try {\n            const value = await func(itrValue);\n            if (value && value[Symbol.asyncIterator]) {\n                for await (const asyncVal of value) {\n                    resultQueue.push(asyncVal);\n                }\n            }\n            else {\n                resultQueue.push(value);\n            }\n        }\n        catch (error) {\n            ended = true;\n            lastError = error;\n        }\n        inflightCount--;\n        fulfillReadQueue();\n        fillQueue();\n    }\n    async function next() {\n        if (resultQueue.length === 0) {\n            const deferred = defer();\n            readQueue.push(deferred);\n            fillQueue();\n            return deferred.promise;\n        }\n        const value = resultQueue.shift();\n        fillQueue();\n        return { done: false, value };\n    }\n    const asyncIterableIterator = {\n        next,\n        [Symbol.asyncIterator]: () => asyncIterableIterator,\n    };\n    return asyncIterableIterator;\n}\nfunction flatTransform(concurrency, func, iterable) {\n    if (func === undefined) {\n        return (curriedFunc, curriedIterable) => curriedIterable\n            ? flatTransform(concurrency, curriedFunc, curriedIterable)\n            : flatTransform(concurrency, curriedFunc);\n    }\n    if (iterable === undefined) {\n        return (curriedIterable) => flatTransform(concurrency, func, curriedIterable);\n    }\n    return filter(i => i !== undefined && i !== null, flatten(_flatTransform(concurrency, func, iterable)));\n}\n\nasync function onceReadable(stream) {\n    return new Promise(resolve => {\n        stream.once('readable', () => {\n            resolve();\n        });\n    });\n}\nasync function* _fromStream(stream) {\n    while (true) {\n        const data = stream.read();\n        if (data !== null) {\n            yield data;\n            continue;\n        }\n        if (stream._readableState.ended) {\n            break;\n        }\n        await onceReadable(stream);\n    }\n}\nfunction fromStream(stream) {\n    if (typeof stream[Symbol.asyncIterator] === 'function') {\n        return stream;\n    }\n    return _fromStream(stream);\n}\n\nasync function* merge(...iterables) {\n    const sources = new Set(iterables.map(getIterator));\n    while (sources.size > 0) {\n        for (const iterator of sources) {\n            const nextVal = await iterator.next();\n            if (nextVal.done) {\n                sources.delete(iterator);\n            }\n            else {\n                yield nextVal.value;\n            }\n        }\n    }\n}\n\nfunction pipeline(firstFn, ...fns) {\n    let previousFn = firstFn();\n    for (const func of fns) {\n        previousFn = func(previousFn);\n    }\n    return previousFn;\n}\n\nasync function* _parallelMap(concurrency, func, iterable) {\n    let transformError = null;\n    const wrapFunc = value => ({\n        value: func(value),\n    });\n    const stopOnError = async function* (source) {\n        for await (const value of source) {\n            if (transformError) {\n                return;\n            }\n            yield value;\n        }\n    };\n    const output = pipeline(() => iterable, buffer(1), stopOnError, map(wrapFunc), buffer(concurrency - 1));\n    const itr = getIterator(output);\n    while (true) {\n        const { value, done } = await itr.next();\n        if (done) {\n            break;\n        }\n        try {\n            const val = await value.value;\n            if (!transformError) {\n                yield val;\n            }\n        }\n        catch (error) {\n            transformError = error;\n        }\n    }\n    if (transformError) {\n        throw transformError;\n    }\n}\nfunction parallelMap(concurrency, func, iterable) {\n    if (func === undefined) {\n        return (curriedFunc, curriedIterable) => parallelMap(concurrency, curriedFunc, curriedIterable);\n    }\n    if (iterable === undefined) {\n        return curriedIterable => parallelMap(concurrency, func, curriedIterable);\n    }\n    if (concurrency === 1) {\n        return map(func, iterable);\n    }\n    return _parallelMap(concurrency, func, iterable);\n}\n\nfunction parallelFlatMap(concurrency, func, iterable) {\n    if (func === undefined) {\n        return (curriedFunc, curriedIterable) => curriedIterable\n            ? parallelFlatMap(concurrency, curriedFunc, curriedIterable)\n            : parallelFlatMap(concurrency, curriedFunc);\n    }\n    if (iterable === undefined) {\n        return (curriedIterable) => parallelFlatMap(concurrency, func, curriedIterable);\n    }\n    return filter(i => i !== undefined && i !== null, flatten(parallelMap(concurrency, func, iterable)));\n}\n\nasync function* parallelMerge(...iterables) {\n    const inputs = iterables.map(getIterator);\n    const concurrentWork = new Set();\n    const values = new Map();\n    let lastError = null;\n    let errCb = null;\n    let valueCb = null;\n    const notifyError = err => {\n        lastError = err;\n        if (errCb) {\n            errCb(err);\n        }\n    };\n    const notifyDone = value => {\n        if (valueCb) {\n            valueCb(value);\n        }\n    };\n    const waitForQueue = () => new Promise((resolve, reject) => {\n        if (lastError) {\n            reject(lastError);\n        }\n        if (values.size > 0) {\n            return resolve();\n        }\n        valueCb = resolve;\n        errCb = reject;\n    });\n    const queueNext = input => {\n        const nextVal = Promise.resolve(input.next()).then(async ({ done, value }) => {\n            if (!done) {\n                values.set(input, value);\n            }\n            concurrentWork.delete(nextVal);\n        });\n        concurrentWork.add(nextVal);\n        nextVal.then(notifyDone, notifyError);\n    };\n    for (const input of inputs) {\n        queueNext(input);\n    }\n    while (true) {\n        // We technically don't have to check `values.size` as the for loop should have emptied it\n        // However I haven't yet found specs verifying that behavior, only tests\n        // the guard in waitForQueue() checking for values is in place for the same reason\n        if (concurrentWork.size === 0 && values.size === 0) {\n            return;\n        }\n        await waitForQueue();\n        for (const [input, value] of values) {\n            values.delete(input);\n            yield value;\n            queueNext(input);\n        }\n    }\n}\n\nasync function _reduce(func, start, iterable) {\n    let value = start;\n    for await (const nextItem of iterable) {\n        value = await func(value, nextItem);\n    }\n    return value;\n}\nfunction reduce(func, start, iterable) {\n    if (start === undefined) {\n        return (curriedStart, curriedIterable) => curriedIterable ? _reduce(func, curriedStart, curriedIterable) : reduce(func, curriedStart);\n    }\n    if (iterable === undefined) {\n        return (curriedIterable) => reduce(func, start, curriedIterable);\n    }\n    return _reduce(func, start, iterable);\n}\n\nasync function* _take(count, iterable) {\n    let taken = 0;\n    for await (const val of iterable) {\n        yield await val;\n        taken++;\n        if (taken >= count) {\n            break;\n        }\n    }\n}\nfunction* _syncTake(count, iterable) {\n    let taken = 0;\n    for (const val of iterable) {\n        yield val;\n        taken++;\n        if (taken >= count) {\n            break;\n        }\n    }\n}\nfunction take(count, iterable) {\n    if (iterable === undefined) {\n        return curriedIterable => take(count, curriedIterable);\n    }\n    if (iterable[Symbol.asyncIterator]) {\n        return _take(count, iterable);\n    }\n    return _syncTake(count, iterable);\n}\n\nasync function* _asyncTap(func, iterable) {\n    for await (const val of iterable) {\n        await func(val);\n        yield val;\n    }\n}\nfunction tap(func, iterable) {\n    if (iterable === undefined) {\n        return (curriedIterable) => _asyncTap(func, curriedIterable);\n    }\n    return _asyncTap(func, iterable);\n}\n\nconst sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));\nfunction _throttle(limit, interval, iterable) {\n    if (!Number.isFinite(limit)) {\n        throw new TypeError('Expected `limit` to be a finite number');\n    }\n    if (limit <= 0) {\n        throw new TypeError('Expected `limit` to be greater than 0');\n    }\n    if (!Number.isFinite(interval)) {\n        throw new TypeError('Expected `interval` to be a finite number');\n    }\n    return (async function* __throttle() {\n        let sent = 0;\n        let time;\n        for await (const val of iterable) {\n            if (sent < limit) {\n                if (typeof time === 'undefined') {\n                    time = Date.now();\n                }\n                sent++;\n                yield val;\n                continue;\n            }\n            // Only wait if the interval hasn't already passed while we were\n            // yielding the previous values.\n            const elapsedMs = Date.now() - time;\n            const waitFor = interval - elapsedMs;\n            if (waitFor > 0) {\n                await sleep(waitFor);\n            }\n            time = Date.now();\n            sent = 1;\n            yield val;\n        }\n    })();\n}\nfunction throttle(limit, interval, iterable) {\n    if (iterable === undefined) {\n        return (curriedIterable) => _throttle(limit, interval, curriedIterable);\n    }\n    return _throttle(limit, interval, iterable);\n}\n\nfunction addTime(a, b) {\n    let seconds = a[0] + b[0];\n    let nanoseconds = a[1] + b[1];\n    if (nanoseconds >= 1000000000) {\n        const remainder = nanoseconds % 1000000000;\n        seconds += (nanoseconds - remainder) / 1000000000;\n        nanoseconds = remainder;\n    }\n    return [seconds, nanoseconds];\n}\nasync function* _asyncTime(config, iterable) {\n    const itr = iterable[Symbol.asyncIterator]();\n    let total = [0, 0];\n    while (true) {\n        const start = process.hrtime();\n        const { value, done } = await itr.next();\n        const delta = process.hrtime(start);\n        total = addTime(total, delta);\n        if (config.progress) {\n            config.progress(delta, total);\n        }\n        if (done) {\n            if (config.total) {\n                config.total(total);\n            }\n            return value;\n        }\n        yield value;\n    }\n}\nfunction* _syncTime(config, iterable) {\n    const itr = iterable[Symbol.iterator]();\n    let total = [0, 0];\n    while (true) {\n        const start = process.hrtime();\n        const { value, done } = itr.next();\n        const delta = process.hrtime(start);\n        total = addTime(total, delta);\n        if (config.progress) {\n            config.progress(delta, total);\n        }\n        if (done) {\n            if (config.total) {\n                config.total(total);\n            }\n            return value;\n        }\n        yield value;\n    }\n}\nfunction time(config = {}, iterable) {\n    if (iterable === undefined) {\n        return curriedIterable => time(config, curriedIterable);\n    }\n    if (iterable[Symbol.asyncIterator] !== undefined) {\n        return _asyncTime(config, iterable);\n    }\n    else {\n        return _syncTime(config, iterable);\n    }\n}\n\nfunction _transform(concurrency, func, iterable) {\n    const iterator = getIterator(iterable);\n    const resultQueue = [];\n    const readQueue = [];\n    let ended = false;\n    let reading = false;\n    let inflightCount = 0;\n    let lastError = null;\n    function fulfillReadQueue() {\n        while (readQueue.length > 0 && resultQueue.length > 0) {\n            const { resolve } = readQueue.shift();\n            const value = resultQueue.shift();\n            resolve({ done: false, value });\n        }\n        while (readQueue.length > 0 && inflightCount === 0 && ended) {\n            const { resolve, reject } = readQueue.shift();\n            if (lastError) {\n                reject(lastError);\n                lastError = null;\n            }\n            else {\n                resolve({ done: true, value: undefined });\n            }\n        }\n    }\n    async function fillQueue() {\n        if (ended) {\n            fulfillReadQueue();\n            return;\n        }\n        if (reading) {\n            return;\n        }\n        if (inflightCount + resultQueue.length >= concurrency) {\n            return;\n        }\n        reading = true;\n        inflightCount++;\n        try {\n            const { done, value } = await iterator.next();\n            if (done) {\n                ended = true;\n                inflightCount--;\n                fulfillReadQueue();\n            }\n            else {\n                mapAndQueue(value);\n            }\n        }\n        catch (error) {\n            ended = true;\n            inflightCount--;\n            lastError = error;\n            fulfillReadQueue();\n        }\n        reading = false;\n        fillQueue();\n    }\n    async function mapAndQueue(itrValue) {\n        try {\n            const value = await func(itrValue);\n            resultQueue.push(value);\n        }\n        catch (error) {\n            ended = true;\n            lastError = error;\n        }\n        inflightCount--;\n        fulfillReadQueue();\n        fillQueue();\n    }\n    async function next() {\n        if (resultQueue.length === 0) {\n            const deferred = defer();\n            readQueue.push(deferred);\n            fillQueue();\n            return deferred.promise;\n        }\n        const value = resultQueue.shift();\n        fillQueue();\n        return { done: false, value };\n    }\n    const asyncIterableIterator = {\n        next,\n        [Symbol.asyncIterator]: () => asyncIterableIterator,\n    };\n    return asyncIterableIterator;\n}\nfunction transform(concurrency, func, iterable) {\n    if (func === undefined) {\n        return (curriedFunc, curriedIterable) => curriedIterable\n            ? transform(concurrency, curriedFunc, curriedIterable)\n            : transform(concurrency, curriedFunc);\n    }\n    if (iterable === undefined) {\n        return (curriedIterable) => transform(concurrency, func, curriedIterable);\n    }\n    return _transform(concurrency, func, iterable);\n}\n\nasync function _writeToStream(stream, iterable) {\n    let lastError = null;\n    let errCb = null;\n    let drainCb = null;\n    const notifyError = err => {\n        lastError = err;\n        if (errCb) {\n            errCb(err);\n        }\n    };\n    const notifyDrain = () => {\n        if (drainCb) {\n            drainCb();\n        }\n    };\n    const cleanup = () => {\n        stream.removeListener('error', notifyError);\n        stream.removeListener('drain', notifyDrain);\n    };\n    stream.once('error', notifyError);\n    const waitForDrain = () => new Promise((resolve, reject) => {\n        if (lastError) {\n            return reject(lastError);\n        }\n        stream.once('drain', notifyDrain);\n        drainCb = resolve;\n        errCb = reject;\n    });\n    for await (const value of iterable) {\n        if (stream.write(value) === false) {\n            await waitForDrain();\n        }\n        if (lastError) {\n            break;\n        }\n    }\n    cleanup();\n    if (lastError) {\n        throw lastError;\n    }\n}\nfunction writeToStream(stream, iterable) {\n    if (iterable === undefined) {\n        return (curriedIterable) => _writeToStream(stream, curriedIterable);\n    }\n    return _writeToStream(stream, iterable);\n}\n\nexport { batch, batchWithTimeout, buffer, collect, concat, consume, filter, flatMap, flatTransform, flatten, fromStream, getIterator, map, merge, parallelFlatMap, parallelMap, parallelMerge, pipeline, reduce, take, tap, throttle, time, transform, writeToStream };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}