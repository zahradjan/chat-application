{"ast":null,"code":"'use strict';\n\nconst {\n  Adapter\n} = require('interface-datastore');\n\nconst map = require('it-map');\n\nconst {\n  pipe\n} = require('it-pipe');\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-datastore').Options} Options\n * @typedef {import('interface-datastore').Batch} Batch\n * @typedef {import('interface-datastore').Query} Query\n * @typedef {import('interface-datastore').KeyQuery} KeyQuery\n * @typedef {import('interface-datastore').Key} Key\n * @typedef {import('interface-datastore').Pair} Pair\n * @typedef {import('./types').KeyTransform} KeyTransform\n */\n\n/**\n * @template TEntry\n * @typedef {import('interface-store').AwaitIterable<TEntry>} AwaitIterable\n */\n\n/**\n * A datastore shim, that wraps around a given datastore, changing\n * the way keys look to the user, for example namespacing\n * keys, reversing them, etc.\n *\n * @implements {Datastore}\n */\n\n\nclass KeyTransformDatastore extends Adapter {\n  /**\n   * @param {Datastore} child\n   * @param {KeyTransform} transform\n   */\n  constructor(child, transform) {\n    super();\n    this.child = child;\n    this.transform = transform;\n  }\n\n  open() {\n    return this.child.open();\n  }\n  /**\n   * @param {Key} key\n   * @param {Uint8Array} val\n   * @param {Options} [options]\n   */\n\n\n  put(key, val, options) {\n    return this.child.put(this.transform.convert(key), val, options);\n  }\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n\n\n  get(key, options) {\n    return this.child.get(this.transform.convert(key), options);\n  }\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n\n\n  has(key, options) {\n    return this.child.has(this.transform.convert(key), options);\n  }\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n\n\n  delete(key, options) {\n    return this.child.delete(this.transform.convert(key), options);\n  }\n  /**\n   * @param {AwaitIterable<Pair>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Pair>}\n   */\n\n\n  async *putMany(source) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const transform = this.transform;\n    const child = this.child;\n    yield* pipe(source, async function* (source) {\n      yield* map(source, _ref => {\n        let {\n          key,\n          value\n        } = _ref;\n        return {\n          key: transform.convert(key),\n          value\n        };\n      });\n    }, async function* (source) {\n      yield* child.putMany(source, options);\n    }, async function* (source) {\n      yield* map(source, _ref2 => {\n        let {\n          key,\n          value\n        } = _ref2;\n        return {\n          key: transform.invert(key),\n          value\n        };\n      });\n    });\n  }\n  /**\n   * @param {AwaitIterable<Key>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Uint8Array>}\n   */\n\n\n  async *getMany(source) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const transform = this.transform;\n    const child = this.child;\n    yield* pipe(source, async function* (source) {\n      yield* map(source, key => transform.convert(key));\n    }, async function* (source) {\n      yield* child.getMany(source, options);\n    });\n  }\n  /**\n   * @param {AwaitIterable<Key>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Key>}\n   */\n\n\n  async *deleteMany(source) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const transform = this.transform;\n    const child = this.child;\n    yield* pipe(source, async function* (source) {\n      yield* map(source, key => transform.convert(key));\n    }, async function* (source) {\n      yield* child.deleteMany(source, options);\n    }, async function* (source) {\n      yield* map(source, key => transform.invert(key));\n    });\n  }\n  /**\n   * @returns {Batch}\n   */\n\n\n  batch() {\n    const b = this.child.batch();\n    return {\n      put: (key, value) => {\n        b.put(this.transform.convert(key), value);\n      },\n      delete: key => {\n        b.delete(this.transform.convert(key));\n      },\n      commit: options => {\n        return b.commit(options);\n      }\n    };\n  }\n  /**\n   * @param {Query} q\n   * @param {Options} [options]\n   */\n\n\n  query(q, options) {\n    return map(this.child.query(q, options), _ref3 => {\n      let {\n        key,\n        value\n      } = _ref3;\n      return {\n        key: this.transform.invert(key),\n        value\n      };\n    });\n  }\n  /**\n   * @param {KeyQuery} q\n   * @param {Options} [options]\n   */\n\n\n  queryKeys(q, options) {\n    return map(this.child.queryKeys(q, options), key => {\n      return this.transform.invert(key);\n    });\n  }\n\n  close() {\n    return this.child.close();\n  }\n\n}\n\nmodule.exports = KeyTransformDatastore;","map":{"version":3,"names":["Adapter","require","map","pipe","KeyTransformDatastore","constructor","child","transform","open","put","key","val","options","convert","get","has","delete","putMany","source","value","invert","getMany","deleteMany","batch","b","commit","query","q","queryKeys","close","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/datastore-core/src/keytransform.js"],"sourcesContent":["'use strict'\n\nconst { Adapter } = require('interface-datastore')\nconst map = require('it-map')\nconst { pipe } = require('it-pipe')\n\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-datastore').Options} Options\n * @typedef {import('interface-datastore').Batch} Batch\n * @typedef {import('interface-datastore').Query} Query\n * @typedef {import('interface-datastore').KeyQuery} KeyQuery\n * @typedef {import('interface-datastore').Key} Key\n * @typedef {import('interface-datastore').Pair} Pair\n * @typedef {import('./types').KeyTransform} KeyTransform\n */\n\n/**\n * @template TEntry\n * @typedef {import('interface-store').AwaitIterable<TEntry>} AwaitIterable\n */\n\n/**\n * A datastore shim, that wraps around a given datastore, changing\n * the way keys look to the user, for example namespacing\n * keys, reversing them, etc.\n *\n * @implements {Datastore}\n */\nclass KeyTransformDatastore extends Adapter {\n  /**\n   * @param {Datastore} child\n   * @param {KeyTransform} transform\n   */\n  constructor (child, transform) {\n    super()\n\n    this.child = child\n    this.transform = transform\n  }\n\n  open () {\n    return this.child.open()\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Uint8Array} val\n   * @param {Options} [options]\n   */\n  put (key, val, options) {\n    return this.child.put(this.transform.convert(key), val, options)\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n  get (key, options) {\n    return this.child.get(this.transform.convert(key), options)\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n  has (key, options) {\n    return this.child.has(this.transform.convert(key), options)\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n  delete (key, options) {\n    return this.child.delete(this.transform.convert(key), options)\n  }\n\n  /**\n   * @param {AwaitIterable<Pair>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Pair>}\n   */\n  async * putMany (source, options = {}) {\n    const transform = this.transform\n    const child = this.child\n\n    yield * pipe(\n      source,\n      async function * (source) {\n        yield * map(source, ({ key, value }) => ({\n          key: transform.convert(key),\n          value\n        }))\n      },\n      async function * (source) {\n        yield * child.putMany(source, options)\n      },\n      async function * (source) {\n        yield * map(source, ({ key, value }) => ({\n          key: transform.invert(key),\n          value\n        }))\n      }\n    )\n  }\n\n  /**\n   * @param {AwaitIterable<Key>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Uint8Array>}\n   */\n  async * getMany (source, options = {}) {\n    const transform = this.transform\n    const child = this.child\n\n    yield * pipe(\n      source,\n      async function * (source) {\n        yield * map(source, key => transform.convert(key))\n      },\n      async function * (source) {\n        yield * child.getMany(source, options)\n      }\n    )\n  }\n\n  /**\n   * @param {AwaitIterable<Key>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Key>}\n   */\n  async * deleteMany (source, options = {}) {\n    const transform = this.transform\n    const child = this.child\n\n    yield * pipe(\n      source,\n      async function * (source) {\n        yield * map(source, key => transform.convert(key))\n      },\n      async function * (source) {\n        yield * child.deleteMany(source, options)\n      },\n      async function * (source) {\n        yield * map(source, key => transform.invert(key))\n      }\n    )\n  }\n\n  /**\n   * @returns {Batch}\n   */\n  batch () {\n    const b = this.child.batch()\n    return {\n      put: (key, value) => {\n        b.put(this.transform.convert(key), value)\n      },\n      delete: (key) => {\n        b.delete(this.transform.convert(key))\n      },\n      commit: (options) => {\n        return b.commit(options)\n      }\n    }\n  }\n\n  /**\n   * @param {Query} q\n   * @param {Options} [options]\n   */\n  query (q, options) {\n    return map(this.child.query(q, options), ({ key, value }) => {\n      return {\n        key: this.transform.invert(key),\n        value\n      }\n    })\n  }\n\n  /**\n   * @param {KeyQuery} q\n   * @param {Options} [options]\n   */\n  queryKeys (q, options) {\n    return map(this.child.queryKeys(q, options), key => {\n      return this.transform.invert(key)\n    })\n  }\n\n  close () {\n    return this.child.close()\n  }\n}\n\nmodule.exports = KeyTransformDatastore\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA;AAAF,IAAcC,OAAO,CAAC,qBAAD,CAA3B;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,QAAD,CAAnB;;AACA,MAAM;EAAEE;AAAF,IAAWF,OAAO,CAAC,SAAD,CAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMG,qBAAN,SAAoCJ,OAApC,CAA4C;EAC1C;AACF;AACA;AACA;EACEK,WAAW,CAAEC,KAAF,EAASC,SAAT,EAAoB;IAC7B;IAEA,KAAKD,KAAL,GAAaA,KAAb;IACA,KAAKC,SAAL,GAAiBA,SAAjB;EACD;;EAEDC,IAAI,GAAI;IACN,OAAO,KAAKF,KAAL,CAAWE,IAAX,EAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEC,GAAG,CAAEC,GAAF,EAAOC,GAAP,EAAYC,OAAZ,EAAqB;IACtB,OAAO,KAAKN,KAAL,CAAWG,GAAX,CAAe,KAAKF,SAAL,CAAeM,OAAf,CAAuBH,GAAvB,CAAf,EAA4CC,GAA5C,EAAiDC,OAAjD,CAAP;EACD;EAED;AACF;AACA;AACA;;;EACEE,GAAG,CAAEJ,GAAF,EAAOE,OAAP,EAAgB;IACjB,OAAO,KAAKN,KAAL,CAAWQ,GAAX,CAAe,KAAKP,SAAL,CAAeM,OAAf,CAAuBH,GAAvB,CAAf,EAA4CE,OAA5C,CAAP;EACD;EAED;AACF;AACA;AACA;;;EACEG,GAAG,CAAEL,GAAF,EAAOE,OAAP,EAAgB;IACjB,OAAO,KAAKN,KAAL,CAAWS,GAAX,CAAe,KAAKR,SAAL,CAAeM,OAAf,CAAuBH,GAAvB,CAAf,EAA4CE,OAA5C,CAAP;EACD;EAED;AACF;AACA;AACA;;;EACEI,MAAM,CAAEN,GAAF,EAAOE,OAAP,EAAgB;IACpB,OAAO,KAAKN,KAAL,CAAWU,MAAX,CAAkB,KAAKT,SAAL,CAAeM,OAAf,CAAuBH,GAAvB,CAAlB,EAA+CE,OAA/C,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACiB,OAAPK,OAAO,CAAEC,MAAF,EAAwB;IAAA,IAAdN,OAAc,uEAAJ,EAAI;IACrC,MAAML,SAAS,GAAG,KAAKA,SAAvB;IACA,MAAMD,KAAK,GAAG,KAAKA,KAAnB;IAEA,OAAQH,IAAI,CACVe,MADU,EAEV,iBAAkBA,MAAlB,EAA0B;MACxB,OAAQhB,GAAG,CAACgB,MAAD,EAAS;QAAA,IAAC;UAAER,GAAF;UAAOS;QAAP,CAAD;QAAA,OAAqB;UACvCT,GAAG,EAAEH,SAAS,CAACM,OAAV,CAAkBH,GAAlB,CADkC;UAEvCS;QAFuC,CAArB;MAAA,CAAT,CAAX;IAID,CAPS,EAQV,iBAAkBD,MAAlB,EAA0B;MACxB,OAAQZ,KAAK,CAACW,OAAN,CAAcC,MAAd,EAAsBN,OAAtB,CAAR;IACD,CAVS,EAWV,iBAAkBM,MAAlB,EAA0B;MACxB,OAAQhB,GAAG,CAACgB,MAAD,EAAS;QAAA,IAAC;UAAER,GAAF;UAAOS;QAAP,CAAD;QAAA,OAAqB;UACvCT,GAAG,EAAEH,SAAS,CAACa,MAAV,CAAiBV,GAAjB,CADkC;UAEvCS;QAFuC,CAArB;MAAA,CAAT,CAAX;IAID,CAhBS,CAAZ;EAkBD;EAED;AACF;AACA;AACA;AACA;;;EACiB,OAAPE,OAAO,CAAEH,MAAF,EAAwB;IAAA,IAAdN,OAAc,uEAAJ,EAAI;IACrC,MAAML,SAAS,GAAG,KAAKA,SAAvB;IACA,MAAMD,KAAK,GAAG,KAAKA,KAAnB;IAEA,OAAQH,IAAI,CACVe,MADU,EAEV,iBAAkBA,MAAlB,EAA0B;MACxB,OAAQhB,GAAG,CAACgB,MAAD,EAASR,GAAG,IAAIH,SAAS,CAACM,OAAV,CAAkBH,GAAlB,CAAhB,CAAX;IACD,CAJS,EAKV,iBAAkBQ,MAAlB,EAA0B;MACxB,OAAQZ,KAAK,CAACe,OAAN,CAAcH,MAAd,EAAsBN,OAAtB,CAAR;IACD,CAPS,CAAZ;EASD;EAED;AACF;AACA;AACA;AACA;;;EACoB,OAAVU,UAAU,CAAEJ,MAAF,EAAwB;IAAA,IAAdN,OAAc,uEAAJ,EAAI;IACxC,MAAML,SAAS,GAAG,KAAKA,SAAvB;IACA,MAAMD,KAAK,GAAG,KAAKA,KAAnB;IAEA,OAAQH,IAAI,CACVe,MADU,EAEV,iBAAkBA,MAAlB,EAA0B;MACxB,OAAQhB,GAAG,CAACgB,MAAD,EAASR,GAAG,IAAIH,SAAS,CAACM,OAAV,CAAkBH,GAAlB,CAAhB,CAAX;IACD,CAJS,EAKV,iBAAkBQ,MAAlB,EAA0B;MACxB,OAAQZ,KAAK,CAACgB,UAAN,CAAiBJ,MAAjB,EAAyBN,OAAzB,CAAR;IACD,CAPS,EAQV,iBAAkBM,MAAlB,EAA0B;MACxB,OAAQhB,GAAG,CAACgB,MAAD,EAASR,GAAG,IAAIH,SAAS,CAACa,MAAV,CAAiBV,GAAjB,CAAhB,CAAX;IACD,CAVS,CAAZ;EAYD;EAED;AACF;AACA;;;EACEa,KAAK,GAAI;IACP,MAAMC,CAAC,GAAG,KAAKlB,KAAL,CAAWiB,KAAX,EAAV;IACA,OAAO;MACLd,GAAG,EAAE,CAACC,GAAD,EAAMS,KAAN,KAAgB;QACnBK,CAAC,CAACf,GAAF,CAAM,KAAKF,SAAL,CAAeM,OAAf,CAAuBH,GAAvB,CAAN,EAAmCS,KAAnC;MACD,CAHI;MAILH,MAAM,EAAGN,GAAD,IAAS;QACfc,CAAC,CAACR,MAAF,CAAS,KAAKT,SAAL,CAAeM,OAAf,CAAuBH,GAAvB,CAAT;MACD,CANI;MAOLe,MAAM,EAAGb,OAAD,IAAa;QACnB,OAAOY,CAAC,CAACC,MAAF,CAASb,OAAT,CAAP;MACD;IATI,CAAP;EAWD;EAED;AACF;AACA;AACA;;;EACEc,KAAK,CAAEC,CAAF,EAAKf,OAAL,EAAc;IACjB,OAAOV,GAAG,CAAC,KAAKI,KAAL,CAAWoB,KAAX,CAAiBC,CAAjB,EAAoBf,OAApB,CAAD,EAA+B,SAAoB;MAAA,IAAnB;QAAEF,GAAF;QAAOS;MAAP,CAAmB;MAC3D,OAAO;QACLT,GAAG,EAAE,KAAKH,SAAL,CAAea,MAAf,CAAsBV,GAAtB,CADA;QAELS;MAFK,CAAP;IAID,CALS,CAAV;EAMD;EAED;AACF;AACA;AACA;;;EACES,SAAS,CAAED,CAAF,EAAKf,OAAL,EAAc;IACrB,OAAOV,GAAG,CAAC,KAAKI,KAAL,CAAWsB,SAAX,CAAqBD,CAArB,EAAwBf,OAAxB,CAAD,EAAmCF,GAAG,IAAI;MAClD,OAAO,KAAKH,SAAL,CAAea,MAAf,CAAsBV,GAAtB,CAAP;IACD,CAFS,CAAV;EAGD;;EAEDmB,KAAK,GAAI;IACP,OAAO,KAAKvB,KAAL,CAAWuB,KAAX,EAAP;EACD;;AApKyC;;AAuK5CC,MAAM,CAACC,OAAP,GAAiB3B,qBAAjB"},"metadata":{},"sourceType":"script"}