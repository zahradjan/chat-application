{"ast":null,"code":"'use strict';\n\nconst isIPFS = require('is-ipfs');\n\nconst toCidAndPath = require('ipfs-core-utils/src/to-cid-and-path');\n\nconst drain = require('it-drain');\n\nconst {\n  resolve\n} = require('../../utils');\n/**\n * resolves the given path by parsing out protocol-specific entries\n * (e.g. /ipns/<node-key>) and then going through the /ipfs/ entries and returning the final node\n *\n * @param {Object} context\n * @param {import('../ipns')} context.ipns\n * @param {import('ipfs-repo').IPFSRepo} context.repo\n * @param {import('ipfs-core-utils/src/multicodecs')} context.codecs\n * @param {string} name\n * @param {import('ipfs-core-types/src/utils').AbortOptions} [options]\n */\n\n\nexports.resolvePath = async (_ref, name, options) => {\n  let {\n    ipns,\n    repo,\n    codecs\n  } = _ref;\n\n  // ipns path\n  if (isIPFS.ipnsPath(name)) {\n    return ipns.resolve(name);\n  }\n\n  const {\n    cid,\n    path\n  } = toCidAndPath(name); // ipfs path\n\n  await drain(resolve(cid, path || '', codecs, repo, options));\n};","map":{"version":3,"names":["isIPFS","require","toCidAndPath","drain","resolve","exports","resolvePath","name","options","ipns","repo","codecs","ipnsPath","cid","path"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/name/utils.js"],"sourcesContent":["'use strict'\n\nconst isIPFS = require('is-ipfs')\nconst toCidAndPath = require('ipfs-core-utils/src/to-cid-and-path')\nconst drain = require('it-drain')\nconst { resolve } = require('../../utils')\n\n/**\n * resolves the given path by parsing out protocol-specific entries\n * (e.g. /ipns/<node-key>) and then going through the /ipfs/ entries and returning the final node\n *\n * @param {Object} context\n * @param {import('../ipns')} context.ipns\n * @param {import('ipfs-repo').IPFSRepo} context.repo\n * @param {import('ipfs-core-utils/src/multicodecs')} context.codecs\n * @param {string} name\n * @param {import('ipfs-core-types/src/utils').AbortOptions} [options]\n */\nexports.resolvePath = async ({ ipns, repo, codecs }, name, options) => {\n  // ipns path\n  if (isIPFS.ipnsPath(name)) {\n    return ipns.resolve(name)\n  }\n\n  const {\n    cid,\n    path\n  } = toCidAndPath(name)\n\n  // ipfs path\n  await drain(resolve(cid, path || '', codecs, repo, options))\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAtB;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,qCAAD,CAA5B;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,UAAD,CAArB;;AACA,MAAM;EAAEG;AAAF,IAAcH,OAAO,CAAC,aAAD,CAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAI,OAAO,CAACC,WAAR,GAAsB,aAA+BC,IAA/B,EAAqCC,OAArC,KAAiD;EAAA,IAA1C;IAAEC,IAAF;IAAQC,IAAR;IAAcC;EAAd,CAA0C;;EACrE;EACA,IAAIX,MAAM,CAACY,QAAP,CAAgBL,IAAhB,CAAJ,EAA2B;IACzB,OAAOE,IAAI,CAACL,OAAL,CAAaG,IAAb,CAAP;EACD;;EAED,MAAM;IACJM,GADI;IAEJC;EAFI,IAGFZ,YAAY,CAACK,IAAD,CAHhB,CANqE,CAWrE;;EACA,MAAMJ,KAAK,CAACC,OAAO,CAACS,GAAD,EAAMC,IAAI,IAAI,EAAd,EAAkBH,MAAlB,EAA0BD,IAA1B,EAAgCF,OAAhC,CAAR,CAAX;AACD,CAbD"},"metadata":{},"sourceType":"script"}