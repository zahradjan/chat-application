{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst log = Object.assign(debug('libp2p:relay'), {\n  error: debug('libp2p:relay:err')\n});\n\nconst {\n  setDelayedInterval,\n  clearDelayedInterval // @ts-ignore set-delayed-interval does not export types\n\n} = require('set-delayed-interval');\n\nconst AutoRelay = require('./auto-relay');\n\nconst {\n  namespaceToCid\n} = require('./utils');\n\nconst {\n  RELAY_RENDEZVOUS_NS\n} = require('./constants');\n/**\n * @typedef {import('../')} Libp2p\n *\n * @typedef {Object} RelayAdvertiseOptions\n * @property {number} [bootDelay = ADVERTISE_BOOT_DELAY]\n * @property {boolean} [enabled = true]\n * @property {number} [ttl = ADVERTISE_TTL]\n *\n * @typedef {Object} HopOptions\n * @property {boolean} [enabled = false]\n * @property {boolean} [active = false]\n *\n * @typedef {Object} AutoRelayOptions\n * @property {number} [maxListeners = 2] - maximum number of relays to listen.\n * @property {boolean} [enabled = false]\n */\n\n\nclass Relay {\n  /**\n   * Creates an instance of Relay.\n   *\n   * @class\n   * @param {Libp2p} libp2p\n   */\n  constructor(libp2p) {\n    this._libp2p = libp2p;\n    this._options = { ...libp2p._config.relay\n    }; // Create autoRelay if enabled\n\n    this._autoRelay = this._options.autoRelay.enabled && new AutoRelay({\n      libp2p,\n      ...this._options.autoRelay\n    });\n    this._advertiseService = this._advertiseService.bind(this);\n  }\n  /**\n   * Start Relay service.\n   *\n   * @returns {void}\n   */\n\n\n  start() {\n    // Advertise service if HOP enabled\n    const canHop = this._options.hop.enabled;\n\n    if (canHop && this._options.advertise.enabled) {\n      this._timeout = setDelayedInterval(this._advertiseService, this._options.advertise.ttl, this._options.advertise.bootDelay);\n    }\n  }\n  /**\n   * Stop Relay service.\n   *\n   * @returns {void}\n   */\n\n\n  stop() {\n    clearDelayedInterval(this._timeout);\n  }\n  /**\n   * Advertise hop relay service in the network.\n   *\n   * @returns {Promise<void>}\n   */\n\n\n  async _advertiseService() {\n    try {\n      const cid = await namespaceToCid(RELAY_RENDEZVOUS_NS);\n      await this._libp2p.contentRouting.provide(cid);\n    } catch (err) {\n      if (err.code === 'NO_ROUTERS_AVAILABLE') {\n        log.error('a content router, such as a DHT, must be provided in order to advertise the relay service', err); // Stop the advertise\n\n        this.stop();\n      } else {\n        log.error(err);\n      }\n    }\n  }\n\n}\n\nmodule.exports = Relay;","map":{"version":3,"names":["debug","require","log","Object","assign","error","setDelayedInterval","clearDelayedInterval","AutoRelay","namespaceToCid","RELAY_RENDEZVOUS_NS","Relay","constructor","libp2p","_libp2p","_options","_config","relay","_autoRelay","autoRelay","enabled","_advertiseService","bind","start","canHop","hop","advertise","_timeout","ttl","bootDelay","stop","cid","contentRouting","provide","err","code","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p/src/circuit/index.js"],"sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = Object.assign(debug('libp2p:relay'), {\n  error: debug('libp2p:relay:err')\n})\n\nconst {\n  setDelayedInterval,\n  clearDelayedInterval\n// @ts-ignore set-delayed-interval does not export types\n} = require('set-delayed-interval')\n\nconst AutoRelay = require('./auto-relay')\nconst { namespaceToCid } = require('./utils')\nconst {\n  RELAY_RENDEZVOUS_NS\n} = require('./constants')\n\n/**\n * @typedef {import('../')} Libp2p\n *\n * @typedef {Object} RelayAdvertiseOptions\n * @property {number} [bootDelay = ADVERTISE_BOOT_DELAY]\n * @property {boolean} [enabled = true]\n * @property {number} [ttl = ADVERTISE_TTL]\n *\n * @typedef {Object} HopOptions\n * @property {boolean} [enabled = false]\n * @property {boolean} [active = false]\n *\n * @typedef {Object} AutoRelayOptions\n * @property {number} [maxListeners = 2] - maximum number of relays to listen.\n * @property {boolean} [enabled = false]\n */\n\nclass Relay {\n  /**\n   * Creates an instance of Relay.\n   *\n   * @class\n   * @param {Libp2p} libp2p\n   */\n  constructor (libp2p) {\n    this._libp2p = libp2p\n    this._options = {\n      ...libp2p._config.relay\n    }\n\n    // Create autoRelay if enabled\n    this._autoRelay = this._options.autoRelay.enabled && new AutoRelay({ libp2p, ...this._options.autoRelay })\n\n    this._advertiseService = this._advertiseService.bind(this)\n  }\n\n  /**\n   * Start Relay service.\n   *\n   * @returns {void}\n   */\n  start () {\n    // Advertise service if HOP enabled\n    const canHop = this._options.hop.enabled\n\n    if (canHop && this._options.advertise.enabled) {\n      this._timeout = setDelayedInterval(\n        this._advertiseService, this._options.advertise.ttl, this._options.advertise.bootDelay\n      )\n    }\n  }\n\n  /**\n   * Stop Relay service.\n   *\n   * @returns {void}\n   */\n  stop () {\n    clearDelayedInterval(this._timeout)\n  }\n\n  /**\n   * Advertise hop relay service in the network.\n   *\n   * @returns {Promise<void>}\n   */\n  async _advertiseService () {\n    try {\n      const cid = await namespaceToCid(RELAY_RENDEZVOUS_NS)\n      await this._libp2p.contentRouting.provide(cid)\n    } catch (err) {\n      if (err.code === 'NO_ROUTERS_AVAILABLE') {\n        log.error('a content router, such as a DHT, must be provided in order to advertise the relay service', err)\n        // Stop the advertise\n        this.stop()\n      } else {\n        log.error(err)\n      }\n    }\n  }\n}\n\nmodule.exports = Relay\n"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,GAAG,GAAGC,MAAM,CAACC,MAAP,CAAcJ,KAAK,CAAC,cAAD,CAAnB,EAAqC;EAC/CK,KAAK,EAAEL,KAAK,CAAC,kBAAD;AADmC,CAArC,CAAZ;;AAIA,MAAM;EACJM,kBADI;EAEJC,oBAFI,CAGN;;AAHM,IAIFN,OAAO,CAAC,sBAAD,CAJX;;AAMA,MAAMO,SAAS,GAAGP,OAAO,CAAC,cAAD,CAAzB;;AACA,MAAM;EAAEQ;AAAF,IAAqBR,OAAO,CAAC,SAAD,CAAlC;;AACA,MAAM;EACJS;AADI,IAEFT,OAAO,CAAC,aAAD,CAFX;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMU,KAAN,CAAY;EACV;AACF;AACA;AACA;AACA;AACA;EACEC,WAAW,CAAEC,MAAF,EAAU;IACnB,KAAKC,OAAL,GAAeD,MAAf;IACA,KAAKE,QAAL,GAAgB,EACd,GAAGF,MAAM,CAACG,OAAP,CAAeC;IADJ,CAAhB,CAFmB,CAMnB;;IACA,KAAKC,UAAL,GAAkB,KAAKH,QAAL,CAAcI,SAAd,CAAwBC,OAAxB,IAAmC,IAAIZ,SAAJ,CAAc;MAAEK,MAAF;MAAU,GAAG,KAAKE,QAAL,CAAcI;IAA3B,CAAd,CAArD;IAEA,KAAKE,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAzB;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEC,KAAK,GAAI;IACP;IACA,MAAMC,MAAM,GAAG,KAAKT,QAAL,CAAcU,GAAd,CAAkBL,OAAjC;;IAEA,IAAII,MAAM,IAAI,KAAKT,QAAL,CAAcW,SAAd,CAAwBN,OAAtC,EAA+C;MAC7C,KAAKO,QAAL,GAAgBrB,kBAAkB,CAChC,KAAKe,iBAD2B,EACR,KAAKN,QAAL,CAAcW,SAAd,CAAwBE,GADhB,EACqB,KAAKb,QAAL,CAAcW,SAAd,CAAwBG,SAD7C,CAAlC;IAGD;EACF;EAED;AACF;AACA;AACA;AACA;;;EACEC,IAAI,GAAI;IACNvB,oBAAoB,CAAC,KAAKoB,QAAN,CAApB;EACD;EAED;AACF;AACA;AACA;AACA;;;EACyB,MAAjBN,iBAAiB,GAAI;IACzB,IAAI;MACF,MAAMU,GAAG,GAAG,MAAMtB,cAAc,CAACC,mBAAD,CAAhC;MACA,MAAM,KAAKI,OAAL,CAAakB,cAAb,CAA4BC,OAA5B,CAAoCF,GAApC,CAAN;IACD,CAHD,CAGE,OAAOG,GAAP,EAAY;MACZ,IAAIA,GAAG,CAACC,IAAJ,KAAa,sBAAjB,EAAyC;QACvCjC,GAAG,CAACG,KAAJ,CAAU,2FAAV,EAAuG6B,GAAvG,EADuC,CAEvC;;QACA,KAAKJ,IAAL;MACD,CAJD,MAIO;QACL5B,GAAG,CAACG,KAAJ,CAAU6B,GAAV;MACD;IACF;EACF;;AA9DS;;AAiEZE,MAAM,CAACC,OAAP,GAAiB1B,KAAjB"},"metadata":{},"sourceType":"script"}