{"ast":null,"code":"'use strict';\n\nconst START_MASKS = [0b11111111, 0b11111110, 0b11111100, 0b11111000, 0b11110000, 0b11100000, 0b11000000, 0b10000000];\nconst STOP_MASKS = [0b00000001, 0b00000011, 0b00000111, 0b00001111, 0b00011111, 0b00111111, 0b01111111, 0b11111111];\nmodule.exports = class ConsumableBuffer {\n  /**\n   * @param {Uint8Array} value\n   */\n  constructor(value) {\n    this._value = value;\n    this._currentBytePos = value.length - 1;\n    this._currentBitPos = 7;\n  }\n\n  availableBits() {\n    return this._currentBitPos + 1 + this._currentBytePos * 8;\n  }\n\n  totalBits() {\n    return this._value.length * 8;\n  }\n  /**\n   * @param {number} bits\n   */\n\n\n  take(bits) {\n    let pendingBits = bits;\n    let result = 0;\n\n    while (pendingBits && this._haveBits()) {\n      const byte = this._value[this._currentBytePos];\n      const availableBits = this._currentBitPos + 1;\n      const taking = Math.min(availableBits, pendingBits);\n      const value = byteBitsToInt(byte, availableBits - taking, taking);\n      result = (result << taking) + value;\n      pendingBits -= taking;\n      this._currentBitPos -= taking;\n\n      if (this._currentBitPos < 0) {\n        this._currentBitPos = 7;\n        this._currentBytePos--;\n      }\n    }\n\n    return result;\n  }\n  /**\n   * @param {number} bits\n   */\n\n\n  untake(bits) {\n    this._currentBitPos += bits;\n\n    while (this._currentBitPos > 7) {\n      this._currentBitPos -= 8;\n      this._currentBytePos += 1;\n    }\n  }\n\n  _haveBits() {\n    return this._currentBytePos >= 0;\n  }\n\n};\n/**\n * @param {number} byte\n * @param {number} start\n * @param {number} length\n */\n\nfunction byteBitsToInt(byte, start, length) {\n  const mask = maskFor(start, length);\n  return (byte & mask) >>> start;\n}\n/**\n * @param {number} start\n * @param {number} length\n */\n\n\nfunction maskFor(start, length) {\n  return START_MASKS[start] & STOP_MASKS[Math.min(length + start - 1, 7)];\n}","map":{"version":3,"names":["START_MASKS","STOP_MASKS","module","exports","ConsumableBuffer","constructor","value","_value","_currentBytePos","length","_currentBitPos","availableBits","totalBits","take","bits","pendingBits","result","_haveBits","byte","taking","Math","min","byteBitsToInt","untake","start","mask","maskFor"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/hamt-sharding/src/consumable-buffer.js"],"sourcesContent":["'use strict'\n\nconst START_MASKS = [\n  0b11111111,\n  0b11111110,\n  0b11111100,\n  0b11111000,\n  0b11110000,\n  0b11100000,\n  0b11000000,\n  0b10000000\n]\n\nconst STOP_MASKS = [\n  0b00000001,\n  0b00000011,\n  0b00000111,\n  0b00001111,\n  0b00011111,\n  0b00111111,\n  0b01111111,\n  0b11111111\n]\n\nmodule.exports = class ConsumableBuffer {\n  /**\n   * @param {Uint8Array} value\n   */\n  constructor (value) {\n    this._value = value\n    this._currentBytePos = value.length - 1\n    this._currentBitPos = 7\n  }\n\n  availableBits () {\n    return this._currentBitPos + 1 + this._currentBytePos * 8\n  }\n\n  totalBits () {\n    return this._value.length * 8\n  }\n\n  /**\n   * @param {number} bits\n   */\n  take (bits) {\n    let pendingBits = bits\n    let result = 0\n    while (pendingBits && this._haveBits()) {\n      const byte = this._value[this._currentBytePos]\n      const availableBits = this._currentBitPos + 1\n      const taking = Math.min(availableBits, pendingBits)\n      const value = byteBitsToInt(byte, availableBits - taking, taking)\n      result = (result << taking) + value\n\n      pendingBits -= taking\n\n      this._currentBitPos -= taking\n      if (this._currentBitPos < 0) {\n        this._currentBitPos = 7\n        this._currentBytePos--\n      }\n    }\n\n    return result\n  }\n\n  /**\n   * @param {number} bits\n   */\n  untake (bits) {\n    this._currentBitPos += bits\n    while (this._currentBitPos > 7) {\n      this._currentBitPos -= 8\n      this._currentBytePos += 1\n    }\n  }\n\n  _haveBits () {\n    return this._currentBytePos >= 0\n  }\n}\n\n/**\n * @param {number} byte\n * @param {number} start\n * @param {number} length\n */\nfunction byteBitsToInt (byte, start, length) {\n  const mask = maskFor(start, length)\n  return (byte & mask) >>> start\n}\n\n/**\n * @param {number} start\n * @param {number} length\n */\nfunction maskFor (start, length) {\n  return START_MASKS[start] & STOP_MASKS[Math.min(length + start - 1, 7)]\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,WAAW,GAAG,CAClB,UADkB,EAElB,UAFkB,EAGlB,UAHkB,EAIlB,UAJkB,EAKlB,UALkB,EAMlB,UANkB,EAOlB,UAPkB,EAQlB,UARkB,CAApB;AAWA,MAAMC,UAAU,GAAG,CACjB,UADiB,EAEjB,UAFiB,EAGjB,UAHiB,EAIjB,UAJiB,EAKjB,UALiB,EAMjB,UANiB,EAOjB,UAPiB,EAQjB,UARiB,CAAnB;AAWAC,MAAM,CAACC,OAAP,GAAiB,MAAMC,gBAAN,CAAuB;EACtC;AACF;AACA;EACEC,WAAW,CAAEC,KAAF,EAAS;IAClB,KAAKC,MAAL,GAAcD,KAAd;IACA,KAAKE,eAAL,GAAuBF,KAAK,CAACG,MAAN,GAAe,CAAtC;IACA,KAAKC,cAAL,GAAsB,CAAtB;EACD;;EAEDC,aAAa,GAAI;IACf,OAAO,KAAKD,cAAL,GAAsB,CAAtB,GAA0B,KAAKF,eAAL,GAAuB,CAAxD;EACD;;EAEDI,SAAS,GAAI;IACX,OAAO,KAAKL,MAAL,CAAYE,MAAZ,GAAqB,CAA5B;EACD;EAED;AACF;AACA;;;EACEI,IAAI,CAAEC,IAAF,EAAQ;IACV,IAAIC,WAAW,GAAGD,IAAlB;IACA,IAAIE,MAAM,GAAG,CAAb;;IACA,OAAOD,WAAW,IAAI,KAAKE,SAAL,EAAtB,EAAwC;MACtC,MAAMC,IAAI,GAAG,KAAKX,MAAL,CAAY,KAAKC,eAAjB,CAAb;MACA,MAAMG,aAAa,GAAG,KAAKD,cAAL,GAAsB,CAA5C;MACA,MAAMS,MAAM,GAAGC,IAAI,CAACC,GAAL,CAASV,aAAT,EAAwBI,WAAxB,CAAf;MACA,MAAMT,KAAK,GAAGgB,aAAa,CAACJ,IAAD,EAAOP,aAAa,GAAGQ,MAAvB,EAA+BA,MAA/B,CAA3B;MACAH,MAAM,GAAG,CAACA,MAAM,IAAIG,MAAX,IAAqBb,KAA9B;MAEAS,WAAW,IAAII,MAAf;MAEA,KAAKT,cAAL,IAAuBS,MAAvB;;MACA,IAAI,KAAKT,cAAL,GAAsB,CAA1B,EAA6B;QAC3B,KAAKA,cAAL,GAAsB,CAAtB;QACA,KAAKF,eAAL;MACD;IACF;;IAED,OAAOQ,MAAP;EACD;EAED;AACF;AACA;;;EACEO,MAAM,CAAET,IAAF,EAAQ;IACZ,KAAKJ,cAAL,IAAuBI,IAAvB;;IACA,OAAO,KAAKJ,cAAL,GAAsB,CAA7B,EAAgC;MAC9B,KAAKA,cAAL,IAAuB,CAAvB;MACA,KAAKF,eAAL,IAAwB,CAAxB;IACD;EACF;;EAEDS,SAAS,GAAI;IACX,OAAO,KAAKT,eAAL,IAAwB,CAA/B;EACD;;AAxDqC,CAAxC;AA2DA;AACA;AACA;AACA;AACA;;AACA,SAASc,aAAT,CAAwBJ,IAAxB,EAA8BM,KAA9B,EAAqCf,MAArC,EAA6C;EAC3C,MAAMgB,IAAI,GAAGC,OAAO,CAACF,KAAD,EAAQf,MAAR,CAApB;EACA,OAAO,CAACS,IAAI,GAAGO,IAAR,MAAkBD,KAAzB;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASE,OAAT,CAAkBF,KAAlB,EAAyBf,MAAzB,EAAiC;EAC/B,OAAOT,WAAW,CAACwB,KAAD,CAAX,GAAqBvB,UAAU,CAACmB,IAAI,CAACC,GAAL,CAASZ,MAAM,GAAGe,KAAT,GAAiB,CAA1B,EAA6B,CAA7B,CAAD,CAAtC;AACD"},"metadata":{},"sourceType":"script"}