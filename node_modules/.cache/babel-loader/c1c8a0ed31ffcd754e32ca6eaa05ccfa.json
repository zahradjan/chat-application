{"ast":null,"code":"'use strict';\n\nconst io = require('orbit-db-io');\n\nclass AccessControllerManifest {\n  constructor(type) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.type = type;\n    this.params = params;\n  }\n\n  static async resolve(ipfs, manifestHash) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (options.skipManifest) {\n      if (!options.type) {\n        throw new Error('No manifest, access-controller type required');\n      }\n\n      return new AccessControllerManifest(options.type, {\n        address: manifestHash\n      });\n    } else {\n      // TODO: ensure this is a valid multihash\n      if (manifestHash.indexOf('/ipfs') === 0) {\n        manifestHash = manifestHash.split('/')[2];\n      }\n\n      const {\n        type,\n        params\n      } = await io.read(ipfs, manifestHash);\n      return new AccessControllerManifest(type, params);\n    }\n  }\n\n  static async create(ipfs, type, params) {\n    if (params.skipManifest) {\n      return params.address;\n    }\n\n    const manifest = {\n      type: type,\n      params: params\n    };\n    return io.write(ipfs, 'dag-cbor', manifest);\n  }\n\n}\n\nmodule.exports = AccessControllerManifest;","map":{"version":3,"names":["io","require","AccessControllerManifest","constructor","type","params","resolve","ipfs","manifestHash","options","skipManifest","Error","address","indexOf","split","read","create","manifest","write","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/orbit-db-access-controllers/src/access-controller-manifest.js"],"sourcesContent":["'use strict'\nconst io = require('orbit-db-io')\n\nclass AccessControllerManifest {\n  constructor (type, params = {}) {\n    this.type = type\n    this.params = params\n  }\n\n  static async resolve (ipfs, manifestHash, options = {}) {\n    if (options.skipManifest) {\n      if (!options.type) {\n        throw new Error('No manifest, access-controller type required')\n      }\n      return new AccessControllerManifest(options.type, { address: manifestHash })\n    } else {\n      // TODO: ensure this is a valid multihash\n      if (manifestHash.indexOf('/ipfs') === 0) { manifestHash = manifestHash.split('/')[2] }\n      const { type, params } = await io.read(ipfs, manifestHash)\n      return new AccessControllerManifest(type, params)\n    }\n  }\n\n  static async create (ipfs, type, params) {\n    if (params.skipManifest) {\n      return params.address\n    }\n    const manifest = {\n      type: type,\n      params: params\n    }\n    return io.write(ipfs, 'dag-cbor', manifest)\n  }\n}\n\nmodule.exports = AccessControllerManifest\n"],"mappings":"AAAA;;AACA,MAAMA,EAAE,GAAGC,OAAO,CAAC,aAAD,CAAlB;;AAEA,MAAMC,wBAAN,CAA+B;EAC7BC,WAAW,CAAEC,IAAF,EAAqB;IAAA,IAAbC,MAAa,uEAAJ,EAAI;IAC9B,KAAKD,IAAL,GAAYA,IAAZ;IACA,KAAKC,MAAL,GAAcA,MAAd;EACD;;EAEmB,aAAPC,OAAO,CAAEC,IAAF,EAAQC,YAAR,EAAoC;IAAA,IAAdC,OAAc,uEAAJ,EAAI;;IACtD,IAAIA,OAAO,CAACC,YAAZ,EAA0B;MACxB,IAAI,CAACD,OAAO,CAACL,IAAb,EAAmB;QACjB,MAAM,IAAIO,KAAJ,CAAU,8CAAV,CAAN;MACD;;MACD,OAAO,IAAIT,wBAAJ,CAA6BO,OAAO,CAACL,IAArC,EAA2C;QAAEQ,OAAO,EAAEJ;MAAX,CAA3C,CAAP;IACD,CALD,MAKO;MACL;MACA,IAAIA,YAAY,CAACK,OAAb,CAAqB,OAArB,MAAkC,CAAtC,EAAyC;QAAEL,YAAY,GAAGA,YAAY,CAACM,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAAf;MAA2C;;MACtF,MAAM;QAAEV,IAAF;QAAQC;MAAR,IAAmB,MAAML,EAAE,CAACe,IAAH,CAAQR,IAAR,EAAcC,YAAd,CAA/B;MACA,OAAO,IAAIN,wBAAJ,CAA6BE,IAA7B,EAAmCC,MAAnC,CAAP;IACD;EACF;;EAEkB,aAANW,MAAM,CAAET,IAAF,EAAQH,IAAR,EAAcC,MAAd,EAAsB;IACvC,IAAIA,MAAM,CAACK,YAAX,EAAyB;MACvB,OAAOL,MAAM,CAACO,OAAd;IACD;;IACD,MAAMK,QAAQ,GAAG;MACfb,IAAI,EAAEA,IADS;MAEfC,MAAM,EAAEA;IAFO,CAAjB;IAIA,OAAOL,EAAE,CAACkB,KAAH,CAASX,IAAT,EAAe,UAAf,EAA2BU,QAA3B,CAAP;EACD;;AA7B4B;;AAgC/BE,MAAM,CAACC,OAAP,GAAiBlB,wBAAjB"},"metadata":{},"sourceType":"script"}