{"ast":null,"code":"'use strict';\n\nvar Clock = require('./lamport-clock');\n/**\n * Sort two entries as Last-Write-Wins (LWW).\n *\n * Last Write Wins is a conflict resolution strategy for sorting elements\n * where the element with a greater clock (latest) is chosen as the winner.\n *\n * @param {Entry} a First entry\n * @param {Entry} b Second entry\n * @returns {number} 1 if a is latest, -1 if b is latest\n */\n\n\nfunction LastWriteWins(a, b) {\n  // Ultimate conflict resolution (take the first/left arg)\n  var First = function First(a, b) {\n    return a;\n  }; // Sort two entries by their clock id, if the same always take the first\n\n\n  var sortById = function sortById(a, b) {\n    return SortByClockId(a, b, First);\n  }; // Sort two entries by their clock time, if concurrent,\n  // determine sorting using provided conflict resolution function\n\n\n  var sortByEntryClocks = function sortByEntryClocks(a, b) {\n    return SortByClocks(a, b, sortById);\n  }; // Sort entries by clock time as the primary sort criteria\n\n\n  return sortByEntryClocks(a, b);\n}\n/**\n * Sort two entries by their hash.\n *\n * @param {Entry} a First entry\n * @param {Entry} b Second entry\n * @returns {number} 1 if a is latest, -1 if b is latest\n */\n\n\nfunction SortByEntryHash(a, b) {\n  // Ultimate conflict resolution (compare hashes)\n  var compareHash = function compareHash(a, b) {\n    return a.hash < b.hash ? -1 : 1;\n  }; // Sort two entries by their clock id, if the same then compare hashes\n\n\n  var sortById = function sortById(a, b) {\n    return SortByClockId(a, b, compareHash);\n  }; // Sort two entries by their clock time, if concurrent,\n  // determine sorting using provided conflict resolution function\n\n\n  var sortByEntryClocks = function sortByEntryClocks(a, b) {\n    return SortByClocks(a, b, sortById);\n  }; // Sort entries by clock time as the primary sort criteria\n\n\n  return sortByEntryClocks(a, b);\n}\n/**\n * Sort two entries by their clock time.\n * @param {Entry} a First entry to compare\n * @param {Entry} b Second entry to compare\n * @param {function(a, b)} resolveConflict A function to call if entries are concurrent (happened at the same time). The function should take in two entries and return 1 if the first entry should be chosen and -1 if the second entry should be chosen.\n * @returns {number} 1 if a is greater, -1 if b is greater\n */\n\n\nfunction SortByClocks(a, b, resolveConflict) {\n  // Compare the clocks\n  var diff = Clock.compare(a.clock, b.clock); // If the clocks are concurrent, use the provided\n  // conflict resolution function to determine which comes first\n\n  return diff === 0 ? resolveConflict(a, b) : diff;\n}\n/**\n * Sort two entries by their clock id.\n * @param {Entry} a First entry to compare\n * @param {Entry} b Second entry to compare\n * @param {function(a, b)} resolveConflict A function to call if the clocks ids are the same. The function should take in two entries and return 1 if the first entry should be chosen and -1 if the second entry should be chosen.\n * @returns {number} 1 if a is greater, -1 if b is greater\n */\n\n\nfunction SortByClockId(a, b, resolveConflict) {\n  // Sort by ID if clocks are concurrent,\n  // take the entry with a \"greater\" clock id\n  return a.clock.id === b.clock.id ? resolveConflict(a, b) : a.clock.id < b.clock.id ? -1 : 1;\n}\n/**\n * A wrapper function to throw an error if the results of a passed function return zero\n * @param {function(a, b)} [tiebreaker] The tiebreaker function to validate.\n * @returns {function(a, b)} 1 if a is greater, -1 if b is greater\n * @throws {Error} if func ever returns 0\n */\n\n\nfunction NoZeroes(func) {\n  var msg = \"Your log's tiebreaker function, \".concat(func.name, \", has returned zero and therefore cannot be\");\n\n  var comparator = function comparator(a, b) {\n    // Validate by calling the function\n    var result = func(a, b);\n\n    if (result === 0) {\n      throw Error(msg);\n    }\n\n    return result;\n  };\n\n  return comparator;\n}\n\nexports.SortByClocks = SortByClocks;\nexports.SortByClockId = SortByClockId;\nexports.LastWriteWins = LastWriteWins;\nexports.SortByEntryHash = SortByEntryHash;\nexports.NoZeroes = NoZeroes;","map":{"version":3,"names":["Clock","require","LastWriteWins","a","b","First","sortById","SortByClockId","sortByEntryClocks","SortByClocks","SortByEntryHash","compareHash","hash","resolveConflict","diff","compare","clock","id","NoZeroes","func","msg","name","comparator","result","Error","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-log/src/log-sorting.js"],"sourcesContent":["'use strict'\n\nconst Clock = require('./lamport-clock')\n\n/**\n * Sort two entries as Last-Write-Wins (LWW).\n *\n * Last Write Wins is a conflict resolution strategy for sorting elements\n * where the element with a greater clock (latest) is chosen as the winner.\n *\n * @param {Entry} a First entry\n * @param {Entry} b Second entry\n * @returns {number} 1 if a is latest, -1 if b is latest\n */\nfunction LastWriteWins (a, b) {\n  // Ultimate conflict resolution (take the first/left arg)\n  const First = (a, b) => a\n  // Sort two entries by their clock id, if the same always take the first\n  const sortById = (a, b) => SortByClockId(a, b, First)\n  // Sort two entries by their clock time, if concurrent,\n  // determine sorting using provided conflict resolution function\n  const sortByEntryClocks = (a, b) => SortByClocks(a, b, sortById)\n  // Sort entries by clock time as the primary sort criteria\n  return sortByEntryClocks(a, b)\n}\n\n/**\n * Sort two entries by their hash.\n *\n * @param {Entry} a First entry\n * @param {Entry} b Second entry\n * @returns {number} 1 if a is latest, -1 if b is latest\n */\nfunction SortByEntryHash (a, b) {\n  // Ultimate conflict resolution (compare hashes)\n  const compareHash = (a, b) => a.hash < b.hash ? -1 : 1\n  // Sort two entries by their clock id, if the same then compare hashes\n  const sortById = (a, b) => SortByClockId(a, b, compareHash)\n  // Sort two entries by their clock time, if concurrent,\n  // determine sorting using provided conflict resolution function\n  const sortByEntryClocks = (a, b) => SortByClocks(a, b, sortById)\n  // Sort entries by clock time as the primary sort criteria\n  return sortByEntryClocks(a, b)\n}\n\n/**\n * Sort two entries by their clock time.\n * @param {Entry} a First entry to compare\n * @param {Entry} b Second entry to compare\n * @param {function(a, b)} resolveConflict A function to call if entries are concurrent (happened at the same time). The function should take in two entries and return 1 if the first entry should be chosen and -1 if the second entry should be chosen.\n * @returns {number} 1 if a is greater, -1 if b is greater\n */\nfunction SortByClocks (a, b, resolveConflict) {\n  // Compare the clocks\n  const diff = Clock.compare(a.clock, b.clock)\n  // If the clocks are concurrent, use the provided\n  // conflict resolution function to determine which comes first\n  return diff === 0 ? resolveConflict(a, b) : diff\n}\n\n/**\n * Sort two entries by their clock id.\n * @param {Entry} a First entry to compare\n * @param {Entry} b Second entry to compare\n * @param {function(a, b)} resolveConflict A function to call if the clocks ids are the same. The function should take in two entries and return 1 if the first entry should be chosen and -1 if the second entry should be chosen.\n * @returns {number} 1 if a is greater, -1 if b is greater\n */\nfunction SortByClockId (a, b, resolveConflict) {\n  // Sort by ID if clocks are concurrent,\n  // take the entry with a \"greater\" clock id\n  return a.clock.id === b.clock.id\n    ? resolveConflict(a, b)\n    : a.clock.id < b.clock.id ? -1 : 1\n}\n\n/**\n * A wrapper function to throw an error if the results of a passed function return zero\n * @param {function(a, b)} [tiebreaker] The tiebreaker function to validate.\n * @returns {function(a, b)} 1 if a is greater, -1 if b is greater\n * @throws {Error} if func ever returns 0\n */\nfunction NoZeroes (func) {\n  const msg = `Your log's tiebreaker function, ${func.name}, has returned zero and therefore cannot be`\n\n  const comparator = (a, b) => {\n    // Validate by calling the function\n    const result = func(a, b)\n    if (result === 0) { throw Error(msg) }\n    return result\n  }\n\n  return comparator\n}\n\nexports.SortByClocks = SortByClocks\nexports.SortByClockId = SortByClockId\nexports.LastWriteWins = LastWriteWins\nexports.SortByEntryHash = SortByEntryHash\nexports.NoZeroes = NoZeroes\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}