{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _objectSpread = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _awaitAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _wrapAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nvar _asyncIterator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\n/**\n * @param {string} type\n * @param {string} cid\n * @param {Record<string, string>} metadata\n */\n\n\nfunction toPin(type, cid, metadata) {\n  /** @type {import('ipfs-core-types/src/pin').LsResult} */\n  var pin = {\n    type: type,\n    cid: CID.parse(cid)\n  };\n\n  if (metadata) {\n    pin.metadata = metadata;\n  }\n\n  return pin;\n}\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {PinAPI[\"ls\"]}\n   */\n  function ls() {\n    return _ls.apply(this, arguments);\n  }\n\n  function _ls() {\n    _ls = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var options,\n          paths,\n          res,\n          _iteratorAbruptCompletion,\n          _didIteratorError,\n          _iteratorError,\n          _iterator,\n          _step,\n          pin,\n          _i,\n          _Object$keys,\n          cid,\n          _args = arguments;\n\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n\n              /** @type {any[]} */\n              paths = [];\n\n              if (options.paths) {\n                paths = Array.isArray(options.paths) ? options.paths : [options.paths];\n              }\n\n              _context.next = 5;\n              return _awaitAsyncGenerator(api.post('pin/ls', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread(_objectSpread({}, options), {}, {\n                  arg: paths.map(function (path) {\n                    return \"\".concat(path);\n                  }),\n                  stream: true\n                })),\n                headers: options.headers\n              }));\n\n            case 5:\n              res = _context.sent;\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 8;\n              _iterator = _asyncIterator(res.ndjson());\n\n            case 10:\n              _context.next = 12;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 12:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 29;\n                break;\n              }\n\n              pin = _step.value;\n\n              if (!pin.Keys) {\n                _context.next = 24;\n                break;\n              }\n\n              _i = 0, _Object$keys = Object.keys(pin.Keys);\n\n            case 16:\n              if (!(_i < _Object$keys.length)) {\n                _context.next = 23;\n                break;\n              }\n\n              cid = _Object$keys[_i];\n              _context.next = 20;\n              return toPin(pin.Keys[cid].Type, cid, pin.Keys[cid].Metadata);\n\n            case 20:\n              _i++;\n              _context.next = 16;\n              break;\n\n            case 23:\n              return _context.abrupt(\"return\");\n\n            case 24:\n              _context.next = 26;\n              return toPin(pin.Type, pin.Cid, pin.Metadata);\n\n            case 26:\n              _iteratorAbruptCompletion = false;\n              _context.next = 10;\n              break;\n\n            case 29:\n              _context.next = 35;\n              break;\n\n            case 31:\n              _context.prev = 31;\n              _context.t0 = _context[\"catch\"](8);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n\n            case 35:\n              _context.prev = 35;\n              _context.prev = 36;\n\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 40;\n                break;\n              }\n\n              _context.next = 40;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 40:\n              _context.prev = 40;\n\n              if (!_didIteratorError) {\n                _context.next = 43;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 43:\n              return _context.finish(40);\n\n            case 44:\n              return _context.finish(35);\n\n            case 45:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[8, 31, 35, 45], [36,, 40, 44]]);\n    }));\n    return _ls.apply(this, arguments);\n  }\n\n  return ls;\n});","map":{"version":3,"names":["require","CID","configure","toUrlSearchParams","toPin","type","cid","metadata","pin","parse","module","exports","api","ls","options","paths","Array","isArray","post","signal","searchParams","arg","map","path","stream","headers","res","ndjson","Keys","Object","keys","Type","Metadata","Cid"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-http-client/src/pin/ls.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin').API<HTTPClientExtraOptions>} PinAPI\n */\n\n/**\n * @param {string} type\n * @param {string} cid\n * @param {Record<string, string>} metadata\n */\nfunction toPin (type, cid, metadata) {\n  /** @type {import('ipfs-core-types/src/pin').LsResult} */\n  const pin = {\n    type,\n    cid: CID.parse(cid)\n  }\n\n  if (metadata) {\n    pin.metadata = metadata\n  }\n\n  return pin\n}\n\nmodule.exports = configure(api => {\n  /**\n   * @type {PinAPI[\"ls\"]}\n   */\n  async function * ls (options = {}) {\n    /** @type {any[]} */\n    let paths = []\n\n    if (options.paths) {\n      paths = Array.isArray(options.paths) ? options.paths : [options.paths]\n    }\n\n    const res = await api.post('pin/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        arg: paths.map(path => `${path}`),\n        stream: true\n      }),\n      headers: options.headers\n    })\n\n    for await (const pin of res.ndjson()) {\n      if (pin.Keys) { // non-streaming response\n        for (const cid of Object.keys(pin.Keys)) {\n          yield toPin(pin.Keys[cid].Type, cid, pin.Keys[cid].Metadata)\n        }\n        return\n      }\n\n      yield toPin(pin.Type, pin.Cid, pin.Metadata)\n    }\n  }\n  return ls\n})\n"],"mappings":"AAAA;;;;;;;;;;;;AAEA,eAAgBA,OAAO,CAAC,kBAAD,CAAvB;AAAA,IAAQC,GAAR,YAAQA,GAAR;;AACA,IAAMC,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AACA,SAASI,KAAT,CAAgBC,IAAhB,EAAsBC,GAAtB,EAA2BC,QAA3B,EAAqC;EACnC;EACA,IAAMC,GAAG,GAAG;IACVH,IAAI,EAAJA,IADU;IAEVC,GAAG,EAAEL,GAAG,CAACQ,KAAJ,CAAUH,GAAV;EAFK,CAAZ;;EAKA,IAAIC,QAAJ,EAAc;IACZC,GAAG,CAACD,QAAJ,GAAeA,QAAf;EACD;;EAED,OAAOC,GAAP;AACD;;AAEDE,MAAM,CAACC,OAAP,GAAiBT,SAAS,CAAC,UAAAU,GAAG,EAAI;EAChC;AACF;AACA;EAHkC,SAIfC,EAJe;IAAA;EAAA;;EAAA;IAAA,mEAIhC;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;;MAAA;QAAA;UAAA;YAAA;cAAqBC,OAArB,2DAA+B,EAA/B;;cACE;cACIC,KAFN,GAEc,EAFd;;cAIE,IAAID,OAAO,CAACC,KAAZ,EAAmB;gBACjBA,KAAK,GAAGC,KAAK,CAACC,OAAN,CAAcH,OAAO,CAACC,KAAtB,IAA+BD,OAAO,CAACC,KAAvC,GAA+C,CAACD,OAAO,CAACC,KAAT,CAAvD;cACD;;cANH;cAAA,4BAQoBH,GAAG,CAACM,IAAJ,CAAS,QAAT,EAAmB;gBACnCC,MAAM,EAAEL,OAAO,CAACK,MADmB;gBAEnCC,YAAY,EAAEjB,iBAAiB,iCAC1BW,OAD0B;kBAE7BO,GAAG,EAAEN,KAAK,CAACO,GAAN,CAAU,UAAAC,IAAI;oBAAA,iBAAOA,IAAP;kBAAA,CAAd,CAFwB;kBAG7BC,MAAM,EAAE;gBAHqB,GAFI;gBAOnCC,OAAO,EAAEX,OAAO,CAACW;cAPkB,CAAnB,CARpB;;YAAA;cAQQC,GARR;cAAA;cAAA;cAAA;cAAA,2BAkB0BA,GAAG,CAACC,MAAJ,EAlB1B;;YAAA;cAAA;cAAA;;YAAA;cAAA;gBAAA;gBAAA;cAAA;;cAkBmBnB,GAlBnB;;cAAA,KAmBQA,GAAG,CAACoB,IAnBZ;gBAAA;gBAAA;cAAA;;cAAA,uBAoBwBC,MAAM,CAACC,IAAP,CAAYtB,GAAG,CAACoB,IAAhB,CApBxB;;YAAA;cAAA;gBAAA;gBAAA;cAAA;;cAoBiBtB,GApBjB;cAAA;cAqBQ,OAAMF,KAAK,CAACI,GAAG,CAACoB,IAAJ,CAAStB,GAAT,EAAcyB,IAAf,EAAqBzB,GAArB,EAA0BE,GAAG,CAACoB,IAAJ,CAAStB,GAAT,EAAc0B,QAAxC,CAAX;;YArBR;cAAA;cAAA;cAAA;;YAAA;cAAA;;YAAA;cAAA;cA0BI,OAAM5B,KAAK,CAACI,GAAG,CAACuB,IAAL,EAAWvB,GAAG,CAACyB,GAAf,EAAoBzB,GAAG,CAACwB,QAAxB,CAAX;;YA1BJ;cAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;;cAAA;gBAAA;gBAAA;cAAA;;cAAA;cAAA;;YAAA;cAAA;;cAAA;gBAAA;gBAAA;cAAA;;cAAA;;YAAA;cAAA;;YAAA;cAAA;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAJgC;IAAA;EAAA;;EAiChC,OAAOnB,EAAP;AACD,CAlCyB,CAA1B"},"metadata":{},"sourceType":"script"}