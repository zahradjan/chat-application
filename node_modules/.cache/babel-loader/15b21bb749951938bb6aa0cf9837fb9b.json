{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst netmask_1 = require(\"netmask\");\n\nconst ip_regex_1 = __importDefault(require(\"ip-regex\"));\n\nconst is_ip_1 = __importDefault(require(\"is-ip\"));\n\nconst ipaddr_js_1 = require(\"ipaddr.js\");\n\nconst PRIVATE_IP_RANGES = ['0.0.0.0/8', '10.0.0.0/8', '100.64.0.0/10', '127.0.0.0/8', '169.254.0.0/16', '172.16.0.0/12', '192.0.0.0/24', '192.0.0.0/29', '192.0.0.8/32', '192.0.0.9/32', '192.0.0.10/32', '192.0.0.170/32', '192.0.0.171/32', '192.0.2.0/24', '192.31.196.0/24', '192.52.193.0/24', '192.88.99.0/24', '192.168.0.0/16', '192.175.48.0/24', '198.18.0.0/15', '198.51.100.0/24', '203.0.113.0/24', '240.0.0.0/4', '255.255.255.255/32'];\nconst NETMASK_RANGES = PRIVATE_IP_RANGES.map(ip_range => new netmask_1.Netmask(ip_range));\n\nfunction ipv4_check(ip_addr) {\n  for (let r of NETMASK_RANGES) {\n    if (r.contains(ip_addr)) return true;\n  }\n\n  return false;\n}\n\nfunction ipv6_check(ip_addr) {\n  return /^::$/.test(ip_addr) || /^::1$/.test(ip_addr) || /^::f{4}:([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/.test(ip_addr) || /^::f{4}:0.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/.test(ip_addr) || /^64:ff9b::([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/.test(ip_addr) || /^100::([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) || /^2001::([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) || /^2001:2[0-9a-fA-F]:([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) || /^2001:db8:([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) || /^2002:([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) || /^f[c-d]([0-9a-fA-F]{2,2}):/i.test(ip_addr) || /^fe[8-9a-bA-B][0-9a-fA-F]:/i.test(ip_addr) || /^ff([0-9a-fA-F]{2,2}):/i.test(ip_addr);\n}\n\nexports.default = ip => {\n  if (ipaddr_js_1.isValid(ip)) {\n    const parsed = ipaddr_js_1.parse(ip);\n    if (parsed.kind() === 'ipv4') return ipv4_check(parsed.toNormalizedString());else if (parsed.kind() === 'ipv6') return ipv6_check(ip);\n  } else if (is_ip_1.default(ip) && ip_regex_1.default.v6().test(ip)) return ipv6_check(ip);\n\n  return undefined;\n};","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","netmask_1","require","ip_regex_1","is_ip_1","ipaddr_js_1","PRIVATE_IP_RANGES","NETMASK_RANGES","map","ip_range","Netmask","ipv4_check","ip_addr","r","contains","ipv6_check","test","default","ip","isValid","parsed","parse","kind","toNormalizedString","v6","undefined"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/private-ip/lib/index.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst netmask_1 = require(\"netmask\");\nconst ip_regex_1 = __importDefault(require(\"ip-regex\"));\nconst is_ip_1 = __importDefault(require(\"is-ip\"));\nconst ipaddr_js_1 = require(\"ipaddr.js\");\nconst PRIVATE_IP_RANGES = [\n    '0.0.0.0/8',\n    '10.0.0.0/8',\n    '100.64.0.0/10',\n    '127.0.0.0/8',\n    '169.254.0.0/16',\n    '172.16.0.0/12',\n    '192.0.0.0/24',\n    '192.0.0.0/29',\n    '192.0.0.8/32',\n    '192.0.0.9/32',\n    '192.0.0.10/32',\n    '192.0.0.170/32',\n    '192.0.0.171/32',\n    '192.0.2.0/24',\n    '192.31.196.0/24',\n    '192.52.193.0/24',\n    '192.88.99.0/24',\n    '192.168.0.0/16',\n    '192.175.48.0/24',\n    '198.18.0.0/15',\n    '198.51.100.0/24',\n    '203.0.113.0/24',\n    '240.0.0.0/4',\n    '255.255.255.255/32'\n];\nconst NETMASK_RANGES = PRIVATE_IP_RANGES.map(ip_range => new netmask_1.Netmask(ip_range));\nfunction ipv4_check(ip_addr) {\n    for (let r of NETMASK_RANGES) {\n        if (r.contains(ip_addr))\n            return true;\n    }\n    return false;\n}\nfunction ipv6_check(ip_addr) {\n    return /^::$/.test(ip_addr) ||\n        /^::1$/.test(ip_addr) ||\n        /^::f{4}:([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/.test(ip_addr) ||\n        /^::f{4}:0.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/.test(ip_addr) ||\n        /^64:ff9b::([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/.test(ip_addr) ||\n        /^100::([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) ||\n        /^2001::([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) ||\n        /^2001:2[0-9a-fA-F]:([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) ||\n        /^2001:db8:([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) ||\n        /^2002:([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) ||\n        /^f[c-d]([0-9a-fA-F]{2,2}):/i.test(ip_addr) ||\n        /^fe[8-9a-bA-B][0-9a-fA-F]:/i.test(ip_addr) ||\n        /^ff([0-9a-fA-F]{2,2}):/i.test(ip_addr);\n}\nexports.default = (ip) => {\n    if (ipaddr_js_1.isValid(ip)) {\n        const parsed = ipaddr_js_1.parse(ip);\n        if (parsed.kind() === 'ipv4')\n            return ipv4_check(parsed.toNormalizedString());\n        else if (parsed.kind() === 'ipv6')\n            return ipv6_check(ip);\n    }\n    else if (is_ip_1.default(ip) && ip_regex_1.default.v6().test(ip))\n        return ipv6_check(ip);\n    return undefined;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}