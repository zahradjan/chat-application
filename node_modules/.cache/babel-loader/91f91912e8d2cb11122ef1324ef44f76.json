{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar dagPb = require('@ipld/dag-pb');\n\nvar dagCbor = require('@ipld/dag-cbor');\n\nvar raw = require('multiformats/codecs/raw');\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @typedef {import('@ipld/dag-pb').PBLink} DAGLink\n */\n\n/**\n * @param {any} node\n * @param {DAGLink[]} [links]\n * @returns {DAGLink[]}\n */\n\n\nfunction findLinks(node) {\n  var links = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  for (var key in node) {\n    var val = node[key];\n\n    if (key === '/' && Object.keys(node).length === 1) {\n      try {\n        links.push({\n          Name: '',\n          Tsize: 0,\n          Hash: CID.parse(val)\n        });\n        continue;\n      } catch (_) {// not a CID\n      }\n    }\n\n    var cid = CID.asCID(val);\n\n    if (cid) {\n      links.push({\n        Name: '',\n        Tsize: 0,\n        Hash: cid\n      });\n      continue;\n    }\n\n    if (Array.isArray(val)) {\n      findLinks(val, links);\n    }\n\n    if (val && typeof val === 'object') {\n      findLinks(val, links);\n    }\n  }\n\n  return links;\n}\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n */\n\n\nmodule.exports = function (_ref) {\n  var repo = _ref.repo,\n      codecs = _ref.codecs;\n\n  /**\n   * @type {import('ipfs-core-types/src/object').API[\"links\"]}\n   */\n  function links(_x) {\n    return _links.apply(this, arguments);\n  }\n\n  function _links() {\n    _links = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(cid) {\n      var options,\n          codec,\n          block,\n          node,\n          _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _context.next = 3;\n              return codecs.getCodec(cid.code);\n\n            case 3:\n              codec = _context.sent;\n              _context.next = 6;\n              return repo.blocks.get(cid, options);\n\n            case 6:\n              block = _context.sent;\n              node = codec.decode(block);\n\n              if (!(cid.code === raw.code)) {\n                _context.next = 10;\n                break;\n              }\n\n              return _context.abrupt(\"return\", []);\n\n            case 10:\n              if (!(cid.code === dagPb.code)) {\n                _context.next = 12;\n                break;\n              }\n\n              return _context.abrupt(\"return\", node.Links);\n\n            case 12:\n              if (!(cid.code === dagCbor.code)) {\n                _context.next = 14;\n                break;\n              }\n\n              return _context.abrupt(\"return\", findLinks(node));\n\n            case 14:\n              throw new Error(\"Cannot resolve links from codec \".concat(cid.code));\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _links.apply(this, arguments);\n  }\n\n  return withTimeoutOption(links);\n};","map":{"version":3,"names":["dagPb","require","dagCbor","raw","CID","withTimeoutOption","findLinks","node","links","key","val","Object","keys","length","push","Name","Tsize","Hash","parse","_","cid","asCID","Array","isArray","module","exports","repo","codecs","options","getCodec","code","codec","blocks","get","block","decode","Links","Error"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/object/links.js"],"sourcesContent":["'use strict'\n\nconst dagPb = require('@ipld/dag-pb')\nconst dagCbor = require('@ipld/dag-cbor')\nconst raw = require('multiformats/codecs/raw')\nconst { CID } = require('multiformats/cid')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @typedef {import('@ipld/dag-pb').PBLink} DAGLink\n */\n\n/**\n * @param {any} node\n * @param {DAGLink[]} [links]\n * @returns {DAGLink[]}\n */\nfunction findLinks (node, links = []) {\n  for (const key in node) {\n    const val = node[key]\n\n    if (key === '/' && Object.keys(node).length === 1) {\n      try {\n        links.push({\n          Name: '',\n          Tsize: 0,\n          Hash: CID.parse(val)\n        })\n        continue\n      } catch (_) {\n        // not a CID\n      }\n    }\n\n    const cid = CID.asCID(val)\n\n    if (cid) {\n      links.push({\n        Name: '',\n        Tsize: 0,\n        Hash: cid\n      })\n      continue\n    }\n\n    if (Array.isArray(val)) {\n      findLinks(val, links)\n    }\n\n    if (val && typeof val === 'object') {\n      findLinks(val, links)\n    }\n  }\n\n  return links\n}\n\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n */\nmodule.exports = ({ repo, codecs }) => {\n  /**\n   * @type {import('ipfs-core-types/src/object').API[\"links\"]}\n   */\n  async function links (cid, options = {}) {\n    const codec = await codecs.getCodec(cid.code)\n    const block = await repo.blocks.get(cid, options)\n    const node = codec.decode(block)\n\n    if (cid.code === raw.code) {\n      return []\n    }\n\n    if (cid.code === dagPb.code) {\n      return node.Links\n    }\n\n    if (cid.code === dagCbor.code) {\n      return findLinks(node)\n    }\n\n    throw new Error(`Cannot resolve links from codec ${cid.code}`)\n  }\n\n  return withTimeoutOption(links)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}