{"ast":null,"code":"'use strict';\n\nconst set = require('just-safe-set');\n\nconst getDefaultConfig = require('../runtime/config-nodejs.js');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst log = require('debug')('ipfs:core:config');\n/**\n * @typedef {import('ipfs-core-types/src/config').Config} Config\n *\n * @typedef {object} Transformer\n * @property {string} description\n * @property {(config: Config) => Config} transform\n */\n\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\n\n\nmodule.exports = _ref => {\n  let {\n    repo\n  } = _ref;\n  return {\n    getAll: withTimeoutOption(getAll),\n    get: withTimeoutOption(get),\n    set: withTimeoutOption(set),\n    replace: withTimeoutOption(replace),\n    profiles: {\n      apply: withTimeoutOption(applyProfile),\n      list: withTimeoutOption(listProfiles)\n    }\n  };\n  /**\n   * @type {import('ipfs-core-types/src/config').API[\"getAll\"]}\n   */\n\n  async function getAll() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // eslint-disable-line require-await\n    // @ts-ignore TODO: move config typedefs into ipfs-repo\n    return repo.config.getAll(options);\n  }\n  /**\n   * @type {import('ipfs-core-types/src/config').API[\"get\"]}\n   */\n\n\n  async function get(key, options) {\n    // eslint-disable-line require-await\n    if (!key) {\n      return Promise.reject(new Error('key argument is required'));\n    } // @ts-ignore TODO: move config typedefs into ipfs-repo\n\n\n    return repo.config.get(key, options);\n  }\n  /**\n   * @type {import('ipfs-core-types/src/config').API[\"set\"]}\n   */\n\n\n  async function set(key, value, options) {\n    // eslint-disable-line require-await\n    return repo.config.set(key, value, options);\n  }\n  /**\n   * @type {import('ipfs-core-types/src/config').API[\"replace\"]}\n   */\n\n\n  async function replace(value, options) {\n    // eslint-disable-line require-await\n    return repo.config.replace(value, options);\n  }\n  /**\n   * @type {import('ipfs-core-types/src/config/profiles').API[\"apply\"]}\n   */\n\n\n  async function applyProfile(profileName) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      dryRun: false\n    };\n    const {\n      dryRun\n    } = options;\n    const profile = profiles[profileName];\n\n    if (!profile) {\n      throw new Error(`No profile with name '${profileName}' exists`);\n    }\n\n    try {\n      const oldCfg = await repo.config.getAll(options);\n      let newCfg = JSON.parse(JSON.stringify(oldCfg)); // clone\n\n      newCfg = profile.transform(newCfg);\n\n      if (!dryRun) {\n        await repo.config.replace(newCfg, options);\n      } // Scrub private key from output\n      // @ts-ignore `oldCfg.Identity` maybe undefined\n\n\n      delete oldCfg.Identity.PrivKey;\n      delete newCfg.Identity.PrivKey; // @ts-ignore TODO: move config typedefs into ipfs-repo\n\n      return {\n        original: oldCfg,\n        updated: newCfg\n      };\n    } catch (err) {\n      log(err);\n      throw new Error(`Could not apply profile '${profileName}' to config: ${err.message}`);\n    }\n  }\n};\n/**\n * @type {import('ipfs-core-types/src/config/profiles').API[\"list\"]}\n */\n\n\nasync function listProfiles(_options) {\n  // eslint-disable-line require-await\n  return Object.keys(profiles).map(name => ({\n    name,\n    description: profiles[name].description\n  }));\n}\n/**\n * @type {Record<string, Transformer>}\n */\n\n\nconst profiles = {\n  server: {\n    description: 'Recommended for nodes with public IPv4 address (servers, VPSes, etc.), disables host and content discovery and UPnP in local networks.',\n    transform: config => {\n      set(config, 'Discovery.MDNS.Enabled', false);\n      set(config, 'Discovery.webRTCStar.Enabled', false);\n      config.Swarm = { ...(config.Swarm || {}),\n        DisableNatPortMap: true\n      };\n      return config;\n    }\n  },\n  'local-discovery': {\n    description: 'Sets default values to fields affected by `server` profile, enables discovery and UPnP in local networks.',\n    transform: config => {\n      set(config, 'Discovery.MDNS.Enabled', true);\n      set(config, 'Discovery.webRTCStar.Enabled', true);\n      set(config, 'Swarm', { ...(config.Swarm || {}),\n        DisableNatPortMap: false\n      });\n      return config;\n    }\n  },\n  test: {\n    description: 'Reduces external interference, useful for running ipfs in test environments. Note that with these settings node won\\'t be able to talk to the rest of the network without manual bootstrap.',\n    transform: config => {\n      const defaultConfig = getDefaultConfig();\n      set(config, 'Addresses.API', defaultConfig.Addresses.API ? '/ip4/127.0.0.1/tcp/0' : '');\n      set(config, 'Addresses.Gateway', defaultConfig.Addresses.Gateway ? '/ip4/127.0.0.1/tcp/0' : '');\n      set(config, 'Addresses.Swarm', defaultConfig.Addresses.Swarm.length ? ['/ip4/127.0.0.1/tcp/0'] : []);\n      set(config, 'Addresses.Delegates', []);\n      set(config, 'Bootstrap', []);\n      set(config, 'Discovery.MDNS.Enabled', false);\n      set(config, 'Discovery.webRTCStar.Enabled', false);\n      set(config, 'Swarm', { ...(config.Swarm || {}),\n        DisableNatPortMap: true\n      });\n      return config;\n    }\n  },\n  'default-networking': {\n    description: 'Restores default network settings. Inverse profile of the `test` profile.',\n    transform: config => {\n      const defaultConfig = getDefaultConfig();\n      set(config, 'Addresses.API', defaultConfig.Addresses.API);\n      set(config, 'Addresses.Gateway', defaultConfig.Addresses.Gateway);\n      set(config, 'Addresses.Swarm', defaultConfig.Addresses.Swarm);\n      set(config, 'Addresses.Delegates', defaultConfig.Addresses.Delegates);\n      set(config, 'Bootstrap', defaultConfig.Bootstrap);\n      set(config, 'Discovery.MDNS.Enabled', defaultConfig.Discovery.MDNS.Enabled);\n      set(config, 'Discovery.webRTCStar.Enabled', defaultConfig.Discovery.webRTCStar.Enabled);\n      set(config, 'Swarm', { ...(config.Swarm || {}),\n        DisableNatPortMap: false\n      });\n      return config;\n    }\n  },\n  lowpower: {\n    description: 'Reduces daemon overhead on the system. May affect node functionality,performance of content discovery and data fetching may be degraded. Recommended for low power systems.',\n    transform: config => {\n      const Swarm = config.Swarm || {};\n      const ConnMgr = Swarm.ConnMgr || {};\n      ConnMgr.LowWater = 20;\n      ConnMgr.HighWater = 40;\n      Swarm.ConnMgr = ConnMgr;\n      config.Swarm = Swarm;\n      return config;\n    }\n  },\n  'default-power': {\n    description: 'Inverse of \"lowpower\" profile.',\n    transform: config => {\n      const defaultConfig = getDefaultConfig();\n      config.Swarm = defaultConfig.Swarm;\n      return config;\n    }\n  }\n};\nmodule.exports.profiles = profiles;","map":{"version":3,"names":["set","require","getDefaultConfig","withTimeoutOption","log","module","exports","repo","getAll","get","replace","profiles","apply","applyProfile","list","listProfiles","options","config","key","Promise","reject","Error","value","profileName","dryRun","profile","oldCfg","newCfg","JSON","parse","stringify","transform","Identity","PrivKey","original","updated","err","message","_options","Object","keys","map","name","description","server","Swarm","DisableNatPortMap","test","defaultConfig","Addresses","API","Gateway","length","Delegates","Bootstrap","Discovery","MDNS","Enabled","webRTCStar","lowpower","ConnMgr","LowWater","HighWater"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/config.js"],"sourcesContent":["'use strict'\n\nconst set = require('just-safe-set')\nconst getDefaultConfig = require('../runtime/config-nodejs.js')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst log = require('debug')('ipfs:core:config')\n\n/**\n * @typedef {import('ipfs-core-types/src/config').Config} Config\n *\n * @typedef {object} Transformer\n * @property {string} description\n * @property {(config: Config) => Config} transform\n */\n\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nmodule.exports = ({ repo }) => {\n  return {\n    getAll: withTimeoutOption(getAll),\n    get: withTimeoutOption(get),\n    set: withTimeoutOption(set),\n    replace: withTimeoutOption(replace),\n    profiles: {\n      apply: withTimeoutOption(applyProfile),\n      list: withTimeoutOption(listProfiles)\n    }\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config').API[\"getAll\"]}\n   */\n  async function getAll (options = {}) { // eslint-disable-line require-await\n    // @ts-ignore TODO: move config typedefs into ipfs-repo\n    return repo.config.getAll(options)\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config').API[\"get\"]}\n   */\n  async function get (key, options) { // eslint-disable-line require-await\n    if (!key) {\n      return Promise.reject(new Error('key argument is required'))\n    }\n\n    // @ts-ignore TODO: move config typedefs into ipfs-repo\n    return repo.config.get(key, options)\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config').API[\"set\"]}\n   */\n  async function set (key, value, options) { // eslint-disable-line require-await\n    return repo.config.set(key, value, options)\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config').API[\"replace\"]}\n   */\n  async function replace (value, options) { // eslint-disable-line require-await\n    return repo.config.replace(value, options)\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config/profiles').API[\"apply\"]}\n   */\n  async function applyProfile (profileName, options = { dryRun: false }) {\n    const { dryRun } = options\n\n    const profile = profiles[profileName]\n\n    if (!profile) {\n      throw new Error(`No profile with name '${profileName}' exists`)\n    }\n\n    try {\n      const oldCfg = await repo.config.getAll(options)\n      let newCfg = JSON.parse(JSON.stringify(oldCfg)) // clone\n      newCfg = profile.transform(newCfg)\n\n      if (!dryRun) {\n        await repo.config.replace(newCfg, options)\n      }\n\n      // Scrub private key from output\n      // @ts-ignore `oldCfg.Identity` maybe undefined\n      delete oldCfg.Identity.PrivKey\n      delete newCfg.Identity.PrivKey\n\n      // @ts-ignore TODO: move config typedefs into ipfs-repo\n      return { original: oldCfg, updated: newCfg }\n    } catch (err) {\n      log(err)\n\n      throw new Error(`Could not apply profile '${profileName}' to config: ${err.message}`)\n    }\n  }\n}\n\n/**\n * @type {import('ipfs-core-types/src/config/profiles').API[\"list\"]}\n */\nasync function listProfiles (_options) { // eslint-disable-line require-await\n  return Object.keys(profiles).map(name => ({\n    name,\n    description: profiles[name].description\n  }))\n}\n\n/**\n * @type {Record<string, Transformer>}\n */\nconst profiles = {\n  server: {\n    description: 'Recommended for nodes with public IPv4 address (servers, VPSes, etc.), disables host and content discovery and UPnP in local networks.',\n    transform: (config) => {\n      set(config, 'Discovery.MDNS.Enabled', false)\n      set(config, 'Discovery.webRTCStar.Enabled', false)\n      config.Swarm = {\n        ...(config.Swarm || {}),\n        DisableNatPortMap: true\n      }\n\n      return config\n    }\n  },\n  'local-discovery': {\n    description: 'Sets default values to fields affected by `server` profile, enables discovery and UPnP in local networks.',\n    transform: (config) => {\n      set(config, 'Discovery.MDNS.Enabled', true)\n      set(config, 'Discovery.webRTCStar.Enabled', true)\n      set(config, 'Swarm', {\n        ...(config.Swarm || {}),\n        DisableNatPortMap: false\n      })\n\n      return config\n    }\n  },\n  test: {\n    description: 'Reduces external interference, useful for running ipfs in test environments. Note that with these settings node won\\'t be able to talk to the rest of the network without manual bootstrap.',\n    transform: (config) => {\n      const defaultConfig = getDefaultConfig()\n\n      set(config, 'Addresses.API', defaultConfig.Addresses.API ? '/ip4/127.0.0.1/tcp/0' : '')\n      set(config, 'Addresses.Gateway', defaultConfig.Addresses.Gateway ? '/ip4/127.0.0.1/tcp/0' : '')\n      set(config, 'Addresses.Swarm', defaultConfig.Addresses.Swarm.length ? ['/ip4/127.0.0.1/tcp/0'] : [])\n      set(config, 'Addresses.Delegates', [])\n      set(config, 'Bootstrap', [])\n      set(config, 'Discovery.MDNS.Enabled', false)\n      set(config, 'Discovery.webRTCStar.Enabled', false)\n      set(config, 'Swarm', {\n        ...(config.Swarm || {}),\n        DisableNatPortMap: true\n      })\n\n      return config\n    }\n  },\n  'default-networking': {\n    description: 'Restores default network settings. Inverse profile of the `test` profile.',\n    transform: (config) => {\n      const defaultConfig = getDefaultConfig()\n\n      set(config, 'Addresses.API', defaultConfig.Addresses.API)\n      set(config, 'Addresses.Gateway', defaultConfig.Addresses.Gateway)\n      set(config, 'Addresses.Swarm', defaultConfig.Addresses.Swarm)\n      set(config, 'Addresses.Delegates', defaultConfig.Addresses.Delegates)\n      set(config, 'Bootstrap', defaultConfig.Bootstrap)\n      set(config, 'Discovery.MDNS.Enabled', defaultConfig.Discovery.MDNS.Enabled)\n      set(config, 'Discovery.webRTCStar.Enabled', defaultConfig.Discovery.webRTCStar.Enabled)\n      set(config, 'Swarm', {\n        ...(config.Swarm || {}),\n        DisableNatPortMap: false\n      })\n\n      return config\n    }\n  },\n  lowpower: {\n    description: 'Reduces daemon overhead on the system. May affect node functionality,performance of content discovery and data fetching may be degraded. Recommended for low power systems.',\n    transform: (config) => {\n      const Swarm = config.Swarm || {}\n      const ConnMgr = Swarm.ConnMgr || {}\n      ConnMgr.LowWater = 20\n      ConnMgr.HighWater = 40\n\n      Swarm.ConnMgr = ConnMgr\n      config.Swarm = Swarm\n\n      return config\n    }\n  },\n  'default-power': {\n    description: 'Inverse of \"lowpower\" profile.',\n    transform: (config) => {\n      const defaultConfig = getDefaultConfig()\n\n      config.Swarm = defaultConfig.Swarm\n\n      return config\n    }\n  }\n\n}\n\nmodule.exports.profiles = profiles\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}