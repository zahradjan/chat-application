{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst log = Object.assign(debug('libp2p:transports'), {\n  error: debug('libp2p:transports:err')\n});\n\nconst pSettle = require('p-settle');\n\nconst {\n  codes\n} = require('./errors');\n\nconst errCode = require('err-code');\n\nconst {\n  updateSelfPeerRecord\n} = require('./record/utils');\n/**\n * @typedef {import('multiaddr').Multiaddr} Multiaddr\n * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection\n * @typedef {import('libp2p-interfaces/src/transport/types').TransportFactory<any, any>} TransportFactory\n * @typedef {import('libp2p-interfaces/src/transport/types').Transport<any, any>} Transport\n *\n * @typedef {Object} TransportManagerProperties\n * @property {import('./')} libp2p\n * @property {import('./upgrader')} upgrader\n *\n * @typedef {Object} TransportManagerOptions\n * @property {number} [faultTolerance = FAULT_TOLERANCE.FATAL_ALL] - Address listen error tolerance.\n */\n\n\nclass TransportManager {\n  /**\n   * @class\n   * @param {TransportManagerProperties & TransportManagerOptions} options\n   */\n  constructor(_ref) {\n    let {\n      libp2p,\n      upgrader,\n      faultTolerance = FAULT_TOLERANCE.FATAL_ALL\n    } = _ref;\n    this.libp2p = libp2p;\n    this.upgrader = upgrader;\n    /** @type {Map<string, Transport>} */\n\n    this._transports = new Map();\n    this._listeners = new Map();\n    this._listenerOptions = new Map();\n    this.faultTolerance = faultTolerance;\n  }\n  /**\n   * Adds a `Transport` to the manager\n   *\n   * @param {string} key\n   * @param {TransportFactory} Transport\n   * @param {*} transportOptions - Additional options to pass to the transport\n   * @returns {void}\n   */\n\n\n  add(key, Transport) {\n    let transportOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    log('adding %s', key);\n\n    if (!key) {\n      throw errCode(new Error(`Transport must have a valid key, was given '${key}'`), codes.ERR_INVALID_KEY);\n    }\n\n    if (this._transports.has(key)) {\n      throw errCode(new Error('There is already a transport with this key'), codes.ERR_DUPLICATE_TRANSPORT);\n    }\n\n    const transport = new Transport({ ...transportOptions,\n      libp2p: this.libp2p,\n      upgrader: this.upgrader\n    });\n\n    this._transports.set(key, transport);\n\n    this._listenerOptions.set(key, transportOptions.listenerOptions || {});\n\n    if (!this._listeners.has(key)) {\n      this._listeners.set(key, []);\n    }\n  }\n  /**\n   * Stops all listeners\n   *\n   * @async\n   */\n\n\n  async close() {\n    const tasks = [];\n\n    for (const [key, listeners] of this._listeners) {\n      log('closing listeners for %s', key);\n\n      while (listeners.length) {\n        const listener = listeners.pop();\n        listener.removeAllListeners('listening');\n        listener.removeAllListeners('close');\n        tasks.push(listener.close());\n      }\n    }\n\n    await Promise.all(tasks);\n    log('all listeners closed');\n\n    for (const key of this._listeners.keys()) {\n      this._listeners.set(key, []);\n    }\n  }\n  /**\n   * Dials the given Multiaddr over it's supported transport\n   *\n   * @param {Multiaddr} ma\n   * @param {*} options\n   * @returns {Promise<Connection>}\n   */\n\n\n  async dial(ma, options) {\n    const transport = this.transportForMultiaddr(ma);\n\n    if (!transport) {\n      throw errCode(new Error(`No transport available for address ${String(ma)}`), codes.ERR_TRANSPORT_UNAVAILABLE);\n    }\n\n    try {\n      return await transport.dial(ma, options);\n    } catch (err) {\n      if (!err.code) err.code = codes.ERR_TRANSPORT_DIAL_FAILED;\n      throw err;\n    }\n  }\n  /**\n   * Returns all Multiaddr's the listeners are using\n   *\n   * @returns {Multiaddr[]}\n   */\n\n\n  getAddrs() {\n    /** @type {Multiaddr[]} */\n    let addrs = [];\n\n    for (const listeners of this._listeners.values()) {\n      for (const listener of listeners) {\n        addrs = [...addrs, ...listener.getAddrs()];\n      }\n    }\n\n    return addrs;\n  }\n  /**\n   * Returns all the transports instances.\n   *\n   * @returns {IterableIterator<Transport>}\n   */\n\n\n  getTransports() {\n    return this._transports.values();\n  }\n  /**\n   * Finds a transport that matches the given Multiaddr\n   *\n   * @param {Multiaddr} ma\n   * @returns {Transport|null}\n   */\n\n\n  transportForMultiaddr(ma) {\n    for (const transport of this._transports.values()) {\n      const addrs = transport.filter([ma]);\n      if (addrs.length) return transport;\n    }\n\n    return null;\n  }\n  /**\n   * Starts listeners for each listen Multiaddr.\n   *\n   * @async\n   * @param {Multiaddr[]} addrs - addresses to attempt to listen on\n   */\n\n\n  async listen(addrs) {\n    if (!addrs || addrs.length === 0) {\n      log('no addresses were provided for listening, this node is dial only');\n      return;\n    }\n\n    const couldNotListen = [];\n\n    for (const [key, transport] of this._transports.entries()) {\n      const supportedAddrs = transport.filter(addrs);\n      const tasks = []; // For each supported multiaddr, create a listener\n\n      for (const addr of supportedAddrs) {\n        log('creating listener for %s on %s', key, addr);\n        const listener = transport.createListener(this._listenerOptions.get(key));\n\n        this._listeners.get(key).push(listener); // Track listen/close events\n\n\n        listener.on('listening', () => updateSelfPeerRecord(this.libp2p));\n        listener.on('close', () => updateSelfPeerRecord(this.libp2p)); // We need to attempt to listen on everything\n\n        tasks.push(listener.listen(addr));\n      } // Keep track of transports we had no addresses for\n\n\n      if (tasks.length === 0) {\n        couldNotListen.push(key);\n        continue;\n      }\n\n      const results = await pSettle(tasks); // If we are listening on at least 1 address, succeed.\n      // TODO: we should look at adding a retry (`p-retry`) here to better support\n      // listening on remote addresses as they may be offline. We could then potentially\n      // just wait for any (`p-any`) listener to succeed on each transport before returning\n\n      const isListening = results.find(r => r.isFulfilled === true);\n\n      if (!isListening && this.faultTolerance !== FAULT_TOLERANCE.NO_FATAL) {\n        throw errCode(new Error(`Transport (${key}) could not listen on any available address`), codes.ERR_NO_VALID_ADDRESSES);\n      }\n    } // If no transports were able to listen, throw an error. This likely\n    // means we were given addresses we do not have transports for\n\n\n    if (couldNotListen.length === this._transports.size) {\n      const message = `no valid addresses were provided for transports [${couldNotListen}]`;\n\n      if (this.faultTolerance === FAULT_TOLERANCE.FATAL_ALL) {\n        throw errCode(new Error(message), codes.ERR_NO_VALID_ADDRESSES);\n      }\n\n      log(`libp2p in dial mode only: ${message}`);\n    }\n  }\n  /**\n   * Removes the given transport from the manager.\n   * If a transport has any running listeners, they will be closed.\n   *\n   * @async\n   * @param {string} key\n   */\n\n\n  async remove(key) {\n    log('removing %s', key);\n\n    if (this._listeners.has(key)) {\n      // Close any running listeners\n      for (const listener of this._listeners.get(key)) {\n        listener.removeAllListeners('listening');\n        listener.removeAllListeners('close');\n        await listener.close();\n      }\n    }\n\n    this._transports.delete(key);\n\n    this._listeners.delete(key);\n  }\n  /**\n   * Removes all transports from the manager.\n   * If any listeners are running, they will be closed.\n   *\n   * @async\n   */\n\n\n  async removeAll() {\n    const tasks = [];\n\n    for (const key of this._transports.keys()) {\n      tasks.push(this.remove(key));\n    }\n\n    await Promise.all(tasks);\n  }\n\n}\n/**\n * Enum Transport Manager Fault Tolerance values.\n * FATAL_ALL should be used for failing in any listen circumstance.\n * NO_FATAL should be used for not failing when not listening.\n *\n * @readonly\n * @enum {number}\n */\n\n\nconst FAULT_TOLERANCE = {\n  FATAL_ALL: 0,\n  NO_FATAL: 1\n};\nTransportManager.FaultTolerance = FAULT_TOLERANCE;\nmodule.exports = TransportManager;","map":{"version":3,"names":["debug","require","log","Object","assign","error","pSettle","codes","errCode","updateSelfPeerRecord","TransportManager","constructor","libp2p","upgrader","faultTolerance","FAULT_TOLERANCE","FATAL_ALL","_transports","Map","_listeners","_listenerOptions","add","key","Transport","transportOptions","Error","ERR_INVALID_KEY","has","ERR_DUPLICATE_TRANSPORT","transport","set","listenerOptions","close","tasks","listeners","length","listener","pop","removeAllListeners","push","Promise","all","keys","dial","ma","options","transportForMultiaddr","String","ERR_TRANSPORT_UNAVAILABLE","err","code","ERR_TRANSPORT_DIAL_FAILED","getAddrs","addrs","values","getTransports","filter","listen","couldNotListen","entries","supportedAddrs","addr","createListener","get","on","results","isListening","find","r","isFulfilled","NO_FATAL","ERR_NO_VALID_ADDRESSES","size","message","remove","delete","removeAll","FaultTolerance","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p/src/transport-manager.js"],"sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = Object.assign(debug('libp2p:transports'), {\n  error: debug('libp2p:transports:err')\n})\n\nconst pSettle = require('p-settle')\nconst { codes } = require('./errors')\nconst errCode = require('err-code')\n\nconst { updateSelfPeerRecord } = require('./record/utils')\n\n/**\n * @typedef {import('multiaddr').Multiaddr} Multiaddr\n * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection\n * @typedef {import('libp2p-interfaces/src/transport/types').TransportFactory<any, any>} TransportFactory\n * @typedef {import('libp2p-interfaces/src/transport/types').Transport<any, any>} Transport\n *\n * @typedef {Object} TransportManagerProperties\n * @property {import('./')} libp2p\n * @property {import('./upgrader')} upgrader\n *\n * @typedef {Object} TransportManagerOptions\n * @property {number} [faultTolerance = FAULT_TOLERANCE.FATAL_ALL] - Address listen error tolerance.\n */\n\nclass TransportManager {\n  /**\n   * @class\n   * @param {TransportManagerProperties & TransportManagerOptions} options\n   */\n  constructor ({ libp2p, upgrader, faultTolerance = FAULT_TOLERANCE.FATAL_ALL }) {\n    this.libp2p = libp2p\n    this.upgrader = upgrader\n    /** @type {Map<string, Transport>} */\n    this._transports = new Map()\n    this._listeners = new Map()\n    this._listenerOptions = new Map()\n    this.faultTolerance = faultTolerance\n  }\n\n  /**\n   * Adds a `Transport` to the manager\n   *\n   * @param {string} key\n   * @param {TransportFactory} Transport\n   * @param {*} transportOptions - Additional options to pass to the transport\n   * @returns {void}\n   */\n  add (key, Transport, transportOptions = {}) {\n    log('adding %s', key)\n    if (!key) {\n      throw errCode(new Error(`Transport must have a valid key, was given '${key}'`), codes.ERR_INVALID_KEY)\n    }\n    if (this._transports.has(key)) {\n      throw errCode(new Error('There is already a transport with this key'), codes.ERR_DUPLICATE_TRANSPORT)\n    }\n\n    const transport = new Transport({\n      ...transportOptions,\n      libp2p: this.libp2p,\n      upgrader: this.upgrader\n    })\n\n    this._transports.set(key, transport)\n    this._listenerOptions.set(key, transportOptions.listenerOptions || {})\n    if (!this._listeners.has(key)) {\n      this._listeners.set(key, [])\n    }\n  }\n\n  /**\n   * Stops all listeners\n   *\n   * @async\n   */\n  async close () {\n    const tasks = []\n    for (const [key, listeners] of this._listeners) {\n      log('closing listeners for %s', key)\n      while (listeners.length) {\n        const listener = listeners.pop()\n        listener.removeAllListeners('listening')\n        listener.removeAllListeners('close')\n        tasks.push(listener.close())\n      }\n    }\n\n    await Promise.all(tasks)\n    log('all listeners closed')\n    for (const key of this._listeners.keys()) {\n      this._listeners.set(key, [])\n    }\n  }\n\n  /**\n   * Dials the given Multiaddr over it's supported transport\n   *\n   * @param {Multiaddr} ma\n   * @param {*} options\n   * @returns {Promise<Connection>}\n   */\n  async dial (ma, options) {\n    const transport = this.transportForMultiaddr(ma)\n    if (!transport) {\n      throw errCode(new Error(`No transport available for address ${String(ma)}`), codes.ERR_TRANSPORT_UNAVAILABLE)\n    }\n\n    try {\n      return await transport.dial(ma, options)\n    } catch (err) {\n      if (!err.code) err.code = codes.ERR_TRANSPORT_DIAL_FAILED\n      throw err\n    }\n  }\n\n  /**\n   * Returns all Multiaddr's the listeners are using\n   *\n   * @returns {Multiaddr[]}\n   */\n  getAddrs () {\n    /** @type {Multiaddr[]} */\n    let addrs = []\n    for (const listeners of this._listeners.values()) {\n      for (const listener of listeners) {\n        addrs = [...addrs, ...listener.getAddrs()]\n      }\n    }\n    return addrs\n  }\n\n  /**\n   * Returns all the transports instances.\n   *\n   * @returns {IterableIterator<Transport>}\n   */\n  getTransports () {\n    return this._transports.values()\n  }\n\n  /**\n   * Finds a transport that matches the given Multiaddr\n   *\n   * @param {Multiaddr} ma\n   * @returns {Transport|null}\n   */\n  transportForMultiaddr (ma) {\n    for (const transport of this._transports.values()) {\n      const addrs = transport.filter([ma])\n      if (addrs.length) return transport\n    }\n    return null\n  }\n\n  /**\n   * Starts listeners for each listen Multiaddr.\n   *\n   * @async\n   * @param {Multiaddr[]} addrs - addresses to attempt to listen on\n   */\n  async listen (addrs) {\n    if (!addrs || addrs.length === 0) {\n      log('no addresses were provided for listening, this node is dial only')\n      return\n    }\n\n    const couldNotListen = []\n    for (const [key, transport] of this._transports.entries()) {\n      const supportedAddrs = transport.filter(addrs)\n      const tasks = []\n\n      // For each supported multiaddr, create a listener\n      for (const addr of supportedAddrs) {\n        log('creating listener for %s on %s', key, addr)\n        const listener = transport.createListener(this._listenerOptions.get(key))\n        this._listeners.get(key).push(listener)\n\n        // Track listen/close events\n        listener.on('listening', () => updateSelfPeerRecord(this.libp2p))\n        listener.on('close', () => updateSelfPeerRecord(this.libp2p))\n\n        // We need to attempt to listen on everything\n        tasks.push(listener.listen(addr))\n      }\n\n      // Keep track of transports we had no addresses for\n      if (tasks.length === 0) {\n        couldNotListen.push(key)\n        continue\n      }\n\n      const results = await pSettle(tasks)\n      // If we are listening on at least 1 address, succeed.\n      // TODO: we should look at adding a retry (`p-retry`) here to better support\n      // listening on remote addresses as they may be offline. We could then potentially\n      // just wait for any (`p-any`) listener to succeed on each transport before returning\n      const isListening = results.find(r => r.isFulfilled === true)\n      if (!isListening && this.faultTolerance !== FAULT_TOLERANCE.NO_FATAL) {\n        throw errCode(new Error(`Transport (${key}) could not listen on any available address`), codes.ERR_NO_VALID_ADDRESSES)\n      }\n    }\n\n    // If no transports were able to listen, throw an error. This likely\n    // means we were given addresses we do not have transports for\n    if (couldNotListen.length === this._transports.size) {\n      const message = `no valid addresses were provided for transports [${couldNotListen}]`\n      if (this.faultTolerance === FAULT_TOLERANCE.FATAL_ALL) {\n        throw errCode(new Error(message), codes.ERR_NO_VALID_ADDRESSES)\n      }\n      log(`libp2p in dial mode only: ${message}`)\n    }\n  }\n\n  /**\n   * Removes the given transport from the manager.\n   * If a transport has any running listeners, they will be closed.\n   *\n   * @async\n   * @param {string} key\n   */\n  async remove (key) {\n    log('removing %s', key)\n    if (this._listeners.has(key)) {\n      // Close any running listeners\n      for (const listener of this._listeners.get(key)) {\n        listener.removeAllListeners('listening')\n        listener.removeAllListeners('close')\n        await listener.close()\n      }\n    }\n\n    this._transports.delete(key)\n    this._listeners.delete(key)\n  }\n\n  /**\n   * Removes all transports from the manager.\n   * If any listeners are running, they will be closed.\n   *\n   * @async\n   */\n  async removeAll () {\n    const tasks = []\n    for (const key of this._transports.keys()) {\n      tasks.push(this.remove(key))\n    }\n\n    await Promise.all(tasks)\n  }\n}\n\n/**\n * Enum Transport Manager Fault Tolerance values.\n * FATAL_ALL should be used for failing in any listen circumstance.\n * NO_FATAL should be used for not failing when not listening.\n *\n * @readonly\n * @enum {number}\n */\nconst FAULT_TOLERANCE = {\n  FATAL_ALL: 0,\n  NO_FATAL: 1\n}\n\nTransportManager.FaultTolerance = FAULT_TOLERANCE\n\nmodule.exports = TransportManager\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}