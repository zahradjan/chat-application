{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _objectSpread = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _awaitAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _wrapAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nvar PeerId = require('peer-id');\n/** @type {{success:true, time:0, text: ''}} */\n\n\nvar basePacket = {\n  success: true,\n  time: 0,\n  text: ''\n};\n\nvar withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('../types').NetworkService} config.network\n */\n\n\nmodule.exports = function (_ref) {\n  var network = _ref.network;\n\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"ping\"]}\n   */\n  function ping(_x) {\n    return _ping.apply(this, arguments);\n  }\n\n  function _ping() {\n    _ping = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(peerId) {\n      var options,\n          _yield$_awaitAsyncGen,\n          libp2p,\n          peer,\n          storedPeer,\n          id,\n          remotePeer,\n          packetCount,\n          totalTime,\n          i,\n          time,\n          average,\n          _args = arguments;\n\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _context.next = 3;\n              return _awaitAsyncGenerator(network.use());\n\n            case 3:\n              _yield$_awaitAsyncGen = _context.sent;\n              libp2p = _yield$_awaitAsyncGen.libp2p;\n              options.count = options.count || 10;\n              peer = PeerId.createFromB58String(peerId);\n              storedPeer = libp2p.peerStore.get(peer);\n              id = storedPeer && storedPeer.id;\n\n              if (id) {\n                _context.next = 16;\n                break;\n              }\n\n              _context.next = 12;\n              return _objectSpread(_objectSpread({}, basePacket), {}, {\n                text: \"Looking up peer \".concat(peerId)\n              });\n\n            case 12:\n              _context.next = 14;\n              return _awaitAsyncGenerator(libp2p.peerRouting.findPeer(peer));\n\n            case 14:\n              remotePeer = _context.sent;\n              id = remotePeer && remotePeer.id;\n\n            case 16:\n              if (id) {\n                _context.next = 18;\n                break;\n              }\n\n              throw new Error('Peer was not found');\n\n            case 18:\n              _context.next = 20;\n              return _objectSpread(_objectSpread({}, basePacket), {}, {\n                text: \"PING \".concat(id.toB58String())\n              });\n\n            case 20:\n              packetCount = 0;\n              totalTime = 0;\n              i = 0;\n\n            case 23:\n              if (!(i < options.count)) {\n                _context.next = 41;\n                break;\n              }\n\n              _context.prev = 24;\n              _context.next = 27;\n              return _awaitAsyncGenerator(libp2p.ping(id));\n\n            case 27:\n              time = _context.sent;\n              totalTime += time;\n              packetCount++;\n              _context.next = 32;\n              return _objectSpread(_objectSpread({}, basePacket), {}, {\n                time: time\n              });\n\n            case 32:\n              _context.next = 38;\n              break;\n\n            case 34:\n              _context.prev = 34;\n              _context.t0 = _context[\"catch\"](24);\n              _context.next = 38;\n              return _objectSpread(_objectSpread({}, basePacket), {}, {\n                success: false,\n                text: _context.t0.toString()\n              });\n\n            case 38:\n              i++;\n              _context.next = 23;\n              break;\n\n            case 41:\n              if (!packetCount) {\n                _context.next = 45;\n                break;\n              }\n\n              average = totalTime / packetCount;\n              _context.next = 45;\n              return _objectSpread(_objectSpread({}, basePacket), {}, {\n                text: \"Average latency: \".concat(average, \"ms\")\n              });\n\n            case 45:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[24, 34]]);\n    }));\n    return _ping.apply(this, arguments);\n  }\n\n  return withTimeoutOption(ping);\n};\n/**\n * @typedef {Pong|PingFailure|StatusUpdate} Packet\n * Note that not all ping response objects are \"pongs\".\n * A \"pong\" message can be identified by a truthy success property and an empty\n * text property. Other ping responses are failures or status updates.\n *\n * @typedef {Object} Pong\n * @property {true} success\n * @property {number} time\n * @property {''} text\n *\n * @typedef {Object} PingFailure\n * @property {false} success\n * @property {number} time\n * @property {string} text\n *\n * @typedef {Object} StatusUpdate\n * @property {true} success\n * @property {0} time\n * @property {string} text\n *\n * @typedef {PingSettings & AbortOptions} PingOptions\n *\n * @typedef {Object} PingSettings\n * @property {number} [count=10] - The number of ping messages to send\n *\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */","map":{"version":3,"names":["PeerId","require","basePacket","success","time","text","withTimeoutOption","module","exports","network","ping","peerId","options","use","libp2p","count","peer","createFromB58String","storedPeer","peerStore","get","id","peerRouting","findPeer","remotePeer","Error","toB58String","packetCount","totalTime","i","toString","average"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/ping.js"],"sourcesContent":["'use strict'\n\nconst PeerId = require('peer-id')\n/** @type {{success:true, time:0, text: ''}} */\nconst basePacket = { success: true, time: 0, text: '' }\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @param {Object} config\n * @param {import('../types').NetworkService} config.network\n */\nmodule.exports = ({ network }) => {\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"ping\"]}\n   */\n  async function * ping (peerId, options = {}) {\n    const { libp2p } = await network.use()\n    options.count = options.count || 10\n\n    const peer = PeerId.createFromB58String(peerId)\n\n    const storedPeer = libp2p.peerStore.get(peer)\n    let id = storedPeer && storedPeer.id\n\n    if (!id) {\n      yield { ...basePacket, text: `Looking up peer ${peerId}` }\n      const remotePeer = await libp2p.peerRouting.findPeer(peer)\n\n      id = remotePeer && remotePeer.id\n    }\n\n    if (!id) {\n      throw new Error('Peer was not found')\n    }\n\n    yield { ...basePacket, text: `PING ${id.toB58String()}` }\n\n    let packetCount = 0\n    let totalTime = 0\n\n    for (let i = 0; i < options.count; i++) {\n      try {\n        const time = await libp2p.ping(id)\n        totalTime += time\n        packetCount++\n        yield { ...basePacket, time }\n      } catch (err) {\n        yield { ...basePacket, success: false, text: err.toString() }\n      }\n    }\n\n    if (packetCount) {\n      const average = totalTime / packetCount\n      yield { ...basePacket, text: `Average latency: ${average}ms` }\n    }\n  }\n\n  return withTimeoutOption(ping)\n}\n\n/**\n * @typedef {Pong|PingFailure|StatusUpdate} Packet\n * Note that not all ping response objects are \"pongs\".\n * A \"pong\" message can be identified by a truthy success property and an empty\n * text property. Other ping responses are failures or status updates.\n *\n * @typedef {Object} Pong\n * @property {true} success\n * @property {number} time\n * @property {''} text\n *\n * @typedef {Object} PingFailure\n * @property {false} success\n * @property {number} time\n * @property {string} text\n *\n * @typedef {Object} StatusUpdate\n * @property {true} success\n * @property {0} time\n * @property {string} text\n *\n * @typedef {PingSettings & AbortOptions} PingOptions\n *\n * @typedef {Object} PingSettings\n * @property {number} [count=10] - The number of ping messages to send\n *\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}