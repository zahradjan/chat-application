{"ast":null,"code":"'use strict';\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('libp2p/src/keychain')} config.keychain\n */\n\n\nmodule.exports = _ref => {\n  let {\n    keychain\n  } = _ref;\n\n  /**\n   * @type {import('ipfs-core-types/src/key').API[\"rename\"]}\n   */\n  const rename = async (oldName, newName) => {\n    const key = await keychain.renameKey(oldName, newName);\n    return {\n      was: oldName,\n      now: key.name,\n      id: key.id,\n      overwrite: false\n    };\n  };\n\n  return withTimeoutOption(rename);\n};","map":{"version":3,"names":["withTimeoutOption","require","module","exports","keychain","rename","oldName","newName","key","renameKey","was","now","name","id","overwrite"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/key/rename.js"],"sourcesContent":["'use strict'\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @param {Object} config\n * @param {import('libp2p/src/keychain')} config.keychain\n */\nmodule.exports = ({ keychain }) => {\n  /**\n   * @type {import('ipfs-core-types/src/key').API[\"rename\"]}\n   */\n  const rename = async (oldName, newName) => {\n    const key = await keychain.renameKey(oldName, newName)\n\n    return {\n      was: oldName,\n      now: key.name,\n      id: key.id,\n      overwrite: false\n    }\n  }\n\n  return withTimeoutOption(rename)\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,yCAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,QAAkB;EAAA,IAAjB;IAAEC;EAAF,CAAiB;;EACjC;AACF;AACA;EACE,MAAMC,MAAM,GAAG,OAAOC,OAAP,EAAgBC,OAAhB,KAA4B;IACzC,MAAMC,GAAG,GAAG,MAAMJ,QAAQ,CAACK,SAAT,CAAmBH,OAAnB,EAA4BC,OAA5B,CAAlB;IAEA,OAAO;MACLG,GAAG,EAAEJ,OADA;MAELK,GAAG,EAAEH,GAAG,CAACI,IAFJ;MAGLC,EAAE,EAAEL,GAAG,CAACK,EAHH;MAILC,SAAS,EAAE;IAJN,CAAP;EAMD,CATD;;EAWA,OAAOd,iBAAiB,CAACK,MAAD,CAAxB;AACD,CAhBD"},"metadata":{},"sourceType":"script"}