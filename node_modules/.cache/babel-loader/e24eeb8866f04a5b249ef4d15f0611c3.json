{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _inherits = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar _require = require('./utils'),\n    difference = _require.difference;\n\nvar EventEmitter = require('events');\n\nvar DEFAULT_OPTIONS = {\n  start: true,\n  pollInterval: 1000\n};\n\nvar IpfsPubsubPeerMonitor = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(IpfsPubsubPeerMonitor, _EventEmitter);\n\n  var _super = _createSuper(IpfsPubsubPeerMonitor);\n\n  function IpfsPubsubPeerMonitor(ipfsPubsub, topic, options) {\n    var _this;\n\n    _classCallCheck(this, IpfsPubsubPeerMonitor);\n\n    _this = _super.call(this);\n    _this._pubsub = ipfsPubsub;\n    _this._topic = topic;\n    _this._options = Object.assign({}, DEFAULT_OPTIONS, options);\n    _this._peers = [];\n    _this._interval = null;\n    if (_this._options.start) _this.start();\n    return _this;\n  }\n\n  _createClass(IpfsPubsubPeerMonitor, [{\n    key: \"started\",\n    get: function get() {\n      return this._interval !== null;\n    },\n    set: function set(val) {\n      throw new Error(\"'started' is read-only\");\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      if (this._interval) this.stop();\n      this._interval = setInterval(this._pollPeers.bind(this), this._options.pollInterval);\n\n      this._pollPeers();\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      clearInterval(this._interval);\n      this._interval = null;\n      this.removeAllListeners('error');\n      this.removeAllListeners('join');\n      this.removeAllListeners('leave');\n    }\n  }, {\n    key: \"getPeers\",\n    value: function () {\n      var _getPeers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this._pubsub.peers(this._topic);\n\n              case 2:\n                this._peers = _context.sent;\n                return _context.abrupt(\"return\", this._peers.slice());\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getPeers() {\n        return _getPeers.apply(this, arguments);\n      }\n\n      return getPeers;\n    }()\n  }, {\n    key: \"hasPeer\",\n    value: function hasPeer(peer) {\n      return this._peers.includes(peer);\n    }\n  }, {\n    key: \"_pollPeers\",\n    value: function () {\n      var _pollPeers2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var peers;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return this._pubsub.peers(this._topic);\n\n              case 3:\n                peers = _context2.sent;\n\n                IpfsPubsubPeerMonitor._emitJoinsAndLeaves(new Set(this._peers), new Set(peers), this);\n\n                this._peers = peers;\n                _context2.next = 12;\n                break;\n\n              case 8:\n                _context2.prev = 8;\n                _context2.t0 = _context2[\"catch\"](0);\n                clearInterval(this._interval);\n                this.emit('error', _context2.t0);\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 8]]);\n      }));\n\n      function _pollPeers() {\n        return _pollPeers2.apply(this, arguments);\n      }\n\n      return _pollPeers;\n    }()\n  }], [{\n    key: \"_emitJoinsAndLeaves\",\n    value: function _emitJoinsAndLeaves(oldValues, newValues, events) {\n      var emitJoin = function emitJoin(addedPeer) {\n        return events.emit('join', addedPeer);\n      };\n\n      var emitLeave = function emitLeave(removedPeer) {\n        return events.emit('leave', removedPeer);\n      };\n\n      difference(newValues, oldValues).forEach(emitJoin);\n      difference(oldValues, newValues).forEach(emitLeave);\n    }\n  }]);\n\n  return IpfsPubsubPeerMonitor;\n}(EventEmitter);\n\nmodule.exports = IpfsPubsubPeerMonitor;","map":{"version":3,"names":["require","difference","EventEmitter","DEFAULT_OPTIONS","start","pollInterval","IpfsPubsubPeerMonitor","ipfsPubsub","topic","options","_pubsub","_topic","_options","Object","assign","_peers","_interval","val","Error","stop","setInterval","_pollPeers","bind","clearInterval","removeAllListeners","peers","slice","peer","includes","_emitJoinsAndLeaves","Set","emit","oldValues","newValues","events","emitJoin","addedPeer","emitLeave","removedPeer","forEach","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-pubsub-peer-monitor/src/ipfs-pubsub-peer-monitor.js"],"sourcesContent":["'use strict'\n\nconst { difference} = require('./utils')\nconst EventEmitter = require('events')\n\nconst DEFAULT_OPTIONS = {\n  start: true,\n  pollInterval: 1000,\n}\n\nclass IpfsPubsubPeerMonitor extends EventEmitter {\n  constructor (ipfsPubsub, topic, options) {\n    super()\n    this._pubsub = ipfsPubsub\n    this._topic = topic\n    this._options = Object.assign({}, DEFAULT_OPTIONS, options)\n    this._peers = []\n    this._interval = null\n\n    if (this._options.start)\n      this.start()\n  }\n\n  get started () { return this._interval !== null }\n  set started (val) { throw new Error(\"'started' is read-only\") }\n\n  start () {\n    if (this._interval)\n      this.stop()\n\n    this._interval = setInterval(\n      this._pollPeers.bind(this),\n      this._options.pollInterval\n    )\n    this._pollPeers()\n  }\n\n  stop () {\n    clearInterval(this._interval)\n    this._interval = null\n    this.removeAllListeners('error')\n    this.removeAllListeners('join')\n    this.removeAllListeners('leave')\n  }\n\n  async getPeers () {\n    this._peers = await this._pubsub.peers(this._topic)\n    return this._peers.slice()\n  }\n\n  hasPeer (peer) {\n    return this._peers.includes(peer)\n  }\n\n  async _pollPeers () {\n    try {\n      const peers = await this._pubsub.peers(this._topic)\n      IpfsPubsubPeerMonitor._emitJoinsAndLeaves(new Set(this._peers), new Set(peers), this)\n      this._peers = peers\n    } catch (err) {\n      clearInterval(this._interval)\n      this.emit('error', err)\n    }\n  }\n\n  static _emitJoinsAndLeaves (oldValues, newValues, events) {\n    const emitJoin = addedPeer => events.emit('join', addedPeer)\n    const emitLeave = removedPeer => events.emit('leave', removedPeer)\n    difference(newValues, oldValues).forEach(emitJoin)\n    difference(oldValues, newValues).forEach(emitLeave)\n  }\n}\n\nmodule.exports = IpfsPubsubPeerMonitor\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}