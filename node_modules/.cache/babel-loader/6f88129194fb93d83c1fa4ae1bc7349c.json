{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MessageCache = void 0;\n\nconst utils_1 = require(\"./utils\");\n\nclass MessageCache {\n  /**\n   * @param {Number} gossip\n   * @param {Number} history\n   * @param {msgIdFn} msgIdFn a function that returns message id from a message\n   *\n   * @constructor\n   */\n  constructor(gossip, history, msgIdFn) {\n    /**\n     * @type {Map<string, RPC.Message>}\n     */\n    this.msgs = new Map();\n    this.peertx = new Map();\n    /**\n     * @type {Array<Array<CacheEntry>>}\n     */\n\n    this.history = [];\n\n    for (let i = 0; i < history; i++) {\n      this.history[i] = [];\n    }\n    /**\n     * @type {Number}\n     */\n\n\n    this.gossip = gossip;\n    /**\n     * @type {Function}\n     */\n\n    this.msgIdFn = msgIdFn;\n  }\n  /**\n   * Adds a message to the current window and the cache\n   *\n   * @param {RPC.Message} msg\n   * @returns {Promise<void>}\n   */\n\n\n  put(msg) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const msgID = yield this.getMsgId(msg);\n      const msgIdStr = utils_1.messageIdToString(msgID);\n      this.msgs.set(msgIdStr, msg);\n      this.history[0].push({\n        msgID,\n        topics: msg.topicIDs\n      });\n    });\n  }\n  /**\n   * Get message id of message.\n   * @param {RPC.Message} msg\n   * @returns {Promise<Uint8Array> | Uint8Array}\n   */\n\n\n  getMsgId(msg) {\n    return this.msgIdFn(msg);\n  }\n  /**\n   * Retrieves a message from the cache by its ID, if it is still present\n   *\n   * @param {Uint8Array} msgID\n   * @returns {Message}\n   */\n\n\n  get(msgID) {\n    return this.msgs.get(utils_1.messageIdToString(msgID));\n  }\n  /**\n   * Retrieves a message from the cache by its ID, if it is present\n   * for a specific peer.\n   * Returns the message and the number of times the peer has requested the message\n   *\n   * @param {string} msgID\n   * @param {string} p\n   * @returns {[InMessage | undefined, number]}\n   */\n\n\n  getForPeer(msgID, p) {\n    const msgIdStr = utils_1.messageIdToString(msgID);\n    const msg = this.msgs.get(msgIdStr);\n\n    if (!msg) {\n      return [undefined, 0];\n    }\n\n    let peertx = this.peertx.get(msgIdStr);\n\n    if (!peertx) {\n      peertx = new Map();\n      this.peertx.set(msgIdStr, peertx);\n    }\n\n    const count = (peertx.get(p) || 0) + 1;\n    peertx.set(p, count);\n    return [msg, count];\n  }\n  /**\n   * Retrieves a list of message IDs for a given topic\n   *\n   * @param {String} topic\n   *\n   * @returns {Array<Uint8Array>}\n   */\n\n\n  getGossipIDs(topic) {\n    const msgIDs = [];\n\n    for (let i = 0; i < this.gossip; i++) {\n      this.history[i].forEach(entry => {\n        for (const t of entry.topics) {\n          if (t === topic) {\n            msgIDs.push(entry.msgID);\n            break;\n          }\n        }\n      });\n    }\n\n    return msgIDs;\n  }\n  /**\n   * Shifts the current window, discarding messages older than this.history.length of the cache\n   *\n   * @returns {void}\n   */\n\n\n  shift() {\n    const last = this.history[this.history.length - 1];\n    last.forEach(entry => {\n      const msgIdStr = utils_1.messageIdToString(entry.msgID);\n      this.msgs.delete(msgIdStr);\n      this.peertx.delete(msgIdStr);\n    });\n    this.history.pop();\n    this.history.unshift([]);\n  }\n\n}\n\nexports.MessageCache = MessageCache;","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","MessageCache","utils_1","require","constructor","gossip","history","msgIdFn","msgs","Map","peertx","i","put","msg","msgID","getMsgId","msgIdStr","messageIdToString","set","push","topics","topicIDs","get","getForPeer","p","undefined","count","getGossipIDs","topic","msgIDs","forEach","entry","t","shift","last","length","delete","pop","unshift"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-gossipsub/src/message-cache.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MessageCache = void 0;\nconst utils_1 = require(\"./utils\");\nclass MessageCache {\n    /**\n     * @param {Number} gossip\n     * @param {Number} history\n     * @param {msgIdFn} msgIdFn a function that returns message id from a message\n     *\n     * @constructor\n     */\n    constructor(gossip, history, msgIdFn) {\n        /**\n         * @type {Map<string, RPC.Message>}\n         */\n        this.msgs = new Map();\n        this.peertx = new Map();\n        /**\n         * @type {Array<Array<CacheEntry>>}\n         */\n        this.history = [];\n        for (let i = 0; i < history; i++) {\n            this.history[i] = [];\n        }\n        /**\n         * @type {Number}\n         */\n        this.gossip = gossip;\n        /**\n         * @type {Function}\n         */\n        this.msgIdFn = msgIdFn;\n    }\n    /**\n     * Adds a message to the current window and the cache\n     *\n     * @param {RPC.Message} msg\n     * @returns {Promise<void>}\n     */\n    put(msg) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const msgID = yield this.getMsgId(msg);\n            const msgIdStr = utils_1.messageIdToString(msgID);\n            this.msgs.set(msgIdStr, msg);\n            this.history[0].push({ msgID, topics: msg.topicIDs });\n        });\n    }\n    /**\n     * Get message id of message.\n     * @param {RPC.Message} msg\n     * @returns {Promise<Uint8Array> | Uint8Array}\n     */\n    getMsgId(msg) {\n        return this.msgIdFn(msg);\n    }\n    /**\n     * Retrieves a message from the cache by its ID, if it is still present\n     *\n     * @param {Uint8Array} msgID\n     * @returns {Message}\n     */\n    get(msgID) {\n        return this.msgs.get(utils_1.messageIdToString(msgID));\n    }\n    /**\n     * Retrieves a message from the cache by its ID, if it is present\n     * for a specific peer.\n     * Returns the message and the number of times the peer has requested the message\n     *\n     * @param {string} msgID\n     * @param {string} p\n     * @returns {[InMessage | undefined, number]}\n     */\n    getForPeer(msgID, p) {\n        const msgIdStr = utils_1.messageIdToString(msgID);\n        const msg = this.msgs.get(msgIdStr);\n        if (!msg) {\n            return [undefined, 0];\n        }\n        let peertx = this.peertx.get(msgIdStr);\n        if (!peertx) {\n            peertx = new Map();\n            this.peertx.set(msgIdStr, peertx);\n        }\n        const count = (peertx.get(p) || 0) + 1;\n        peertx.set(p, count);\n        return [msg, count];\n    }\n    /**\n     * Retrieves a list of message IDs for a given topic\n     *\n     * @param {String} topic\n     *\n     * @returns {Array<Uint8Array>}\n     */\n    getGossipIDs(topic) {\n        const msgIDs = [];\n        for (let i = 0; i < this.gossip; i++) {\n            this.history[i].forEach((entry) => {\n                for (const t of entry.topics) {\n                    if (t === topic) {\n                        msgIDs.push(entry.msgID);\n                        break;\n                    }\n                }\n            });\n        }\n        return msgIDs;\n    }\n    /**\n     * Shifts the current window, discarding messages older than this.history.length of the cache\n     *\n     * @returns {void}\n     */\n    shift() {\n        const last = this.history[this.history.length - 1];\n        last.forEach((entry) => {\n            const msgIdStr = utils_1.messageIdToString(entry.msgID);\n            this.msgs.delete(msgIdStr);\n            this.peertx.delete(msgIdStr);\n        });\n        this.history.pop();\n        this.history.unshift([]);\n    }\n}\nexports.MessageCache = MessageCache;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}