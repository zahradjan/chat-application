{"ast":null,"code":"'use strict';\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('../').PeerData} PeerData\n */\n\n/**\n * A list of unique peers.\n */\n\nclass PeerList {\n  constructor() {\n    /** @type {PeerData[]} */\n    this.list = [];\n  }\n  /**\n   * Add a new peer. Returns `true` if it was a new one\n   *\n   * @param {PeerData} peerData\n   */\n\n\n  push(peerData) {\n    if (!this.has(peerData.id)) {\n      this.list.push(peerData);\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Check if this PeerData is already in here.\n   *\n   * @param {PeerId} peerId\n   */\n\n\n  has(peerId) {\n    const match = this.list.find(i => i.id.equals(peerId));\n    return Boolean(match);\n  }\n  /**\n   * Get the list as an array.\n   */\n\n\n  toArray() {\n    return this.list.slice();\n  }\n  /**\n   * Remove the last element\n   */\n\n\n  pop() {\n    return this.list.pop();\n  }\n  /**\n   * The length of the list\n   */\n\n\n  get length() {\n    return this.list.length;\n  }\n\n}\n\nmodule.exports = PeerList;","map":{"version":3,"names":["PeerList","constructor","list","push","peerData","has","id","peerId","match","find","i","equals","Boolean","toArray","slice","pop","length","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-kad-dht/src/peer-list/index.js"],"sourcesContent":["'use strict'\n\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('../').PeerData} PeerData\n */\n\n/**\n * A list of unique peers.\n */\nclass PeerList {\n  constructor () {\n    /** @type {PeerData[]} */\n    this.list = []\n  }\n\n  /**\n   * Add a new peer. Returns `true` if it was a new one\n   *\n   * @param {PeerData} peerData\n   */\n  push (peerData) {\n    if (!this.has(peerData.id)) {\n      this.list.push(peerData)\n\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Check if this PeerData is already in here.\n   *\n   * @param {PeerId} peerId\n   */\n  has (peerId) {\n    const match = this.list.find((i) => i.id.equals(peerId))\n    return Boolean(match)\n  }\n\n  /**\n   * Get the list as an array.\n   */\n  toArray () {\n    return this.list.slice()\n  }\n\n  /**\n   * Remove the last element\n   */\n  pop () {\n    return this.list.pop()\n  }\n\n  /**\n   * The length of the list\n   */\n  get length () {\n    return this.list.length\n  }\n}\n\nmodule.exports = PeerList\n"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AACA,MAAMA,QAAN,CAAe;EACbC,WAAW,GAAI;IACb;IACA,KAAKC,IAAL,GAAY,EAAZ;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEC,IAAI,CAAEC,QAAF,EAAY;IACd,IAAI,CAAC,KAAKC,GAAL,CAASD,QAAQ,CAACE,EAAlB,CAAL,EAA4B;MAC1B,KAAKJ,IAAL,CAAUC,IAAV,CAAeC,QAAf;MAEA,OAAO,IAAP;IACD;;IAED,OAAO,KAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEC,GAAG,CAAEE,MAAF,EAAU;IACX,MAAMC,KAAK,GAAG,KAAKN,IAAL,CAAUO,IAAV,CAAgBC,CAAD,IAAOA,CAAC,CAACJ,EAAF,CAAKK,MAAL,CAAYJ,MAAZ,CAAtB,CAAd;IACA,OAAOK,OAAO,CAACJ,KAAD,CAAd;EACD;EAED;AACF;AACA;;;EACEK,OAAO,GAAI;IACT,OAAO,KAAKX,IAAL,CAAUY,KAAV,EAAP;EACD;EAED;AACF;AACA;;;EACEC,GAAG,GAAI;IACL,OAAO,KAAKb,IAAL,CAAUa,GAAV,EAAP;EACD;EAED;AACF;AACA;;;EACY,IAANC,MAAM,GAAI;IACZ,OAAO,KAAKd,IAAL,CAAUc,MAAjB;EACD;;AAlDY;;AAqDfC,MAAM,CAACC,OAAP,GAAiBlB,QAAjB"},"metadata":{},"sourceType":"script"}