{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _require = require('./record'),\n    PBRecord = _require.Record;\n\nvar utils = require('../utils');\n/**\n * @typedef {{ key: Uint8Array, value: Uint8Array, timeReceived: string }} ProtobufRecord\n */\n\n\nvar Record = /*#__PURE__*/function () {\n  /**\n   * @param {Uint8Array} [key]\n   * @param {Uint8Array} [value]\n   * @param {Date} [timeReceived]\n   */\n  function Record(key, value, timeReceived) {\n    _classCallCheck(this, Record);\n\n    if (!(key instanceof Uint8Array)) {\n      throw new Error('key must be a Uint8Array');\n    }\n\n    if (!(value instanceof Uint8Array)) {\n      throw new Error('value must be a Uint8Array');\n    }\n\n    this.key = key;\n    this.value = value;\n    this.timeReceived = timeReceived;\n  }\n\n  _createClass(Record, [{\n    key: \"serialize\",\n    value: function serialize() {\n      return PBRecord.encode(this.prepareSerialize()).finish();\n    }\n    /**\n     * Return the object format ready to be given to the protobuf library.\n     */\n\n  }, {\n    key: \"prepareSerialize\",\n    value: function prepareSerialize() {\n      return {\n        key: this.key,\n        value: this.value,\n        timeReceived: this.timeReceived && utils.toRFC3339(this.timeReceived)\n      };\n    }\n    /**\n     * Decode a protobuf encoded record.\n     *\n     * @param {Uint8Array} raw\n     */\n\n  }], [{\n    key: \"deserialize\",\n    value: function deserialize(raw) {\n      var message = PBRecord.decode(raw);\n      return Record.fromDeserialized(PBRecord.toObject(message, {\n        defaults: false,\n        arrays: true,\n        longs: Number,\n        objects: false\n      }));\n    }\n    /**\n     * Create a record from the raw object returned from the protobuf library.\n     *\n     * @param {{ [k: string]: any }} obj\n     */\n\n  }, {\n    key: \"fromDeserialized\",\n    value: function fromDeserialized(obj) {\n      var recvtime;\n\n      if (obj.timeReceived) {\n        recvtime = utils.parseRFC3339(obj.timeReceived);\n      }\n\n      var rec = new Record(obj.key, obj.value, recvtime);\n      return rec;\n    }\n  }]);\n\n  return Record;\n}();\n\nmodule.exports = Record;","map":{"version":3,"names":["require","PBRecord","Record","utils","key","value","timeReceived","Uint8Array","Error","encode","prepareSerialize","finish","toRFC3339","raw","message","decode","fromDeserialized","toObject","defaults","arrays","longs","Number","objects","obj","recvtime","parseRFC3339","rec","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-record/src/record/index.js"],"sourcesContent":["'use strict'\n\nconst {\n  Record: PBRecord\n} = require('./record')\nconst utils = require('../utils')\n\n/**\n * @typedef {{ key: Uint8Array, value: Uint8Array, timeReceived: string }} ProtobufRecord\n */\n\nclass Record {\n  /**\n   * @param {Uint8Array} [key]\n   * @param {Uint8Array} [value]\n   * @param {Date} [timeReceived]\n   */\n  constructor (key, value, timeReceived) {\n    if (!(key instanceof Uint8Array)) {\n      throw new Error('key must be a Uint8Array')\n    }\n\n    if (!(value instanceof Uint8Array)) {\n      throw new Error('value must be a Uint8Array')\n    }\n\n    this.key = key\n    this.value = value\n    this.timeReceived = timeReceived\n  }\n\n  serialize () {\n    return PBRecord.encode(this.prepareSerialize()).finish()\n  }\n\n  /**\n   * Return the object format ready to be given to the protobuf library.\n   */\n  prepareSerialize () {\n    return {\n      key: this.key,\n      value: this.value,\n      timeReceived: this.timeReceived && utils.toRFC3339(this.timeReceived)\n    }\n  }\n\n  /**\n   * Decode a protobuf encoded record.\n   *\n   * @param {Uint8Array} raw\n   */\n  static deserialize (raw) {\n    const message = PBRecord.decode(raw)\n    return Record.fromDeserialized(PBRecord.toObject(message, {\n      defaults: false,\n      arrays: true,\n      longs: Number,\n      objects: false\n    }))\n  }\n\n  /**\n   * Create a record from the raw object returned from the protobuf library.\n   *\n   * @param {{ [k: string]: any }} obj\n   */\n  static fromDeserialized (obj) {\n    let recvtime\n    if (obj.timeReceived) {\n      recvtime = utils.parseRFC3339(obj.timeReceived)\n    }\n\n    const rec = new Record(\n      obj.key, obj.value, recvtime\n    )\n\n    return rec\n  }\n}\n\nmodule.exports = Record\n"],"mappings":"AAAA;;;;;;AAEA,eAEIA,OAAO,CAAC,UAAD,CAFX;AAAA,IACUC,QADV,YACEC,MADF;;AAGA,IAAMC,KAAK,GAAGH,OAAO,CAAC,UAAD,CAArB;AAEA;AACA;AACA;;;IAEME,M;EACJ;AACF;AACA;AACA;AACA;EACE,gBAAaE,GAAb,EAAkBC,KAAlB,EAAyBC,YAAzB,EAAuC;IAAA;;IACrC,IAAI,EAAEF,GAAG,YAAYG,UAAjB,CAAJ,EAAkC;MAChC,MAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;IACD;;IAED,IAAI,EAAEH,KAAK,YAAYE,UAAnB,CAAJ,EAAoC;MAClC,MAAM,IAAIC,KAAJ,CAAU,4BAAV,CAAN;IACD;;IAED,KAAKJ,GAAL,GAAWA,GAAX;IACA,KAAKC,KAAL,GAAaA,KAAb;IACA,KAAKC,YAAL,GAAoBA,YAApB;EACD;;;;WAED,qBAAa;MACX,OAAOL,QAAQ,CAACQ,MAAT,CAAgB,KAAKC,gBAAL,EAAhB,EAAyCC,MAAzC,EAAP;IACD;IAED;AACF;AACA;;;;WACE,4BAAoB;MAClB,OAAO;QACLP,GAAG,EAAE,KAAKA,GADL;QAELC,KAAK,EAAE,KAAKA,KAFP;QAGLC,YAAY,EAAE,KAAKA,YAAL,IAAqBH,KAAK,CAACS,SAAN,CAAgB,KAAKN,YAArB;MAH9B,CAAP;IAKD;IAED;AACF;AACA;AACA;AACA;;;;WACE,qBAAoBO,GAApB,EAAyB;MACvB,IAAMC,OAAO,GAAGb,QAAQ,CAACc,MAAT,CAAgBF,GAAhB,CAAhB;MACA,OAAOX,MAAM,CAACc,gBAAP,CAAwBf,QAAQ,CAACgB,QAAT,CAAkBH,OAAlB,EAA2B;QACxDI,QAAQ,EAAE,KAD8C;QAExDC,MAAM,EAAE,IAFgD;QAGxDC,KAAK,EAAEC,MAHiD;QAIxDC,OAAO,EAAE;MAJ+C,CAA3B,CAAxB,CAAP;IAMD;IAED;AACF;AACA;AACA;AACA;;;;WACE,0BAAyBC,GAAzB,EAA8B;MAC5B,IAAIC,QAAJ;;MACA,IAAID,GAAG,CAACjB,YAAR,EAAsB;QACpBkB,QAAQ,GAAGrB,KAAK,CAACsB,YAAN,CAAmBF,GAAG,CAACjB,YAAvB,CAAX;MACD;;MAED,IAAMoB,GAAG,GAAG,IAAIxB,MAAJ,CACVqB,GAAG,CAACnB,GADM,EACDmB,GAAG,CAAClB,KADH,EACUmB,QADV,CAAZ;MAIA,OAAOE,GAAP;IACD;;;;;;AAGHC,MAAM,CAACC,OAAP,GAAiB1B,MAAjB"},"metadata":{},"sourceType":"script"}