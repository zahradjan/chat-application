{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst log = Object.assign(debug('libp2p:peer-store:proto-book'), {\n  error: debug('libp2p:peer-store:proto-book:err')\n});\n\nconst errcode = require('err-code');\n\nconst PeerId = require('peer-id');\n\nconst Book = require('./book');\n\nconst {\n  codes: {\n    ERR_INVALID_PARAMETERS\n  }\n} = require('../errors');\n/**\n * @typedef {import('./')} PeerStore\n */\n\n/**\n * @extends {Book}\n *\n * @fires ProtoBook#change:protocols\n */\n\n\nclass ProtoBook extends Book {\n  /**\n   * The ProtoBook is responsible for keeping the known supported\n   * protocols of a peer.\n   *\n   * @class\n   * @param {PeerStore} peerStore\n   */\n  constructor(peerStore) {\n    /**\n     * PeerStore Event emitter, used by the ProtoBook to emit:\n     * \"change:protocols\" - emitted when the known protocols of a peer change.\n     */\n    super({\n      peerStore,\n      eventName: 'change:protocols',\n      eventProperty: 'protocols',\n      eventTransformer: data => Array.from(data)\n    });\n    /**\n     * Map known peers to their known protocols.\n     *\n     * @type {Map<string, Set<string>>}\n     */\n\n    this.data = new Map();\n  }\n  /**\n   * Set known protocols of a provided peer.\n   * If the peer was not known before, it will be added.\n   *\n   * @override\n   * @param {PeerId} peerId\n   * @param {string[]} protocols\n   * @returns {ProtoBook}\n   */\n\n\n  set(peerId, protocols) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data');\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n    }\n\n    if (!protocols) {\n      log.error('protocols must be provided to store data');\n      throw errcode(new Error('protocols must be provided'), ERR_INVALID_PARAMETERS);\n    }\n\n    const id = peerId.toB58String();\n    const recSet = this.data.get(id);\n    const newSet = new Set(protocols);\n    /**\n     * @param {Set<string>} a\n     * @param {Set<string>} b\n     */\n\n    const isSetEqual = (a, b) => a.size === b.size && [...a].every(value => b.has(value)); // Already knows the peer and the recorded protocols are the same?\n    // If yes, no changes needed!\n\n\n    if (recSet && isSetEqual(recSet, newSet)) {\n      log(`the protocols provided to store are equal to the already stored for ${id}`);\n      return this;\n    }\n\n    this._setData(peerId, newSet);\n\n    log(`stored provided protocols for ${id}`);\n    return this;\n  }\n  /**\n   * Adds known protocols of a provided peer.\n   * If the peer was not known before, it will be added.\n   *\n   * @param {PeerId} peerId\n   * @param {string[]} protocols\n   * @returns {ProtoBook}\n   */\n\n\n  add(peerId, protocols) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data');\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n    }\n\n    if (!protocols) {\n      log.error('protocols must be provided to store data');\n      throw errcode(new Error('protocols must be provided'), ERR_INVALID_PARAMETERS);\n    }\n\n    const id = peerId.toB58String();\n    const recSet = this.data.get(id) || new Set();\n    const newSet = new Set([...recSet, ...protocols]); // Set Union\n    // Any new protocol added?\n\n    if (recSet.size === newSet.size) {\n      log(`the protocols provided to store are already stored for ${id}`);\n      return this;\n    }\n\n    this._setData(peerId, newSet);\n\n    log(`added provided protocols for ${id}`);\n    return this;\n  }\n  /**\n   * Removes known protocols of a provided peer.\n   * If the protocols did not exist before, nothing will be done.\n   *\n   * @param {PeerId} peerId\n   * @param {string[]} protocols\n   * @returns {ProtoBook}\n   */\n\n\n  remove(peerId, protocols) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data');\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n    }\n\n    if (!protocols) {\n      log.error('protocols must be provided to store data');\n      throw errcode(new Error('protocols must be provided'), ERR_INVALID_PARAMETERS);\n    }\n\n    const id = peerId.toB58String();\n    const recSet = this.data.get(id);\n\n    if (recSet) {\n      const newSet = new Set([...recSet].filter(p => !protocols.includes(p))); // Any protocol removed?\n\n      if (recSet.size === newSet.size) {\n        return this;\n      }\n\n      this._setData(peerId, newSet);\n\n      log(`removed provided protocols for ${id}`);\n    }\n\n    return this;\n  }\n\n}\n\nmodule.exports = ProtoBook;","map":{"version":3,"names":["debug","require","log","Object","assign","error","errcode","PeerId","Book","codes","ERR_INVALID_PARAMETERS","ProtoBook","constructor","peerStore","eventName","eventProperty","eventTransformer","data","Array","from","Map","set","peerId","protocols","isPeerId","Error","id","toB58String","recSet","get","newSet","Set","isSetEqual","a","b","size","every","value","has","_setData","add","remove","filter","p","includes","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p/src/peer-store/proto-book.js"],"sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = Object.assign(debug('libp2p:peer-store:proto-book'), {\n  error: debug('libp2p:peer-store:proto-book:err')\n})\nconst errcode = require('err-code')\nconst PeerId = require('peer-id')\n\nconst Book = require('./book')\n\nconst {\n  codes: { ERR_INVALID_PARAMETERS }\n} = require('../errors')\n\n/**\n * @typedef {import('./')} PeerStore\n */\n\n/**\n * @extends {Book}\n *\n * @fires ProtoBook#change:protocols\n */\nclass ProtoBook extends Book {\n  /**\n   * The ProtoBook is responsible for keeping the known supported\n   * protocols of a peer.\n   *\n   * @class\n   * @param {PeerStore} peerStore\n   */\n  constructor (peerStore) {\n    /**\n     * PeerStore Event emitter, used by the ProtoBook to emit:\n     * \"change:protocols\" - emitted when the known protocols of a peer change.\n     */\n    super({\n      peerStore,\n      eventName: 'change:protocols',\n      eventProperty: 'protocols',\n      eventTransformer: (data) => Array.from(data)\n    })\n\n    /**\n     * Map known peers to their known protocols.\n     *\n     * @type {Map<string, Set<string>>}\n     */\n    this.data = new Map()\n  }\n\n  /**\n   * Set known protocols of a provided peer.\n   * If the peer was not known before, it will be added.\n   *\n   * @override\n   * @param {PeerId} peerId\n   * @param {string[]} protocols\n   * @returns {ProtoBook}\n   */\n  set (peerId, protocols) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data')\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    if (!protocols) {\n      log.error('protocols must be provided to store data')\n      throw errcode(new Error('protocols must be provided'), ERR_INVALID_PARAMETERS)\n    }\n\n    const id = peerId.toB58String()\n    const recSet = this.data.get(id)\n    const newSet = new Set(protocols)\n\n    /**\n     * @param {Set<string>} a\n     * @param {Set<string>} b\n     */\n    const isSetEqual = (a, b) => a.size === b.size && [...a].every(value => b.has(value))\n\n    // Already knows the peer and the recorded protocols are the same?\n    // If yes, no changes needed!\n    if (recSet && isSetEqual(recSet, newSet)) {\n      log(`the protocols provided to store are equal to the already stored for ${id}`)\n      return this\n    }\n\n    this._setData(peerId, newSet)\n    log(`stored provided protocols for ${id}`)\n\n    return this\n  }\n\n  /**\n   * Adds known protocols of a provided peer.\n   * If the peer was not known before, it will be added.\n   *\n   * @param {PeerId} peerId\n   * @param {string[]} protocols\n   * @returns {ProtoBook}\n   */\n  add (peerId, protocols) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data')\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    if (!protocols) {\n      log.error('protocols must be provided to store data')\n      throw errcode(new Error('protocols must be provided'), ERR_INVALID_PARAMETERS)\n    }\n\n    const id = peerId.toB58String()\n    const recSet = this.data.get(id) || new Set()\n    const newSet = new Set([...recSet, ...protocols]) // Set Union\n\n    // Any new protocol added?\n    if (recSet.size === newSet.size) {\n      log(`the protocols provided to store are already stored for ${id}`)\n      return this\n    }\n\n    this._setData(peerId, newSet)\n    log(`added provided protocols for ${id}`)\n\n    return this\n  }\n\n  /**\n   * Removes known protocols of a provided peer.\n   * If the protocols did not exist before, nothing will be done.\n   *\n   * @param {PeerId} peerId\n   * @param {string[]} protocols\n   * @returns {ProtoBook}\n   */\n  remove (peerId, protocols) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data')\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    if (!protocols) {\n      log.error('protocols must be provided to store data')\n      throw errcode(new Error('protocols must be provided'), ERR_INVALID_PARAMETERS)\n    }\n\n    const id = peerId.toB58String()\n    const recSet = this.data.get(id)\n\n    if (recSet) {\n      const newSet = new Set([\n        ...recSet\n      ].filter((p) => !protocols.includes(p)))\n\n      // Any protocol removed?\n      if (recSet.size === newSet.size) {\n        return this\n      }\n\n      this._setData(peerId, newSet)\n      log(`removed provided protocols for ${id}`)\n    }\n\n    return this\n  }\n}\n\nmodule.exports = ProtoBook\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}