{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _awaitAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _wrapAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nvar _asyncIterator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar _require = require('ipfs-unixfs-exporter'),\n    exporter = _require.exporter;\n\nvar errCode = require('err-code');\n\nvar _require2 = require('../utils'),\n    normalizeCidPath = _require2.normalizeCidPath,\n    mapFile = _require2.mapFile;\n\nvar withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nvar _require3 = require('multiformats/cid'),\n    CID = _require3.CID;\n/**\n * @typedef {Object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../types').Preload} preload\n *\n * @param {Context} context\n */\n\n\nmodule.exports = function (_ref) {\n  var repo = _ref.repo,\n      preload = _ref.preload;\n\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"ls\"]}\n   */\n  function ls(_x) {\n    return _ls.apply(this, arguments);\n  }\n\n  function _ls() {\n    _ls = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(ipfsPath) {\n      var options,\n          legacyPath,\n          pathComponents,\n          ipfsPathOrCid,\n          file,\n          _iteratorAbruptCompletion,\n          _didIteratorError,\n          _iteratorError,\n          _iterator,\n          _step,\n          child,\n          _args = arguments;\n\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              legacyPath = normalizeCidPath(ipfsPath);\n              pathComponents = legacyPath.split('/');\n\n              if (options.preload !== false) {\n                preload(CID.parse(pathComponents[0]));\n              }\n\n              ipfsPathOrCid = CID.asCID(legacyPath) || legacyPath;\n              _context.next = 7;\n              return _awaitAsyncGenerator(exporter(ipfsPathOrCid, repo.blocks, options));\n\n            case 7:\n              file = _context.sent;\n\n              if (!(file.type === 'file')) {\n                _context.next = 12;\n                break;\n              }\n\n              _context.next = 11;\n              return mapFile(file);\n\n            case 11:\n              return _context.abrupt(\"return\");\n\n            case 12:\n              if (!(file.type === 'directory')) {\n                _context.next = 43;\n                break;\n              }\n\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 15;\n              _iterator = _asyncIterator(file.content());\n\n            case 17:\n              _context.next = 19;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 19:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 26;\n                break;\n              }\n\n              child = _step.value;\n              _context.next = 23;\n              return mapFile(child);\n\n            case 23:\n              _iteratorAbruptCompletion = false;\n              _context.next = 17;\n              break;\n\n            case 26:\n              _context.next = 32;\n              break;\n\n            case 28:\n              _context.prev = 28;\n              _context.t0 = _context[\"catch\"](15);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n\n            case 32:\n              _context.prev = 32;\n              _context.prev = 33;\n\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 37;\n                break;\n              }\n\n              _context.next = 37;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 37:\n              _context.prev = 37;\n\n              if (!_didIteratorError) {\n                _context.next = 40;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 40:\n              return _context.finish(37);\n\n            case 41:\n              return _context.finish(32);\n\n            case 42:\n              return _context.abrupt(\"return\");\n\n            case 43:\n              throw errCode(new Error(\"Unknown UnixFS type \".concat(file.type)), 'ERR_UNKNOWN_UNIXFS_TYPE');\n\n            case 44:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[15, 28, 32, 42], [33,, 37, 41]]);\n    }));\n    return _ls.apply(this, arguments);\n  }\n\n  return withTimeoutOption(ls);\n};","map":{"version":3,"names":["require","exporter","errCode","normalizeCidPath","mapFile","withTimeoutOption","CID","module","exports","repo","preload","ls","ipfsPath","options","legacyPath","pathComponents","split","parse","ipfsPathOrCid","asCID","blocks","file","type","content","child","Error"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/ls.js"],"sourcesContent":["'use strict'\n\nconst { exporter } = require('ipfs-unixfs-exporter')\nconst errCode = require('err-code')\nconst { normalizeCidPath, mapFile } = require('../utils')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst { CID } = require('multiformats/cid')\n\n/**\n * @typedef {Object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../types').Preload} preload\n *\n * @param {Context} context\n */\nmodule.exports = function ({ repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"ls\"]}\n   */\n  async function * ls (ipfsPath, options = {}) {\n    const legacyPath = normalizeCidPath(ipfsPath)\n    const pathComponents = legacyPath.split('/')\n\n    if (options.preload !== false) {\n      preload(CID.parse(pathComponents[0]))\n    }\n\n    const ipfsPathOrCid = CID.asCID(legacyPath) || legacyPath\n    const file = await exporter(ipfsPathOrCid, repo.blocks, options)\n\n    if (file.type === 'file') {\n      yield mapFile(file)\n      return\n    }\n\n    if (file.type === 'directory') {\n      for await (const child of file.content()) {\n        yield mapFile(child)\n      }\n\n      return\n    }\n\n    throw errCode(new Error(`Unknown UnixFS type ${file.type}`), 'ERR_UNKNOWN_UNIXFS_TYPE')\n  }\n\n  return withTimeoutOption(ls)\n}\n"],"mappings":"AAAA;;;;;;;;;;AAEA,eAAqBA,OAAO,CAAC,sBAAD,CAA5B;AAAA,IAAQC,QAAR,YAAQA,QAAR;;AACA,IAAMC,OAAO,GAAGF,OAAO,CAAC,UAAD,CAAvB;;AACA,gBAAsCA,OAAO,CAAC,UAAD,CAA7C;AAAA,IAAQG,gBAAR,aAAQA,gBAAR;AAAA,IAA0BC,OAA1B,aAA0BA,OAA1B;;AACA,IAAMC,iBAAiB,GAAGL,OAAO,CAAC,yCAAD,CAAjC;;AACA,gBAAgBA,OAAO,CAAC,kBAAD,CAAvB;AAAA,IAAQM,GAAR,aAAQA,GAAR;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,gBAA6B;EAAA,IAAjBC,IAAiB,QAAjBA,IAAiB;EAAA,IAAXC,OAAW,QAAXA,OAAW;;EAC5C;AACF;AACA;EAH8C,SAI3BC,EAJ2B;IAAA;EAAA;;EAAA;IAAA,mEAI5C,iBAAqBC,QAArB;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;;MAAA;QAAA;UAAA;YAAA;cAA+BC,OAA/B,2DAAyC,EAAzC;cACQC,UADR,GACqBX,gBAAgB,CAACS,QAAD,CADrC;cAEQG,cAFR,GAEyBD,UAAU,CAACE,KAAX,CAAiB,GAAjB,CAFzB;;cAIE,IAAIH,OAAO,CAACH,OAAR,KAAoB,KAAxB,EAA+B;gBAC7BA,OAAO,CAACJ,GAAG,CAACW,KAAJ,CAAUF,cAAc,CAAC,CAAD,CAAxB,CAAD,CAAP;cACD;;cAEKG,aARR,GAQwBZ,GAAG,CAACa,KAAJ,CAAUL,UAAV,KAAyBA,UARjD;cAAA;cAAA,4BASqBb,QAAQ,CAACiB,aAAD,EAAgBT,IAAI,CAACW,MAArB,EAA6BP,OAA7B,CAT7B;;YAAA;cASQQ,IATR;;cAAA,MAWMA,IAAI,CAACC,IAAL,KAAc,MAXpB;gBAAA;gBAAA;cAAA;;cAAA;cAYI,OAAMlB,OAAO,CAACiB,IAAD,CAAb;;YAZJ;cAAA;;YAAA;cAAA,MAgBMA,IAAI,CAACC,IAAL,KAAc,WAhBpB;gBAAA;gBAAA;cAAA;;cAAA;cAAA;cAAA;cAAA,2BAiB8BD,IAAI,CAACE,OAAL,EAjB9B;;YAAA;cAAA;cAAA;;YAAA;cAAA;gBAAA;gBAAA;cAAA;;cAiBqBC,KAjBrB;cAAA;cAkBM,OAAMpB,OAAO,CAACoB,KAAD,CAAb;;YAlBN;cAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;;cAAA;gBAAA;gBAAA;cAAA;;cAAA;cAAA;;YAAA;cAAA;;cAAA;gBAAA;gBAAA;cAAA;;cAAA;;YAAA;cAAA;;YAAA;cAAA;;YAAA;cAAA;;YAAA;cAAA,MAwBQtB,OAAO,CAAC,IAAIuB,KAAJ,+BAAiCJ,IAAI,CAACC,IAAtC,EAAD,EAAgD,yBAAhD,CAxBf;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAJ4C;IAAA;EAAA;;EA+B5C,OAAOjB,iBAAiB,CAACM,EAAD,CAAxB;AACD,CAhCD"},"metadata":{},"sourceType":"script"}