{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n * @param {import('ipfs-core-utils/src/multihashes')} config.hashers\n * @param {import('../../types').Preload} config.preload\n */\n\n\nmodule.exports = function (_ref) {\n  var repo = _ref.repo,\n      codecs = _ref.codecs,\n      hashers = _ref.hashers,\n      preload = _ref.preload;\n\n  /**\n   * @type {import('ipfs-core-types/src/dag').API[\"put\"]}\n   */\n  function put(_x) {\n    return _put.apply(this, arguments);\n  }\n\n  function _put() {\n    _put = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(dagNode) {\n      var options,\n          release,\n          codecName,\n          cidVersion,\n          codec,\n          hasher,\n          buf,\n          hash,\n          cid,\n          _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n\n              if (!options.pin) {\n                _context.next = 7;\n                break;\n              }\n\n              _context.next = 4;\n              return repo.gcLock.readLock();\n\n            case 4:\n              _context.t0 = _context.sent;\n              _context.next = 8;\n              break;\n\n            case 7:\n              _context.t0 = null;\n\n            case 8:\n              release = _context.t0;\n              _context.prev = 9;\n              codecName = options.format || 'dag-cbor';\n              cidVersion = options.version != null ? options.version : codecName === 'dag-pb' ? 0 : 1;\n              _context.next = 14;\n              return codecs.getCodec(codecName);\n\n            case 14:\n              codec = _context.sent;\n\n              if (codec) {\n                _context.next = 17;\n                break;\n              }\n\n              throw new Error(\"Unknown codec \".concat(options.format, \", please configure additional BlockCodecs for this IPFS instance\"));\n\n            case 17:\n              _context.next = 19;\n              return hashers.getHasher(options.hashAlg || 'sha2-256');\n\n            case 19:\n              hasher = _context.sent;\n\n              if (hasher) {\n                _context.next = 22;\n                break;\n              }\n\n              throw new Error(\"Unknown hash algorithm \".concat(options.hashAlg, \", please configure additional MultihashHashers for this IPFS instance\"));\n\n            case 22:\n              buf = codec.encode(dagNode);\n              _context.next = 25;\n              return hasher.digest(buf);\n\n            case 25:\n              hash = _context.sent;\n              cid = CID.create(cidVersion, codec.code, hash);\n              _context.next = 29;\n              return repo.blocks.put(cid, buf, {\n                signal: options.signal\n              });\n\n            case 29:\n              if (!options.pin) {\n                _context.next = 32;\n                break;\n              }\n\n              _context.next = 32;\n              return repo.pins.pinRecursively(cid);\n\n            case 32:\n              if (options.preload !== false) {\n                preload(cid);\n              }\n\n              return _context.abrupt(\"return\", cid);\n\n            case 34:\n              _context.prev = 34;\n\n              if (release) {\n                release();\n              }\n\n              return _context.finish(34);\n\n            case 37:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[9,, 34, 37]]);\n    }));\n    return _put.apply(this, arguments);\n  }\n\n  return withTimeoutOption(put);\n};","map":{"version":3,"names":["require","CID","withTimeoutOption","module","exports","repo","codecs","hashers","preload","put","dagNode","options","pin","gcLock","readLock","release","codecName","format","cidVersion","version","getCodec","codec","Error","getHasher","hashAlg","hasher","buf","encode","digest","hash","cid","create","code","blocks","signal","pins","pinRecursively"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/dag/put.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n * @param {import('ipfs-core-utils/src/multihashes')} config.hashers\n * @param {import('../../types').Preload} config.preload\n */\nmodule.exports = ({ repo, codecs, hashers, preload }) => {\n  /**\n   * @type {import('ipfs-core-types/src/dag').API[\"put\"]}\n   */\n  async function put (dagNode, options = {}) {\n    const release = options.pin ? await repo.gcLock.readLock() : null\n\n    try {\n      const codecName = options.format || 'dag-cbor'\n      const cidVersion = options.version != null ? options.version : (codecName === 'dag-pb' ? 0 : 1)\n      const codec = await codecs.getCodec(codecName)\n\n      if (!codec) {\n        throw new Error(`Unknown codec ${options.format}, please configure additional BlockCodecs for this IPFS instance`)\n      }\n\n      const hasher = await hashers.getHasher(options.hashAlg || 'sha2-256')\n\n      if (!hasher) {\n        throw new Error(`Unknown hash algorithm ${options.hashAlg}, please configure additional MultihashHashers for this IPFS instance`)\n      }\n\n      const buf = codec.encode(dagNode)\n      const hash = await hasher.digest(buf)\n      const cid = CID.create(cidVersion, codec.code, hash)\n\n      await repo.blocks.put(cid, buf, {\n        signal: options.signal\n      })\n\n      if (options.pin) {\n        await repo.pins.pinRecursively(cid)\n      }\n\n      if (options.preload !== false) {\n        preload(cid)\n      }\n\n      return cid\n    } finally {\n      if (release) {\n        release()\n      }\n    }\n  }\n\n  return withTimeoutOption(put)\n}\n"],"mappings":"AAAA;;;;;;AAEA,eAAgBA,OAAO,CAAC,kBAAD,CAAvB;AAAA,IAAQC,GAAR,YAAQA,GAAR;;AACA,IAAMC,iBAAiB,GAAGF,OAAO,CAAC,yCAAD,CAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAG,MAAM,CAACC,OAAP,GAAiB,gBAAwC;EAAA,IAArCC,IAAqC,QAArCA,IAAqC;EAAA,IAA/BC,MAA+B,QAA/BA,MAA+B;EAAA,IAAvBC,OAAuB,QAAvBA,OAAuB;EAAA,IAAdC,OAAc,QAAdA,OAAc;;EACvD;AACF;AACA;EAHyD,SAIxCC,GAJwC;IAAA;EAAA;;EAAA;IAAA,kEAIvD,iBAAoBC,OAApB;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAA6BC,OAA7B,2DAAuC,EAAvC;;cAAA,KACkBA,OAAO,CAACC,GAD1B;gBAAA;gBAAA;cAAA;;cAAA;cAAA,OACsCP,IAAI,CAACQ,MAAL,CAAYC,QAAZ,EADtC;;YAAA;cAAA;cAAA;cAAA;;YAAA;cAAA,cAC+D,IAD/D;;YAAA;cACQC,OADR;cAAA;cAIUC,SAJV,GAIsBL,OAAO,CAACM,MAAR,IAAkB,UAJxC;cAKUC,UALV,GAKuBP,OAAO,CAACQ,OAAR,IAAmB,IAAnB,GAA0BR,OAAO,CAACQ,OAAlC,GAA6CH,SAAS,KAAK,QAAd,GAAyB,CAAzB,GAA6B,CALjG;cAAA;cAAA,OAMwBV,MAAM,CAACc,QAAP,CAAgBJ,SAAhB,CANxB;;YAAA;cAMUK,KANV;;cAAA,IAQSA,KART;gBAAA;gBAAA;cAAA;;cAAA,MASY,IAAIC,KAAJ,yBAA2BX,OAAO,CAACM,MAAnC,sEATZ;;YAAA;cAAA;cAAA,OAYyBV,OAAO,CAACgB,SAAR,CAAkBZ,OAAO,CAACa,OAAR,IAAmB,UAArC,CAZzB;;YAAA;cAYUC,MAZV;;cAAA,IAcSA,MAdT;gBAAA;gBAAA;cAAA;;cAAA,MAeY,IAAIH,KAAJ,kCAAoCX,OAAO,CAACa,OAA5C,2EAfZ;;YAAA;cAkBUE,GAlBV,GAkBgBL,KAAK,CAACM,MAAN,CAAajB,OAAb,CAlBhB;cAAA;cAAA,OAmBuBe,MAAM,CAACG,MAAP,CAAcF,GAAd,CAnBvB;;YAAA;cAmBUG,IAnBV;cAoBUC,GApBV,GAoBgB7B,GAAG,CAAC8B,MAAJ,CAAWb,UAAX,EAAuBG,KAAK,CAACW,IAA7B,EAAmCH,IAAnC,CApBhB;cAAA;cAAA,OAsBUxB,IAAI,CAAC4B,MAAL,CAAYxB,GAAZ,CAAgBqB,GAAhB,EAAqBJ,GAArB,EAA0B;gBAC9BQ,MAAM,EAAEvB,OAAO,CAACuB;cADc,CAA1B,CAtBV;;YAAA;cAAA,KA0BQvB,OAAO,CAACC,GA1BhB;gBAAA;gBAAA;cAAA;;cAAA;cAAA,OA2BYP,IAAI,CAAC8B,IAAL,CAAUC,cAAV,CAAyBN,GAAzB,CA3BZ;;YAAA;cA8BI,IAAInB,OAAO,CAACH,OAAR,KAAoB,KAAxB,EAA+B;gBAC7BA,OAAO,CAACsB,GAAD,CAAP;cACD;;cAhCL,iCAkCWA,GAlCX;;YAAA;cAAA;;cAoCI,IAAIf,OAAJ,EAAa;gBACXA,OAAO;cACR;;cAtCL;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAJuD;IAAA;EAAA;;EA8CvD,OAAOb,iBAAiB,CAACO,GAAD,CAAxB;AACD,CA/CD"},"metadata":{},"sourceType":"script"}