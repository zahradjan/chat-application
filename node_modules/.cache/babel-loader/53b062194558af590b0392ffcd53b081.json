{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _awaitAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _wrapAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nvar _asyncIterator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar _require = require('ipfs-core-utils/src/pins/normalise-input'),\n    normaliseInput = _require.normaliseInput;\n\nvar _require2 = require('../../utils'),\n    resolvePath = _require2.resolvePath;\n\nvar withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nvar _require3 = require('ipfs-repo'),\n    PinTypes = _require3.PinTypes;\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n */\n\n\nmodule.exports = function (_ref) {\n  var repo = _ref.repo,\n      codecs = _ref.codecs;\n\n  /**\n   * @type {import('ipfs-core-types/src/pin').API[\"rmAll\"]}\n   */\n  function rmAll(_x) {\n    return _rmAll.apply(this, arguments);\n  }\n\n  function _rmAll() {\n    _rmAll = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(source) {\n      var _options,\n          release,\n          _iteratorAbruptCompletion,\n          _didIteratorError,\n          _iteratorError,\n          _iterator,\n          _step,\n          _step$value,\n          path,\n          recursive,\n          _yield$_awaitAsyncGen,\n          cid,\n          _yield$_awaitAsyncGen2,\n          pinned,\n          reason,\n          _args = arguments;\n\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _context.next = 3;\n              return _awaitAsyncGenerator(repo.gcLock.readLock());\n\n            case 3:\n              release = _context.sent;\n              _context.prev = 4;\n              // verify that each hash can be unpinned\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 7;\n              _iterator = _asyncIterator(normaliseInput(source));\n\n            case 9:\n              _context.next = 11;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 11:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 43;\n                break;\n              }\n\n              _step$value = _step.value, path = _step$value.path, recursive = _step$value.recursive;\n              _context.next = 15;\n              return _awaitAsyncGenerator(resolvePath(repo, codecs, path));\n\n            case 15:\n              _yield$_awaitAsyncGen = _context.sent;\n              cid = _yield$_awaitAsyncGen.cid;\n              _context.next = 19;\n              return _awaitAsyncGenerator(repo.pins.isPinnedWithType(cid, PinTypes.all));\n\n            case 19:\n              _yield$_awaitAsyncGen2 = _context.sent;\n              pinned = _yield$_awaitAsyncGen2.pinned;\n              reason = _yield$_awaitAsyncGen2.reason;\n\n              if (pinned) {\n                _context.next = 24;\n                break;\n              }\n\n              throw new Error(\"\".concat(cid, \" is not pinned\"));\n\n            case 24:\n              _context.t0 = reason;\n              _context.next = _context.t0 === PinTypes.recursive ? 27 : _context.t0 === PinTypes.direct ? 34 : 39;\n              break;\n\n            case 27:\n              if (recursive) {\n                _context.next = 29;\n                break;\n              }\n\n              throw new Error(\"\".concat(cid, \" is pinned recursively\"));\n\n            case 29:\n              _context.next = 31;\n              return _awaitAsyncGenerator(repo.pins.unpin(cid));\n\n            case 31:\n              _context.next = 33;\n              return cid;\n\n            case 33:\n              return _context.abrupt(\"break\", 40);\n\n            case 34:\n              _context.next = 36;\n              return _awaitAsyncGenerator(repo.pins.unpin(cid));\n\n            case 36:\n              _context.next = 38;\n              return cid;\n\n            case 38:\n              return _context.abrupt(\"break\", 40);\n\n            case 39:\n              throw new Error(\"\".concat(cid, \" is pinned indirectly under \").concat(reason));\n\n            case 40:\n              _iteratorAbruptCompletion = false;\n              _context.next = 9;\n              break;\n\n            case 43:\n              _context.next = 49;\n              break;\n\n            case 45:\n              _context.prev = 45;\n              _context.t1 = _context[\"catch\"](7);\n              _didIteratorError = true;\n              _iteratorError = _context.t1;\n\n            case 49:\n              _context.prev = 49;\n              _context.prev = 50;\n\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 54;\n                break;\n              }\n\n              _context.next = 54;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 54:\n              _context.prev = 54;\n\n              if (!_didIteratorError) {\n                _context.next = 57;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 57:\n              return _context.finish(54);\n\n            case 58:\n              return _context.finish(49);\n\n            case 59:\n              _context.prev = 59;\n              release();\n              return _context.finish(59);\n\n            case 62:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[4,, 59, 62], [7, 45, 49, 59], [50,, 54, 58]]);\n    }));\n    return _rmAll.apply(this, arguments);\n  }\n\n  return withTimeoutOption(rmAll);\n};","map":{"version":3,"names":["require","normaliseInput","resolvePath","withTimeoutOption","PinTypes","module","exports","repo","codecs","rmAll","source","_options","gcLock","readLock","release","path","recursive","cid","pins","isPinnedWithType","all","pinned","reason","Error","direct","unpin"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/pin/rm-all.js"],"sourcesContent":["'use strict'\n\nconst { normaliseInput } = require('ipfs-core-utils/src/pins/normalise-input')\nconst { resolvePath } = require('../../utils')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst { PinTypes } = require('ipfs-repo')\n\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n */\nmodule.exports = ({ repo, codecs }) => {\n  /**\n   * @type {import('ipfs-core-types/src/pin').API[\"rmAll\"]}\n   */\n  async function * rmAll (source, _options = {}) {\n    const release = await repo.gcLock.readLock()\n\n    try {\n      // verify that each hash can be unpinned\n      for await (const { path, recursive } of normaliseInput(source)) {\n        const { cid } = await resolvePath(repo, codecs, path)\n        const { pinned, reason } = await repo.pins.isPinnedWithType(cid, PinTypes.all)\n\n        if (!pinned) {\n          throw new Error(`${cid} is not pinned`)\n        }\n\n        switch (reason) {\n          case (PinTypes.recursive):\n            if (!recursive) {\n              throw new Error(`${cid} is pinned recursively`)\n            }\n\n            await repo.pins.unpin(cid)\n\n            yield cid\n\n            break\n          case (PinTypes.direct):\n            await repo.pins.unpin(cid)\n\n            yield cid\n\n            break\n          default:\n            throw new Error(`${cid} is pinned indirectly under ${reason}`)\n        }\n      }\n    } finally {\n      release()\n    }\n  }\n\n  return withTimeoutOption(rmAll)\n}\n"],"mappings":"AAAA;;;;;;;;;;AAEA,eAA2BA,OAAO,CAAC,0CAAD,CAAlC;AAAA,IAAQC,cAAR,YAAQA,cAAR;;AACA,gBAAwBD,OAAO,CAAC,aAAD,CAA/B;AAAA,IAAQE,WAAR,aAAQA,WAAR;;AACA,IAAMC,iBAAiB,GAAGH,OAAO,CAAC,yCAAD,CAAjC;;AACA,gBAAqBA,OAAO,CAAC,WAAD,CAA5B;AAAA,IAAQI,QAAR,aAAQA,QAAR;AAEA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,gBAAsB;EAAA,IAAnBC,IAAmB,QAAnBA,IAAmB;EAAA,IAAbC,MAAa,QAAbA,MAAa;;EACrC;AACF;AACA;EAHuC,SAIpBC,KAJoB;IAAA;EAAA;;EAAA;IAAA,sEAIrC,iBAAwBC,MAAxB;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;;MAAA;QAAA;UAAA;YAAA;cAAgCC,QAAhC,2DAA2C,EAA3C;cAAA;cAAA,4BACwBJ,IAAI,CAACK,MAAL,CAAYC,QAAZ,EADxB;;YAAA;cACQC,OADR;cAAA;cAII;cAJJ;cAAA;cAAA;cAAA,2BAK4Cb,cAAc,CAACS,MAAD,CAL1D;;YAAA;cAAA;cAAA;;YAAA;cAAA;gBAAA;gBAAA;cAAA;;cAAA,2BAKuBK,IALvB,eAKuBA,IALvB,EAK6BC,SAL7B,eAK6BA,SAL7B;cAAA;cAAA,4BAM4Bd,WAAW,CAACK,IAAD,EAAOC,MAAP,EAAeO,IAAf,CANvC;;YAAA;cAAA;cAMcE,GANd,yBAMcA,GANd;cAAA;cAAA,4BAOuCV,IAAI,CAACW,IAAL,CAAUC,gBAAV,CAA2BF,GAA3B,EAAgCb,QAAQ,CAACgB,GAAzC,CAPvC;;YAAA;cAAA;cAOcC,MAPd,0BAOcA,MAPd;cAOsBC,MAPtB,0BAOsBA,MAPtB;;cAAA,IASWD,MATX;gBAAA;gBAAA;cAAA;;cAAA,MAUc,IAAIE,KAAJ,WAAaN,GAAb,oBAVd;;YAAA;cAAA,cAacK,MAbd;cAAA,gCAcclB,QAAQ,CAACY,SAdvB,wBAwBcZ,QAAQ,CAACoB,MAxBvB;cAAA;;YAAA;cAAA,IAeeR,SAff;gBAAA;gBAAA;cAAA;;cAAA,MAgBkB,IAAIO,KAAJ,WAAaN,GAAb,4BAhBlB;;YAAA;cAAA;cAAA,4BAmBgBV,IAAI,CAACW,IAAL,CAAUO,KAAV,CAAgBR,GAAhB,CAnBhB;;YAAA;cAAA;cAqBU,OAAMA,GAAN;;YArBV;cAAA;;YAAA;cAAA;cAAA,4BAyBgBV,IAAI,CAACW,IAAL,CAAUO,KAAV,CAAgBR,GAAhB,CAzBhB;;YAAA;cAAA;cA2BU,OAAMA,GAAN;;YA3BV;cAAA;;YAAA;cAAA,MA+BgB,IAAIM,KAAJ,WAAaN,GAAb,yCAA+CK,MAA/C,EA/BhB;;YAAA;cAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;;cAAA;gBAAA;gBAAA;cAAA;;cAAA;cAAA;;YAAA;cAAA;;cAAA;gBAAA;gBAAA;cAAA;;cAAA;;YAAA;cAAA;;YAAA;cAAA;;YAAA;cAAA;cAmCIR,OAAO;cAnCX;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAJqC;IAAA;EAAA;;EA2CrC,OAAOX,iBAAiB,CAACM,KAAD,CAAxB;AACD,CA5CD"},"metadata":{},"sourceType":"script"}