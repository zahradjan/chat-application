{"ast":null,"code":"'use strict';\n\nvar nodeify = require('../nodeify');\n\nvar webcrypto = require('../webcrypto');\n\nvar randomBytes = require('../random-bytes');\n\nexports.utils = require('./rsa-utils');\n\nexports.generateKey = function (bits, callback) {\n  nodeify(webcrypto.subtle.generateKey({\n    name: 'RSASSA-PKCS1-v1_5',\n    modulusLength: bits,\n    publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n    hash: {\n      name: 'SHA-256'\n    }\n  }, true, ['sign', 'verify']).then(exportKey).then(function (keys) {\n    return {\n      privateKey: keys[0],\n      publicKey: keys[1]\n    };\n  }), callback);\n}; // Takes a jwk key\n\n\nexports.unmarshalPrivateKey = function (key, callback) {\n  var privateKey = webcrypto.subtle.importKey('jwk', key, {\n    name: 'RSASSA-PKCS1-v1_5',\n    hash: {\n      name: 'SHA-256'\n    }\n  }, true, ['sign']);\n  nodeify(Promise.all([privateKey, derivePublicFromPrivate(key)]).then(function (keys) {\n    return exportKey({\n      privateKey: keys[0],\n      publicKey: keys[1]\n    });\n  }).then(function (keys) {\n    return {\n      privateKey: keys[0],\n      publicKey: keys[1]\n    };\n  }), callback);\n};\n\nexports.getRandomValues = randomBytes;\n\nexports.hashAndSign = function (key, msg, callback) {\n  nodeify(webcrypto.subtle.importKey('jwk', key, {\n    name: 'RSASSA-PKCS1-v1_5',\n    hash: {\n      name: 'SHA-256'\n    }\n  }, false, ['sign']).then(function (privateKey) {\n    return webcrypto.subtle.sign({\n      name: 'RSASSA-PKCS1-v1_5'\n    }, privateKey, Uint8Array.from(msg));\n  }).then(function (sig) {\n    return Buffer.from(sig);\n  }), callback);\n};\n\nexports.hashAndVerify = function (key, sig, msg, callback) {\n  nodeify(webcrypto.subtle.importKey('jwk', key, {\n    name: 'RSASSA-PKCS1-v1_5',\n    hash: {\n      name: 'SHA-256'\n    }\n  }, false, ['verify']).then(function (publicKey) {\n    return webcrypto.subtle.verify({\n      name: 'RSASSA-PKCS1-v1_5'\n    }, publicKey, sig, msg);\n  }), callback);\n};\n\nfunction exportKey(pair) {\n  return Promise.all([webcrypto.subtle.exportKey('jwk', pair.privateKey), webcrypto.subtle.exportKey('jwk', pair.publicKey)]);\n}\n\nfunction derivePublicFromPrivate(jwKey) {\n  return webcrypto.subtle.importKey('jwk', {\n    kty: jwKey.kty,\n    n: jwKey.n,\n    e: jwKey.e\n  }, {\n    name: 'RSASSA-PKCS1-v1_5',\n    hash: {\n      name: 'SHA-256'\n    }\n  }, true, ['verify']);\n}\n/*\n\nRSA encryption/decryption for the browser with webcrypto workarround\n\"bloody dark magic. webcrypto's why.\"\n\nExplanation:\n  - Convert JWK to nodeForge\n  - Convert msg buffer to nodeForge buffer: ByteBuffer is a \"binary-string backed buffer\", so let's make our buffer a binary string\n  - Convert resulting nodeForge buffer to buffer: it returns a binary string, turn that into a uint8array(buffer)\n\n*/\n\n\nvar _require = require('./jwk2pem'),\n    jwk2pub = _require.jwk2pub,\n    jwk2priv = _require.jwk2priv;\n\nfunction convertKey(key, pub, msg, handle) {\n  var fkey = pub ? jwk2pub(key) : jwk2priv(key);\n  var fmsg = Buffer.from(msg).toString('binary');\n  var fomsg = handle(fmsg, fkey);\n  return Buffer.from(fomsg, 'binary');\n}\n\nexports.encrypt = function (key, msg) {\n  return convertKey(key, true, msg, function (msg, key) {\n    return key.encrypt(msg);\n  });\n};\n\nexports.decrypt = function (key, msg) {\n  return convertKey(key, false, msg, function (msg, key) {\n    return key.decrypt(msg);\n  });\n};","map":{"version":3,"names":["nodeify","require","webcrypto","randomBytes","exports","utils","generateKey","bits","callback","subtle","name","modulusLength","publicExponent","Uint8Array","hash","then","exportKey","keys","privateKey","publicKey","unmarshalPrivateKey","key","importKey","Promise","all","derivePublicFromPrivate","getRandomValues","hashAndSign","msg","sign","from","sig","Buffer","hashAndVerify","verify","pair","jwKey","kty","n","e","jwk2pub","jwk2priv","convertKey","pub","handle","fkey","fmsg","toString","fomsg","encrypt","decrypt"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/orbit-db-keystore/node_modules/libp2p-crypto/src/keys/rsa-browser.js"],"sourcesContent":["'use strict'\n\nconst nodeify = require('../nodeify')\nconst webcrypto = require('../webcrypto')\nconst randomBytes = require('../random-bytes')\n\nexports.utils = require('./rsa-utils')\n\nexports.generateKey = function (bits, callback) {\n  nodeify(webcrypto.subtle.generateKey(\n    {\n      name: 'RSASSA-PKCS1-v1_5',\n      modulusLength: bits,\n      publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n      hash: { name: 'SHA-256' }\n    },\n    true,\n    ['sign', 'verify']\n  )\n    .then(exportKey)\n    .then((keys) => ({\n      privateKey: keys[0],\n      publicKey: keys[1]\n    })), callback)\n}\n\n// Takes a jwk key\nexports.unmarshalPrivateKey = function (key, callback) {\n  const privateKey = webcrypto.subtle.importKey(\n    'jwk',\n    key,\n    {\n      name: 'RSASSA-PKCS1-v1_5',\n      hash: { name: 'SHA-256' }\n    },\n    true,\n    ['sign']\n  )\n\n  nodeify(Promise.all([\n    privateKey,\n    derivePublicFromPrivate(key)\n  ]).then((keys) => exportKey({\n    privateKey: keys[0],\n    publicKey: keys[1]\n  })).then((keys) => ({\n    privateKey: keys[0],\n    publicKey: keys[1]\n  })), callback)\n}\n\nexports.getRandomValues = randomBytes\n\nexports.hashAndSign = function (key, msg, callback) {\n  nodeify(webcrypto.subtle.importKey(\n    'jwk',\n    key,\n    {\n      name: 'RSASSA-PKCS1-v1_5',\n      hash: { name: 'SHA-256' }\n    },\n    false,\n    ['sign']\n  ).then((privateKey) => {\n    return webcrypto.subtle.sign(\n      { name: 'RSASSA-PKCS1-v1_5' },\n      privateKey,\n      Uint8Array.from(msg)\n    )\n  }).then((sig) => Buffer.from(sig)), callback)\n}\n\nexports.hashAndVerify = function (key, sig, msg, callback) {\n  nodeify(webcrypto.subtle.importKey(\n    'jwk',\n    key,\n    {\n      name: 'RSASSA-PKCS1-v1_5',\n      hash: { name: 'SHA-256' }\n    },\n    false,\n    ['verify']\n  ).then((publicKey) => {\n    return webcrypto.subtle.verify(\n      { name: 'RSASSA-PKCS1-v1_5' },\n      publicKey,\n      sig,\n      msg\n    )\n  }), callback)\n}\n\nfunction exportKey (pair) {\n  return Promise.all([\n    webcrypto.subtle.exportKey('jwk', pair.privateKey),\n    webcrypto.subtle.exportKey('jwk', pair.publicKey)\n  ])\n}\n\nfunction derivePublicFromPrivate (jwKey) {\n  return webcrypto.subtle.importKey(\n    'jwk',\n    {\n      kty: jwKey.kty,\n      n: jwKey.n,\n      e: jwKey.e\n    },\n    {\n      name: 'RSASSA-PKCS1-v1_5',\n      hash: { name: 'SHA-256' }\n    },\n    true,\n    ['verify']\n  )\n}\n\n/*\n\nRSA encryption/decryption for the browser with webcrypto workarround\n\"bloody dark magic. webcrypto's why.\"\n\nExplanation:\n  - Convert JWK to nodeForge\n  - Convert msg buffer to nodeForge buffer: ByteBuffer is a \"binary-string backed buffer\", so let's make our buffer a binary string\n  - Convert resulting nodeForge buffer to buffer: it returns a binary string, turn that into a uint8array(buffer)\n\n*/\n\nconst { jwk2pub, jwk2priv } = require('./jwk2pem')\n\nfunction convertKey (key, pub, msg, handle) {\n  const fkey = pub ? jwk2pub(key) : jwk2priv(key)\n  const fmsg = Buffer.from(msg).toString('binary')\n  const fomsg = handle(fmsg, fkey)\n  return Buffer.from(fomsg, 'binary')\n}\n\nexports.encrypt = function (key, msg) {\n  return convertKey(key, true, msg, (msg, key) => key.encrypt(msg))\n}\n\nexports.decrypt = function (key, msg) {\n  return convertKey(key, false, msg, (msg, key) => key.decrypt(msg))\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}