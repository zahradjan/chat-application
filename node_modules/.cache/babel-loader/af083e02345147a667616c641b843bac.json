{"ast":null,"code":"'use strict';\n/**\n * @template Key, Value\n * SortedMap is a Map whose iterator order can be defined by the user\n * @extends {Map<Key, Value>}\n */\n\nclass SortedMap extends Map {\n  /**\n   * @param {Array<[Key, Value]>} [entries]\n   * @param {(a:[Key, Value], b:[Key, Value]) => number} [cmp] - compares [k1, v1] to [k2, v2]\n   */\n  constructor(entries, cmp) {\n    super();\n    this._cmp = cmp || this._defaultSort;\n    /** @type {Key[]} */\n\n    this._keys = [];\n\n    for (const [k, v] of entries || []) {\n      this.set(k, v);\n    }\n  }\n  /**\n   * Call update to update the position of the key when it should change.\n   * For example if the compare function sorts by the priority field, and the\n   * priority changes, call update.\n   * Call indexOf() to get the index _before_ the change happens.\n   *\n   * @param {number} i - the index of entry whose position should be updated.\n   */\n\n\n  update(i) {\n    if (i < 0 || i >= this._keys.length) {\n      return;\n    }\n\n    const k = this._keys[i];\n\n    this._keys.splice(i, 1);\n\n    const newIdx = this._find(k);\n\n    this._keys.splice(newIdx, 0, k);\n  }\n  /**\n   * @param {Key} k\n   * @param {Value} v\n   */\n\n\n  set(k, v) {\n    // If the key is already in the map, remove it from the ordering and\n    // re-insert it below\n    if (this.has(k)) {\n      const i = this.indexOf(k);\n\n      this._keys.splice(i, 1);\n    } // Update / insert the k/v into the map\n\n\n    super.set(k, v); // Find the correct position of the newly inserted k/v in the order\n\n    const i = this._find(k);\n\n    this._keys.splice(i, 0, k);\n\n    return this;\n  }\n\n  clear() {\n    super.clear();\n    this._keys = [];\n  }\n  /**\n   * @param {Key} k\n   */\n\n\n  delete(k) {\n    if (!this.has(k)) {\n      return false;\n    }\n\n    const i = this.indexOf(k);\n\n    this._keys.splice(i, 1);\n\n    return super.delete(k);\n  }\n  /**\n   * @param {Key} k\n   */\n\n\n  indexOf(k) {\n    if (!this.has(k)) {\n      return -1;\n    }\n\n    const i = this._find(k);\n\n    if (this._keys[i] === k) {\n      return i;\n    } // There may be more than one key with the same ordering\n    // eg { k1: <priority 5>, k2: <priority 5> }\n    // so scan outwards until the key matches\n\n\n    for (let j = 1; j < this._keys.length; j++) {\n      if (this._keys[i + j] === k) return i + j;\n      if (this._keys[i - j] === k) return i - j;\n    }\n\n    return -1; // should never happen for existing key\n  }\n  /**\n   * @private\n   * @param {Key} k\n   * @returns {number}\n   */\n\n\n  _find(k) {\n    let lower = 0;\n    let upper = this._keys.length;\n\n    while (lower < upper) {\n      const pivot = lower + upper >>> 1; // lower + (upper - lower) / 2\n\n      const cmp = this._kCmp(this._keys[pivot], k); // console.log(`  _find ${lower}:${upper}[${pivot}] ${cmp}`)\n\n\n      if (cmp < 0) {\n        // pivot < k\n        lower = pivot + 1;\n      } else if (cmp > 0) {\n        // pivot > k\n        upper = pivot;\n      } else {\n        // pivot == k\n        return pivot;\n      }\n    }\n\n    return lower;\n  }\n\n  *keys() {\n    for (const k of this._keys) {\n      yield k;\n    }\n\n    return undefined;\n  }\n  /**\n   * @returns {IterableIterator<Value>}\n   */\n\n\n  *values() {\n    for (const k of this._keys) {\n      // @ts-ignore - return of `this.get(k)` is `Value|undefined` which is\n      // incompatible with `Value`. Typechecker can't that this contains values\n      // for all the `_keys`. ts(2322)\n      yield this.get(k);\n    }\n\n    return undefined;\n  }\n  /**\n   * @returns {IterableIterator<[Key, Value]>}\n   */\n\n\n  *entries() {\n    for (const k of this._keys) {\n      // @ts-ignore - return of `this.get(k)` is `Value|undefined` which is\n      // incompatible with `Value`. Typechecker can't that this contains values\n      // for all the `_keys`. ts(2322)\n      yield [k, this.get(k)];\n    }\n\n    return undefined;\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.entries();\n  }\n  /**\n   * @template This\n   * @param {(entry:[Key, Value]) => void} cb\n   * @param {This} [thisArg]\n   */\n  // @ts-expect-error - Callback in Map forEach is (V, K, Map<K, V>) => void\n\n\n  forEach(cb, thisArg) {\n    if (!cb) {\n      return;\n    }\n\n    for (const k of this._keys) {\n      cb.apply(thisArg, [[k,\n      /** @type {Value} */\n      this.get(k)]]);\n    }\n  }\n  /**\n   * @private\n   * @param {[Key, Value]} a\n   * @param {[Key, Value]} b\n   * @returns {0|1|-1}\n   */\n\n\n  _defaultSort(a, b) {\n    if (a[0] < b[0]) return -1;\n    if (b[0] < a[0]) return 1;\n    return 0;\n  }\n  /**\n   * @private\n   * @param {Key} a\n   * @param {Key} b\n   */\n\n\n  _kCmp(a, b) {\n    return this._cmp( // @ts-ignore - get may return undefined\n    [a, this.get(a)], // @ts-ignore - get may return undefined\n    [b, this.get(b)]);\n  }\n\n}\n\nmodule.exports = SortedMap;","map":{"version":3,"names":["SortedMap","Map","constructor","entries","cmp","_cmp","_defaultSort","_keys","k","v","set","update","i","length","splice","newIdx","_find","has","indexOf","clear","delete","j","lower","upper","pivot","_kCmp","keys","undefined","values","get","Symbol","iterator","forEach","cb","thisArg","apply","a","b","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-bitswap/src/utils/sorted-map.js"],"sourcesContent":["'use strict'\n\n/**\n * @template Key, Value\n * SortedMap is a Map whose iterator order can be defined by the user\n * @extends {Map<Key, Value>}\n */\nclass SortedMap extends Map {\n  /**\n   * @param {Array<[Key, Value]>} [entries]\n   * @param {(a:[Key, Value], b:[Key, Value]) => number} [cmp] - compares [k1, v1] to [k2, v2]\n   */\n  constructor (entries, cmp) {\n    super()\n    this._cmp = cmp || this._defaultSort\n    /** @type {Key[]} */\n    this._keys = []\n    for (const [k, v] of entries || []) {\n      this.set(k, v)\n    }\n  }\n\n  /**\n   * Call update to update the position of the key when it should change.\n   * For example if the compare function sorts by the priority field, and the\n   * priority changes, call update.\n   * Call indexOf() to get the index _before_ the change happens.\n   *\n   * @param {number} i - the index of entry whose position should be updated.\n   */\n  update (i) {\n    if (i < 0 || i >= this._keys.length) {\n      return\n    }\n\n    const k = this._keys[i]\n    this._keys.splice(i, 1)\n    const newIdx = this._find(k)\n    this._keys.splice(newIdx, 0, k)\n  }\n\n  /**\n   * @param {Key} k\n   * @param {Value} v\n   */\n  set (k, v) {\n    // If the key is already in the map, remove it from the ordering and\n    // re-insert it below\n    if (this.has(k)) {\n      const i = this.indexOf(k)\n      this._keys.splice(i, 1)\n    }\n\n    // Update / insert the k/v into the map\n    super.set(k, v)\n\n    // Find the correct position of the newly inserted k/v in the order\n    const i = this._find(k)\n    this._keys.splice(i, 0, k)\n\n    return this\n  }\n\n  clear () {\n    super.clear()\n    this._keys = []\n  }\n\n  /**\n   * @param {Key} k\n   */\n  delete (k) {\n    if (!this.has(k)) {\n      return false\n    }\n\n    const i = this.indexOf(k)\n    this._keys.splice(i, 1)\n    return super.delete(k)\n  }\n\n  /**\n   * @param {Key} k\n   */\n  indexOf (k) {\n    if (!this.has(k)) {\n      return -1\n    }\n\n    const i = this._find(k)\n    if (this._keys[i] === k) {\n      return i\n    }\n\n    // There may be more than one key with the same ordering\n    // eg { k1: <priority 5>, k2: <priority 5> }\n    // so scan outwards until the key matches\n    for (let j = 1; j < this._keys.length; j++) {\n      if (this._keys[i + j] === k) return i + j\n      if (this._keys[i - j] === k) return i - j\n    }\n\n    return -1 // should never happen for existing key\n  }\n\n  /**\n   * @private\n   * @param {Key} k\n   * @returns {number}\n   */\n\n  _find (k) {\n    let lower = 0\n    let upper = this._keys.length\n    while (lower < upper) {\n      const pivot = (lower + upper) >>> 1 // lower + (upper - lower) / 2\n      const cmp = this._kCmp(this._keys[pivot], k)\n      // console.log(`  _find ${lower}:${upper}[${pivot}] ${cmp}`)\n      if (cmp < 0) { // pivot < k\n        lower = pivot + 1\n      } else if (cmp > 0) { // pivot > k\n        upper = pivot\n      } else { // pivot == k\n        return pivot\n      }\n    }\n    return lower\n  }\n\n  * keys () {\n    for (const k of this._keys) {\n      yield k\n    }\n\n    return undefined\n  }\n\n  /**\n   * @returns {IterableIterator<Value>}\n   */\n  * values () {\n    for (const k of this._keys) {\n      // @ts-ignore - return of `this.get(k)` is `Value|undefined` which is\n      // incompatible with `Value`. Typechecker can't that this contains values\n      // for all the `_keys`. ts(2322)\n      yield this.get(k)\n    }\n\n    return undefined\n  }\n\n  /**\n   * @returns {IterableIterator<[Key, Value]>}\n   */\n  * entries () {\n    for (const k of this._keys) {\n      // @ts-ignore - return of `this.get(k)` is `Value|undefined` which is\n      // incompatible with `Value`. Typechecker can't that this contains values\n      // for all the `_keys`. ts(2322)\n      yield [k, this.get(k)]\n    }\n\n    return undefined\n  }\n\n  * [Symbol.iterator] () {\n    yield * this.entries()\n  }\n\n  /**\n   * @template This\n   * @param {(entry:[Key, Value]) => void} cb\n   * @param {This} [thisArg]\n   */\n  // @ts-expect-error - Callback in Map forEach is (V, K, Map<K, V>) => void\n  forEach (cb, thisArg) {\n    if (!cb) {\n      return\n    }\n\n    for (const k of this._keys) {\n      cb.apply(thisArg, [[k, /** @type {Value} */(this.get(k))]])\n    }\n  }\n\n  /**\n   * @private\n   * @param {[Key, Value]} a\n   * @param {[Key, Value]} b\n   * @returns {0|1|-1}\n   */\n  _defaultSort (a, b) {\n    if (a[0] < b[0]) return -1\n    if (b[0] < a[0]) return 1\n    return 0\n  }\n\n  /**\n   * @private\n   * @param {Key} a\n   * @param {Key} b\n   */\n  _kCmp (a, b) {\n    return this._cmp(\n      // @ts-ignore - get may return undefined\n      [a, this.get(a)],\n      // @ts-ignore - get may return undefined\n      [b, this.get(b)]\n    )\n  }\n}\n\nmodule.exports = SortedMap\n"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMA,SAAN,SAAwBC,GAAxB,CAA4B;EAC1B;AACF;AACA;AACA;EACEC,WAAW,CAAEC,OAAF,EAAWC,GAAX,EAAgB;IACzB;IACA,KAAKC,IAAL,GAAYD,GAAG,IAAI,KAAKE,YAAxB;IACA;;IACA,KAAKC,KAAL,GAAa,EAAb;;IACA,KAAK,MAAM,CAACC,CAAD,EAAIC,CAAJ,CAAX,IAAqBN,OAAO,IAAI,EAAhC,EAAoC;MAClC,KAAKO,GAAL,CAASF,CAAT,EAAYC,CAAZ;IACD;EACF;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEE,MAAM,CAAEC,CAAF,EAAK;IACT,IAAIA,CAAC,GAAG,CAAJ,IAASA,CAAC,IAAI,KAAKL,KAAL,CAAWM,MAA7B,EAAqC;MACnC;IACD;;IAED,MAAML,CAAC,GAAG,KAAKD,KAAL,CAAWK,CAAX,CAAV;;IACA,KAAKL,KAAL,CAAWO,MAAX,CAAkBF,CAAlB,EAAqB,CAArB;;IACA,MAAMG,MAAM,GAAG,KAAKC,KAAL,CAAWR,CAAX,CAAf;;IACA,KAAKD,KAAL,CAAWO,MAAX,CAAkBC,MAAlB,EAA0B,CAA1B,EAA6BP,CAA7B;EACD;EAED;AACF;AACA;AACA;;;EACEE,GAAG,CAAEF,CAAF,EAAKC,CAAL,EAAQ;IACT;IACA;IACA,IAAI,KAAKQ,GAAL,CAAST,CAAT,CAAJ,EAAiB;MACf,MAAMI,CAAC,GAAG,KAAKM,OAAL,CAAaV,CAAb,CAAV;;MACA,KAAKD,KAAL,CAAWO,MAAX,CAAkBF,CAAlB,EAAqB,CAArB;IACD,CANQ,CAQT;;;IACA,MAAMF,GAAN,CAAUF,CAAV,EAAaC,CAAb,EATS,CAWT;;IACA,MAAMG,CAAC,GAAG,KAAKI,KAAL,CAAWR,CAAX,CAAV;;IACA,KAAKD,KAAL,CAAWO,MAAX,CAAkBF,CAAlB,EAAqB,CAArB,EAAwBJ,CAAxB;;IAEA,OAAO,IAAP;EACD;;EAEDW,KAAK,GAAI;IACP,MAAMA,KAAN;IACA,KAAKZ,KAAL,GAAa,EAAb;EACD;EAED;AACF;AACA;;;EACEa,MAAM,CAAEZ,CAAF,EAAK;IACT,IAAI,CAAC,KAAKS,GAAL,CAAST,CAAT,CAAL,EAAkB;MAChB,OAAO,KAAP;IACD;;IAED,MAAMI,CAAC,GAAG,KAAKM,OAAL,CAAaV,CAAb,CAAV;;IACA,KAAKD,KAAL,CAAWO,MAAX,CAAkBF,CAAlB,EAAqB,CAArB;;IACA,OAAO,MAAMQ,MAAN,CAAaZ,CAAb,CAAP;EACD;EAED;AACF;AACA;;;EACEU,OAAO,CAAEV,CAAF,EAAK;IACV,IAAI,CAAC,KAAKS,GAAL,CAAST,CAAT,CAAL,EAAkB;MAChB,OAAO,CAAC,CAAR;IACD;;IAED,MAAMI,CAAC,GAAG,KAAKI,KAAL,CAAWR,CAAX,CAAV;;IACA,IAAI,KAAKD,KAAL,CAAWK,CAAX,MAAkBJ,CAAtB,EAAyB;MACvB,OAAOI,CAAP;IACD,CARS,CAUV;IACA;IACA;;;IACA,KAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKd,KAAL,CAAWM,MAA/B,EAAuCQ,CAAC,EAAxC,EAA4C;MAC1C,IAAI,KAAKd,KAAL,CAAWK,CAAC,GAAGS,CAAf,MAAsBb,CAA1B,EAA6B,OAAOI,CAAC,GAAGS,CAAX;MAC7B,IAAI,KAAKd,KAAL,CAAWK,CAAC,GAAGS,CAAf,MAAsBb,CAA1B,EAA6B,OAAOI,CAAC,GAAGS,CAAX;IAC9B;;IAED,OAAO,CAAC,CAAR,CAlBU,CAkBA;EACX;EAED;AACF;AACA;AACA;AACA;;;EAEEL,KAAK,CAAER,CAAF,EAAK;IACR,IAAIc,KAAK,GAAG,CAAZ;IACA,IAAIC,KAAK,GAAG,KAAKhB,KAAL,CAAWM,MAAvB;;IACA,OAAOS,KAAK,GAAGC,KAAf,EAAsB;MACpB,MAAMC,KAAK,GAAIF,KAAK,GAAGC,KAAT,KAAoB,CAAlC,CADoB,CACgB;;MACpC,MAAMnB,GAAG,GAAG,KAAKqB,KAAL,CAAW,KAAKlB,KAAL,CAAWiB,KAAX,CAAX,EAA8BhB,CAA9B,CAAZ,CAFoB,CAGpB;;;MACA,IAAIJ,GAAG,GAAG,CAAV,EAAa;QAAE;QACbkB,KAAK,GAAGE,KAAK,GAAG,CAAhB;MACD,CAFD,MAEO,IAAIpB,GAAG,GAAG,CAAV,EAAa;QAAE;QACpBmB,KAAK,GAAGC,KAAR;MACD,CAFM,MAEA;QAAE;QACP,OAAOA,KAAP;MACD;IACF;;IACD,OAAOF,KAAP;EACD;;EAEK,CAAJI,IAAI,GAAI;IACR,KAAK,MAAMlB,CAAX,IAAgB,KAAKD,KAArB,EAA4B;MAC1B,MAAMC,CAAN;IACD;;IAED,OAAOmB,SAAP;EACD;EAED;AACF;AACA;;;EACU,CAANC,MAAM,GAAI;IACV,KAAK,MAAMpB,CAAX,IAAgB,KAAKD,KAArB,EAA4B;MAC1B;MACA;MACA;MACA,MAAM,KAAKsB,GAAL,CAASrB,CAAT,CAAN;IACD;;IAED,OAAOmB,SAAP;EACD;EAED;AACF;AACA;;;EACW,CAAPxB,OAAO,GAAI;IACX,KAAK,MAAMK,CAAX,IAAgB,KAAKD,KAArB,EAA4B;MAC1B;MACA;MACA;MACA,MAAM,CAACC,CAAD,EAAI,KAAKqB,GAAL,CAASrB,CAAT,CAAJ,CAAN;IACD;;IAED,OAAOmB,SAAP;EACD;;EAEiB,EAAfG,MAAM,CAACC,QAAQ,IAAK;IACrB,OAAQ,KAAK5B,OAAL,EAAR;EACD;EAED;AACF;AACA;AACA;AACA;EACE;;;EACA6B,OAAO,CAAEC,EAAF,EAAMC,OAAN,EAAe;IACpB,IAAI,CAACD,EAAL,EAAS;MACP;IACD;;IAED,KAAK,MAAMzB,CAAX,IAAgB,KAAKD,KAArB,EAA4B;MAC1B0B,EAAE,CAACE,KAAH,CAASD,OAAT,EAAkB,CAAC,CAAC1B,CAAD;MAAI;MAAqB,KAAKqB,GAAL,CAASrB,CAAT,CAAzB,CAAD,CAAlB;IACD;EACF;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEF,YAAY,CAAE8B,CAAF,EAAKC,CAAL,EAAQ;IAClB,IAAID,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAZ,EAAiB,OAAO,CAAC,CAAR;IACjB,IAAIA,CAAC,CAAC,CAAD,CAAD,GAAOD,CAAC,CAAC,CAAD,CAAZ,EAAiB,OAAO,CAAP;IACjB,OAAO,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEX,KAAK,CAAEW,CAAF,EAAKC,CAAL,EAAQ;IACX,OAAO,KAAKhC,IAAL,EACL;IACA,CAAC+B,CAAD,EAAI,KAAKP,GAAL,CAASO,CAAT,CAAJ,CAFK,EAGL;IACA,CAACC,CAAD,EAAI,KAAKR,GAAL,CAASQ,CAAT,CAAJ,CAJK,CAAP;EAMD;;AA1MyB;;AA6M5BC,MAAM,CAACC,OAAP,GAAiBvC,SAAjB"},"metadata":{},"sourceType":"script"}