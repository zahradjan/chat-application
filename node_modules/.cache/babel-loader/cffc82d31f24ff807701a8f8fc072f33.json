{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar Entry = require('./entry');\n\nvar _require = require('multiformats/bases/base58'),\n    base58btc = _require.base58btc;\n/**\n * @template T\n * @param {(v:T) => number} fn\n * @param {T[]} list\n * @returns {T[]}\n */\n\n\nvar sortBy = function sortBy(fn, list) {\n  return Array.prototype.slice.call(list, 0).sort(function (a, b) {\n    var aa = fn(a);\n    var bb = fn(b);\n    return aa < bb ? -1 : aa > bb ? 1 : 0;\n  });\n};\n/**\n * @typedef {import('multiformats').CID} CID\n */\n\n\nvar Wantlist = /*#__PURE__*/function () {\n  /**\n   *\n   * @param {import('../../stats')} [stats]\n   */\n  function Wantlist(stats) {\n    _classCallCheck(this, Wantlist);\n\n    /** @type {Map<string, Entry>} */\n    this.set = new Map();\n    this._stats = stats;\n  }\n\n  _createClass(Wantlist, [{\n    key: \"length\",\n    get: function get() {\n      return this.set.size;\n    }\n    /**\n     * @param {CID} cid\n     * @param {number} priority\n     * @param {import('../message/message').Message.Wantlist.WantType} wantType\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(cid, priority, wantType) {\n      // Have to import here to avoid circular reference\n      var Message = require('../message');\n\n      var cidStr = cid.toString(base58btc);\n      var entry = this.set.get(cidStr);\n\n      if (entry) {\n        entry.inc();\n        entry.priority = priority; // We can only overwrite want-have with want-block\n\n        if (entry.wantType === Message.WantType.Have && wantType === Message.WantType.Block) {\n          entry.wantType = wantType;\n        }\n      } else {\n        this.set.set(cidStr, new Entry(cid, priority, wantType));\n\n        if (this._stats) {\n          this._stats.push(null, 'wantListSize', 1);\n        }\n      }\n    }\n    /**\n     * @param {CID} cid\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(cid) {\n      var cidStr = cid.toString(base58btc);\n      var entry = this.set.get(cidStr);\n\n      if (!entry) {\n        return;\n      }\n\n      entry.dec(); // only delete when no refs are held\n\n      if (entry.hasRefs()) {\n        return;\n      }\n\n      this.set.delete(cidStr);\n\n      if (this._stats) {\n        this._stats.push(null, 'wantListSize', -1);\n      }\n    }\n    /**\n     * @param {string} cidStr\n     */\n\n  }, {\n    key: \"removeForce\",\n    value: function removeForce(cidStr) {\n      if (this.set.has(cidStr)) {\n        this.set.delete(cidStr);\n      }\n    }\n    /**\n     * @param {(entry:Entry, key:string) => void} fn\n     */\n\n  }, {\n    key: \"forEach\",\n    value: function forEach(fn) {\n      return this.set.forEach(fn);\n    }\n  }, {\n    key: \"entries\",\n    value: function entries() {\n      return this.set.entries();\n    }\n  }, {\n    key: \"sortedEntries\",\n    value: function sortedEntries() {\n      // TODO: Figure out if this is an actual bug.\n      // @ts-expect-error - Property 'key' does not exist on type 'WantListEntry'\n      return new Map(sortBy(function (o) {\n        return o[1].key;\n      }, Array.from(this.set.entries())));\n    }\n    /**\n     * @param {CID} cid\n     */\n\n  }, {\n    key: \"contains\",\n    value: function contains(cid) {\n      var cidStr = cid.toString(base58btc);\n      return this.set.has(cidStr);\n    }\n    /**\n     * @param {CID} cid\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(cid) {\n      var cidStr = cid.toString(base58btc);\n      return this.set.get(cidStr);\n    }\n  }]);\n\n  return Wantlist;\n}();\n\nWantlist.Entry = Entry;\nmodule.exports = Wantlist;","map":{"version":3,"names":["Entry","require","base58btc","sortBy","fn","list","Array","prototype","slice","call","sort","a","b","aa","bb","Wantlist","stats","set","Map","_stats","size","cid","priority","wantType","Message","cidStr","toString","entry","get","inc","WantType","Have","Block","push","dec","hasRefs","delete","has","forEach","entries","o","key","from","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-bitswap/src/types/wantlist/index.js"],"sourcesContent":["'use strict'\n\nconst Entry = require('./entry')\nconst { base58btc } = require('multiformats/bases/base58')\n\n/**\n * @template T\n * @param {(v:T) => number} fn\n * @param {T[]} list\n * @returns {T[]}\n */\nconst sortBy = (fn, list) => {\n  return Array.prototype.slice.call(list, 0).sort((a, b) => {\n    const aa = fn(a)\n    const bb = fn(b)\n    return aa < bb ? -1 : aa > bb ? 1 : 0\n  })\n}\n\n/**\n * @typedef {import('multiformats').CID} CID\n */\n\nclass Wantlist {\n  /**\n   *\n   * @param {import('../../stats')} [stats]\n   */\n  constructor (stats) {\n    /** @type {Map<string, Entry>} */\n    this.set = new Map()\n    this._stats = stats\n  }\n\n  get length () {\n    return this.set.size\n  }\n\n  /**\n   * @param {CID} cid\n   * @param {number} priority\n   * @param {import('../message/message').Message.Wantlist.WantType} wantType\n   */\n  add (cid, priority, wantType) {\n    // Have to import here to avoid circular reference\n    const Message = require('../message')\n\n    const cidStr = cid.toString(base58btc)\n    const entry = this.set.get(cidStr)\n\n    if (entry) {\n      entry.inc()\n      entry.priority = priority\n\n      // We can only overwrite want-have with want-block\n      if (entry.wantType === Message.WantType.Have && wantType === Message.WantType.Block) {\n        entry.wantType = wantType\n      }\n    } else {\n      this.set.set(cidStr, new Entry(cid, priority, wantType))\n      if (this._stats) {\n        this._stats.push(null, 'wantListSize', 1)\n      }\n    }\n  }\n\n  /**\n   * @param {CID} cid\n   */\n  remove (cid) {\n    const cidStr = cid.toString(base58btc)\n    const entry = this.set.get(cidStr)\n\n    if (!entry) {\n      return\n    }\n\n    entry.dec()\n\n    // only delete when no refs are held\n    if (entry.hasRefs()) {\n      return\n    }\n\n    this.set.delete(cidStr)\n    if (this._stats) {\n      this._stats.push(null, 'wantListSize', -1)\n    }\n  }\n\n  /**\n   * @param {string} cidStr\n   */\n  removeForce (cidStr) {\n    if (this.set.has(cidStr)) {\n      this.set.delete(cidStr)\n    }\n  }\n\n  /**\n   * @param {(entry:Entry, key:string) => void} fn\n   */\n  forEach (fn) {\n    return this.set.forEach(fn)\n  }\n\n  entries () {\n    return this.set.entries()\n  }\n\n  sortedEntries () {\n    // TODO: Figure out if this is an actual bug.\n    // @ts-expect-error - Property 'key' does not exist on type 'WantListEntry'\n    return new Map(sortBy(o => o[1].key, Array.from(this.set.entries())))\n  }\n\n  /**\n   * @param {CID} cid\n   */\n  contains (cid) {\n    const cidStr = cid.toString(base58btc)\n    return this.set.has(cidStr)\n  }\n\n  /**\n   * @param {CID} cid\n   */\n  get (cid) {\n    const cidStr = cid.toString(base58btc)\n    return this.set.get(cidStr)\n  }\n}\n\nWantlist.Entry = Entry\nmodule.exports = Wantlist\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}