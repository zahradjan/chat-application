{"ast":null,"code":"'use strict';\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar createAddAPI = require('./add');\n\nvar createAddAllAPI = require('./add-all');\n\nvar createCatAPI = require('./cat');\n\nvar createGetAPI = require('./get');\n\nvar createLsAPI = require('./ls');\n/**\n * @typedef {AddAllContext & CatContext & GetContext & ListContext } Context\n * @typedef {import('./add-all').Context} AddAllContext\n * @typedef {import('./cat').Context} CatContext\n * @typedef {import('./get').Context} GetContext\n * @typedef {import('./ls').Context} ListContext\n */\n\n\nvar Root = /*#__PURE__*/_createClass(\n/**\n * @param {Context} context\n */\nfunction Root(_ref) {\n  var preload = _ref.preload,\n      repo = _ref.repo,\n      options = _ref.options;\n\n  _classCallCheck(this, Root);\n\n  var addAll = createAddAllAPI({\n    preload: preload,\n    repo: repo,\n    options: options\n  });\n  this.addAll = addAll;\n  this.add = createAddAPI({\n    addAll: addAll\n  });\n  this.cat = createCatAPI({\n    repo: repo,\n    preload: preload\n  });\n  this.get = createGetAPI({\n    repo: repo,\n    preload: preload\n  });\n  this.ls = createLsAPI({\n    repo: repo,\n    preload: preload\n  });\n});\n\nmodule.exports = Root;","map":{"version":3,"names":["createAddAPI","require","createAddAllAPI","createCatAPI","createGetAPI","createLsAPI","Root","preload","repo","options","addAll","add","cat","get","ls","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/root.js"],"sourcesContent":["'use strict'\n\nconst createAddAPI = require('./add')\nconst createAddAllAPI = require('./add-all')\nconst createCatAPI = require('./cat')\nconst createGetAPI = require('./get')\nconst createLsAPI = require('./ls')\n\n/**\n * @typedef {AddAllContext & CatContext & GetContext & ListContext } Context\n * @typedef {import('./add-all').Context} AddAllContext\n * @typedef {import('./cat').Context} CatContext\n * @typedef {import('./get').Context} GetContext\n * @typedef {import('./ls').Context} ListContext\n */\nclass Root {\n  /**\n   * @param {Context} context\n   */\n  constructor ({ preload, repo, options }) {\n    const addAll = createAddAllAPI({\n      preload,\n      repo,\n      options\n    })\n\n    this.addAll = addAll\n    this.add = createAddAPI({ addAll })\n    this.cat = createCatAPI({ repo, preload })\n    this.get = createGetAPI({ repo, preload })\n    this.ls = createLsAPI({ repo, preload })\n  }\n}\n\nmodule.exports = Root\n"],"mappings":"AAAA;;;;;;AAEA,IAAMA,YAAY,GAAGC,OAAO,CAAC,OAAD,CAA5B;;AACA,IAAMC,eAAe,GAAGD,OAAO,CAAC,WAAD,CAA/B;;AACA,IAAME,YAAY,GAAGF,OAAO,CAAC,OAAD,CAA5B;;AACA,IAAMG,YAAY,GAAGH,OAAO,CAAC,OAAD,CAA5B;;AACA,IAAMI,WAAW,GAAGJ,OAAO,CAAC,MAAD,CAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACMK,I;AACJ;AACF;AACA;AACE,oBAAyC;EAAA,IAA1BC,OAA0B,QAA1BA,OAA0B;EAAA,IAAjBC,IAAiB,QAAjBA,IAAiB;EAAA,IAAXC,OAAW,QAAXA,OAAW;;EAAA;;EACvC,IAAMC,MAAM,GAAGR,eAAe,CAAC;IAC7BK,OAAO,EAAPA,OAD6B;IAE7BC,IAAI,EAAJA,IAF6B;IAG7BC,OAAO,EAAPA;EAH6B,CAAD,CAA9B;EAMA,KAAKC,MAAL,GAAcA,MAAd;EACA,KAAKC,GAAL,GAAWX,YAAY,CAAC;IAAEU,MAAM,EAANA;EAAF,CAAD,CAAvB;EACA,KAAKE,GAAL,GAAWT,YAAY,CAAC;IAAEK,IAAI,EAAJA,IAAF;IAAQD,OAAO,EAAPA;EAAR,CAAD,CAAvB;EACA,KAAKM,GAAL,GAAWT,YAAY,CAAC;IAAEI,IAAI,EAAJA,IAAF;IAAQD,OAAO,EAAPA;EAAR,CAAD,CAAvB;EACA,KAAKO,EAAL,GAAUT,WAAW,CAAC;IAAEG,IAAI,EAAJA,IAAF;IAAQD,OAAO,EAAPA;EAAR,CAAD,CAArB;AACD,C;;AAGHQ,MAAM,CAACC,OAAP,GAAiBV,IAAjB"},"metadata":{},"sourceType":"script"}