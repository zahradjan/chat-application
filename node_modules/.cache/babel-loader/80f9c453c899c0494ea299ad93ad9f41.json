{"ast":null,"code":"'use strict';\n\nconst {\n  sha256\n} = require('multiformats/hashes/sha2');\n\nconst errcode = require('err-code');\n\nconst {\n  equals: uint8ArrayEquals\n} = require('uint8arrays/equals');\n\nconst {\n  toString: uint8ArrayToString\n} = require('uint8arrays/to-string');\n\nconst exporter = require('./exporter');\n\nmodule.exports = (keysProtobuf, randomBytes, crypto) => {\n  crypto = crypto || require('./secp256k1')();\n\n  class Secp256k1PublicKey {\n    constructor(key) {\n      crypto.validatePublicKey(key);\n      this._key = key;\n    }\n\n    verify(data, sig) {\n      return crypto.hashAndVerify(this._key, sig, data);\n    }\n\n    marshal() {\n      return crypto.compressPublicKey(this._key);\n    }\n\n    get bytes() {\n      return keysProtobuf.PublicKey.encode({\n        Type: keysProtobuf.KeyType.Secp256k1,\n        Data: this.marshal()\n      }).finish();\n    }\n\n    equals(key) {\n      return uint8ArrayEquals(this.bytes, key.bytes);\n    }\n\n    async hash() {\n      const {\n        bytes\n      } = await sha256.digest(this.bytes);\n      return bytes;\n    }\n\n  }\n\n  class Secp256k1PrivateKey {\n    constructor(key, publicKey) {\n      this._key = key;\n      this._publicKey = publicKey || crypto.computePublicKey(key);\n      crypto.validatePrivateKey(this._key);\n      crypto.validatePublicKey(this._publicKey);\n    }\n\n    sign(message) {\n      return crypto.hashAndSign(this._key, message);\n    }\n\n    get public() {\n      return new Secp256k1PublicKey(this._publicKey);\n    }\n\n    marshal() {\n      return this._key;\n    }\n\n    get bytes() {\n      return keysProtobuf.PrivateKey.encode({\n        Type: keysProtobuf.KeyType.Secp256k1,\n        Data: this.marshal()\n      }).finish();\n    }\n\n    equals(key) {\n      return uint8ArrayEquals(this.bytes, key.bytes);\n    }\n\n    async hash() {\n      const {\n        bytes\n      } = await sha256.digest(this.bytes);\n      return bytes;\n    }\n    /**\n     * Gets the ID of the key.\n     *\n     * The key id is the base58 encoding of the SHA-256 multihash of its public key.\n     * The public key is a protobuf encoding containing a type and the DER encoding\n     * of the PKCS SubjectPublicKeyInfo.\n     *\n     * @returns {Promise<string>}\n     */\n\n\n    async id() {\n      const hash = await this.public.hash();\n      return uint8ArrayToString(hash, 'base58btc');\n    }\n    /**\n     * Exports the key into a password protected `format`\n     *\n     * @param {string} password - The password to encrypt the key\n     * @param {string} [format=libp2p-key] - The format in which to export as\n     * @returns {Promise<string>} The encrypted private key\n     */\n\n\n    async export(password) {\n      let format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'libp2p-key';\n\n      // eslint-disable-line require-await\n      if (format === 'libp2p-key') {\n        return exporter.export(this.bytes, password);\n      } else {\n        throw errcode(new Error(`export format '${format}' is not supported`), 'ERR_INVALID_EXPORT_FORMAT');\n      }\n    }\n\n  }\n\n  function unmarshalSecp256k1PrivateKey(bytes) {\n    return new Secp256k1PrivateKey(bytes);\n  }\n\n  function unmarshalSecp256k1PublicKey(bytes) {\n    return new Secp256k1PublicKey(bytes);\n  }\n\n  async function generateKeyPair() {\n    const privateKeyBytes = await crypto.generateKey();\n    return new Secp256k1PrivateKey(privateKeyBytes);\n  }\n\n  return {\n    Secp256k1PublicKey,\n    Secp256k1PrivateKey,\n    unmarshalSecp256k1PrivateKey,\n    unmarshalSecp256k1PublicKey,\n    generateKeyPair\n  };\n};","map":{"version":3,"names":["sha256","require","errcode","equals","uint8ArrayEquals","toString","uint8ArrayToString","exporter","module","exports","keysProtobuf","randomBytes","crypto","Secp256k1PublicKey","constructor","key","validatePublicKey","_key","verify","data","sig","hashAndVerify","marshal","compressPublicKey","bytes","PublicKey","encode","Type","KeyType","Secp256k1","Data","finish","hash","digest","Secp256k1PrivateKey","publicKey","_publicKey","computePublicKey","validatePrivateKey","sign","message","hashAndSign","public","PrivateKey","id","export","password","format","Error","unmarshalSecp256k1PrivateKey","unmarshalSecp256k1PublicKey","generateKeyPair","privateKeyBytes","generateKey"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-delegated-content-routing/node_modules/libp2p-crypto/src/keys/secp256k1-class.js"],"sourcesContent":["'use strict'\n\nconst { sha256 } = require('multiformats/hashes/sha2')\nconst errcode = require('err-code')\nconst { equals: uint8ArrayEquals } = require('uint8arrays/equals')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\n\nconst exporter = require('./exporter')\n\nmodule.exports = (keysProtobuf, randomBytes, crypto) => {\n  crypto = crypto || require('./secp256k1')()\n\n  class Secp256k1PublicKey {\n    constructor (key) {\n      crypto.validatePublicKey(key)\n      this._key = key\n    }\n\n    verify (data, sig) {\n      return crypto.hashAndVerify(this._key, sig, data)\n    }\n\n    marshal () {\n      return crypto.compressPublicKey(this._key)\n    }\n\n    get bytes () {\n      return keysProtobuf.PublicKey.encode({\n        Type: keysProtobuf.KeyType.Secp256k1,\n        Data: this.marshal()\n      }).finish()\n    }\n\n    equals (key) {\n      return uint8ArrayEquals(this.bytes, key.bytes)\n    }\n\n    async hash () {\n      const { bytes } = await sha256.digest(this.bytes)\n\n      return bytes\n    }\n  }\n\n  class Secp256k1PrivateKey {\n    constructor (key, publicKey) {\n      this._key = key\n      this._publicKey = publicKey || crypto.computePublicKey(key)\n      crypto.validatePrivateKey(this._key)\n      crypto.validatePublicKey(this._publicKey)\n    }\n\n    sign (message) {\n      return crypto.hashAndSign(this._key, message)\n    }\n\n    get public () {\n      return new Secp256k1PublicKey(this._publicKey)\n    }\n\n    marshal () {\n      return this._key\n    }\n\n    get bytes () {\n      return keysProtobuf.PrivateKey.encode({\n        Type: keysProtobuf.KeyType.Secp256k1,\n        Data: this.marshal()\n      }).finish()\n    }\n\n    equals (key) {\n      return uint8ArrayEquals(this.bytes, key.bytes)\n    }\n\n    async hash () {\n      const { bytes } = await sha256.digest(this.bytes)\n\n      return bytes\n    }\n\n    /**\n     * Gets the ID of the key.\n     *\n     * The key id is the base58 encoding of the SHA-256 multihash of its public key.\n     * The public key is a protobuf encoding containing a type and the DER encoding\n     * of the PKCS SubjectPublicKeyInfo.\n     *\n     * @returns {Promise<string>}\n     */\n    async id () {\n      const hash = await this.public.hash()\n      return uint8ArrayToString(hash, 'base58btc')\n    }\n\n    /**\n     * Exports the key into a password protected `format`\n     *\n     * @param {string} password - The password to encrypt the key\n     * @param {string} [format=libp2p-key] - The format in which to export as\n     * @returns {Promise<string>} The encrypted private key\n     */\n    async export (password, format = 'libp2p-key') { // eslint-disable-line require-await\n      if (format === 'libp2p-key') {\n        return exporter.export(this.bytes, password)\n      } else {\n        throw errcode(new Error(`export format '${format}' is not supported`), 'ERR_INVALID_EXPORT_FORMAT')\n      }\n    }\n  }\n\n  function unmarshalSecp256k1PrivateKey (bytes) {\n    return new Secp256k1PrivateKey(bytes)\n  }\n\n  function unmarshalSecp256k1PublicKey (bytes) {\n    return new Secp256k1PublicKey(bytes)\n  }\n\n  async function generateKeyPair () {\n    const privateKeyBytes = await crypto.generateKey()\n    return new Secp256k1PrivateKey(privateKeyBytes)\n  }\n\n  return {\n    Secp256k1PublicKey,\n    Secp256k1PrivateKey,\n    unmarshalSecp256k1PrivateKey,\n    unmarshalSecp256k1PublicKey,\n    generateKeyPair\n  }\n}\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA;AAAF,IAAaC,OAAO,CAAC,0BAAD,CAA1B;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAM;EAAEE,MAAM,EAAEC;AAAV,IAA+BH,OAAO,CAAC,oBAAD,CAA5C;;AACA,MAAM;EAAEI,QAAQ,EAAEC;AAAZ,IAAmCL,OAAO,CAAC,uBAAD,CAAhD;;AAEA,MAAMM,QAAQ,GAAGN,OAAO,CAAC,YAAD,CAAxB;;AAEAO,MAAM,CAACC,OAAP,GAAiB,CAACC,YAAD,EAAeC,WAAf,EAA4BC,MAA5B,KAAuC;EACtDA,MAAM,GAAGA,MAAM,IAAIX,OAAO,CAAC,aAAD,CAAP,EAAnB;;EAEA,MAAMY,kBAAN,CAAyB;IACvBC,WAAW,CAAEC,GAAF,EAAO;MAChBH,MAAM,CAACI,iBAAP,CAAyBD,GAAzB;MACA,KAAKE,IAAL,GAAYF,GAAZ;IACD;;IAEDG,MAAM,CAAEC,IAAF,EAAQC,GAAR,EAAa;MACjB,OAAOR,MAAM,CAACS,aAAP,CAAqB,KAAKJ,IAA1B,EAAgCG,GAAhC,EAAqCD,IAArC,CAAP;IACD;;IAEDG,OAAO,GAAI;MACT,OAAOV,MAAM,CAACW,iBAAP,CAAyB,KAAKN,IAA9B,CAAP;IACD;;IAEQ,IAALO,KAAK,GAAI;MACX,OAAOd,YAAY,CAACe,SAAb,CAAuBC,MAAvB,CAA8B;QACnCC,IAAI,EAAEjB,YAAY,CAACkB,OAAb,CAAqBC,SADQ;QAEnCC,IAAI,EAAE,KAAKR,OAAL;MAF6B,CAA9B,EAGJS,MAHI,EAAP;IAID;;IAED5B,MAAM,CAAEY,GAAF,EAAO;MACX,OAAOX,gBAAgB,CAAC,KAAKoB,KAAN,EAAaT,GAAG,CAACS,KAAjB,CAAvB;IACD;;IAES,MAAJQ,IAAI,GAAI;MACZ,MAAM;QAAER;MAAF,IAAY,MAAMxB,MAAM,CAACiC,MAAP,CAAc,KAAKT,KAAnB,CAAxB;MAEA,OAAOA,KAAP;IACD;;EA7BsB;;EAgCzB,MAAMU,mBAAN,CAA0B;IACxBpB,WAAW,CAAEC,GAAF,EAAOoB,SAAP,EAAkB;MAC3B,KAAKlB,IAAL,GAAYF,GAAZ;MACA,KAAKqB,UAAL,GAAkBD,SAAS,IAAIvB,MAAM,CAACyB,gBAAP,CAAwBtB,GAAxB,CAA/B;MACAH,MAAM,CAAC0B,kBAAP,CAA0B,KAAKrB,IAA/B;MACAL,MAAM,CAACI,iBAAP,CAAyB,KAAKoB,UAA9B;IACD;;IAEDG,IAAI,CAAEC,OAAF,EAAW;MACb,OAAO5B,MAAM,CAAC6B,WAAP,CAAmB,KAAKxB,IAAxB,EAA8BuB,OAA9B,CAAP;IACD;;IAES,IAANE,MAAM,GAAI;MACZ,OAAO,IAAI7B,kBAAJ,CAAuB,KAAKuB,UAA5B,CAAP;IACD;;IAEDd,OAAO,GAAI;MACT,OAAO,KAAKL,IAAZ;IACD;;IAEQ,IAALO,KAAK,GAAI;MACX,OAAOd,YAAY,CAACiC,UAAb,CAAwBjB,MAAxB,CAA+B;QACpCC,IAAI,EAAEjB,YAAY,CAACkB,OAAb,CAAqBC,SADS;QAEpCC,IAAI,EAAE,KAAKR,OAAL;MAF8B,CAA/B,EAGJS,MAHI,EAAP;IAID;;IAED5B,MAAM,CAAEY,GAAF,EAAO;MACX,OAAOX,gBAAgB,CAAC,KAAKoB,KAAN,EAAaT,GAAG,CAACS,KAAjB,CAAvB;IACD;;IAES,MAAJQ,IAAI,GAAI;MACZ,MAAM;QAAER;MAAF,IAAY,MAAMxB,MAAM,CAACiC,MAAP,CAAc,KAAKT,KAAnB,CAAxB;MAEA,OAAOA,KAAP;IACD;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACY,MAAFoB,EAAE,GAAI;MACV,MAAMZ,IAAI,GAAG,MAAM,KAAKU,MAAL,CAAYV,IAAZ,EAAnB;MACA,OAAO1B,kBAAkB,CAAC0B,IAAD,EAAO,WAAP,CAAzB;IACD;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;IACgB,MAANa,MAAM,CAAEC,QAAF,EAAmC;MAAA,IAAvBC,MAAuB,uEAAd,YAAc;;MAAE;MAC/C,IAAIA,MAAM,KAAK,YAAf,EAA6B;QAC3B,OAAOxC,QAAQ,CAACsC,MAAT,CAAgB,KAAKrB,KAArB,EAA4BsB,QAA5B,CAAP;MACD,CAFD,MAEO;QACL,MAAM5C,OAAO,CAAC,IAAI8C,KAAJ,CAAW,kBAAiBD,MAAO,oBAAnC,CAAD,EAA0D,2BAA1D,CAAb;MACD;IACF;;EAhEuB;;EAmE1B,SAASE,4BAAT,CAAuCzB,KAAvC,EAA8C;IAC5C,OAAO,IAAIU,mBAAJ,CAAwBV,KAAxB,CAAP;EACD;;EAED,SAAS0B,2BAAT,CAAsC1B,KAAtC,EAA6C;IAC3C,OAAO,IAAIX,kBAAJ,CAAuBW,KAAvB,CAAP;EACD;;EAED,eAAe2B,eAAf,GAAkC;IAChC,MAAMC,eAAe,GAAG,MAAMxC,MAAM,CAACyC,WAAP,EAA9B;IACA,OAAO,IAAInB,mBAAJ,CAAwBkB,eAAxB,CAAP;EACD;;EAED,OAAO;IACLvC,kBADK;IAELqB,mBAFK;IAGLe,4BAHK;IAILC,2BAJK;IAKLC;EALK,CAAP;AAOD,CA1HD"},"metadata":{},"sourceType":"script"}