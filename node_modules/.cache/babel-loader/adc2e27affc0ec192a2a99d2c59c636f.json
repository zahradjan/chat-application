{"ast":null,"code":"// String encode/decode helpers\n'use strict';\n\nvar utils = require('./common'); // Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\n\n\nvar STR_APPLY_OK = true;\nvar STR_APPLY_UIA_OK = true;\n\ntry {\n  String.fromCharCode.apply(null, [0]);\n} catch (__) {\n  STR_APPLY_OK = false;\n}\n\ntry {\n  String.fromCharCode.apply(null, new Uint8Array(1));\n} catch (__) {\n  STR_APPLY_UIA_OK = false;\n} // Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\n\n\nvar _utf8len = new utils.Buf8(256);\n\nfor (var q = 0; q < 256; q++) {\n  _utf8len[q] = q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1;\n}\n\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n// convert string to array (typed, when possible)\n\nexports.string2buf = function (str) {\n  var buf,\n      c,\n      c2,\n      m_pos,\n      i,\n      str_len = str.length,\n      buf_len = 0; // count binary size\n\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n\n    if ((c & 0xfc00) === 0xd800 && m_pos + 1 < str_len) {\n      c2 = str.charCodeAt(m_pos + 1);\n\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + (c - 0xd800 << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  } // allocate buffer\n\n\n  buf = new utils.Buf8(buf_len); // convert\n\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n\n    if ((c & 0xfc00) === 0xd800 && m_pos + 1 < str_len) {\n      c2 = str.charCodeAt(m_pos + 1);\n\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + (c - 0xd800 << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | c >>> 6;\n      buf[i++] = 0x80 | c & 0x3f;\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | c >>> 12;\n      buf[i++] = 0x80 | c >>> 6 & 0x3f;\n      buf[i++] = 0x80 | c & 0x3f;\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | c >>> 18;\n      buf[i++] = 0x80 | c >>> 12 & 0x3f;\n      buf[i++] = 0x80 | c >>> 6 & 0x3f;\n      buf[i++] = 0x80 | c & 0x3f;\n    }\n  }\n\n  return buf;\n}; // Helper (used in 2 places)\n\n\nfunction buf2binstring(buf, len) {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if (buf.subarray && STR_APPLY_UIA_OK || !buf.subarray && STR_APPLY_OK) {\n      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));\n    }\n  }\n\n  var result = '';\n\n  for (var i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n\n  return result;\n} // Convert byte array to binary string\n\n\nexports.buf2binstring = function (buf) {\n  return buf2binstring(buf, buf.length);\n}; // Convert binary string (typed, when possible)\n\n\nexports.binstring2buf = function (str) {\n  var buf = new utils.Buf8(str.length);\n\n  for (var i = 0, len = buf.length; i < len; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n\n  return buf;\n}; // convert array to string\n\n\nexports.buf2string = function (buf, max) {\n  var i, out, c, c_len;\n  var len = max || buf.length; // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n\n  var utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    c = buf[i++]; // quick process ascii\n\n    if (c < 0x80) {\n      utf16buf[out++] = c;\n      continue;\n    }\n\n    c_len = _utf8len[c]; // skip 5 & 6 byte codes\n\n    if (c_len > 4) {\n      utf16buf[out++] = 0xfffd;\n      i += c_len - 1;\n      continue;\n    } // apply mask on first byte\n\n\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07; // join the rest\n\n    while (c_len > 1 && i < len) {\n      c = c << 6 | buf[i++] & 0x3f;\n      c_len--;\n    } // terminated by end of string?\n\n\n    if (c_len > 1) {\n      utf16buf[out++] = 0xfffd;\n      continue;\n    }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | c >> 10 & 0x3ff;\n      utf16buf[out++] = 0xdc00 | c & 0x3ff;\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n}; // Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\n\n\nexports.utf8border = function (buf, max) {\n  var pos;\n  max = max || buf.length;\n\n  if (max > buf.length) {\n    max = buf.length;\n  } // go back from last position, until start of sequence found\n\n\n  pos = max - 1;\n\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) {\n    pos--;\n  } // Very small and broken sequence,\n  // return max, because we should return something anyway.\n\n\n  if (pos < 0) {\n    return max;\n  } // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n\n\n  if (pos === 0) {\n    return max;\n  }\n\n  return pos + _utf8len[buf[pos]] > max ? pos : max;\n};","map":{"version":3,"names":["utils","require","STR_APPLY_OK","STR_APPLY_UIA_OK","String","fromCharCode","apply","__","Uint8Array","_utf8len","Buf8","q","exports","string2buf","str","buf","c","c2","m_pos","i","str_len","length","buf_len","charCodeAt","buf2binstring","len","subarray","shrinkBuf","result","binstring2buf","buf2string","max","out","c_len","utf16buf","Array","utf8border","pos"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/pako/lib/utils/strings.js"],"sourcesContent":["// String encode/decode helpers\n'use strict';\n\n\nvar utils = require('./common');\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nvar STR_APPLY_OK = true;\nvar STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nvar _utf8len = new utils.Buf8(256);\nfor (var q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nexports.string2buf = function (str) {\n  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new utils.Buf8(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper (used in 2 places)\nfunction buf2binstring(buf, len) {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {\n      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));\n    }\n  }\n\n  var result = '';\n  for (var i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n}\n\n\n// Convert byte array to binary string\nexports.buf2binstring = function (buf) {\n  return buf2binstring(buf, buf.length);\n};\n\n\n// Convert binary string (typed, when possible)\nexports.binstring2buf = function (str) {\n  var buf = new utils.Buf8(str.length);\n  for (var i = 0, len = buf.length; i < len; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n  return buf;\n};\n\n\n// convert array to string\nexports.buf2string = function (buf, max) {\n  var i, out, c, c_len;\n  var len = max || buf.length;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  var utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nexports.utf8border = function (buf, max) {\n  var pos;\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n"],"mappings":"AAAA;AACA;;AAGA,IAAIA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAAnB,C,CAGA;AACA;AACA;AACA;AACA;;;AACA,IAAIC,YAAY,GAAG,IAAnB;AACA,IAAIC,gBAAgB,GAAG,IAAvB;;AAEA,IAAI;EAAEC,MAAM,CAACC,YAAP,CAAoBC,KAApB,CAA0B,IAA1B,EAAgC,CAAE,CAAF,CAAhC;AAAyC,CAA/C,CAAgD,OAAOC,EAAP,EAAW;EAAEL,YAAY,GAAG,KAAf;AAAuB;;AACpF,IAAI;EAAEE,MAAM,CAACC,YAAP,CAAoBC,KAApB,CAA0B,IAA1B,EAAgC,IAAIE,UAAJ,CAAe,CAAf,CAAhC;AAAqD,CAA3D,CAA4D,OAAOD,EAAP,EAAW;EAAEJ,gBAAgB,GAAG,KAAnB;AAA2B,C,CAGpG;AACA;AACA;;;AACA,IAAIM,QAAQ,GAAG,IAAIT,KAAK,CAACU,IAAV,CAAe,GAAf,CAAf;;AACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyBA,CAAC,EAA1B,EAA8B;EAC5BF,QAAQ,CAACE,CAAD,CAAR,GAAeA,CAAC,IAAI,GAAL,GAAW,CAAX,GAAeA,CAAC,IAAI,GAAL,GAAW,CAAX,GAAeA,CAAC,IAAI,GAAL,GAAW,CAAX,GAAeA,CAAC,IAAI,GAAL,GAAW,CAAX,GAAeA,CAAC,IAAI,GAAL,GAAW,CAAX,GAAe,CAA1F;AACD;;AACDF,QAAQ,CAAC,GAAD,CAAR,GAAgBA,QAAQ,CAAC,GAAD,CAAR,GAAgB,CAAhC,C,CAAmC;AAGnC;;AACAG,OAAO,CAACC,UAAR,GAAqB,UAAUC,GAAV,EAAe;EAClC,IAAIC,GAAJ;EAAA,IAASC,CAAT;EAAA,IAAYC,EAAZ;EAAA,IAAgBC,KAAhB;EAAA,IAAuBC,CAAvB;EAAA,IAA0BC,OAAO,GAAGN,GAAG,CAACO,MAAxC;EAAA,IAAgDC,OAAO,GAAG,CAA1D,CADkC,CAGlC;;EACA,KAAKJ,KAAK,GAAG,CAAb,EAAgBA,KAAK,GAAGE,OAAxB,EAAiCF,KAAK,EAAtC,EAA0C;IACxCF,CAAC,GAAGF,GAAG,CAACS,UAAJ,CAAeL,KAAf,CAAJ;;IACA,IAAI,CAACF,CAAC,GAAG,MAAL,MAAiB,MAAjB,IAA4BE,KAAK,GAAG,CAAR,GAAYE,OAA5C,EAAsD;MACpDH,EAAE,GAAGH,GAAG,CAACS,UAAJ,CAAeL,KAAK,GAAG,CAAvB,CAAL;;MACA,IAAI,CAACD,EAAE,GAAG,MAAN,MAAkB,MAAtB,EAA8B;QAC5BD,CAAC,GAAG,WAAYA,CAAC,GAAG,MAAL,IAAgB,EAA3B,KAAkCC,EAAE,GAAG,MAAvC,CAAJ;QACAC,KAAK;MACN;IACF;;IACDI,OAAO,IAAIN,CAAC,GAAG,IAAJ,GAAW,CAAX,GAAeA,CAAC,GAAG,KAAJ,GAAY,CAAZ,GAAgBA,CAAC,GAAG,OAAJ,GAAc,CAAd,GAAkB,CAA5D;EACD,CAdiC,CAgBlC;;;EACAD,GAAG,GAAG,IAAIf,KAAK,CAACU,IAAV,CAAeY,OAAf,CAAN,CAjBkC,CAmBlC;;EACA,KAAKH,CAAC,GAAG,CAAJ,EAAOD,KAAK,GAAG,CAApB,EAAuBC,CAAC,GAAGG,OAA3B,EAAoCJ,KAAK,EAAzC,EAA6C;IAC3CF,CAAC,GAAGF,GAAG,CAACS,UAAJ,CAAeL,KAAf,CAAJ;;IACA,IAAI,CAACF,CAAC,GAAG,MAAL,MAAiB,MAAjB,IAA4BE,KAAK,GAAG,CAAR,GAAYE,OAA5C,EAAsD;MACpDH,EAAE,GAAGH,GAAG,CAACS,UAAJ,CAAeL,KAAK,GAAG,CAAvB,CAAL;;MACA,IAAI,CAACD,EAAE,GAAG,MAAN,MAAkB,MAAtB,EAA8B;QAC5BD,CAAC,GAAG,WAAYA,CAAC,GAAG,MAAL,IAAgB,EAA3B,KAAkCC,EAAE,GAAG,MAAvC,CAAJ;QACAC,KAAK;MACN;IACF;;IACD,IAAIF,CAAC,GAAG,IAAR,EAAc;MACZ;MACAD,GAAG,CAACI,CAAC,EAAF,CAAH,GAAWH,CAAX;IACD,CAHD,MAGO,IAAIA,CAAC,GAAG,KAAR,EAAe;MACpB;MACAD,GAAG,CAACI,CAAC,EAAF,CAAH,GAAW,OAAQH,CAAC,KAAK,CAAzB;MACAD,GAAG,CAACI,CAAC,EAAF,CAAH,GAAW,OAAQH,CAAC,GAAG,IAAvB;IACD,CAJM,MAIA,IAAIA,CAAC,GAAG,OAAR,EAAiB;MACtB;MACAD,GAAG,CAACI,CAAC,EAAF,CAAH,GAAW,OAAQH,CAAC,KAAK,EAAzB;MACAD,GAAG,CAACI,CAAC,EAAF,CAAH,GAAW,OAAQH,CAAC,KAAK,CAAN,GAAU,IAA7B;MACAD,GAAG,CAACI,CAAC,EAAF,CAAH,GAAW,OAAQH,CAAC,GAAG,IAAvB;IACD,CALM,MAKA;MACL;MACAD,GAAG,CAACI,CAAC,EAAF,CAAH,GAAW,OAAQH,CAAC,KAAK,EAAzB;MACAD,GAAG,CAACI,CAAC,EAAF,CAAH,GAAW,OAAQH,CAAC,KAAK,EAAN,GAAW,IAA9B;MACAD,GAAG,CAACI,CAAC,EAAF,CAAH,GAAW,OAAQH,CAAC,KAAK,CAAN,GAAU,IAA7B;MACAD,GAAG,CAACI,CAAC,EAAF,CAAH,GAAW,OAAQH,CAAC,GAAG,IAAvB;IACD;EACF;;EAED,OAAOD,GAAP;AACD,CAnDD,C,CAqDA;;;AACA,SAASS,aAAT,CAAuBT,GAAvB,EAA4BU,GAA5B,EAAiC;EAC/B;EACA;EACA;EACA,IAAIA,GAAG,GAAG,KAAV,EAAiB;IACf,IAAKV,GAAG,CAACW,QAAJ,IAAgBvB,gBAAjB,IAAuC,CAACY,GAAG,CAACW,QAAL,IAAiBxB,YAA5D,EAA2E;MACzE,OAAOE,MAAM,CAACC,YAAP,CAAoBC,KAApB,CAA0B,IAA1B,EAAgCN,KAAK,CAAC2B,SAAN,CAAgBZ,GAAhB,EAAqBU,GAArB,CAAhC,CAAP;IACD;EACF;;EAED,IAAIG,MAAM,GAAG,EAAb;;EACA,KAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGM,GAApB,EAAyBN,CAAC,EAA1B,EAA8B;IAC5BS,MAAM,IAAIxB,MAAM,CAACC,YAAP,CAAoBU,GAAG,CAACI,CAAD,CAAvB,CAAV;EACD;;EACD,OAAOS,MAAP;AACD,C,CAGD;;;AACAhB,OAAO,CAACY,aAAR,GAAwB,UAAUT,GAAV,EAAe;EACrC,OAAOS,aAAa,CAACT,GAAD,EAAMA,GAAG,CAACM,MAAV,CAApB;AACD,CAFD,C,CAKA;;;AACAT,OAAO,CAACiB,aAAR,GAAwB,UAAUf,GAAV,EAAe;EACrC,IAAIC,GAAG,GAAG,IAAIf,KAAK,CAACU,IAAV,CAAeI,GAAG,CAACO,MAAnB,CAAV;;EACA,KAAK,IAAIF,CAAC,GAAG,CAAR,EAAWM,GAAG,GAAGV,GAAG,CAACM,MAA1B,EAAkCF,CAAC,GAAGM,GAAtC,EAA2CN,CAAC,EAA5C,EAAgD;IAC9CJ,GAAG,CAACI,CAAD,CAAH,GAASL,GAAG,CAACS,UAAJ,CAAeJ,CAAf,CAAT;EACD;;EACD,OAAOJ,GAAP;AACD,CAND,C,CASA;;;AACAH,OAAO,CAACkB,UAAR,GAAqB,UAAUf,GAAV,EAAegB,GAAf,EAAoB;EACvC,IAAIZ,CAAJ,EAAOa,GAAP,EAAYhB,CAAZ,EAAeiB,KAAf;EACA,IAAIR,GAAG,GAAGM,GAAG,IAAIhB,GAAG,CAACM,MAArB,CAFuC,CAIvC;EACA;EACA;;EACA,IAAIa,QAAQ,GAAG,IAAIC,KAAJ,CAAUV,GAAG,GAAG,CAAhB,CAAf;;EAEA,KAAKO,GAAG,GAAG,CAAN,EAASb,CAAC,GAAG,CAAlB,EAAqBA,CAAC,GAAGM,GAAzB,GAA+B;IAC7BT,CAAC,GAAGD,GAAG,CAACI,CAAC,EAAF,CAAP,CAD6B,CAE7B;;IACA,IAAIH,CAAC,GAAG,IAAR,EAAc;MAAEkB,QAAQ,CAACF,GAAG,EAAJ,CAAR,GAAkBhB,CAAlB;MAAqB;IAAW;;IAEhDiB,KAAK,GAAGxB,QAAQ,CAACO,CAAD,CAAhB,CAL6B,CAM7B;;IACA,IAAIiB,KAAK,GAAG,CAAZ,EAAe;MAAEC,QAAQ,CAACF,GAAG,EAAJ,CAAR,GAAkB,MAAlB;MAA0Bb,CAAC,IAAIc,KAAK,GAAG,CAAb;MAAgB;IAAW,CAPzC,CAS7B;;;IACAjB,CAAC,IAAIiB,KAAK,KAAK,CAAV,GAAc,IAAd,GAAqBA,KAAK,KAAK,CAAV,GAAc,IAAd,GAAqB,IAA/C,CAV6B,CAW7B;;IACA,OAAOA,KAAK,GAAG,CAAR,IAAad,CAAC,GAAGM,GAAxB,EAA6B;MAC3BT,CAAC,GAAIA,CAAC,IAAI,CAAN,GAAYD,GAAG,CAACI,CAAC,EAAF,CAAH,GAAW,IAA3B;MACAc,KAAK;IACN,CAf4B,CAiB7B;;;IACA,IAAIA,KAAK,GAAG,CAAZ,EAAe;MAAEC,QAAQ,CAACF,GAAG,EAAJ,CAAR,GAAkB,MAAlB;MAA0B;IAAW;;IAEtD,IAAIhB,CAAC,GAAG,OAAR,EAAiB;MACfkB,QAAQ,CAACF,GAAG,EAAJ,CAAR,GAAkBhB,CAAlB;IACD,CAFD,MAEO;MACLA,CAAC,IAAI,OAAL;MACAkB,QAAQ,CAACF,GAAG,EAAJ,CAAR,GAAkB,SAAWhB,CAAC,IAAI,EAAN,GAAY,KAAxC;MACAkB,QAAQ,CAACF,GAAG,EAAJ,CAAR,GAAkB,SAAUhB,CAAC,GAAG,KAAhC;IACD;EACF;;EAED,OAAOQ,aAAa,CAACU,QAAD,EAAWF,GAAX,CAApB;AACD,CAvCD,C,CA0CA;AACA;AACA;AACA;AACA;AACA;;;AACApB,OAAO,CAACwB,UAAR,GAAqB,UAAUrB,GAAV,EAAegB,GAAf,EAAoB;EACvC,IAAIM,GAAJ;EAEAN,GAAG,GAAGA,GAAG,IAAIhB,GAAG,CAACM,MAAjB;;EACA,IAAIU,GAAG,GAAGhB,GAAG,CAACM,MAAd,EAAsB;IAAEU,GAAG,GAAGhB,GAAG,CAACM,MAAV;EAAmB,CAJJ,CAMvC;;;EACAgB,GAAG,GAAGN,GAAG,GAAG,CAAZ;;EACA,OAAOM,GAAG,IAAI,CAAP,IAAY,CAACtB,GAAG,CAACsB,GAAD,CAAH,GAAW,IAAZ,MAAsB,IAAzC,EAA+C;IAAEA,GAAG;EAAK,CARlB,CAUvC;EACA;;;EACA,IAAIA,GAAG,GAAG,CAAV,EAAa;IAAE,OAAON,GAAP;EAAa,CAZW,CAcvC;EACA;;;EACA,IAAIM,GAAG,KAAK,CAAZ,EAAe;IAAE,OAAON,GAAP;EAAa;;EAE9B,OAAQM,GAAG,GAAG5B,QAAQ,CAACM,GAAG,CAACsB,GAAD,CAAJ,CAAd,GAA2BN,GAA5B,GAAmCM,GAAnC,GAAyCN,GAAhD;AACD,CAnBD"},"metadata":{},"sourceType":"script"}