{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _slicedToArray = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _require = require('../../src/utils'),\n    findLevelJs = _require.findLevelJs;\n\nvar _require2 = require('uint8arrays/from-string'),\n    fromString = _require2.fromString;\n\nvar _require3 = require('uint8arrays/to-string'),\n    toString = _require3.toString;\n/**\n * @typedef {import('../../src/types').Migration} Migration\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('../../src/types').MigrationProgressCallback} MigrationProgressCallback\n *\n * @typedef {{ type: 'del', key: string | Uint8Array } | { type: 'put', key: string | Uint8Array, value: Uint8Array }} Operation\n * @typedef {function (string, Uint8Array): Operation[]} UpgradeFunction\n * @typedef {function (Uint8Array, Uint8Array): Operation[]} DowngradeFunction\n */\n\n/**\n * @param {string} name\n * @param {Datastore} store\n * @param {(message: string) => void} onProgress\n */\n\n\nfunction keysToBinary(_x, _x2) {\n  return _keysToBinary.apply(this, arguments);\n}\n/**\n * @param {string} name\n * @param {Datastore} store\n * @param {(message: string) => void} onProgress\n */\n\n\nfunction _keysToBinary() {\n  _keysToBinary = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(name, store) {\n    var onProgress,\n        db,\n        upgrade,\n        _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            onProgress = _args.length > 2 && _args[2] !== undefined ? _args[2] : function () {};\n            db = findLevelJs(store); // only interested in level-js\n\n            if (db) {\n              _context.next = 5;\n              break;\n            }\n\n            onProgress(\"\".concat(name, \" did not need an upgrade\"));\n            return _context.abrupt(\"return\");\n\n          case 5:\n            onProgress(\"Upgrading \".concat(name));\n            /**\n             * @type {UpgradeFunction}\n             */\n\n            upgrade = function upgrade(key, value) {\n              return [{\n                type: 'del',\n                key: key\n              }, {\n                type: 'put',\n                key: fromString(key),\n                value: value\n              }];\n            };\n\n            _context.next = 9;\n            return withEach(db, upgrade);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _keysToBinary.apply(this, arguments);\n}\n\nfunction keysToStrings(_x3, _x4) {\n  return _keysToStrings.apply(this, arguments);\n}\n/**\n * @param {any} store\n * @returns {Datastore}\n */\n\n\nfunction _keysToStrings() {\n  _keysToStrings = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(name, store) {\n    var onProgress,\n        db,\n        downgrade,\n        _args2 = arguments;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            onProgress = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : function () {};\n            db = findLevelJs(store); // only interested in level-js\n\n            if (db) {\n              _context2.next = 5;\n              break;\n            }\n\n            onProgress(\"\".concat(name, \" did not need a downgrade\"));\n            return _context2.abrupt(\"return\");\n\n          case 5:\n            onProgress(\"Downgrading \".concat(name));\n            /**\n             * @type {DowngradeFunction}\n             */\n\n            downgrade = function downgrade(key, value) {\n              return [{\n                type: 'del',\n                key: key\n              }, {\n                type: 'put',\n                key: toString(key),\n                value: value\n              }];\n            };\n\n            _context2.next = 9;\n            return withEach(db, downgrade);\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _keysToStrings.apply(this, arguments);\n}\n\nfunction unwrap(store) {\n  if (store.child) {\n    return unwrap(store.child);\n  }\n\n  return store;\n}\n/**\n * @param {import('../../src/types').Backends} backends\n * @param {MigrationProgressCallback} onProgress\n * @param {*} fn\n */\n\n\nfunction process(_x5, _x6, _x7) {\n  return _process.apply(this, arguments);\n}\n/** @type {Migration} */\n\n\nfunction _process() {\n  _process = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(backends, onProgress, fn) {\n    var datastores, migrated, progress, _iterator, _step, _step$value, name, store;\n\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            /**\n             * @type {{ name: string, store: Datastore }[]}\n             */\n            datastores = Object.entries(backends).map(function (_ref) {\n              var _ref2 = _slicedToArray(_ref, 2),\n                  key = _ref2[0],\n                  backend = _ref2[1];\n\n              return {\n                key: key,\n                backend: unwrap(backend)\n              };\n            }).filter(function (_ref3) {\n              var key = _ref3.key,\n                  backend = _ref3.backend;\n              return backend.constructor.name === 'LevelDatastore';\n            }).map(function (_ref4) {\n              var key = _ref4.key,\n                  backend = _ref4.backend;\n              return {\n                name: key,\n                store: backend\n              };\n            });\n            onProgress(0, \"Migrating \".concat(datastores.length, \" dbs\"));\n            migrated = 0;\n            /**\n             * @param {string} message\n             */\n\n            progress = function progress(message) {\n              onProgress(Math.round(migrated / datastores.length * 100), message);\n            };\n\n            _iterator = _createForOfIteratorHelper(datastores);\n            _context3.prev = 5;\n\n            _iterator.s();\n\n          case 7:\n            if ((_step = _iterator.n()).done) {\n              _context3.next = 21;\n              break;\n            }\n\n            _step$value = _step.value, name = _step$value.name, store = _step$value.store;\n            _context3.next = 11;\n            return store.open();\n\n          case 11:\n            _context3.prev = 11;\n            _context3.next = 14;\n            return fn(name, store, progress);\n\n          case 14:\n            _context3.prev = 14;\n            migrated++;\n            _context3.next = 18;\n            return store.close();\n\n          case 18:\n            return _context3.finish(14);\n\n          case 19:\n            _context3.next = 7;\n            break;\n\n          case 21:\n            _context3.next = 26;\n            break;\n\n          case 23:\n            _context3.prev = 23;\n            _context3.t0 = _context3[\"catch\"](5);\n\n            _iterator.e(_context3.t0);\n\n          case 26:\n            _context3.prev = 26;\n\n            _iterator.f();\n\n            return _context3.finish(26);\n\n          case 29:\n            onProgress(100, \"Migrated \".concat(datastores.length, \" dbs\"));\n\n          case 30:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[5, 23, 26, 29], [11,, 14, 19]]);\n  }));\n  return _process.apply(this, arguments);\n}\n\nmodule.exports = {\n  version: 10,\n  description: 'Migrates datastore-level keys to binary',\n  migrate: function migrate(backends) {\n    var onProgress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\n    return process(backends, onProgress, keysToBinary);\n  },\n  revert: function revert(backends) {\n    var onProgress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\n    return process(backends, onProgress, keysToStrings);\n  }\n};\n/**\n * Uses the upgrade strategy from level-js@5.x.x - note we can't call the `.upgrade` command\n * directly because it will be removed in level-js@6.x.x and we can't guarantee users will\n * have migrated by then - e.g. they may jump from level-js@4.x.x straight to level-js@6.x.x\n * so we have to duplicate the code here.\n *\n * @param {any} db\n * @param {UpgradeFunction | DowngradeFunction} fn\n * @returns {Promise<void>}\n */\n\nfunction withEach(db, fn) {\n  /**\n   * @param {Operation[]} operations\n   * @param {(error?: Error) => void} next\n   */\n  function batch(operations, next) {\n    var store = db.store('readwrite');\n    var transaction = store.transaction;\n    var index = 0;\n    /** @type {Error | undefined} */\n\n    var error;\n\n    transaction.onabort = function () {\n      return next(error || transaction.error || new Error('aborted by user'));\n    };\n\n    transaction.oncomplete = function () {\n      return next();\n    };\n\n    function loop() {\n      var op = operations[index++];\n      var key = op.key;\n      var req;\n\n      try {\n        req = op.type === 'del' ? store.delete(key) : store.put(op.value, key);\n      } catch (err) {\n        error = err;\n        transaction.abort();\n        return;\n      }\n\n      if (index < operations.length) {\n        req.onsuccess = loop;\n      }\n    }\n\n    loop();\n  }\n\n  return new Promise(function (resolve, reject) {\n    var it = db.iterator(); // raw keys and values only\n\n    /**\n     * @template T\n     * @param {T} data\n     */\n\n    var id = function id(data) {\n      return data;\n    };\n\n    it._deserializeKey = it._deserializeValue = id;\n    next();\n\n    function next() {\n      /**\n       * @param {Error | undefined} err\n       * @param {string | undefined} key\n       * @param {Uint8Array} value\n       */\n      var handleNext = function handleNext(err, key, value) {\n        if (err || key === undefined) {\n          /**\n           * @param {Error | undefined} err2\n           */\n          var handleEnd = function handleEnd(err2) {\n            if (err2) {\n              reject(err2);\n              return;\n            }\n\n            resolve();\n          };\n\n          it.end(handleEnd);\n          return;\n        } // @ts-ignore\n\n\n        batch(fn(key, value), next);\n      };\n\n      it.next(handleNext);\n    }\n  });\n}","map":{"version":3,"names":["require","findLevelJs","fromString","toString","keysToBinary","name","store","onProgress","db","upgrade","key","value","type","withEach","keysToStrings","downgrade","unwrap","child","process","backends","fn","datastores","Object","entries","map","backend","filter","constructor","length","migrated","progress","message","Math","round","open","close","module","exports","version","description","migrate","revert","batch","operations","next","transaction","index","error","onabort","Error","oncomplete","loop","op","req","delete","put","err","abort","onsuccess","Promise","resolve","reject","it","iterator","id","data","_deserializeKey","_deserializeValue","handleNext","undefined","handleEnd","err2","end"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-repo-migrations/migrations/migration-10/index.js"],"sourcesContent":["'use strict'\n\nconst {\n  findLevelJs\n} = require('../../src/utils')\nconst { fromString } = require('uint8arrays/from-string')\nconst { toString } = require('uint8arrays/to-string')\n\n/**\n * @typedef {import('../../src/types').Migration} Migration\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('../../src/types').MigrationProgressCallback} MigrationProgressCallback\n *\n * @typedef {{ type: 'del', key: string | Uint8Array } | { type: 'put', key: string | Uint8Array, value: Uint8Array }} Operation\n * @typedef {function (string, Uint8Array): Operation[]} UpgradeFunction\n * @typedef {function (Uint8Array, Uint8Array): Operation[]} DowngradeFunction\n */\n\n/**\n * @param {string} name\n * @param {Datastore} store\n * @param {(message: string) => void} onProgress\n */\nasync function keysToBinary (name, store, onProgress = () => {}) {\n  const db = findLevelJs(store)\n\n  // only interested in level-js\n  if (!db) {\n    onProgress(`${name} did not need an upgrade`)\n\n    return\n  }\n\n  onProgress(`Upgrading ${name}`)\n\n  /**\n   * @type {UpgradeFunction}\n   */\n  const upgrade = (key, value) => {\n    return [\n      { type: 'del', key: key },\n      { type: 'put', key: fromString(key), value: value }\n    ]\n  }\n\n  await withEach(db, upgrade)\n}\n\n/**\n * @param {string} name\n * @param {Datastore} store\n * @param {(message: string) => void} onProgress\n */\nasync function keysToStrings (name, store, onProgress = () => {}) {\n  const db = findLevelJs(store)\n\n  // only interested in level-js\n  if (!db) {\n    onProgress(`${name} did not need a downgrade`)\n\n    return\n  }\n\n  onProgress(`Downgrading ${name}`)\n\n  /**\n   * @type {DowngradeFunction}\n   */\n  const downgrade = (key, value) => {\n    return [\n      { type: 'del', key: key },\n      { type: 'put', key: toString(key), value: value }\n    ]\n  }\n\n  await withEach(db, downgrade)\n}\n\n/**\n * @param {any} store\n * @returns {Datastore}\n */\nfunction unwrap (store) {\n  if (store.child) {\n    return unwrap(store.child)\n  }\n\n  return store\n}\n\n/**\n * @param {import('../../src/types').Backends} backends\n * @param {MigrationProgressCallback} onProgress\n * @param {*} fn\n */\nasync function process (backends, onProgress, fn) {\n  /**\n   * @type {{ name: string, store: Datastore }[]}\n   */\n  const datastores = Object.entries(backends)\n    .map(([key, backend]) => ({ key, backend: unwrap(backend) }))\n    .filter(({ key, backend }) => backend.constructor.name === 'LevelDatastore')\n    .map(({ key, backend }) => ({\n      name: key,\n      store: backend\n    }))\n\n  onProgress(0, `Migrating ${datastores.length} dbs`)\n  let migrated = 0\n\n  /**\n   * @param {string} message\n   */\n  const progress = (message) => {\n    onProgress(Math.round((migrated / datastores.length) * 100), message)\n  }\n\n  for (const { name, store } of datastores) {\n    await store.open()\n\n    try {\n      await fn(name, store, progress)\n    } finally {\n      migrated++\n      await store.close()\n    }\n  }\n\n  onProgress(100, `Migrated ${datastores.length} dbs`)\n}\n\n/** @type {Migration} */\nmodule.exports = {\n  version: 10,\n  description: 'Migrates datastore-level keys to binary',\n  migrate: (backends, onProgress = () => {}) => {\n    return process(backends, onProgress, keysToBinary)\n  },\n  revert: (backends, onProgress = () => {}) => {\n    return process(backends, onProgress, keysToStrings)\n  }\n}\n\n/**\n * Uses the upgrade strategy from level-js@5.x.x - note we can't call the `.upgrade` command\n * directly because it will be removed in level-js@6.x.x and we can't guarantee users will\n * have migrated by then - e.g. they may jump from level-js@4.x.x straight to level-js@6.x.x\n * so we have to duplicate the code here.\n *\n * @param {any} db\n * @param {UpgradeFunction | DowngradeFunction} fn\n * @returns {Promise<void>}\n */\nfunction withEach (db, fn) {\n  /**\n   * @param {Operation[]} operations\n   * @param {(error?: Error) => void} next\n   */\n  function batch (operations, next) {\n    const store = db.store('readwrite')\n    const transaction = store.transaction\n    let index = 0\n    /** @type {Error | undefined} */\n    let error\n\n    transaction.onabort = () => next(error || transaction.error || new Error('aborted by user'))\n    transaction.oncomplete = () => next()\n\n    function loop () {\n      const op = operations[index++]\n      const key = op.key\n      let req\n\n      try {\n        req = op.type === 'del' ? store.delete(key) : store.put(op.value, key)\n      } catch (err) {\n        error = err\n        transaction.abort()\n        return\n      }\n\n      if (index < operations.length) {\n        req.onsuccess = loop\n      }\n    }\n\n    loop()\n  }\n\n  return new Promise((resolve, reject) => {\n    const it = db.iterator()\n    // raw keys and values only\n    /**\n     * @template T\n     * @param {T} data\n     */\n    const id = (data) => data\n    it._deserializeKey = it._deserializeValue = id\n    next()\n\n    function next () {\n      /**\n       * @param {Error | undefined} err\n       * @param {string | undefined} key\n       * @param {Uint8Array} value\n       */\n      const handleNext = (err, key, value) => {\n        if (err || key === undefined) {\n          /**\n           * @param {Error | undefined} err2\n           */\n          const handleEnd = (err2) => {\n            if (err2) {\n              reject(err2)\n              return\n            }\n\n            resolve()\n          }\n\n          it.end(handleEnd)\n\n          return\n        }\n\n        // @ts-ignore\n        batch(fn(key, value), next)\n      }\n      it.next(handleNext)\n    }\n  })\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}