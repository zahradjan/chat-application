{"ast":null,"code":"'use strict';\n\nconst pMapSeries = require('p-map-series');\n\nconst AccessController = require('./access-controller-interface');\n\nconst ensureAddress = require('./utils/ensure-ac-address');\n\nconst type = 'orbitdb';\n\nclass OrbitDBAccessController extends AccessController {\n  constructor(orbitdb, options) {\n    super();\n    this._orbitdb = orbitdb;\n    this._db = null;\n    this._options = options || {};\n  } // Returns the type of the access controller\n\n\n  static get type() {\n    return type;\n  } // Returns the address of the OrbitDB used as the AC\n\n\n  get address() {\n    return this._db.address;\n  } // Return true if entry is allowed to be added to the database\n\n\n  async canAppend(entry, identityProvider) {\n    // Write keys and admins keys are allowed\n    const access = new Set([...this.get('write'), ...this.get('admin')]); // If the ACL contains the writer's public key or it contains '*'\n\n    if (access.has(entry.identity.id) || access.has('*')) {\n      const verifiedIdentity = await identityProvider.verifyIdentity(entry.identity); // Allow access if identity verifies\n\n      return verifiedIdentity;\n    }\n\n    return false;\n  }\n\n  get capabilities() {\n    if (this._db) {\n      const capabilities = this._db.index;\n\n      const toSet = e => {\n        const key = e[0];\n        capabilities[key] = new Set([...(capabilities[key] || []), ...e[1]]);\n      }; // Merge with the access controller of the database\n      // and make sure all values are Sets\n\n\n      Object.entries({ ...capabilities,\n        // Add the root access controller's 'write' access list\n        // as admins on this controller\n        ...{\n          admin: new Set([...(capabilities.admin || []), ...this._db.access.write])\n        }\n      }).forEach(toSet);\n      return capabilities;\n    }\n\n    return {};\n  }\n\n  get(capability) {\n    return this.capabilities[capability] || new Set([]);\n  }\n\n  async close() {\n    await this._db.close();\n  }\n\n  async load(address) {\n    if (this._db) {\n      await this._db.close();\n    } // Force '<address>/_access' naming for the database\n\n\n    this._db = await this._orbitdb.keyvalue(ensureAddress(address), {\n      // use ipfs controller as a immutable \"root controller\"\n      accessController: {\n        type: 'ipfs',\n        write: this._options.admin || [this._orbitdb.identity.id]\n      },\n      sync: true\n    });\n\n    this._db.events.on('ready', this._onUpdate.bind(this));\n\n    this._db.events.on('write', this._onUpdate.bind(this));\n\n    this._db.events.on('replicated', this._onUpdate.bind(this));\n\n    await this._db.load();\n  }\n\n  async save() {\n    // return the manifest data\n    return {\n      address: this._db.address.toString()\n    };\n  }\n\n  async grant(capability, key) {\n    // Merge current keys with the new key\n    const capabilities = new Set([...(this._db.get(capability) || []), ...[key]]);\n    await this._db.put(capability, Array.from(capabilities.values()));\n  }\n\n  async revoke(capability, key) {\n    const capabilities = new Set(this._db.get(capability) || []);\n    capabilities.delete(key);\n\n    if (capabilities.size > 0) {\n      await this._db.put(capability, Array.from(capabilities.values()));\n    } else {\n      await this._db.del(capability);\n    }\n  }\n  /* Private methods */\n\n\n  _onUpdate() {\n    this.emit('updated');\n  }\n  /* Factory */\n\n\n  static async create(orbitdb) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const ac = new OrbitDBAccessController(orbitdb, options);\n    await ac.load(options.address || options.name || 'default-access-controller'); // Add write access from options\n\n    if (options.write && !options.address) {\n      await pMapSeries(options.write, async e => ac.grant('write', e));\n    }\n\n    return ac;\n  }\n\n}\n\nmodule.exports = OrbitDBAccessController;","map":{"version":3,"names":["pMapSeries","require","AccessController","ensureAddress","type","OrbitDBAccessController","constructor","orbitdb","options","_orbitdb","_db","_options","address","canAppend","entry","identityProvider","access","Set","get","has","identity","id","verifiedIdentity","verifyIdentity","capabilities","index","toSet","e","key","Object","entries","admin","write","forEach","capability","close","load","keyvalue","accessController","sync","events","on","_onUpdate","bind","save","toString","grant","put","Array","from","values","revoke","delete","size","del","emit","create","ac","name","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/orbit-db-access-controllers/src/orbitdb-access-controller.js"],"sourcesContent":["'use strict'\n\nconst pMapSeries = require('p-map-series')\nconst AccessController = require('./access-controller-interface')\nconst ensureAddress = require('./utils/ensure-ac-address')\n\nconst type = 'orbitdb'\n\nclass OrbitDBAccessController extends AccessController {\n  constructor (orbitdb, options) {\n    super()\n    this._orbitdb = orbitdb\n    this._db = null\n    this._options = options || {}\n  }\n\n  // Returns the type of the access controller\n  static get type () { return type }\n\n  // Returns the address of the OrbitDB used as the AC\n  get address () {\n    return this._db.address\n  }\n\n  // Return true if entry is allowed to be added to the database\n  async canAppend (entry, identityProvider) {\n    // Write keys and admins keys are allowed\n    const access = new Set([...this.get('write'), ...this.get('admin')])\n    // If the ACL contains the writer's public key or it contains '*'\n    if (access.has(entry.identity.id) || access.has('*')) {\n      const verifiedIdentity = await identityProvider.verifyIdentity(entry.identity)\n      // Allow access if identity verifies\n      return verifiedIdentity\n    }\n\n    return false\n  }\n\n  get capabilities () {\n    if (this._db) {\n      const capabilities = this._db.index\n\n      const toSet = (e) => {\n        const key = e[0]\n        capabilities[key] = new Set([...(capabilities[key] || []), ...e[1]])\n      }\n\n      // Merge with the access controller of the database\n      // and make sure all values are Sets\n      Object.entries({\n        ...capabilities,\n        // Add the root access controller's 'write' access list\n        // as admins on this controller\n        ...{ admin: new Set([...(capabilities.admin || []), ...this._db.access.write]) }\n      }).forEach(toSet)\n\n      return capabilities\n    }\n    return {}\n  }\n\n  get (capability) {\n    return this.capabilities[capability] || new Set([])\n  }\n\n  async close () {\n    await this._db.close()\n  }\n\n  async load (address) {\n    if (this._db) { await this._db.close() }\n\n    // Force '<address>/_access' naming for the database\n    this._db = await this._orbitdb.keyvalue(ensureAddress(address), {\n      // use ipfs controller as a immutable \"root controller\"\n      accessController: {\n        type: 'ipfs',\n        write: this._options.admin || [this._orbitdb.identity.id]\n      },\n      sync: true\n    })\n\n    this._db.events.on('ready', this._onUpdate.bind(this))\n    this._db.events.on('write', this._onUpdate.bind(this))\n    this._db.events.on('replicated', this._onUpdate.bind(this))\n\n    await this._db.load()\n  }\n\n  async save () {\n    // return the manifest data\n    return {\n      address: this._db.address.toString()\n    }\n  }\n\n  async grant (capability, key) {\n    // Merge current keys with the new key\n    const capabilities = new Set([...(this._db.get(capability) || []), ...[key]])\n    await this._db.put(capability, Array.from(capabilities.values()))\n  }\n\n  async revoke (capability, key) {\n    const capabilities = new Set(this._db.get(capability) || [])\n    capabilities.delete(key)\n    if (capabilities.size > 0) {\n      await this._db.put(capability, Array.from(capabilities.values()))\n    } else {\n      await this._db.del(capability)\n    }\n  }\n\n  /* Private methods */\n  _onUpdate () {\n    this.emit('updated')\n  }\n\n  /* Factory */\n  static async create (orbitdb, options = {}) {\n    const ac = new OrbitDBAccessController(orbitdb, options)\n    await ac.load(options.address || options.name || 'default-access-controller')\n\n    // Add write access from options\n    if (options.write && !options.address) {\n      await pMapSeries(options.write, async (e) => ac.grant('write', e))\n    }\n\n    return ac\n  }\n}\n\nmodule.exports = OrbitDBAccessController\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}