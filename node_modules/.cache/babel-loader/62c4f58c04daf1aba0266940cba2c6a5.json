{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _inherits = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar debug = require('debug');\n\nvar log = Object.assign(debug('libp2p:peer-store:proto-book'), {\n  error: debug('libp2p:peer-store:proto-book:err')\n});\n\nvar errcode = require('err-code');\n\nvar PeerId = require('peer-id');\n\nvar Book = require('./book');\n\nvar _require = require('../errors'),\n    ERR_INVALID_PARAMETERS = _require.codes.ERR_INVALID_PARAMETERS;\n/**\n * @typedef {import('./')} PeerStore\n */\n\n/**\n * @extends {Book}\n *\n * @fires ProtoBook#change:protocols\n */\n\n\nvar ProtoBook = /*#__PURE__*/function (_Book) {\n  _inherits(ProtoBook, _Book);\n\n  var _super = _createSuper(ProtoBook);\n\n  /**\n   * The ProtoBook is responsible for keeping the known supported\n   * protocols of a peer.\n   *\n   * @class\n   * @param {PeerStore} peerStore\n   */\n  function ProtoBook(peerStore) {\n    var _this;\n\n    _classCallCheck(this, ProtoBook);\n\n    /**\n     * PeerStore Event emitter, used by the ProtoBook to emit:\n     * \"change:protocols\" - emitted when the known protocols of a peer change.\n     */\n    _this = _super.call(this, {\n      peerStore: peerStore,\n      eventName: 'change:protocols',\n      eventProperty: 'protocols',\n      eventTransformer: function eventTransformer(data) {\n        return Array.from(data);\n      }\n    });\n    /**\n     * Map known peers to their known protocols.\n     *\n     * @type {Map<string, Set<string>>}\n     */\n\n    _this.data = new Map();\n    return _this;\n  }\n  /**\n   * Set known protocols of a provided peer.\n   * If the peer was not known before, it will be added.\n   *\n   * @override\n   * @param {PeerId} peerId\n   * @param {string[]} protocols\n   * @returns {ProtoBook}\n   */\n\n\n  _createClass(ProtoBook, [{\n    key: \"set\",\n    value: function set(peerId, protocols) {\n      if (!PeerId.isPeerId(peerId)) {\n        log.error('peerId must be an instance of peer-id to store data');\n        throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n      }\n\n      if (!protocols) {\n        log.error('protocols must be provided to store data');\n        throw errcode(new Error('protocols must be provided'), ERR_INVALID_PARAMETERS);\n      }\n\n      var id = peerId.toB58String();\n      var recSet = this.data.get(id);\n      var newSet = new Set(protocols);\n      /**\n       * @param {Set<string>} a\n       * @param {Set<string>} b\n       */\n\n      var isSetEqual = function isSetEqual(a, b) {\n        return a.size === b.size && _toConsumableArray(a).every(function (value) {\n          return b.has(value);\n        });\n      }; // Already knows the peer and the recorded protocols are the same?\n      // If yes, no changes needed!\n\n\n      if (recSet && isSetEqual(recSet, newSet)) {\n        log(\"the protocols provided to store are equal to the already stored for \".concat(id));\n        return this;\n      }\n\n      this._setData(peerId, newSet);\n\n      log(\"stored provided protocols for \".concat(id));\n      return this;\n    }\n    /**\n     * Adds known protocols of a provided peer.\n     * If the peer was not known before, it will be added.\n     *\n     * @param {PeerId} peerId\n     * @param {string[]} protocols\n     * @returns {ProtoBook}\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(peerId, protocols) {\n      if (!PeerId.isPeerId(peerId)) {\n        log.error('peerId must be an instance of peer-id to store data');\n        throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n      }\n\n      if (!protocols) {\n        log.error('protocols must be provided to store data');\n        throw errcode(new Error('protocols must be provided'), ERR_INVALID_PARAMETERS);\n      }\n\n      var id = peerId.toB58String();\n      var recSet = this.data.get(id) || new Set();\n      var newSet = new Set([].concat(_toConsumableArray(recSet), _toConsumableArray(protocols))); // Set Union\n      // Any new protocol added?\n\n      if (recSet.size === newSet.size) {\n        log(\"the protocols provided to store are already stored for \".concat(id));\n        return this;\n      }\n\n      this._setData(peerId, newSet);\n\n      log(\"added provided protocols for \".concat(id));\n      return this;\n    }\n    /**\n     * Removes known protocols of a provided peer.\n     * If the protocols did not exist before, nothing will be done.\n     *\n     * @param {PeerId} peerId\n     * @param {string[]} protocols\n     * @returns {ProtoBook}\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(peerId, protocols) {\n      if (!PeerId.isPeerId(peerId)) {\n        log.error('peerId must be an instance of peer-id to store data');\n        throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n      }\n\n      if (!protocols) {\n        log.error('protocols must be provided to store data');\n        throw errcode(new Error('protocols must be provided'), ERR_INVALID_PARAMETERS);\n      }\n\n      var id = peerId.toB58String();\n      var recSet = this.data.get(id);\n\n      if (recSet) {\n        var newSet = new Set(_toConsumableArray(recSet).filter(function (p) {\n          return !protocols.includes(p);\n        })); // Any protocol removed?\n\n        if (recSet.size === newSet.size) {\n          return this;\n        }\n\n        this._setData(peerId, newSet);\n\n        log(\"removed provided protocols for \".concat(id));\n      }\n\n      return this;\n    }\n  }]);\n\n  return ProtoBook;\n}(Book);\n\nmodule.exports = ProtoBook;","map":{"version":3,"names":["debug","require","log","Object","assign","error","errcode","PeerId","Book","ERR_INVALID_PARAMETERS","codes","ProtoBook","peerStore","eventName","eventProperty","eventTransformer","data","Array","from","Map","peerId","protocols","isPeerId","Error","id","toB58String","recSet","get","newSet","Set","isSetEqual","a","b","size","every","value","has","_setData","filter","p","includes","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p/src/peer-store/proto-book.js"],"sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = Object.assign(debug('libp2p:peer-store:proto-book'), {\n  error: debug('libp2p:peer-store:proto-book:err')\n})\nconst errcode = require('err-code')\nconst PeerId = require('peer-id')\n\nconst Book = require('./book')\n\nconst {\n  codes: { ERR_INVALID_PARAMETERS }\n} = require('../errors')\n\n/**\n * @typedef {import('./')} PeerStore\n */\n\n/**\n * @extends {Book}\n *\n * @fires ProtoBook#change:protocols\n */\nclass ProtoBook extends Book {\n  /**\n   * The ProtoBook is responsible for keeping the known supported\n   * protocols of a peer.\n   *\n   * @class\n   * @param {PeerStore} peerStore\n   */\n  constructor (peerStore) {\n    /**\n     * PeerStore Event emitter, used by the ProtoBook to emit:\n     * \"change:protocols\" - emitted when the known protocols of a peer change.\n     */\n    super({\n      peerStore,\n      eventName: 'change:protocols',\n      eventProperty: 'protocols',\n      eventTransformer: (data) => Array.from(data)\n    })\n\n    /**\n     * Map known peers to their known protocols.\n     *\n     * @type {Map<string, Set<string>>}\n     */\n    this.data = new Map()\n  }\n\n  /**\n   * Set known protocols of a provided peer.\n   * If the peer was not known before, it will be added.\n   *\n   * @override\n   * @param {PeerId} peerId\n   * @param {string[]} protocols\n   * @returns {ProtoBook}\n   */\n  set (peerId, protocols) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data')\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    if (!protocols) {\n      log.error('protocols must be provided to store data')\n      throw errcode(new Error('protocols must be provided'), ERR_INVALID_PARAMETERS)\n    }\n\n    const id = peerId.toB58String()\n    const recSet = this.data.get(id)\n    const newSet = new Set(protocols)\n\n    /**\n     * @param {Set<string>} a\n     * @param {Set<string>} b\n     */\n    const isSetEqual = (a, b) => a.size === b.size && [...a].every(value => b.has(value))\n\n    // Already knows the peer and the recorded protocols are the same?\n    // If yes, no changes needed!\n    if (recSet && isSetEqual(recSet, newSet)) {\n      log(`the protocols provided to store are equal to the already stored for ${id}`)\n      return this\n    }\n\n    this._setData(peerId, newSet)\n    log(`stored provided protocols for ${id}`)\n\n    return this\n  }\n\n  /**\n   * Adds known protocols of a provided peer.\n   * If the peer was not known before, it will be added.\n   *\n   * @param {PeerId} peerId\n   * @param {string[]} protocols\n   * @returns {ProtoBook}\n   */\n  add (peerId, protocols) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data')\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    if (!protocols) {\n      log.error('protocols must be provided to store data')\n      throw errcode(new Error('protocols must be provided'), ERR_INVALID_PARAMETERS)\n    }\n\n    const id = peerId.toB58String()\n    const recSet = this.data.get(id) || new Set()\n    const newSet = new Set([...recSet, ...protocols]) // Set Union\n\n    // Any new protocol added?\n    if (recSet.size === newSet.size) {\n      log(`the protocols provided to store are already stored for ${id}`)\n      return this\n    }\n\n    this._setData(peerId, newSet)\n    log(`added provided protocols for ${id}`)\n\n    return this\n  }\n\n  /**\n   * Removes known protocols of a provided peer.\n   * If the protocols did not exist before, nothing will be done.\n   *\n   * @param {PeerId} peerId\n   * @param {string[]} protocols\n   * @returns {ProtoBook}\n   */\n  remove (peerId, protocols) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data')\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    if (!protocols) {\n      log.error('protocols must be provided to store data')\n      throw errcode(new Error('protocols must be provided'), ERR_INVALID_PARAMETERS)\n    }\n\n    const id = peerId.toB58String()\n    const recSet = this.data.get(id)\n\n    if (recSet) {\n      const newSet = new Set([\n        ...recSet\n      ].filter((p) => !protocols.includes(p)))\n\n      // Any protocol removed?\n      if (recSet.size === newSet.size) {\n        return this\n      }\n\n      this._setData(peerId, newSet)\n      log(`removed provided protocols for ${id}`)\n    }\n\n    return this\n  }\n}\n\nmodule.exports = ProtoBook\n"],"mappings":"AAAA;;;;;;;;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMC,GAAG,GAAGC,MAAM,CAACC,MAAP,CAAcJ,KAAK,CAAC,8BAAD,CAAnB,EAAqD;EAC/DK,KAAK,EAAEL,KAAK,CAAC,kCAAD;AADmD,CAArD,CAAZ;;AAGA,IAAMM,OAAO,GAAGL,OAAO,CAAC,UAAD,CAAvB;;AACA,IAAMM,MAAM,GAAGN,OAAO,CAAC,SAAD,CAAtB;;AAEA,IAAMO,IAAI,GAAGP,OAAO,CAAC,QAAD,CAApB;;AAEA,eAEIA,OAAO,CAAC,WAAD,CAFX;AAAA,IACWQ,sBADX,YACEC,KADF,CACWD,sBADX;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;IACME,S;;;;;EACJ;AACF;AACA;AACA;AACA;AACA;AACA;EACE,mBAAaC,SAAb,EAAwB;IAAA;;IAAA;;IACtB;AACJ;AACA;AACA;IACI,0BAAM;MACJA,SAAS,EAATA,SADI;MAEJC,SAAS,EAAE,kBAFP;MAGJC,aAAa,EAAE,WAHX;MAIJC,gBAAgB,EAAE,0BAACC,IAAD;QAAA,OAAUC,KAAK,CAACC,IAAN,CAAWF,IAAX,CAAV;MAAA;IAJd,CAAN;IAOA;AACJ;AACA;AACA;AACA;;IACI,MAAKA,IAAL,GAAY,IAAIG,GAAJ,EAAZ;IAjBsB;EAkBvB;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;WACE,aAAKC,MAAL,EAAaC,SAAb,EAAwB;MACtB,IAAI,CAACd,MAAM,CAACe,QAAP,CAAgBF,MAAhB,CAAL,EAA8B;QAC5BlB,GAAG,CAACG,KAAJ,CAAU,qDAAV;QACA,MAAMC,OAAO,CAAC,IAAIiB,KAAJ,CAAU,uCAAV,CAAD,EAAqDd,sBAArD,CAAb;MACD;;MAED,IAAI,CAACY,SAAL,EAAgB;QACdnB,GAAG,CAACG,KAAJ,CAAU,0CAAV;QACA,MAAMC,OAAO,CAAC,IAAIiB,KAAJ,CAAU,4BAAV,CAAD,EAA0Cd,sBAA1C,CAAb;MACD;;MAED,IAAMe,EAAE,GAAGJ,MAAM,CAACK,WAAP,EAAX;MACA,IAAMC,MAAM,GAAG,KAAKV,IAAL,CAAUW,GAAV,CAAcH,EAAd,CAAf;MACA,IAAMI,MAAM,GAAG,IAAIC,GAAJ,CAAQR,SAAR,CAAf;MAEA;AACJ;AACA;AACA;;MACI,IAAMS,UAAU,GAAG,SAAbA,UAAa,CAACC,CAAD,EAAIC,CAAJ;QAAA,OAAUD,CAAC,CAACE,IAAF,KAAWD,CAAC,CAACC,IAAb,IAAqB,mBAAIF,CAAJ,EAAOG,KAAP,CAAa,UAAAC,KAAK;UAAA,OAAIH,CAAC,CAACI,GAAF,CAAMD,KAAN,CAAJ;QAAA,CAAlB,CAA/B;MAAA,CAAnB,CAnBsB,CAqBtB;MACA;;;MACA,IAAIT,MAAM,IAAII,UAAU,CAACJ,MAAD,EAASE,MAAT,CAAxB,EAA0C;QACxC1B,GAAG,+EAAwEsB,EAAxE,EAAH;QACA,OAAO,IAAP;MACD;;MAED,KAAKa,QAAL,CAAcjB,MAAd,EAAsBQ,MAAtB;;MACA1B,GAAG,yCAAkCsB,EAAlC,EAAH;MAEA,OAAO,IAAP;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,aAAKJ,MAAL,EAAaC,SAAb,EAAwB;MACtB,IAAI,CAACd,MAAM,CAACe,QAAP,CAAgBF,MAAhB,CAAL,EAA8B;QAC5BlB,GAAG,CAACG,KAAJ,CAAU,qDAAV;QACA,MAAMC,OAAO,CAAC,IAAIiB,KAAJ,CAAU,uCAAV,CAAD,EAAqDd,sBAArD,CAAb;MACD;;MAED,IAAI,CAACY,SAAL,EAAgB;QACdnB,GAAG,CAACG,KAAJ,CAAU,0CAAV;QACA,MAAMC,OAAO,CAAC,IAAIiB,KAAJ,CAAU,4BAAV,CAAD,EAA0Cd,sBAA1C,CAAb;MACD;;MAED,IAAMe,EAAE,GAAGJ,MAAM,CAACK,WAAP,EAAX;MACA,IAAMC,MAAM,GAAG,KAAKV,IAAL,CAAUW,GAAV,CAAcH,EAAd,KAAqB,IAAIK,GAAJ,EAApC;MACA,IAAMD,MAAM,GAAG,IAAIC,GAAJ,8BAAYH,MAAZ,sBAAuBL,SAAvB,GAAf,CAbsB,CAa4B;MAElD;;MACA,IAAIK,MAAM,CAACO,IAAP,KAAgBL,MAAM,CAACK,IAA3B,EAAiC;QAC/B/B,GAAG,kEAA2DsB,EAA3D,EAAH;QACA,OAAO,IAAP;MACD;;MAED,KAAKa,QAAL,CAAcjB,MAAd,EAAsBQ,MAAtB;;MACA1B,GAAG,wCAAiCsB,EAAjC,EAAH;MAEA,OAAO,IAAP;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,gBAAQJ,MAAR,EAAgBC,SAAhB,EAA2B;MACzB,IAAI,CAACd,MAAM,CAACe,QAAP,CAAgBF,MAAhB,CAAL,EAA8B;QAC5BlB,GAAG,CAACG,KAAJ,CAAU,qDAAV;QACA,MAAMC,OAAO,CAAC,IAAIiB,KAAJ,CAAU,uCAAV,CAAD,EAAqDd,sBAArD,CAAb;MACD;;MAED,IAAI,CAACY,SAAL,EAAgB;QACdnB,GAAG,CAACG,KAAJ,CAAU,0CAAV;QACA,MAAMC,OAAO,CAAC,IAAIiB,KAAJ,CAAU,4BAAV,CAAD,EAA0Cd,sBAA1C,CAAb;MACD;;MAED,IAAMe,EAAE,GAAGJ,MAAM,CAACK,WAAP,EAAX;MACA,IAAMC,MAAM,GAAG,KAAKV,IAAL,CAAUW,GAAV,CAAcH,EAAd,CAAf;;MAEA,IAAIE,MAAJ,EAAY;QACV,IAAME,MAAM,GAAG,IAAIC,GAAJ,CAAQ,mBAClBH,MADkB,EAErBY,MAFqB,CAEd,UAACC,CAAD;UAAA,OAAO,CAAClB,SAAS,CAACmB,QAAV,CAAmBD,CAAnB,CAAR;QAAA,CAFc,CAAR,CAAf,CADU,CAKV;;QACA,IAAIb,MAAM,CAACO,IAAP,KAAgBL,MAAM,CAACK,IAA3B,EAAiC;UAC/B,OAAO,IAAP;QACD;;QAED,KAAKI,QAAL,CAAcjB,MAAd,EAAsBQ,MAAtB;;QACA1B,GAAG,0CAAmCsB,EAAnC,EAAH;MACD;;MAED,OAAO,IAAP;IACD;;;;EA/IqBhB,I;;AAkJxBiC,MAAM,CAACC,OAAP,GAAiB/B,SAAjB"},"metadata":{},"sourceType":"script"}