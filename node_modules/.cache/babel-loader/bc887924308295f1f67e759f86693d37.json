{"ast":null,"code":"'use strict';\n/** @type {typeof import('hashlru').default} */\n// @ts-ignore - hashlru has incorrect typedefs\n\nconst hashlru = require('hashlru');\n/**\n * Time Aware Least Recent Used Cache\n *\n * @see https://arxiv.org/pdf/1801.00390\n * @todo move this to ipfs-utils or it's own package\n *\n * @template T\n * @class TLRU\n */\n\n\nclass TLRU {\n  /**\n   * Creates an instance of TLRU.\n   *\n   * @param {number} maxSize\n   */\n  constructor(maxSize) {\n    this.lru = hashlru(maxSize);\n  }\n  /**\n   * Get the value from the a key\n   *\n   * @param {string} key\n   * @returns {T|undefined}\n   * @memberof TLoRU\n   */\n\n\n  get(key) {\n    const value = this.lru.get(key);\n\n    if (value) {\n      if (value.expire && value.expire < Date.now()) {\n        this.lru.remove(key);\n        return undefined;\n      }\n\n      return value.value;\n    }\n\n    return undefined;\n  }\n  /**\n   * Set a key value pair\n   *\n   * @param {string} key\n   * @param {T} value\n   * @param {number} ttl - in miliseconds\n   * @returns {void}\n   */\n\n\n  set(key, value, ttl) {\n    this.lru.set(key, {\n      value,\n      expire: Date.now() + ttl\n    });\n  }\n  /**\n   * Find if the cache has the key\n   *\n   * @param {string} key\n   * @returns {boolean}\n   */\n\n\n  has(key) {\n    const value = this.get(key);\n\n    if (value) {\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Remove key\n   *\n   * @param {string} key\n   */\n\n\n  remove(key) {\n    this.lru.remove(key);\n  }\n  /**\n   * Clears the cache\n   *\n   * @memberof TLRU\n   */\n\n\n  clear() {\n    this.lru.clear();\n  }\n\n}\n\nmodule.exports = TLRU;","map":{"version":3,"names":["hashlru","require","TLRU","constructor","maxSize","lru","get","key","value","expire","Date","now","remove","undefined","set","ttl","has","clear","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/utils/tlru.js"],"sourcesContent":["'use strict'\n\n/** @type {typeof import('hashlru').default} */\n// @ts-ignore - hashlru has incorrect typedefs\nconst hashlru = require('hashlru')\n\n/**\n * Time Aware Least Recent Used Cache\n *\n * @see https://arxiv.org/pdf/1801.00390\n * @todo move this to ipfs-utils or it's own package\n *\n * @template T\n * @class TLRU\n */\nclass TLRU {\n  /**\n   * Creates an instance of TLRU.\n   *\n   * @param {number} maxSize\n   */\n  constructor (maxSize) {\n    this.lru = hashlru(maxSize)\n  }\n\n  /**\n   * Get the value from the a key\n   *\n   * @param {string} key\n   * @returns {T|undefined}\n   * @memberof TLoRU\n   */\n  get (key) {\n    const value = this.lru.get(key)\n    if (value) {\n      if ((value.expire) && (value.expire < Date.now())) {\n        this.lru.remove(key)\n        return undefined\n      }\n      return value.value\n    }\n    return undefined\n  }\n\n  /**\n   * Set a key value pair\n   *\n   * @param {string} key\n   * @param {T} value\n   * @param {number} ttl - in miliseconds\n   * @returns {void}\n   */\n  set (key, value, ttl) {\n    this.lru.set(key, { value, expire: Date.now() + ttl })\n  }\n\n  /**\n   * Find if the cache has the key\n   *\n   * @param {string} key\n   * @returns {boolean}\n   */\n  has (key) {\n    const value = this.get(key)\n    if (value) {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Remove key\n   *\n   * @param {string} key\n   */\n  remove (key) {\n    this.lru.remove(key)\n  }\n\n  /**\n   * Clears the cache\n   *\n   * @memberof TLRU\n   */\n  clear () {\n    this.lru.clear()\n  }\n}\n\nmodule.exports = TLRU\n"],"mappings":"AAAA;AAEA;AACA;;AACA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,IAAN,CAAW;EACT;AACF;AACA;AACA;AACA;EACEC,WAAW,CAAEC,OAAF,EAAW;IACpB,KAAKC,GAAL,GAAWL,OAAO,CAACI,OAAD,CAAlB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACEE,GAAG,CAAEC,GAAF,EAAO;IACR,MAAMC,KAAK,GAAG,KAAKH,GAAL,CAASC,GAAT,CAAaC,GAAb,CAAd;;IACA,IAAIC,KAAJ,EAAW;MACT,IAAKA,KAAK,CAACC,MAAP,IAAmBD,KAAK,CAACC,MAAN,GAAeC,IAAI,CAACC,GAAL,EAAtC,EAAmD;QACjD,KAAKN,GAAL,CAASO,MAAT,CAAgBL,GAAhB;QACA,OAAOM,SAAP;MACD;;MACD,OAAOL,KAAK,CAACA,KAAb;IACD;;IACD,OAAOK,SAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEC,GAAG,CAAEP,GAAF,EAAOC,KAAP,EAAcO,GAAd,EAAmB;IACpB,KAAKV,GAAL,CAASS,GAAT,CAAaP,GAAb,EAAkB;MAAEC,KAAF;MAASC,MAAM,EAAEC,IAAI,CAACC,GAAL,KAAaI;IAA9B,CAAlB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEC,GAAG,CAAET,GAAF,EAAO;IACR,MAAMC,KAAK,GAAG,KAAKF,GAAL,CAASC,GAAT,CAAd;;IACA,IAAIC,KAAJ,EAAW;MACT,OAAO,IAAP;IACD;;IACD,OAAO,KAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEI,MAAM,CAAEL,GAAF,EAAO;IACX,KAAKF,GAAL,CAASO,MAAT,CAAgBL,GAAhB;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEU,KAAK,GAAI;IACP,KAAKZ,GAAL,CAASY,KAAT;EACD;;AAvEQ;;AA0EXC,MAAM,CAACC,OAAP,GAAiBjB,IAAjB"},"metadata":{},"sourceType":"script"}