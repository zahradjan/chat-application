{"ast":null,"code":"'use strict';\n/**\n * @typedef {import('./query')} Query\n */\n\n/**\n * Keeps track of all running queries.\n */\n\nvar _createForOfIteratorHelper = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar QueryManager = /*#__PURE__*/function () {\n  /**\n   * Creates a new QueryManager.\n   */\n  function QueryManager() {\n    _classCallCheck(this, QueryManager);\n\n    this.queries = new Set();\n    this.running = false;\n  }\n  /**\n   * Called when a query is started.\n   *\n   * @param {Query} query\n   */\n\n\n  _createClass(QueryManager, [{\n    key: \"queryStarted\",\n    value: function queryStarted(query) {\n      this.queries.add(query);\n    }\n    /**\n     * Called when a query completes.\n     *\n     * @param {Query} query\n     */\n\n  }, {\n    key: \"queryCompleted\",\n    value: function queryCompleted(query) {\n      this.queries.delete(query);\n    }\n    /**\n     * Starts the query manager.\n     */\n\n  }, {\n    key: \"start\",\n    value: function start() {\n      this.running = true;\n    }\n    /**\n     * Stops all queries.\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.running = false;\n\n      var _iterator = _createForOfIteratorHelper(this.queries),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var query = _step.value;\n          query.stop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this.queries.clear();\n    }\n  }]);\n\n  return QueryManager;\n}();\n\nmodule.exports = QueryManager;","map":{"version":3,"names":["QueryManager","queries","Set","running","query","add","delete","stop","clear","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-kad-dht/src/query-manager.js"],"sourcesContent":["'use strict'\n\n/**\n * @typedef {import('./query')} Query\n */\n\n/**\n * Keeps track of all running queries.\n */\nclass QueryManager {\n  /**\n   * Creates a new QueryManager.\n   */\n  constructor () {\n    this.queries = new Set()\n    this.running = false\n  }\n\n  /**\n   * Called when a query is started.\n   *\n   * @param {Query} query\n   */\n  queryStarted (query) {\n    this.queries.add(query)\n  }\n\n  /**\n   * Called when a query completes.\n   *\n   * @param {Query} query\n   */\n  queryCompleted (query) {\n    this.queries.delete(query)\n  }\n\n  /**\n   * Starts the query manager.\n   */\n  start () {\n    this.running = true\n  }\n\n  /**\n   * Stops all queries.\n   */\n  stop () {\n    this.running = false\n    for (const query of this.queries) {\n      query.stop()\n    }\n    this.queries.clear()\n  }\n}\n\nmodule.exports = QueryManager\n"],"mappings":"AAAA;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;IACMA,Y;EACJ;AACF;AACA;EACE,wBAAe;IAAA;;IACb,KAAKC,OAAL,GAAe,IAAIC,GAAJ,EAAf;IACA,KAAKC,OAAL,GAAe,KAAf;EACD;EAED;AACF;AACA;AACA;AACA;;;;;WACE,sBAAcC,KAAd,EAAqB;MACnB,KAAKH,OAAL,CAAaI,GAAb,CAAiBD,KAAjB;IACD;IAED;AACF;AACA;AACA;AACA;;;;WACE,wBAAgBA,KAAhB,EAAuB;MACrB,KAAKH,OAAL,CAAaK,MAAb,CAAoBF,KAApB;IACD;IAED;AACF;AACA;;;;WACE,iBAAS;MACP,KAAKD,OAAL,GAAe,IAAf;IACD;IAED;AACF;AACA;;;;WACE,gBAAQ;MACN,KAAKA,OAAL,GAAe,KAAf;;MADM,2CAEc,KAAKF,OAFnB;MAAA;;MAAA;QAEN,oDAAkC;UAAA,IAAvBG,KAAuB;UAChCA,KAAK,CAACG,IAAN;QACD;MAJK;QAAA;MAAA;QAAA;MAAA;;MAKN,KAAKN,OAAL,CAAaO,KAAb;IACD;;;;;;AAGHC,MAAM,CAACC,OAAP,GAAiBV,YAAjB"},"metadata":{},"sourceType":"script"}