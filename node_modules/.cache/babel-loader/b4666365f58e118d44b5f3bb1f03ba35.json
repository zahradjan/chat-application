{"ast":null,"code":"'use strict';\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('../../types').NetworkService} config.network\n */\n\n\nmodule.exports = _ref => {\n  let {\n    network\n  } = _ref;\n\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API[\"localAddrs\"]}\n   */\n  async function localAddrs() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      libp2p\n    } = await network.use(options);\n    return libp2p.multiaddrs;\n  }\n\n  return withTimeoutOption(localAddrs);\n};","map":{"version":3,"names":["withTimeoutOption","require","module","exports","network","localAddrs","options","libp2p","use","multiaddrs"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/swarm/local-addrs.js"],"sourcesContent":["'use strict'\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @param {Object} config\n * @param {import('../../types').NetworkService} config.network\n */\nmodule.exports = ({ network }) => {\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API[\"localAddrs\"]}\n   */\n  async function localAddrs (options = {}) {\n    const { libp2p } = await network.use(options)\n    return libp2p.multiaddrs\n  }\n\n  return withTimeoutOption(localAddrs)\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,yCAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,QAAiB;EAAA,IAAhB;IAAEC;EAAF,CAAgB;;EAChC;AACF;AACA;EACE,eAAeC,UAAf,GAAyC;IAAA,IAAdC,OAAc,uEAAJ,EAAI;IACvC,MAAM;MAAEC;IAAF,IAAa,MAAMH,OAAO,CAACI,GAAR,CAAYF,OAAZ,CAAzB;IACA,OAAOC,MAAM,CAACE,UAAd;EACD;;EAED,OAAOT,iBAAiB,CAACK,UAAD,CAAxB;AACD,CAVD"},"metadata":{},"sourceType":"script"}