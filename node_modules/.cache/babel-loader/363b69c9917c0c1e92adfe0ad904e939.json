{"ast":null,"code":"'use strict';\n\nconst {\n  findLevelJs\n} = require('../../src/utils');\n\nconst {\n  fromString\n} = require('uint8arrays/from-string');\n\nconst {\n  toString\n} = require('uint8arrays/to-string');\n/**\n * @typedef {import('../../src/types').Migration} Migration\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('../../src/types').MigrationProgressCallback} MigrationProgressCallback\n *\n * @typedef {{ type: 'del', key: string | Uint8Array } | { type: 'put', key: string | Uint8Array, value: Uint8Array }} Operation\n * @typedef {function (string, Uint8Array): Operation[]} UpgradeFunction\n * @typedef {function (Uint8Array, Uint8Array): Operation[]} DowngradeFunction\n */\n\n/**\n * @param {string} name\n * @param {Datastore} store\n * @param {(message: string) => void} onProgress\n */\n\n\nasync function keysToBinary(name, store) {\n  let onProgress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : () => {};\n  const db = findLevelJs(store); // only interested in level-js\n\n  if (!db) {\n    onProgress(`${name} did not need an upgrade`);\n    return;\n  }\n\n  onProgress(`Upgrading ${name}`);\n  /**\n   * @type {UpgradeFunction}\n   */\n\n  const upgrade = (key, value) => {\n    return [{\n      type: 'del',\n      key: key\n    }, {\n      type: 'put',\n      key: fromString(key),\n      value: value\n    }];\n  };\n\n  await withEach(db, upgrade);\n}\n/**\n * @param {string} name\n * @param {Datastore} store\n * @param {(message: string) => void} onProgress\n */\n\n\nasync function keysToStrings(name, store) {\n  let onProgress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : () => {};\n  const db = findLevelJs(store); // only interested in level-js\n\n  if (!db) {\n    onProgress(`${name} did not need a downgrade`);\n    return;\n  }\n\n  onProgress(`Downgrading ${name}`);\n  /**\n   * @type {DowngradeFunction}\n   */\n\n  const downgrade = (key, value) => {\n    return [{\n      type: 'del',\n      key: key\n    }, {\n      type: 'put',\n      key: toString(key),\n      value: value\n    }];\n  };\n\n  await withEach(db, downgrade);\n}\n/**\n * @param {any} store\n * @returns {Datastore}\n */\n\n\nfunction unwrap(store) {\n  if (store.child) {\n    return unwrap(store.child);\n  }\n\n  return store;\n}\n/**\n * @param {import('../../src/types').Backends} backends\n * @param {MigrationProgressCallback} onProgress\n * @param {*} fn\n */\n\n\nasync function process(backends, onProgress, fn) {\n  /**\n   * @type {{ name: string, store: Datastore }[]}\n   */\n  const datastores = Object.entries(backends).map(_ref => {\n    let [key, backend] = _ref;\n    return {\n      key,\n      backend: unwrap(backend)\n    };\n  }).filter(_ref2 => {\n    let {\n      key,\n      backend\n    } = _ref2;\n    return backend.constructor.name === 'LevelDatastore';\n  }).map(_ref3 => {\n    let {\n      key,\n      backend\n    } = _ref3;\n    return {\n      name: key,\n      store: backend\n    };\n  });\n  onProgress(0, `Migrating ${datastores.length} dbs`);\n  let migrated = 0;\n  /**\n   * @param {string} message\n   */\n\n  const progress = message => {\n    onProgress(Math.round(migrated / datastores.length * 100), message);\n  };\n\n  for (const {\n    name,\n    store\n  } of datastores) {\n    await store.open();\n\n    try {\n      await fn(name, store, progress);\n    } finally {\n      migrated++;\n      await store.close();\n    }\n  }\n\n  onProgress(100, `Migrated ${datastores.length} dbs`);\n}\n/** @type {Migration} */\n\n\nmodule.exports = {\n  version: 10,\n  description: 'Migrates datastore-level keys to binary',\n  migrate: function (backends) {\n    let onProgress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};\n    return process(backends, onProgress, keysToBinary);\n  },\n  revert: function (backends) {\n    let onProgress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};\n    return process(backends, onProgress, keysToStrings);\n  }\n};\n/**\n * Uses the upgrade strategy from level-js@5.x.x - note we can't call the `.upgrade` command\n * directly because it will be removed in level-js@6.x.x and we can't guarantee users will\n * have migrated by then - e.g. they may jump from level-js@4.x.x straight to level-js@6.x.x\n * so we have to duplicate the code here.\n *\n * @param {any} db\n * @param {UpgradeFunction | DowngradeFunction} fn\n * @returns {Promise<void>}\n */\n\nfunction withEach(db, fn) {\n  /**\n   * @param {Operation[]} operations\n   * @param {(error?: Error) => void} next\n   */\n  function batch(operations, next) {\n    const store = db.store('readwrite');\n    const transaction = store.transaction;\n    let index = 0;\n    /** @type {Error | undefined} */\n\n    let error;\n\n    transaction.onabort = () => next(error || transaction.error || new Error('aborted by user'));\n\n    transaction.oncomplete = () => next();\n\n    function loop() {\n      const op = operations[index++];\n      const key = op.key;\n      let req;\n\n      try {\n        req = op.type === 'del' ? store.delete(key) : store.put(op.value, key);\n      } catch (err) {\n        error = err;\n        transaction.abort();\n        return;\n      }\n\n      if (index < operations.length) {\n        req.onsuccess = loop;\n      }\n    }\n\n    loop();\n  }\n\n  return new Promise((resolve, reject) => {\n    const it = db.iterator(); // raw keys and values only\n\n    /**\n     * @template T\n     * @param {T} data\n     */\n\n    const id = data => data;\n\n    it._deserializeKey = it._deserializeValue = id;\n    next();\n\n    function next() {\n      /**\n       * @param {Error | undefined} err\n       * @param {string | undefined} key\n       * @param {Uint8Array} value\n       */\n      const handleNext = (err, key, value) => {\n        if (err || key === undefined) {\n          /**\n           * @param {Error | undefined} err2\n           */\n          const handleEnd = err2 => {\n            if (err2) {\n              reject(err2);\n              return;\n            }\n\n            resolve();\n          };\n\n          it.end(handleEnd);\n          return;\n        } // @ts-ignore\n\n\n        batch(fn(key, value), next);\n      };\n\n      it.next(handleNext);\n    }\n  });\n}","map":{"version":3,"names":["findLevelJs","require","fromString","toString","keysToBinary","name","store","onProgress","db","upgrade","key","value","type","withEach","keysToStrings","downgrade","unwrap","child","process","backends","fn","datastores","Object","entries","map","backend","filter","constructor","length","migrated","progress","message","Math","round","open","close","module","exports","version","description","migrate","revert","batch","operations","next","transaction","index","error","onabort","Error","oncomplete","loop","op","req","delete","put","err","abort","onsuccess","Promise","resolve","reject","it","iterator","id","data","_deserializeKey","_deserializeValue","handleNext","undefined","handleEnd","err2","end"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-repo-migrations/migrations/migration-10/index.js"],"sourcesContent":["'use strict'\n\nconst {\n  findLevelJs\n} = require('../../src/utils')\nconst { fromString } = require('uint8arrays/from-string')\nconst { toString } = require('uint8arrays/to-string')\n\n/**\n * @typedef {import('../../src/types').Migration} Migration\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('../../src/types').MigrationProgressCallback} MigrationProgressCallback\n *\n * @typedef {{ type: 'del', key: string | Uint8Array } | { type: 'put', key: string | Uint8Array, value: Uint8Array }} Operation\n * @typedef {function (string, Uint8Array): Operation[]} UpgradeFunction\n * @typedef {function (Uint8Array, Uint8Array): Operation[]} DowngradeFunction\n */\n\n/**\n * @param {string} name\n * @param {Datastore} store\n * @param {(message: string) => void} onProgress\n */\nasync function keysToBinary (name, store, onProgress = () => {}) {\n  const db = findLevelJs(store)\n\n  // only interested in level-js\n  if (!db) {\n    onProgress(`${name} did not need an upgrade`)\n\n    return\n  }\n\n  onProgress(`Upgrading ${name}`)\n\n  /**\n   * @type {UpgradeFunction}\n   */\n  const upgrade = (key, value) => {\n    return [\n      { type: 'del', key: key },\n      { type: 'put', key: fromString(key), value: value }\n    ]\n  }\n\n  await withEach(db, upgrade)\n}\n\n/**\n * @param {string} name\n * @param {Datastore} store\n * @param {(message: string) => void} onProgress\n */\nasync function keysToStrings (name, store, onProgress = () => {}) {\n  const db = findLevelJs(store)\n\n  // only interested in level-js\n  if (!db) {\n    onProgress(`${name} did not need a downgrade`)\n\n    return\n  }\n\n  onProgress(`Downgrading ${name}`)\n\n  /**\n   * @type {DowngradeFunction}\n   */\n  const downgrade = (key, value) => {\n    return [\n      { type: 'del', key: key },\n      { type: 'put', key: toString(key), value: value }\n    ]\n  }\n\n  await withEach(db, downgrade)\n}\n\n/**\n * @param {any} store\n * @returns {Datastore}\n */\nfunction unwrap (store) {\n  if (store.child) {\n    return unwrap(store.child)\n  }\n\n  return store\n}\n\n/**\n * @param {import('../../src/types').Backends} backends\n * @param {MigrationProgressCallback} onProgress\n * @param {*} fn\n */\nasync function process (backends, onProgress, fn) {\n  /**\n   * @type {{ name: string, store: Datastore }[]}\n   */\n  const datastores = Object.entries(backends)\n    .map(([key, backend]) => ({ key, backend: unwrap(backend) }))\n    .filter(({ key, backend }) => backend.constructor.name === 'LevelDatastore')\n    .map(({ key, backend }) => ({\n      name: key,\n      store: backend\n    }))\n\n  onProgress(0, `Migrating ${datastores.length} dbs`)\n  let migrated = 0\n\n  /**\n   * @param {string} message\n   */\n  const progress = (message) => {\n    onProgress(Math.round((migrated / datastores.length) * 100), message)\n  }\n\n  for (const { name, store } of datastores) {\n    await store.open()\n\n    try {\n      await fn(name, store, progress)\n    } finally {\n      migrated++\n      await store.close()\n    }\n  }\n\n  onProgress(100, `Migrated ${datastores.length} dbs`)\n}\n\n/** @type {Migration} */\nmodule.exports = {\n  version: 10,\n  description: 'Migrates datastore-level keys to binary',\n  migrate: (backends, onProgress = () => {}) => {\n    return process(backends, onProgress, keysToBinary)\n  },\n  revert: (backends, onProgress = () => {}) => {\n    return process(backends, onProgress, keysToStrings)\n  }\n}\n\n/**\n * Uses the upgrade strategy from level-js@5.x.x - note we can't call the `.upgrade` command\n * directly because it will be removed in level-js@6.x.x and we can't guarantee users will\n * have migrated by then - e.g. they may jump from level-js@4.x.x straight to level-js@6.x.x\n * so we have to duplicate the code here.\n *\n * @param {any} db\n * @param {UpgradeFunction | DowngradeFunction} fn\n * @returns {Promise<void>}\n */\nfunction withEach (db, fn) {\n  /**\n   * @param {Operation[]} operations\n   * @param {(error?: Error) => void} next\n   */\n  function batch (operations, next) {\n    const store = db.store('readwrite')\n    const transaction = store.transaction\n    let index = 0\n    /** @type {Error | undefined} */\n    let error\n\n    transaction.onabort = () => next(error || transaction.error || new Error('aborted by user'))\n    transaction.oncomplete = () => next()\n\n    function loop () {\n      const op = operations[index++]\n      const key = op.key\n      let req\n\n      try {\n        req = op.type === 'del' ? store.delete(key) : store.put(op.value, key)\n      } catch (err) {\n        error = err\n        transaction.abort()\n        return\n      }\n\n      if (index < operations.length) {\n        req.onsuccess = loop\n      }\n    }\n\n    loop()\n  }\n\n  return new Promise((resolve, reject) => {\n    const it = db.iterator()\n    // raw keys and values only\n    /**\n     * @template T\n     * @param {T} data\n     */\n    const id = (data) => data\n    it._deserializeKey = it._deserializeValue = id\n    next()\n\n    function next () {\n      /**\n       * @param {Error | undefined} err\n       * @param {string | undefined} key\n       * @param {Uint8Array} value\n       */\n      const handleNext = (err, key, value) => {\n        if (err || key === undefined) {\n          /**\n           * @param {Error | undefined} err2\n           */\n          const handleEnd = (err2) => {\n            if (err2) {\n              reject(err2)\n              return\n            }\n\n            resolve()\n          }\n\n          it.end(handleEnd)\n\n          return\n        }\n\n        // @ts-ignore\n        batch(fn(key, value), next)\n      }\n      it.next(handleNext)\n    }\n  })\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}