{"ast":null,"code":"'use strict';\n\nconst nacl = require('tweetnacl');\n\nconst nextTick = require('async/nextTick');\n\nexports.publicKeyLength = nacl.sign.publicKeyLength;\nexports.privateKeyLength = nacl.sign.secretKeyLength;\n\nexports.generateKey = function (callback) {\n  nextTick(() => {\n    let result;\n\n    try {\n      result = nacl.sign.keyPair();\n    } catch (err) {\n      return callback(err);\n    }\n\n    callback(null, result);\n  });\n}; // seed should be a 32 byte uint8array\n\n\nexports.generateKeyFromSeed = function (seed, callback) {\n  nextTick(() => {\n    let result;\n\n    try {\n      result = nacl.sign.keyPair.fromSeed(seed);\n    } catch (err) {\n      return callback(err);\n    }\n\n    callback(null, result);\n  });\n};\n\nexports.hashAndSign = function (key, msg, callback) {\n  nextTick(() => {\n    callback(null, Buffer.from(nacl.sign.detached(msg, key)));\n  });\n};\n\nexports.hashAndVerify = function (key, sig, msg, callback) {\n  nextTick(() => {\n    let result;\n\n    try {\n      result = nacl.sign.detached.verify(msg, sig, key);\n    } catch (err) {\n      return callback(err);\n    }\n\n    callback(null, result);\n  });\n};","map":{"version":3,"names":["nacl","require","nextTick","exports","publicKeyLength","sign","privateKeyLength","secretKeyLength","generateKey","callback","result","keyPair","err","generateKeyFromSeed","seed","fromSeed","hashAndSign","key","msg","Buffer","from","detached","hashAndVerify","sig","verify"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/orbit-db-keystore/node_modules/libp2p-crypto/src/keys/ed25519.js"],"sourcesContent":["'use strict'\n\nconst nacl = require('tweetnacl')\nconst nextTick = require('async/nextTick')\n\nexports.publicKeyLength = nacl.sign.publicKeyLength\nexports.privateKeyLength = nacl.sign.secretKeyLength\n\nexports.generateKey = function (callback) {\n  nextTick(() => {\n    let result\n    try {\n      result = nacl.sign.keyPair()\n    } catch (err) {\n      return callback(err)\n    }\n    callback(null, result)\n  })\n}\n\n// seed should be a 32 byte uint8array\nexports.generateKeyFromSeed = function (seed, callback) {\n  nextTick(() => {\n    let result\n    try {\n      result = nacl.sign.keyPair.fromSeed(seed)\n    } catch (err) {\n      return callback(err)\n    }\n    callback(null, result)\n  })\n}\n\nexports.hashAndSign = function (key, msg, callback) {\n  nextTick(() => {\n    callback(null, Buffer.from(nacl.sign.detached(msg, key)))\n  })\n}\n\nexports.hashAndVerify = function (key, sig, msg, callback) {\n  nextTick(() => {\n    let result\n    try {\n      result = nacl.sign.detached.verify(msg, sig, key)\n    } catch (err) {\n      return callback(err)\n    }\n\n    callback(null, result)\n  })\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,WAAD,CAApB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,gBAAD,CAAxB;;AAEAE,OAAO,CAACC,eAAR,GAA0BJ,IAAI,CAACK,IAAL,CAAUD,eAApC;AACAD,OAAO,CAACG,gBAAR,GAA2BN,IAAI,CAACK,IAAL,CAAUE,eAArC;;AAEAJ,OAAO,CAACK,WAAR,GAAsB,UAAUC,QAAV,EAAoB;EACxCP,QAAQ,CAAC,MAAM;IACb,IAAIQ,MAAJ;;IACA,IAAI;MACFA,MAAM,GAAGV,IAAI,CAACK,IAAL,CAAUM,OAAV,EAAT;IACD,CAFD,CAEE,OAAOC,GAAP,EAAY;MACZ,OAAOH,QAAQ,CAACG,GAAD,CAAf;IACD;;IACDH,QAAQ,CAAC,IAAD,EAAOC,MAAP,CAAR;EACD,CARO,CAAR;AASD,CAVD,C,CAYA;;;AACAP,OAAO,CAACU,mBAAR,GAA8B,UAAUC,IAAV,EAAgBL,QAAhB,EAA0B;EACtDP,QAAQ,CAAC,MAAM;IACb,IAAIQ,MAAJ;;IACA,IAAI;MACFA,MAAM,GAAGV,IAAI,CAACK,IAAL,CAAUM,OAAV,CAAkBI,QAAlB,CAA2BD,IAA3B,CAAT;IACD,CAFD,CAEE,OAAOF,GAAP,EAAY;MACZ,OAAOH,QAAQ,CAACG,GAAD,CAAf;IACD;;IACDH,QAAQ,CAAC,IAAD,EAAOC,MAAP,CAAR;EACD,CARO,CAAR;AASD,CAVD;;AAYAP,OAAO,CAACa,WAAR,GAAsB,UAAUC,GAAV,EAAeC,GAAf,EAAoBT,QAApB,EAA8B;EAClDP,QAAQ,CAAC,MAAM;IACbO,QAAQ,CAAC,IAAD,EAAOU,MAAM,CAACC,IAAP,CAAYpB,IAAI,CAACK,IAAL,CAAUgB,QAAV,CAAmBH,GAAnB,EAAwBD,GAAxB,CAAZ,CAAP,CAAR;EACD,CAFO,CAAR;AAGD,CAJD;;AAMAd,OAAO,CAACmB,aAAR,GAAwB,UAAUL,GAAV,EAAeM,GAAf,EAAoBL,GAApB,EAAyBT,QAAzB,EAAmC;EACzDP,QAAQ,CAAC,MAAM;IACb,IAAIQ,MAAJ;;IACA,IAAI;MACFA,MAAM,GAAGV,IAAI,CAACK,IAAL,CAAUgB,QAAV,CAAmBG,MAAnB,CAA0BN,GAA1B,EAA+BK,GAA/B,EAAoCN,GAApC,CAAT;IACD,CAFD,CAEE,OAAOL,GAAP,EAAY;MACZ,OAAOH,QAAQ,CAACG,GAAD,CAAf;IACD;;IAEDH,QAAQ,CAAC,IAAD,EAAOC,MAAP,CAAR;EACD,CATO,CAAR;AAUD,CAXD"},"metadata":{},"sourceType":"script"}