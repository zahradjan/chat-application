{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar PeerId = require('peer-id');\n\nvar _require = require('multiaddr'),\n    Multiaddr = _require.Multiaddr;\n\nvar _require2 = require('libp2p-record'),\n    Record = _require2.Record;\n\nvar Proto = require('./dht');\n\nvar MESSAGE_TYPE = Proto.Message.MessageType;\nvar CONNECTION_TYPE = Proto.Message.ConnectionType;\n/**\n * @typedef {0|1|2|3|4} ConnectionType\n *\n * @typedef {object} PBPeer\n * @property {Uint8Array} id\n * @property {Uint8Array[]} addrs\n * @property {ConnectionType} connection\n *\n * @typedef {import('../index').PeerData} PeerData\n */\n\n/**\n * Represents a single DHT control message.\n */\n\nvar Message = /*#__PURE__*/function () {\n  /**\n   * @param {import('./dht').Message.MessageType} type\n   * @param {Uint8Array} key\n   * @param {number} level\n   */\n  function Message(type, key, level) {\n    _classCallCheck(this, Message);\n\n    if (key && !(key instanceof Uint8Array)) {\n      throw new Error('Key must be a Uint8Array');\n    }\n\n    this.type = type;\n    this.key = key;\n    this._clusterLevelRaw = level;\n    /** @type {PeerData[]} */\n\n    this.closerPeers = [];\n    /** @type {PeerData[]} */\n\n    this.providerPeers = [];\n    /** @type {import('libp2p-record').Record | undefined} */\n\n    this.record = undefined;\n  }\n  /**\n   * @type {number}\n   */\n\n\n  _createClass(Message, [{\n    key: \"clusterLevel\",\n    get: function get() {\n      var level = this._clusterLevelRaw - 1;\n\n      if (level < 0) {\n        return 0;\n      }\n\n      return level;\n    },\n    set: function set(level) {\n      this._clusterLevelRaw = level;\n    }\n    /**\n     * Encode into protobuf\n     */\n\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      var obj = {\n        key: this.key,\n        type: this.type,\n        clusterLevelRaw: this._clusterLevelRaw,\n        closerPeers: this.closerPeers.map(toPbPeer),\n        providerPeers: this.providerPeers.map(toPbPeer),\n\n        /** @type {Uint8Array | undefined} */\n        record: undefined\n      };\n\n      if (this.record) {\n        if (this.record instanceof Uint8Array) {\n          obj.record = this.record;\n        } else {\n          obj.record = this.record.serialize();\n        }\n      }\n\n      return Proto.Message.encode(obj).finish();\n    }\n    /**\n     * Decode from protobuf\n     *\n     * @param {Uint8Array} raw\n     */\n\n  }], [{\n    key: \"deserialize\",\n    value: function deserialize(raw) {\n      var dec = Proto.Message.decode(raw);\n      var msg = new Message(dec.type || 0, dec.key || Uint8Array.from([]), dec.clusterLevelRaw || 0);\n      msg.closerPeers = dec.closerPeers.map(fromPbPeer);\n      msg.providerPeers = dec.providerPeers.map(fromPbPeer);\n\n      if (dec.record && dec.record.length) {\n        msg.record = Record.deserialize(dec.record);\n      }\n\n      return msg;\n    }\n  }]);\n\n  return Message;\n}();\n\nMessage.TYPES = MESSAGE_TYPE;\nMessage.CONNECTION_TYPES = CONNECTION_TYPE;\n/**\n * @param {PeerData} peer\n */\n\nfunction toPbPeer(peer) {\n  /** @type {PBPeer} */\n  var output = {\n    id: peer.id.id,\n    addrs: (peer.multiaddrs || []).map(function (m) {\n      return m.bytes;\n    }),\n    connection: CONNECTION_TYPE.CONNECTED\n  };\n  return output;\n}\n/**\n * @param {import('./dht').Message.IPeer} peer\n */\n\n\nfunction fromPbPeer(peer) {\n  return {\n    // @ts-ignore id is optional on protobuf, but it will exist?\n    id: new PeerId(peer.id),\n    multiaddrs: (peer.addrs || []).map(function (a) {\n      return new Multiaddr(a);\n    })\n  };\n}\n\nmodule.exports = Message;","map":{"version":3,"names":["PeerId","require","Multiaddr","Record","Proto","MESSAGE_TYPE","Message","MessageType","CONNECTION_TYPE","ConnectionType","type","key","level","Uint8Array","Error","_clusterLevelRaw","closerPeers","providerPeers","record","undefined","obj","clusterLevelRaw","map","toPbPeer","serialize","encode","finish","raw","dec","decode","msg","from","fromPbPeer","length","deserialize","TYPES","CONNECTION_TYPES","peer","output","id","addrs","multiaddrs","m","bytes","connection","CONNECTED","a","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-kad-dht/src/message/index.js"],"sourcesContent":["'use strict'\n\nconst PeerId = require('peer-id')\nconst { Multiaddr } = require('multiaddr')\nconst { Record } = require('libp2p-record')\nconst Proto = require('./dht')\n\nconst MESSAGE_TYPE = Proto.Message.MessageType\nconst CONNECTION_TYPE = Proto.Message.ConnectionType\n\n/**\n * @typedef {0|1|2|3|4} ConnectionType\n *\n * @typedef {object} PBPeer\n * @property {Uint8Array} id\n * @property {Uint8Array[]} addrs\n * @property {ConnectionType} connection\n *\n * @typedef {import('../index').PeerData} PeerData\n */\n\n/**\n * Represents a single DHT control message.\n */\nclass Message {\n  /**\n   * @param {import('./dht').Message.MessageType} type\n   * @param {Uint8Array} key\n   * @param {number} level\n   */\n  constructor (type, key, level) {\n    if (key && !(key instanceof Uint8Array)) {\n      throw new Error('Key must be a Uint8Array')\n    }\n\n    this.type = type\n    this.key = key\n    this._clusterLevelRaw = level\n\n    /** @type {PeerData[]} */\n    this.closerPeers = []\n    /** @type {PeerData[]} */\n    this.providerPeers = []\n    /** @type {import('libp2p-record').Record | undefined} */\n    this.record = undefined\n  }\n\n  /**\n   * @type {number}\n   */\n  get clusterLevel () {\n    const level = this._clusterLevelRaw - 1\n    if (level < 0) {\n      return 0\n    }\n\n    return level\n  }\n\n  set clusterLevel (level) {\n    this._clusterLevelRaw = level\n  }\n\n  /**\n   * Encode into protobuf\n   */\n  serialize () {\n    const obj = {\n      key: this.key,\n      type: this.type,\n      clusterLevelRaw: this._clusterLevelRaw,\n      closerPeers: this.closerPeers.map(toPbPeer),\n      providerPeers: this.providerPeers.map(toPbPeer),\n\n      /** @type {Uint8Array | undefined} */\n      record: undefined\n    }\n\n    if (this.record) {\n      if (this.record instanceof Uint8Array) {\n        obj.record = this.record\n      } else {\n        obj.record = this.record.serialize()\n      }\n    }\n\n    return Proto.Message.encode(obj).finish()\n  }\n\n  /**\n   * Decode from protobuf\n   *\n   * @param {Uint8Array} raw\n   */\n  static deserialize (raw) {\n    const dec = Proto.Message.decode(raw)\n\n    const msg = new Message(dec.type || 0, dec.key || Uint8Array.from([]), dec.clusterLevelRaw || 0)\n\n    msg.closerPeers = dec.closerPeers.map(fromPbPeer)\n    msg.providerPeers = dec.providerPeers.map(fromPbPeer)\n\n    if (dec.record && dec.record.length) {\n      msg.record = Record.deserialize(dec.record)\n    }\n\n    return msg\n  }\n}\n\nMessage.TYPES = MESSAGE_TYPE\nMessage.CONNECTION_TYPES = CONNECTION_TYPE\n\n/**\n * @param {PeerData} peer\n */\nfunction toPbPeer (peer) {\n  /** @type {PBPeer} */\n  const output = {\n    id: peer.id.id,\n    addrs: (peer.multiaddrs || []).map((m) => m.bytes),\n    connection: CONNECTION_TYPE.CONNECTED\n  }\n\n  return output\n}\n\n/**\n * @param {import('./dht').Message.IPeer} peer\n */\nfunction fromPbPeer (peer) {\n  return {\n    // @ts-ignore id is optional on protobuf, but it will exist?\n    id: new PeerId(peer.id),\n    multiaddrs: (peer.addrs || []).map((a) => new Multiaddr(a))\n  }\n}\n\nmodule.exports = Message\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}