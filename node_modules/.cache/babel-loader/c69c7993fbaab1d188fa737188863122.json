{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nvar _require = require('multiaddr'),\n    Multiaddr = _require.Multiaddr;\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\n\n\nmodule.exports = function (_ref) {\n  var repo = _ref.repo;\n\n  /**\n   * @type {import('ipfs-core-types/src/bootstrap').API[\"list\"]}\n   */\n  function list() {\n    return _list.apply(this, arguments);\n  }\n\n  function _list() {\n    _list = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var options,\n          peers,\n          _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              _context.next = 3;\n              return repo.config.get('Bootstrap', options);\n\n            case 3:\n              peers = _context.sent;\n              return _context.abrupt(\"return\", {\n                Peers: (peers || []).map(function (ma) {\n                  return new Multiaddr(ma);\n                })\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _list.apply(this, arguments);\n  }\n\n  return withTimeoutOption(list);\n};","map":{"version":3,"names":["withTimeoutOption","require","Multiaddr","module","exports","repo","list","options","config","get","peers","Peers","map","ma"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/bootstrap/list.js"],"sourcesContent":["'use strict'\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst { Multiaddr } = require('multiaddr')\n\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nmodule.exports = ({ repo }) => {\n  /**\n   * @type {import('ipfs-core-types/src/bootstrap').API[\"list\"]}\n   */\n  async function list (options = {}) {\n    /** @type {string[]|null} */\n    const peers = (await repo.config.get('Bootstrap', options))\n    return { Peers: (peers || []).map(ma => new Multiaddr(ma)) }\n  }\n\n  return withTimeoutOption(list)\n}\n"],"mappings":"AAAA;;;;;;AAEA,IAAMA,iBAAiB,GAAGC,OAAO,CAAC,yCAAD,CAAjC;;AACA,eAAsBA,OAAO,CAAC,WAAD,CAA7B;AAAA,IAAQC,SAAR,YAAQA,SAAR;AAEA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,gBAAc;EAAA,IAAXC,IAAW,QAAXA,IAAW;;EAC7B;AACF;AACA;EAH+B,SAIdC,IAJc;IAAA;EAAA;;EAAA;IAAA,mEAI7B;MAAA;MAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAqBC,OAArB,2DAA+B,EAA/B;cAAA;cAAA,OAEuBF,IAAI,CAACG,MAAL,CAAYC,GAAZ,CAAgB,WAAhB,EAA6BF,OAA7B,CAFvB;;YAAA;cAEQG,KAFR;cAAA,iCAGS;gBAAEC,KAAK,EAAE,CAACD,KAAK,IAAI,EAAV,EAAcE,GAAd,CAAkB,UAAAC,EAAE;kBAAA,OAAI,IAAIX,SAAJ,CAAcW,EAAd,CAAJ;gBAAA,CAApB;cAAT,CAHT;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAJ6B;IAAA;EAAA;;EAU7B,OAAOb,iBAAiB,CAACM,IAAD,CAAxB;AACD,CAXD"},"metadata":{},"sourceType":"script"}