{"ast":null,"code":"'use strict';\n\nconst fs = require('fs');\n\nconst format = require('util').format;\n\nconst EventEmitter = require('events').EventEmitter;\n\nlet isElectronRenderer = process.type && process.type === 'renderer';\nlet isNodejs = !isElectronRenderer && process.version ? true : false;\nconst LogLevels = {\n  'DEBUG': 'DEBUG',\n  'INFO': 'INFO',\n  'WARN': 'WARN',\n  'ERROR': 'ERROR',\n  'NONE': 'NONE'\n}; // Global log level\n\nlet GlobalLogLevel = LogLevels.DEBUG; // Global log file name\n\nlet GlobalLogfile = null;\nlet GlobalEvents = new EventEmitter(); // ANSI colors\n\nlet Colors = {\n  'Black': 0,\n  'Red': 1,\n  'Green': 2,\n  'Yellow': 3,\n  'Blue': 4,\n  'Magenta': 5,\n  'Cyan': 6,\n  'Grey': 7,\n  'White': 9,\n  'Default': 9\n}; // CSS colors\n\nif (!isNodejs) {\n  Colors = {\n    'Black': 'Black',\n    'Red': 'IndianRed',\n    'Green': 'LimeGreen',\n    'Yellow': 'Orange',\n    'Blue': 'RoyalBlue',\n    'Magenta': 'Orchid',\n    'Cyan': 'SkyBlue',\n    'Grey': 'DimGrey',\n    'White': 'White',\n    'Default': 'Black'\n  };\n}\n\nconst loglevelColors = [Colors.Cyan, Colors.Green, Colors.Yellow, Colors.Red, Colors.Default];\nconst defaultOptions = {\n  useColors: true,\n  color: Colors.Default,\n  showTimestamp: true,\n  useLocalTime: false,\n  showLevel: true,\n  filename: GlobalLogfile,\n  appendFile: true\n};\n\nclass Logger {\n  constructor(category, options) {\n    this.category = category;\n    let opts = {};\n    Object.assign(opts, defaultOptions);\n    Object.assign(opts, options);\n    this.options = opts;\n    this.debug = this.debug.bind(this);\n    this.log = this.log.bind(this);\n    this.info = this.info.bind(this);\n    this.warn = this.warn.bind(this);\n    this.error = this.error.bind(this);\n  }\n\n  debug() {\n    if (this._shouldLog(LogLevels.DEBUG)) this._write(LogLevels.DEBUG, format.apply(null, arguments));\n  }\n\n  log() {\n    if (this._shouldLog(LogLevels.DEBUG)) this.debug.apply(this, arguments);\n  }\n\n  info() {\n    if (this._shouldLog(LogLevels.INFO)) this._write(LogLevels.INFO, format.apply(null, arguments));\n  }\n\n  warn() {\n    if (this._shouldLog(LogLevels.WARN)) this._write(LogLevels.WARN, format.apply(null, arguments));\n  }\n\n  error() {\n    if (this._shouldLog(LogLevels.ERROR)) this._write(LogLevels.ERROR, format.apply(null, arguments));\n  }\n\n  _write(level, text) {\n    if ((this.options.filename || GlobalLogfile) && !this.fileWriter && isNodejs) this.fileWriter = fs.openSync(this.options.filename || GlobalLogfile, this.options.appendFile ? 'a+' : 'w+');\n\n    let format = this._format(level, text);\n\n    let unformattedText = this._createLogMessage(level, text);\n\n    let formattedText = this._createLogMessage(level, text, format.timestamp, format.level, format.category, format.text);\n\n    if (this.fileWriter && isNodejs) fs.writeSync(this.fileWriter, unformattedText + '\\n', null, 'utf-8');\n\n    if (isNodejs || !this.options.useColors) {\n      console.log(formattedText);\n      GlobalEvents.emit('data', this.category, level, text);\n    } else {\n      // TODO: clean this up\n      if (level === LogLevels.ERROR) {\n        if (this.options.showTimestamp && this.options.showLevel) {\n          console.error(formattedText, format.timestamp, format.level, format.category, format.text);\n        } else if (this.options.showTimestamp && !this.options.showLevel) {\n          console.error(formattedText, format.timestamp, format.category, format.text);\n        } else if (!this.options.showTimestamp && this.options.showLevel) {\n          console.error(formattedText, format.level, format.category, format.text);\n        } else {\n          console.error(formattedText, format.category, format.text);\n        }\n      } else {\n        if (this.options.showTimestamp && this.options.showLevel) {\n          console.log(formattedText, format.timestamp, format.level, format.category, format.text);\n        } else if (this.options.showTimestamp && !this.options.showLevel) {\n          console.log(formattedText, format.timestamp, format.category, format.text);\n        } else if (!this.options.showTimestamp && this.options.showLevel) {\n          console.log(formattedText, format.level, format.category, format.text);\n        } else {\n          console.log(formattedText, format.category, format.text);\n        }\n      }\n    }\n  }\n\n  _format(level, text) {\n    let timestampFormat = '';\n    let levelFormat = '';\n    let categoryFormat = '';\n    let textFormat = ': ';\n\n    if (this.options.useColors) {\n      const levelColor = Object.keys(LogLevels).map(f => LogLevels[f]).indexOf(level);\n      const categoryColor = this.options.color;\n\n      if (isNodejs) {\n        if (this.options.showTimestamp) timestampFormat = '\\u001b[3' + Colors.Grey + 'm';\n        if (this.options.showLevel) levelFormat = '\\u001b[3' + loglevelColors[levelColor] + ';22m';\n        categoryFormat = '\\u001b[3' + categoryColor + ';1m';\n        textFormat = '\\u001b[0m: ';\n      } else {\n        if (this.options.showTimestamp) timestampFormat = 'color:' + Colors.Grey;\n        if (this.options.showLevel) levelFormat = 'color:' + loglevelColors[levelColor];\n        categoryFormat = 'color:' + categoryColor + '; font-weight: bold';\n      }\n    }\n\n    return {\n      timestamp: timestampFormat,\n      level: levelFormat,\n      category: categoryFormat,\n      text: textFormat\n    };\n  }\n\n  _createLogMessage(level, text, timestampFormat, levelFormat, categoryFormat, textFormat) {\n    timestampFormat = timestampFormat || '';\n    levelFormat = levelFormat || '';\n    categoryFormat = categoryFormat || '';\n    textFormat = textFormat || ': ';\n\n    if (!isNodejs && this.options.useColors) {\n      if (this.options.showTimestamp) timestampFormat = '%c';\n      if (this.options.showLevel) levelFormat = '%c';\n      categoryFormat = '%c';\n      textFormat = ': %c';\n    }\n\n    let result = '';\n    if (this.options.showTimestamp && !this.options.useLocalTime) result += '' + new Date().toISOString() + ' ';\n    if (this.options.showTimestamp && this.options.useLocalTime) result += '' + new Date().toLocaleString() + ' ';\n    result = timestampFormat + result;\n    if (this.options.showLevel) result += levelFormat + '[' + level + ']' + (level === LogLevels.INFO || level === LogLevels.WARN ? ' ' : '') + ' ';\n    result += categoryFormat + this.category;\n    result += textFormat + text;\n    return result;\n  }\n\n  _shouldLog(level) {\n    let envLogLevel = typeof process !== \"undefined\" && process.env !== undefined && process.env.LOG !== undefined ? process.env.LOG.toUpperCase() : null;\n    envLogLevel = typeof window !== \"undefined\" && window.LOG ? window.LOG.toUpperCase() : envLogLevel;\n    const logLevel = envLogLevel || GlobalLogLevel;\n    const levels = Object.keys(LogLevels).map(f => LogLevels[f]);\n    const index = levels.indexOf(level);\n    const levelIdx = levels.indexOf(logLevel);\n    return index >= levelIdx;\n  }\n\n}\n\n;\n/* Public API */\n\nmodule.exports = {\n  Colors: Colors,\n  LogLevels: LogLevels,\n  setLogLevel: level => {\n    GlobalLogLevel = level;\n  },\n  setLogfile: filename => {\n    GlobalLogfile = filename;\n  },\n  create: (category, options) => {\n    const logger = new Logger(category, options);\n    return logger;\n  },\n  forceBrowserMode: force => isNodejs = !force,\n  // for testing,\n  events: GlobalEvents\n};","map":{"version":3,"names":["fs","require","format","EventEmitter","isElectronRenderer","process","type","isNodejs","version","LogLevels","GlobalLogLevel","DEBUG","GlobalLogfile","GlobalEvents","Colors","loglevelColors","Cyan","Green","Yellow","Red","Default","defaultOptions","useColors","color","showTimestamp","useLocalTime","showLevel","filename","appendFile","Logger","constructor","category","options","opts","Object","assign","debug","bind","log","info","warn","error","_shouldLog","_write","apply","arguments","INFO","WARN","ERROR","level","text","fileWriter","openSync","_format","unformattedText","_createLogMessage","formattedText","timestamp","writeSync","console","emit","timestampFormat","levelFormat","categoryFormat","textFormat","levelColor","keys","map","f","indexOf","categoryColor","Grey","result","Date","toISOString","toLocaleString","envLogLevel","env","undefined","LOG","toUpperCase","window","logLevel","levels","index","levelIdx","module","exports","setLogLevel","setLogfile","create","logger","forceBrowserMode","force","events"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/logplease/src/index.js"],"sourcesContent":["'use strict';\n\nconst fs = require('fs');\nconst format = require('util').format;\nconst EventEmitter = require('events').EventEmitter;\n\nlet isElectronRenderer = process.type && process.type === 'renderer';\nlet isNodejs = !isElectronRenderer && process.version ? true : false;\n\nconst LogLevels = {\n  'DEBUG': 'DEBUG',\n  'INFO':  'INFO',\n  'WARN':  'WARN',\n  'ERROR': 'ERROR',\n  'NONE':  'NONE',\n};\n\n// Global log level\nlet GlobalLogLevel = LogLevels.DEBUG;\n\n// Global log file name\nlet GlobalLogfile = null;\n\nlet GlobalEvents = new EventEmitter();\n\n// ANSI colors\nlet Colors = {\n  'Black':   0,\n  'Red':     1,\n  'Green':   2,\n  'Yellow':  3,\n  'Blue':    4,\n  'Magenta': 5,\n  'Cyan':    6,\n  'Grey':    7,\n  'White':   9,\n  'Default': 9,\n};\n\n// CSS colors\nif(!isNodejs) {\n  Colors = {\n    'Black':   'Black',\n    'Red':     'IndianRed',\n    'Green':   'LimeGreen',\n    'Yellow':  'Orange',\n    'Blue':    'RoyalBlue',\n    'Magenta': 'Orchid',\n    'Cyan':    'SkyBlue',\n    'Grey':    'DimGrey',\n    'White':   'White',\n    'Default': 'Black',\n  };\n}\n\nconst loglevelColors = [Colors.Cyan, Colors.Green, Colors.Yellow, Colors.Red, Colors.Default];\n\nconst defaultOptions = {\n  useColors: true,\n  color: Colors.Default,\n  showTimestamp: true,\n  useLocalTime: false,\n  showLevel: true,\n  filename: GlobalLogfile,\n  appendFile: true,\n};\n\nclass Logger {\n  constructor(category, options) {\n    this.category = category;\n    let opts = {};\n    Object.assign(opts, defaultOptions);\n    Object.assign(opts, options);\n    this.options = opts;\n    this.debug = this.debug.bind(this);\n    this.log = this.log.bind(this);\n    this.info = this.info.bind(this);\n    this.warn = this.warn.bind(this);\n    this.error = this.error.bind(this);\n  }\n\n  debug() {\n    if(this._shouldLog(LogLevels.DEBUG))\n      this._write(LogLevels.DEBUG, format.apply(null, arguments));\n  }\n\n  log() {\n    if(this._shouldLog(LogLevels.DEBUG))\n      this.debug.apply(this, arguments);\n  }\n\n  info() {\n    if(this._shouldLog(LogLevels.INFO))\n      this._write(LogLevels.INFO, format.apply(null, arguments));\n  }\n\n  warn() {\n    if(this._shouldLog(LogLevels.WARN))\n      this._write(LogLevels.WARN, format.apply(null, arguments));\n  }\n\n  error() {\n    if(this._shouldLog(LogLevels.ERROR))\n      this._write(LogLevels.ERROR, format.apply(null, arguments));\n  }\n\n  _write(level, text) {\n    if((this.options.filename || GlobalLogfile) && !this.fileWriter && isNodejs)\n      this.fileWriter = fs.openSync(this.options.filename || GlobalLogfile, this.options.appendFile ? 'a+' : 'w+');\n\n    let format = this._format(level, text);\n    let unformattedText = this._createLogMessage(level, text);\n    let formattedText = this._createLogMessage(level, text, format.timestamp, format.level, format.category, format.text);\n\n    if(this.fileWriter && isNodejs)\n      fs.writeSync(this.fileWriter, unformattedText + '\\n', null, 'utf-8');\n\n    if(isNodejs || !this.options.useColors) {\n      console.log(formattedText)\n      GlobalEvents.emit('data', this.category, level, text)\n    } else {\n      // TODO: clean this up\n      if(level === LogLevels.ERROR) {\n        if(this.options.showTimestamp && this.options.showLevel) {\n          console.error(formattedText, format.timestamp, format.level, format.category, format.text)\n        } else if(this.options.showTimestamp && !this.options.showLevel) {\n          console.error(formattedText, format.timestamp, format.category, format.text)\n        } else if(!this.options.showTimestamp && this.options.showLevel) {\n          console.error(formattedText, format.level, format.category, format.text)\n        } else {\n          console.error(formattedText, format.category, format.text)\n        }\n      } else {\n        if(this.options.showTimestamp && this.options.showLevel) {\n          console.log(formattedText, format.timestamp, format.level, format.category, format.text)\n        } else if(this.options.showTimestamp && !this.options.showLevel) {\n          console.log(formattedText, format.timestamp, format.category, format.text)\n        } else if(!this.options.showTimestamp && this.options.showLevel) {\n          console.log(formattedText, format.level, format.category, format.text)\n        } else {\n          console.log(formattedText, format.category, format.text)\n        }\n      }\n    }\n  }\n\n  _format(level, text) {\n    let timestampFormat = '';\n    let levelFormat     = '';\n    let categoryFormat  = '';\n    let textFormat      = ': ';\n\n    if(this.options.useColors) {\n        const levelColor    = Object.keys(LogLevels).map((f) => LogLevels[f]).indexOf(level);\n        const categoryColor = this.options.color;\n\n      if(isNodejs) {\n        if(this.options.showTimestamp)\n          timestampFormat = '\\u001b[3' + Colors.Grey + 'm';\n\n        if(this.options.showLevel)\n          levelFormat = '\\u001b[3' + loglevelColors[levelColor] + ';22m';\n\n        categoryFormat = '\\u001b[3' + categoryColor + ';1m';\n        textFormat = '\\u001b[0m: ';\n      } else {\n        if(this.options.showTimestamp)\n          timestampFormat = 'color:' + Colors.Grey;\n\n        if(this.options.showLevel)\n          levelFormat = 'color:' + loglevelColors[levelColor];\n\n        categoryFormat = 'color:' + categoryColor + '; font-weight: bold';\n      }\n    }\n\n    return {\n      timestamp: timestampFormat,\n      level: levelFormat,\n      category: categoryFormat,\n      text: textFormat\n    };\n  }\n\n  _createLogMessage(level, text, timestampFormat, levelFormat, categoryFormat, textFormat) {\n    timestampFormat = timestampFormat || '';\n    levelFormat     = levelFormat     || '';\n    categoryFormat  = categoryFormat  || '';\n    textFormat      = textFormat      || ': ';\n\n    if(!isNodejs && this.options.useColors) {\n      if(this.options.showTimestamp)\n        timestampFormat = '%c';\n\n      if(this.options.showLevel)\n        levelFormat = '%c';\n\n      categoryFormat  = '%c';\n      textFormat = ': %c';\n    }\n\n    let result = '';\n\n    if(this.options.showTimestamp && !this.options.useLocalTime)\n      result += '' + new Date().toISOString() + ' ';\n\n    if(this.options.showTimestamp && this.options.useLocalTime)\n      result += '' + new Date().toLocaleString() + ' ';\n\n    result = timestampFormat + result;\n\n    if(this.options.showLevel)\n      result += levelFormat + '[' + level +']' + (level === LogLevels.INFO || level === LogLevels.WARN ? ' ' : '') + ' ';\n\n    result += categoryFormat + this.category;\n    result += textFormat + text;\n    return result;\n  }\n\n  _shouldLog(level) {\n    let envLogLevel = (typeof process !== \"undefined\" && process.env !== undefined && process.env.LOG !== undefined) ? process.env.LOG.toUpperCase() : null;\n    envLogLevel = (typeof window !== \"undefined\" && window.LOG) ? window.LOG.toUpperCase() : envLogLevel;\n\n    const logLevel = envLogLevel || GlobalLogLevel;\n    const levels   = Object.keys(LogLevels).map((f) => LogLevels[f]);\n    const index    = levels.indexOf(level);\n    const levelIdx = levels.indexOf(logLevel);\n    return index >= levelIdx;\n  }\n};\n\n/* Public API */\nmodule.exports = {\n  Colors: Colors,\n  LogLevels: LogLevels,\n  setLogLevel: (level) => {\n    GlobalLogLevel = level;\n  },\n  setLogfile: (filename) => {\n    GlobalLogfile = filename;\n  },\n  create: (category, options) => {\n    const logger = new Logger(category, options);\n    return logger;\n  },\n  forceBrowserMode: (force) => isNodejs = !force, // for testing,\n  events: GlobalEvents,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}