{"ast":null,"code":"'use strict';\n\nconst Service = require('../utils/service');\n/**\n * @param {Object} config\n * @param {import('../types').NetworkService} config.network\n * @param {import('peer-id')} config.peerId\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../types').Print} config.print\n * @param {import('../types').Preload} config.preload\n * @param {import('../types').MfsPreload} config.mfsPreload\n * @param {import('./ipns')} config.ipns\n * @param {import('libp2p/src/keychain')} config.keychain\n * @param {import('../types').Options} config.options\n */\n\n\nmodule.exports = _ref => {\n  let {\n    network,\n    preload,\n    peerId,\n    keychain,\n    repo,\n    ipns,\n    mfsPreload,\n    print,\n    options\n  } = _ref;\n\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"start\"]}\n   */\n  const start = async () => {\n    const {\n      libp2p\n    } = await Service.start(network, {\n      peerId,\n      repo,\n      print,\n      options\n    });\n    await Promise.all([ipns.startOnline({\n      keychain,\n      libp2p,\n      peerId,\n      repo\n    }), preload.start(), mfsPreload.start()]);\n  };\n\n  return start;\n};","map":{"version":3,"names":["Service","require","module","exports","network","preload","peerId","keychain","repo","ipns","mfsPreload","print","options","start","libp2p","Promise","all","startOnline"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/start.js"],"sourcesContent":["'use strict'\n\nconst Service = require('../utils/service')\n\n/**\n * @param {Object} config\n * @param {import('../types').NetworkService} config.network\n * @param {import('peer-id')} config.peerId\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../types').Print} config.print\n * @param {import('../types').Preload} config.preload\n * @param {import('../types').MfsPreload} config.mfsPreload\n * @param {import('./ipns')} config.ipns\n * @param {import('libp2p/src/keychain')} config.keychain\n * @param {import('../types').Options} config.options\n */\nmodule.exports = ({ network, preload, peerId, keychain, repo, ipns, mfsPreload, print, options }) => {\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"start\"]}\n   */\n  const start = async () => {\n    const { libp2p } = await Service.start(network, {\n      peerId,\n      repo,\n      print,\n      options\n    })\n\n    await Promise.all([\n      ipns.startOnline({ keychain, libp2p, peerId, repo }),\n      preload.start(),\n      mfsPreload.start()\n    ])\n  }\n\n  return start\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,QAAoF;EAAA,IAAnF;IAAEC,OAAF;IAAWC,OAAX;IAAoBC,MAApB;IAA4BC,QAA5B;IAAsCC,IAAtC;IAA4CC,IAA5C;IAAkDC,UAAlD;IAA8DC,KAA9D;IAAqEC;EAArE,CAAmF;;EACnG;AACF;AACA;EACE,MAAMC,KAAK,GAAG,YAAY;IACxB,MAAM;MAAEC;IAAF,IAAa,MAAMd,OAAO,CAACa,KAAR,CAAcT,OAAd,EAAuB;MAC9CE,MAD8C;MAE9CE,IAF8C;MAG9CG,KAH8C;MAI9CC;IAJ8C,CAAvB,CAAzB;IAOA,MAAMG,OAAO,CAACC,GAAR,CAAY,CAChBP,IAAI,CAACQ,WAAL,CAAiB;MAAEV,QAAF;MAAYO,MAAZ;MAAoBR,MAApB;MAA4BE;IAA5B,CAAjB,CADgB,EAEhBH,OAAO,CAACQ,KAAR,EAFgB,EAGhBH,UAAU,CAACG,KAAX,EAHgB,CAAZ,CAAN;EAKD,CAbD;;EAeA,OAAOA,KAAP;AACD,CApBD"},"metadata":{},"sourceType":"script"}