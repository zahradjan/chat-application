{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _objectSpread = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar multipartRequest = require('../../lib/multipart-request');\n\nvar configure = require('../../lib/configure');\n\nvar toUrlSearchParams = require('../../lib/to-url-search-params');\n\nvar abortSignal = require('../../lib/abort-signal');\n\nvar _require2 = require('native-abort-controller'),\n    AbortController = _require2.AbortController;\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {ObjectPatchAPI[\"setData\"]}\n   */\n  function setData(_x, _x2) {\n    return _setData.apply(this, arguments);\n  }\n\n  function _setData() {\n    _setData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(cid, data) {\n      var options,\n          controller,\n          signal,\n          res,\n          _yield$res$json,\n          Hash,\n          _args = arguments;\n\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n              // allow aborting requests on body errors\n              controller = new AbortController();\n              signal = abortSignal(controller.signal, options.signal);\n              _context.t0 = api;\n              _context.t1 = _objectSpread;\n              _context.t2 = {\n                signal: signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: [\"\".concat(cid)]\n                }, options))\n              };\n              _context.next = 8;\n              return multipartRequest(data, controller, options.headers);\n\n            case 8:\n              _context.t3 = _context.sent;\n              _context.t4 = (0, _context.t1)(_context.t2, _context.t3);\n              _context.next = 12;\n              return _context.t0.post.call(_context.t0, 'object/patch/set-data', _context.t4);\n\n            case 12:\n              res = _context.sent;\n              _context.next = 15;\n              return res.json();\n\n            case 15:\n              _yield$res$json = _context.sent;\n              Hash = _yield$res$json.Hash;\n              return _context.abrupt(\"return\", CID.parse(Hash));\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _setData.apply(this, arguments);\n  }\n\n  return setData;\n});","map":{"version":3,"names":["require","CID","multipartRequest","configure","toUrlSearchParams","abortSignal","AbortController","module","exports","api","setData","cid","data","options","controller","signal","searchParams","arg","headers","post","res","json","Hash","parse"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-http-client/src/object/patch/set-data.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst multipartRequest = require('../../lib/multipart-request')\nconst configure = require('../../lib/configure')\nconst toUrlSearchParams = require('../../lib/to-url-search-params')\nconst abortSignal = require('../../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\n\n/**\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object/patch').API<HTTPClientExtraOptions>} ObjectPatchAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ObjectPatchAPI[\"setData\"]}\n   */\n  async function setData (cid, data, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('object/patch/set-data', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: [\n          `${cid}`\n        ],\n        ...options\n      }),\n      ...(\n        await multipartRequest(data, controller, options.headers)\n      )\n    })\n\n    const { Hash } = await res.json()\n\n    return CID.parse(Hash)\n  }\n  return setData\n})\n"],"mappings":"AAAA;;;;;;;;AAEA,eAAgBA,OAAO,CAAC,kBAAD,CAAvB;AAAA,IAAQC,GAAR,YAAQA,GAAR;;AACA,IAAMC,gBAAgB,GAAGF,OAAO,CAAC,6BAAD,CAAhC;;AACA,IAAMG,SAAS,GAAGH,OAAO,CAAC,qBAAD,CAAzB;;AACA,IAAMI,iBAAiB,GAAGJ,OAAO,CAAC,gCAAD,CAAjC;;AACA,IAAMK,WAAW,GAAGL,OAAO,CAAC,wBAAD,CAA3B;;AACA,gBAA4BA,OAAO,CAAC,yBAAD,CAAnC;AAAA,IAAQM,eAAR,aAAQA,eAAR;AAEA;AACA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiBL,SAAS,CAAC,UAAAM,GAAG,EAAI;EAChC;AACF;AACA;EAHkC,SAIjBC,OAJiB;IAAA;EAAA;;EAAA;IAAA,sEAIhC,iBAAwBC,GAAxB,EAA6BC,IAA7B;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;;MAAA;QAAA;UAAA;YAAA;cAAmCC,OAAnC,2DAA6C,EAA7C;cACE;cACMC,UAFR,GAEqB,IAAIR,eAAJ,EAFrB;cAGQS,MAHR,GAGiBV,WAAW,CAACS,UAAU,CAACC,MAAZ,EAAoBF,OAAO,CAACE,MAA5B,CAH5B;cAAA,cAKoBN,GALpB;cAAA;cAAA;gBAMIM,MAAM,EAANA,MANJ;gBAOIC,YAAY,EAAEZ,iBAAiB;kBAC7Ba,GAAG,EAAE,WACAN,GADA;gBADwB,GAI1BE,OAJ0B;cAPnC;cAAA;cAAA,OAcYX,gBAAgB,CAACU,IAAD,EAAOE,UAAP,EAAmBD,OAAO,CAACK,OAA3B,CAd5B;;YAAA;cAAA;cAAA;cAAA;cAAA,mBAKwBC,IALxB,mBAK6B,uBAL7B;;YAAA;cAKQC,GALR;cAAA;cAAA,OAkByBA,GAAG,CAACC,IAAJ,EAlBzB;;YAAA;cAAA;cAkBUC,IAlBV,mBAkBUA,IAlBV;cAAA,iCAoBSrB,GAAG,CAACsB,KAAJ,CAAUD,IAAV,CApBT;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAJgC;IAAA;EAAA;;EA0BhC,OAAOZ,OAAP;AACD,CA3ByB,CAA1B"},"metadata":{},"sourceType":"script"}