{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar errors = require('../errors');\n\nvar debug = require('debug');\n\nvar log = debug('ipfs:repo:lock:memory');\nvar lockFile = 'repo.lock';\n/** @type {Record<string,boolean>} */\n\nvar LOCKS = {};\n/**\n * @typedef {import('../types').LockCloser} LockCloser\n */\n\n/**\n * Lock the repo in the given dir.\n *\n * @param {string} dir\n * @returns {Promise<LockCloser>}\n */\n\nexports.lock = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(dir) {\n    var file, closer;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            file = dir + '/' + lockFile;\n            log('locking %s', file);\n\n            if (!(LOCKS[file] === true)) {\n              _context2.next = 4;\n              break;\n            }\n\n            throw new errors.LockExistsError(\"Lock already being held for file: \".concat(file));\n\n          case 4:\n            LOCKS[file] = true;\n            closer = {\n              close: function close() {\n                return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n                  return _regeneratorRuntime().wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          if (LOCKS[file]) {\n                            delete LOCKS[file];\n                          }\n\n                        case 1:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }))();\n              }\n            };\n            return _context2.abrupt(\"return\", closer);\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\n * Check if the repo in the given directory is locked.\n *\n * @param {string} dir\n * @returns {Promise<boolean>}\n */\n\n\nexports.locked = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(dir) {\n    var file;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            file = dir + '/' + lockFile;\n            log(\"checking lock: \".concat(file));\n            return _context3.abrupt(\"return\", Boolean(LOCKS[file]));\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function (_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["errors","require","debug","log","lockFile","LOCKS","exports","lock","dir","file","LockExistsError","closer","close","locked","Boolean"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-repo/src/locks/memory.js"],"sourcesContent":["'use strict'\n\nconst errors = require('../errors')\nconst debug = require('debug')\n\nconst log = debug('ipfs:repo:lock:memory')\n\nconst lockFile = 'repo.lock'\n\n/** @type {Record<string,boolean>} */\nconst LOCKS = {}\n\n/**\n * @typedef {import('../types').LockCloser} LockCloser\n */\n\n/**\n * Lock the repo in the given dir.\n *\n * @param {string} dir\n * @returns {Promise<LockCloser>}\n */\nexports.lock = async (dir) => {\n  const file = dir + '/' + lockFile\n  log('locking %s', file)\n\n  if (LOCKS[file] === true) {\n    throw new errors.LockExistsError(`Lock already being held for file: ${file}`)\n  }\n\n  LOCKS[file] = true\n  const closer = {\n    async close () {\n      if (LOCKS[file]) {\n        delete LOCKS[file]\n      }\n    }\n  }\n  return closer\n}\n\n/**\n * Check if the repo in the given directory is locked.\n *\n * @param {string} dir\n * @returns {Promise<boolean>}\n */\nexports.locked = async (dir) => {\n  const file = dir + '/' + lockFile\n  log(`checking lock: ${file}`)\n\n  return Boolean(LOCKS[file])\n}\n"],"mappings":"AAAA;;;;;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AACA,IAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AAEA,IAAME,GAAG,GAAGD,KAAK,CAAC,uBAAD,CAAjB;AAEA,IAAME,QAAQ,GAAG,WAAjB;AAEA;;AACA,IAAMC,KAAK,GAAG,EAAd;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACAC,OAAO,CAACC,IAAR;EAAA,sEAAe,kBAAOC,GAAP;IAAA;IAAA;MAAA;QAAA;UAAA;YACPC,IADO,GACAD,GAAG,GAAG,GAAN,GAAYJ,QADZ;YAEbD,GAAG,CAAC,YAAD,EAAeM,IAAf,CAAH;;YAFa,MAITJ,KAAK,CAACI,IAAD,CAAL,KAAgB,IAJP;cAAA;cAAA;YAAA;;YAAA,MAKL,IAAIT,MAAM,CAACU,eAAX,6CAAgED,IAAhE,EALK;;UAAA;YAQbJ,KAAK,CAACI,IAAD,CAAL,GAAc,IAAd;YACME,MATO,GASE;cACPC,KADO,mBACE;gBAAA;kBAAA;oBAAA;sBAAA;wBAAA;0BACb,IAAIP,KAAK,CAACI,IAAD,CAAT,EAAiB;4BACf,OAAOJ,KAAK,CAACI,IAAD,CAAZ;0BACD;;wBAHY;wBAAA;0BAAA;sBAAA;oBAAA;kBAAA;gBAAA;cAId;YALY,CATF;YAAA,kCAgBNE,MAhBM;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAf;;EAAA;IAAA;EAAA;AAAA;AAmBA;AACA;AACA;AACA;AACA;AACA;;;AACAL,OAAO,CAACO,MAAR;EAAA,uEAAiB,kBAAOL,GAAP;IAAA;IAAA;MAAA;QAAA;UAAA;YACTC,IADS,GACFD,GAAG,GAAG,GAAN,GAAYJ,QADV;YAEfD,GAAG,0BAAmBM,IAAnB,EAAH;YAFe,kCAIRK,OAAO,CAACT,KAAK,CAACI,IAAD,CAAN,CAJC;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAjB;;EAAA;IAAA;EAAA;AAAA"},"metadata":{},"sourceType":"script"}