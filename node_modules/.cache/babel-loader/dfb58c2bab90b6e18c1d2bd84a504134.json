{"ast":null,"code":"'use strict'; // @ts-ignore\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar Heap = require('heap');\n\nvar _require = require('uint8arrays/xor'),\n    uint8ArrayXor = _require.xor;\n\nvar debug = require('debug');\n\nvar utils = require('../utils');\n\nvar log = debug('libp2p:dht:peer-queue');\n/**\n * @typedef {import('peer-id')} PeerId\n */\n\n/**\n * PeerQueue is a heap that sorts its entries (PeerIds) by their\n * xor distance to the inital provided key.\n */\n\nvar PeerQueue = /*#__PURE__*/function () {\n  /**\n   * Create a new PeerQueue.\n   *\n   * @param {Uint8Array} from - The sha2-256 encoded peer id\n   */\n  function PeerQueue(from) {\n    _classCallCheck(this, PeerQueue);\n\n    log('create: %b', from);\n    this.from = from;\n    this.heap = new Heap(utils.xorCompare);\n  }\n  /**\n   * Add a new PeerId to the queue.\n   *\n   * @param {PeerId} id\n   */\n\n\n  _createClass(PeerQueue, [{\n    key: \"enqueue\",\n    value: function () {\n      var _enqueue = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(id) {\n        var key, el;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                log('enqueue %s', id.toB58String());\n                _context.next = 3;\n                return utils.convertPeerId(id);\n\n              case 3:\n                key = _context.sent;\n                el = {\n                  id: id,\n                  distance: uint8ArrayXor(this.from, key)\n                };\n                this.heap.push(el);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function enqueue(_x) {\n        return _enqueue.apply(this, arguments);\n      }\n\n      return enqueue;\n    }()\n    /**\n     * Returns the closest peer to the `from` peer.\n     *\n     * @returns {PeerId}\n     */\n\n  }, {\n    key: \"dequeue\",\n    value: function dequeue() {\n      var el = this.heap.pop();\n      log('dequeue %s', el.id.toB58String());\n      return el.id;\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.heap.size();\n    }\n  }], [{\n    key: \"fromPeerId\",\n    value:\n    /**\n     * Create from a given peer id.\n     *\n     * @param {PeerId} id\n     * @returns {Promise<PeerQueue>}\n     */\n    function () {\n      var _fromPeerId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(id) {\n        var key;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return utils.convertPeerId(id);\n\n              case 2:\n                key = _context2.sent;\n                return _context2.abrupt(\"return\", new PeerQueue(key));\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function fromPeerId(_x2) {\n        return _fromPeerId.apply(this, arguments);\n      }\n\n      return fromPeerId;\n    }()\n    /**\n     * Create from a given Uint8Array.\n     *\n     * @param {Uint8Array} keyBuffer\n     * @returns {Promise<PeerQueue>}\n     */\n\n  }, {\n    key: \"fromKey\",\n    value: function () {\n      var _fromKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(keyBuffer) {\n        var key;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return utils.convertBuffer(keyBuffer);\n\n              case 2:\n                key = _context3.sent;\n                return _context3.abrupt(\"return\", new PeerQueue(key));\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function fromKey(_x3) {\n        return _fromKey.apply(this, arguments);\n      }\n\n      return fromKey;\n    }()\n  }]);\n\n  return PeerQueue;\n}();\n\nmodule.exports = PeerQueue;","map":{"version":3,"names":["Heap","require","uint8ArrayXor","xor","debug","utils","log","PeerQueue","from","heap","xorCompare","id","toB58String","convertPeerId","key","el","distance","push","pop","size","keyBuffer","convertBuffer","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-kad-dht/src/peer-list/peer-queue.js"],"sourcesContent":["'use strict'\n\n// @ts-ignore\nconst Heap = require('heap')\nconst { xor: uint8ArrayXor } = require('uint8arrays/xor')\nconst debug = require('debug')\n\nconst utils = require('../utils')\n\nconst log = debug('libp2p:dht:peer-queue')\n\n/**\n * @typedef {import('peer-id')} PeerId\n */\n\n/**\n * PeerQueue is a heap that sorts its entries (PeerIds) by their\n * xor distance to the inital provided key.\n */\nclass PeerQueue {\n  /**\n   * Create from a given peer id.\n   *\n   * @param {PeerId} id\n   * @returns {Promise<PeerQueue>}\n   */\n  static async fromPeerId (id) {\n    const key = await utils.convertPeerId(id)\n\n    return new PeerQueue(key)\n  }\n\n  /**\n   * Create from a given Uint8Array.\n   *\n   * @param {Uint8Array} keyBuffer\n   * @returns {Promise<PeerQueue>}\n   */\n  static async fromKey (keyBuffer) {\n    const key = await utils.convertBuffer(keyBuffer)\n\n    return new PeerQueue(key)\n  }\n\n  /**\n   * Create a new PeerQueue.\n   *\n   * @param {Uint8Array} from - The sha2-256 encoded peer id\n   */\n  constructor (from) {\n    log('create: %b', from)\n    this.from = from\n    this.heap = new Heap(utils.xorCompare)\n  }\n\n  /**\n   * Add a new PeerId to the queue.\n   *\n   * @param {PeerId} id\n   */\n  async enqueue (id) {\n    log('enqueue %s', id.toB58String())\n    const key = await utils.convertPeerId(id)\n\n    const el = {\n      id: id,\n      distance: uint8ArrayXor(this.from, key)\n    }\n\n    this.heap.push(el)\n  }\n\n  /**\n   * Returns the closest peer to the `from` peer.\n   *\n   * @returns {PeerId}\n   */\n  dequeue () {\n    const el = this.heap.pop()\n    log('dequeue %s', el.id.toB58String())\n    return el.id\n  }\n\n  get length () {\n    return this.heap.size()\n  }\n}\n\nmodule.exports = PeerQueue\n"],"mappings":"AAAA,a,CAEA;;;;;;;;;;AACA,IAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,eAA+BA,OAAO,CAAC,iBAAD,CAAtC;AAAA,IAAaC,aAAb,YAAQC,GAAR;;AACA,IAAMC,KAAK,GAAGH,OAAO,CAAC,OAAD,CAArB;;AAEA,IAAMI,KAAK,GAAGJ,OAAO,CAAC,UAAD,CAArB;;AAEA,IAAMK,GAAG,GAAGF,KAAK,CAAC,uBAAD,CAAjB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;IACMG,S;EAyBJ;AACF;AACA;AACA;AACA;EACE,mBAAaC,IAAb,EAAmB;IAAA;;IACjBF,GAAG,CAAC,YAAD,EAAeE,IAAf,CAAH;IACA,KAAKA,IAAL,GAAYA,IAAZ;IACA,KAAKC,IAAL,GAAY,IAAIT,IAAJ,CAASK,KAAK,CAACK,UAAf,CAAZ;EACD;EAED;AACF;AACA;AACA;AACA;;;;;;gFACE,iBAAeC,EAAf;QAAA;QAAA;UAAA;YAAA;cAAA;gBACEL,GAAG,CAAC,YAAD,EAAeK,EAAE,CAACC,WAAH,EAAf,CAAH;gBADF;gBAAA,OAEoBP,KAAK,CAACQ,aAAN,CAAoBF,EAApB,CAFpB;;cAAA;gBAEQG,GAFR;gBAIQC,EAJR,GAIa;kBACTJ,EAAE,EAAEA,EADK;kBAETK,QAAQ,EAAEd,aAAa,CAAC,KAAKM,IAAN,EAAYM,GAAZ;gBAFd,CAJb;gBASE,KAAKL,IAAL,CAAUQ,IAAV,CAAeF,EAAf;;cATF;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;IAYA;AACF;AACA;AACA;AACA;;;;WACE,mBAAW;MACT,IAAMA,EAAE,GAAG,KAAKN,IAAL,CAAUS,GAAV,EAAX;MACAZ,GAAG,CAAC,YAAD,EAAeS,EAAE,CAACJ,EAAH,CAAMC,WAAN,EAAf,CAAH;MACA,OAAOG,EAAE,CAACJ,EAAV;IACD;;;SAED,eAAc;MACZ,OAAO,KAAKF,IAAL,CAAUU,IAAV,EAAP;IACD;;;;IAjED;AACF;AACA;AACA;AACA;AACA;;mFACE,kBAAyBR,EAAzB;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACoBN,KAAK,CAACQ,aAAN,CAAoBF,EAApB,CADpB;;cAAA;gBACQG,GADR;gBAAA,kCAGS,IAAIP,SAAJ,CAAcO,GAAd,CAHT;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;IAMA;AACF;AACA;AACA;AACA;AACA;;;;;gFACE,kBAAsBM,SAAtB;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACoBf,KAAK,CAACgB,aAAN,CAAoBD,SAApB,CADpB;;cAAA;gBACQN,GADR;gBAAA,kCAGS,IAAIP,SAAJ,CAAcO,GAAd,CAHT;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;;;;;;AAkDFQ,MAAM,CAACC,OAAP,GAAiBhB,SAAjB"},"metadata":{},"sourceType":"script"}