{"ast":null,"code":"/*eslint-disable*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\"); // Common aliases\n\n\nvar $Reader = $protobuf.Reader,\n    $Writer = $protobuf.Writer,\n    $util = $protobuf.util; // Exported root namespace\n\nvar $root = $protobuf.roots[\"libp2p-proto-book\"] || ($protobuf.roots[\"libp2p-proto-book\"] = {});\n\n$root.Protocols = function () {\n  /**\n   * Properties of a Protocols.\n   * @exports IProtocols\n   * @interface IProtocols\n   * @property {Array.<string>|null} [protocols] Protocols protocols\n   */\n\n  /**\n   * Constructs a new Protocols.\n   * @exports Protocols\n   * @classdesc Represents a Protocols.\n   * @implements IProtocols\n   * @constructor\n   * @param {IProtocols=} [p] Properties to set\n   */\n  function Protocols(p) {\n    this.protocols = [];\n    if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n  }\n  /**\n   * Protocols protocols.\n   * @member {Array.<string>} protocols\n   * @memberof Protocols\n   * @instance\n   */\n\n\n  Protocols.prototype.protocols = $util.emptyArray;\n  /**\n   * Encodes the specified Protocols message. Does not implicitly {@link Protocols.verify|verify} messages.\n   * @function encode\n   * @memberof Protocols\n   * @static\n   * @param {IProtocols} m Protocols message or plain object to encode\n   * @param {$protobuf.Writer} [w] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n  Protocols.encode = function encode(m, w) {\n    if (!w) w = $Writer.create();\n\n    if (m.protocols != null && m.protocols.length) {\n      for (var i = 0; i < m.protocols.length; ++i) w.uint32(10).string(m.protocols[i]);\n    }\n\n    return w;\n  };\n  /**\n   * Decodes a Protocols message from the specified reader or buffer.\n   * @function decode\n   * @memberof Protocols\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n   * @param {number} [l] Message length if known beforehand\n   * @returns {Protocols} Protocols\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  Protocols.decode = function decode(r, l) {\n    if (!(r instanceof $Reader)) r = $Reader.create(r);\n    var c = l === undefined ? r.len : r.pos + l,\n        m = new $root.Protocols();\n\n    while (r.pos < c) {\n      var t = r.uint32();\n\n      switch (t >>> 3) {\n        case 1:\n          if (!(m.protocols && m.protocols.length)) m.protocols = [];\n          m.protocols.push(r.string());\n          break;\n\n        default:\n          r.skipType(t & 7);\n          break;\n      }\n    }\n\n    return m;\n  };\n  /**\n   * Creates a Protocols message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Protocols\n   * @static\n   * @param {Object.<string,*>} d Plain object\n   * @returns {Protocols} Protocols\n   */\n\n\n  Protocols.fromObject = function fromObject(d) {\n    if (d instanceof $root.Protocols) return d;\n    var m = new $root.Protocols();\n\n    if (d.protocols) {\n      if (!Array.isArray(d.protocols)) throw TypeError(\".Protocols.protocols: array expected\");\n      m.protocols = [];\n\n      for (var i = 0; i < d.protocols.length; ++i) {\n        m.protocols[i] = String(d.protocols[i]);\n      }\n    }\n\n    return m;\n  };\n  /**\n   * Creates a plain object from a Protocols message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Protocols\n   * @static\n   * @param {Protocols} m Protocols\n   * @param {$protobuf.IConversionOptions} [o] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  Protocols.toObject = function toObject(m, o) {\n    if (!o) o = {};\n    var d = {};\n\n    if (o.arrays || o.defaults) {\n      d.protocols = [];\n    }\n\n    if (m.protocols && m.protocols.length) {\n      d.protocols = [];\n\n      for (var j = 0; j < m.protocols.length; ++j) {\n        d.protocols[j] = m.protocols[j];\n      }\n    }\n\n    return d;\n  };\n  /**\n   * Converts this Protocols to JSON.\n   * @function toJSON\n   * @memberof Protocols\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  Protocols.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return Protocols;\n}();\n\nmodule.exports = $root;","map":{"version":3,"names":["$protobuf","require","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Protocols","p","protocols","ks","Object","keys","i","length","prototype","emptyArray","encode","m","w","create","uint32","string","decode","r","l","c","undefined","len","pos","t","push","skipType","fromObject","d","Array","isArray","TypeError","String","toObject","o","arrays","defaults","j","toJSON","constructor","toJSONOptions","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p/src/peer-store/persistent/pb/proto-book.js"],"sourcesContent":["/*eslint-disable*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"libp2p-proto-book\"] || ($protobuf.roots[\"libp2p-proto-book\"] = {});\n\n$root.Protocols = (function() {\n\n    /**\n     * Properties of a Protocols.\n     * @exports IProtocols\n     * @interface IProtocols\n     * @property {Array.<string>|null} [protocols] Protocols protocols\n     */\n\n    /**\n     * Constructs a new Protocols.\n     * @exports Protocols\n     * @classdesc Represents a Protocols.\n     * @implements IProtocols\n     * @constructor\n     * @param {IProtocols=} [p] Properties to set\n     */\n    function Protocols(p) {\n        this.protocols = [];\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Protocols protocols.\n     * @member {Array.<string>} protocols\n     * @memberof Protocols\n     * @instance\n     */\n    Protocols.prototype.protocols = $util.emptyArray;\n\n    /**\n     * Encodes the specified Protocols message. Does not implicitly {@link Protocols.verify|verify} messages.\n     * @function encode\n     * @memberof Protocols\n     * @static\n     * @param {IProtocols} m Protocols message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Protocols.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.protocols != null && m.protocols.length) {\n            for (var i = 0; i < m.protocols.length; ++i)\n                w.uint32(10).string(m.protocols[i]);\n        }\n        return w;\n    };\n\n    /**\n     * Decodes a Protocols message from the specified reader or buffer.\n     * @function decode\n     * @memberof Protocols\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Protocols} Protocols\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Protocols.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Protocols();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                if (!(m.protocols && m.protocols.length))\n                    m.protocols = [];\n                m.protocols.push(r.string());\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a Protocols message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Protocols\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Protocols} Protocols\n     */\n    Protocols.fromObject = function fromObject(d) {\n        if (d instanceof $root.Protocols)\n            return d;\n        var m = new $root.Protocols();\n        if (d.protocols) {\n            if (!Array.isArray(d.protocols))\n                throw TypeError(\".Protocols.protocols: array expected\");\n            m.protocols = [];\n            for (var i = 0; i < d.protocols.length; ++i) {\n                m.protocols[i] = String(d.protocols[i]);\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a Protocols message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Protocols\n     * @static\n     * @param {Protocols} m Protocols\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Protocols.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.arrays || o.defaults) {\n            d.protocols = [];\n        }\n        if (m.protocols && m.protocols.length) {\n            d.protocols = [];\n            for (var j = 0; j < m.protocols.length; ++j) {\n                d.protocols[j] = m.protocols[j];\n            }\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Protocols to JSON.\n     * @function toJSON\n     * @memberof Protocols\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Protocols.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Protocols;\n})();\n\nmodule.exports = $root;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}