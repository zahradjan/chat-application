{"ast":null,"code":"'use strict';\n\nconst ConsumableBuffer = require('./consumable-buffer');\n\nconst {\n  concat: uint8ArrayConcat\n} = require('uint8arrays/concat');\n/**\n * @param {(value: Uint8Array) => Promise<Uint8Array>} hashFn\n */\n\n\nfunction wrapHash(hashFn) {\n  /**\n   * @param {InfiniteHash | Uint8Array} value\n   */\n  function hashing(value) {\n    if (value instanceof InfiniteHash) {\n      // already a hash. return it\n      return value;\n    } else {\n      return new InfiniteHash(value, hashFn);\n    }\n  }\n\n  return hashing;\n}\n\nclass InfiniteHash {\n  /**\n   *\n   * @param {Uint8Array} value\n   * @param {(value: Uint8Array) => Promise<Uint8Array>} hashFn\n   */\n  constructor(value, hashFn) {\n    if (!(value instanceof Uint8Array)) {\n      throw new Error('can only hash Uint8Arrays');\n    }\n\n    this._value = value;\n    this._hashFn = hashFn;\n    this._depth = -1;\n    this._availableBits = 0;\n    this._currentBufferIndex = 0;\n    /** @type {ConsumableBuffer[]} */\n\n    this._buffers = [];\n  }\n  /**\n   * @param {number} bits\n   */\n\n\n  async take(bits) {\n    let pendingBits = bits;\n\n    while (this._availableBits < pendingBits) {\n      await this._produceMoreBits();\n    }\n\n    let result = 0;\n\n    while (pendingBits > 0) {\n      const hash = this._buffers[this._currentBufferIndex];\n      const available = Math.min(hash.availableBits(), pendingBits);\n      const took = hash.take(available);\n      result = (result << available) + took;\n      pendingBits -= available;\n      this._availableBits -= available;\n\n      if (hash.availableBits() === 0) {\n        this._currentBufferIndex++;\n      }\n    }\n\n    return result;\n  }\n  /**\n   * @param {number} bits\n   */\n\n\n  untake(bits) {\n    let pendingBits = bits;\n\n    while (pendingBits > 0) {\n      const hash = this._buffers[this._currentBufferIndex];\n      const availableForUntake = Math.min(hash.totalBits() - hash.availableBits(), pendingBits);\n      hash.untake(availableForUntake);\n      pendingBits -= availableForUntake;\n      this._availableBits += availableForUntake;\n\n      if (this._currentBufferIndex > 0 && hash.totalBits() === hash.availableBits()) {\n        this._depth--;\n        this._currentBufferIndex--;\n      }\n    }\n  }\n\n  async _produceMoreBits() {\n    this._depth++;\n    const value = this._depth ? uint8ArrayConcat([this._value, Uint8Array.from([this._depth])]) : this._value;\n    const hashValue = await this._hashFn(value);\n    const buffer = new ConsumableBuffer(hashValue);\n\n    this._buffers.push(buffer);\n\n    this._availableBits += buffer.availableBits();\n  }\n\n}\n\nmodule.exports = wrapHash;\nmodule.exports.InfiniteHash = InfiniteHash;","map":{"version":3,"names":["ConsumableBuffer","require","concat","uint8ArrayConcat","wrapHash","hashFn","hashing","value","InfiniteHash","constructor","Uint8Array","Error","_value","_hashFn","_depth","_availableBits","_currentBufferIndex","_buffers","take","bits","pendingBits","_produceMoreBits","result","hash","available","Math","min","availableBits","took","untake","availableForUntake","totalBits","from","hashValue","buffer","push","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/hamt-sharding/src/consumable-hash.js"],"sourcesContent":["'use strict'\n\nconst ConsumableBuffer = require('./consumable-buffer')\nconst { concat: uint8ArrayConcat } = require('uint8arrays/concat')\n\n/**\n * @param {(value: Uint8Array) => Promise<Uint8Array>} hashFn\n */\nfunction wrapHash (hashFn) {\n  /**\n   * @param {InfiniteHash | Uint8Array} value\n   */\n  function hashing (value) {\n    if (value instanceof InfiniteHash) {\n      // already a hash. return it\n      return value\n    } else {\n      return new InfiniteHash(value, hashFn)\n    }\n  }\n\n  return hashing\n}\n\nclass InfiniteHash {\n  /**\n   *\n   * @param {Uint8Array} value\n   * @param {(value: Uint8Array) => Promise<Uint8Array>} hashFn\n   */\n  constructor (value, hashFn) {\n    if (!(value instanceof Uint8Array)) {\n      throw new Error('can only hash Uint8Arrays')\n    }\n\n    this._value = value\n    this._hashFn = hashFn\n    this._depth = -1\n    this._availableBits = 0\n    this._currentBufferIndex = 0\n\n    /** @type {ConsumableBuffer[]} */\n    this._buffers = []\n  }\n\n  /**\n   * @param {number} bits\n   */\n  async take (bits) {\n    let pendingBits = bits\n\n    while (this._availableBits < pendingBits) {\n      await this._produceMoreBits()\n    }\n\n    let result = 0\n\n    while (pendingBits > 0) {\n      const hash = this._buffers[this._currentBufferIndex]\n      const available = Math.min(hash.availableBits(), pendingBits)\n      const took = hash.take(available)\n      result = (result << available) + took\n      pendingBits -= available\n      this._availableBits -= available\n\n      if (hash.availableBits() === 0) {\n        this._currentBufferIndex++\n      }\n    }\n\n    return result\n  }\n\n  /**\n   * @param {number} bits\n   */\n  untake (bits) {\n    let pendingBits = bits\n\n    while (pendingBits > 0) {\n      const hash = this._buffers[this._currentBufferIndex]\n      const availableForUntake = Math.min(hash.totalBits() - hash.availableBits(), pendingBits)\n      hash.untake(availableForUntake)\n      pendingBits -= availableForUntake\n      this._availableBits += availableForUntake\n\n      if (this._currentBufferIndex > 0 && hash.totalBits() === hash.availableBits()) {\n        this._depth--\n        this._currentBufferIndex--\n      }\n    }\n  }\n\n  async _produceMoreBits () {\n    this._depth++\n\n    const value = this._depth ? uint8ArrayConcat([this._value, Uint8Array.from([this._depth])]) : this._value\n    const hashValue = await this._hashFn(value)\n    const buffer = new ConsumableBuffer(hashValue)\n\n    this._buffers.push(buffer)\n    this._availableBits += buffer.availableBits()\n  }\n}\n\nmodule.exports = wrapHash\nmodule.exports.InfiniteHash = InfiniteHash\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}