{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nvar toCidAndPath = require('ipfs-core-utils/src/to-cid-and-path');\n\nvar _require = require('../../utils'),\n    resolvePath = _require.resolvePath;\n/**\n * @param {Object} config\n * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\n\n\nmodule.exports = function (_ref) {\n  var repo = _ref.repo,\n      codecs = _ref.codecs,\n      preload = _ref.preload;\n\n  /**\n   * @type {import('ipfs-core-types/src/dag').API[\"resolve\"]}\n   */\n  function dagResolve(_x) {\n    return _dagResolve.apply(this, arguments);\n  }\n\n  function _dagResolve() {\n    _dagResolve = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(ipfsPath) {\n      var options,\n          _toCidAndPath,\n          cid,\n          _args = arguments;\n\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _toCidAndPath = toCidAndPath(ipfsPath), cid = _toCidAndPath.cid;\n\n              if (options.preload !== false) {\n                preload(cid);\n              }\n\n              return _context.abrupt(\"return\", resolvePath(repo, codecs, ipfsPath, options));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _dagResolve.apply(this, arguments);\n  }\n\n  return withTimeoutOption(dagResolve);\n};","map":{"version":3,"names":["withTimeoutOption","require","toCidAndPath","resolvePath","module","exports","repo","codecs","preload","dagResolve","ipfsPath","options","cid"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/dag/resolve.js"],"sourcesContent":["'use strict'\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst toCidAndPath = require('ipfs-core-utils/src/to-cid-and-path')\nconst { resolvePath } = require('../../utils')\n\n/**\n * @param {Object} config\n * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nmodule.exports = ({ repo, codecs, preload }) => {\n  /**\n   * @type {import('ipfs-core-types/src/dag').API[\"resolve\"]}\n   */\n  async function dagResolve (ipfsPath, options = {}) {\n    const {\n      cid\n    } = toCidAndPath(ipfsPath)\n\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    return resolvePath(repo, codecs, ipfsPath, options)\n  }\n\n  return withTimeoutOption(dagResolve)\n}\n"],"mappings":"AAAA;;;;;;AAEA,IAAMA,iBAAiB,GAAGC,OAAO,CAAC,yCAAD,CAAjC;;AACA,IAAMC,YAAY,GAAGD,OAAO,CAAC,qCAAD,CAA5B;;AACA,eAAwBA,OAAO,CAAC,aAAD,CAA/B;AAAA,IAAQE,WAAR,YAAQA,WAAR;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,gBAA+B;EAAA,IAA5BC,IAA4B,QAA5BA,IAA4B;EAAA,IAAtBC,MAAsB,QAAtBA,MAAsB;EAAA,IAAdC,OAAc,QAAdA,OAAc;;EAC9C;AACF;AACA;EAHgD,SAI/BC,UAJ+B;IAAA;EAAA;;EAAA;IAAA,yEAI9C,iBAA2BC,QAA3B;MAAA;MAAA;MAAA;MAAA;;MAAA;QAAA;UAAA;YAAA;cAAqCC,OAArC,2DAA+C,EAA/C;cAAA,gBAGMT,YAAY,CAACQ,QAAD,CAHlB,EAEIE,GAFJ,iBAEIA,GAFJ;;cAKE,IAAID,OAAO,CAACH,OAAR,KAAoB,KAAxB,EAA+B;gBAC7BA,OAAO,CAACI,GAAD,CAAP;cACD;;cAPH,iCASST,WAAW,CAACG,IAAD,EAAOC,MAAP,EAAeG,QAAf,EAAyBC,OAAzB,CATpB;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAJ8C;IAAA;EAAA;;EAgB9C,OAAOX,iBAAiB,CAACS,UAAD,CAAxB;AACD,CAjBD"},"metadata":{},"sourceType":"script"}