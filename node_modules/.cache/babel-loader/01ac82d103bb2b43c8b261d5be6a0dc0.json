{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar Wantlist = require('../types/wantlist');\n/**\n * @typedef {import('multiformats').CID} CID\n */\n\n\nvar Ledger = /*#__PURE__*/function () {\n  /**\n   * @param {import('peer-id')} peerId\n   */\n  function Ledger(peerId) {\n    _classCallCheck(this, Ledger);\n\n    this.partner = peerId;\n    this.wantlist = new Wantlist();\n    this.exchangeCount = 0;\n    this.sentToPeer = new Map();\n    this.accounting = {\n      bytesSent: 0,\n      bytesRecv: 0\n    };\n  }\n  /**\n   * @param {number} n\n   */\n\n\n  _createClass(Ledger, [{\n    key: \"sentBytes\",\n    value: function sentBytes(n) {\n      this.exchangeCount++;\n      this.lastExchange = new Date().getTime();\n      this.accounting.bytesSent += n;\n    }\n    /**\n     * @param {number} n\n     */\n\n  }, {\n    key: \"receivedBytes\",\n    value: function receivedBytes(n) {\n      this.exchangeCount++;\n      this.lastExchange = new Date().getTime();\n      this.accounting.bytesRecv += n;\n    }\n    /**\n     *\n     * @param {CID} cid\n     * @param {number} priority\n     * @param {import('../types/message/message').Message.Wantlist.WantType} wantType\n     * @returns {void}\n     */\n\n  }, {\n    key: \"wants\",\n    value: function wants(cid, priority, wantType) {\n      this.wantlist.add(cid, priority, wantType);\n    }\n    /**\n     * @param {CID} cid\n     * @returns {void}\n     */\n\n  }, {\n    key: \"cancelWant\",\n    value: function cancelWant(cid) {\n      this.wantlist.remove(cid);\n    }\n    /**\n     * @param {CID} cid\n     */\n\n  }, {\n    key: \"wantlistContains\",\n    value: function wantlistContains(cid) {\n      return this.wantlist.get(cid);\n    }\n    /**\n     * @returns {number}\n     */\n\n  }, {\n    key: \"debtRatio\",\n    value: function debtRatio() {\n      return this.accounting.bytesSent / (this.accounting.bytesRecv + 1); // +1 is to prevent division by zero\n    }\n  }]);\n\n  return Ledger;\n}();\n\nmodule.exports = Ledger;","map":{"version":3,"names":["Wantlist","require","Ledger","peerId","partner","wantlist","exchangeCount","sentToPeer","Map","accounting","bytesSent","bytesRecv","n","lastExchange","Date","getTime","cid","priority","wantType","add","remove","get","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-bitswap/src/decision-engine/ledger.js"],"sourcesContent":["'use strict'\n\nconst Wantlist = require('../types/wantlist')\n\n/**\n * @typedef {import('multiformats').CID} CID\n */\n\nclass Ledger {\n  /**\n   * @param {import('peer-id')} peerId\n   */\n  constructor (peerId) {\n    this.partner = peerId\n    this.wantlist = new Wantlist()\n\n    this.exchangeCount = 0\n    this.sentToPeer = new Map()\n\n    this.accounting = {\n      bytesSent: 0,\n      bytesRecv: 0\n    }\n  }\n\n  /**\n   * @param {number} n\n   */\n  sentBytes (n) {\n    this.exchangeCount++\n    this.lastExchange = (new Date()).getTime()\n    this.accounting.bytesSent += n\n  }\n\n  /**\n   * @param {number} n\n   */\n  receivedBytes (n) {\n    this.exchangeCount++\n    this.lastExchange = (new Date()).getTime()\n    this.accounting.bytesRecv += n\n  }\n\n  /**\n   *\n   * @param {CID} cid\n   * @param {number} priority\n   * @param {import('../types/message/message').Message.Wantlist.WantType} wantType\n   * @returns {void}\n   */\n  wants (cid, priority, wantType) {\n    this.wantlist.add(cid, priority, wantType)\n  }\n\n  /**\n   * @param {CID} cid\n   * @returns {void}\n   */\n\n  cancelWant (cid) {\n    this.wantlist.remove(cid)\n  }\n\n  /**\n   * @param {CID} cid\n   */\n  wantlistContains (cid) {\n    return this.wantlist.get(cid)\n  }\n\n  /**\n   * @returns {number}\n   */\n  debtRatio () {\n    return (this.accounting.bytesSent / (this.accounting.bytesRecv + 1)) // +1 is to prevent division by zero\n  }\n}\n\nmodule.exports = Ledger\n"],"mappings":"AAAA;;;;;;AAEA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB;AAEA;AACA;AACA;;;IAEMC,M;EACJ;AACF;AACA;EACE,gBAAaC,MAAb,EAAqB;IAAA;;IACnB,KAAKC,OAAL,GAAeD,MAAf;IACA,KAAKE,QAAL,GAAgB,IAAIL,QAAJ,EAAhB;IAEA,KAAKM,aAAL,GAAqB,CAArB;IACA,KAAKC,UAAL,GAAkB,IAAIC,GAAJ,EAAlB;IAEA,KAAKC,UAAL,GAAkB;MAChBC,SAAS,EAAE,CADK;MAEhBC,SAAS,EAAE;IAFK,CAAlB;EAID;EAED;AACF;AACA;;;;;WACE,mBAAWC,CAAX,EAAc;MACZ,KAAKN,aAAL;MACA,KAAKO,YAAL,GAAqB,IAAIC,IAAJ,EAAD,CAAaC,OAAb,EAApB;MACA,KAAKN,UAAL,CAAgBC,SAAhB,IAA6BE,CAA7B;IACD;IAED;AACF;AACA;;;;WACE,uBAAeA,CAAf,EAAkB;MAChB,KAAKN,aAAL;MACA,KAAKO,YAAL,GAAqB,IAAIC,IAAJ,EAAD,CAAaC,OAAb,EAApB;MACA,KAAKN,UAAL,CAAgBE,SAAhB,IAA6BC,CAA7B;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;WACE,eAAOI,GAAP,EAAYC,QAAZ,EAAsBC,QAAtB,EAAgC;MAC9B,KAAKb,QAAL,CAAcc,GAAd,CAAkBH,GAAlB,EAAuBC,QAAvB,EAAiCC,QAAjC;IACD;IAED;AACF;AACA;AACA;;;;WAEE,oBAAYF,GAAZ,EAAiB;MACf,KAAKX,QAAL,CAAce,MAAd,CAAqBJ,GAArB;IACD;IAED;AACF;AACA;;;;WACE,0BAAkBA,GAAlB,EAAuB;MACrB,OAAO,KAAKX,QAAL,CAAcgB,GAAd,CAAkBL,GAAlB,CAAP;IACD;IAED;AACF;AACA;;;;WACE,qBAAa;MACX,OAAQ,KAAKP,UAAL,CAAgBC,SAAhB,IAA6B,KAAKD,UAAL,CAAgBE,SAAhB,GAA4B,CAAzD,CAAR,CADW,CAC0D;IACtE;;;;;;AAGHW,MAAM,CAACC,OAAP,GAAiBrB,MAAjB"},"metadata":{},"sourceType":"script"}