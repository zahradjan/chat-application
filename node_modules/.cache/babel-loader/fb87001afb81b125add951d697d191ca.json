{"ast":null,"code":"'use strict';\n\nrequire('node-forge/lib/asn1');\n\nrequire('node-forge/lib/rsa');\n\nvar forge = require('node-forge/lib/forge');\n\nvar _require = require('./../util'),\n    bigIntegerToUintBase64url = _require.bigIntegerToUintBase64url,\n    base64urlToBigInteger = _require.base64urlToBigInteger;\n\nvar _require2 = require('uint8arrays/from-string'),\n    uint8ArrayFromString = _require2.fromString;\n\nvar _require3 = require('uint8arrays/to-string'),\n    uint8ArrayToString = _require3.toString; // Convert a PKCS#1 in ASN1 DER format to a JWK key\n\n\nexports.pkcs1ToJwk = function (bytes) {\n  var asn1 = forge.asn1.fromDer(uint8ArrayToString(bytes, 'ascii'));\n  var privateKey = forge.pki.privateKeyFromAsn1(asn1); // https://tools.ietf.org/html/rfc7518#section-6.3.1\n\n  return {\n    kty: 'RSA',\n    n: bigIntegerToUintBase64url(privateKey.n),\n    e: bigIntegerToUintBase64url(privateKey.e),\n    d: bigIntegerToUintBase64url(privateKey.d),\n    p: bigIntegerToUintBase64url(privateKey.p),\n    q: bigIntegerToUintBase64url(privateKey.q),\n    dp: bigIntegerToUintBase64url(privateKey.dP),\n    dq: bigIntegerToUintBase64url(privateKey.dQ),\n    qi: bigIntegerToUintBase64url(privateKey.qInv),\n    alg: 'RS256',\n    kid: '2011-04-29'\n  };\n}; // Convert a JWK key into PKCS#1 in ASN1 DER format\n\n\nexports.jwkToPkcs1 = function (jwk) {\n  var asn1 = forge.pki.privateKeyToAsn1({\n    n: base64urlToBigInteger(jwk.n),\n    e: base64urlToBigInteger(jwk.e),\n    d: base64urlToBigInteger(jwk.d),\n    p: base64urlToBigInteger(jwk.p),\n    q: base64urlToBigInteger(jwk.q),\n    dP: base64urlToBigInteger(jwk.dp),\n    dQ: base64urlToBigInteger(jwk.dq),\n    qInv: base64urlToBigInteger(jwk.qi)\n  });\n  return uint8ArrayFromString(forge.asn1.toDer(asn1).getBytes(), 'ascii');\n}; // Convert a PKCIX in ASN1 DER format to a JWK key\n\n\nexports.pkixToJwk = function (bytes) {\n  var asn1 = forge.asn1.fromDer(uint8ArrayToString(bytes, 'ascii'));\n  var publicKey = forge.pki.publicKeyFromAsn1(asn1);\n  return {\n    kty: 'RSA',\n    n: bigIntegerToUintBase64url(publicKey.n),\n    e: bigIntegerToUintBase64url(publicKey.e),\n    alg: 'RS256',\n    kid: '2011-04-29'\n  };\n}; // Convert a JWK key to PKCIX in ASN1 DER format\n\n\nexports.jwkToPkix = function (jwk) {\n  var asn1 = forge.pki.publicKeyToAsn1({\n    n: base64urlToBigInteger(jwk.n),\n    e: base64urlToBigInteger(jwk.e)\n  });\n  return uint8ArrayFromString(forge.asn1.toDer(asn1).getBytes(), 'ascii');\n};","map":{"version":3,"names":["require","forge","bigIntegerToUintBase64url","base64urlToBigInteger","uint8ArrayFromString","fromString","uint8ArrayToString","toString","exports","pkcs1ToJwk","bytes","asn1","fromDer","privateKey","pki","privateKeyFromAsn1","kty","n","e","d","p","q","dp","dP","dq","dQ","qi","qInv","alg","kid","jwkToPkcs1","jwk","privateKeyToAsn1","toDer","getBytes","pkixToJwk","publicKey","publicKeyFromAsn1","jwkToPkix","publicKeyToAsn1"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-delegated-content-routing/node_modules/libp2p-crypto/src/keys/rsa-utils.js"],"sourcesContent":["'use strict'\n\nrequire('node-forge/lib/asn1')\nrequire('node-forge/lib/rsa')\nconst forge = require('node-forge/lib/forge')\nconst { bigIntegerToUintBase64url, base64urlToBigInteger } = require('./../util')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\n\n// Convert a PKCS#1 in ASN1 DER format to a JWK key\nexports.pkcs1ToJwk = function (bytes) {\n  const asn1 = forge.asn1.fromDer(uint8ArrayToString(bytes, 'ascii'))\n  const privateKey = forge.pki.privateKeyFromAsn1(asn1)\n\n  // https://tools.ietf.org/html/rfc7518#section-6.3.1\n  return {\n    kty: 'RSA',\n    n: bigIntegerToUintBase64url(privateKey.n),\n    e: bigIntegerToUintBase64url(privateKey.e),\n    d: bigIntegerToUintBase64url(privateKey.d),\n    p: bigIntegerToUintBase64url(privateKey.p),\n    q: bigIntegerToUintBase64url(privateKey.q),\n    dp: bigIntegerToUintBase64url(privateKey.dP),\n    dq: bigIntegerToUintBase64url(privateKey.dQ),\n    qi: bigIntegerToUintBase64url(privateKey.qInv),\n    alg: 'RS256',\n    kid: '2011-04-29'\n  }\n}\n\n// Convert a JWK key into PKCS#1 in ASN1 DER format\nexports.jwkToPkcs1 = function (jwk) {\n  const asn1 = forge.pki.privateKeyToAsn1({\n    n: base64urlToBigInteger(jwk.n),\n    e: base64urlToBigInteger(jwk.e),\n    d: base64urlToBigInteger(jwk.d),\n    p: base64urlToBigInteger(jwk.p),\n    q: base64urlToBigInteger(jwk.q),\n    dP: base64urlToBigInteger(jwk.dp),\n    dQ: base64urlToBigInteger(jwk.dq),\n    qInv: base64urlToBigInteger(jwk.qi)\n  })\n\n  return uint8ArrayFromString(forge.asn1.toDer(asn1).getBytes(), 'ascii')\n}\n\n// Convert a PKCIX in ASN1 DER format to a JWK key\nexports.pkixToJwk = function (bytes) {\n  const asn1 = forge.asn1.fromDer(uint8ArrayToString(bytes, 'ascii'))\n  const publicKey = forge.pki.publicKeyFromAsn1(asn1)\n\n  return {\n    kty: 'RSA',\n    n: bigIntegerToUintBase64url(publicKey.n),\n    e: bigIntegerToUintBase64url(publicKey.e),\n    alg: 'RS256',\n    kid: '2011-04-29'\n  }\n}\n\n// Convert a JWK key to PKCIX in ASN1 DER format\nexports.jwkToPkix = function (jwk) {\n  const asn1 = forge.pki.publicKeyToAsn1({\n    n: base64urlToBigInteger(jwk.n),\n    e: base64urlToBigInteger(jwk.e)\n  })\n\n  return uint8ArrayFromString(forge.asn1.toDer(asn1).getBytes(), 'ascii')\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}