{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _wrapAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nvar _awaitAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _asyncIterator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar _asyncGeneratorDelegate = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate.js\").default;\n\nvar Reader = require('it-reader');\n\nvar Writer = require('it-pushable');\n\nvar defer = require('p-defer'); // Convert a duplex stream into a reader and writer and rest stream\n\n\nmodule.exports = function (stream) {\n  var writer = Writer(); // Write bytes on demand to the sink\n\n  var reader = Reader(stream.source); // Read bytes on demand from the source\n  // Waits for a source to be passed to the rest stream's sink\n\n  var sourcePromise = defer();\n  var sinkErr;\n  var sinkPromise = stream.sink(_wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var source;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(writer), _awaitAsyncGenerator), \"t0\", 1);\n\n          case 1:\n            _context.next = 3;\n            return _awaitAsyncGenerator(sourcePromise.promise);\n\n          case 3:\n            source = _context.sent;\n            return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(source), _awaitAsyncGenerator), \"t1\", 5);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }))());\n  sinkPromise.catch(function (err) {\n    sinkErr = err;\n  });\n  var rest = {\n    sink: function sink(source) {\n      if (sinkErr) {\n        return Promise.reject(sinkErr);\n      }\n\n      sourcePromise.resolve(source);\n      return sinkPromise;\n    },\n    source: reader\n  };\n  return {\n    reader: reader,\n    writer: writer,\n    stream: rest,\n    rest: function rest() {\n      return writer.end();\n    },\n    write: writer.push,\n    read: function () {\n      var _read = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return reader.next();\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent.value);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function read() {\n        return _read.apply(this, arguments);\n      }\n\n      return read;\n    }()\n  };\n};","map":{"version":3,"names":["Reader","require","Writer","defer","module","exports","stream","writer","reader","source","sourcePromise","sinkErr","sinkPromise","sink","promise","catch","err","rest","Promise","reject","resolve","end","write","push","read","next","value"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/it-handshake/src/index.js"],"sourcesContent":["'use strict'\n\nconst Reader = require('it-reader')\nconst Writer = require('it-pushable')\nconst defer = require('p-defer')\n\n// Convert a duplex stream into a reader and writer and rest stream\nmodule.exports = stream => {\n  const writer = Writer() // Write bytes on demand to the sink\n  const reader = Reader(stream.source) // Read bytes on demand from the source\n\n  // Waits for a source to be passed to the rest stream's sink\n  const sourcePromise = defer()\n  let sinkErr\n\n  const sinkPromise = stream.sink((async function * () {\n    yield * writer\n    const source = await sourcePromise.promise\n    yield * source\n  })())\n\n  sinkPromise.catch(err => {\n    sinkErr = err\n  })\n\n  const rest = {\n    sink: source => {\n      if (sinkErr) {\n        return Promise.reject(sinkErr)\n      }\n\n      sourcePromise.resolve(source)\n      return sinkPromise\n    },\n    source: reader\n  }\n\n  return {\n    reader,\n    writer,\n    stream: rest,\n    rest: () => writer.end(),\n    write: writer.push,\n    read: async () => {\n      return (await reader.next()).value\n    }\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AACA,IAAMC,MAAM,GAAGD,OAAO,CAAC,aAAD,CAAtB;;AACA,IAAME,KAAK,GAAGF,OAAO,CAAC,SAAD,CAArB,C,CAEA;;;AACAG,MAAM,CAACC,OAAP,GAAiB,UAAAC,MAAM,EAAI;EACzB,IAAMC,MAAM,GAAGL,MAAM,EAArB,CADyB,CACD;;EACxB,IAAMM,MAAM,GAAGR,MAAM,CAACM,MAAM,CAACG,MAAR,CAArB,CAFyB,CAEY;EAErC;;EACA,IAAMC,aAAa,GAAGP,KAAK,EAA3B;EACA,IAAIQ,OAAJ;EAEA,IAAMC,WAAW,GAAGN,MAAM,CAACO,IAAP,CAAY,6DAAC;IAAA;IAAA;MAAA;QAAA;UAAA;YAC/B,qEAAQN,MAAR;;UAD+B;YAAA;YAAA,4BAEVG,aAAa,CAACI,OAFJ;;UAAA;YAEzBL,MAFyB;YAG/B,qEAAQA,MAAR;;UAH+B;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAD,IAAZ,CAApB;EAMAG,WAAW,CAACG,KAAZ,CAAkB,UAAAC,GAAG,EAAI;IACvBL,OAAO,GAAGK,GAAV;EACD,CAFD;EAIA,IAAMC,IAAI,GAAG;IACXJ,IAAI,EAAE,cAAAJ,MAAM,EAAI;MACd,IAAIE,OAAJ,EAAa;QACX,OAAOO,OAAO,CAACC,MAAR,CAAeR,OAAf,CAAP;MACD;;MAEDD,aAAa,CAACU,OAAd,CAAsBX,MAAtB;MACA,OAAOG,WAAP;IACD,CARU;IASXH,MAAM,EAAED;EATG,CAAb;EAYA,OAAO;IACLA,MAAM,EAANA,MADK;IAELD,MAAM,EAANA,MAFK;IAGLD,MAAM,EAAEW,IAHH;IAILA,IAAI,EAAE;MAAA,OAAMV,MAAM,CAACc,GAAP,EAAN;IAAA,CAJD;IAKLC,KAAK,EAAEf,MAAM,CAACgB,IALT;IAMLC,IAAI;MAAA,uEAAE;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACUhB,MAAM,CAACiB,IAAP,EADV;;cAAA;gBAAA,iDACyBC,KADzB;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAAF;;MAAA;QAAA;MAAA;;MAAA;IAAA;EANC,CAAP;AAUD,CAxCD"},"metadata":{},"sourceType":"script"}