{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _awaitAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _wrapAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nvar _asyncIterator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar MAX_MSG_SIZE = 1 << 20; // 1MB\n\n/**\n * Creates an iterable transform that restricts message sizes to\n * the given maximum size.\n *\n * @param {number} [max] - The maximum message size. Defaults to 1MB\n * @returns {*} An iterable transform.\n */\n\nmodule.exports = function (max) {\n  max = max || MAX_MSG_SIZE;\n\n  var checkSize = function checkSize(msg) {\n    if (msg.data && msg.data.length > max) {\n      throw Object.assign(new Error('message size too large!'), {\n        code: 'ERR_MSG_TOO_BIG'\n      });\n    }\n  };\n\n  return function (source) {\n    return function () {\n      var _restrictSize = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, msg;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _iteratorAbruptCompletion = false;\n                _didIteratorError = false;\n                _context.prev = 2;\n                _iterator = _asyncIterator(source);\n\n              case 4:\n                _context.next = 6;\n                return _awaitAsyncGenerator(_iterator.next());\n\n              case 6:\n                if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                  _context.next = 14;\n                  break;\n                }\n\n                msg = _step.value;\n\n                if (Array.isArray(msg)) {\n                  msg.forEach(checkSize);\n                } else {\n                  checkSize(msg);\n                }\n\n                _context.next = 11;\n                return msg;\n\n              case 11:\n                _iteratorAbruptCompletion = false;\n                _context.next = 4;\n                break;\n\n              case 14:\n                _context.next = 20;\n                break;\n\n              case 16:\n                _context.prev = 16;\n                _context.t0 = _context[\"catch\"](2);\n                _didIteratorError = true;\n                _iteratorError = _context.t0;\n\n              case 20:\n                _context.prev = 20;\n                _context.prev = 21;\n\n                if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                  _context.next = 25;\n                  break;\n                }\n\n                _context.next = 25;\n                return _awaitAsyncGenerator(_iterator.return());\n\n              case 25:\n                _context.prev = 25;\n\n                if (!_didIteratorError) {\n                  _context.next = 28;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 28:\n                return _context.finish(25);\n\n              case 29:\n                return _context.finish(20);\n\n              case 30:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 16, 20, 30], [21,, 25, 29]]);\n      }));\n\n      function restrictSize() {\n        return _restrictSize.apply(this, arguments);\n      }\n\n      return restrictSize;\n    }()();\n  };\n};\n\nmodule.exports.MAX_MSG_SIZE = MAX_MSG_SIZE;","map":{"version":3,"names":["MAX_MSG_SIZE","module","exports","max","checkSize","msg","data","length","Object","assign","Error","code","source","Array","isArray","forEach","restrictSize"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-mplex/src/restrict-size.js"],"sourcesContent":["'use strict'\n\nconst MAX_MSG_SIZE = 1 << 20 // 1MB\n\n/**\n * Creates an iterable transform that restricts message sizes to\n * the given maximum size.\n *\n * @param {number} [max] - The maximum message size. Defaults to 1MB\n * @returns {*} An iterable transform.\n */\nmodule.exports = max => {\n  max = max || MAX_MSG_SIZE\n\n  const checkSize = msg => {\n    if (msg.data && msg.data.length > max) {\n      throw Object.assign(new Error('message size too large!'), { code: 'ERR_MSG_TOO_BIG' })\n    }\n  }\n\n  return source => {\n    return (async function * restrictSize () {\n      for await (const msg of source) {\n        if (Array.isArray(msg)) {\n          msg.forEach(checkSize)\n        } else {\n          checkSize(msg)\n        }\n        yield msg\n      }\n    })()\n  }\n}\n\nmodule.exports.MAX_MSG_SIZE = MAX_MSG_SIZE\n"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,YAAY,GAAG,KAAK,EAA1B,C,CAA6B;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;;AACAC,MAAM,CAACC,OAAP,GAAiB,UAAAC,GAAG,EAAI;EACtBA,GAAG,GAAGA,GAAG,IAAIH,YAAb;;EAEA,IAAMI,SAAS,GAAG,SAAZA,SAAY,CAAAC,GAAG,EAAI;IACvB,IAAIA,GAAG,CAACC,IAAJ,IAAYD,GAAG,CAACC,IAAJ,CAASC,MAAT,GAAkBJ,GAAlC,EAAuC;MACrC,MAAMK,MAAM,CAACC,MAAP,CAAc,IAAIC,KAAJ,CAAU,yBAAV,CAAd,EAAoD;QAAEC,IAAI,EAAE;MAAR,CAApD,CAAN;IACD;EACF,CAJD;;EAMA,OAAO,UAAAC,MAAM,EAAI;IACf,OAAO;MAAA,iFAAC;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA;gBAAA;gBAAA,2BACkBA,MADlB;;cAAA;gBAAA;gBAAA;;cAAA;gBAAA;kBAAA;kBAAA;gBAAA;;gBACWP,GADX;;gBAEJ,IAAIQ,KAAK,CAACC,OAAN,CAAcT,GAAd,CAAJ,EAAwB;kBACtBA,GAAG,CAACU,OAAJ,CAAYX,SAAZ;gBACD,CAFD,MAEO;kBACLA,SAAS,CAACC,GAAD,CAAT;gBACD;;gBANG;gBAOJ,OAAMA,GAAN;;cAPI;gBAAA;gBAAA;gBAAA;;cAAA;gBAAA;gBAAA;;cAAA;gBAAA;gBAAA;gBAAA;gBAAA;;cAAA;gBAAA;gBAAA;;gBAAA;kBAAA;kBAAA;gBAAA;;gBAAA;gBAAA;;cAAA;gBAAA;;gBAAA;kBAAA;kBAAA;gBAAA;;gBAAA;;cAAA;gBAAA;;cAAA;gBAAA;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAAD;;MAAA,SAAkBW,YAAlB;QAAA;MAAA;;MAAA,OAAkBA,YAAlB;IAAA,KAAP;EAUD,CAXD;AAYD,CArBD;;AAuBAf,MAAM,CAACC,OAAP,CAAeF,YAAf,GAA8BA,YAA9B"},"metadata":{},"sourceType":"script"}