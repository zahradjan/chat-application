{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _awaitAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _wrapAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nvar _asyncIterator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar errCode = require('err-code');\n\nvar ipfsUnixfs = require('ipfs-unixfs');\n\nvar persist = require('../../utils/persist.js');\n\nvar dagPb = require('@ipld/dag-pb');\n\nvar parallelBatch = require('it-parallel-batch');\n\nvar rawCodec = require('multiformats/codecs/raw');\n\nvar flat = require('./flat.js');\n\nvar balanced = require('./balanced.js');\n\nvar trickle = require('./trickle.js');\n\nvar bufferImporter = require('./buffer-importer.js');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function get() {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\n\nvar dagPb__namespace = /*#__PURE__*/_interopNamespace(dagPb);\n\nvar parallelBatch__default = /*#__PURE__*/_interopDefaultLegacy(parallelBatch);\n\nvar rawCodec__namespace = /*#__PURE__*/_interopNamespace(rawCodec);\n\nvar dagBuilders = {\n  flat: flat,\n  balanced: balanced,\n  trickle: trickle\n};\n\nfunction buildFileBatch(_x, _x2, _x3) {\n  return _buildFileBatch.apply(this, arguments);\n}\n\nfunction _buildFileBatch() {\n  _buildFileBatch = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(file, blockstore, options) {\n    var count, previous, bufferImporter$1, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, entry;\n\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            count = -1;\n\n            if (typeof options.bufferImporter === 'function') {\n              bufferImporter$1 = options.bufferImporter;\n            } else {\n              bufferImporter$1 = bufferImporter;\n            }\n\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context.prev = 4;\n            _iterator = _asyncIterator(parallelBatch__default[\"default\"](bufferImporter$1(file, blockstore, options), options.blockWriteConcurrency));\n\n          case 6:\n            _context.next = 8;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 8:\n            if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n              _context.next = 25;\n              break;\n            }\n\n            entry = _step.value;\n            count++;\n\n            if (!(count === 0)) {\n              _context.next = 16;\n              break;\n            }\n\n            previous = entry;\n            return _context.abrupt(\"continue\", 22);\n\n          case 16:\n            if (!(count === 1 && previous)) {\n              _context.next = 20;\n              break;\n            }\n\n            _context.next = 19;\n            return previous;\n\n          case 19:\n            previous = null;\n\n          case 20:\n            _context.next = 22;\n            return entry;\n\n          case 22:\n            _iteratorAbruptCompletion = false;\n            _context.next = 6;\n            break;\n\n          case 25:\n            _context.next = 31;\n            break;\n\n          case 27:\n            _context.prev = 27;\n            _context.t0 = _context[\"catch\"](4);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 31:\n            _context.prev = 31;\n            _context.prev = 32;\n\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context.next = 36;\n              break;\n            }\n\n            _context.next = 36;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 36:\n            _context.prev = 36;\n\n            if (!_didIteratorError) {\n              _context.next = 39;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 39:\n            return _context.finish(36);\n\n          case 40:\n            return _context.finish(31);\n\n          case 41:\n            if (!previous) {\n              _context.next = 45;\n              break;\n            }\n\n            previous.single = true;\n            _context.next = 45;\n            return previous;\n\n          case 45:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[4, 27, 31, 41], [32,, 36, 40]]);\n  }));\n  return _buildFileBatch.apply(this, arguments);\n}\n\nvar reduce = function reduce(file, blockstore, options) {\n  function reducer(_x4) {\n    return _reducer.apply(this, arguments);\n  }\n\n  function _reducer() {\n    _reducer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(leaves) {\n      var leaf, _buffer, f, links, node, buffer, cid;\n\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(leaves.length === 1 && leaves[0].single && options.reduceSingleLeafToSelf)) {\n                _context2.next = 13;\n                break;\n              }\n\n              leaf = leaves[0];\n\n              if (!(file.mtime !== undefined || file.mode !== undefined)) {\n                _context2.next = 12;\n                break;\n              }\n\n              _context2.next = 5;\n              return blockstore.get(leaf.cid);\n\n            case 5:\n              _buffer = _context2.sent;\n              leaf.unixfs = new ipfsUnixfs.UnixFS({\n                type: 'file',\n                mtime: file.mtime,\n                mode: file.mode,\n                data: _buffer\n              });\n              _buffer = dagPb.encode(dagPb.prepare({\n                Data: leaf.unixfs.marshal()\n              }));\n              _context2.next = 10;\n              return persist(_buffer, blockstore, _objectSpread(_objectSpread({}, options), {}, {\n                codec: dagPb__namespace,\n                hasher: options.hasher,\n                cidVersion: options.cidVersion\n              }));\n\n            case 10:\n              leaf.cid = _context2.sent;\n              leaf.size = _buffer.length;\n\n            case 12:\n              return _context2.abrupt(\"return\", {\n                cid: leaf.cid,\n                path: file.path,\n                unixfs: leaf.unixfs,\n                size: leaf.size\n              });\n\n            case 13:\n              f = new ipfsUnixfs.UnixFS({\n                type: 'file',\n                mtime: file.mtime,\n                mode: file.mode\n              });\n              links = leaves.filter(function (leaf) {\n                if (leaf.cid.code === rawCodec__namespace.code && leaf.size) {\n                  return true;\n                }\n\n                if (leaf.unixfs && !leaf.unixfs.data && leaf.unixfs.fileSize()) {\n                  return true;\n                }\n\n                return Boolean(leaf.unixfs && leaf.unixfs.data && leaf.unixfs.data.length);\n              }).map(function (leaf) {\n                if (leaf.cid.code === rawCodec__namespace.code) {\n                  f.addBlockSize(leaf.size);\n                  return {\n                    Name: '',\n                    Tsize: leaf.size,\n                    Hash: leaf.cid\n                  };\n                }\n\n                if (!leaf.unixfs || !leaf.unixfs.data) {\n                  f.addBlockSize(leaf.unixfs && leaf.unixfs.fileSize() || 0);\n                } else {\n                  f.addBlockSize(leaf.unixfs.data.length);\n                }\n\n                return {\n                  Name: '',\n                  Tsize: leaf.size,\n                  Hash: leaf.cid\n                };\n              });\n              node = {\n                Data: f.marshal(),\n                Links: links\n              };\n              buffer = dagPb.encode(dagPb.prepare(node));\n              _context2.next = 19;\n              return persist(buffer, blockstore, options);\n\n            case 19:\n              cid = _context2.sent;\n              return _context2.abrupt(\"return\", {\n                cid: cid,\n                path: file.path,\n                unixfs: f,\n                size: buffer.length + node.Links.reduce(function (acc, curr) {\n                  return acc + curr.Tsize;\n                }, 0)\n              });\n\n            case 21:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _reducer.apply(this, arguments);\n  }\n\n  return reducer;\n};\n\nfunction fileBuilder(file, block, options) {\n  var dagBuilder = dagBuilders[options.strategy];\n\n  if (!dagBuilder) {\n    throw errCode__default[\"default\"](new Error(\"Unknown importer build strategy name: \".concat(options.strategy)), 'ERR_BAD_STRATEGY');\n  }\n\n  return dagBuilder(buildFileBatch(file, block, options), reduce(file, block, options), options);\n}\n\nmodule.exports = fileBuilder;","map":{"version":3,"names":["errCode","require","ipfsUnixfs","persist","dagPb","parallelBatch","rawCodec","flat","balanced","trickle","bufferImporter","_interopDefaultLegacy","e","_interopNamespace","__esModule","n","Object","create","keys","forEach","k","d","getOwnPropertyDescriptor","defineProperty","get","enumerable","freeze","errCode__default","dagPb__namespace","parallelBatch__default","rawCodec__namespace","dagBuilders","buildFileBatch","file","blockstore","options","count","bufferImporter$1","blockWriteConcurrency","entry","previous","single","reduce","reducer","leaves","length","reduceSingleLeafToSelf","leaf","mtime","undefined","mode","cid","buffer","unixfs","UnixFS","type","data","encode","prepare","Data","marshal","codec","hasher","cidVersion","size","path","f","links","filter","code","fileSize","Boolean","map","addBlockSize","Name","Tsize","Hash","node","Links","acc","curr","fileBuilder","block","dagBuilder","strategy","Error","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-unixfs-importer/cjs/src/dag-builder/file/index.js"],"sourcesContent":["'use strict';\n\nvar errCode = require('err-code');\nvar ipfsUnixfs = require('ipfs-unixfs');\nvar persist = require('../../utils/persist.js');\nvar dagPb = require('@ipld/dag-pb');\nvar parallelBatch = require('it-parallel-batch');\nvar rawCodec = require('multiformats/codecs/raw');\nvar flat = require('./flat.js');\nvar balanced = require('./balanced.js');\nvar trickle = require('./trickle.js');\nvar bufferImporter = require('./buffer-importer.js');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () { return e[k]; }\n        });\n      }\n    });\n  }\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\nvar dagPb__namespace = /*#__PURE__*/_interopNamespace(dagPb);\nvar parallelBatch__default = /*#__PURE__*/_interopDefaultLegacy(parallelBatch);\nvar rawCodec__namespace = /*#__PURE__*/_interopNamespace(rawCodec);\n\nconst dagBuilders = {\n  flat: flat,\n  balanced: balanced,\n  trickle: trickle\n};\nasync function* buildFileBatch(file, blockstore, options) {\n  let count = -1;\n  let previous;\n  let bufferImporter$1;\n  if (typeof options.bufferImporter === 'function') {\n    bufferImporter$1 = options.bufferImporter;\n  } else {\n    bufferImporter$1 = bufferImporter;\n  }\n  for await (const entry of parallelBatch__default[\"default\"](bufferImporter$1(file, blockstore, options), options.blockWriteConcurrency)) {\n    count++;\n    if (count === 0) {\n      previous = entry;\n      continue;\n    } else if (count === 1 && previous) {\n      yield previous;\n      previous = null;\n    }\n    yield entry;\n  }\n  if (previous) {\n    previous.single = true;\n    yield previous;\n  }\n}\nconst reduce = (file, blockstore, options) => {\n  async function reducer(leaves) {\n    if (leaves.length === 1 && leaves[0].single && options.reduceSingleLeafToSelf) {\n      const leaf = leaves[0];\n      if (file.mtime !== undefined || file.mode !== undefined) {\n        let buffer = await blockstore.get(leaf.cid);\n        leaf.unixfs = new ipfsUnixfs.UnixFS({\n          type: 'file',\n          mtime: file.mtime,\n          mode: file.mode,\n          data: buffer\n        });\n        buffer = dagPb.encode(dagPb.prepare({ Data: leaf.unixfs.marshal() }));\n        leaf.cid = await persist(buffer, blockstore, {\n          ...options,\n          codec: dagPb__namespace,\n          hasher: options.hasher,\n          cidVersion: options.cidVersion\n        });\n        leaf.size = buffer.length;\n      }\n      return {\n        cid: leaf.cid,\n        path: file.path,\n        unixfs: leaf.unixfs,\n        size: leaf.size\n      };\n    }\n    const f = new ipfsUnixfs.UnixFS({\n      type: 'file',\n      mtime: file.mtime,\n      mode: file.mode\n    });\n    const links = leaves.filter(leaf => {\n      if (leaf.cid.code === rawCodec__namespace.code && leaf.size) {\n        return true;\n      }\n      if (leaf.unixfs && !leaf.unixfs.data && leaf.unixfs.fileSize()) {\n        return true;\n      }\n      return Boolean(leaf.unixfs && leaf.unixfs.data && leaf.unixfs.data.length);\n    }).map(leaf => {\n      if (leaf.cid.code === rawCodec__namespace.code) {\n        f.addBlockSize(leaf.size);\n        return {\n          Name: '',\n          Tsize: leaf.size,\n          Hash: leaf.cid\n        };\n      }\n      if (!leaf.unixfs || !leaf.unixfs.data) {\n        f.addBlockSize(leaf.unixfs && leaf.unixfs.fileSize() || 0);\n      } else {\n        f.addBlockSize(leaf.unixfs.data.length);\n      }\n      return {\n        Name: '',\n        Tsize: leaf.size,\n        Hash: leaf.cid\n      };\n    });\n    const node = {\n      Data: f.marshal(),\n      Links: links\n    };\n    const buffer = dagPb.encode(dagPb.prepare(node));\n    const cid = await persist(buffer, blockstore, options);\n    return {\n      cid,\n      path: file.path,\n      unixfs: f,\n      size: buffer.length + node.Links.reduce((acc, curr) => acc + curr.Tsize, 0)\n    };\n  }\n  return reducer;\n};\nfunction fileBuilder(file, block, options) {\n  const dagBuilder = dagBuilders[options.strategy];\n  if (!dagBuilder) {\n    throw errCode__default[\"default\"](new Error(`Unknown importer build strategy name: ${ options.strategy }`), 'ERR_BAD_STRATEGY');\n  }\n  return dagBuilder(buildFileBatch(file, block, options), reduce(file, block, options), options);\n}\n\nmodule.exports = fileBuilder;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}