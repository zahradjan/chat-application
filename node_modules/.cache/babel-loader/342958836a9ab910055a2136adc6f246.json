{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _wrapAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nvar _awaitAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _asyncIterator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar _asyncGeneratorDelegate = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate.js\").default;\n\nvar _require = require('ipfs-unixfs-exporter'),\n    exporter = _require.exporter;\n\nvar _require2 = require('../utils'),\n    normalizeCidPath = _require2.normalizeCidPath;\n\nvar withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nvar _require3 = require('multiformats/cid'),\n    CID = _require3.CID;\n/**\n * @typedef {Object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../types').Preload} preload\n *\n * @param {Context} context\n */\n\n\nmodule.exports = function (_ref) {\n  var repo = _ref.repo,\n      preload = _ref.preload;\n\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"cat\"]}\n   */\n  function cat(_x) {\n    return _cat.apply(this, arguments);\n  }\n\n  function _cat() {\n    _cat = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(ipfsPath) {\n      var options,\n          pathComponents,\n          file,\n          _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              ipfsPath = normalizeCidPath(ipfsPath);\n\n              if (options.preload !== false) {\n                pathComponents = ipfsPath.split('/');\n                preload(CID.parse(pathComponents[0]));\n              }\n\n              _context.next = 5;\n              return _awaitAsyncGenerator(exporter(ipfsPath, repo.blocks, options));\n\n            case 5:\n              file = _context.sent;\n\n              if (!(file.type === 'directory')) {\n                _context.next = 8;\n                break;\n              }\n\n              throw new Error('this dag node is a directory');\n\n            case 8:\n              if (file.content) {\n                _context.next = 10;\n                break;\n              }\n\n              throw new Error('this dag node has no content');\n\n            case 10:\n              return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(file.content(options)), _awaitAsyncGenerator), \"t0\", 11);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _cat.apply(this, arguments);\n  }\n\n  return withTimeoutOption(cat);\n};","map":{"version":3,"names":["require","exporter","normalizeCidPath","withTimeoutOption","CID","module","exports","repo","preload","cat","ipfsPath","options","pathComponents","split","parse","blocks","file","type","Error","content"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/cat.js"],"sourcesContent":["'use strict'\n\nconst { exporter } = require('ipfs-unixfs-exporter')\nconst { normalizeCidPath } = require('../utils')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst { CID } = require('multiformats/cid')\n\n/**\n * @typedef {Object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../types').Preload} preload\n *\n * @param {Context} context\n */\nmodule.exports = function ({ repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"cat\"]}\n   */\n  async function * cat (ipfsPath, options = {}) {\n    ipfsPath = normalizeCidPath(ipfsPath)\n\n    if (options.preload !== false) {\n      const pathComponents = ipfsPath.split('/')\n      preload(CID.parse(pathComponents[0]))\n    }\n\n    const file = await exporter(ipfsPath, repo.blocks, options)\n\n    // File may not have unixfs prop if small & imported with rawLeaves true\n    if (file.type === 'directory') {\n      throw new Error('this dag node is a directory')\n    }\n\n    if (!file.content) {\n      throw new Error('this dag node has no content')\n    }\n\n    yield * file.content(options)\n  }\n\n  return withTimeoutOption(cat)\n}\n"],"mappings":"AAAA;;;;;;;;;;;;AAEA,eAAqBA,OAAO,CAAC,sBAAD,CAA5B;AAAA,IAAQC,QAAR,YAAQA,QAAR;;AACA,gBAA6BD,OAAO,CAAC,UAAD,CAApC;AAAA,IAAQE,gBAAR,aAAQA,gBAAR;;AACA,IAAMC,iBAAiB,GAAGH,OAAO,CAAC,yCAAD,CAAjC;;AACA,gBAAgBA,OAAO,CAAC,kBAAD,CAAvB;AAAA,IAAQI,GAAR,aAAQA,GAAR;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,gBAA6B;EAAA,IAAjBC,IAAiB,QAAjBA,IAAiB;EAAA,IAAXC,OAAW,QAAXA,OAAW;;EAC5C;AACF;AACA;EAH8C,SAI3BC,GAJ2B;IAAA;EAAA;;EAAA;IAAA,oEAI5C,iBAAsBC,QAAtB;MAAA;MAAA;MAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAgCC,OAAhC,2DAA0C,EAA1C;cACED,QAAQ,GAAGR,gBAAgB,CAACQ,QAAD,CAA3B;;cAEA,IAAIC,OAAO,CAACH,OAAR,KAAoB,KAAxB,EAA+B;gBACvBI,cADuB,GACNF,QAAQ,CAACG,KAAT,CAAe,GAAf,CADM;gBAE7BL,OAAO,CAACJ,GAAG,CAACU,KAAJ,CAAUF,cAAc,CAAC,CAAD,CAAxB,CAAD,CAAP;cACD;;cANH;cAAA,4BAQqBX,QAAQ,CAACS,QAAD,EAAWH,IAAI,CAACQ,MAAhB,EAAwBJ,OAAxB,CAR7B;;YAAA;cAQQK,IARR;;cAAA,MAWMA,IAAI,CAACC,IAAL,KAAc,WAXpB;gBAAA;gBAAA;cAAA;;cAAA,MAYU,IAAIC,KAAJ,CAAU,8BAAV,CAZV;;YAAA;cAAA,IAeOF,IAAI,CAACG,OAfZ;gBAAA;gBAAA;cAAA;;cAAA,MAgBU,IAAID,KAAJ,CAAU,8BAAV,CAhBV;;YAAA;cAmBE,qEAAQF,IAAI,CAACG,OAAL,CAAaR,OAAb,CAAR;;YAnBF;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAJ4C;IAAA;EAAA;;EA0B5C,OAAOR,iBAAiB,CAACM,GAAD,CAAxB;AACD,CA3BD"},"metadata":{},"sourceType":"script"}