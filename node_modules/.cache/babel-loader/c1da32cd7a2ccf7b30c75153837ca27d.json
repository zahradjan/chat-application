{"ast":null,"code":"'use strict';\n\nconst {\n  pipe\n} = require('it-pipe');\n\nconst lp = require('it-length-prefixed');\n\nconst Message = require('../message');\n\nconst handlers = require('./handlers');\n\nconst utils = require('../utils');\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream\n */\n\n/**\n * @param {import('../index')} dht\n */\n\n\nmodule.exports = dht => {\n  const log = utils.logger(dht.peerId, 'rpc');\n  const getMessageHandler = handlers(dht);\n  /**\n   * Process incoming DHT messages.\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   */\n\n  async function handleMessage(peerId, msg) {\n    // get handler & execute it\n    const handler = getMessageHandler(msg.type);\n\n    try {\n      await dht._add(peerId);\n    } catch (err) {\n      log.error('Failed to update the kbucket store', err);\n    }\n\n    if (!handler) {\n      log.error(`no handler found for message type: ${msg.type}`);\n      return;\n    }\n\n    return handler(peerId, msg);\n  }\n  /**\n   * Handle incoming streams on the dht protocol\n   *\n   * @param {object} props\n   * @param {MuxedStream} props.stream\n   * @param {import('libp2p-interfaces/src/connection').Connection} props.connection\n   */\n\n\n  async function onIncomingStream(_ref) {\n    let {\n      stream,\n      connection\n    } = _ref;\n    const peerId = connection.remotePeer;\n\n    try {\n      await dht._add(peerId);\n    } catch (err) {\n      log.error(err);\n    }\n\n    const idB58Str = peerId.toB58String();\n    log('from: %s', idB58Str);\n    await pipe(stream.source, lp.decode(),\n    /**\n     * @param {AsyncIterable<Uint8Array>} source\n     */\n    source => async function* () {\n      for await (const msg of source) {\n        // handle the message\n        const desMessage = Message.deserialize(msg.slice());\n        const res = await handleMessage(peerId, desMessage); // Not all handlers will return a response\n\n        if (res) {\n          yield res.serialize();\n        }\n      }\n    }(), lp.encode(), stream.sink);\n  }\n\n  return onIncomingStream;\n};","map":{"version":3,"names":["pipe","require","lp","Message","handlers","utils","module","exports","dht","log","logger","peerId","getMessageHandler","handleMessage","msg","handler","type","_add","err","error","onIncomingStream","stream","connection","remotePeer","idB58Str","toB58String","source","decode","desMessage","deserialize","slice","res","serialize","encode","sink"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-kad-dht/src/rpc/index.js"],"sourcesContent":["'use strict'\n\nconst { pipe } = require('it-pipe')\nconst lp = require('it-length-prefixed')\n\nconst Message = require('../message')\nconst handlers = require('./handlers')\nconst utils = require('../utils')\n\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream\n */\n\n/**\n * @param {import('../index')} dht\n */\nmodule.exports = (dht) => {\n  const log = utils.logger(dht.peerId, 'rpc')\n  const getMessageHandler = handlers(dht)\n\n  /**\n   * Process incoming DHT messages.\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   */\n  async function handleMessage (peerId, msg) {\n    // get handler & execute it\n    const handler = getMessageHandler(msg.type)\n\n    try {\n      await dht._add(peerId)\n    } catch (err) {\n      log.error('Failed to update the kbucket store', err)\n    }\n\n    if (!handler) {\n      log.error(`no handler found for message type: ${msg.type}`)\n      return\n    }\n\n    return handler(peerId, msg)\n  }\n\n  /**\n   * Handle incoming streams on the dht protocol\n   *\n   * @param {object} props\n   * @param {MuxedStream} props.stream\n   * @param {import('libp2p-interfaces/src/connection').Connection} props.connection\n   */\n  async function onIncomingStream ({ stream, connection }) {\n    const peerId = connection.remotePeer\n\n    try {\n      await dht._add(peerId)\n    } catch (err) {\n      log.error(err)\n    }\n\n    const idB58Str = peerId.toB58String()\n    log('from: %s', idB58Str)\n\n    await pipe(\n      stream.source,\n      lp.decode(),\n      /**\n       * @param {AsyncIterable<Uint8Array>} source\n       */\n      source => (async function * () {\n        for await (const msg of source) {\n          // handle the message\n          const desMessage = Message.deserialize(msg.slice())\n          const res = await handleMessage(peerId, desMessage)\n\n          // Not all handlers will return a response\n          if (res) {\n            yield res.serialize()\n          }\n        }\n      })(),\n      lp.encode(),\n      stream.sink\n    )\n  }\n\n  return onIncomingStream\n}\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA;AAAF,IAAWC,OAAO,CAAC,SAAD,CAAxB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,oBAAD,CAAlB;;AAEA,MAAME,OAAO,GAAGF,OAAO,CAAC,YAAD,CAAvB;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,YAAD,CAAxB;;AACA,MAAMI,KAAK,GAAGJ,OAAO,CAAC,UAAD,CAArB;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AACAK,MAAM,CAACC,OAAP,GAAkBC,GAAD,IAAS;EACxB,MAAMC,GAAG,GAAGJ,KAAK,CAACK,MAAN,CAAaF,GAAG,CAACG,MAAjB,EAAyB,KAAzB,CAAZ;EACA,MAAMC,iBAAiB,GAAGR,QAAQ,CAACI,GAAD,CAAlC;EAEA;AACF;AACA;AACA;AACA;AACA;;EACE,eAAeK,aAAf,CAA8BF,MAA9B,EAAsCG,GAAtC,EAA2C;IACzC;IACA,MAAMC,OAAO,GAAGH,iBAAiB,CAACE,GAAG,CAACE,IAAL,CAAjC;;IAEA,IAAI;MACF,MAAMR,GAAG,CAACS,IAAJ,CAASN,MAAT,CAAN;IACD,CAFD,CAEE,OAAOO,GAAP,EAAY;MACZT,GAAG,CAACU,KAAJ,CAAU,oCAAV,EAAgDD,GAAhD;IACD;;IAED,IAAI,CAACH,OAAL,EAAc;MACZN,GAAG,CAACU,KAAJ,CAAW,sCAAqCL,GAAG,CAACE,IAAK,EAAzD;MACA;IACD;;IAED,OAAOD,OAAO,CAACJ,MAAD,EAASG,GAAT,CAAd;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACE,eAAeM,gBAAf,OAAyD;IAAA,IAAxB;MAAEC,MAAF;MAAUC;IAAV,CAAwB;IACvD,MAAMX,MAAM,GAAGW,UAAU,CAACC,UAA1B;;IAEA,IAAI;MACF,MAAMf,GAAG,CAACS,IAAJ,CAASN,MAAT,CAAN;IACD,CAFD,CAEE,OAAOO,GAAP,EAAY;MACZT,GAAG,CAACU,KAAJ,CAAUD,GAAV;IACD;;IAED,MAAMM,QAAQ,GAAGb,MAAM,CAACc,WAAP,EAAjB;IACAhB,GAAG,CAAC,UAAD,EAAae,QAAb,CAAH;IAEA,MAAMxB,IAAI,CACRqB,MAAM,CAACK,MADC,EAERxB,EAAE,CAACyB,MAAH,EAFQ;IAGR;AACN;AACA;IACMD,MAAM,IAAK,mBAAoB;MAC7B,WAAW,MAAMZ,GAAjB,IAAwBY,MAAxB,EAAgC;QAC9B;QACA,MAAME,UAAU,GAAGzB,OAAO,CAAC0B,WAAR,CAAoBf,GAAG,CAACgB,KAAJ,EAApB,CAAnB;QACA,MAAMC,GAAG,GAAG,MAAMlB,aAAa,CAACF,MAAD,EAASiB,UAAT,CAA/B,CAH8B,CAK9B;;QACA,IAAIG,GAAJ,EAAS;UACP,MAAMA,GAAG,CAACC,SAAJ,EAAN;QACD;MACF;IACF,CAXS,EANF,EAkBR9B,EAAE,CAAC+B,MAAH,EAlBQ,EAmBRZ,MAAM,CAACa,IAnBC,CAAV;EAqBD;;EAED,OAAOd,gBAAP;AACD,CAvED"},"metadata":{},"sourceType":"script"}