{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _awaitAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _wrapAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nvar _asyncIterator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar batch = require('it-batch');\n/**\n * @template T\n * @typedef {{ok:true, value:T}} Success\n */\n\n/**\n * @typedef {{ok:false, err:Error}} Failure\n */\n\n/**\n * Takes an (async) iterator that emits promise-returning functions,\n * invokes them in parallel and emits the results as they become available but\n * in the same order as the input\n *\n * @template T\n * @param {AsyncIterable<() => Promise<T>>} source\n * @param {number} [size=1]\n * @returns {AsyncIterable<T>}\n */\n\n\nfunction parallelBatch(_x) {\n  return _parallelBatch.apply(this, arguments);\n}\n\nfunction _parallelBatch() {\n  _parallelBatch = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(source) {\n    var size,\n        _iteratorAbruptCompletion,\n        _didIteratorError,\n        _iteratorError,\n        _iterator,\n        _step,\n        tasks,\n        things,\n        i,\n        result,\n        _args = arguments;\n\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            size = _args.length > 1 && _args[1] !== undefined ? _args[1] : 1;\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context.prev = 3;\n            _iterator = _asyncIterator(batch(source, size));\n\n          case 5:\n            _context.next = 7;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 7:\n            if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n              _context.next = 27;\n              break;\n            }\n\n            tasks = _step.value;\n\n            /** @type {Promise<Success<T>|Failure>[]} */\n            things = tasks.map(\n            /**\n             * @param {() => Promise<T>} p\n             */\n            function (p) {\n              return p().then(function (value) {\n                return {\n                  ok: true,\n                  value: value\n                };\n              }, function (err) {\n                return {\n                  ok: false,\n                  err: err\n                };\n              });\n            });\n            i = 0;\n\n          case 11:\n            if (!(i < things.length)) {\n              _context.next = 24;\n              break;\n            }\n\n            _context.next = 14;\n            return _awaitAsyncGenerator(things[i]);\n\n          case 14:\n            result = _context.sent;\n\n            if (!result.ok) {\n              _context.next = 20;\n              break;\n            }\n\n            _context.next = 18;\n            return result.value;\n\n          case 18:\n            _context.next = 21;\n            break;\n\n          case 20:\n            throw result.err;\n\n          case 21:\n            i++;\n            _context.next = 11;\n            break;\n\n          case 24:\n            _iteratorAbruptCompletion = false;\n            _context.next = 5;\n            break;\n\n          case 27:\n            _context.next = 33;\n            break;\n\n          case 29:\n            _context.prev = 29;\n            _context.t0 = _context[\"catch\"](3);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 33:\n            _context.prev = 33;\n            _context.prev = 34;\n\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context.next = 38;\n              break;\n            }\n\n            _context.next = 38;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 38:\n            _context.prev = 38;\n\n            if (!_didIteratorError) {\n              _context.next = 41;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 41:\n            return _context.finish(38);\n\n          case 42:\n            return _context.finish(33);\n\n          case 43:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[3, 29, 33, 43], [34,, 38, 42]]);\n  }));\n  return _parallelBatch.apply(this, arguments);\n}\n\nmodule.exports = parallelBatch;","map":{"version":3,"names":["batch","require","parallelBatch","source","size","tasks","things","map","p","then","value","ok","err","i","length","result","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/it-parallel-batch/index.js"],"sourcesContent":["'use strict'\n\nconst batch = require('it-batch')\n\n/**\n * @template T\n * @typedef {{ok:true, value:T}} Success\n */\n\n/**\n * @typedef {{ok:false, err:Error}} Failure\n */\n\n/**\n * Takes an (async) iterator that emits promise-returning functions,\n * invokes them in parallel and emits the results as they become available but\n * in the same order as the input\n *\n * @template T\n * @param {AsyncIterable<() => Promise<T>>} source\n * @param {number} [size=1]\n * @returns {AsyncIterable<T>}\n */\nasync function * parallelBatch (source, size = 1) {\n  for await (const tasks of batch(source, size)) {\n    /** @type {Promise<Success<T>|Failure>[]} */\n    const things = tasks.map(\n      /**\n       * @param {() => Promise<T>} p\n       */\n      p => {\n        return p().then(value => ({ ok: true, value }), err => ({ ok: false, err }))\n      })\n\n    for (let i = 0; i < things.length; i++) {\n      const result = await things[i]\n\n      if (result.ok) {\n        yield result.value\n      } else {\n        throw result.err\n      }\n    }\n  }\n}\n\nmodule.exports = parallelBatch\n"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAArB;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;SACiBC,a;;;;;gFAAjB,iBAAgCC,MAAhC;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;;IAAA;MAAA;QAAA;UAAA;YAAwCC,IAAxC,2DAA+C,CAA/C;YAAA;YAAA;YAAA;YAAA,2BAC4BJ,KAAK,CAACG,MAAD,EAASC,IAAT,CADjC;;UAAA;YAAA;YAAA;;UAAA;YAAA;cAAA;cAAA;YAAA;;YACmBC,KADnB;;YAEI;YACMC,MAHV,GAGmBD,KAAK,CAACE,GAAN;YACb;AACN;AACA;YACM,UAAAC,CAAC,EAAI;cACH,OAAOA,CAAC,GAAGC,IAAJ,CAAS,UAAAC,KAAK;gBAAA,OAAK;kBAAEC,EAAE,EAAE,IAAN;kBAAYD,KAAK,EAALA;gBAAZ,CAAL;cAAA,CAAd,EAAyC,UAAAE,GAAG;gBAAA,OAAK;kBAAED,EAAE,EAAE,KAAN;kBAAaC,GAAG,EAAHA;gBAAb,CAAL;cAAA,CAA5C,CAAP;YACD,CANY,CAHnB;YAWaC,CAXb,GAWiB,CAXjB;;UAAA;YAAA,MAWoBA,CAAC,GAAGP,MAAM,CAACQ,MAX/B;cAAA;cAAA;YAAA;;YAAA;YAAA,4BAY2BR,MAAM,CAACO,CAAD,CAZjC;;UAAA;YAYYE,MAZZ;;YAAA,KAcUA,MAAM,CAACJ,EAdjB;cAAA;cAAA;YAAA;;YAAA;YAeQ,OAAMI,MAAM,CAACL,KAAb;;UAfR;YAAA;YAAA;;UAAA;YAAA,MAiBcK,MAAM,CAACH,GAjBrB;;UAAA;YAWuCC,CAAC,EAXxC;YAAA;YAAA;;UAAA;YAAA;YAAA;YAAA;;UAAA;YAAA;YAAA;;UAAA;YAAA;YAAA;YAAA;YAAA;;UAAA;YAAA;YAAA;;YAAA;cAAA;cAAA;YAAA;;YAAA;YAAA;;UAAA;YAAA;;YAAA;cAAA;cAAA;YAAA;;YAAA;;UAAA;YAAA;;UAAA;YAAA;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AAuBAG,MAAM,CAACC,OAAP,GAAiBf,aAAjB"},"metadata":{},"sourceType":"script"}