{"ast":null,"code":"'use strict';\n\nconst log = require('debug')('ipfs:repo:gc');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst loadMfsRoot = require('../files/utils/with-mfs-root');\n/**\n * @typedef {import('ipfs-core-types/src/pin').API} PinAPI\n * @typedef {import('ipfs-core-types/src/refs').API} RefsAPI\n * @typedef {import('ipfs-repo').IPFSRepo} IPFSRepo\n * @typedef {import('interface-datastore').Key} Key\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('ipfs-core-utils/src/multihashes')} Multihashes\n */\n\n/**\n * Perform mark and sweep garbage collection\n *\n * @param {Object} config\n * @param {IPFSRepo} config.repo\n * @param {Multihashes} config.hashers\n */\n\n\nmodule.exports = _ref => {\n  let {\n    repo,\n    hashers\n  } = _ref;\n\n  /**\n   * @type {import('ipfs-core-types/src/repo').API[\"gc\"]}\n   */\n  async function* gc() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const start = Date.now();\n    let mfsRootCid;\n\n    try {\n      mfsRootCid = await loadMfsRoot({\n        repo,\n        hashers\n      }, options); // temporarily pin mfs root\n\n      await repo.pins.pinRecursively(mfsRootCid);\n      yield* repo.gc();\n    } finally {\n      // gc complete, unpin mfs root\n      if (mfsRootCid) {\n        await repo.pins.unpin(mfsRootCid);\n      }\n    }\n\n    log(`Complete (${Date.now() - start}ms)`);\n  }\n\n  return withTimeoutOption(gc);\n};","map":{"version":3,"names":["log","require","withTimeoutOption","loadMfsRoot","module","exports","repo","hashers","gc","options","start","Date","now","mfsRootCid","pins","pinRecursively","unpin"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/repo/gc.js"],"sourcesContent":["'use strict'\n\nconst log = require('debug')('ipfs:repo:gc')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst loadMfsRoot = require('../files/utils/with-mfs-root')\n\n/**\n * @typedef {import('ipfs-core-types/src/pin').API} PinAPI\n * @typedef {import('ipfs-core-types/src/refs').API} RefsAPI\n * @typedef {import('ipfs-repo').IPFSRepo} IPFSRepo\n * @typedef {import('interface-datastore').Key} Key\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('ipfs-core-utils/src/multihashes')} Multihashes\n */\n\n/**\n * Perform mark and sweep garbage collection\n *\n * @param {Object} config\n * @param {IPFSRepo} config.repo\n * @param {Multihashes} config.hashers\n */\nmodule.exports = ({ repo, hashers }) => {\n  /**\n   * @type {import('ipfs-core-types/src/repo').API[\"gc\"]}\n   */\n  async function * gc (options = {}) {\n    const start = Date.now()\n    let mfsRootCid\n\n    try {\n      mfsRootCid = await loadMfsRoot({\n        repo,\n        hashers\n      }, options)\n\n      // temporarily pin mfs root\n      await repo.pins.pinRecursively(mfsRootCid)\n\n      yield * repo.gc()\n    } finally {\n      // gc complete, unpin mfs root\n      if (mfsRootCid) {\n        await repo.pins.unpin(mfsRootCid)\n      }\n    }\n\n    log(`Complete (${Date.now() - start}ms)`)\n  }\n\n  return withTimeoutOption(gc)\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,cAAjB,CAAZ;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,yCAAD,CAAjC;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,8BAAD,CAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAG,MAAM,CAACC,OAAP,GAAiB,QAAuB;EAAA,IAAtB;IAAEC,IAAF;IAAQC;EAAR,CAAsB;;EACtC;AACF;AACA;EACE,gBAAiBC,EAAjB,GAAmC;IAAA,IAAdC,OAAc,uEAAJ,EAAI;IACjC,MAAMC,KAAK,GAAGC,IAAI,CAACC,GAAL,EAAd;IACA,IAAIC,UAAJ;;IAEA,IAAI;MACFA,UAAU,GAAG,MAAMV,WAAW,CAAC;QAC7BG,IAD6B;QAE7BC;MAF6B,CAAD,EAG3BE,OAH2B,CAA9B,CADE,CAMF;;MACA,MAAMH,IAAI,CAACQ,IAAL,CAAUC,cAAV,CAAyBF,UAAzB,CAAN;MAEA,OAAQP,IAAI,CAACE,EAAL,EAAR;IACD,CAVD,SAUU;MACR;MACA,IAAIK,UAAJ,EAAgB;QACd,MAAMP,IAAI,CAACQ,IAAL,CAAUE,KAAV,CAAgBH,UAAhB,CAAN;MACD;IACF;;IAEDb,GAAG,CAAE,aAAYW,IAAI,CAACC,GAAL,KAAaF,KAAM,KAAjC,CAAH;EACD;;EAED,OAAOR,iBAAiB,CAACM,EAAD,CAAxB;AACD,CA7BD"},"metadata":{},"sourceType":"script"}