{"ast":null,"code":"'use strict';\n\nconst {\n  exporter\n} = require('ipfs-unixfs-exporter');\n\nconst {\n  normalizeCidPath\n} = require('../utils');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst {\n  CID\n} = require('multiformats/cid');\n/**\n * @typedef {Object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../types').Preload} preload\n *\n * @param {Context} context\n */\n\n\nmodule.exports = function (_ref) {\n  let {\n    repo,\n    preload\n  } = _ref;\n\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"cat\"]}\n   */\n  async function* cat(ipfsPath) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    ipfsPath = normalizeCidPath(ipfsPath);\n\n    if (options.preload !== false) {\n      const pathComponents = ipfsPath.split('/');\n      preload(CID.parse(pathComponents[0]));\n    }\n\n    const file = await exporter(ipfsPath, repo.blocks, options); // File may not have unixfs prop if small & imported with rawLeaves true\n\n    if (file.type === 'directory') {\n      throw new Error('this dag node is a directory');\n    }\n\n    if (!file.content) {\n      throw new Error('this dag node has no content');\n    }\n\n    yield* file.content(options);\n  }\n\n  return withTimeoutOption(cat);\n};","map":{"version":3,"names":["exporter","require","normalizeCidPath","withTimeoutOption","CID","module","exports","repo","preload","cat","ipfsPath","options","pathComponents","split","parse","file","blocks","type","Error","content"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/cat.js"],"sourcesContent":["'use strict'\n\nconst { exporter } = require('ipfs-unixfs-exporter')\nconst { normalizeCidPath } = require('../utils')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst { CID } = require('multiformats/cid')\n\n/**\n * @typedef {Object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../types').Preload} preload\n *\n * @param {Context} context\n */\nmodule.exports = function ({ repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"cat\"]}\n   */\n  async function * cat (ipfsPath, options = {}) {\n    ipfsPath = normalizeCidPath(ipfsPath)\n\n    if (options.preload !== false) {\n      const pathComponents = ipfsPath.split('/')\n      preload(CID.parse(pathComponents[0]))\n    }\n\n    const file = await exporter(ipfsPath, repo.blocks, options)\n\n    // File may not have unixfs prop if small & imported with rawLeaves true\n    if (file.type === 'directory') {\n      throw new Error('this dag node is a directory')\n    }\n\n    if (!file.content) {\n      throw new Error('this dag node has no content')\n    }\n\n    yield * file.content(options)\n  }\n\n  return withTimeoutOption(cat)\n}\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA;AAAF,IAAeC,OAAO,CAAC,sBAAD,CAA5B;;AACA,MAAM;EAAEC;AAAF,IAAuBD,OAAO,CAAC,UAAD,CAApC;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,yCAAD,CAAjC;;AACA,MAAM;EAAEG;AAAF,IAAUH,OAAO,CAAC,kBAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAI,MAAM,CAACC,OAAP,GAAiB,gBAA6B;EAAA,IAAnB;IAAEC,IAAF;IAAQC;EAAR,CAAmB;;EAC5C;AACF;AACA;EACE,gBAAiBC,GAAjB,CAAsBC,QAAtB,EAA8C;IAAA,IAAdC,OAAc,uEAAJ,EAAI;IAC5CD,QAAQ,GAAGR,gBAAgB,CAACQ,QAAD,CAA3B;;IAEA,IAAIC,OAAO,CAACH,OAAR,KAAoB,KAAxB,EAA+B;MAC7B,MAAMI,cAAc,GAAGF,QAAQ,CAACG,KAAT,CAAe,GAAf,CAAvB;MACAL,OAAO,CAACJ,GAAG,CAACU,KAAJ,CAAUF,cAAc,CAAC,CAAD,CAAxB,CAAD,CAAP;IACD;;IAED,MAAMG,IAAI,GAAG,MAAMf,QAAQ,CAACU,QAAD,EAAWH,IAAI,CAACS,MAAhB,EAAwBL,OAAxB,CAA3B,CAR4C,CAU5C;;IACA,IAAII,IAAI,CAACE,IAAL,KAAc,WAAlB,EAA+B;MAC7B,MAAM,IAAIC,KAAJ,CAAU,8BAAV,CAAN;IACD;;IAED,IAAI,CAACH,IAAI,CAACI,OAAV,EAAmB;MACjB,MAAM,IAAID,KAAJ,CAAU,8BAAV,CAAN;IACD;;IAED,OAAQH,IAAI,CAACI,OAAL,CAAaR,OAAb,CAAR;EACD;;EAED,OAAOR,iBAAiB,CAACM,GAAD,CAAxB;AACD,CA3BD"},"metadata":{},"sourceType":"script"}