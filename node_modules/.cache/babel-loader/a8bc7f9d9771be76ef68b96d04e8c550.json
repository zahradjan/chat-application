{"ast":null,"code":"'use strict';\n\nconst asn1 = require('asn1.js');\n\nconst util = require('./../util');\n\nconst toBase64 = util.toBase64;\nconst toBn = util.toBn;\nconst RSAPrivateKey = asn1.define('RSAPrivateKey', function () {\n  this.seq().obj(this.key('version').int(), this.key('modulus').int(), this.key('publicExponent').int(), this.key('privateExponent').int(), this.key('prime1').int(), this.key('prime2').int(), this.key('exponent1').int(), this.key('exponent2').int(), this.key('coefficient').int());\n});\nconst AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {\n  this.seq().obj(this.key('algorithm').objid({\n    '1.2.840.113549.1.1.1': 'rsa'\n  }), this.key('none').optional().null_(), this.key('curve').optional().objid(), this.key('params').optional().seq().obj(this.key('p').int(), this.key('q').int(), this.key('g').int()));\n});\nconst PublicKey = asn1.define('RSAPublicKey', function () {\n  this.seq().obj(this.key('algorithm').use(AlgorithmIdentifier), this.key('subjectPublicKey').bitstr());\n});\nconst RSAPublicKey = asn1.define('RSAPublicKey', function () {\n  this.seq().obj(this.key('modulus').int(), this.key('publicExponent').int());\n}); // Convert a PKCS#1 in ASN1 DER format to a JWK key\n\nexports.pkcs1ToJwk = function (bytes) {\n  const asn1 = RSAPrivateKey.decode(bytes, 'der');\n  return {\n    kty: 'RSA',\n    n: toBase64(asn1.modulus),\n    e: toBase64(asn1.publicExponent),\n    d: toBase64(asn1.privateExponent),\n    p: toBase64(asn1.prime1),\n    q: toBase64(asn1.prime2),\n    dp: toBase64(asn1.exponent1),\n    dq: toBase64(asn1.exponent2),\n    qi: toBase64(asn1.coefficient),\n    alg: 'RS256',\n    kid: '2011-04-29'\n  };\n}; // Convert a JWK key into PKCS#1 in ASN1 DER format\n\n\nexports.jwkToPkcs1 = function (jwk) {\n  return RSAPrivateKey.encode({\n    version: 0,\n    modulus: toBn(jwk.n),\n    publicExponent: toBn(jwk.e),\n    privateExponent: toBn(jwk.d),\n    prime1: toBn(jwk.p),\n    prime2: toBn(jwk.q),\n    exponent1: toBn(jwk.dp),\n    exponent2: toBn(jwk.dq),\n    coefficient: toBn(jwk.qi)\n  }, 'der');\n}; // Convert a PKCIX in ASN1 DER format to a JWK key\n\n\nexports.pkixToJwk = function (bytes) {\n  const ndata = PublicKey.decode(bytes, 'der');\n  const asn1 = RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der');\n  return {\n    kty: 'RSA',\n    n: toBase64(asn1.modulus),\n    e: toBase64(asn1.publicExponent),\n    alg: 'RS256',\n    kid: '2011-04-29'\n  };\n}; // Convert a JWK key to PKCIX in ASN1 DER format\n\n\nexports.jwkToPkix = function (jwk) {\n  return PublicKey.encode({\n    algorithm: {\n      algorithm: 'rsa',\n      none: null\n    },\n    subjectPublicKey: {\n      data: RSAPublicKey.encode({\n        modulus: toBn(jwk.n),\n        publicExponent: toBn(jwk.e)\n      }, 'der')\n    }\n  }, 'der');\n};","map":{"version":3,"names":["asn1","require","util","toBase64","toBn","RSAPrivateKey","define","seq","obj","key","int","AlgorithmIdentifier","objid","optional","null_","PublicKey","use","bitstr","RSAPublicKey","exports","pkcs1ToJwk","bytes","decode","kty","n","modulus","e","publicExponent","d","privateExponent","p","prime1","q","prime2","dp","exponent1","dq","exponent2","qi","coefficient","alg","kid","jwkToPkcs1","jwk","encode","version","pkixToJwk","ndata","subjectPublicKey","data","jwkToPkix","algorithm","none"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/orbit-db-keystore/node_modules/libp2p-crypto/src/keys/rsa-utils.js"],"sourcesContent":["'use strict'\n\nconst asn1 = require('asn1.js')\n\nconst util = require('./../util')\nconst toBase64 = util.toBase64\nconst toBn = util.toBn\n\nconst RSAPrivateKey = asn1.define('RSAPrivateKey', function () {\n  this.seq().obj(\n    this.key('version').int(),\n    this.key('modulus').int(),\n    this.key('publicExponent').int(),\n    this.key('privateExponent').int(),\n    this.key('prime1').int(),\n    this.key('prime2').int(),\n    this.key('exponent1').int(),\n    this.key('exponent2').int(),\n    this.key('coefficient').int()\n  )\n})\n\nconst AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {\n  this.seq().obj(\n    this.key('algorithm').objid({\n      '1.2.840.113549.1.1.1': 'rsa'\n    }),\n    this.key('none').optional().null_(),\n    this.key('curve').optional().objid(),\n    this.key('params').optional().seq().obj(\n      this.key('p').int(),\n      this.key('q').int(),\n      this.key('g').int()\n    )\n  )\n})\n\nconst PublicKey = asn1.define('RSAPublicKey', function () {\n  this.seq().obj(\n    this.key('algorithm').use(AlgorithmIdentifier),\n    this.key('subjectPublicKey').bitstr()\n  )\n})\n\nconst RSAPublicKey = asn1.define('RSAPublicKey', function () {\n  this.seq().obj(\n    this.key('modulus').int(),\n    this.key('publicExponent').int()\n  )\n})\n\n// Convert a PKCS#1 in ASN1 DER format to a JWK key\nexports.pkcs1ToJwk = function (bytes) {\n  const asn1 = RSAPrivateKey.decode(bytes, 'der')\n\n  return {\n    kty: 'RSA',\n    n: toBase64(asn1.modulus),\n    e: toBase64(asn1.publicExponent),\n    d: toBase64(asn1.privateExponent),\n    p: toBase64(asn1.prime1),\n    q: toBase64(asn1.prime2),\n    dp: toBase64(asn1.exponent1),\n    dq: toBase64(asn1.exponent2),\n    qi: toBase64(asn1.coefficient),\n    alg: 'RS256',\n    kid: '2011-04-29'\n  }\n}\n\n// Convert a JWK key into PKCS#1 in ASN1 DER format\nexports.jwkToPkcs1 = function (jwk) {\n  return RSAPrivateKey.encode({\n    version: 0,\n    modulus: toBn(jwk.n),\n    publicExponent: toBn(jwk.e),\n    privateExponent: toBn(jwk.d),\n    prime1: toBn(jwk.p),\n    prime2: toBn(jwk.q),\n    exponent1: toBn(jwk.dp),\n    exponent2: toBn(jwk.dq),\n    coefficient: toBn(jwk.qi)\n  }, 'der')\n}\n\n// Convert a PKCIX in ASN1 DER format to a JWK key\nexports.pkixToJwk = function (bytes) {\n  const ndata = PublicKey.decode(bytes, 'der')\n  const asn1 = RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')\n\n  return {\n    kty: 'RSA',\n    n: toBase64(asn1.modulus),\n    e: toBase64(asn1.publicExponent),\n    alg: 'RS256',\n    kid: '2011-04-29'\n  }\n}\n\n// Convert a JWK key to PKCIX in ASN1 DER format\nexports.jwkToPkix = function (jwk) {\n  return PublicKey.encode({\n    algorithm: {\n      algorithm: 'rsa',\n      none: null\n    },\n    subjectPublicKey: {\n      data: RSAPublicKey.encode({\n        modulus: toBn(jwk.n),\n        publicExponent: toBn(jwk.e)\n      }, 'der')\n    }\n  }, 'der')\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}