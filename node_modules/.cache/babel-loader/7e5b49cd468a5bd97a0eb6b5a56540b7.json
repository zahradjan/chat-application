{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _inherits = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar _require = require('events'),\n    EventEmitter = _require.EventEmitter;\n\nvar _require2 = require('uint8arrays/to-string'),\n    uint8ArrayToString = _require2.toString;\n\nvar CONSTANTS = require('./constants');\n\nvar logger = require('./utils').logger;\n/**\n * @typedef {import('multiformats').CID} CID\n * @typedef {import('peer-id')} PeerId\n */\n\n/**\n * @param {CID} cid\n */\n\n\nvar unwantEvent = function unwantEvent(cid) {\n  return \"unwant:\".concat(uint8ArrayToString(cid.multihash.bytes, 'base64'));\n};\n/**\n * @param {CID} cid\n */\n\n\nvar blockEvent = function blockEvent(cid) {\n  return \"block:\".concat(uint8ArrayToString(cid.multihash.bytes, 'base64'));\n};\n\nvar Notifications = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Notifications, _EventEmitter);\n\n  var _super = _createSuper(Notifications);\n\n  /**\n   * Internal module used to track events about incoming blocks,\n   * wants and unwants.\n   *\n   * @param {PeerId} peerId\n   */\n  function Notifications(peerId) {\n    var _this;\n\n    _classCallCheck(this, Notifications);\n\n    _this = _super.call(this);\n\n    _this.setMaxListeners(CONSTANTS.maxListeners);\n\n    _this._log = logger(peerId, 'notif');\n    return _this;\n  }\n  /**\n   * Signal the system that we received `block`.\n   *\n   * @param {CID} cid\n   * @param {Uint8Array} block\n   * @returns {void}\n   */\n\n\n  _createClass(Notifications, [{\n    key: \"hasBlock\",\n    value: function hasBlock(cid, block) {\n      var event = blockEvent(cid);\n\n      this._log(event);\n\n      this.emit(event, block);\n    }\n    /**\n     * Signal the system that we are waiting to receive the\n     * block associated with the given `cid`.\n     * Returns a Promise that resolves to the block when it is received,\n     * or undefined when the block is unwanted.\n     *\n     * @param {CID} cid\n     * @param {Object} [options]\n     * @param {AbortSignal} [options.signal]\n     * @returns {Promise<Uint8Array>}\n     */\n\n  }, {\n    key: \"wantBlock\",\n    value: function wantBlock(cid) {\n      var _this2 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (!cid) {\n        throw new Error('Not a valid cid');\n      }\n\n      var blockEvt = blockEvent(cid);\n      var unwantEvt = unwantEvent(cid);\n\n      this._log(\"wantBlock:\".concat(cid));\n\n      return new Promise(function (resolve, reject) {\n        var onUnwant = function onUnwant() {\n          _this2.removeListener(blockEvt, onBlock);\n\n          reject(new Error(\"Block for \".concat(cid, \" unwanted\")));\n        };\n        /**\n         * @param {Uint8Array} data\n         */\n\n\n        var onBlock = function onBlock(data) {\n          _this2.removeListener(unwantEvt, onUnwant);\n\n          resolve(data);\n        };\n\n        _this2.once(unwantEvt, onUnwant);\n\n        _this2.once(blockEvt, onBlock);\n\n        if (options && options.signal) {\n          options.signal.addEventListener('abort', function () {\n            _this2.removeListener(blockEvt, onBlock);\n\n            _this2.removeListener(unwantEvt, onUnwant);\n\n            reject(new Error(\"Want for \".concat(cid, \" aborted\")));\n          });\n        }\n      });\n    }\n    /**\n     * Signal that the block is not wanted anymore.\n     *\n     * @param {CID} cid - the CID of the block that is not wanted anymore.\n     * @returns {void}\n     */\n\n  }, {\n    key: \"unwantBlock\",\n    value: function unwantBlock(cid) {\n      var event = unwantEvent(cid);\n\n      this._log(event);\n\n      this.emit(event);\n    }\n  }]);\n\n  return Notifications;\n}(EventEmitter);\n\nmodule.exports = Notifications;","map":{"version":3,"names":["require","EventEmitter","uint8ArrayToString","toString","CONSTANTS","logger","unwantEvent","cid","multihash","bytes","blockEvent","Notifications","peerId","setMaxListeners","maxListeners","_log","block","event","emit","options","Error","blockEvt","unwantEvt","Promise","resolve","reject","onUnwant","removeListener","onBlock","data","once","signal","addEventListener","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-bitswap/src/notifications.js"],"sourcesContent":["'use strict'\n\nconst { EventEmitter } = require('events')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\n\nconst CONSTANTS = require('./constants')\nconst logger = require('./utils').logger\n\n/**\n * @typedef {import('multiformats').CID} CID\n * @typedef {import('peer-id')} PeerId\n */\n\n/**\n * @param {CID} cid\n */\nconst unwantEvent = (cid) => `unwant:${uint8ArrayToString(cid.multihash.bytes, 'base64')}`\n\n/**\n * @param {CID} cid\n */\nconst blockEvent = (cid) => `block:${uint8ArrayToString(cid.multihash.bytes, 'base64')}`\n\nclass Notifications extends EventEmitter {\n  /**\n   * Internal module used to track events about incoming blocks,\n   * wants and unwants.\n   *\n   * @param {PeerId} peerId\n   */\n  constructor (peerId) {\n    super()\n\n    this.setMaxListeners(CONSTANTS.maxListeners)\n\n    this._log = logger(peerId, 'notif')\n  }\n\n  /**\n   * Signal the system that we received `block`.\n   *\n   * @param {CID} cid\n   * @param {Uint8Array} block\n   * @returns {void}\n   */\n  hasBlock (cid, block) {\n    const event = blockEvent(cid)\n    this._log(event)\n    this.emit(event, block)\n  }\n\n  /**\n   * Signal the system that we are waiting to receive the\n   * block associated with the given `cid`.\n   * Returns a Promise that resolves to the block when it is received,\n   * or undefined when the block is unwanted.\n   *\n   * @param {CID} cid\n   * @param {Object} [options]\n   * @param {AbortSignal} [options.signal]\n   * @returns {Promise<Uint8Array>}\n   */\n  wantBlock (cid, options = {}) {\n    if (!cid) {\n      throw new Error('Not a valid cid')\n    }\n\n    const blockEvt = blockEvent(cid)\n    const unwantEvt = unwantEvent(cid)\n\n    this._log(`wantBlock:${cid}`)\n\n    return new Promise((resolve, reject) => {\n      const onUnwant = () => {\n        this.removeListener(blockEvt, onBlock)\n\n        reject(new Error(`Block for ${cid} unwanted`))\n      }\n\n      /**\n       * @param {Uint8Array} data\n       */\n      const onBlock = (data) => {\n        this.removeListener(unwantEvt, onUnwant)\n\n        resolve(data)\n      }\n\n      this.once(unwantEvt, onUnwant)\n      this.once(blockEvt, onBlock)\n\n      if (options && options.signal) {\n        options.signal.addEventListener('abort', () => {\n          this.removeListener(blockEvt, onBlock)\n          this.removeListener(unwantEvt, onUnwant)\n\n          reject(new Error(`Want for ${cid} aborted`))\n        })\n      }\n    })\n  }\n\n  /**\n   * Signal that the block is not wanted anymore.\n   *\n   * @param {CID} cid - the CID of the block that is not wanted anymore.\n   * @returns {void}\n   */\n  unwantBlock (cid) {\n    const event = unwantEvent(cid)\n    this._log(event)\n    this.emit(event)\n  }\n}\n\nmodule.exports = Notifications\n"],"mappings":"AAAA;;;;;;;;;;AAEA,eAAyBA,OAAO,CAAC,QAAD,CAAhC;AAAA,IAAQC,YAAR,YAAQA,YAAR;;AACA,gBAAyCD,OAAO,CAAC,uBAAD,CAAhD;AAAA,IAAkBE,kBAAlB,aAAQC,QAAR;;AAEA,IAAMC,SAAS,GAAGJ,OAAO,CAAC,aAAD,CAAzB;;AACA,IAAMK,MAAM,GAAGL,OAAO,CAAC,SAAD,CAAP,CAAmBK,MAAlC;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AACA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,GAAD;EAAA,wBAAmBL,kBAAkB,CAACK,GAAG,CAACC,SAAJ,CAAcC,KAAf,EAAsB,QAAtB,CAArC;AAAA,CAApB;AAEA;AACA;AACA;;;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACH,GAAD;EAAA,uBAAkBL,kBAAkB,CAACK,GAAG,CAACC,SAAJ,CAAcC,KAAf,EAAsB,QAAtB,CAApC;AAAA,CAAnB;;IAEME,a;;;;;EACJ;AACF;AACA;AACA;AACA;AACA;EACE,uBAAaC,MAAb,EAAqB;IAAA;;IAAA;;IACnB;;IAEA,MAAKC,eAAL,CAAqBT,SAAS,CAACU,YAA/B;;IAEA,MAAKC,IAAL,GAAYV,MAAM,CAACO,MAAD,EAAS,OAAT,CAAlB;IALmB;EAMpB;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;;WACE,kBAAUL,GAAV,EAAeS,KAAf,EAAsB;MACpB,IAAMC,KAAK,GAAGP,UAAU,CAACH,GAAD,CAAxB;;MACA,KAAKQ,IAAL,CAAUE,KAAV;;MACA,KAAKC,IAAL,CAAUD,KAAV,EAAiBD,KAAjB;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,mBAAWT,GAAX,EAA8B;MAAA;;MAAA,IAAdY,OAAc,uEAAJ,EAAI;;MAC5B,IAAI,CAACZ,GAAL,EAAU;QACR,MAAM,IAAIa,KAAJ,CAAU,iBAAV,CAAN;MACD;;MAED,IAAMC,QAAQ,GAAGX,UAAU,CAACH,GAAD,CAA3B;MACA,IAAMe,SAAS,GAAGhB,WAAW,CAACC,GAAD,CAA7B;;MAEA,KAAKQ,IAAL,qBAAuBR,GAAvB;;MAEA,OAAO,IAAIgB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;QACtC,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;UACrB,MAAI,CAACC,cAAL,CAAoBN,QAApB,EAA8BO,OAA9B;;UAEAH,MAAM,CAAC,IAAIL,KAAJ,qBAAuBb,GAAvB,eAAD,CAAN;QACD,CAJD;QAMA;AACN;AACA;;;QACM,IAAMqB,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD,EAAU;UACxB,MAAI,CAACF,cAAL,CAAoBL,SAApB,EAA+BI,QAA/B;;UAEAF,OAAO,CAACK,IAAD,CAAP;QACD,CAJD;;QAMA,MAAI,CAACC,IAAL,CAAUR,SAAV,EAAqBI,QAArB;;QACA,MAAI,CAACI,IAAL,CAAUT,QAAV,EAAoBO,OAApB;;QAEA,IAAIT,OAAO,IAAIA,OAAO,CAACY,MAAvB,EAA+B;UAC7BZ,OAAO,CAACY,MAAR,CAAeC,gBAAf,CAAgC,OAAhC,EAAyC,YAAM;YAC7C,MAAI,CAACL,cAAL,CAAoBN,QAApB,EAA8BO,OAA9B;;YACA,MAAI,CAACD,cAAL,CAAoBL,SAApB,EAA+BI,QAA/B;;YAEAD,MAAM,CAAC,IAAIL,KAAJ,oBAAsBb,GAAtB,cAAD,CAAN;UACD,CALD;QAMD;MACF,CA3BM,CAAP;IA4BD;IAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,qBAAaA,GAAb,EAAkB;MAChB,IAAMU,KAAK,GAAGX,WAAW,CAACC,GAAD,CAAzB;;MACA,KAAKQ,IAAL,CAAUE,KAAV;;MACA,KAAKC,IAAL,CAAUD,KAAV;IACD;;;;EAzFyBhB,Y;;AA4F5BgC,MAAM,CAACC,OAAP,GAAiBvB,aAAjB"},"metadata":{},"sourceType":"script"}