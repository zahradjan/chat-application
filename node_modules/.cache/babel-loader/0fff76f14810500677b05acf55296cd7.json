{"ast":null,"code":"'use strict';\n\nconst {\n  default: parseDuration\n} = require('parse-duration');\n\nconst errCode = require('err-code');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @typedef {Object} BWOptions\n * @property {PeerId} [peer] - Specifies a peer to print bandwidth for\n * @property {string} [proto] - Specifies a protocol to print bandwidth for\n * @property {boolean} [poll] - Is used to yield bandwidth info at an interval\n * @property {number|string} [interval=1000] - The time interval to wait between updating output, if `poll` is `true`.\n *\n * @typedef {Object} BandwidthInfo\n * @property {bigint} totalIn\n * @property {bigint} totalOut\n * @property {number} rateIn\n * @property {number} rateOut\n *\n * @typedef {import('libp2p')} libp2p\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @param {libp2p} libp2p\n * @param {BWOptions} opts\n * @returns {BandwidthInfo}\n */\n\n\nfunction getBandwidthStats(libp2p, opts) {\n  let stats;\n\n  if (!libp2p.metrics) {\n    stats = undefined;\n  } else if (opts.peer) {\n    stats = libp2p.metrics.forPeer(opts.peer);\n  } else if (opts.proto) {\n    stats = libp2p.metrics.forProtocol(opts.proto);\n  } else {\n    stats = libp2p.metrics.global;\n  }\n\n  if (!stats) {\n    return {\n      totalIn: BigInt(0),\n      totalOut: BigInt(0),\n      rateIn: 0.0,\n      rateOut: 0.0\n    };\n  }\n\n  const {\n    movingAverages,\n    snapshot\n  } = stats;\n  return {\n    totalIn: BigInt(snapshot.dataReceived.integerValue().toString()),\n    totalOut: BigInt(snapshot.dataSent.integerValue().toString()),\n    rateIn: movingAverages.dataReceived[60000].movingAverage() / 60,\n    rateOut: movingAverages.dataSent[60000].movingAverage() / 60\n  };\n}\n/**\n * @param {Object} config\n * @param {import('../../types').NetworkService} config.network\n */\n\n\nmodule.exports = _ref => {\n  let {\n    network\n  } = _ref;\n\n  /**\n   * @type {import('ipfs-core-types/src/stats').API[\"bw\"]}\n   */\n  const bw = async function* () {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      libp2p\n    } = await network.use(options);\n\n    if (!options.poll) {\n      yield getBandwidthStats(libp2p, options);\n      return;\n    }\n\n    const interval = options.interval || 1000;\n    let ms = -1;\n\n    try {\n      ms = typeof interval === 'string' ? parseDuration(interval) || -1 : interval;\n      if (!ms || ms < 0) throw new Error('invalid duration');\n    } catch (err) {\n      throw errCode(err, 'ERR_INVALID_POLL_INTERVAL');\n    }\n\n    let timeoutId;\n\n    try {\n      while (true) {\n        yield getBandwidthStats(libp2p, options); // eslint-disable-next-line no-loop-func\n\n        await new Promise(resolve => {\n          timeoutId = setTimeout(resolve, ms);\n        });\n      }\n    } finally {\n      clearTimeout(timeoutId);\n    }\n  };\n\n  return withTimeoutOption(bw);\n};","map":{"version":3,"names":["default","parseDuration","require","errCode","withTimeoutOption","getBandwidthStats","libp2p","opts","stats","metrics","undefined","peer","forPeer","proto","forProtocol","global","totalIn","BigInt","totalOut","rateIn","rateOut","movingAverages","snapshot","dataReceived","integerValue","toString","dataSent","movingAverage","module","exports","network","bw","options","use","poll","interval","ms","Error","err","timeoutId","Promise","resolve","setTimeout","clearTimeout"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/stats/bw.js"],"sourcesContent":["'use strict'\n\nconst { default: parseDuration } = require('parse-duration')\nconst errCode = require('err-code')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @typedef {Object} BWOptions\n * @property {PeerId} [peer] - Specifies a peer to print bandwidth for\n * @property {string} [proto] - Specifies a protocol to print bandwidth for\n * @property {boolean} [poll] - Is used to yield bandwidth info at an interval\n * @property {number|string} [interval=1000] - The time interval to wait between updating output, if `poll` is `true`.\n *\n * @typedef {Object} BandwidthInfo\n * @property {bigint} totalIn\n * @property {bigint} totalOut\n * @property {number} rateIn\n * @property {number} rateOut\n *\n * @typedef {import('libp2p')} libp2p\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @param {libp2p} libp2p\n * @param {BWOptions} opts\n * @returns {BandwidthInfo}\n */\nfunction getBandwidthStats (libp2p, opts) {\n  let stats\n\n  if (!libp2p.metrics) {\n    stats = undefined\n  } else if (opts.peer) {\n    stats = libp2p.metrics.forPeer(opts.peer)\n  } else if (opts.proto) {\n    stats = libp2p.metrics.forProtocol(opts.proto)\n  } else {\n    stats = libp2p.metrics.global\n  }\n\n  if (!stats) {\n    return {\n      totalIn: BigInt(0),\n      totalOut: BigInt(0),\n      rateIn: 0.0,\n      rateOut: 0.0\n    }\n  }\n\n  const { movingAverages, snapshot } = stats\n\n  return {\n    totalIn: BigInt(snapshot.dataReceived.integerValue().toString()),\n    totalOut: BigInt(snapshot.dataSent.integerValue().toString()),\n    rateIn: movingAverages.dataReceived[60000].movingAverage() / 60,\n    rateOut: movingAverages.dataSent[60000].movingAverage() / 60\n  }\n}\n\n/**\n * @param {Object} config\n * @param {import('../../types').NetworkService} config.network\n */\nmodule.exports = ({ network }) => {\n  /**\n   * @type {import('ipfs-core-types/src/stats').API[\"bw\"]}\n   */\n  const bw = async function * (options = {}) {\n    const { libp2p } = await network.use(options)\n\n    if (!options.poll) {\n      yield getBandwidthStats(libp2p, options)\n      return\n    }\n\n    const interval = options.interval || 1000\n    let ms = -1\n    try {\n      ms = typeof interval === 'string' ? parseDuration(interval) || -1 : interval\n      if (!ms || ms < 0) throw new Error('invalid duration')\n    } catch (err) {\n      throw errCode(err, 'ERR_INVALID_POLL_INTERVAL')\n    }\n\n    let timeoutId\n    try {\n      while (true) {\n        yield getBandwidthStats(libp2p, options)\n        // eslint-disable-next-line no-loop-func\n        await new Promise(resolve => { timeoutId = setTimeout(resolve, ms) })\n      }\n    } finally {\n      clearTimeout(timeoutId)\n    }\n  }\n\n  return withTimeoutOption(bw)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}