{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _assertThisInitialized = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\n\nvar _inherits = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar _require = require('events'),\n    EventEmitter = _require.EventEmitter;\n\nvar MovingAverage = require('@vascosantos/moving-average');\n/**\n * @typedef {import('@vascosantos/moving-average').IMovingAverage} IMovingAverage\n * @typedef {[string, number, number]} Op\n */\n\n\nvar Stats = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Stats, _EventEmitter);\n\n  var _super = _createSuper(Stats);\n\n  /**\n   *\n   * @param {string[]} initialCounters\n   * @param {Object} options\n   * @param {boolean} options.enabled\n   * @param {number} options.computeThrottleTimeout\n   * @param {number} options.computeThrottleMaxQueueSize\n   * @param {import('.').AverageIntervals} options.movingAverageIntervals\n   */\n  function Stats(initialCounters, options) {\n    var _this;\n\n    _classCallCheck(this, Stats);\n\n    _this = _super.call(this);\n    _this._options = options;\n    /** @type {Op[]} */\n\n    _this._queue = [];\n    /** @type {Record<string, bigint>} */\n\n    _this._stats = {};\n    _this._frequencyLastTime = Date.now();\n    /** @type {Record<string, number>} */\n\n    _this._frequencyAccumulators = {};\n    /** @type {Record<string, Record<number, IMovingAverage>>} */\n\n    _this._movingAverages = {};\n    _this._update = _this._update.bind(_assertThisInitialized(_this));\n    initialCounters.forEach(function (key) {\n      _this._stats[key] = BigInt(0);\n      _this._movingAverages[key] = {};\n\n      _this._options.movingAverageIntervals.forEach(function (interval) {\n        var ma = _this._movingAverages[key][interval] = MovingAverage(interval);\n        ma.push(_this._frequencyLastTime, 0);\n      });\n    });\n    _this._enabled = _this._options.enabled;\n    return _this;\n  }\n\n  _createClass(Stats, [{\n    key: \"enable\",\n    value: function enable() {\n      this._enabled = true;\n    }\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      this._disabled = true;\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this._timeout) {\n        clearTimeout(this._timeout);\n      }\n    }\n  }, {\n    key: \"snapshot\",\n    get: function get() {\n      return Object.assign({}, this._stats);\n    }\n  }, {\n    key: \"movingAverages\",\n    get: function get() {\n      return Object.assign({}, this._movingAverages);\n    }\n    /**\n     * @param {string} counter\n     * @param {number} inc\n     */\n\n  }, {\n    key: \"push\",\n    value: function push(counter, inc) {\n      if (this._enabled) {\n        this._queue.push([counter, inc, Date.now()]);\n\n        this._resetComputeTimeout();\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_resetComputeTimeout\",\n    value: function _resetComputeTimeout() {\n      if (this._timeout) {\n        clearTimeout(this._timeout);\n      }\n\n      this._timeout = setTimeout(this._update, this._nextTimeout());\n    }\n    /**\n     * @private\n     * @returns {number}\n     */\n\n  }, {\n    key: \"_nextTimeout\",\n    value: function _nextTimeout() {\n      // calculate the need for an update, depending on the queue length\n      var urgency = this._queue.length / this._options.computeThrottleMaxQueueSize;\n      return Math.max(this._options.computeThrottleTimeout * (1 - urgency), 0);\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_update\",\n    value: function _update() {\n      this._timeout = null;\n\n      if (this._queue.length) {\n        var last;\n\n        while (this._queue.length) {\n          var op = last = this._queue.shift();\n\n          op && this._applyOp(op);\n        }\n\n        last && this._updateFrequency(last[2]); // contains timestamp of last op\n\n        this.emit('update', this._stats);\n      }\n    }\n    /**\n     * @private\n     * @param {number} latestTime\n     */\n\n  }, {\n    key: \"_updateFrequency\",\n    value: function _updateFrequency(latestTime) {\n      var _this2 = this;\n\n      var timeDiff = latestTime - this._frequencyLastTime;\n\n      if (timeDiff) {\n        Object.keys(this._stats).forEach(function (key) {\n          _this2._updateFrequencyFor(key, timeDiff, latestTime);\n        });\n      }\n\n      this._frequencyLastTime = latestTime;\n    }\n    /**\n     * @private\n     * @param {string} key\n     * @param {number} timeDiffMS\n     * @param {number} latestTime\n     * @returns {void}\n     */\n\n  }, {\n    key: \"_updateFrequencyFor\",\n    value: function _updateFrequencyFor(key, timeDiffMS, latestTime) {\n      var count = this._frequencyAccumulators[key] || 0;\n      this._frequencyAccumulators[key] = 0;\n      var hz = count / timeDiffMS * 1000;\n      var movingAverages = this._movingAverages[key];\n\n      if (!movingAverages) {\n        movingAverages = this._movingAverages[key] = {};\n      }\n\n      this._options.movingAverageIntervals.forEach(function (movingAverageInterval) {\n        var movingAverage = movingAverages[movingAverageInterval];\n\n        if (!movingAverage) {\n          movingAverage = movingAverages[movingAverageInterval] = MovingAverage(movingAverageInterval);\n        }\n\n        movingAverage.push(latestTime, hz);\n      });\n    }\n    /**\n     * @private\n     * @param {Op} op\n     */\n\n  }, {\n    key: \"_applyOp\",\n    value: function _applyOp(op) {\n      var key = op[0];\n      var inc = op[1];\n\n      if (typeof inc !== 'number') {\n        throw new Error(\"invalid increment number: \".concat(inc));\n      }\n\n      if (!Object.prototype.hasOwnProperty.call(this._stats, key)) {\n        this._stats[key] = BigInt(0);\n      }\n\n      this._stats[key] = BigInt(this._stats[key]) + BigInt(inc);\n\n      if (!this._frequencyAccumulators[key]) {\n        this._frequencyAccumulators[key] = 0;\n      }\n\n      this._frequencyAccumulators[key] += inc;\n    }\n  }]);\n\n  return Stats;\n}(EventEmitter);\n\nmodule.exports = Stats;","map":{"version":3,"names":["require","EventEmitter","MovingAverage","Stats","initialCounters","options","_options","_queue","_stats","_frequencyLastTime","Date","now","_frequencyAccumulators","_movingAverages","_update","bind","forEach","key","BigInt","movingAverageIntervals","interval","ma","push","_enabled","enabled","_disabled","_timeout","clearTimeout","Object","assign","counter","inc","_resetComputeTimeout","setTimeout","_nextTimeout","urgency","length","computeThrottleMaxQueueSize","Math","max","computeThrottleTimeout","last","op","shift","_applyOp","_updateFrequency","emit","latestTime","timeDiff","keys","_updateFrequencyFor","timeDiffMS","count","hz","movingAverages","movingAverageInterval","movingAverage","Error","prototype","hasOwnProperty","call","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-bitswap/src/stats/stat.js"],"sourcesContent":["'use strict'\n\nconst { EventEmitter } = require('events')\nconst MovingAverage = require('@vascosantos/moving-average')\n\n/**\n * @typedef {import('@vascosantos/moving-average').IMovingAverage} IMovingAverage\n * @typedef {[string, number, number]} Op\n */\n\nclass Stats extends EventEmitter {\n  /**\n   *\n   * @param {string[]} initialCounters\n   * @param {Object} options\n   * @param {boolean} options.enabled\n   * @param {number} options.computeThrottleTimeout\n   * @param {number} options.computeThrottleMaxQueueSize\n   * @param {import('.').AverageIntervals} options.movingAverageIntervals\n   */\n  constructor (initialCounters, options) {\n    super()\n\n    this._options = options\n    /** @type {Op[]} */\n    this._queue = []\n    /** @type {Record<string, bigint>} */\n    this._stats = {}\n\n    this._frequencyLastTime = Date.now()\n    /** @type {Record<string, number>} */\n    this._frequencyAccumulators = {}\n\n    /** @type {Record<string, Record<number, IMovingAverage>>} */\n    this._movingAverages = {}\n\n    this._update = this._update.bind(this)\n\n    initialCounters.forEach((key) => {\n      this._stats[key] = BigInt(0)\n      this._movingAverages[key] = {}\n      this._options.movingAverageIntervals.forEach((interval) => {\n        const ma = this._movingAverages[key][interval] = MovingAverage(interval)\n        ma.push(this._frequencyLastTime, 0)\n      })\n    })\n\n    this._enabled = this._options.enabled\n  }\n\n  enable () {\n    this._enabled = true\n  }\n\n  disable () {\n    this._disabled = true\n  }\n\n  stop () {\n    if (this._timeout) {\n      clearTimeout(this._timeout)\n    }\n  }\n\n  get snapshot () {\n    return Object.assign({}, this._stats)\n  }\n\n  get movingAverages () {\n    return Object.assign({}, this._movingAverages)\n  }\n\n  /**\n   * @param {string} counter\n   * @param {number} inc\n   */\n  push (counter, inc) {\n    if (this._enabled) {\n      this._queue.push([counter, inc, Date.now()])\n      this._resetComputeTimeout()\n    }\n  }\n\n  /**\n   * @private\n   */\n  _resetComputeTimeout () {\n    if (this._timeout) {\n      clearTimeout(this._timeout)\n    }\n    this._timeout = setTimeout(this._update, this._nextTimeout())\n  }\n\n  /**\n   * @private\n   * @returns {number}\n   */\n  _nextTimeout () {\n    // calculate the need for an update, depending on the queue length\n    const urgency = this._queue.length / this._options.computeThrottleMaxQueueSize\n    return Math.max(this._options.computeThrottleTimeout * (1 - urgency), 0)\n  }\n\n  /**\n   * @private\n   */\n  _update () {\n    this._timeout = null\n\n    if (this._queue.length) {\n      let last\n      while (this._queue.length) {\n        const op = last = this._queue.shift()\n        op && this._applyOp(op)\n      }\n\n      last && this._updateFrequency(last[2]) // contains timestamp of last op\n\n      this.emit('update', this._stats)\n    }\n  }\n\n  /**\n   * @private\n   * @param {number} latestTime\n   */\n  _updateFrequency (latestTime) {\n    const timeDiff = latestTime - this._frequencyLastTime\n\n    if (timeDiff) {\n      Object.keys(this._stats).forEach((key) => {\n        this._updateFrequencyFor(key, timeDiff, latestTime)\n      })\n    }\n\n    this._frequencyLastTime = latestTime\n  }\n\n  /**\n   * @private\n   * @param {string} key\n   * @param {number} timeDiffMS\n   * @param {number} latestTime\n   * @returns {void}\n   */\n  _updateFrequencyFor (key, timeDiffMS, latestTime) {\n    const count = this._frequencyAccumulators[key] || 0\n    this._frequencyAccumulators[key] = 0\n    const hz = (count / timeDiffMS) * 1000\n\n    let movingAverages = this._movingAverages[key]\n    if (!movingAverages) {\n      movingAverages = this._movingAverages[key] = {}\n    }\n    this._options.movingAverageIntervals.forEach((movingAverageInterval) => {\n      let movingAverage = movingAverages[movingAverageInterval]\n      if (!movingAverage) {\n        movingAverage = movingAverages[movingAverageInterval] = MovingAverage(movingAverageInterval)\n      }\n      movingAverage.push(latestTime, hz)\n    })\n  }\n\n  /**\n   * @private\n   * @param {Op} op\n   */\n  _applyOp (op) {\n    const key = op[0]\n    const inc = op[1]\n\n    if (typeof inc !== 'number') {\n      throw new Error(`invalid increment number: ${inc}`)\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(this._stats, key)) {\n      this._stats[key] = BigInt(0)\n    }\n\n    this._stats[key] = BigInt(this._stats[key]) + BigInt(inc)\n\n    if (!this._frequencyAccumulators[key]) {\n      this._frequencyAccumulators[key] = 0\n    }\n    this._frequencyAccumulators[key] += inc\n  }\n}\n\nmodule.exports = Stats\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}