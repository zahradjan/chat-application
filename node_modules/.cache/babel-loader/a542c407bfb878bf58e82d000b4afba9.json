{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _awaitAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _wrapAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nvar _asyncIterator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar abortable = require('abortable-iterator');\n\nvar toIterable = require('stream-to-it');\n\nvar _require = require('./constants'),\n    CLOSE_TIMEOUT = _require.CLOSE_TIMEOUT;\n\nvar toMultiaddr = require('libp2p-utils/src/ip-port-to-multiaddr');\n\nvar debug = require('debug');\n\nvar log = debug('libp2p:webrtc-star:socket');\nlog.error = debug('libp2p:webrtc-star:socket:error');\n\nvar toWebrtcMultiaddr = function toWebrtcMultiaddr(address, port) {\n  if (!address || !port) return undefined;\n\n  try {\n    return toMultiaddr(address, port);\n  } catch (err) {\n    log.error(err); // Account for mdns hostnames, just make it a local ip for now\n\n    return toMultiaddr('0.0.0.0', port);\n  }\n}; // Convert a socket into a MultiaddrConnection\n// https://github.com/libp2p/js-libp2p-interfaces/tree/master/src/transport#multiaddrconnection\n\n\nmodule.exports = function (socket) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _toIterable$duplex = toIterable.duplex(socket),\n      _sink = _toIterable$duplex.sink,\n      source = _toIterable$duplex.source; // If the remote address was passed, use it - it may have the peer ID encapsulated\n\n\n  var remoteAddr = options.remoteAddr || toWebrtcMultiaddr(socket.remoteAddress, socket.remotePort);\n  var localAddr = toWebrtcMultiaddr(socket.localAddress, socket.localPort);\n  var maConn = {\n    sink: function sink(source) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (options.signal) {\n                  source = abortable(source, options.signal);\n                }\n\n                _context2.prev = 1;\n                _context2.next = 4;\n                return _sink(_wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n                  var _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, chunk;\n\n                  return _regeneratorRuntime().wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _iteratorAbruptCompletion = false;\n                          _didIteratorError = false;\n                          _context.prev = 2;\n                          _iterator = _asyncIterator(source);\n\n                        case 4:\n                          _context.next = 6;\n                          return _awaitAsyncGenerator(_iterator.next());\n\n                        case 6:\n                          if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                            _context.next = 13;\n                            break;\n                          }\n\n                          chunk = _step.value;\n                          _context.next = 10;\n                          return chunk instanceof Uint8Array ? chunk : chunk.slice();\n\n                        case 10:\n                          _iteratorAbruptCompletion = false;\n                          _context.next = 4;\n                          break;\n\n                        case 13:\n                          _context.next = 19;\n                          break;\n\n                        case 15:\n                          _context.prev = 15;\n                          _context.t0 = _context[\"catch\"](2);\n                          _didIteratorError = true;\n                          _iteratorError = _context.t0;\n\n                        case 19:\n                          _context.prev = 19;\n                          _context.prev = 20;\n\n                          if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                            _context.next = 24;\n                            break;\n                          }\n\n                          _context.next = 24;\n                          return _awaitAsyncGenerator(_iterator.return());\n\n                        case 24:\n                          _context.prev = 24;\n\n                          if (!_didIteratorError) {\n                            _context.next = 27;\n                            break;\n                          }\n\n                          throw _iteratorError;\n\n                        case 27:\n                          return _context.finish(24);\n\n                        case 28:\n                          return _context.finish(19);\n\n                        case 29:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee, null, [[2, 15, 19, 29], [20,, 24, 28]]);\n                }))());\n\n              case 4:\n                _context2.next = 9;\n                break;\n\n              case 6:\n                _context2.prev = 6;\n                _context2.t0 = _context2[\"catch\"](1);\n\n                // If aborted we can safely ignore\n                if (_context2.t0.type !== 'aborted') {\n                  // If the source errored the socket will already have been destroyed by\n                  // toIterable.duplex(). If the socket errored it will already be\n                  // destroyed. There's nothing to do here except log the error & return.\n                  log.error(_context2.t0);\n                }\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[1, 6]]);\n      }))();\n    },\n    source: options.signal ? abortable(source, options.signal) : source,\n    conn: socket,\n    localAddr: localAddr,\n    remoteAddr: remoteAddr,\n    timeline: {\n      open: Date.now()\n    },\n    close: function close() {\n      if (socket.destroyed) return;\n      return new Promise(function (resolve, reject) {\n        var start = Date.now(); // Attempt to end the socket. If it takes longer to close than the\n        // timeout, destroy it manually.\n\n        var timeout = setTimeout(function () {\n          if (maConn.remoteAddr) {\n            var _maConn$remoteAddr$to = maConn.remoteAddr.toOptions(),\n                host = _maConn$remoteAddr$to.host,\n                port = _maConn$remoteAddr$to.port;\n\n            log('timeout closing socket to %s:%s after %dms, destroying it manually', host, port, Date.now() - start);\n          }\n\n          if (!socket.destroyed) {\n            socket.destroy();\n          }\n        }, CLOSE_TIMEOUT);\n        socket.once('close', function () {\n          resolve();\n        });\n        socket.end(function (err) {\n          clearTimeout(timeout);\n          maConn.timeline.close = Date.now();\n          if (err) return reject(err);\n        });\n      });\n    }\n  };\n  socket.once('close', function () {\n    // In instances where `close` was not explicitly called,\n    // such as an iterable stream ending, ensure we have set the close\n    // timeline\n    if (!maConn.timeline.close) {\n      maConn.timeline.close = Date.now();\n    }\n  });\n  return maConn;\n};","map":{"version":3,"names":["abortable","require","toIterable","CLOSE_TIMEOUT","toMultiaddr","debug","log","error","toWebrtcMultiaddr","address","port","undefined","err","module","exports","socket","options","duplex","sink","source","remoteAddr","remoteAddress","remotePort","localAddr","localAddress","localPort","maConn","signal","chunk","Uint8Array","slice","type","conn","timeline","open","Date","now","close","destroyed","Promise","resolve","reject","start","timeout","setTimeout","toOptions","host","destroy","once","end","clearTimeout"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-webrtc-star/src/socket-to-conn.js"],"sourcesContent":["'use strict'\n\nconst abortable = require('abortable-iterator')\nconst toIterable = require('stream-to-it')\nconst { CLOSE_TIMEOUT } = require('./constants')\nconst toMultiaddr = require('libp2p-utils/src/ip-port-to-multiaddr')\n\nconst debug = require('debug')\nconst log = debug('libp2p:webrtc-star:socket')\nlog.error = debug('libp2p:webrtc-star:socket:error')\n\nconst toWebrtcMultiaddr = (address, port) => {\n  if (!address || !port) return undefined\n\n  try {\n    return toMultiaddr(address, port)\n  } catch (err) {\n    log.error(err)\n    // Account for mdns hostnames, just make it a local ip for now\n    return toMultiaddr('0.0.0.0', port)\n  }\n}\n\n// Convert a socket into a MultiaddrConnection\n// https://github.com/libp2p/js-libp2p-interfaces/tree/master/src/transport#multiaddrconnection\nmodule.exports = (socket, options = {}) => {\n  const { sink, source } = toIterable.duplex(socket)\n\n  // If the remote address was passed, use it - it may have the peer ID encapsulated\n  const remoteAddr = options.remoteAddr || toWebrtcMultiaddr(socket.remoteAddress, socket.remotePort)\n  const localAddr = toWebrtcMultiaddr(socket.localAddress, socket.localPort)\n\n  const maConn = {\n    async sink (source) {\n      if (options.signal) {\n        source = abortable(source, options.signal)\n      }\n\n      try {\n        await sink((async function * () {\n          for await (const chunk of source) {\n            // Convert BufferList to Buffer\n            yield chunk instanceof Uint8Array ? chunk : chunk.slice()\n          }\n        })())\n      } catch (err) {\n        // If aborted we can safely ignore\n        if (err.type !== 'aborted') {\n          // If the source errored the socket will already have been destroyed by\n          // toIterable.duplex(). If the socket errored it will already be\n          // destroyed. There's nothing to do here except log the error & return.\n          log.error(err)\n        }\n      }\n    },\n\n    source: options.signal ? abortable(source, options.signal) : source,\n\n    conn: socket,\n\n    localAddr,\n    remoteAddr,\n\n    timeline: { open: Date.now() },\n\n    close () {\n      if (socket.destroyed) return\n\n      return new Promise((resolve, reject) => {\n        const start = Date.now()\n\n        // Attempt to end the socket. If it takes longer to close than the\n        // timeout, destroy it manually.\n        const timeout = setTimeout(() => {\n          if (maConn.remoteAddr) {\n            const { host, port } = maConn.remoteAddr.toOptions()\n            log('timeout closing socket to %s:%s after %dms, destroying it manually',\n              host, port, Date.now() - start)\n          }\n\n          if (!socket.destroyed) {\n            socket.destroy()\n          }\n        }, CLOSE_TIMEOUT)\n\n        socket.once('close', () => {\n          resolve()\n        })\n\n        socket.end(err => {\n          clearTimeout(timeout)\n\n          maConn.timeline.close = Date.now()\n          if (err) return reject(err)\n        })\n      })\n    }\n  }\n\n  socket.once('close', () => {\n    // In instances where `close` was not explicitly called,\n    // such as an iterable stream ending, ensure we have set the close\n    // timeline\n    if (!maConn.timeline.close) {\n      maConn.timeline.close = Date.now()\n    }\n  })\n\n  return maConn\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}