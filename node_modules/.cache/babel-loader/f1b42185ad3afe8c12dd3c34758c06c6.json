{"ast":null,"code":"'use strict';\n\nconst {\n  isValidMultiaddr\n} = require('./utils');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\n\n\nmodule.exports = _ref => {\n  let {\n    repo\n  } = _ref;\n\n  /**\n   * @type {import('ipfs-core-types/src/bootstrap').API[\"rm\"]}\n   */\n  async function rm(multiaddr) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!isValidMultiaddr(multiaddr)) {\n      throw new Error(`${multiaddr} is not a valid Multiaddr`);\n    }\n    /** @type {import('ipfs-core-types/src/config').Config} */\n    // @ts-ignore repo returns type unknown\n\n\n    const config = await repo.config.getAll(options);\n    config.Bootstrap = (config.Bootstrap || []).filter(ma => ma.toString() !== multiaddr.toString());\n    await repo.config.replace(config);\n    return {\n      Peers: [multiaddr]\n    };\n  }\n\n  return withTimeoutOption(rm);\n};","map":{"version":3,"names":["isValidMultiaddr","require","withTimeoutOption","module","exports","repo","rm","multiaddr","options","Error","config","getAll","Bootstrap","filter","ma","toString","replace","Peers"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/bootstrap/rm.js"],"sourcesContent":["'use strict'\n\nconst { isValidMultiaddr } = require('./utils')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nmodule.exports = ({ repo }) => {\n  /**\n   * @type {import('ipfs-core-types/src/bootstrap').API[\"rm\"]}\n   */\n  async function rm (multiaddr, options = {}) {\n    if (!isValidMultiaddr(multiaddr)) {\n      throw new Error(`${multiaddr} is not a valid Multiaddr`)\n    }\n\n    /** @type {import('ipfs-core-types/src/config').Config} */\n    // @ts-ignore repo returns type unknown\n    const config = await repo.config.getAll(options)\n    config.Bootstrap = (config.Bootstrap || []).filter(ma => ma.toString() !== multiaddr.toString())\n\n    await repo.config.replace(config)\n\n    return { Peers: [multiaddr] }\n  }\n\n  return withTimeoutOption(rm)\n}\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA;AAAF,IAAuBC,OAAO,CAAC,SAAD,CAApC;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,yCAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAiB,QAAc;EAAA,IAAb;IAAEC;EAAF,CAAa;;EAC7B;AACF;AACA;EACE,eAAeC,EAAf,CAAmBC,SAAnB,EAA4C;IAAA,IAAdC,OAAc,uEAAJ,EAAI;;IAC1C,IAAI,CAACR,gBAAgB,CAACO,SAAD,CAArB,EAAkC;MAChC,MAAM,IAAIE,KAAJ,CAAW,GAAEF,SAAU,2BAAvB,CAAN;IACD;IAED;IACA;;;IACA,MAAMG,MAAM,GAAG,MAAML,IAAI,CAACK,MAAL,CAAYC,MAAZ,CAAmBH,OAAnB,CAArB;IACAE,MAAM,CAACE,SAAP,GAAmB,CAACF,MAAM,CAACE,SAAP,IAAoB,EAArB,EAAyBC,MAAzB,CAAgCC,EAAE,IAAIA,EAAE,CAACC,QAAH,OAAkBR,SAAS,CAACQ,QAAV,EAAxD,CAAnB;IAEA,MAAMV,IAAI,CAACK,MAAL,CAAYM,OAAZ,CAAoBN,MAApB,CAAN;IAEA,OAAO;MAAEO,KAAK,EAAE,CAACV,SAAD;IAAT,CAAP;EACD;;EAED,OAAOL,iBAAiB,CAACI,EAAD,CAAxB;AACD,CApBD"},"metadata":{},"sourceType":"script"}