{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _asyncIterator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar dagPb = require('@ipld/dag-pb');\n\nvar cbor = require('cborg');\n\nvar pinset = require('./pin-set');\n\nvar _require2 = require('./utils'),\n    cidToKey = _require2.cidToKey,\n    PIN_DS_KEY = _require2.PIN_DS_KEY,\n    PinTypes = _require2.PinTypes;\n\nvar length = require('it-length');\n\nvar _require3 = require('multiformats/hashes/sha2'),\n    sha256 = _require3.sha256;\n\nvar mhd = require('multiformats/hashes/digest');\n\nvar _require4 = require('multiformats/bases/base32'),\n    base32 = _require4.base32;\n/**\n * @typedef {import('../../src/types').Migration} Migration\n * @typedef {import('../../src/types').MigrationProgressCallback} MigrationProgressCallback\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('multiformats/cid').CIDVersion} CIDVersion\n */\n\n/**\n * @param {Blockstore} blockstore\n * @param {Datastore} datastore\n * @param {Datastore} pinstore\n * @param {MigrationProgressCallback} onProgress\n */\n\n\nfunction pinsToDatastore(_x, _x2, _x3, _x4) {\n  return _pinsToDatastore.apply(this, arguments);\n}\n/**\n * @param {Blockstore} blockstore\n * @param {Datastore} datastore\n * @param {Datastore} pinstore\n * @param {MigrationProgressCallback} onProgress\n */\n\n\nfunction _pinsToDatastore() {\n  _pinsToDatastore = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(blockstore, datastore, pinstore, onProgress) {\n    var mh, cid, pinRootBuf, pinRoot, counter, pinCount, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, _cid, pin, _iteratorAbruptCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _cid2, _pin;\n\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return datastore.has(PIN_DS_KEY);\n\n          case 2:\n            if (_context.sent) {\n              _context.next = 4;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 4:\n            _context.next = 6;\n            return datastore.get(PIN_DS_KEY);\n\n          case 6:\n            mh = _context.sent;\n            cid = CID.decode(mh);\n            _context.next = 10;\n            return blockstore.get(cid);\n\n          case 10:\n            pinRootBuf = _context.sent;\n            pinRoot = dagPb.decode(pinRootBuf);\n            counter = 0;\n            _context.next = 15;\n            return length(pinset.loadSet(blockstore, pinRoot, PinTypes.recursive));\n\n          case 15:\n            _context.t0 = _context.sent;\n            _context.next = 18;\n            return length(pinset.loadSet(blockstore, pinRoot, PinTypes.direct));\n\n          case 18:\n            _context.t1 = _context.sent;\n            pinCount = _context.t0 + _context.t1;\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context.prev = 22;\n            _iterator = _asyncIterator(pinset.loadSet(blockstore, pinRoot, PinTypes.recursive));\n\n          case 24:\n            _context.next = 26;\n            return _iterator.next();\n\n          case 26:\n            if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n              _context.next = 38;\n              break;\n            }\n\n            _cid = _step.value;\n            counter++;\n            /** @type {{ depth: number, version?: CIDVersion, codec?: number }} */\n\n            pin = {\n              depth: Infinity\n            };\n\n            if (_cid.version !== 0) {\n              pin.version = _cid.version;\n            }\n\n            if (_cid.code !== dagPb.code) {\n              pin.codec = _cid.code;\n            }\n\n            _context.next = 34;\n            return pinstore.put(cidToKey(_cid), cbor.encode(pin));\n\n          case 34:\n            onProgress(counter / pinCount * 100, \"Migrated recursive pin \".concat(_cid));\n\n          case 35:\n            _iteratorAbruptCompletion = false;\n            _context.next = 24;\n            break;\n\n          case 38:\n            _context.next = 44;\n            break;\n\n          case 40:\n            _context.prev = 40;\n            _context.t2 = _context[\"catch\"](22);\n            _didIteratorError = true;\n            _iteratorError = _context.t2;\n\n          case 44:\n            _context.prev = 44;\n            _context.prev = 45;\n\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context.next = 49;\n              break;\n            }\n\n            _context.next = 49;\n            return _iterator.return();\n\n          case 49:\n            _context.prev = 49;\n\n            if (!_didIteratorError) {\n              _context.next = 52;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 52:\n            return _context.finish(49);\n\n          case 53:\n            return _context.finish(44);\n\n          case 54:\n            _iteratorAbruptCompletion2 = false;\n            _didIteratorError2 = false;\n            _context.prev = 56;\n            _iterator2 = _asyncIterator(pinset.loadSet(blockstore, pinRoot, PinTypes.direct));\n\n          case 58:\n            _context.next = 60;\n            return _iterator2.next();\n\n          case 60:\n            if (!(_iteratorAbruptCompletion2 = !(_step2 = _context.sent).done)) {\n              _context.next = 72;\n              break;\n            }\n\n            _cid2 = _step2.value;\n            counter++;\n            /** @type {{ depth: number, version?: CIDVersion, codec?: number }} */\n\n            _pin = {\n              depth: 0\n            };\n\n            if (_cid2.version !== 0) {\n              _pin.version = _cid2.version;\n            }\n\n            if (_cid2.code !== dagPb.code) {\n              _pin.codec = _cid2.code;\n            }\n\n            _context.next = 68;\n            return pinstore.put(cidToKey(_cid2), cbor.encode(_pin));\n\n          case 68:\n            onProgress(counter / pinCount * 100, \"Migrated direct pin \".concat(_cid2));\n\n          case 69:\n            _iteratorAbruptCompletion2 = false;\n            _context.next = 58;\n            break;\n\n          case 72:\n            _context.next = 78;\n            break;\n\n          case 74:\n            _context.prev = 74;\n            _context.t3 = _context[\"catch\"](56);\n            _didIteratorError2 = true;\n            _iteratorError2 = _context.t3;\n\n          case 78:\n            _context.prev = 78;\n            _context.prev = 79;\n\n            if (!(_iteratorAbruptCompletion2 && _iterator2.return != null)) {\n              _context.next = 83;\n              break;\n            }\n\n            _context.next = 83;\n            return _iterator2.return();\n\n          case 83:\n            _context.prev = 83;\n\n            if (!_didIteratorError2) {\n              _context.next = 86;\n              break;\n            }\n\n            throw _iteratorError2;\n\n          case 86:\n            return _context.finish(83);\n\n          case 87:\n            return _context.finish(78);\n\n          case 88:\n            _context.next = 90;\n            return blockstore.delete(cid);\n\n          case 90:\n            _context.next = 92;\n            return datastore.delete(PIN_DS_KEY);\n\n          case 92:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[22, 40, 44, 54], [45,, 49, 53], [56, 74, 78, 88], [79,, 83, 87]]);\n  }));\n  return _pinsToDatastore.apply(this, arguments);\n}\n\nfunction pinsToDAG(_x5, _x6, _x7, _x8) {\n  return _pinsToDAG.apply(this, arguments);\n}\n/**\n * @param {import('../../src/types').Backends} backends\n * @param {MigrationProgressCallback} onProgress\n * @param {*} fn\n */\n\n\nfunction _pinsToDAG() {\n  _pinsToDAG = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(blockstore, datastore, pinstore, onProgress) {\n    var recursivePins, directPins, counter, pinCount, _iteratorAbruptCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _step3$value, key, value, pin, _cid3, pinRoot, buf, digest, cid;\n\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            recursivePins = [];\n            directPins = [];\n            counter = 0;\n            _context2.next = 5;\n            return length(pinstore.queryKeys({}));\n\n          case 5:\n            pinCount = _context2.sent;\n            _iteratorAbruptCompletion3 = false;\n            _didIteratorError3 = false;\n            _context2.prev = 8;\n            _iterator3 = _asyncIterator(pinstore.query({}));\n\n          case 10:\n            _context2.next = 12;\n            return _iterator3.next();\n\n          case 12:\n            if (!(_iteratorAbruptCompletion3 = !(_step3 = _context2.sent).done)) {\n              _context2.next = 21;\n              break;\n            }\n\n            _step3$value = _step3.value, key = _step3$value.key, value = _step3$value.value;\n            counter++;\n            pin = cbor.decode(value);\n            _cid3 = CID.create(pin.version || 0, pin.codec || dagPb.code, mhd.decode(base32.decode('b' + key.toString().toLowerCase().split('/').pop())));\n\n            if (pin.depth === 0) {\n              onProgress(counter / pinCount * 100, \"Reverted direct pin \".concat(_cid3));\n              directPins.push(_cid3);\n            } else {\n              onProgress(counter / pinCount * 100, \"Reverted recursive pin \".concat(_cid3));\n              recursivePins.push(_cid3);\n            }\n\n          case 18:\n            _iteratorAbruptCompletion3 = false;\n            _context2.next = 10;\n            break;\n\n          case 21:\n            _context2.next = 27;\n            break;\n\n          case 23:\n            _context2.prev = 23;\n            _context2.t0 = _context2[\"catch\"](8);\n            _didIteratorError3 = true;\n            _iteratorError3 = _context2.t0;\n\n          case 27:\n            _context2.prev = 27;\n            _context2.prev = 28;\n\n            if (!(_iteratorAbruptCompletion3 && _iterator3.return != null)) {\n              _context2.next = 32;\n              break;\n            }\n\n            _context2.next = 32;\n            return _iterator3.return();\n\n          case 32:\n            _context2.prev = 32;\n\n            if (!_didIteratorError3) {\n              _context2.next = 35;\n              break;\n            }\n\n            throw _iteratorError3;\n\n          case 35:\n            return _context2.finish(32);\n\n          case 36:\n            return _context2.finish(27);\n\n          case 37:\n            onProgress(100, 'Updating pin root');\n            _context2.next = 40;\n            return pinset.storeSet(blockstore, PinTypes.direct, directPins);\n\n          case 40:\n            _context2.t1 = _context2.sent;\n            _context2.next = 43;\n            return pinset.storeSet(blockstore, PinTypes.recursive, recursivePins);\n\n          case 43:\n            _context2.t2 = _context2.sent;\n            _context2.t3 = [_context2.t1, _context2.t2];\n            pinRoot = {\n              Links: _context2.t3\n            };\n            buf = dagPb.encode(pinRoot);\n            _context2.next = 49;\n            return sha256.digest(buf);\n\n          case 49:\n            digest = _context2.sent;\n            cid = CID.createV0(digest);\n            _context2.next = 53;\n            return blockstore.put(cid, buf);\n\n          case 53:\n            _context2.next = 55;\n            return datastore.put(PIN_DS_KEY, cid.bytes);\n\n          case 55:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[8, 23, 27, 37], [28,, 32, 36]]);\n  }));\n  return _pinsToDAG.apply(this, arguments);\n}\n\nfunction process(_x9, _x10, _x11) {\n  return _process.apply(this, arguments);\n}\n/** @type {Migration} */\n\n\nfunction _process() {\n  _process = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(backends, onProgress, fn) {\n    var blockstore, datastore, pinstore;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            blockstore = backends.blocks;\n            datastore = backends.datastore;\n            pinstore = backends.pins;\n            _context3.next = 5;\n            return blockstore.open();\n\n          case 5:\n            _context3.next = 7;\n            return datastore.open();\n\n          case 7:\n            _context3.next = 9;\n            return pinstore.open();\n\n          case 9:\n            _context3.prev = 9;\n            _context3.next = 12;\n            return fn(blockstore, datastore, pinstore, onProgress);\n\n          case 12:\n            _context3.prev = 12;\n            _context3.next = 15;\n            return pinstore.close();\n\n          case 15:\n            _context3.next = 17;\n            return datastore.close();\n\n          case 17:\n            _context3.next = 19;\n            return blockstore.close();\n\n          case 19:\n            return _context3.finish(12);\n\n          case 20:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[9,, 12, 20]]);\n  }));\n  return _process.apply(this, arguments);\n}\n\nmodule.exports = {\n  version: 9,\n  description: 'Migrates pins to datastore',\n  migrate: function migrate(backends) {\n    var onProgress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\n    return process(backends, onProgress, pinsToDatastore);\n  },\n  revert: function revert(backends) {\n    var onProgress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\n    return process(backends, onProgress, pinsToDAG);\n  }\n};","map":{"version":3,"names":["require","CID","dagPb","cbor","pinset","cidToKey","PIN_DS_KEY","PinTypes","length","sha256","mhd","base32","pinsToDatastore","blockstore","datastore","pinstore","onProgress","has","get","mh","cid","decode","pinRootBuf","pinRoot","counter","loadSet","recursive","direct","pinCount","pin","depth","Infinity","version","code","codec","put","encode","delete","pinsToDAG","recursivePins","directPins","queryKeys","query","key","value","create","toString","toLowerCase","split","pop","push","storeSet","Links","buf","digest","createV0","bytes","process","backends","fn","blocks","pins","open","close","module","exports","description","migrate","revert"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-repo-migrations/migrations/migration-9/index.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst dagPb = require('@ipld/dag-pb')\nconst cbor = require('cborg')\nconst pinset = require('./pin-set')\nconst { cidToKey, PIN_DS_KEY, PinTypes } = require('./utils')\nconst length = require('it-length')\nconst { sha256 } = require('multiformats/hashes/sha2')\nconst mhd = require('multiformats/hashes/digest')\nconst { base32 } = require('multiformats/bases/base32')\n\n/**\n * @typedef {import('../../src/types').Migration} Migration\n * @typedef {import('../../src/types').MigrationProgressCallback} MigrationProgressCallback\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('multiformats/cid').CIDVersion} CIDVersion\n */\n\n/**\n * @param {Blockstore} blockstore\n * @param {Datastore} datastore\n * @param {Datastore} pinstore\n * @param {MigrationProgressCallback} onProgress\n */\nasync function pinsToDatastore (blockstore, datastore, pinstore, onProgress) {\n  if (!await datastore.has(PIN_DS_KEY)) {\n    return\n  }\n\n  const mh = await datastore.get(PIN_DS_KEY)\n  const cid = CID.decode(mh)\n  const pinRootBuf = await blockstore.get(cid)\n  const pinRoot = dagPb.decode(pinRootBuf)\n  let counter = 0\n  const pinCount = (await length(pinset.loadSet(blockstore, pinRoot, PinTypes.recursive))) + (await length(pinset.loadSet(blockstore, pinRoot, PinTypes.direct)))\n\n  for await (const cid of pinset.loadSet(blockstore, pinRoot, PinTypes.recursive)) {\n    counter++\n\n    /** @type {{ depth: number, version?: CIDVersion, codec?: number }} */\n    const pin = {\n      depth: Infinity\n    }\n\n    if (cid.version !== 0) {\n      pin.version = cid.version\n    }\n\n    if (cid.code !== dagPb.code) {\n      pin.codec = cid.code\n    }\n\n    await pinstore.put(cidToKey(cid), cbor.encode(pin))\n\n    onProgress((counter / pinCount) * 100, `Migrated recursive pin ${cid}`)\n  }\n\n  for await (const cid of pinset.loadSet(blockstore, pinRoot, PinTypes.direct)) {\n    counter++\n\n    /** @type {{ depth: number, version?: CIDVersion, codec?: number }} */\n    const pin = {\n      depth: 0\n    }\n\n    if (cid.version !== 0) {\n      pin.version = cid.version\n    }\n\n    if (cid.code !== dagPb.code) {\n      pin.codec = cid.code\n    }\n\n    await pinstore.put(cidToKey(cid), cbor.encode(pin))\n\n    onProgress((counter / pinCount) * 100, `Migrated direct pin ${cid}`)\n  }\n\n  await blockstore.delete(cid)\n  await datastore.delete(PIN_DS_KEY)\n}\n\n/**\n * @param {Blockstore} blockstore\n * @param {Datastore} datastore\n * @param {Datastore} pinstore\n * @param {MigrationProgressCallback} onProgress\n */\nasync function pinsToDAG (blockstore, datastore, pinstore, onProgress) {\n  const recursivePins = []\n  const directPins = []\n  let counter = 0\n  const pinCount = await length(pinstore.queryKeys({}))\n\n  for await (const { key, value } of pinstore.query({})) {\n    counter++\n    const pin = cbor.decode(value)\n    const cid = CID.create(\n      pin.version || 0,\n      pin.codec || dagPb.code,\n      mhd.decode(base32.decode('b' + key.toString().toLowerCase().split('/').pop()))\n    )\n\n    if (pin.depth === 0) {\n      onProgress((counter / pinCount) * 100, `Reverted direct pin ${cid}`)\n\n      directPins.push(cid)\n    } else {\n      onProgress((counter / pinCount) * 100, `Reverted recursive pin ${cid}`)\n\n      recursivePins.push(cid)\n    }\n  }\n\n  onProgress(100, 'Updating pin root')\n  const pinRoot = {\n    Links: [\n      await pinset.storeSet(blockstore, PinTypes.direct, directPins),\n      await pinset.storeSet(blockstore, PinTypes.recursive, recursivePins)\n    ]\n  }\n  const buf = dagPb.encode(pinRoot)\n  const digest = await sha256.digest(buf)\n  const cid = CID.createV0(digest)\n\n  await blockstore.put(cid, buf)\n  await datastore.put(PIN_DS_KEY, cid.bytes)\n}\n\n/**\n * @param {import('../../src/types').Backends} backends\n * @param {MigrationProgressCallback} onProgress\n * @param {*} fn\n */\nasync function process (backends, onProgress, fn) {\n  const blockstore = backends.blocks\n  const datastore = backends.datastore\n  const pinstore = backends.pins\n\n  await blockstore.open()\n  await datastore.open()\n  await pinstore.open()\n\n  try {\n    await fn(blockstore, datastore, pinstore, onProgress)\n  } finally {\n    await pinstore.close()\n    await datastore.close()\n    await blockstore.close()\n  }\n}\n\n/** @type {Migration} */\nmodule.exports = {\n  version: 9,\n  description: 'Migrates pins to datastore',\n  migrate: (backends, onProgress = () => {}) => {\n    return process(backends, onProgress, pinsToDatastore)\n  },\n  revert: (backends, onProgress = () => {}) => {\n    return process(backends, onProgress, pinsToDAG)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}