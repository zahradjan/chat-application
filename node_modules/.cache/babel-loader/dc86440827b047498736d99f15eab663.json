{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _toConsumableArray = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _inherits = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar pMapSeries = require('p-map-series');\n\nvar AccessController = require('./access-controller-interface');\n\nvar ensureAddress = require('./utils/ensure-ac-address');\n\nvar type = 'orbitdb';\n\nvar OrbitDBAccessController = /*#__PURE__*/function (_AccessController) {\n  _inherits(OrbitDBAccessController, _AccessController);\n\n  var _super = _createSuper(OrbitDBAccessController);\n\n  function OrbitDBAccessController(orbitdb, options) {\n    var _this;\n\n    _classCallCheck(this, OrbitDBAccessController);\n\n    _this = _super.call(this);\n    _this._orbitdb = orbitdb;\n    _this._db = null;\n    _this._options = options || {};\n    return _this;\n  } // Returns the type of the access controller\n\n\n  _createClass(OrbitDBAccessController, [{\n    key: \"address\",\n    get: // Returns the address of the OrbitDB used as the AC\n    function get() {\n      return this._db.address;\n    } // Return true if entry is allowed to be added to the database\n\n  }, {\n    key: \"canAppend\",\n    value: function () {\n      var _canAppend = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(entry, identityProvider) {\n        var access, verifiedIdentity;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // Write keys and admins keys are allowed\n                access = new Set([].concat(_toConsumableArray(this.get('write')), _toConsumableArray(this.get('admin')))); // If the ACL contains the writer's public key or it contains '*'\n\n                if (!(access.has(entry.identity.id) || access.has('*'))) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 4;\n                return identityProvider.verifyIdentity(entry.identity);\n\n              case 4:\n                verifiedIdentity = _context.sent;\n                return _context.abrupt(\"return\", verifiedIdentity);\n\n              case 6:\n                return _context.abrupt(\"return\", false);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function canAppend(_x, _x2) {\n        return _canAppend.apply(this, arguments);\n      }\n\n      return canAppend;\n    }()\n  }, {\n    key: \"capabilities\",\n    get: function get() {\n      if (this._db) {\n        var capabilities = this._db.index;\n\n        var toSet = function toSet(e) {\n          var key = e[0];\n          capabilities[key] = new Set([].concat(_toConsumableArray(capabilities[key] || []), _toConsumableArray(e[1])));\n        }; // Merge with the access controller of the database\n        // and make sure all values are Sets\n\n\n        Object.entries(_objectSpread(_objectSpread({}, capabilities), {\n          admin: new Set([].concat(_toConsumableArray(capabilities.admin || []), _toConsumableArray(this._db.access.write)))\n        })).forEach(toSet);\n        return capabilities;\n      }\n\n      return {};\n    }\n  }, {\n    key: \"get\",\n    value: function get(capability) {\n      return this.capabilities[capability] || new Set([]);\n    }\n  }, {\n    key: \"close\",\n    value: function () {\n      var _close = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this._db.close();\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function close() {\n        return _close.apply(this, arguments);\n      }\n\n      return close;\n    }()\n  }, {\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(address) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!this._db) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                _context3.next = 3;\n                return this._db.close();\n\n              case 3:\n                _context3.next = 5;\n                return this._orbitdb.keyvalue(ensureAddress(address), {\n                  // use ipfs controller as a immutable \"root controller\"\n                  accessController: {\n                    type: 'ipfs',\n                    write: this._options.admin || [this._orbitdb.identity.id]\n                  },\n                  sync: true\n                });\n\n              case 5:\n                this._db = _context3.sent;\n\n                this._db.events.on('ready', this._onUpdate.bind(this));\n\n                this._db.events.on('write', this._onUpdate.bind(this));\n\n                this._db.events.on('replicated', this._onUpdate.bind(this));\n\n                _context3.next = 11;\n                return this._db.load();\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function load(_x3) {\n        return _load.apply(this, arguments);\n      }\n\n      return load;\n    }()\n  }, {\n    key: \"save\",\n    value: function () {\n      var _save = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", {\n                  address: this._db.address.toString()\n                });\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function save() {\n        return _save.apply(this, arguments);\n      }\n\n      return save;\n    }()\n  }, {\n    key: \"grant\",\n    value: function () {\n      var _grant = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(capability, key) {\n        var capabilities;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                // Merge current keys with the new key\n                capabilities = new Set([].concat(_toConsumableArray(this._db.get(capability) || []), [key]));\n                _context5.next = 3;\n                return this._db.put(capability, Array.from(capabilities.values()));\n\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function grant(_x4, _x5) {\n        return _grant.apply(this, arguments);\n      }\n\n      return grant;\n    }()\n  }, {\n    key: \"revoke\",\n    value: function () {\n      var _revoke = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(capability, key) {\n        var capabilities;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                capabilities = new Set(this._db.get(capability) || []);\n                capabilities.delete(key);\n\n                if (!(capabilities.size > 0)) {\n                  _context6.next = 7;\n                  break;\n                }\n\n                _context6.next = 5;\n                return this._db.put(capability, Array.from(capabilities.values()));\n\n              case 5:\n                _context6.next = 9;\n                break;\n\n              case 7:\n                _context6.next = 9;\n                return this._db.del(capability);\n\n              case 9:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function revoke(_x6, _x7) {\n        return _revoke.apply(this, arguments);\n      }\n\n      return revoke;\n    }()\n    /* Private methods */\n\n  }, {\n    key: \"_onUpdate\",\n    value: function _onUpdate() {\n      this.emit('updated');\n    }\n    /* Factory */\n\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return type;\n    }\n  }, {\n    key: \"create\",\n    value: function () {\n      var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(orbitdb) {\n        var options,\n            ac,\n            _args8 = arguments;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                options = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : {};\n                ac = new OrbitDBAccessController(orbitdb, options);\n                _context8.next = 4;\n                return ac.load(options.address || options.name || 'default-access-controller');\n\n              case 4:\n                if (!(options.write && !options.address)) {\n                  _context8.next = 7;\n                  break;\n                }\n\n                _context8.next = 7;\n                return pMapSeries(options.write, /*#__PURE__*/function () {\n                  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(e) {\n                    return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n                      while (1) {\n                        switch (_context7.prev = _context7.next) {\n                          case 0:\n                            return _context7.abrupt(\"return\", ac.grant('write', e));\n\n                          case 1:\n                          case \"end\":\n                            return _context7.stop();\n                        }\n                      }\n                    }, _callee7);\n                  }));\n\n                  return function (_x9) {\n                    return _ref.apply(this, arguments);\n                  };\n                }());\n\n              case 7:\n                return _context8.abrupt(\"return\", ac);\n\n              case 8:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n\n      function create(_x8) {\n        return _create.apply(this, arguments);\n      }\n\n      return create;\n    }()\n  }]);\n\n  return OrbitDBAccessController;\n}(AccessController);\n\nmodule.exports = OrbitDBAccessController;","map":{"version":3,"names":["pMapSeries","require","AccessController","ensureAddress","type","OrbitDBAccessController","orbitdb","options","_orbitdb","_db","_options","address","entry","identityProvider","access","Set","get","has","identity","id","verifyIdentity","verifiedIdentity","capabilities","index","toSet","e","key","Object","entries","admin","write","forEach","capability","close","keyvalue","accessController","sync","events","on","_onUpdate","bind","load","toString","put","Array","from","values","delete","size","del","emit","ac","name","grant","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/orbit-db-access-controllers/src/orbitdb-access-controller.js"],"sourcesContent":["'use strict'\n\nconst pMapSeries = require('p-map-series')\nconst AccessController = require('./access-controller-interface')\nconst ensureAddress = require('./utils/ensure-ac-address')\n\nconst type = 'orbitdb'\n\nclass OrbitDBAccessController extends AccessController {\n  constructor (orbitdb, options) {\n    super()\n    this._orbitdb = orbitdb\n    this._db = null\n    this._options = options || {}\n  }\n\n  // Returns the type of the access controller\n  static get type () { return type }\n\n  // Returns the address of the OrbitDB used as the AC\n  get address () {\n    return this._db.address\n  }\n\n  // Return true if entry is allowed to be added to the database\n  async canAppend (entry, identityProvider) {\n    // Write keys and admins keys are allowed\n    const access = new Set([...this.get('write'), ...this.get('admin')])\n    // If the ACL contains the writer's public key or it contains '*'\n    if (access.has(entry.identity.id) || access.has('*')) {\n      const verifiedIdentity = await identityProvider.verifyIdentity(entry.identity)\n      // Allow access if identity verifies\n      return verifiedIdentity\n    }\n\n    return false\n  }\n\n  get capabilities () {\n    if (this._db) {\n      const capabilities = this._db.index\n\n      const toSet = (e) => {\n        const key = e[0]\n        capabilities[key] = new Set([...(capabilities[key] || []), ...e[1]])\n      }\n\n      // Merge with the access controller of the database\n      // and make sure all values are Sets\n      Object.entries({\n        ...capabilities,\n        // Add the root access controller's 'write' access list\n        // as admins on this controller\n        ...{ admin: new Set([...(capabilities.admin || []), ...this._db.access.write]) }\n      }).forEach(toSet)\n\n      return capabilities\n    }\n    return {}\n  }\n\n  get (capability) {\n    return this.capabilities[capability] || new Set([])\n  }\n\n  async close () {\n    await this._db.close()\n  }\n\n  async load (address) {\n    if (this._db) { await this._db.close() }\n\n    // Force '<address>/_access' naming for the database\n    this._db = await this._orbitdb.keyvalue(ensureAddress(address), {\n      // use ipfs controller as a immutable \"root controller\"\n      accessController: {\n        type: 'ipfs',\n        write: this._options.admin || [this._orbitdb.identity.id]\n      },\n      sync: true\n    })\n\n    this._db.events.on('ready', this._onUpdate.bind(this))\n    this._db.events.on('write', this._onUpdate.bind(this))\n    this._db.events.on('replicated', this._onUpdate.bind(this))\n\n    await this._db.load()\n  }\n\n  async save () {\n    // return the manifest data\n    return {\n      address: this._db.address.toString()\n    }\n  }\n\n  async grant (capability, key) {\n    // Merge current keys with the new key\n    const capabilities = new Set([...(this._db.get(capability) || []), ...[key]])\n    await this._db.put(capability, Array.from(capabilities.values()))\n  }\n\n  async revoke (capability, key) {\n    const capabilities = new Set(this._db.get(capability) || [])\n    capabilities.delete(key)\n    if (capabilities.size > 0) {\n      await this._db.put(capability, Array.from(capabilities.values()))\n    } else {\n      await this._db.del(capability)\n    }\n  }\n\n  /* Private methods */\n  _onUpdate () {\n    this.emit('updated')\n  }\n\n  /* Factory */\n  static async create (orbitdb, options = {}) {\n    const ac = new OrbitDBAccessController(orbitdb, options)\n    await ac.load(options.address || options.name || 'default-access-controller')\n\n    // Add write access from options\n    if (options.write && !options.address) {\n      await pMapSeries(options.write, async (e) => ac.grant('write', e))\n    }\n\n    return ac\n  }\n}\n\nmodule.exports = OrbitDBAccessController\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}