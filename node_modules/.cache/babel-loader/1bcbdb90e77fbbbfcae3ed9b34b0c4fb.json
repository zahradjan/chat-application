{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _createForOfIteratorHelper = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _objectSpread = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _awaitAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _wrapAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nvar _asyncIterator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar toCamelWithMetadata = require('../lib/object-to-camel-with-metadata');\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {FilesAPI[\"ls\"]}\n   */\n  function ls(_x) {\n    return _ls.apply(this, arguments);\n  }\n\n  function _ls() {\n    _ls = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(path) {\n      var options,\n          res,\n          _iteratorAbruptCompletion,\n          _didIteratorError,\n          _iteratorError,\n          _iterator,\n          _step,\n          result,\n          _iterator2,\n          _step2,\n          entry,\n          _args = arguments;\n\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n\n              if (path) {\n                _context.next = 3;\n                break;\n              }\n\n              throw new Error('ipfs.files.ls requires a path');\n\n            case 3:\n              _context.next = 5;\n              return _awaitAsyncGenerator(api.post('files/ls', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread(_objectSpread({\n                  arg: CID.asCID(path) ? \"/ipfs/\".concat(path) : path,\n                  // default long to true, diverges from go-ipfs where its false by default\n                  long: true\n                }, options), {}, {\n                  stream: true\n                })),\n                headers: options.headers\n              }));\n\n            case 5:\n              res = _context.sent;\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 8;\n              _iterator = _asyncIterator(res.ndjson());\n\n            case 10:\n              _context.next = 12;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 12:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 39;\n                break;\n              }\n\n              result = _step.value;\n\n              if (!('Entries' in result)) {\n                _context.next = 34;\n                break;\n              }\n\n              _iterator2 = _createForOfIteratorHelper(result.Entries || []);\n              _context.prev = 16;\n\n              _iterator2.s();\n\n            case 18:\n              if ((_step2 = _iterator2.n()).done) {\n                _context.next = 24;\n                break;\n              }\n\n              entry = _step2.value;\n              _context.next = 22;\n              return toCoreInterface(toCamelWithMetadata(entry));\n\n            case 22:\n              _context.next = 18;\n              break;\n\n            case 24:\n              _context.next = 29;\n              break;\n\n            case 26:\n              _context.prev = 26;\n              _context.t0 = _context[\"catch\"](16);\n\n              _iterator2.e(_context.t0);\n\n            case 29:\n              _context.prev = 29;\n\n              _iterator2.f();\n\n              return _context.finish(29);\n\n            case 32:\n              _context.next = 36;\n              break;\n\n            case 34:\n              _context.next = 36;\n              return toCoreInterface(toCamelWithMetadata(result));\n\n            case 36:\n              _iteratorAbruptCompletion = false;\n              _context.next = 10;\n              break;\n\n            case 39:\n              _context.next = 45;\n              break;\n\n            case 41:\n              _context.prev = 41;\n              _context.t1 = _context[\"catch\"](8);\n              _didIteratorError = true;\n              _iteratorError = _context.t1;\n\n            case 45:\n              _context.prev = 45;\n              _context.prev = 46;\n\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 50;\n                break;\n              }\n\n              _context.next = 50;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 50:\n              _context.prev = 50;\n\n              if (!_didIteratorError) {\n                _context.next = 53;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 53:\n              return _context.finish(50);\n\n            case 54:\n              return _context.finish(45);\n\n            case 55:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[8, 41, 45, 55], [16, 26, 29, 32], [46,, 50, 54]]);\n    }));\n    return _ls.apply(this, arguments);\n  }\n\n  return ls;\n});\n/**\n * @param {*} entry\n */\n\nfunction toCoreInterface(entry) {\n  if (entry.hash) {\n    entry.cid = CID.parse(entry.hash);\n  }\n\n  delete entry.hash;\n  entry.type = entry.type === 1 ? 'directory' : 'file';\n  return entry;\n}","map":{"version":3,"names":["require","CID","toCamelWithMetadata","configure","toUrlSearchParams","module","exports","api","ls","path","options","Error","post","signal","searchParams","arg","asCID","long","stream","headers","res","ndjson","result","Entries","entry","toCoreInterface","hash","cid","parse","type"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-http-client/src/files/ls.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst toCamelWithMetadata = require('../lib/object-to-camel-with-metadata')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\nmodule.exports = configure(api => {\n  /**\n   * @type {FilesAPI[\"ls\"]}\n   */\n  async function * ls (path, options = {}) {\n    if (!path) {\n      throw new Error('ipfs.files.ls requires a path')\n    }\n\n    const res = await api.post('files/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: CID.asCID(path) ? `/ipfs/${path}` : path,\n        // default long to true, diverges from go-ipfs where its false by default\n        long: true,\n        ...options,\n        stream: true\n      }),\n      headers: options.headers\n    })\n\n    for await (const result of res.ndjson()) {\n      // go-ipfs does not yet support the \"stream\" option\n      if ('Entries' in result) {\n        for (const entry of result.Entries || []) {\n          yield toCoreInterface(toCamelWithMetadata(entry))\n        }\n      } else {\n        yield toCoreInterface(toCamelWithMetadata(result))\n      }\n    }\n  }\n  return ls\n})\n\n/**\n * @param {*} entry\n */\nfunction toCoreInterface (entry) {\n  if (entry.hash) {\n    entry.cid = CID.parse(entry.hash)\n  }\n\n  delete entry.hash\n\n  entry.type = entry.type === 1 ? 'directory' : 'file'\n\n  return entry\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;AAEA,eAAgBA,OAAO,CAAC,kBAAD,CAAvB;AAAA,IAAQC,GAAR,YAAQA,GAAR;;AACA,IAAMC,mBAAmB,GAAGF,OAAO,CAAC,sCAAD,CAAnC;;AACA,IAAMG,SAAS,GAAGH,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMI,iBAAiB,GAAGJ,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AACAK,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAAC,UAAAI,GAAG,EAAI;EAChC;AACF;AACA;EAHkC,SAIfC,EAJe;IAAA;EAAA;;EAAA;IAAA,mEAIhC,iBAAqBC,IAArB;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;;MAAA;QAAA;UAAA;YAAA;cAA2BC,OAA3B,2DAAqC,EAArC;;cAAA,IACOD,IADP;gBAAA;gBAAA;cAAA;;cAAA,MAEU,IAAIE,KAAJ,CAAU,+BAAV,CAFV;;YAAA;cAAA;cAAA,4BAKoBJ,GAAG,CAACK,IAAJ,CAAS,UAAT,EAAqB;gBACrCC,MAAM,EAAEH,OAAO,CAACG,MADqB;gBAErCC,YAAY,EAAEV,iBAAiB;kBAC7BW,GAAG,EAAEd,GAAG,CAACe,KAAJ,CAAUP,IAAV,oBAA2BA,IAA3B,IAAoCA,IADZ;kBAE7B;kBACAQ,IAAI,EAAE;gBAHuB,GAI1BP,OAJ0B;kBAK7BQ,MAAM,EAAE;gBALqB,GAFM;gBASrCC,OAAO,EAAET,OAAO,CAACS;cAToB,CAArB,CALpB;;YAAA;cAKQC,GALR;cAAA;cAAA;cAAA;cAAA,2BAiB6BA,GAAG,CAACC,MAAJ,EAjB7B;;YAAA;cAAA;cAAA;;YAAA;cAAA;gBAAA;gBAAA;cAAA;;cAiBmBC,MAjBnB;;cAAA,MAmBQ,aAAaA,MAnBrB;gBAAA;gBAAA;cAAA;;cAAA,wCAoB0BA,MAAM,CAACC,OAAP,IAAkB,EApB5C;cAAA;;cAAA;;YAAA;cAAA;gBAAA;gBAAA;cAAA;;cAoBiBC,KApBjB;cAAA;cAqBQ,OAAMC,eAAe,CAACvB,mBAAmB,CAACsB,KAAD,CAApB,CAArB;;YArBR;cAAA;cAAA;;YAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;;cAAA;;YAAA;cAAA;;cAAA;;cAAA;;YAAA;cAAA;cAAA;;YAAA;cAAA;cAwBM,OAAMC,eAAe,CAACvB,mBAAmB,CAACoB,MAAD,CAApB,CAArB;;YAxBN;cAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;;cAAA;gBAAA;gBAAA;cAAA;;cAAA;cAAA;;YAAA;cAAA;;cAAA;gBAAA;gBAAA;cAAA;;cAAA;;YAAA;cAAA;;YAAA;cAAA;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAJgC;IAAA;EAAA;;EAgChC,OAAOd,EAAP;AACD,CAjCyB,CAA1B;AAmCA;AACA;AACA;;AACA,SAASiB,eAAT,CAA0BD,KAA1B,EAAiC;EAC/B,IAAIA,KAAK,CAACE,IAAV,EAAgB;IACdF,KAAK,CAACG,GAAN,GAAY1B,GAAG,CAAC2B,KAAJ,CAAUJ,KAAK,CAACE,IAAhB,CAAZ;EACD;;EAED,OAAOF,KAAK,CAACE,IAAb;EAEAF,KAAK,CAACK,IAAN,GAAaL,KAAK,CAACK,IAAN,KAAe,CAAf,GAAmB,WAAnB,GAAiC,MAA9C;EAEA,OAAOL,KAAP;AACD"},"metadata":{},"sourceType":"script"}