{"ast":null,"code":"/*eslint-disable*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\"); // Common aliases\n\n\nvar $Reader = $protobuf.Reader,\n    $Writer = $protobuf.Writer,\n    $util = $protobuf.util; // Exported root namespace\n\nvar $root = $protobuf.roots[\"libp2p-pubsub-rpc\"] || ($protobuf.roots[\"libp2p-pubsub-rpc\"] = {});\n\n$root.RPC = function () {\n  /**\n   * Properties of a RPC.\n   * @exports IRPC\n   * @interface IRPC\n   * @property {Array.<RPC.ISubOpts>|null} [subscriptions] RPC subscriptions\n   * @property {Array.<RPC.IMessage>|null} [msgs] RPC msgs\n   */\n\n  /**\n   * Constructs a new RPC.\n   * @exports RPC\n   * @classdesc Represents a RPC.\n   * @implements IRPC\n   * @constructor\n   * @param {IRPC=} [p] Properties to set\n   */\n  function RPC(p) {\n    this.subscriptions = [];\n    this.msgs = [];\n    if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n  }\n  /**\n   * RPC subscriptions.\n   * @member {Array.<RPC.ISubOpts>} subscriptions\n   * @memberof RPC\n   * @instance\n   */\n\n\n  RPC.prototype.subscriptions = $util.emptyArray;\n  /**\n   * RPC msgs.\n   * @member {Array.<RPC.IMessage>} msgs\n   * @memberof RPC\n   * @instance\n   */\n\n  RPC.prototype.msgs = $util.emptyArray;\n  /**\n   * Encodes the specified RPC message. Does not implicitly {@link RPC.verify|verify} messages.\n   * @function encode\n   * @memberof RPC\n   * @static\n   * @param {IRPC} m RPC message or plain object to encode\n   * @param {$protobuf.Writer} [w] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n  RPC.encode = function encode(m, w) {\n    if (!w) w = $Writer.create();\n\n    if (m.subscriptions != null && m.subscriptions.length) {\n      for (var i = 0; i < m.subscriptions.length; ++i) $root.RPC.SubOpts.encode(m.subscriptions[i], w.uint32(10).fork()).ldelim();\n    }\n\n    if (m.msgs != null && m.msgs.length) {\n      for (var i = 0; i < m.msgs.length; ++i) $root.RPC.Message.encode(m.msgs[i], w.uint32(18).fork()).ldelim();\n    }\n\n    return w;\n  };\n  /**\n   * Decodes a RPC message from the specified reader or buffer.\n   * @function decode\n   * @memberof RPC\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n   * @param {number} [l] Message length if known beforehand\n   * @returns {RPC} RPC\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  RPC.decode = function decode(r, l) {\n    if (!(r instanceof $Reader)) r = $Reader.create(r);\n    var c = l === undefined ? r.len : r.pos + l,\n        m = new $root.RPC();\n\n    while (r.pos < c) {\n      var t = r.uint32();\n\n      switch (t >>> 3) {\n        case 1:\n          if (!(m.subscriptions && m.subscriptions.length)) m.subscriptions = [];\n          m.subscriptions.push($root.RPC.SubOpts.decode(r, r.uint32()));\n          break;\n\n        case 2:\n          if (!(m.msgs && m.msgs.length)) m.msgs = [];\n          m.msgs.push($root.RPC.Message.decode(r, r.uint32()));\n          break;\n\n        default:\n          r.skipType(t & 7);\n          break;\n      }\n    }\n\n    return m;\n  };\n  /**\n   * Creates a RPC message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof RPC\n   * @static\n   * @param {Object.<string,*>} d Plain object\n   * @returns {RPC} RPC\n   */\n\n\n  RPC.fromObject = function fromObject(d) {\n    if (d instanceof $root.RPC) return d;\n    var m = new $root.RPC();\n\n    if (d.subscriptions) {\n      if (!Array.isArray(d.subscriptions)) throw TypeError(\".RPC.subscriptions: array expected\");\n      m.subscriptions = [];\n\n      for (var i = 0; i < d.subscriptions.length; ++i) {\n        if (typeof d.subscriptions[i] !== \"object\") throw TypeError(\".RPC.subscriptions: object expected\");\n        m.subscriptions[i] = $root.RPC.SubOpts.fromObject(d.subscriptions[i]);\n      }\n    }\n\n    if (d.msgs) {\n      if (!Array.isArray(d.msgs)) throw TypeError(\".RPC.msgs: array expected\");\n      m.msgs = [];\n\n      for (var i = 0; i < d.msgs.length; ++i) {\n        if (typeof d.msgs[i] !== \"object\") throw TypeError(\".RPC.msgs: object expected\");\n        m.msgs[i] = $root.RPC.Message.fromObject(d.msgs[i]);\n      }\n    }\n\n    return m;\n  };\n  /**\n   * Creates a plain object from a RPC message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof RPC\n   * @static\n   * @param {RPC} m RPC\n   * @param {$protobuf.IConversionOptions} [o] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  RPC.toObject = function toObject(m, o) {\n    if (!o) o = {};\n    var d = {};\n\n    if (o.arrays || o.defaults) {\n      d.subscriptions = [];\n      d.msgs = [];\n    }\n\n    if (m.subscriptions && m.subscriptions.length) {\n      d.subscriptions = [];\n\n      for (var j = 0; j < m.subscriptions.length; ++j) {\n        d.subscriptions[j] = $root.RPC.SubOpts.toObject(m.subscriptions[j], o);\n      }\n    }\n\n    if (m.msgs && m.msgs.length) {\n      d.msgs = [];\n\n      for (var j = 0; j < m.msgs.length; ++j) {\n        d.msgs[j] = $root.RPC.Message.toObject(m.msgs[j], o);\n      }\n    }\n\n    return d;\n  };\n  /**\n   * Converts this RPC to JSON.\n   * @function toJSON\n   * @memberof RPC\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  RPC.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  RPC.SubOpts = function () {\n    /**\n     * Properties of a SubOpts.\n     * @memberof RPC\n     * @interface ISubOpts\n     * @property {boolean|null} [subscribe] SubOpts subscribe\n     * @property {string|null} [topicID] SubOpts topicID\n     */\n\n    /**\n     * Constructs a new SubOpts.\n     * @memberof RPC\n     * @classdesc Represents a SubOpts.\n     * @implements ISubOpts\n     * @constructor\n     * @param {RPC.ISubOpts=} [p] Properties to set\n     */\n    function SubOpts(p) {\n      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n    }\n    /**\n     * SubOpts subscribe.\n     * @member {boolean|null|undefined} subscribe\n     * @memberof RPC.SubOpts\n     * @instance\n     */\n\n\n    SubOpts.prototype.subscribe = null;\n    /**\n     * SubOpts topicID.\n     * @member {string|null|undefined} topicID\n     * @memberof RPC.SubOpts\n     * @instance\n     */\n\n    SubOpts.prototype.topicID = null; // OneOf field names bound to virtual getters and setters\n\n    var $oneOfFields;\n    /**\n     * SubOpts _subscribe.\n     * @member {\"subscribe\"|undefined} _subscribe\n     * @memberof RPC.SubOpts\n     * @instance\n     */\n\n    Object.defineProperty(SubOpts.prototype, \"_subscribe\", {\n      get: $util.oneOfGetter($oneOfFields = [\"subscribe\"]),\n      set: $util.oneOfSetter($oneOfFields)\n    });\n    /**\n     * SubOpts _topicID.\n     * @member {\"topicID\"|undefined} _topicID\n     * @memberof RPC.SubOpts\n     * @instance\n     */\n\n    Object.defineProperty(SubOpts.prototype, \"_topicID\", {\n      get: $util.oneOfGetter($oneOfFields = [\"topicID\"]),\n      set: $util.oneOfSetter($oneOfFields)\n    });\n    /**\n     * Encodes the specified SubOpts message. Does not implicitly {@link RPC.SubOpts.verify|verify} messages.\n     * @function encode\n     * @memberof RPC.SubOpts\n     * @static\n     * @param {RPC.ISubOpts} m SubOpts message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n    SubOpts.encode = function encode(m, w) {\n      if (!w) w = $Writer.create();\n      if (m.subscribe != null && Object.hasOwnProperty.call(m, \"subscribe\")) w.uint32(8).bool(m.subscribe);\n      if (m.topicID != null && Object.hasOwnProperty.call(m, \"topicID\")) w.uint32(18).string(m.topicID);\n      return w;\n    };\n    /**\n     * Decodes a SubOpts message from the specified reader or buffer.\n     * @function decode\n     * @memberof RPC.SubOpts\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {RPC.SubOpts} SubOpts\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    SubOpts.decode = function decode(r, l) {\n      if (!(r instanceof $Reader)) r = $Reader.create(r);\n      var c = l === undefined ? r.len : r.pos + l,\n          m = new $root.RPC.SubOpts();\n\n      while (r.pos < c) {\n        var t = r.uint32();\n\n        switch (t >>> 3) {\n          case 1:\n            m.subscribe = r.bool();\n            break;\n\n          case 2:\n            m.topicID = r.string();\n            break;\n\n          default:\n            r.skipType(t & 7);\n            break;\n        }\n      }\n\n      return m;\n    };\n    /**\n     * Creates a SubOpts message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof RPC.SubOpts\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {RPC.SubOpts} SubOpts\n     */\n\n\n    SubOpts.fromObject = function fromObject(d) {\n      if (d instanceof $root.RPC.SubOpts) return d;\n      var m = new $root.RPC.SubOpts();\n\n      if (d.subscribe != null) {\n        m.subscribe = Boolean(d.subscribe);\n      }\n\n      if (d.topicID != null) {\n        m.topicID = String(d.topicID);\n      }\n\n      return m;\n    };\n    /**\n     * Creates a plain object from a SubOpts message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof RPC.SubOpts\n     * @static\n     * @param {RPC.SubOpts} m SubOpts\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    SubOpts.toObject = function toObject(m, o) {\n      if (!o) o = {};\n      var d = {};\n\n      if (m.subscribe != null && m.hasOwnProperty(\"subscribe\")) {\n        d.subscribe = m.subscribe;\n        if (o.oneofs) d._subscribe = \"subscribe\";\n      }\n\n      if (m.topicID != null && m.hasOwnProperty(\"topicID\")) {\n        d.topicID = m.topicID;\n        if (o.oneofs) d._topicID = \"topicID\";\n      }\n\n      return d;\n    };\n    /**\n     * Converts this SubOpts to JSON.\n     * @function toJSON\n     * @memberof RPC.SubOpts\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    SubOpts.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return SubOpts;\n  }();\n\n  RPC.Message = function () {\n    /**\n     * Properties of a Message.\n     * @memberof RPC\n     * @interface IMessage\n     * @property {Uint8Array|null} [from] Message from\n     * @property {Uint8Array|null} [data] Message data\n     * @property {Uint8Array|null} [seqno] Message seqno\n     * @property {Array.<string>|null} [topicIDs] Message topicIDs\n     * @property {Uint8Array|null} [signature] Message signature\n     * @property {Uint8Array|null} [key] Message key\n     */\n\n    /**\n     * Constructs a new Message.\n     * @memberof RPC\n     * @classdesc Represents a Message.\n     * @implements IMessage\n     * @constructor\n     * @param {RPC.IMessage=} [p] Properties to set\n     */\n    function Message(p) {\n      this.topicIDs = [];\n      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n    }\n    /**\n     * Message from.\n     * @member {Uint8Array|null|undefined} from\n     * @memberof RPC.Message\n     * @instance\n     */\n\n\n    Message.prototype.from = null;\n    /**\n     * Message data.\n     * @member {Uint8Array|null|undefined} data\n     * @memberof RPC.Message\n     * @instance\n     */\n\n    Message.prototype.data = null;\n    /**\n     * Message seqno.\n     * @member {Uint8Array|null|undefined} seqno\n     * @memberof RPC.Message\n     * @instance\n     */\n\n    Message.prototype.seqno = null;\n    /**\n     * Message topicIDs.\n     * @member {Array.<string>} topicIDs\n     * @memberof RPC.Message\n     * @instance\n     */\n\n    Message.prototype.topicIDs = $util.emptyArray;\n    /**\n     * Message signature.\n     * @member {Uint8Array|null|undefined} signature\n     * @memberof RPC.Message\n     * @instance\n     */\n\n    Message.prototype.signature = null;\n    /**\n     * Message key.\n     * @member {Uint8Array|null|undefined} key\n     * @memberof RPC.Message\n     * @instance\n     */\n\n    Message.prototype.key = null; // OneOf field names bound to virtual getters and setters\n\n    var $oneOfFields;\n    /**\n     * Message _from.\n     * @member {\"from\"|undefined} _from\n     * @memberof RPC.Message\n     * @instance\n     */\n\n    Object.defineProperty(Message.prototype, \"_from\", {\n      get: $util.oneOfGetter($oneOfFields = [\"from\"]),\n      set: $util.oneOfSetter($oneOfFields)\n    });\n    /**\n     * Message _data.\n     * @member {\"data\"|undefined} _data\n     * @memberof RPC.Message\n     * @instance\n     */\n\n    Object.defineProperty(Message.prototype, \"_data\", {\n      get: $util.oneOfGetter($oneOfFields = [\"data\"]),\n      set: $util.oneOfSetter($oneOfFields)\n    });\n    /**\n     * Message _seqno.\n     * @member {\"seqno\"|undefined} _seqno\n     * @memberof RPC.Message\n     * @instance\n     */\n\n    Object.defineProperty(Message.prototype, \"_seqno\", {\n      get: $util.oneOfGetter($oneOfFields = [\"seqno\"]),\n      set: $util.oneOfSetter($oneOfFields)\n    });\n    /**\n     * Message _signature.\n     * @member {\"signature\"|undefined} _signature\n     * @memberof RPC.Message\n     * @instance\n     */\n\n    Object.defineProperty(Message.prototype, \"_signature\", {\n      get: $util.oneOfGetter($oneOfFields = [\"signature\"]),\n      set: $util.oneOfSetter($oneOfFields)\n    });\n    /**\n     * Message _key.\n     * @member {\"key\"|undefined} _key\n     * @memberof RPC.Message\n     * @instance\n     */\n\n    Object.defineProperty(Message.prototype, \"_key\", {\n      get: $util.oneOfGetter($oneOfFields = [\"key\"]),\n      set: $util.oneOfSetter($oneOfFields)\n    });\n    /**\n     * Encodes the specified Message message. Does not implicitly {@link RPC.Message.verify|verify} messages.\n     * @function encode\n     * @memberof RPC.Message\n     * @static\n     * @param {RPC.IMessage} m Message message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n    Message.encode = function encode(m, w) {\n      if (!w) w = $Writer.create();\n      if (m.from != null && Object.hasOwnProperty.call(m, \"from\")) w.uint32(10).bytes(m.from);\n      if (m.data != null && Object.hasOwnProperty.call(m, \"data\")) w.uint32(18).bytes(m.data);\n      if (m.seqno != null && Object.hasOwnProperty.call(m, \"seqno\")) w.uint32(26).bytes(m.seqno);\n\n      if (m.topicIDs != null && m.topicIDs.length) {\n        for (var i = 0; i < m.topicIDs.length; ++i) w.uint32(34).string(m.topicIDs[i]);\n      }\n\n      if (m.signature != null && Object.hasOwnProperty.call(m, \"signature\")) w.uint32(42).bytes(m.signature);\n      if (m.key != null && Object.hasOwnProperty.call(m, \"key\")) w.uint32(50).bytes(m.key);\n      return w;\n    };\n    /**\n     * Decodes a Message message from the specified reader or buffer.\n     * @function decode\n     * @memberof RPC.Message\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {RPC.Message} Message\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    Message.decode = function decode(r, l) {\n      if (!(r instanceof $Reader)) r = $Reader.create(r);\n      var c = l === undefined ? r.len : r.pos + l,\n          m = new $root.RPC.Message();\n\n      while (r.pos < c) {\n        var t = r.uint32();\n\n        switch (t >>> 3) {\n          case 1:\n            m.from = r.bytes();\n            break;\n\n          case 2:\n            m.data = r.bytes();\n            break;\n\n          case 3:\n            m.seqno = r.bytes();\n            break;\n\n          case 4:\n            if (!(m.topicIDs && m.topicIDs.length)) m.topicIDs = [];\n            m.topicIDs.push(r.string());\n            break;\n\n          case 5:\n            m.signature = r.bytes();\n            break;\n\n          case 6:\n            m.key = r.bytes();\n            break;\n\n          default:\n            r.skipType(t & 7);\n            break;\n        }\n      }\n\n      return m;\n    };\n    /**\n     * Creates a Message message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof RPC.Message\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {RPC.Message} Message\n     */\n\n\n    Message.fromObject = function fromObject(d) {\n      if (d instanceof $root.RPC.Message) return d;\n      var m = new $root.RPC.Message();\n\n      if (d.from != null) {\n        if (typeof d.from === \"string\") $util.base64.decode(d.from, m.from = $util.newBuffer($util.base64.length(d.from)), 0);else if (d.from.length) m.from = d.from;\n      }\n\n      if (d.data != null) {\n        if (typeof d.data === \"string\") $util.base64.decode(d.data, m.data = $util.newBuffer($util.base64.length(d.data)), 0);else if (d.data.length) m.data = d.data;\n      }\n\n      if (d.seqno != null) {\n        if (typeof d.seqno === \"string\") $util.base64.decode(d.seqno, m.seqno = $util.newBuffer($util.base64.length(d.seqno)), 0);else if (d.seqno.length) m.seqno = d.seqno;\n      }\n\n      if (d.topicIDs) {\n        if (!Array.isArray(d.topicIDs)) throw TypeError(\".RPC.Message.topicIDs: array expected\");\n        m.topicIDs = [];\n\n        for (var i = 0; i < d.topicIDs.length; ++i) {\n          m.topicIDs[i] = String(d.topicIDs[i]);\n        }\n      }\n\n      if (d.signature != null) {\n        if (typeof d.signature === \"string\") $util.base64.decode(d.signature, m.signature = $util.newBuffer($util.base64.length(d.signature)), 0);else if (d.signature.length) m.signature = d.signature;\n      }\n\n      if (d.key != null) {\n        if (typeof d.key === \"string\") $util.base64.decode(d.key, m.key = $util.newBuffer($util.base64.length(d.key)), 0);else if (d.key.length) m.key = d.key;\n      }\n\n      return m;\n    };\n    /**\n     * Creates a plain object from a Message message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof RPC.Message\n     * @static\n     * @param {RPC.Message} m Message\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    Message.toObject = function toObject(m, o) {\n      if (!o) o = {};\n      var d = {};\n\n      if (o.arrays || o.defaults) {\n        d.topicIDs = [];\n      }\n\n      if (m.from != null && m.hasOwnProperty(\"from\")) {\n        d.from = o.bytes === String ? $util.base64.encode(m.from, 0, m.from.length) : o.bytes === Array ? Array.prototype.slice.call(m.from) : m.from;\n        if (o.oneofs) d._from = \"from\";\n      }\n\n      if (m.data != null && m.hasOwnProperty(\"data\")) {\n        d.data = o.bytes === String ? $util.base64.encode(m.data, 0, m.data.length) : o.bytes === Array ? Array.prototype.slice.call(m.data) : m.data;\n        if (o.oneofs) d._data = \"data\";\n      }\n\n      if (m.seqno != null && m.hasOwnProperty(\"seqno\")) {\n        d.seqno = o.bytes === String ? $util.base64.encode(m.seqno, 0, m.seqno.length) : o.bytes === Array ? Array.prototype.slice.call(m.seqno) : m.seqno;\n        if (o.oneofs) d._seqno = \"seqno\";\n      }\n\n      if (m.topicIDs && m.topicIDs.length) {\n        d.topicIDs = [];\n\n        for (var j = 0; j < m.topicIDs.length; ++j) {\n          d.topicIDs[j] = m.topicIDs[j];\n        }\n      }\n\n      if (m.signature != null && m.hasOwnProperty(\"signature\")) {\n        d.signature = o.bytes === String ? $util.base64.encode(m.signature, 0, m.signature.length) : o.bytes === Array ? Array.prototype.slice.call(m.signature) : m.signature;\n        if (o.oneofs) d._signature = \"signature\";\n      }\n\n      if (m.key != null && m.hasOwnProperty(\"key\")) {\n        d.key = o.bytes === String ? $util.base64.encode(m.key, 0, m.key.length) : o.bytes === Array ? Array.prototype.slice.call(m.key) : m.key;\n        if (o.oneofs) d._key = \"key\";\n      }\n\n      return d;\n    };\n    /**\n     * Converts this Message to JSON.\n     * @function toJSON\n     * @memberof RPC.Message\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    Message.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Message;\n  }();\n\n  return RPC;\n}();\n\nmodule.exports = $root;","map":{"version":3,"names":["$protobuf","require","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","RPC","p","subscriptions","msgs","ks","Object","keys","i","length","prototype","emptyArray","encode","m","w","create","SubOpts","uint32","fork","ldelim","Message","decode","r","l","c","undefined","len","pos","t","push","skipType","fromObject","d","Array","isArray","TypeError","toObject","o","arrays","defaults","j","toJSON","constructor","toJSONOptions","subscribe","topicID","$oneOfFields","defineProperty","get","oneOfGetter","set","oneOfSetter","hasOwnProperty","call","bool","string","Boolean","String","oneofs","_subscribe","_topicID","topicIDs","from","data","seqno","signature","key","bytes","base64","newBuffer","slice","_from","_data","_seqno","_signature","_key","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-interfaces/src/pubsub/message/rpc.js"],"sourcesContent":["/*eslint-disable*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"libp2p-pubsub-rpc\"] || ($protobuf.roots[\"libp2p-pubsub-rpc\"] = {});\n\n$root.RPC = (function() {\n\n    /**\n     * Properties of a RPC.\n     * @exports IRPC\n     * @interface IRPC\n     * @property {Array.<RPC.ISubOpts>|null} [subscriptions] RPC subscriptions\n     * @property {Array.<RPC.IMessage>|null} [msgs] RPC msgs\n     */\n\n    /**\n     * Constructs a new RPC.\n     * @exports RPC\n     * @classdesc Represents a RPC.\n     * @implements IRPC\n     * @constructor\n     * @param {IRPC=} [p] Properties to set\n     */\n    function RPC(p) {\n        this.subscriptions = [];\n        this.msgs = [];\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * RPC subscriptions.\n     * @member {Array.<RPC.ISubOpts>} subscriptions\n     * @memberof RPC\n     * @instance\n     */\n    RPC.prototype.subscriptions = $util.emptyArray;\n\n    /**\n     * RPC msgs.\n     * @member {Array.<RPC.IMessage>} msgs\n     * @memberof RPC\n     * @instance\n     */\n    RPC.prototype.msgs = $util.emptyArray;\n\n    /**\n     * Encodes the specified RPC message. Does not implicitly {@link RPC.verify|verify} messages.\n     * @function encode\n     * @memberof RPC\n     * @static\n     * @param {IRPC} m RPC message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RPC.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.subscriptions != null && m.subscriptions.length) {\n            for (var i = 0; i < m.subscriptions.length; ++i)\n                $root.RPC.SubOpts.encode(m.subscriptions[i], w.uint32(10).fork()).ldelim();\n        }\n        if (m.msgs != null && m.msgs.length) {\n            for (var i = 0; i < m.msgs.length; ++i)\n                $root.RPC.Message.encode(m.msgs[i], w.uint32(18).fork()).ldelim();\n        }\n        return w;\n    };\n\n    /**\n     * Decodes a RPC message from the specified reader or buffer.\n     * @function decode\n     * @memberof RPC\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {RPC} RPC\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RPC.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                if (!(m.subscriptions && m.subscriptions.length))\n                    m.subscriptions = [];\n                m.subscriptions.push($root.RPC.SubOpts.decode(r, r.uint32()));\n                break;\n            case 2:\n                if (!(m.msgs && m.msgs.length))\n                    m.msgs = [];\n                m.msgs.push($root.RPC.Message.decode(r, r.uint32()));\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a RPC message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof RPC\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {RPC} RPC\n     */\n    RPC.fromObject = function fromObject(d) {\n        if (d instanceof $root.RPC)\n            return d;\n        var m = new $root.RPC();\n        if (d.subscriptions) {\n            if (!Array.isArray(d.subscriptions))\n                throw TypeError(\".RPC.subscriptions: array expected\");\n            m.subscriptions = [];\n            for (var i = 0; i < d.subscriptions.length; ++i) {\n                if (typeof d.subscriptions[i] !== \"object\")\n                    throw TypeError(\".RPC.subscriptions: object expected\");\n                m.subscriptions[i] = $root.RPC.SubOpts.fromObject(d.subscriptions[i]);\n            }\n        }\n        if (d.msgs) {\n            if (!Array.isArray(d.msgs))\n                throw TypeError(\".RPC.msgs: array expected\");\n            m.msgs = [];\n            for (var i = 0; i < d.msgs.length; ++i) {\n                if (typeof d.msgs[i] !== \"object\")\n                    throw TypeError(\".RPC.msgs: object expected\");\n                m.msgs[i] = $root.RPC.Message.fromObject(d.msgs[i]);\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a RPC message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof RPC\n     * @static\n     * @param {RPC} m RPC\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    RPC.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.arrays || o.defaults) {\n            d.subscriptions = [];\n            d.msgs = [];\n        }\n        if (m.subscriptions && m.subscriptions.length) {\n            d.subscriptions = [];\n            for (var j = 0; j < m.subscriptions.length; ++j) {\n                d.subscriptions[j] = $root.RPC.SubOpts.toObject(m.subscriptions[j], o);\n            }\n        }\n        if (m.msgs && m.msgs.length) {\n            d.msgs = [];\n            for (var j = 0; j < m.msgs.length; ++j) {\n                d.msgs[j] = $root.RPC.Message.toObject(m.msgs[j], o);\n            }\n        }\n        return d;\n    };\n\n    /**\n     * Converts this RPC to JSON.\n     * @function toJSON\n     * @memberof RPC\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    RPC.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    RPC.SubOpts = (function() {\n\n        /**\n         * Properties of a SubOpts.\n         * @memberof RPC\n         * @interface ISubOpts\n         * @property {boolean|null} [subscribe] SubOpts subscribe\n         * @property {string|null} [topicID] SubOpts topicID\n         */\n\n        /**\n         * Constructs a new SubOpts.\n         * @memberof RPC\n         * @classdesc Represents a SubOpts.\n         * @implements ISubOpts\n         * @constructor\n         * @param {RPC.ISubOpts=} [p] Properties to set\n         */\n        function SubOpts(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * SubOpts subscribe.\n         * @member {boolean|null|undefined} subscribe\n         * @memberof RPC.SubOpts\n         * @instance\n         */\n        SubOpts.prototype.subscribe = null;\n\n        /**\n         * SubOpts topicID.\n         * @member {string|null|undefined} topicID\n         * @memberof RPC.SubOpts\n         * @instance\n         */\n        SubOpts.prototype.topicID = null;\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * SubOpts _subscribe.\n         * @member {\"subscribe\"|undefined} _subscribe\n         * @memberof RPC.SubOpts\n         * @instance\n         */\n        Object.defineProperty(SubOpts.prototype, \"_subscribe\", {\n            get: $util.oneOfGetter($oneOfFields = [\"subscribe\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * SubOpts _topicID.\n         * @member {\"topicID\"|undefined} _topicID\n         * @memberof RPC.SubOpts\n         * @instance\n         */\n        Object.defineProperty(SubOpts.prototype, \"_topicID\", {\n            get: $util.oneOfGetter($oneOfFields = [\"topicID\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Encodes the specified SubOpts message. Does not implicitly {@link RPC.SubOpts.verify|verify} messages.\n         * @function encode\n         * @memberof RPC.SubOpts\n         * @static\n         * @param {RPC.ISubOpts} m SubOpts message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SubOpts.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.subscribe != null && Object.hasOwnProperty.call(m, \"subscribe\"))\n                w.uint32(8).bool(m.subscribe);\n            if (m.topicID != null && Object.hasOwnProperty.call(m, \"topicID\"))\n                w.uint32(18).string(m.topicID);\n            return w;\n        };\n\n        /**\n         * Decodes a SubOpts message from the specified reader or buffer.\n         * @function decode\n         * @memberof RPC.SubOpts\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {RPC.SubOpts} SubOpts\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SubOpts.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC.SubOpts();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.subscribe = r.bool();\n                    break;\n                case 2:\n                    m.topicID = r.string();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        /**\n         * Creates a SubOpts message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof RPC.SubOpts\n         * @static\n         * @param {Object.<string,*>} d Plain object\n         * @returns {RPC.SubOpts} SubOpts\n         */\n        SubOpts.fromObject = function fromObject(d) {\n            if (d instanceof $root.RPC.SubOpts)\n                return d;\n            var m = new $root.RPC.SubOpts();\n            if (d.subscribe != null) {\n                m.subscribe = Boolean(d.subscribe);\n            }\n            if (d.topicID != null) {\n                m.topicID = String(d.topicID);\n            }\n            return m;\n        };\n\n        /**\n         * Creates a plain object from a SubOpts message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof RPC.SubOpts\n         * @static\n         * @param {RPC.SubOpts} m SubOpts\n         * @param {$protobuf.IConversionOptions} [o] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        SubOpts.toObject = function toObject(m, o) {\n            if (!o)\n                o = {};\n            var d = {};\n            if (m.subscribe != null && m.hasOwnProperty(\"subscribe\")) {\n                d.subscribe = m.subscribe;\n                if (o.oneofs)\n                    d._subscribe = \"subscribe\";\n            }\n            if (m.topicID != null && m.hasOwnProperty(\"topicID\")) {\n                d.topicID = m.topicID;\n                if (o.oneofs)\n                    d._topicID = \"topicID\";\n            }\n            return d;\n        };\n\n        /**\n         * Converts this SubOpts to JSON.\n         * @function toJSON\n         * @memberof RPC.SubOpts\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        SubOpts.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return SubOpts;\n    })();\n\n    RPC.Message = (function() {\n\n        /**\n         * Properties of a Message.\n         * @memberof RPC\n         * @interface IMessage\n         * @property {Uint8Array|null} [from] Message from\n         * @property {Uint8Array|null} [data] Message data\n         * @property {Uint8Array|null} [seqno] Message seqno\n         * @property {Array.<string>|null} [topicIDs] Message topicIDs\n         * @property {Uint8Array|null} [signature] Message signature\n         * @property {Uint8Array|null} [key] Message key\n         */\n\n        /**\n         * Constructs a new Message.\n         * @memberof RPC\n         * @classdesc Represents a Message.\n         * @implements IMessage\n         * @constructor\n         * @param {RPC.IMessage=} [p] Properties to set\n         */\n        function Message(p) {\n            this.topicIDs = [];\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * Message from.\n         * @member {Uint8Array|null|undefined} from\n         * @memberof RPC.Message\n         * @instance\n         */\n        Message.prototype.from = null;\n\n        /**\n         * Message data.\n         * @member {Uint8Array|null|undefined} data\n         * @memberof RPC.Message\n         * @instance\n         */\n        Message.prototype.data = null;\n\n        /**\n         * Message seqno.\n         * @member {Uint8Array|null|undefined} seqno\n         * @memberof RPC.Message\n         * @instance\n         */\n        Message.prototype.seqno = null;\n\n        /**\n         * Message topicIDs.\n         * @member {Array.<string>} topicIDs\n         * @memberof RPC.Message\n         * @instance\n         */\n        Message.prototype.topicIDs = $util.emptyArray;\n\n        /**\n         * Message signature.\n         * @member {Uint8Array|null|undefined} signature\n         * @memberof RPC.Message\n         * @instance\n         */\n        Message.prototype.signature = null;\n\n        /**\n         * Message key.\n         * @member {Uint8Array|null|undefined} key\n         * @memberof RPC.Message\n         * @instance\n         */\n        Message.prototype.key = null;\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * Message _from.\n         * @member {\"from\"|undefined} _from\n         * @memberof RPC.Message\n         * @instance\n         */\n        Object.defineProperty(Message.prototype, \"_from\", {\n            get: $util.oneOfGetter($oneOfFields = [\"from\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Message _data.\n         * @member {\"data\"|undefined} _data\n         * @memberof RPC.Message\n         * @instance\n         */\n        Object.defineProperty(Message.prototype, \"_data\", {\n            get: $util.oneOfGetter($oneOfFields = [\"data\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Message _seqno.\n         * @member {\"seqno\"|undefined} _seqno\n         * @memberof RPC.Message\n         * @instance\n         */\n        Object.defineProperty(Message.prototype, \"_seqno\", {\n            get: $util.oneOfGetter($oneOfFields = [\"seqno\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Message _signature.\n         * @member {\"signature\"|undefined} _signature\n         * @memberof RPC.Message\n         * @instance\n         */\n        Object.defineProperty(Message.prototype, \"_signature\", {\n            get: $util.oneOfGetter($oneOfFields = [\"signature\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Message _key.\n         * @member {\"key\"|undefined} _key\n         * @memberof RPC.Message\n         * @instance\n         */\n        Object.defineProperty(Message.prototype, \"_key\", {\n            get: $util.oneOfGetter($oneOfFields = [\"key\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Encodes the specified Message message. Does not implicitly {@link RPC.Message.verify|verify} messages.\n         * @function encode\n         * @memberof RPC.Message\n         * @static\n         * @param {RPC.IMessage} m Message message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Message.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.from != null && Object.hasOwnProperty.call(m, \"from\"))\n                w.uint32(10).bytes(m.from);\n            if (m.data != null && Object.hasOwnProperty.call(m, \"data\"))\n                w.uint32(18).bytes(m.data);\n            if (m.seqno != null && Object.hasOwnProperty.call(m, \"seqno\"))\n                w.uint32(26).bytes(m.seqno);\n            if (m.topicIDs != null && m.topicIDs.length) {\n                for (var i = 0; i < m.topicIDs.length; ++i)\n                    w.uint32(34).string(m.topicIDs[i]);\n            }\n            if (m.signature != null && Object.hasOwnProperty.call(m, \"signature\"))\n                w.uint32(42).bytes(m.signature);\n            if (m.key != null && Object.hasOwnProperty.call(m, \"key\"))\n                w.uint32(50).bytes(m.key);\n            return w;\n        };\n\n        /**\n         * Decodes a Message message from the specified reader or buffer.\n         * @function decode\n         * @memberof RPC.Message\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {RPC.Message} Message\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Message.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC.Message();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.from = r.bytes();\n                    break;\n                case 2:\n                    m.data = r.bytes();\n                    break;\n                case 3:\n                    m.seqno = r.bytes();\n                    break;\n                case 4:\n                    if (!(m.topicIDs && m.topicIDs.length))\n                        m.topicIDs = [];\n                    m.topicIDs.push(r.string());\n                    break;\n                case 5:\n                    m.signature = r.bytes();\n                    break;\n                case 6:\n                    m.key = r.bytes();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        /**\n         * Creates a Message message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof RPC.Message\n         * @static\n         * @param {Object.<string,*>} d Plain object\n         * @returns {RPC.Message} Message\n         */\n        Message.fromObject = function fromObject(d) {\n            if (d instanceof $root.RPC.Message)\n                return d;\n            var m = new $root.RPC.Message();\n            if (d.from != null) {\n                if (typeof d.from === \"string\")\n                    $util.base64.decode(d.from, m.from = $util.newBuffer($util.base64.length(d.from)), 0);\n                else if (d.from.length)\n                    m.from = d.from;\n            }\n            if (d.data != null) {\n                if (typeof d.data === \"string\")\n                    $util.base64.decode(d.data, m.data = $util.newBuffer($util.base64.length(d.data)), 0);\n                else if (d.data.length)\n                    m.data = d.data;\n            }\n            if (d.seqno != null) {\n                if (typeof d.seqno === \"string\")\n                    $util.base64.decode(d.seqno, m.seqno = $util.newBuffer($util.base64.length(d.seqno)), 0);\n                else if (d.seqno.length)\n                    m.seqno = d.seqno;\n            }\n            if (d.topicIDs) {\n                if (!Array.isArray(d.topicIDs))\n                    throw TypeError(\".RPC.Message.topicIDs: array expected\");\n                m.topicIDs = [];\n                for (var i = 0; i < d.topicIDs.length; ++i) {\n                    m.topicIDs[i] = String(d.topicIDs[i]);\n                }\n            }\n            if (d.signature != null) {\n                if (typeof d.signature === \"string\")\n                    $util.base64.decode(d.signature, m.signature = $util.newBuffer($util.base64.length(d.signature)), 0);\n                else if (d.signature.length)\n                    m.signature = d.signature;\n            }\n            if (d.key != null) {\n                if (typeof d.key === \"string\")\n                    $util.base64.decode(d.key, m.key = $util.newBuffer($util.base64.length(d.key)), 0);\n                else if (d.key.length)\n                    m.key = d.key;\n            }\n            return m;\n        };\n\n        /**\n         * Creates a plain object from a Message message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof RPC.Message\n         * @static\n         * @param {RPC.Message} m Message\n         * @param {$protobuf.IConversionOptions} [o] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Message.toObject = function toObject(m, o) {\n            if (!o)\n                o = {};\n            var d = {};\n            if (o.arrays || o.defaults) {\n                d.topicIDs = [];\n            }\n            if (m.from != null && m.hasOwnProperty(\"from\")) {\n                d.from = o.bytes === String ? $util.base64.encode(m.from, 0, m.from.length) : o.bytes === Array ? Array.prototype.slice.call(m.from) : m.from;\n                if (o.oneofs)\n                    d._from = \"from\";\n            }\n            if (m.data != null && m.hasOwnProperty(\"data\")) {\n                d.data = o.bytes === String ? $util.base64.encode(m.data, 0, m.data.length) : o.bytes === Array ? Array.prototype.slice.call(m.data) : m.data;\n                if (o.oneofs)\n                    d._data = \"data\";\n            }\n            if (m.seqno != null && m.hasOwnProperty(\"seqno\")) {\n                d.seqno = o.bytes === String ? $util.base64.encode(m.seqno, 0, m.seqno.length) : o.bytes === Array ? Array.prototype.slice.call(m.seqno) : m.seqno;\n                if (o.oneofs)\n                    d._seqno = \"seqno\";\n            }\n            if (m.topicIDs && m.topicIDs.length) {\n                d.topicIDs = [];\n                for (var j = 0; j < m.topicIDs.length; ++j) {\n                    d.topicIDs[j] = m.topicIDs[j];\n                }\n            }\n            if (m.signature != null && m.hasOwnProperty(\"signature\")) {\n                d.signature = o.bytes === String ? $util.base64.encode(m.signature, 0, m.signature.length) : o.bytes === Array ? Array.prototype.slice.call(m.signature) : m.signature;\n                if (o.oneofs)\n                    d._signature = \"signature\";\n            }\n            if (m.key != null && m.hasOwnProperty(\"key\")) {\n                d.key = o.bytes === String ? $util.base64.encode(m.key, 0, m.key.length) : o.bytes === Array ? Array.prototype.slice.call(m.key) : m.key;\n                if (o.oneofs)\n                    d._key = \"key\";\n            }\n            return d;\n        };\n\n        /**\n         * Converts this Message to JSON.\n         * @function toJSON\n         * @memberof RPC.Message\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Message.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Message;\n    })();\n\n    return RPC;\n})();\n\nmodule.exports = $root;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}