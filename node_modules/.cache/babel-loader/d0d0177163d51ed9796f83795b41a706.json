{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar dagPb = require('@ipld/dag-pb');\n\nvar _require = require('multiformats/hashes/sha2'),\n    sha256 = _require.sha256;\n\nvar _require2 = require('ipfs-unixfs'),\n    UnixFS = _require2.UnixFS;\n\nvar withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nvar _require3 = require('multiformats/cid'),\n    CID = _require3.CID;\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\n\n\nmodule.exports = function (_ref) {\n  var repo = _ref.repo,\n      preload = _ref.preload;\n\n  /**\n   * @type {import('ipfs-core-types/src/object').API[\"new\"]}\n   */\n  function _new() {\n    return _new2.apply(this, arguments);\n  }\n\n  function _new2() {\n    _new2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var options,\n          data,\n          buf,\n          hash,\n          cid,\n          _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n\n              if (!options.template) {\n                _context.next = 7;\n                break;\n              }\n\n              if (!(options.template === 'unixfs-dir')) {\n                _context.next = 6;\n                break;\n              }\n\n              data = new UnixFS({\n                type: 'directory'\n              }).marshal();\n              _context.next = 7;\n              break;\n\n            case 6:\n              throw new Error('unknown template');\n\n            case 7:\n              buf = dagPb.encode({\n                Data: data,\n                Links: []\n              });\n              _context.next = 10;\n              return sha256.digest(buf);\n\n            case 10:\n              hash = _context.sent;\n              cid = CID.createV0(hash);\n              _context.next = 14;\n              return repo.blocks.put(cid, buf, {\n                signal: options.signal\n              });\n\n            case 14:\n              if (options.preload !== false) {\n                preload(cid);\n              }\n\n              return _context.abrupt(\"return\", cid);\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _new2.apply(this, arguments);\n  }\n\n  return withTimeoutOption(_new);\n};","map":{"version":3,"names":["dagPb","require","sha256","UnixFS","withTimeoutOption","CID","module","exports","repo","preload","_new","options","template","data","type","marshal","Error","buf","encode","Data","Links","digest","hash","cid","createV0","blocks","put","signal"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/object/new.js"],"sourcesContent":["'use strict'\n\nconst dagPb = require('@ipld/dag-pb')\nconst { sha256 } = require('multiformats/hashes/sha2')\nconst { UnixFS } = require('ipfs-unixfs')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst { CID } = require('multiformats/cid')\n\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nmodule.exports = ({ repo, preload }) => {\n  /**\n   * @type {import('ipfs-core-types/src/object').API[\"new\"]}\n   */\n  async function _new (options = {}) {\n    let data\n\n    if (options.template) {\n      if (options.template === 'unixfs-dir') {\n        data = (new UnixFS({ type: 'directory' })).marshal()\n      } else {\n        throw new Error('unknown template')\n      }\n    }\n\n    const buf = dagPb.encode({\n      Data: data,\n      Links: []\n    })\n    const hash = await sha256.digest(buf)\n    const cid = CID.createV0(hash)\n\n    await repo.blocks.put(cid, buf, {\n      signal: options.signal\n    })\n\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    return cid\n  }\n\n  return withTimeoutOption(_new)\n}\n"],"mappings":"AAAA;;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,cAAD,CAArB;;AACA,eAAmBA,OAAO,CAAC,0BAAD,CAA1B;AAAA,IAAQC,MAAR,YAAQA,MAAR;;AACA,gBAAmBD,OAAO,CAAC,aAAD,CAA1B;AAAA,IAAQE,MAAR,aAAQA,MAAR;;AACA,IAAMC,iBAAiB,GAAGH,OAAO,CAAC,yCAAD,CAAjC;;AACA,gBAAgBA,OAAO,CAAC,kBAAD,CAAvB;AAAA,IAAQI,GAAR,aAAQA,GAAR;AAEA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,gBAAuB;EAAA,IAApBC,IAAoB,QAApBA,IAAoB;EAAA,IAAdC,OAAc,QAAdA,OAAc;;EACtC;AACF;AACA;EAHwC,SAIvBC,IAJuB;IAAA;EAAA;;EAAA;IAAA,mEAItC;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAqBC,OAArB,2DAA+B,EAA/B;;cAAA,KAGMA,OAAO,CAACC,QAHd;gBAAA;gBAAA;cAAA;;cAAA,MAIQD,OAAO,CAACC,QAAR,KAAqB,YAJ7B;gBAAA;gBAAA;cAAA;;cAKMC,IAAI,GAAI,IAAIV,MAAJ,CAAW;gBAAEW,IAAI,EAAE;cAAR,CAAX,CAAD,CAAoCC,OAApC,EAAP;cALN;cAAA;;YAAA;cAAA,MAOY,IAAIC,KAAJ,CAAU,kBAAV,CAPZ;;YAAA;cAWQC,GAXR,GAWcjB,KAAK,CAACkB,MAAN,CAAa;gBACvBC,IAAI,EAAEN,IADiB;gBAEvBO,KAAK,EAAE;cAFgB,CAAb,CAXd;cAAA;cAAA,OAeqBlB,MAAM,CAACmB,MAAP,CAAcJ,GAAd,CAfrB;;YAAA;cAeQK,IAfR;cAgBQC,GAhBR,GAgBclB,GAAG,CAACmB,QAAJ,CAAaF,IAAb,CAhBd;cAAA;cAAA,OAkBQd,IAAI,CAACiB,MAAL,CAAYC,GAAZ,CAAgBH,GAAhB,EAAqBN,GAArB,EAA0B;gBAC9BU,MAAM,EAAEhB,OAAO,CAACgB;cADc,CAA1B,CAlBR;;YAAA;cAsBE,IAAIhB,OAAO,CAACF,OAAR,KAAoB,KAAxB,EAA+B;gBAC7BA,OAAO,CAACc,GAAD,CAAP;cACD;;cAxBH,iCA0BSA,GA1BT;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAJsC;IAAA;EAAA;;EAiCtC,OAAOnB,iBAAiB,CAACM,IAAD,CAAxB;AACD,CAlCD"},"metadata":{},"sourceType":"script"}