{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _objectSpread = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _awaitAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _wrapAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nvar _asyncIterator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar _require = require('ipfs-unixfs-importer'),\n    importer = _require.importer;\n\nvar _require2 = require('ipfs-core-utils/src/files/normalise-input/index'),\n    normaliseInput = _require2.normaliseInput;\n\nvar _require3 = require('./utils'),\n    parseChunkerString = _require3.parseChunkerString;\n\nvar _require4 = require('it-pipe'),\n    pipe = _require4.pipe;\n\nvar withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nvar mergeOptions = require('merge-options').bind({\n  ignoreUndefined: true\n});\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-unixfs-importer').ImportResult} ImportResult\n */\n\n/**\n * @typedef {Object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../../types').Preload} preload\n * @property {import('ipfs-core-types/src/root').ShardingOptions} [options]\n *\n * @param {Context} context\n */\n\n\nmodule.exports = function (_ref) {\n  var repo = _ref.repo,\n      preload = _ref.preload,\n      options = _ref.options;\n  var isShardingEnabled = options && options.sharding;\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"addAll\"]}\n   */\n\n  function addAll(_x) {\n    return _addAll.apply(this, arguments);\n  }\n\n  function _addAll() {\n    _addAll = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(source) {\n      var options,\n          opts,\n          totals,\n          prog,\n          iterator,\n          releaseLock,\n          _iteratorAbruptCompletion,\n          _didIteratorError,\n          _iteratorError,\n          _iterator,\n          _step,\n          added,\n          _args = arguments;\n\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              opts = mergeOptions({\n                shardSplitThreshold: isShardingEnabled ? 1000 : Infinity,\n                strategy: 'balanced'\n              }, options, _objectSpread({}, parseChunkerString(options.chunker))); // CID v0 is for multihashes encoded with sha2-256\n\n              if (opts.hashAlg && opts.hashAlg !== 'sha2-256' && opts.cidVersion !== 1) {\n                opts.cidVersion = 1;\n              }\n\n              if (opts.trickle) {\n                opts.strategy = 'trickle';\n              }\n\n              if (opts.strategy === 'trickle') {\n                opts.leafType = 'raw';\n                opts.reduceSingleLeafToSelf = false;\n              }\n\n              if (opts.cidVersion > 0 && opts.rawLeaves === undefined) {\n                // if the cid version is 1 or above, use raw leaves as this is\n                // what go does.\n                opts.rawLeaves = true;\n              }\n\n              if (opts.hashAlg !== undefined && opts.rawLeaves === undefined) {\n                // if a non-default hash alg has been specified, use raw leaves as this is\n                // what go does.\n                opts.rawLeaves = true;\n              }\n\n              delete opts.trickle;\n              /** @type {Record<string, number>} */\n\n              totals = {};\n\n              if (opts.progress) {\n                prog = opts.progress;\n                /**\n                 * @param {number} bytes\n                 * @param {string} path\n                 */\n\n                opts.progress = function (bytes, path) {\n                  if (!totals[path]) {\n                    totals[path] = 0;\n                  }\n\n                  totals[path] += bytes;\n                  prog(totals[path], path);\n                };\n              }\n\n              iterator = pipe(normaliseInput(source),\n              /**\n               * @param {AsyncIterable<import('ipfs-unixfs-importer').ImportCandidate>} source\n               */\n              function (source) {\n                return importer(source, repo.blocks, _objectSpread(_objectSpread({}, opts), {}, {\n                  pin: false\n                }));\n              }, transformFile(opts), preloadFile(preload, opts), pinFile(repo, opts));\n              _context.next = 13;\n              return _awaitAsyncGenerator(repo.gcLock.readLock());\n\n            case 13:\n              releaseLock = _context.sent;\n              _context.prev = 14;\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 17;\n              _iterator = _asyncIterator(iterator);\n\n            case 19:\n              _context.next = 21;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 21:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 29;\n                break;\n              }\n\n              added = _step.value;\n              // do not keep file totals around forever\n              delete totals[added.path];\n              _context.next = 26;\n              return added;\n\n            case 26:\n              _iteratorAbruptCompletion = false;\n              _context.next = 19;\n              break;\n\n            case 29:\n              _context.next = 35;\n              break;\n\n            case 31:\n              _context.prev = 31;\n              _context.t0 = _context[\"catch\"](17);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n\n            case 35:\n              _context.prev = 35;\n              _context.prev = 36;\n\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 40;\n                break;\n              }\n\n              _context.next = 40;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 40:\n              _context.prev = 40;\n\n              if (!_didIteratorError) {\n                _context.next = 43;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 43:\n              return _context.finish(40);\n\n            case 44:\n              return _context.finish(35);\n\n            case 45:\n              _context.prev = 45;\n              releaseLock();\n              return _context.finish(45);\n\n            case 48:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[14,, 45, 48], [17, 31, 35, 45], [36,, 40, 44]]);\n    }));\n    return _addAll.apply(this, arguments);\n  }\n\n  return withTimeoutOption(addAll);\n};\n/**\n * @param {import('ipfs-core-types/src/root').AddAllOptions} opts\n */\n\n\nfunction transformFile(opts) {\n  /**\n   * @param {AsyncGenerator<ImportResult, void, undefined>} source\n   */\n  function transformFile(_x2) {\n    return _transformFile.apply(this, arguments);\n  }\n\n  function _transformFile() {\n    _transformFile = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(source) {\n      var _iteratorAbruptCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, file, cid, path;\n\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _iteratorAbruptCompletion2 = false;\n              _didIteratorError2 = false;\n              _context2.prev = 2;\n              _iterator2 = _asyncIterator(source);\n\n            case 4:\n              _context2.next = 6;\n              return _awaitAsyncGenerator(_iterator2.next());\n\n            case 6:\n              if (!(_iteratorAbruptCompletion2 = !(_step2 = _context2.sent).done)) {\n                _context2.next = 17;\n                break;\n              }\n\n              file = _step2.value;\n              cid = file.cid;\n\n              if (opts.cidVersion === 1) {\n                cid = cid.toV1();\n              }\n\n              path = file.path ? file.path : cid.toString();\n\n              if (opts.wrapWithDirectory && !file.path) {\n                path = '';\n              }\n\n              _context2.next = 14;\n              return {\n                path: path,\n                cid: cid,\n                size: file.size,\n                mode: file.unixfs && file.unixfs.mode,\n                mtime: file.unixfs && file.unixfs.mtime\n              };\n\n            case 14:\n              _iteratorAbruptCompletion2 = false;\n              _context2.next = 4;\n              break;\n\n            case 17:\n              _context2.next = 23;\n              break;\n\n            case 19:\n              _context2.prev = 19;\n              _context2.t0 = _context2[\"catch\"](2);\n              _didIteratorError2 = true;\n              _iteratorError2 = _context2.t0;\n\n            case 23:\n              _context2.prev = 23;\n              _context2.prev = 24;\n\n              if (!(_iteratorAbruptCompletion2 && _iterator2.return != null)) {\n                _context2.next = 28;\n                break;\n              }\n\n              _context2.next = 28;\n              return _awaitAsyncGenerator(_iterator2.return());\n\n            case 28:\n              _context2.prev = 28;\n\n              if (!_didIteratorError2) {\n                _context2.next = 31;\n                break;\n              }\n\n              throw _iteratorError2;\n\n            case 31:\n              return _context2.finish(28);\n\n            case 32:\n              return _context2.finish(23);\n\n            case 33:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[2, 19, 23, 33], [24,, 28, 32]]);\n    }));\n    return _transformFile.apply(this, arguments);\n  }\n\n  return transformFile;\n}\n/**\n * @param {(cid: CID) => void} preload\n * @param {import('ipfs-core-types/src/root').AddAllOptions} opts\n */\n\n\nfunction preloadFile(preload, opts) {\n  /**\n   * @param {AsyncGenerator<ImportResult, void, undefined>} source\n   */\n  function maybePreloadFile(_x3) {\n    return _maybePreloadFile.apply(this, arguments);\n  }\n\n  function _maybePreloadFile() {\n    _maybePreloadFile = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(source) {\n      var _iteratorAbruptCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, file, isRootFile, shouldPreload;\n\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _iteratorAbruptCompletion3 = false;\n              _didIteratorError3 = false;\n              _context3.prev = 2;\n              _iterator3 = _asyncIterator(source);\n\n            case 4:\n              _context3.next = 6;\n              return _awaitAsyncGenerator(_iterator3.next());\n\n            case 6:\n              if (!(_iteratorAbruptCompletion3 = !(_step3 = _context3.sent).done)) {\n                _context3.next = 16;\n                break;\n              }\n\n              file = _step3.value;\n              isRootFile = !file.path || opts.wrapWithDirectory ? file.path === '' : !file.path.includes('/');\n              shouldPreload = isRootFile && !opts.onlyHash && opts.preload !== false;\n\n              if (shouldPreload) {\n                preload(file.cid);\n              }\n\n              _context3.next = 13;\n              return file;\n\n            case 13:\n              _iteratorAbruptCompletion3 = false;\n              _context3.next = 4;\n              break;\n\n            case 16:\n              _context3.next = 22;\n              break;\n\n            case 18:\n              _context3.prev = 18;\n              _context3.t0 = _context3[\"catch\"](2);\n              _didIteratorError3 = true;\n              _iteratorError3 = _context3.t0;\n\n            case 22:\n              _context3.prev = 22;\n              _context3.prev = 23;\n\n              if (!(_iteratorAbruptCompletion3 && _iterator3.return != null)) {\n                _context3.next = 27;\n                break;\n              }\n\n              _context3.next = 27;\n              return _awaitAsyncGenerator(_iterator3.return());\n\n            case 27:\n              _context3.prev = 27;\n\n              if (!_didIteratorError3) {\n                _context3.next = 30;\n                break;\n              }\n\n              throw _iteratorError3;\n\n            case 30:\n              return _context3.finish(27);\n\n            case 31:\n              return _context3.finish(22);\n\n            case 32:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[2, 18, 22, 32], [23,, 27, 31]]);\n    }));\n    return _maybePreloadFile.apply(this, arguments);\n  }\n\n  return maybePreloadFile;\n}\n/**\n * @param {import('ipfs-repo').IPFSRepo} repo\n * @param {import('ipfs-core-types/src/root').AddAllOptions} opts\n */\n\n\nfunction pinFile(repo, opts) {\n  /**\n   * @param {AsyncGenerator<ImportResult, void, undefined>} source\n   */\n  function maybePinFile(_x4) {\n    return _maybePinFile.apply(this, arguments);\n  }\n\n  function _maybePinFile() {\n    _maybePinFile = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(source) {\n      var _iteratorAbruptCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, file, isRootDir, shouldPin;\n\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _iteratorAbruptCompletion4 = false;\n              _didIteratorError4 = false;\n              _context4.prev = 2;\n              _iterator4 = _asyncIterator(source);\n\n            case 4:\n              _context4.next = 6;\n              return _awaitAsyncGenerator(_iterator4.next());\n\n            case 6:\n              if (!(_iteratorAbruptCompletion4 = !(_step4 = _context4.sent).done)) {\n                _context4.next = 18;\n                break;\n              }\n\n              file = _step4.value;\n              // Pin a file if it is the root dir of a recursive add or the single file\n              // of a direct add.\n              isRootDir = !(file.path && file.path.includes('/'));\n              shouldPin = (opts.pin == null ? true : opts.pin) && isRootDir && !opts.onlyHash;\n\n              if (!shouldPin) {\n                _context4.next = 13;\n                break;\n              }\n\n              _context4.next = 13;\n              return _awaitAsyncGenerator(repo.pins.pinRecursively(file.cid));\n\n            case 13:\n              _context4.next = 15;\n              return file;\n\n            case 15:\n              _iteratorAbruptCompletion4 = false;\n              _context4.next = 4;\n              break;\n\n            case 18:\n              _context4.next = 24;\n              break;\n\n            case 20:\n              _context4.prev = 20;\n              _context4.t0 = _context4[\"catch\"](2);\n              _didIteratorError4 = true;\n              _iteratorError4 = _context4.t0;\n\n            case 24:\n              _context4.prev = 24;\n              _context4.prev = 25;\n\n              if (!(_iteratorAbruptCompletion4 && _iterator4.return != null)) {\n                _context4.next = 29;\n                break;\n              }\n\n              _context4.next = 29;\n              return _awaitAsyncGenerator(_iterator4.return());\n\n            case 29:\n              _context4.prev = 29;\n\n              if (!_didIteratorError4) {\n                _context4.next = 32;\n                break;\n              }\n\n              throw _iteratorError4;\n\n            case 32:\n              return _context4.finish(29);\n\n            case 33:\n              return _context4.finish(24);\n\n            case 34:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[2, 20, 24, 34], [25,, 29, 33]]);\n    }));\n    return _maybePinFile.apply(this, arguments);\n  }\n\n  return maybePinFile;\n}","map":{"version":3,"names":["require","importer","normaliseInput","parseChunkerString","pipe","withTimeoutOption","mergeOptions","bind","ignoreUndefined","module","exports","repo","preload","options","isShardingEnabled","sharding","addAll","source","opts","shardSplitThreshold","Infinity","strategy","chunker","hashAlg","cidVersion","trickle","leafType","reduceSingleLeafToSelf","rawLeaves","undefined","totals","progress","prog","bytes","path","iterator","blocks","pin","transformFile","preloadFile","pinFile","gcLock","readLock","releaseLock","added","file","cid","toV1","toString","wrapWithDirectory","size","mode","unixfs","mtime","maybePreloadFile","isRootFile","includes","shouldPreload","onlyHash","maybePinFile","isRootDir","shouldPin","pins","pinRecursively"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/add-all/index.js"],"sourcesContent":["'use strict'\n\nconst { importer } = require('ipfs-unixfs-importer')\nconst { normaliseInput } = require('ipfs-core-utils/src/files/normalise-input/index')\nconst { parseChunkerString } = require('./utils')\nconst { pipe } = require('it-pipe')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst mergeOptions = require('merge-options').bind({ ignoreUndefined: true })\n\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-unixfs-importer').ImportResult} ImportResult\n */\n\n/**\n * @typedef {Object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../../types').Preload} preload\n * @property {import('ipfs-core-types/src/root').ShardingOptions} [options]\n *\n * @param {Context} context\n */\nmodule.exports = ({ repo, preload, options }) => {\n  const isShardingEnabled = options && options.sharding\n\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"addAll\"]}\n   */\n  async function * addAll (source, options = {}) {\n    const opts = mergeOptions({\n      shardSplitThreshold: isShardingEnabled ? 1000 : Infinity,\n      strategy: 'balanced'\n    }, options, {\n      ...parseChunkerString(options.chunker)\n    })\n\n    // CID v0 is for multihashes encoded with sha2-256\n    if (opts.hashAlg && opts.hashAlg !== 'sha2-256' && opts.cidVersion !== 1) {\n      opts.cidVersion = 1\n    }\n\n    if (opts.trickle) {\n      opts.strategy = 'trickle'\n    }\n\n    if (opts.strategy === 'trickle') {\n      opts.leafType = 'raw'\n      opts.reduceSingleLeafToSelf = false\n    }\n\n    if (opts.cidVersion > 0 && opts.rawLeaves === undefined) {\n      // if the cid version is 1 or above, use raw leaves as this is\n      // what go does.\n      opts.rawLeaves = true\n    }\n\n    if (opts.hashAlg !== undefined && opts.rawLeaves === undefined) {\n      // if a non-default hash alg has been specified, use raw leaves as this is\n      // what go does.\n      opts.rawLeaves = true\n    }\n\n    delete opts.trickle\n\n    /** @type {Record<string, number>} */\n    const totals = {}\n\n    if (opts.progress) {\n      const prog = opts.progress\n\n      /**\n       * @param {number} bytes\n       * @param {string} path\n       */\n      opts.progress = (bytes, path) => {\n        if (!totals[path]) {\n          totals[path] = 0\n        }\n\n        totals[path] += bytes\n\n        prog(totals[path], path)\n      }\n    }\n\n    const iterator = pipe(\n      normaliseInput(source),\n      /**\n       * @param {AsyncIterable<import('ipfs-unixfs-importer').ImportCandidate>} source\n       */\n      source => importer(source, repo.blocks, {\n        ...opts,\n        pin: false\n      }),\n      transformFile(opts),\n      preloadFile(preload, opts),\n      pinFile(repo, opts)\n    )\n\n    const releaseLock = await repo.gcLock.readLock()\n\n    try {\n      for await (const added of iterator) {\n        // do not keep file totals around forever\n        delete totals[added.path]\n\n        yield added\n      }\n    } finally {\n      releaseLock()\n    }\n  }\n\n  return withTimeoutOption(addAll)\n}\n\n/**\n * @param {import('ipfs-core-types/src/root').AddAllOptions} opts\n */\nfunction transformFile (opts) {\n  /**\n   * @param {AsyncGenerator<ImportResult, void, undefined>} source\n   */\n  async function * transformFile (source) {\n    for await (const file of source) {\n      let cid = file.cid\n\n      if (opts.cidVersion === 1) {\n        cid = cid.toV1()\n      }\n\n      let path = file.path ? file.path : cid.toString()\n\n      if (opts.wrapWithDirectory && !file.path) {\n        path = ''\n      }\n\n      yield {\n        path,\n        cid: cid,\n        size: file.size,\n        mode: file.unixfs && file.unixfs.mode,\n        mtime: file.unixfs && file.unixfs.mtime\n      }\n    }\n  }\n\n  return transformFile\n}\n\n/**\n * @param {(cid: CID) => void} preload\n * @param {import('ipfs-core-types/src/root').AddAllOptions} opts\n */\nfunction preloadFile (preload, opts) {\n  /**\n   * @param {AsyncGenerator<ImportResult, void, undefined>} source\n   */\n  async function * maybePreloadFile (source) {\n    for await (const file of source) {\n      const isRootFile = !file.path || opts.wrapWithDirectory\n        ? file.path === ''\n        : !file.path.includes('/')\n\n      const shouldPreload = isRootFile && !opts.onlyHash && opts.preload !== false\n\n      if (shouldPreload) {\n        preload(file.cid)\n      }\n\n      yield file\n    }\n  }\n\n  return maybePreloadFile\n}\n\n/**\n * @param {import('ipfs-repo').IPFSRepo} repo\n * @param {import('ipfs-core-types/src/root').AddAllOptions} opts\n */\nfunction pinFile (repo, opts) {\n  /**\n   * @param {AsyncGenerator<ImportResult, void, undefined>} source\n   */\n  async function * maybePinFile (source) {\n    for await (const file of source) {\n      // Pin a file if it is the root dir of a recursive add or the single file\n      // of a direct add.\n      const isRootDir = !(file.path && file.path.includes('/'))\n      const shouldPin = (opts.pin == null ? true : opts.pin) && isRootDir && !opts.onlyHash\n\n      if (shouldPin) {\n        await repo.pins.pinRecursively(file.cid)\n      }\n\n      yield file\n    }\n  }\n\n  return maybePinFile\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}