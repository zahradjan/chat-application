{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar debug = require('debug');\n\nvar log = Object.assign(debug('libp2p:circuit:stop'), {\n  error: debug('libp2p:circuit:stop:err')\n});\n\nvar _require = require('../protocol'),\n    CircuitPB = _require.CircuitRelay;\n\nvar multicodec = require('../multicodec');\n\nvar StreamHandler = require('./stream-handler');\n\nvar _require2 = require('./utils'),\n    validateAddrs = _require2.validateAddrs;\n/**\n * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection\n * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream\n * @typedef {import('../protocol').ICircuitRelay} ICircuitRelay\n */\n\n/**\n * Handles incoming STOP requests\n *\n * @private\n * @param {Object} options\n * @param {Connection} options.connection\n * @param {ICircuitRelay} options.request - The CircuitRelay protobuf request (unencoded)\n * @param {StreamHandler} options.streamHandler\n * @returns {Promise<MuxedStream>|void} Resolves a duplex iterable\n */\n\n\nmodule.exports.handleStop = function handleStop(_ref) {\n  var connection = _ref.connection,\n      request = _ref.request,\n      streamHandler = _ref.streamHandler;\n\n  // Validate the STOP request has the required input\n  try {\n    validateAddrs(request, streamHandler);\n  } catch (err) {\n    return log.error('invalid stop request via peer %s', connection.remotePeer.toB58String(), err);\n  } // The request is valid\n\n\n  log('stop request is valid');\n  streamHandler.write({\n    type: CircuitPB.Type.STATUS,\n    code: CircuitPB.Status.SUCCESS\n  });\n  return streamHandler.rest();\n};\n/**\n * Creates a STOP request\n *\n * @private\n * @param {Object} options\n * @param {Connection} options.connection\n * @param {ICircuitRelay} options.request - The CircuitRelay protobuf request (unencoded)\n * @returns {Promise<MuxedStream|void>} Resolves a duplex iterable\n */\n\n\nmodule.exports.stop = /*#__PURE__*/function () {\n  var _stop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref2) {\n    var connection, request, _yield$connection$new, stream, streamHandler, response;\n\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            connection = _ref2.connection, request = _ref2.request;\n            _context.next = 3;\n            return connection.newStream([multicodec.relay]);\n\n          case 3:\n            _yield$connection$new = _context.sent;\n            stream = _yield$connection$new.stream;\n            log('starting stop request to %s', connection.remotePeer.toB58String());\n            streamHandler = new StreamHandler({\n              stream: stream\n            });\n            streamHandler.write(request);\n            _context.next = 10;\n            return streamHandler.read();\n\n          case 10:\n            response = _context.sent;\n\n            if (response) {\n              _context.next = 13;\n              break;\n            }\n\n            return _context.abrupt(\"return\", streamHandler.close());\n\n          case 13:\n            if (!(response.code === CircuitPB.Status.SUCCESS)) {\n              _context.next = 16;\n              break;\n            }\n\n            log('stop request to %s was successful', connection.remotePeer.toB58String());\n            return _context.abrupt(\"return\", streamHandler.rest());\n\n          case 16:\n            log('stop request failed with code %d', response.code);\n            streamHandler.close();\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  function stop(_x) {\n    return _stop.apply(this, arguments);\n  }\n\n  return stop;\n}();","map":{"version":3,"names":["debug","require","log","Object","assign","error","CircuitPB","CircuitRelay","multicodec","StreamHandler","validateAddrs","module","exports","handleStop","connection","request","streamHandler","err","remotePeer","toB58String","write","type","Type","STATUS","code","Status","SUCCESS","rest","stop","newStream","relay","stream","read","response","close"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p/src/circuit/circuit/stop.js"],"sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = Object.assign(debug('libp2p:circuit:stop'), {\n  error: debug('libp2p:circuit:stop:err')\n})\n\nconst { CircuitRelay: CircuitPB } = require('../protocol')\nconst multicodec = require('../multicodec')\nconst StreamHandler = require('./stream-handler')\nconst { validateAddrs } = require('./utils')\n\n/**\n * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection\n * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream\n * @typedef {import('../protocol').ICircuitRelay} ICircuitRelay\n */\n\n/**\n * Handles incoming STOP requests\n *\n * @private\n * @param {Object} options\n * @param {Connection} options.connection\n * @param {ICircuitRelay} options.request - The CircuitRelay protobuf request (unencoded)\n * @param {StreamHandler} options.streamHandler\n * @returns {Promise<MuxedStream>|void} Resolves a duplex iterable\n */\nmodule.exports.handleStop = function handleStop ({\n  connection,\n  request,\n  streamHandler\n}) {\n  // Validate the STOP request has the required input\n  try {\n    validateAddrs(request, streamHandler)\n  } catch (err) {\n    return log.error('invalid stop request via peer %s', connection.remotePeer.toB58String(), err)\n  }\n\n  // The request is valid\n  log('stop request is valid')\n  streamHandler.write({\n    type: CircuitPB.Type.STATUS,\n    code: CircuitPB.Status.SUCCESS\n  })\n  return streamHandler.rest()\n}\n\n/**\n * Creates a STOP request\n *\n * @private\n * @param {Object} options\n * @param {Connection} options.connection\n * @param {ICircuitRelay} options.request - The CircuitRelay protobuf request (unencoded)\n * @returns {Promise<MuxedStream|void>} Resolves a duplex iterable\n */\nmodule.exports.stop = async function stop ({\n  connection,\n  request\n}) {\n  const { stream } = await connection.newStream([multicodec.relay])\n  log('starting stop request to %s', connection.remotePeer.toB58String())\n  const streamHandler = new StreamHandler({ stream })\n\n  streamHandler.write(request)\n  const response = await streamHandler.read()\n\n  if (!response) {\n    return streamHandler.close()\n  }\n\n  if (response.code === CircuitPB.Status.SUCCESS) {\n    log('stop request to %s was successful', connection.remotePeer.toB58String())\n    return streamHandler.rest()\n  }\n\n  log('stop request failed with code %d', response.code)\n  streamHandler.close()\n}\n"],"mappings":"AAAA;;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMC,GAAG,GAAGC,MAAM,CAACC,MAAP,CAAcJ,KAAK,CAAC,qBAAD,CAAnB,EAA4C;EACtDK,KAAK,EAAEL,KAAK,CAAC,yBAAD;AAD0C,CAA5C,CAAZ;;AAIA,eAAoCC,OAAO,CAAC,aAAD,CAA3C;AAAA,IAAsBK,SAAtB,YAAQC,YAAR;;AACA,IAAMC,UAAU,GAAGP,OAAO,CAAC,eAAD,CAA1B;;AACA,IAAMQ,aAAa,GAAGR,OAAO,CAAC,kBAAD,CAA7B;;AACA,gBAA0BA,OAAO,CAAC,SAAD,CAAjC;AAAA,IAAQS,aAAR,aAAQA,aAAR;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,CAAeC,UAAf,GAA4B,SAASA,UAAT,OAIzB;EAAA,IAHDC,UAGC,QAHDA,UAGC;EAAA,IAFDC,OAEC,QAFDA,OAEC;EAAA,IADDC,aACC,QADDA,aACC;;EACD;EACA,IAAI;IACFN,aAAa,CAACK,OAAD,EAAUC,aAAV,CAAb;EACD,CAFD,CAEE,OAAOC,GAAP,EAAY;IACZ,OAAOf,GAAG,CAACG,KAAJ,CAAU,kCAAV,EAA8CS,UAAU,CAACI,UAAX,CAAsBC,WAAtB,EAA9C,EAAmFF,GAAnF,CAAP;EACD,CANA,CAQD;;;EACAf,GAAG,CAAC,uBAAD,CAAH;EACAc,aAAa,CAACI,KAAd,CAAoB;IAClBC,IAAI,EAAEf,SAAS,CAACgB,IAAV,CAAeC,MADH;IAElBC,IAAI,EAAElB,SAAS,CAACmB,MAAV,CAAiBC;EAFL,CAApB;EAIA,OAAOV,aAAa,CAACW,IAAd,EAAP;AACD,CAnBD;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAhB,MAAM,CAACC,OAAP,CAAegB,IAAf;EAAA,uEAAsB;IAAA;;IAAA;MAAA;QAAA;UAAA;YACpBd,UADoB,SACpBA,UADoB,EAEpBC,OAFoB,SAEpBA,OAFoB;YAAA;YAAA,OAIKD,UAAU,CAACe,SAAX,CAAqB,CAACrB,UAAU,CAACsB,KAAZ,CAArB,CAJL;;UAAA;YAAA;YAIZC,MAJY,yBAIZA,MAJY;YAKpB7B,GAAG,CAAC,6BAAD,EAAgCY,UAAU,CAACI,UAAX,CAAsBC,WAAtB,EAAhC,CAAH;YACMH,aANc,GAME,IAAIP,aAAJ,CAAkB;cAAEsB,MAAM,EAANA;YAAF,CAAlB,CANF;YAQpBf,aAAa,CAACI,KAAd,CAAoBL,OAApB;YARoB;YAAA,OASGC,aAAa,CAACgB,IAAd,EATH;;UAAA;YASdC,QATc;;YAAA,IAWfA,QAXe;cAAA;cAAA;YAAA;;YAAA,iCAYXjB,aAAa,CAACkB,KAAd,EAZW;;UAAA;YAAA,MAehBD,QAAQ,CAACT,IAAT,KAAkBlB,SAAS,CAACmB,MAAV,CAAiBC,OAfnB;cAAA;cAAA;YAAA;;YAgBlBxB,GAAG,CAAC,mCAAD,EAAsCY,UAAU,CAACI,UAAX,CAAsBC,WAAtB,EAAtC,CAAH;YAhBkB,iCAiBXH,aAAa,CAACW,IAAd,EAjBW;;UAAA;YAoBpBzB,GAAG,CAAC,kCAAD,EAAqC+B,QAAQ,CAACT,IAA9C,CAAH;YACAR,aAAa,CAACkB,KAAd;;UArBoB;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAtB;;EAAA,SAAqCN,IAArC;IAAA;EAAA;;EAAA,OAAqCA,IAArC;AAAA"},"metadata":{},"sourceType":"script"}