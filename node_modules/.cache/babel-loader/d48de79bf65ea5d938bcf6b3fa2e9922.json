{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar debug = require('debug');\n\nvar log = Object.assign(debug('libp2p:circuit:stream-handler'), {\n  error: debug('libp2p:circuit:stream-handler:err')\n});\n\nvar lp = require('it-length-prefixed'); // @ts-ignore it-handshake does not export types\n\n\nvar handshake = require('it-handshake');\n\nvar _require = require('../protocol'),\n    CircuitRelay = _require.CircuitRelay;\n/**\n * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream\n * @typedef {import('../protocol').ICircuitRelay} ICircuitRelay\n */\n\n\nvar StreamHandler = /*#__PURE__*/function () {\n  /**\n   * Create a stream handler for connection\n   *\n   * @class\n   * @param {object} options\n   * @param {MuxedStream} options.stream - A duplex iterable\n   * @param {number} [options.maxLength = 4096] - max bytes length of message\n   */\n  function StreamHandler(_ref) {\n    var stream = _ref.stream,\n        _ref$maxLength = _ref.maxLength,\n        maxLength = _ref$maxLength === void 0 ? 4096 : _ref$maxLength;\n\n    _classCallCheck(this, StreamHandler);\n\n    this.stream = stream;\n    this.shake = handshake(this.stream); // @ts-ignore options are not optional\n\n    this.decoder = lp.decode.fromReader(this.shake.reader, {\n      maxDataLength: maxLength\n    });\n  }\n  /**\n   * Read and decode message\n   *\n   * @async\n   */\n\n\n  _createClass(StreamHandler, [{\n    key: \"read\",\n    value: function () {\n      var _read = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var msg, value;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.decoder.next();\n\n              case 2:\n                msg = _context.sent;\n\n                if (!msg.value) {\n                  _context.next = 7;\n                  break;\n                }\n\n                value = CircuitRelay.decode(msg.value.slice());\n                log('read message type', value.type);\n                return _context.abrupt(\"return\", value);\n\n              case 7:\n                log('read received no value, closing stream'); // End the stream, we didn't get data\n\n                this.close();\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function read() {\n        return _read.apply(this, arguments);\n      }\n\n      return read;\n    }()\n    /**\n     * Encode and write array of buffers\n     *\n     * @param {ICircuitRelay} msg - An unencoded CircuitRelay protobuf message\n     * @returns {void}\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(msg) {\n      log('write message type %s', msg.type); // @ts-ignore lp.encode expects type type 'Buffer | BufferList', not 'Uint8Array'\n\n      this.shake.write(lp.encode.single(CircuitRelay.encode(msg).finish()));\n    }\n    /**\n     * Return the handshake rest stream and invalidate handler\n     *\n     * @returns {*} A duplex iterable\n     */\n\n  }, {\n    key: \"rest\",\n    value: function rest() {\n      this.shake.rest();\n      return this.shake.stream;\n    }\n    /**\n     * @param {ICircuitRelay} msg - An unencoded CircuitRelay protobuf message\n     */\n\n  }, {\n    key: \"end\",\n    value: function end(msg) {\n      this.write(msg);\n      this.close();\n    }\n    /**\n     * Close the stream\n     *\n     * @returns {void}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      log('closing the stream');\n      this.rest().sink([]);\n    }\n  }]);\n\n  return StreamHandler;\n}();\n\nmodule.exports = StreamHandler;","map":{"version":3,"names":["debug","require","log","Object","assign","error","lp","handshake","CircuitRelay","StreamHandler","stream","maxLength","shake","decoder","decode","fromReader","reader","maxDataLength","next","msg","value","slice","type","close","write","encode","single","finish","rest","sink","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p/src/circuit/circuit/stream-handler.js"],"sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = Object.assign(debug('libp2p:circuit:stream-handler'), {\n  error: debug('libp2p:circuit:stream-handler:err')\n})\n\nconst lp = require('it-length-prefixed')\n// @ts-ignore it-handshake does not export types\nconst handshake = require('it-handshake')\nconst { CircuitRelay } = require('../protocol')\n\n/**\n * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream\n * @typedef {import('../protocol').ICircuitRelay} ICircuitRelay\n */\n\nclass StreamHandler {\n  /**\n   * Create a stream handler for connection\n   *\n   * @class\n   * @param {object} options\n   * @param {MuxedStream} options.stream - A duplex iterable\n   * @param {number} [options.maxLength = 4096] - max bytes length of message\n   */\n  constructor ({ stream, maxLength = 4096 }) {\n    this.stream = stream\n\n    this.shake = handshake(this.stream)\n    // @ts-ignore options are not optional\n    this.decoder = lp.decode.fromReader(this.shake.reader, { maxDataLength: maxLength })\n  }\n\n  /**\n   * Read and decode message\n   *\n   * @async\n   */\n  async read () {\n    const msg = await this.decoder.next()\n    if (msg.value) {\n      const value = CircuitRelay.decode(msg.value.slice())\n      log('read message type', value.type)\n      return value\n    }\n\n    log('read received no value, closing stream')\n    // End the stream, we didn't get data\n    this.close()\n  }\n\n  /**\n   * Encode and write array of buffers\n   *\n   * @param {ICircuitRelay} msg - An unencoded CircuitRelay protobuf message\n   * @returns {void}\n   */\n  write (msg) {\n    log('write message type %s', msg.type)\n    // @ts-ignore lp.encode expects type type 'Buffer | BufferList', not 'Uint8Array'\n    this.shake.write(lp.encode.single(CircuitRelay.encode(msg).finish()))\n  }\n\n  /**\n   * Return the handshake rest stream and invalidate handler\n   *\n   * @returns {*} A duplex iterable\n   */\n  rest () {\n    this.shake.rest()\n    return this.shake.stream\n  }\n\n  /**\n   * @param {ICircuitRelay} msg - An unencoded CircuitRelay protobuf message\n   */\n  end (msg) {\n    this.write(msg)\n    this.close()\n  }\n\n  /**\n   * Close the stream\n   *\n   * @returns {void}\n   */\n  close () {\n    log('closing the stream')\n    this.rest().sink([])\n  }\n}\n\nmodule.exports = StreamHandler\n"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMC,GAAG,GAAGC,MAAM,CAACC,MAAP,CAAcJ,KAAK,CAAC,+BAAD,CAAnB,EAAsD;EAChEK,KAAK,EAAEL,KAAK,CAAC,mCAAD;AADoD,CAAtD,CAAZ;;AAIA,IAAMM,EAAE,GAAGL,OAAO,CAAC,oBAAD,CAAlB,C,CACA;;;AACA,IAAMM,SAAS,GAAGN,OAAO,CAAC,cAAD,CAAzB;;AACA,eAAyBA,OAAO,CAAC,aAAD,CAAhC;AAAA,IAAQO,YAAR,YAAQA,YAAR;AAEA;AACA;AACA;AACA;;;IAEMC,a;EACJ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,6BAA2C;IAAA,IAA5BC,MAA4B,QAA5BA,MAA4B;IAAA,0BAApBC,SAAoB;IAAA,IAApBA,SAAoB,+BAAR,IAAQ;;IAAA;;IACzC,KAAKD,MAAL,GAAcA,MAAd;IAEA,KAAKE,KAAL,GAAaL,SAAS,CAAC,KAAKG,MAAN,CAAtB,CAHyC,CAIzC;;IACA,KAAKG,OAAL,GAAeP,EAAE,CAACQ,MAAH,CAAUC,UAAV,CAAqB,KAAKH,KAAL,CAAWI,MAAhC,EAAwC;MAAEC,aAAa,EAAEN;IAAjB,CAAxC,CAAf;EACD;EAED;AACF;AACA;AACA;AACA;;;;;;6EACE;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACoB,KAAKE,OAAL,CAAaK,IAAb,EADpB;;cAAA;gBACQC,GADR;;gBAAA,KAEMA,GAAG,CAACC,KAFV;kBAAA;kBAAA;gBAAA;;gBAGUA,KAHV,GAGkBZ,YAAY,CAACM,MAAb,CAAoBK,GAAG,CAACC,KAAJ,CAAUC,KAAV,EAApB,CAHlB;gBAIInB,GAAG,CAAC,mBAAD,EAAsBkB,KAAK,CAACE,IAA5B,CAAH;gBAJJ,iCAKWF,KALX;;cAAA;gBAQElB,GAAG,CAAC,wCAAD,CAAH,CARF,CASE;;gBACA,KAAKqB,KAAL;;cAVF;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;IAaA;AACF;AACA;AACA;AACA;AACA;;;;WACE,eAAOJ,GAAP,EAAY;MACVjB,GAAG,CAAC,uBAAD,EAA0BiB,GAAG,CAACG,IAA9B,CAAH,CADU,CAEV;;MACA,KAAKV,KAAL,CAAWY,KAAX,CAAiBlB,EAAE,CAACmB,MAAH,CAAUC,MAAV,CAAiBlB,YAAY,CAACiB,MAAb,CAAoBN,GAApB,EAAyBQ,MAAzB,EAAjB,CAAjB;IACD;IAED;AACF;AACA;AACA;AACA;;;;WACE,gBAAQ;MACN,KAAKf,KAAL,CAAWgB,IAAX;MACA,OAAO,KAAKhB,KAAL,CAAWF,MAAlB;IACD;IAED;AACF;AACA;;;;WACE,aAAKS,GAAL,EAAU;MACR,KAAKK,KAAL,CAAWL,GAAX;MACA,KAAKI,KAAL;IACD;IAED;AACF;AACA;AACA;AACA;;;;WACE,iBAAS;MACPrB,GAAG,CAAC,oBAAD,CAAH;MACA,KAAK0B,IAAL,GAAYC,IAAZ,CAAiB,EAAjB;IACD;;;;;;AAGHC,MAAM,CAACC,OAAP,GAAiBtB,aAAjB"},"metadata":{},"sourceType":"script"}