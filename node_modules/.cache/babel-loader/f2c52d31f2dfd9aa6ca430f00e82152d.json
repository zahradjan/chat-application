{"ast":null,"code":"'use strict';\n\nmodule.exports = (iterable, mapper, opts) => new Promise((resolve, reject) => {\n  opts = Object.assign({\n    concurrency: Infinity\n  }, opts);\n  const concurrency = opts.concurrency;\n\n  if (concurrency < 1) {\n    throw new TypeError('Expected `concurrency` to be a number from 1 and up');\n  }\n\n  const ret = [];\n  const iterator = iterable[Symbol.iterator]();\n  let isRejected = false;\n  let iterableDone = false;\n  let resolvingCount = 0;\n  let currentIdx = 0;\n\n  const next = () => {\n    if (isRejected) {\n      return;\n    }\n\n    const nextItem = iterator.next();\n    const i = currentIdx;\n    currentIdx++;\n\n    if (nextItem.done) {\n      iterableDone = true;\n\n      if (resolvingCount === 0) {\n        resolve(ret);\n      }\n\n      return;\n    }\n\n    resolvingCount++;\n    Promise.resolve(nextItem.value).then(el => mapper(el, i)).then(val => {\n      ret[i] = val;\n      resolvingCount--;\n      next();\n    }, err => {\n      isRejected = true;\n      reject(err);\n    });\n  };\n\n  for (let i = 0; i < concurrency; i++) {\n    next();\n\n    if (iterableDone) {\n      break;\n    }\n  }\n});","map":{"version":3,"names":["module","exports","iterable","mapper","opts","Promise","resolve","reject","Object","assign","concurrency","Infinity","TypeError","ret","iterator","Symbol","isRejected","iterableDone","resolvingCount","currentIdx","next","nextItem","i","done","value","then","el","val","err"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/orbit-db-docstore/node_modules/p-map/index.js"],"sourcesContent":["'use strict';\nmodule.exports = (iterable, mapper, opts) => new Promise((resolve, reject) => {\n\topts = Object.assign({\n\t\tconcurrency: Infinity\n\t}, opts);\n\n\tconst concurrency = opts.concurrency;\n\n\tif (concurrency < 1) {\n\t\tthrow new TypeError('Expected `concurrency` to be a number from 1 and up');\n\t}\n\n\tconst ret = [];\n\tconst iterator = iterable[Symbol.iterator]();\n\tlet isRejected = false;\n\tlet iterableDone = false;\n\tlet resolvingCount = 0;\n\tlet currentIdx = 0;\n\n\tconst next = () => {\n\t\tif (isRejected) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst nextItem = iterator.next();\n\t\tconst i = currentIdx;\n\t\tcurrentIdx++;\n\n\t\tif (nextItem.done) {\n\t\t\titerableDone = true;\n\n\t\t\tif (resolvingCount === 0) {\n\t\t\t\tresolve(ret);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tresolvingCount++;\n\n\t\tPromise.resolve(nextItem.value)\n\t\t\t.then(el => mapper(el, i))\n\t\t\t.then(\n\t\t\t\tval => {\n\t\t\t\t\tret[i] = val;\n\t\t\t\t\tresolvingCount--;\n\t\t\t\t\tnext();\n\t\t\t\t},\n\t\t\t\terr => {\n\t\t\t\t\tisRejected = true;\n\t\t\t\t\treject(err);\n\t\t\t\t}\n\t\t\t);\n\t};\n\n\tfor (let i = 0; i < concurrency; i++) {\n\t\tnext();\n\n\t\tif (iterableDone) {\n\t\t\tbreak;\n\t\t}\n\t}\n});\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,OAAP,GAAiB,CAACC,QAAD,EAAWC,MAAX,EAAmBC,IAAnB,KAA4B,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;EAC7EH,IAAI,GAAGI,MAAM,CAACC,MAAP,CAAc;IACpBC,WAAW,EAAEC;EADO,CAAd,EAEJP,IAFI,CAAP;EAIA,MAAMM,WAAW,GAAGN,IAAI,CAACM,WAAzB;;EAEA,IAAIA,WAAW,GAAG,CAAlB,EAAqB;IACpB,MAAM,IAAIE,SAAJ,CAAc,qDAAd,CAAN;EACA;;EAED,MAAMC,GAAG,GAAG,EAAZ;EACA,MAAMC,QAAQ,GAAGZ,QAAQ,CAACa,MAAM,CAACD,QAAR,CAAR,EAAjB;EACA,IAAIE,UAAU,GAAG,KAAjB;EACA,IAAIC,YAAY,GAAG,KAAnB;EACA,IAAIC,cAAc,GAAG,CAArB;EACA,IAAIC,UAAU,GAAG,CAAjB;;EAEA,MAAMC,IAAI,GAAG,MAAM;IAClB,IAAIJ,UAAJ,EAAgB;MACf;IACA;;IAED,MAAMK,QAAQ,GAAGP,QAAQ,CAACM,IAAT,EAAjB;IACA,MAAME,CAAC,GAAGH,UAAV;IACAA,UAAU;;IAEV,IAAIE,QAAQ,CAACE,IAAb,EAAmB;MAClBN,YAAY,GAAG,IAAf;;MAEA,IAAIC,cAAc,KAAK,CAAvB,EAA0B;QACzBZ,OAAO,CAACO,GAAD,CAAP;MACA;;MAED;IACA;;IAEDK,cAAc;IAEdb,OAAO,CAACC,OAAR,CAAgBe,QAAQ,CAACG,KAAzB,EACEC,IADF,CACOC,EAAE,IAAIvB,MAAM,CAACuB,EAAD,EAAKJ,CAAL,CADnB,EAEEG,IAFF,CAGEE,GAAG,IAAI;MACNd,GAAG,CAACS,CAAD,CAAH,GAASK,GAAT;MACAT,cAAc;MACdE,IAAI;IACJ,CAPH,EAQEQ,GAAG,IAAI;MACNZ,UAAU,GAAG,IAAb;MACAT,MAAM,CAACqB,GAAD,CAAN;IACA,CAXH;EAaA,CAlCD;;EAoCA,KAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,WAApB,EAAiCY,CAAC,EAAlC,EAAsC;IACrCF,IAAI;;IAEJ,IAAIH,YAAJ,EAAkB;MACjB;IACA;EACD;AACD,CA7D4C,CAA7C"},"metadata":{},"sourceType":"script"}