{"ast":null,"code":"'use strict';\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('../').PeerData} PeerData\n */\n\n/**\n * A list of unique peers.\n */\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar PeerList = /*#__PURE__*/function () {\n  function PeerList() {\n    _classCallCheck(this, PeerList);\n\n    /** @type {PeerData[]} */\n    this.list = [];\n  }\n  /**\n   * Add a new peer. Returns `true` if it was a new one\n   *\n   * @param {PeerData} peerData\n   */\n\n\n  _createClass(PeerList, [{\n    key: \"push\",\n    value: function push(peerData) {\n      if (!this.has(peerData.id)) {\n        this.list.push(peerData);\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Check if this PeerData is already in here.\n     *\n     * @param {PeerId} peerId\n     */\n\n  }, {\n    key: \"has\",\n    value: function has(peerId) {\n      var match = this.list.find(function (i) {\n        return i.id.equals(peerId);\n      });\n      return Boolean(match);\n    }\n    /**\n     * Get the list as an array.\n     */\n\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      return this.list.slice();\n    }\n    /**\n     * Remove the last element\n     */\n\n  }, {\n    key: \"pop\",\n    value: function pop() {\n      return this.list.pop();\n    }\n    /**\n     * The length of the list\n     */\n\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.list.length;\n    }\n  }]);\n\n  return PeerList;\n}();\n\nmodule.exports = PeerList;","map":{"version":3,"names":["PeerList","list","peerData","has","id","push","peerId","match","find","i","equals","Boolean","slice","pop","length","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-kad-dht/src/peer-list/index.js"],"sourcesContent":["'use strict'\n\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('../').PeerData} PeerData\n */\n\n/**\n * A list of unique peers.\n */\nclass PeerList {\n  constructor () {\n    /** @type {PeerData[]} */\n    this.list = []\n  }\n\n  /**\n   * Add a new peer. Returns `true` if it was a new one\n   *\n   * @param {PeerData} peerData\n   */\n  push (peerData) {\n    if (!this.has(peerData.id)) {\n      this.list.push(peerData)\n\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Check if this PeerData is already in here.\n   *\n   * @param {PeerId} peerId\n   */\n  has (peerId) {\n    const match = this.list.find((i) => i.id.equals(peerId))\n    return Boolean(match)\n  }\n\n  /**\n   * Get the list as an array.\n   */\n  toArray () {\n    return this.list.slice()\n  }\n\n  /**\n   * Remove the last element\n   */\n  pop () {\n    return this.list.pop()\n  }\n\n  /**\n   * The length of the list\n   */\n  get length () {\n    return this.list.length\n  }\n}\n\nmodule.exports = PeerList\n"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;IACMA,Q;EACJ,oBAAe;IAAA;;IACb;IACA,KAAKC,IAAL,GAAY,EAAZ;EACD;EAED;AACF;AACA;AACA;AACA;;;;;WACE,cAAMC,QAAN,EAAgB;MACd,IAAI,CAAC,KAAKC,GAAL,CAASD,QAAQ,CAACE,EAAlB,CAAL,EAA4B;QAC1B,KAAKH,IAAL,CAAUI,IAAV,CAAeH,QAAf;QAEA,OAAO,IAAP;MACD;;MAED,OAAO,KAAP;IACD;IAED;AACF;AACA;AACA;AACA;;;;WACE,aAAKI,MAAL,EAAa;MACX,IAAMC,KAAK,GAAG,KAAKN,IAAL,CAAUO,IAAV,CAAe,UAACC,CAAD;QAAA,OAAOA,CAAC,CAACL,EAAF,CAAKM,MAAL,CAAYJ,MAAZ,CAAP;MAAA,CAAf,CAAd;MACA,OAAOK,OAAO,CAACJ,KAAD,CAAd;IACD;IAED;AACF;AACA;;;;WACE,mBAAW;MACT,OAAO,KAAKN,IAAL,CAAUW,KAAV,EAAP;IACD;IAED;AACF;AACA;;;;WACE,eAAO;MACL,OAAO,KAAKX,IAAL,CAAUY,GAAV,EAAP;IACD;IAED;AACF;AACA;;;;SACE,eAAc;MACZ,OAAO,KAAKZ,IAAL,CAAUa,MAAjB;IACD;;;;;;AAGHC,MAAM,CAACC,OAAP,GAAiBhB,QAAjB"},"metadata":{},"sourceType":"script"}