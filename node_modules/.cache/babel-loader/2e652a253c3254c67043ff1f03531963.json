{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _awaitAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _wrapAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nvar _asyncIterator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nvar abortSignal = require('../lib/abort-signal');\n\nvar multipartRequest = require('../lib/multipart-request');\n\nvar _require = require('native-abort-controller'),\n    AbortController = _require.AbortController;\n\nvar _require2 = require('multiformats/cid'),\n    CID = _require2.CID;\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {DAGAPI[\"import\"]}\n   */\n  function dagImport(_x) {\n    return _dagImport.apply(this, arguments);\n  }\n\n  function _dagImport() {\n    _dagImport = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(source) {\n      var options,\n          controller,\n          signal,\n          _yield$_awaitAsyncGen,\n          headers,\n          body,\n          res,\n          _iteratorAbruptCompletion,\n          _didIteratorError,\n          _iteratorError,\n          _iterator,\n          _step,\n          Root,\n          Cid,\n          PinErrorMsg,\n          _args = arguments;\n\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              controller = new AbortController();\n              signal = abortSignal(controller.signal, options.signal);\n              _context.next = 5;\n              return _awaitAsyncGenerator(multipartRequest(source, controller, options.headers));\n\n            case 5:\n              _yield$_awaitAsyncGen = _context.sent;\n              headers = _yield$_awaitAsyncGen.headers;\n              body = _yield$_awaitAsyncGen.body;\n              _context.next = 10;\n              return _awaitAsyncGenerator(api.post('dag/import', {\n                signal: signal,\n                headers: headers,\n                body: body,\n                searchParams: toUrlSearchParams({\n                  'pin-roots': options.pinRoots\n                })\n              }));\n\n            case 10:\n              res = _context.sent;\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 13;\n              _iterator = _asyncIterator(res.ndjson());\n\n            case 15:\n              _context.next = 17;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 17:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 26;\n                break;\n              }\n\n              Root = _step.value.Root;\n\n              if (!(Root !== undefined)) {\n                _context.next = 23;\n                break;\n              }\n\n              Cid = Root.Cid['/'], PinErrorMsg = Root.PinErrorMsg;\n              _context.next = 23;\n              return {\n                root: {\n                  cid: CID.parse(Cid),\n                  pinErrorMsg: PinErrorMsg\n                }\n              };\n\n            case 23:\n              _iteratorAbruptCompletion = false;\n              _context.next = 15;\n              break;\n\n            case 26:\n              _context.next = 32;\n              break;\n\n            case 28:\n              _context.prev = 28;\n              _context.t0 = _context[\"catch\"](13);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n\n            case 32:\n              _context.prev = 32;\n              _context.prev = 33;\n\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 37;\n                break;\n              }\n\n              _context.next = 37;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 37:\n              _context.prev = 37;\n\n              if (!_didIteratorError) {\n                _context.next = 40;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 40:\n              return _context.finish(37);\n\n            case 41:\n              return _context.finish(32);\n\n            case 42:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[13, 28, 32, 42], [33,, 37, 41]]);\n    }));\n    return _dagImport.apply(this, arguments);\n  }\n\n  return dagImport;\n});","map":{"version":3,"names":["configure","require","toUrlSearchParams","abortSignal","multipartRequest","AbortController","CID","module","exports","api","dagImport","source","options","controller","signal","headers","body","post","searchParams","pinRoots","res","ndjson","Root","undefined","Cid","PinErrorMsg","root","cid","parse","pinErrorMsg"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-http-client/src/dag/import.js"],"sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst abortSignal = require('../lib/abort-signal')\nconst multipartRequest = require('../lib/multipart-request')\nconst { AbortController } = require('native-abort-controller')\nconst { CID } = require('multiformats/cid')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DAGAPI[\"import\"]}\n   */\n  async function * dagImport (source, options = {}) {\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n    const { headers, body } = await multipartRequest(source, controller, options.headers)\n\n    const res = await api.post('dag/import', {\n      signal,\n      headers,\n      body,\n      searchParams: toUrlSearchParams({ 'pin-roots': options.pinRoots })\n    })\n\n    for await (const { Root } of res.ndjson()) {\n      if (Root !== undefined) {\n        const { Cid: { '/': Cid }, PinErrorMsg } = Root\n\n        yield {\n          root: {\n            cid: CID.parse(Cid),\n            pinErrorMsg: PinErrorMsg\n          }\n        }\n      }\n    }\n  }\n\n  return dagImport\n})\n"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMC,iBAAiB,GAAGD,OAAO,CAAC,6BAAD,CAAjC;;AACA,IAAME,WAAW,GAAGF,OAAO,CAAC,qBAAD,CAA3B;;AACA,IAAMG,gBAAgB,GAAGH,OAAO,CAAC,0BAAD,CAAhC;;AACA,eAA4BA,OAAO,CAAC,yBAAD,CAAnC;AAAA,IAAQI,eAAR,YAAQA,eAAR;;AACA,gBAAgBJ,OAAO,CAAC,kBAAD,CAAvB;AAAA,IAAQK,GAAR,aAAQA,GAAR;AAEA;AACA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiBR,SAAS,CAAC,UAAAS,GAAG,EAAI;EAChC;AACF;AACA;EAHkC,SAIfC,SAJe;IAAA;EAAA;;EAAA;IAAA,0EAIhC,iBAA4BC,MAA5B;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;;MAAA;QAAA;UAAA;YAAA;cAAoCC,OAApC,2DAA8C,EAA9C;cACQC,UADR,GACqB,IAAIR,eAAJ,EADrB;cAEQS,MAFR,GAEiBX,WAAW,CAACU,UAAU,CAACC,MAAZ,EAAoBF,OAAO,CAACE,MAA5B,CAF5B;cAAA;cAAA,4BAGkCV,gBAAgB,CAACO,MAAD,EAASE,UAAT,EAAqBD,OAAO,CAACG,OAA7B,CAHlD;;YAAA;cAAA;cAGUA,OAHV,yBAGUA,OAHV;cAGmBC,IAHnB,yBAGmBA,IAHnB;cAAA;cAAA,4BAKoBP,GAAG,CAACQ,IAAJ,CAAS,YAAT,EAAuB;gBACvCH,MAAM,EAANA,MADuC;gBAEvCC,OAAO,EAAPA,OAFuC;gBAGvCC,IAAI,EAAJA,IAHuC;gBAIvCE,YAAY,EAAEhB,iBAAiB,CAAC;kBAAE,aAAaU,OAAO,CAACO;gBAAvB,CAAD;cAJQ,CAAvB,CALpB;;YAAA;cAKQC,GALR;cAAA;cAAA;cAAA;cAAA,2BAY+BA,GAAG,CAACC,MAAJ,EAZ/B;;YAAA;cAAA;cAAA;;YAAA;cAAA;gBAAA;gBAAA;cAAA;;cAYqBC,IAZrB,eAYqBA,IAZrB;;cAAA,MAaQA,IAAI,KAAKC,SAbjB;gBAAA;gBAAA;cAAA;;cAc0BC,GAd1B,GAciDF,IAdjD,CAccE,GAdd,CAcqB,GAdrB,GAciCC,WAdjC,GAciDH,IAdjD,CAciCG,WAdjC;cAAA;cAgBM,OAAM;gBACJC,IAAI,EAAE;kBACJC,GAAG,EAAErB,GAAG,CAACsB,KAAJ,CAAUJ,GAAV,CADD;kBAEJK,WAAW,EAAEJ;gBAFT;cADF,CAAN;;YAhBN;cAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;;cAAA;gBAAA;gBAAA;cAAA;;cAAA;cAAA;;YAAA;cAAA;;cAAA;gBAAA;gBAAA;cAAA;;cAAA;;YAAA;cAAA;;YAAA;cAAA;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAJgC;IAAA;EAAA;;EA8BhC,OAAOf,SAAP;AACD,CA/ByB,CAA1B"},"metadata":{},"sourceType":"script"}