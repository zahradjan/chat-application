{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar _require2 = require('ipfs-unixfs'),\n    UnixFS = _require2.UnixFS;\n\nvar dagPb = require('@ipld/dag-pb');\n\nvar _require3 = require('multiformats/hashes/sha2'),\n    sha256 = _require3.sha256;\n\nvar log = require('debug')('ipfs:mfs:utils:with-mfs-root');\n\nvar errCode = require('err-code');\n\nvar _require4 = require('../../../utils'),\n    MFS_ROOT_KEY = _require4.MFS_ROOT_KEY;\n/**\n * @typedef {import('../').MfsContext} MfsContext\n */\n\n/**\n * @param {MfsContext} context\n * @param {import('ipfs-core-types/src/utils').AbortOptions} [options]\n */\n\n\nvar loadMfsRoot = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(context, options) {\n    var cid, buf, _buf, hash;\n\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(options && options.signal && options.signal.aborted)) {\n              _context.next = 2;\n              break;\n            }\n\n            throw errCode(new Error('Request aborted'), 'ERR_ABORTED', {\n              name: 'Aborted'\n            });\n\n          case 2:\n            _context.next = 4;\n            return context.repo.datastore.open();\n\n          case 4:\n            _context.prev = 4;\n            _context.next = 7;\n            return context.repo.datastore.get(MFS_ROOT_KEY);\n\n          case 7:\n            buf = _context.sent;\n            cid = CID.decode(buf);\n            _context.next = 27;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](4);\n\n            if (!(_context.t0.code !== 'ERR_NOT_FOUND')) {\n              _context.next = 15;\n              break;\n            }\n\n            throw _context.t0;\n\n          case 15:\n            log('Creating new MFS root');\n            _buf = dagPb.encode({\n              Data: new UnixFS({\n                type: 'directory'\n              }).marshal(),\n              Links: []\n            });\n            _context.next = 19;\n            return sha256.digest(_buf);\n\n          case 19:\n            hash = _context.sent;\n            cid = CID.createV0(hash);\n            _context.next = 23;\n            return context.repo.blocks.put(cid, _buf);\n\n          case 23:\n            if (!(options && options.signal && options.signal.aborted)) {\n              _context.next = 25;\n              break;\n            }\n\n            throw errCode(new Error('Request aborted'), 'ERR_ABORTED', {\n              name: 'Aborted'\n            });\n\n          case 25:\n            _context.next = 27;\n            return context.repo.datastore.put(MFS_ROOT_KEY, cid.bytes);\n\n          case 27:\n            log(\"Loaded MFS root /ipfs/\".concat(cid));\n            return _context.abrupt(\"return\", cid);\n\n          case 29:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[4, 11]]);\n  }));\n\n  return function loadMfsRoot(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = loadMfsRoot;","map":{"version":3,"names":["require","CID","UnixFS","dagPb","sha256","log","errCode","MFS_ROOT_KEY","loadMfsRoot","context","options","signal","aborted","Error","name","repo","datastore","open","get","buf","cid","decode","code","encode","Data","type","marshal","Links","digest","hash","createV0","blocks","put","bytes","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/files/utils/with-mfs-root.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst { UnixFS } = require('ipfs-unixfs')\nconst dagPb = require('@ipld/dag-pb')\nconst { sha256 } = require('multiformats/hashes/sha2')\nconst log = require('debug')('ipfs:mfs:utils:with-mfs-root')\nconst errCode = require('err-code')\n\nconst {\n  MFS_ROOT_KEY\n} = require('../../../utils')\n\n/**\n * @typedef {import('../').MfsContext} MfsContext\n */\n\n/**\n * @param {MfsContext} context\n * @param {import('ipfs-core-types/src/utils').AbortOptions} [options]\n */\nconst loadMfsRoot = async (context, options) => {\n  if (options && options.signal && options.signal.aborted) {\n    throw errCode(new Error('Request aborted'), 'ERR_ABORTED', { name: 'Aborted' })\n  }\n\n  // Open the repo if it's been closed\n  await context.repo.datastore.open()\n\n  // Load the MFS root CID\n  let cid\n\n  try {\n    const buf = await context.repo.datastore.get(MFS_ROOT_KEY)\n\n    cid = CID.decode(buf)\n  } catch (err) {\n    if (err.code !== 'ERR_NOT_FOUND') {\n      throw err\n    }\n\n    log('Creating new MFS root')\n    const buf = dagPb.encode({\n      Data: new UnixFS({ type: 'directory' }).marshal(),\n      Links: []\n    })\n    const hash = await sha256.digest(buf)\n    cid = CID.createV0(hash)\n    await context.repo.blocks.put(cid, buf)\n\n    if (options && options.signal && options.signal.aborted) {\n      throw errCode(new Error('Request aborted'), 'ERR_ABORTED', { name: 'Aborted' })\n    }\n\n    await context.repo.datastore.put(MFS_ROOT_KEY, cid.bytes)\n  }\n\n  log(`Loaded MFS root /ipfs/${cid}`)\n\n  return cid\n}\n\nmodule.exports = loadMfsRoot\n"],"mappings":"AAAA;;;;;;AAEA,eAAgBA,OAAO,CAAC,kBAAD,CAAvB;AAAA,IAAQC,GAAR,YAAQA,GAAR;;AACA,gBAAmBD,OAAO,CAAC,aAAD,CAA1B;AAAA,IAAQE,MAAR,aAAQA,MAAR;;AACA,IAAMC,KAAK,GAAGH,OAAO,CAAC,cAAD,CAArB;;AACA,gBAAmBA,OAAO,CAAC,0BAAD,CAA1B;AAAA,IAAQI,MAAR,aAAQA,MAAR;;AACA,IAAMC,GAAG,GAAGL,OAAO,CAAC,OAAD,CAAP,CAAiB,8BAAjB,CAAZ;;AACA,IAAMM,OAAO,GAAGN,OAAO,CAAC,UAAD,CAAvB;;AAEA,gBAEIA,OAAO,CAAC,gBAAD,CAFX;AAAA,IACEO,YADF,aACEA,YADF;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AACA,IAAMC,WAAW;EAAA,sEAAG,iBAAOC,OAAP,EAAgBC,OAAhB;IAAA;;IAAA;MAAA;QAAA;UAAA;YAAA,MACdA,OAAO,IAAIA,OAAO,CAACC,MAAnB,IAA6BD,OAAO,CAACC,MAAR,CAAeC,OAD9B;cAAA;cAAA;YAAA;;YAAA,MAEVN,OAAO,CAAC,IAAIO,KAAJ,CAAU,iBAAV,CAAD,EAA+B,aAA/B,EAA8C;cAAEC,IAAI,EAAE;YAAR,CAA9C,CAFG;;UAAA;YAAA;YAAA,OAMZL,OAAO,CAACM,IAAR,CAAaC,SAAb,CAAuBC,IAAvB,EANY;;UAAA;YAAA;YAAA;YAAA,OAYER,OAAO,CAACM,IAAR,CAAaC,SAAb,CAAuBE,GAAvB,CAA2BX,YAA3B,CAZF;;UAAA;YAYVY,GAZU;YAchBC,GAAG,GAAGnB,GAAG,CAACoB,MAAJ,CAAWF,GAAX,CAAN;YAdgB;YAAA;;UAAA;YAAA;YAAA;;YAAA,MAgBZ,YAAIG,IAAJ,KAAa,eAhBD;cAAA;cAAA;YAAA;;YAAA;;UAAA;YAoBhBjB,GAAG,CAAC,uBAAD,CAAH;YACMc,IArBU,GAqBJhB,KAAK,CAACoB,MAAN,CAAa;cACvBC,IAAI,EAAE,IAAItB,MAAJ,CAAW;gBAAEuB,IAAI,EAAE;cAAR,CAAX,EAAkCC,OAAlC,EADiB;cAEvBC,KAAK,EAAE;YAFgB,CAAb,CArBI;YAAA;YAAA,OAyBGvB,MAAM,CAACwB,MAAP,CAAcT,IAAd,CAzBH;;UAAA;YAyBVU,IAzBU;YA0BhBT,GAAG,GAAGnB,GAAG,CAAC6B,QAAJ,CAAaD,IAAb,CAAN;YA1BgB;YAAA,OA2BVpB,OAAO,CAACM,IAAR,CAAagB,MAAb,CAAoBC,GAApB,CAAwBZ,GAAxB,EAA6BD,IAA7B,CA3BU;;UAAA;YAAA,MA6BZT,OAAO,IAAIA,OAAO,CAACC,MAAnB,IAA6BD,OAAO,CAACC,MAAR,CAAeC,OA7BhC;cAAA;cAAA;YAAA;;YAAA,MA8BRN,OAAO,CAAC,IAAIO,KAAJ,CAAU,iBAAV,CAAD,EAA+B,aAA/B,EAA8C;cAAEC,IAAI,EAAE;YAAR,CAA9C,CA9BC;;UAAA;YAAA;YAAA,OAiCVL,OAAO,CAACM,IAAR,CAAaC,SAAb,CAAuBgB,GAAvB,CAA2BzB,YAA3B,EAAyCa,GAAG,CAACa,KAA7C,CAjCU;;UAAA;YAoClB5B,GAAG,iCAA0Be,GAA1B,EAAH;YApCkB,iCAsCXA,GAtCW;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAH;;EAAA,gBAAXZ,WAAW;IAAA;EAAA;AAAA,GAAjB;;AAyCA0B,MAAM,CAACC,OAAP,GAAiB3B,WAAjB"},"metadata":{},"sourceType":"script"}