{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst log = Object.assign(debug('libp2p:peer-store:proto-book'), {\n  error: debug('libp2p:peer-store:proto-book:err')\n});\n\nconst errcode = require('err-code');\n\nconst {\n  equals: uint8ArrayEquals\n} = require('uint8arrays/equals');\n\nconst PeerId = require('peer-id');\n\nconst Book = require('./book');\n\nconst {\n  codes: {\n    ERR_INVALID_PARAMETERS\n  }\n} = require('../errors');\n/**\n * @typedef {import('./')} PeerStore\n */\n\n/**\n * @extends {Book}\n *\n * @fires MetadataBook#change:metadata\n */\n\n\nclass MetadataBook extends Book {\n  /**\n   * The MetadataBook is responsible for keeping the known supported\n   * protocols of a peer.\n   *\n   * @class\n   * @param {PeerStore} peerStore\n   */\n  constructor(peerStore) {\n    /**\n     * PeerStore Event emitter, used by the MetadataBook to emit:\n     * \"change:metadata\" - emitted when the known metadata of a peer change.\n     */\n    super({\n      peerStore,\n      eventName: 'change:metadata',\n      eventProperty: 'metadata'\n    });\n    /**\n     * Map known peers to their known protocols.\n     *\n     * @type {Map<string, Map<string, Uint8Array>>}\n     */\n\n    this.data = new Map();\n  }\n  /**\n   * Set metadata key and value of a provided peer.\n   *\n   * @override\n   * @param {PeerId} peerId\n   * @param {string} key - metadata key\n   * @param {Uint8Array} value - metadata value\n   * @returns {MetadataBook}\n   */\n  // @ts-ignore override with more then the parameters expected in Book\n\n\n  set(peerId, key, value) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data');\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n    }\n\n    if (typeof key !== 'string' || !(value instanceof Uint8Array)) {\n      log.error('valid key and value must be provided to store data');\n      throw errcode(new Error('valid key and value must be provided'), ERR_INVALID_PARAMETERS);\n    }\n\n    this._setValue(peerId, key, value);\n\n    return this;\n  }\n  /**\n   * Set data into the datastructure\n   *\n   * @override\n   * @param {PeerId} peerId\n   * @param {string} key\n   * @param {Uint8Array} value\n   */\n\n\n  _setValue(peerId, key, value) {\n    let {\n      emit = true\n    } = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    const id = peerId.toB58String();\n    const rec = this.data.get(id) || new Map();\n    const recMap = rec.get(key); // Already exists and is equal\n\n    if (recMap && uint8ArrayEquals(value, recMap)) {\n      log(`the metadata provided to store is equal to the already stored for ${id} on ${key}`);\n      return;\n    }\n\n    rec.set(key, value);\n    this.data.set(id, rec);\n    emit && this._emit(peerId, key);\n  }\n  /**\n   * Get the known data of a provided peer.\n   *\n   * @param {PeerId} peerId\n   * @returns {Map<string, Uint8Array>|undefined}\n   */\n\n\n  get(peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n    }\n\n    return this.data.get(peerId.toB58String());\n  }\n  /**\n   * Get specific metadata value, if it exists\n   *\n   * @param {PeerId} peerId\n   * @param {string} key\n   * @returns {Uint8Array | undefined}\n   */\n\n\n  getValue(peerId, key) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n    }\n\n    const rec = this.data.get(peerId.toB58String());\n    return rec && rec.get(key);\n  }\n  /**\n   * Deletes the provided peer from the book.\n   *\n   * @param {PeerId} peerId\n   * @returns {boolean}\n   */\n\n\n  delete(peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n    }\n\n    if (!this.data.delete(peerId.toB58String())) {\n      return false;\n    }\n\n    this._emit(peerId);\n\n    return true;\n  }\n  /**\n   * Deletes the provided peer metadata key from the book.\n   *\n   * @param {PeerId} peerId\n   * @param {string} key\n   * @returns {boolean}\n   */\n\n\n  deleteValue(peerId, key) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n    }\n\n    const rec = this.data.get(peerId.toB58String());\n\n    if (!rec || !rec.delete(key)) {\n      return false;\n    }\n\n    this._emit(peerId, key);\n\n    return true;\n  }\n\n}\n\nmodule.exports = MetadataBook;","map":{"version":3,"names":["debug","require","log","Object","assign","error","errcode","equals","uint8ArrayEquals","PeerId","Book","codes","ERR_INVALID_PARAMETERS","MetadataBook","constructor","peerStore","eventName","eventProperty","data","Map","set","peerId","key","value","isPeerId","Error","Uint8Array","_setValue","emit","id","toB58String","rec","get","recMap","_emit","getValue","delete","deleteValue","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p/src/peer-store/metadata-book.js"],"sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = Object.assign(debug('libp2p:peer-store:proto-book'), {\n  error: debug('libp2p:peer-store:proto-book:err')\n})\nconst errcode = require('err-code')\nconst { equals: uint8ArrayEquals } = require('uint8arrays/equals')\n\nconst PeerId = require('peer-id')\n\nconst Book = require('./book')\n\nconst {\n  codes: { ERR_INVALID_PARAMETERS }\n} = require('../errors')\n\n/**\n * @typedef {import('./')} PeerStore\n */\n\n/**\n * @extends {Book}\n *\n * @fires MetadataBook#change:metadata\n */\nclass MetadataBook extends Book {\n  /**\n   * The MetadataBook is responsible for keeping the known supported\n   * protocols of a peer.\n   *\n   * @class\n   * @param {PeerStore} peerStore\n   */\n  constructor (peerStore) {\n    /**\n     * PeerStore Event emitter, used by the MetadataBook to emit:\n     * \"change:metadata\" - emitted when the known metadata of a peer change.\n     */\n    super({\n      peerStore,\n      eventName: 'change:metadata',\n      eventProperty: 'metadata'\n    })\n\n    /**\n     * Map known peers to their known protocols.\n     *\n     * @type {Map<string, Map<string, Uint8Array>>}\n     */\n    this.data = new Map()\n  }\n\n  /**\n   * Set metadata key and value of a provided peer.\n   *\n   * @override\n   * @param {PeerId} peerId\n   * @param {string} key - metadata key\n   * @param {Uint8Array} value - metadata value\n   * @returns {MetadataBook}\n   */\n  // @ts-ignore override with more then the parameters expected in Book\n  set (peerId, key, value) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data')\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    if (typeof key !== 'string' || !(value instanceof Uint8Array)) {\n      log.error('valid key and value must be provided to store data')\n      throw errcode(new Error('valid key and value must be provided'), ERR_INVALID_PARAMETERS)\n    }\n\n    this._setValue(peerId, key, value)\n\n    return this\n  }\n\n  /**\n   * Set data into the datastructure\n   *\n   * @override\n   * @param {PeerId} peerId\n   * @param {string} key\n   * @param {Uint8Array} value\n   */\n  _setValue (peerId, key, value, { emit = true } = {}) {\n    const id = peerId.toB58String()\n    const rec = this.data.get(id) || new Map()\n    const recMap = rec.get(key)\n\n    // Already exists and is equal\n    if (recMap && uint8ArrayEquals(value, recMap)) {\n      log(`the metadata provided to store is equal to the already stored for ${id} on ${key}`)\n      return\n    }\n\n    rec.set(key, value)\n    this.data.set(id, rec)\n\n    emit && this._emit(peerId, key)\n  }\n\n  /**\n   * Get the known data of a provided peer.\n   *\n   * @param {PeerId} peerId\n   * @returns {Map<string, Uint8Array>|undefined}\n   */\n  get (peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    return this.data.get(peerId.toB58String())\n  }\n\n  /**\n   * Get specific metadata value, if it exists\n   *\n   * @param {PeerId} peerId\n   * @param {string} key\n   * @returns {Uint8Array | undefined}\n   */\n  getValue (peerId, key) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    const rec = this.data.get(peerId.toB58String())\n    return rec && rec.get(key)\n  }\n\n  /**\n   * Deletes the provided peer from the book.\n   *\n   * @param {PeerId} peerId\n   * @returns {boolean}\n   */\n  delete (peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    if (!this.data.delete(peerId.toB58String())) {\n      return false\n    }\n\n    this._emit(peerId)\n\n    return true\n  }\n\n  /**\n   * Deletes the provided peer metadata key from the book.\n   *\n   * @param {PeerId} peerId\n   * @param {string} key\n   * @returns {boolean}\n   */\n  deleteValue (peerId, key) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    const rec = this.data.get(peerId.toB58String())\n\n    if (!rec || !rec.delete(key)) {\n      return false\n    }\n\n    this._emit(peerId, key)\n\n    return true\n  }\n}\n\nmodule.exports = MetadataBook\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}