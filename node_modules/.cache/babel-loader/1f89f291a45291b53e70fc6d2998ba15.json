{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar log = require('debug')('ipfs:repo:migrator:repo:init');\n\nvar _require = require('../utils'),\n    CONFIG_KEY = _require.CONFIG_KEY,\n    VERSION_KEY = _require.VERSION_KEY;\n\nvar _require2 = require('../errors'),\n    MissingRepoOptionsError = _require2.MissingRepoOptionsError;\n/**\n * @param {import('../types').Backends} backends\n */\n\n\nfunction isRepoInitialized(_x) {\n  return _isRepoInitialized.apply(this, arguments);\n}\n\nfunction _isRepoInitialized() {\n  _isRepoInitialized = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(backends) {\n    var root, versionCheck, configCheck;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (backends) {\n              _context.next = 2;\n              break;\n            }\n\n            throw new MissingRepoOptionsError('Please pass repo options when trying to open a repo');\n\n          case 2:\n            root = backends.root;\n            _context.prev = 3;\n            _context.next = 6;\n            return root.open();\n\n          case 6:\n            _context.next = 8;\n            return root.has(VERSION_KEY);\n\n          case 8:\n            versionCheck = _context.sent;\n            _context.next = 11;\n            return root.has(CONFIG_KEY);\n\n          case 11:\n            configCheck = _context.sent;\n\n            if (!(!versionCheck || !configCheck)) {\n              _context.next = 16;\n              break;\n            }\n\n            log(\"Version entry present: \".concat(versionCheck));\n            log(\"Config entry present: \".concat(configCheck));\n            return _context.abrupt(\"return\", false);\n\n          case 16:\n            return _context.abrupt(\"return\", true);\n\n          case 19:\n            _context.prev = 19;\n            _context.t0 = _context[\"catch\"](3);\n            log('While checking if repo is initialized error was thrown: ' + _context.t0.message);\n            return _context.abrupt(\"return\", false);\n\n          case 23:\n            _context.prev = 23;\n\n            if (!(root !== undefined)) {\n              _context.next = 32;\n              break;\n            }\n\n            _context.prev = 25;\n            _context.next = 28;\n            return root.close();\n\n          case 28:\n            _context.next = 32;\n            break;\n\n          case 30:\n            _context.prev = 30;\n            _context.t1 = _context[\"catch\"](25);\n\n          case 32:\n            return _context.finish(23);\n\n          case 33:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[3, 19, 23, 33], [25, 30]]);\n  }));\n  return _isRepoInitialized.apply(this, arguments);\n}\n\nmodule.exports = {\n  isRepoInitialized: isRepoInitialized\n};","map":{"version":3,"names":["log","require","CONFIG_KEY","VERSION_KEY","MissingRepoOptionsError","isRepoInitialized","backends","root","open","has","versionCheck","configCheck","message","undefined","close","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-repo-migrations/src/repo/init.js"],"sourcesContent":["'use strict'\n\nconst log = require('debug')('ipfs:repo:migrator:repo:init')\nconst { CONFIG_KEY, VERSION_KEY } = require('../utils')\nconst { MissingRepoOptionsError } = require('../errors')\n\n/**\n * @param {import('../types').Backends} backends\n */\nasync function isRepoInitialized (backends) {\n  if (!backends) {\n    throw new MissingRepoOptionsError('Please pass repo options when trying to open a repo')\n  }\n\n  const root = backends.root\n\n  try {\n    await root.open()\n    const versionCheck = await root.has(VERSION_KEY)\n    const configCheck = await root.has(CONFIG_KEY)\n    if (!versionCheck || !configCheck) {\n      log(`Version entry present: ${versionCheck}`)\n      log(`Config entry present: ${configCheck}`)\n      return false\n    }\n\n    return true\n  } catch (e) {\n    log('While checking if repo is initialized error was thrown: ' + e.message)\n    return false\n  } finally {\n    if (root !== undefined) {\n      try {\n        await root.close()\n      } catch {}\n    }\n  }\n}\n\nmodule.exports = {\n  isRepoInitialized\n}\n"],"mappings":"AAAA;;;;;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,8BAAjB,CAAZ;;AACA,eAAoCA,OAAO,CAAC,UAAD,CAA3C;AAAA,IAAQC,UAAR,YAAQA,UAAR;AAAA,IAAoBC,WAApB,YAAoBA,WAApB;;AACA,gBAAoCF,OAAO,CAAC,WAAD,CAA3C;AAAA,IAAQG,uBAAR,aAAQA,uBAAR;AAEA;AACA;AACA;;;SACeC,iB;;;;;kFAAf,iBAAkCC,QAAlC;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA,IACOA,QADP;cAAA;cAAA;YAAA;;YAAA,MAEU,IAAIF,uBAAJ,CAA4B,qDAA5B,CAFV;;UAAA;YAKQG,IALR,GAKeD,QAAQ,CAACC,IALxB;YAAA;YAAA;YAAA,OAQUA,IAAI,CAACC,IAAL,EARV;;UAAA;YAAA;YAAA,OAS+BD,IAAI,CAACE,GAAL,CAASN,WAAT,CAT/B;;UAAA;YASUO,YATV;YAAA;YAAA,OAU8BH,IAAI,CAACE,GAAL,CAASP,UAAT,CAV9B;;UAAA;YAUUS,WAVV;;YAAA,MAWQ,CAACD,YAAD,IAAiB,CAACC,WAX1B;cAAA;cAAA;YAAA;;YAYMX,GAAG,kCAA2BU,YAA3B,EAAH;YACAV,GAAG,iCAA0BW,WAA1B,EAAH;YAbN,iCAca,KAdb;;UAAA;YAAA,iCAiBW,IAjBX;;UAAA;YAAA;YAAA;YAmBIX,GAAG,CAAC,6DAA6D,YAAEY,OAAhE,CAAH;YAnBJ,iCAoBW,KApBX;;UAAA;YAAA;;YAAA,MAsBQL,IAAI,KAAKM,SAtBjB;cAAA;cAAA;YAAA;;YAAA;YAAA;YAAA,OAwBcN,IAAI,CAACO,KAAL,EAxBd;;UAAA;YAAA;YAAA;;UAAA;YAAA;YAAA;;UAAA;YAAA;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AA8BAC,MAAM,CAACC,OAAP,GAAiB;EACfX,iBAAiB,EAAjBA;AADe,CAAjB"},"metadata":{},"sourceType":"script"}