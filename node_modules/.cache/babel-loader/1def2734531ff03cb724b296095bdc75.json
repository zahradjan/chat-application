{"ast":null,"code":"const path = require('path');\n\nconst fs = require('../fs-shim');\n\nconst Cache = require('orbit-db-cache');\n\nconst Logger = require('logplease');\n\nconst logger = Logger.create('orbit-db');\nLogger.setLogLevel('ERROR');\n\nasync function migrate(OrbitDB, options, dbAddress) {\n  let oldCache = OrbitDB.caches[options.directory] ? OrbitDB.caches[options.directory].cache : null;\n  let oldStore;\n\n  if (!oldCache) {\n    const addr = (path.posix || path).join(OrbitDB.directory, dbAddress.root, dbAddress.path);\n    if (fs && fs.existsSync && !fs.existsSync(addr)) return;\n    oldStore = await OrbitDB.storage.createStore(addr);\n    oldCache = new Cache(oldStore);\n  }\n\n  const _localHeads = await oldCache.get('_localHeads');\n\n  if (!_localHeads) return;\n  const keyRoot = dbAddress.toString();\n  logger.debug('Attempting to migrate from old cache location');\n  const migrationKeys = ['_remoteHeads', '_localHeads', 'snapshot', 'queue'];\n\n  for (const i in migrationKeys) {\n    try {\n      const key = path.join(keyRoot, migrationKeys[i]);\n      const val = await oldCache.get(migrationKeys[i]);\n      if (val) await options.cache.set(key, val);\n    } catch (e) {\n      logger.debug(e.message);\n    }\n  }\n\n  await options.cache.set(path.join(keyRoot, '_manifest'), dbAddress.root);\n  if (oldStore) await oldStore.close();\n}\n\nmodule.exports = migrate;","map":{"version":3,"names":["path","require","fs","Cache","Logger","logger","create","setLogLevel","migrate","OrbitDB","options","dbAddress","oldCache","caches","directory","cache","oldStore","addr","posix","join","root","existsSync","storage","createStore","_localHeads","get","keyRoot","toString","debug","migrationKeys","i","key","val","set","e","message","close","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/orbit-db/src/migrations/0.21-0.22.js"],"sourcesContent":["const path = require('path')\nconst fs = require('../fs-shim')\n\nconst Cache = require('orbit-db-cache')\n\nconst Logger = require('logplease')\nconst logger = Logger.create('orbit-db')\nLogger.setLogLevel('ERROR')\n\nasync function migrate (OrbitDB, options, dbAddress) {\n  let oldCache = OrbitDB.caches[options.directory] ? OrbitDB.caches[options.directory].cache : null\n  let oldStore\n\n  if (!oldCache) {\n    const addr = (path.posix || path).join(OrbitDB.directory, dbAddress.root, dbAddress.path)\n    if (fs && fs.existsSync && !fs.existsSync(addr)) return\n    oldStore = await OrbitDB.storage.createStore(addr)\n    oldCache = new Cache(oldStore)\n  }\n  const _localHeads = await oldCache.get('_localHeads')\n  if (!_localHeads) return\n\n  const keyRoot = dbAddress.toString()\n  logger.debug('Attempting to migrate from old cache location')\n  const migrationKeys = [\n    '_remoteHeads',\n    '_localHeads',\n    'snapshot',\n    'queue'\n  ]\n\n  for (const i in migrationKeys) {\n    try {\n      const key = path.join(keyRoot, migrationKeys[i])\n      const val = await oldCache.get(migrationKeys[i])\n      if (val) await options.cache.set(key, val)\n    } catch (e) {\n      logger.debug(e.message)\n    }\n  }\n  await options.cache.set(path.join(keyRoot, '_manifest'), dbAddress.root)\n  if (oldStore) await oldStore.close()\n}\n\nmodule.exports = migrate\n"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,YAAD,CAAlB;;AAEA,MAAME,KAAK,GAAGF,OAAO,CAAC,gBAAD,CAArB;;AAEA,MAAMG,MAAM,GAAGH,OAAO,CAAC,WAAD,CAAtB;;AACA,MAAMI,MAAM,GAAGD,MAAM,CAACE,MAAP,CAAc,UAAd,CAAf;AACAF,MAAM,CAACG,WAAP,CAAmB,OAAnB;;AAEA,eAAeC,OAAf,CAAwBC,OAAxB,EAAiCC,OAAjC,EAA0CC,SAA1C,EAAqD;EACnD,IAAIC,QAAQ,GAAGH,OAAO,CAACI,MAAR,CAAeH,OAAO,CAACI,SAAvB,IAAoCL,OAAO,CAACI,MAAR,CAAeH,OAAO,CAACI,SAAvB,EAAkCC,KAAtE,GAA8E,IAA7F;EACA,IAAIC,QAAJ;;EAEA,IAAI,CAACJ,QAAL,EAAe;IACb,MAAMK,IAAI,GAAG,CAACjB,IAAI,CAACkB,KAAL,IAAclB,IAAf,EAAqBmB,IAArB,CAA0BV,OAAO,CAACK,SAAlC,EAA6CH,SAAS,CAACS,IAAvD,EAA6DT,SAAS,CAACX,IAAvE,CAAb;IACA,IAAIE,EAAE,IAAIA,EAAE,CAACmB,UAAT,IAAuB,CAACnB,EAAE,CAACmB,UAAH,CAAcJ,IAAd,CAA5B,EAAiD;IACjDD,QAAQ,GAAG,MAAMP,OAAO,CAACa,OAAR,CAAgBC,WAAhB,CAA4BN,IAA5B,CAAjB;IACAL,QAAQ,GAAG,IAAIT,KAAJ,CAAUa,QAAV,CAAX;EACD;;EACD,MAAMQ,WAAW,GAAG,MAAMZ,QAAQ,CAACa,GAAT,CAAa,aAAb,CAA1B;;EACA,IAAI,CAACD,WAAL,EAAkB;EAElB,MAAME,OAAO,GAAGf,SAAS,CAACgB,QAAV,EAAhB;EACAtB,MAAM,CAACuB,KAAP,CAAa,+CAAb;EACA,MAAMC,aAAa,GAAG,CACpB,cADoB,EAEpB,aAFoB,EAGpB,UAHoB,EAIpB,OAJoB,CAAtB;;EAOA,KAAK,MAAMC,CAAX,IAAgBD,aAAhB,EAA+B;IAC7B,IAAI;MACF,MAAME,GAAG,GAAG/B,IAAI,CAACmB,IAAL,CAAUO,OAAV,EAAmBG,aAAa,CAACC,CAAD,CAAhC,CAAZ;MACA,MAAME,GAAG,GAAG,MAAMpB,QAAQ,CAACa,GAAT,CAAaI,aAAa,CAACC,CAAD,CAA1B,CAAlB;MACA,IAAIE,GAAJ,EAAS,MAAMtB,OAAO,CAACK,KAAR,CAAckB,GAAd,CAAkBF,GAAlB,EAAuBC,GAAvB,CAAN;IACV,CAJD,CAIE,OAAOE,CAAP,EAAU;MACV7B,MAAM,CAACuB,KAAP,CAAaM,CAAC,CAACC,OAAf;IACD;EACF;;EACD,MAAMzB,OAAO,CAACK,KAAR,CAAckB,GAAd,CAAkBjC,IAAI,CAACmB,IAAL,CAAUO,OAAV,EAAmB,WAAnB,CAAlB,EAAmDf,SAAS,CAACS,IAA7D,CAAN;EACA,IAAIJ,QAAJ,EAAc,MAAMA,QAAQ,CAACoB,KAAT,EAAN;AACf;;AAEDC,MAAM,CAACC,OAAP,GAAiB9B,OAAjB"},"metadata":{},"sourceType":"script"}