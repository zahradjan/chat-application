{"ast":null,"code":"const defer = require('p-defer');\n\nconst Headers = require('./extract-headers');\n\nconst LteReader = require('./lte-reader');\n\nfunction getPadding(size) {\n  size &= 511;\n  return size && 512 - size;\n}\n\nasync function discardPadding(reader, size) {\n  const overflow = getPadding(size);\n  if (overflow) await reader.next(overflow);\n}\n\nmodule.exports = options => {\n  options = options || {};\n  options.highWaterMark = options.highWaterMark || 1024 * 16;\n  return source => async function* () {\n    const reader = LteReader(source);\n    let gnuLongPath, gnuLongLinkPath, paxGlobal, pax;\n\n    try {\n      while (true) {\n        let headerBytes;\n\n        try {\n          const {\n            done,\n            value\n          } = await reader.next(512);\n          if (done) return;\n          headerBytes = value;\n        } catch (err) {\n          // Is ok, this is the end of the stream!\n          if (err.code === 'ERR_UNDER_READ') return;\n          throw err;\n        }\n\n        const header = Headers.decode(headerBytes, options.filenameEncoding);\n        if (!header) continue;\n\n        if (header.type === 'gnu-long-path') {\n          const {\n            done,\n            value: gnuLongPathBytes\n          } = await reader.next(header.size);\n          if (done) return;\n          gnuLongPath = Headers.decodeLongPath(gnuLongPathBytes, options.filenameEncoding);\n          await discardPadding(reader, header.size);\n          continue;\n        }\n\n        if (header.type === 'gnu-long-link-path') {\n          const {\n            done,\n            value: gnuLongLinkPathBytes\n          } = await reader.next(header.size);\n          if (done) return;\n          gnuLongLinkPath = Headers.decodeLongPath(gnuLongLinkPathBytes, options.filenameEncoding);\n          await discardPadding(reader, header.size);\n          continue;\n        }\n\n        if (header.type === 'pax-global-header') {\n          const {\n            done,\n            value: paxGlobalBytes\n          } = await reader.next(header.size);\n          if (done) return;\n          paxGlobal = Headers.decodePax(paxGlobalBytes, options.filenameEncoding);\n          await discardPadding(reader, header.size);\n          continue;\n        }\n\n        if (header.type === 'pax-header') {\n          const {\n            done,\n            value: paxBytes\n          } = await reader.next(header.size);\n          if (done) return;\n          pax = Headers.decodePax(paxBytes, options.filenameEncoding);\n          if (paxGlobal) pax = { ...paxGlobal,\n            ...pax\n          };\n          await discardPadding(reader, header.size);\n          continue;\n        }\n\n        if (gnuLongPath) {\n          header.name = gnuLongPath;\n          gnuLongPath = null;\n        }\n\n        if (gnuLongLinkPath) {\n          header.linkname = gnuLongLinkPath;\n          gnuLongLinkPath = null;\n        }\n\n        if (pax) {\n          if (pax.path) header.name = pax.path;\n          if (pax.linkpath) header.linkname = pax.linkpath;\n          if (pax.size) header.size = parseInt(pax.size, 10);\n          header.pax = pax;\n          pax = null;\n        }\n\n        if (!header.size || header.type === 'directory') {\n          yield {\n            header,\n            body: async function* () {}()\n          };\n          continue;\n        }\n\n        let bytesRemaining = header.size;\n        const bodyConsumed = defer(); // Prefetch the first chunk.\n        // This allows us to stream entries for small files from the tar without\n        // explicitly streaming the body of each.\n\n        const firstChunk = await reader.nextLte(Math.min(bytesRemaining, options.highWaterMark));\n        bytesRemaining -= firstChunk.value.length;\n        if (!bytesRemaining) bodyConsumed.resolve();\n\n        const body = async function* () {\n          try {\n            yield firstChunk.value;\n\n            while (bytesRemaining) {\n              const {\n                done,\n                value\n              } = await reader.nextLte(bytesRemaining);\n\n              if (done) {\n                bytesRemaining = 0;\n                return;\n              }\n\n              bytesRemaining -= value.length;\n              yield value;\n            }\n          } finally {\n            bodyConsumed.resolve();\n          }\n        }();\n\n        yield {\n          header,\n          body\n        }; // Wait for the body to be consumed\n\n        await bodyConsumed.promise; // Incase the body was not consumed entirely...\n\n        if (bytesRemaining) {\n          for await (const _ of body) {} // eslint-disable-line no-unused-vars,no-empty\n\n        }\n\n        await discardPadding(reader, header.size);\n      }\n    } finally {\n      await reader.return();\n    }\n  }();\n};","map":{"version":3,"names":["defer","require","Headers","LteReader","getPadding","size","discardPadding","reader","overflow","next","module","exports","options","highWaterMark","source","gnuLongPath","gnuLongLinkPath","paxGlobal","pax","headerBytes","done","value","err","code","header","decode","filenameEncoding","type","gnuLongPathBytes","decodeLongPath","gnuLongLinkPathBytes","paxGlobalBytes","decodePax","paxBytes","name","linkname","path","linkpath","parseInt","body","bytesRemaining","bodyConsumed","firstChunk","nextLte","Math","min","length","resolve","promise","_","return"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/it-tar/extract.js"],"sourcesContent":["const defer = require('p-defer')\nconst Headers = require('./extract-headers')\nconst LteReader = require('./lte-reader')\n\nfunction getPadding (size) {\n  size &= 511\n  return size && 512 - size\n}\n\nasync function discardPadding (reader, size) {\n  const overflow = getPadding(size)\n  if (overflow) await reader.next(overflow)\n}\n\nmodule.exports = options => {\n  options = options || {}\n  options.highWaterMark = options.highWaterMark || 1024 * 16\n\n  return source => (async function * () {\n    const reader = LteReader(source)\n    let gnuLongPath, gnuLongLinkPath, paxGlobal, pax\n\n    try {\n      while (true) {\n        let headerBytes\n        try {\n          const { done, value } = await reader.next(512)\n          if (done) return\n          headerBytes = value\n        } catch (err) {\n          // Is ok, this is the end of the stream!\n          if (err.code === 'ERR_UNDER_READ') return\n          throw err\n        }\n\n        const header = Headers.decode(headerBytes, options.filenameEncoding)\n        if (!header) continue\n\n        if (header.type === 'gnu-long-path') {\n          const { done, value: gnuLongPathBytes } = await reader.next(header.size)\n          if (done) return\n          gnuLongPath = Headers.decodeLongPath(gnuLongPathBytes, options.filenameEncoding)\n          await discardPadding(reader, header.size)\n          continue\n        }\n\n        if (header.type === 'gnu-long-link-path') {\n          const { done, value: gnuLongLinkPathBytes } = await reader.next(header.size)\n          if (done) return\n          gnuLongLinkPath = Headers.decodeLongPath(gnuLongLinkPathBytes, options.filenameEncoding)\n          await discardPadding(reader, header.size)\n          continue\n        }\n\n        if (header.type === 'pax-global-header') {\n          const { done, value: paxGlobalBytes } = await reader.next(header.size)\n          if (done) return\n          paxGlobal = Headers.decodePax(paxGlobalBytes, options.filenameEncoding)\n          await discardPadding(reader, header.size)\n          continue\n        }\n\n        if (header.type === 'pax-header') {\n          const { done, value: paxBytes } = await reader.next(header.size)\n          if (done) return\n          pax = Headers.decodePax(paxBytes, options.filenameEncoding)\n          if (paxGlobal) pax = { ...paxGlobal, ...pax }\n          await discardPadding(reader, header.size)\n          continue\n        }\n\n        if (gnuLongPath) {\n          header.name = gnuLongPath\n          gnuLongPath = null\n        }\n\n        if (gnuLongLinkPath) {\n          header.linkname = gnuLongLinkPath\n          gnuLongLinkPath = null\n        }\n\n        if (pax) {\n          if (pax.path) header.name = pax.path\n          if (pax.linkpath) header.linkname = pax.linkpath\n          if (pax.size) header.size = parseInt(pax.size, 10)\n          header.pax = pax\n          pax = null\n        }\n\n        if (!header.size || header.type === 'directory') {\n          yield { header, body: (async function * () {})() }\n          continue\n        }\n\n        let bytesRemaining = header.size\n        const bodyConsumed = defer()\n\n        // Prefetch the first chunk.\n        // This allows us to stream entries for small files from the tar without\n        // explicitly streaming the body of each.\n        const firstChunk = await reader.nextLte(Math.min(bytesRemaining, options.highWaterMark))\n        bytesRemaining -= firstChunk.value.length\n\n        if (!bytesRemaining) bodyConsumed.resolve()\n\n        const body = (async function * () {\n          try {\n            yield firstChunk.value\n\n            while (bytesRemaining) {\n              const { done, value } = await reader.nextLte(bytesRemaining)\n              if (done) {\n                bytesRemaining = 0\n                return\n              }\n              bytesRemaining -= value.length\n              yield value\n            }\n          } finally {\n            bodyConsumed.resolve()\n          }\n        })()\n\n        yield { header, body }\n\n        // Wait for the body to be consumed\n        await bodyConsumed.promise\n\n        // Incase the body was not consumed entirely...\n        if (bytesRemaining) {\n          for await (const _ of body) {} // eslint-disable-line no-unused-vars,no-empty\n        }\n\n        await discardPadding(reader, header.size)\n      }\n    } finally {\n      await reader.return()\n    }\n  })()\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}