{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar _createForOfIteratorHelper = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar debug = require('debug');\n\nvar _require = require('uint8arrays/equals'),\n    uint8ArrayEquals = _require.equals;\n\nvar BitswapMessageEntry = require('../types/message/entry');\n/**\n * Creates a logger for the given subsystem\n *\n * @param {import('peer-id')} [id]\n * @param {string} [subsystem]\n */\n\n\nvar logger = function logger(id, subsystem) {\n  var name = ['bitswap'];\n\n  if (subsystem) {\n    name.push(subsystem);\n  }\n\n  if (id) {\n    name.push(\"\".concat(id.toB58String().slice(0, 8)));\n  }\n\n  return Object.assign(debug(name.join(':')), {\n    error: debug(name.concat(['error']).join(':'))\n  });\n};\n/**\n * @template X, T\n * @param {(x:X, t:T) => boolean} pred\n * @param {X} x\n * @param {T[]} list\n * @returns {boolean}\n */\n\n\nvar includesWith = function includesWith(pred, x, list) {\n  var idx = 0;\n  var len = list.length;\n\n  while (idx < len) {\n    if (pred(x, list[idx])) {\n      return true;\n    }\n\n    idx += 1;\n  }\n\n  return false;\n};\n/**\n * @template T\n * @param {(x:T, t:T) => boolean} pred\n * @param {T[]} list\n * @returns {T[]}\n */\n\n\nvar uniqWith = function uniqWith(pred, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [];\n  var item;\n\n  while (idx < len) {\n    item = list[idx];\n\n    if (!includesWith(pred, item, result)) {\n      result[result.length] = item;\n    }\n\n    idx += 1;\n  }\n\n  return result;\n};\n/**\n * @template {string|number|symbol} K\n * @template V\n * @param {(v:V) => K} pred\n * @param {V[]} list\n * @returns {Record<K, V[]>}\n */\n\n\nvar groupBy = function groupBy(pred, list) {\n  return list.reduce(function (acc, v) {\n    var k = pred(v);\n\n    if (acc[k]) {\n      acc[k].push(v);\n    } else {\n      acc[k] = [v];\n    }\n\n    return acc;\n  },\n  /** @type {Record<K, V[]>} */\n  {});\n};\n/**\n * @template T, E\n * @param {(a:T, b:E) => boolean} pred\n * @param {T[]} list\n * @param {E[]} values\n * @returns {T[]}\n */\n\n\nvar pullAllWith = function pullAllWith(pred, list, values) {\n  return list.filter(function (i) {\n    return !includesWith(pred, i, values);\n  });\n};\n/**\n * @template T\n * @param {(v:T) => number} fn\n * @param {T[]} list\n * @returns {T[]}\n */\n\n\nvar sortBy = function sortBy(fn, list) {\n  return Array.prototype.slice.call(list, 0).sort(function (a, b) {\n    var aa = fn(a);\n    var bb = fn(b);\n    return aa < bb ? -1 : aa > bb ? 1 : 0;\n  });\n};\n/**\n * Is equal for Maps of BitswapMessageEntry or Uint8Arrays\n *\n * @param {Map<string, Uint8Array | BitswapMessageEntry>} a\n * @param {Map<string, Uint8Array | BitswapMessageEntry>} b\n */\n\n\nvar isMapEqual = function isMapEqual(a, b) {\n  if (a.size !== b.size) {\n    return false;\n  }\n\n  var _iterator = _createForOfIteratorHelper(a),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = _slicedToArray(_step.value, 2),\n          key = _step$value[0],\n          valueA = _step$value[1];\n\n      var valueB = b.get(key);\n\n      if (valueB === undefined) {\n        return false;\n      } // TODO: revisit this\n      // Support Blocks\n\n\n      if (valueA instanceof Uint8Array && valueB instanceof Uint8Array && !uint8ArrayEquals(valueA, valueB)) {\n        return false;\n      } // Support BitswapMessageEntry\n\n\n      if (valueA instanceof BitswapMessageEntry && valueB instanceof BitswapMessageEntry && !valueA.equals(valueB)) {\n        return false;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return true;\n};\n\nmodule.exports = {\n  logger: logger,\n  includesWith: includesWith,\n  uniqWith: uniqWith,\n  groupBy: groupBy,\n  pullAllWith: pullAllWith,\n  sortBy: sortBy,\n  isMapEqual: isMapEqual\n};","map":{"version":3,"names":["debug","require","uint8ArrayEquals","equals","BitswapMessageEntry","logger","id","subsystem","name","push","toB58String","slice","Object","assign","join","error","concat","includesWith","pred","x","list","idx","len","length","uniqWith","result","item","groupBy","reduce","acc","v","k","pullAllWith","values","filter","i","sortBy","fn","Array","prototype","call","sort","a","b","aa","bb","isMapEqual","size","key","valueA","valueB","get","undefined","Uint8Array","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-bitswap/src/utils/index.js"],"sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst { equals: uint8ArrayEquals } = require('uint8arrays/equals')\nconst BitswapMessageEntry = require('../types/message/entry')\n\n/**\n * Creates a logger for the given subsystem\n *\n * @param {import('peer-id')} [id]\n * @param {string} [subsystem]\n */\nconst logger = (id, subsystem) => {\n  const name = ['bitswap']\n  if (subsystem) {\n    name.push(subsystem)\n  }\n  if (id) {\n    name.push(`${id.toB58String().slice(0, 8)}`)\n  }\n\n  return Object.assign(debug(name.join(':')), {\n    error: debug(name.concat(['error']).join(':'))\n  })\n}\n\n/**\n * @template X, T\n * @param {(x:X, t:T) => boolean} pred\n * @param {X} x\n * @param {T[]} list\n * @returns {boolean}\n */\nconst includesWith = (pred, x, list) => {\n  let idx = 0\n  const len = list.length\n  while (idx < len) {\n    if (pred(x, list[idx])) {\n      return true\n    }\n    idx += 1\n  }\n  return false\n}\n\n/**\n * @template T\n * @param {(x:T, t:T) => boolean} pred\n * @param {T[]} list\n * @returns {T[]}\n */\nconst uniqWith = (pred, list) => {\n  let idx = 0\n  const len = list.length\n  const result = []\n  let item\n\n  while (idx < len) {\n    item = list[idx]\n    if (!includesWith(pred, item, result)) {\n      result[result.length] = item\n    }\n    idx += 1\n  }\n  return result\n}\n\n/**\n * @template {string|number|symbol} K\n * @template V\n * @param {(v:V) => K} pred\n * @param {V[]} list\n * @returns {Record<K, V[]>}\n */\nconst groupBy = (pred, list) => {\n  return list.reduce((acc, v) => {\n    const k = pred(v)\n\n    if (acc[k]) {\n      acc[k].push(v)\n    } else {\n      acc[k] = [v]\n    }\n    return acc\n  }, /** @type {Record<K, V[]>} */({}))\n}\n\n/**\n * @template T, E\n * @param {(a:T, b:E) => boolean} pred\n * @param {T[]} list\n * @param {E[]} values\n * @returns {T[]}\n */\nconst pullAllWith = (pred, list, values) => {\n  return list.filter(i => {\n    return !includesWith(pred, i, values)\n  })\n}\n\n/**\n * @template T\n * @param {(v:T) => number} fn\n * @param {T[]} list\n * @returns {T[]}\n */\nconst sortBy = (fn, list) => {\n  return Array.prototype.slice.call(list, 0).sort((a, b) => {\n    const aa = fn(a)\n    const bb = fn(b)\n    return aa < bb ? -1 : aa > bb ? 1 : 0\n  })\n}\n\n/**\n * Is equal for Maps of BitswapMessageEntry or Uint8Arrays\n *\n * @param {Map<string, Uint8Array | BitswapMessageEntry>} a\n * @param {Map<string, Uint8Array | BitswapMessageEntry>} b\n */\nconst isMapEqual = (a, b) => {\n  if (a.size !== b.size) {\n    return false\n  }\n\n  for (const [key, valueA] of a) {\n    const valueB = b.get(key)\n\n    if (valueB === undefined) {\n      return false\n    }\n\n    // TODO: revisit this\n\n    // Support Blocks\n    if (valueA instanceof Uint8Array && valueB instanceof Uint8Array && !uint8ArrayEquals(valueA, valueB)) {\n      return false\n    }\n\n    // Support BitswapMessageEntry\n    if (valueA instanceof BitswapMessageEntry && valueB instanceof BitswapMessageEntry && !valueA.equals(valueB)) {\n      return false\n    }\n  }\n\n  return true\n}\n\nmodule.exports = {\n  logger,\n  includesWith,\n  uniqWith,\n  groupBy,\n  pullAllWith,\n  sortBy,\n  isMapEqual\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}