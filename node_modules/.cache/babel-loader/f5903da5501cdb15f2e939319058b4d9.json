{"ast":null,"code":"'use strict';\n\nvar _inherits = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar decoder = require('./decoder.js');\n\nvar CarIteratorBase = /*#__PURE__*/function () {\n  function CarIteratorBase(version, roots, iterable) {\n    _classCallCheck(this, CarIteratorBase);\n\n    this._version = version;\n    this._roots = roots;\n    this._iterable = iterable;\n    this._decoded = false;\n  }\n\n  _createClass(CarIteratorBase, [{\n    key: \"version\",\n    get: function get() {\n      return this._version;\n    }\n  }, {\n    key: \"getRoots\",\n    value: function () {\n      var _getRoots = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", this._roots);\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getRoots() {\n        return _getRoots.apply(this, arguments);\n      }\n\n      return getRoots;\n    }()\n  }]);\n\n  return CarIteratorBase;\n}();\n\nvar CarBlockIterator = /*#__PURE__*/function (_CarIteratorBase, _Symbol$asyncIterator) {\n  _inherits(CarBlockIterator, _CarIteratorBase);\n\n  var _super = _createSuper(CarBlockIterator);\n\n  function CarBlockIterator() {\n    _classCallCheck(this, CarBlockIterator);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(CarBlockIterator, [{\n    key: _Symbol$asyncIterator,\n    value: function value() {\n      if (this._decoded) {\n        throw new Error('Cannot decode more than once');\n      }\n\n      if (!this._iterable) {\n        throw new Error('Block iterable not found');\n      }\n\n      this._decoded = true;\n      return this._iterable[Symbol.asyncIterator]();\n    }\n  }], [{\n    key: \"fromBytes\",\n    value: function () {\n      var _fromBytes2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(bytes) {\n        var _yield$_fromBytes, version, roots, iterator;\n\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _fromBytes(bytes);\n\n              case 2:\n                _yield$_fromBytes = _context2.sent;\n                version = _yield$_fromBytes.version;\n                roots = _yield$_fromBytes.roots;\n                iterator = _yield$_fromBytes.iterator;\n                return _context2.abrupt(\"return\", new CarBlockIterator(version, roots, iterator));\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function fromBytes(_x) {\n        return _fromBytes2.apply(this, arguments);\n      }\n\n      return fromBytes;\n    }()\n  }, {\n    key: \"fromIterable\",\n    value: function () {\n      var _fromIterable2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(asyncIterable) {\n        var _yield$_fromIterable, version, roots, iterator;\n\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return _fromIterable(asyncIterable);\n\n              case 2:\n                _yield$_fromIterable = _context3.sent;\n                version = _yield$_fromIterable.version;\n                roots = _yield$_fromIterable.roots;\n                iterator = _yield$_fromIterable.iterator;\n                return _context3.abrupt(\"return\", new CarBlockIterator(version, roots, iterator));\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function fromIterable(_x2) {\n        return _fromIterable2.apply(this, arguments);\n      }\n\n      return fromIterable;\n    }()\n  }]);\n\n  return CarBlockIterator;\n}(CarIteratorBase, Symbol.asyncIterator);\n\nvar CarCIDIterator = /*#__PURE__*/function (_CarIteratorBase2, _Symbol$asyncIterator2) {\n  _inherits(CarCIDIterator, _CarIteratorBase2);\n\n  var _super2 = _createSuper(CarCIDIterator);\n\n  function CarCIDIterator() {\n    _classCallCheck(this, CarCIDIterator);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(CarCIDIterator, [{\n    key: _Symbol$asyncIterator2,\n    value: function value() {\n      if (this._decoded) {\n        throw new Error('Cannot decode more than once');\n      }\n\n      if (!this._iterable) {\n        throw new Error('Block iterable not found');\n      }\n\n      this._decoded = true;\n\n      var iterable = this._iterable[Symbol.asyncIterator]();\n\n      return {\n        next: function next() {\n          return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n            var next;\n            return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    _context4.next = 2;\n                    return iterable.next();\n\n                  case 2:\n                    next = _context4.sent;\n\n                    if (!next.done) {\n                      _context4.next = 5;\n                      break;\n                    }\n\n                    return _context4.abrupt(\"return\", next);\n\n                  case 5:\n                    return _context4.abrupt(\"return\", {\n                      done: false,\n                      value: next.value.cid\n                    });\n\n                  case 6:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, _callee4);\n          }))();\n        }\n      };\n    }\n  }], [{\n    key: \"fromBytes\",\n    value: function () {\n      var _fromBytes3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(bytes) {\n        var _yield$_fromBytes2, version, roots, iterator;\n\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return _fromBytes(bytes);\n\n              case 2:\n                _yield$_fromBytes2 = _context5.sent;\n                version = _yield$_fromBytes2.version;\n                roots = _yield$_fromBytes2.roots;\n                iterator = _yield$_fromBytes2.iterator;\n                return _context5.abrupt(\"return\", new CarCIDIterator(version, roots, iterator));\n\n              case 7:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function fromBytes(_x3) {\n        return _fromBytes3.apply(this, arguments);\n      }\n\n      return fromBytes;\n    }()\n  }, {\n    key: \"fromIterable\",\n    value: function () {\n      var _fromIterable3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(asyncIterable) {\n        var _yield$_fromIterable2, version, roots, iterator;\n\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return _fromIterable(asyncIterable);\n\n              case 2:\n                _yield$_fromIterable2 = _context6.sent;\n                version = _yield$_fromIterable2.version;\n                roots = _yield$_fromIterable2.roots;\n                iterator = _yield$_fromIterable2.iterator;\n                return _context6.abrupt(\"return\", new CarCIDIterator(version, roots, iterator));\n\n              case 7:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      function fromIterable(_x4) {\n        return _fromIterable3.apply(this, arguments);\n      }\n\n      return fromIterable;\n    }()\n  }]);\n\n  return CarCIDIterator;\n}(CarIteratorBase, Symbol.asyncIterator);\n\nfunction _fromBytes(_x5) {\n  return _fromBytes4.apply(this, arguments);\n}\n\nfunction _fromBytes4() {\n  _fromBytes4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(bytes) {\n    return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            if (bytes instanceof Uint8Array) {\n              _context7.next = 2;\n              break;\n            }\n\n            throw new TypeError('fromBytes() requires a Uint8Array');\n\n          case 2:\n            return _context7.abrupt(\"return\", decodeIterator(decoder.bytesReader(bytes)));\n\n          case 3:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return _fromBytes4.apply(this, arguments);\n}\n\nfunction _fromIterable(_x6) {\n  return _fromIterable4.apply(this, arguments);\n}\n\nfunction _fromIterable4() {\n  _fromIterable4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(asyncIterable) {\n    return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            if (!(!asyncIterable || !(typeof asyncIterable[Symbol.asyncIterator] === 'function'))) {\n              _context8.next = 2;\n              break;\n            }\n\n            throw new TypeError('fromIterable() requires an async iterable');\n\n          case 2:\n            return _context8.abrupt(\"return\", decodeIterator(decoder.asyncIterableReader(asyncIterable)));\n\n          case 3:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  }));\n  return _fromIterable4.apply(this, arguments);\n}\n\nfunction decodeIterator(_x7) {\n  return _decodeIterator.apply(this, arguments);\n}\n\nfunction _decodeIterator() {\n  _decodeIterator = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(reader) {\n    var decoder$1, _yield$decoder$1$head, version, roots;\n\n    return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            decoder$1 = decoder.createDecoder(reader);\n            _context9.next = 3;\n            return decoder$1.header();\n\n          case 3:\n            _yield$decoder$1$head = _context9.sent;\n            version = _yield$decoder$1$head.version;\n            roots = _yield$decoder$1$head.roots;\n            return _context9.abrupt(\"return\", {\n              version: version,\n              roots: roots,\n              iterator: decoder$1.blocks()\n            });\n\n          case 7:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9);\n  }));\n  return _decodeIterator.apply(this, arguments);\n}\n\nexports.CarBlockIterator = CarBlockIterator;\nexports.CarCIDIterator = CarCIDIterator;\nexports.CarIteratorBase = CarIteratorBase;","map":{"version":3,"names":["Object","defineProperty","exports","value","decoder","require","CarIteratorBase","version","roots","iterable","_version","_roots","_iterable","_decoded","CarBlockIterator","Error","Symbol","asyncIterator","bytes","fromBytes","iterator","asyncIterable","fromIterable","CarCIDIterator","next","done","cid","Uint8Array","TypeError","decodeIterator","bytesReader","asyncIterableReader","reader","decoder$1","createDecoder","header","blocks"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/@ipld/car/cjs/lib/iterator.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar decoder = require('./decoder.js');\n\nclass CarIteratorBase {\n  constructor(version, roots, iterable) {\n    this._version = version;\n    this._roots = roots;\n    this._iterable = iterable;\n    this._decoded = false;\n  }\n  get version() {\n    return this._version;\n  }\n  async getRoots() {\n    return this._roots;\n  }\n}\nclass CarBlockIterator extends CarIteratorBase {\n  [Symbol.asyncIterator]() {\n    if (this._decoded) {\n      throw new Error('Cannot decode more than once');\n    }\n    if (!this._iterable) {\n      throw new Error('Block iterable not found');\n    }\n    this._decoded = true;\n    return this._iterable[Symbol.asyncIterator]();\n  }\n  static async fromBytes(bytes) {\n    const {version, roots, iterator} = await fromBytes(bytes);\n    return new CarBlockIterator(version, roots, iterator);\n  }\n  static async fromIterable(asyncIterable) {\n    const {version, roots, iterator} = await fromIterable(asyncIterable);\n    return new CarBlockIterator(version, roots, iterator);\n  }\n}\nclass CarCIDIterator extends CarIteratorBase {\n  [Symbol.asyncIterator]() {\n    if (this._decoded) {\n      throw new Error('Cannot decode more than once');\n    }\n    if (!this._iterable) {\n      throw new Error('Block iterable not found');\n    }\n    this._decoded = true;\n    const iterable = this._iterable[Symbol.asyncIterator]();\n    return {\n      async next() {\n        const next = await iterable.next();\n        if (next.done) {\n          return next;\n        }\n        return {\n          done: false,\n          value: next.value.cid\n        };\n      }\n    };\n  }\n  static async fromBytes(bytes) {\n    const {version, roots, iterator} = await fromBytes(bytes);\n    return new CarCIDIterator(version, roots, iterator);\n  }\n  static async fromIterable(asyncIterable) {\n    const {version, roots, iterator} = await fromIterable(asyncIterable);\n    return new CarCIDIterator(version, roots, iterator);\n  }\n}\nasync function fromBytes(bytes) {\n  if (!(bytes instanceof Uint8Array)) {\n    throw new TypeError('fromBytes() requires a Uint8Array');\n  }\n  return decodeIterator(decoder.bytesReader(bytes));\n}\nasync function fromIterable(asyncIterable) {\n  if (!asyncIterable || !(typeof asyncIterable[Symbol.asyncIterator] === 'function')) {\n    throw new TypeError('fromIterable() requires an async iterable');\n  }\n  return decodeIterator(decoder.asyncIterableReader(asyncIterable));\n}\nasync function decodeIterator(reader) {\n  const decoder$1 = decoder.createDecoder(reader);\n  const {version, roots} = await decoder$1.header();\n  return {\n    version,\n    roots,\n    iterator: decoder$1.blocks()\n  };\n}\n\nexports.CarBlockIterator = CarBlockIterator;\nexports.CarCIDIterator = CarCIDIterator;\nexports.CarIteratorBase = CarIteratorBase;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}