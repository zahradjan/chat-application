{"ast":null,"code":"'use strict';\n\nrequire('node-forge/lib/util');\n\nrequire('node-forge/lib/jsbn');\n\nvar forge = require('node-forge/lib/forge');\n\nvar _require = require('uint8arrays/from-string'),\n    uint8ArrayFromString = _require.fromString;\n\nvar _require2 = require('uint8arrays/to-string'),\n    uint8ArrayToString = _require2.toString;\n\nvar _require3 = require('uint8arrays/concat'),\n    uint8ArrayConcat = _require3.concat;\n\nexports.bigIntegerToUintBase64url = function (num, len) {\n  // Call `.abs()` to convert to unsigned\n  var buf = Uint8Array.from(num.abs().toByteArray()); // toByteArray converts to big endian\n  // toByteArray() gives us back a signed array, which will include a leading 0\n  // byte if the most significant bit of the number is 1:\n  // https://docs.microsoft.com/en-us/windows/win32/seccertenroll/about-integer\n  // Our number will always be positive so we should remove the leading padding.\n\n  buf = buf[0] === 0 ? buf.slice(1) : buf;\n\n  if (len != null) {\n    if (buf.length > len) throw new Error('byte array longer than desired length');\n    buf = uint8ArrayConcat([new Uint8Array(len - buf.length), buf]);\n  }\n\n  return uint8ArrayToString(buf, 'base64url');\n}; // Convert a base64url encoded string to a BigInteger\n\n\nexports.base64urlToBigInteger = function (str) {\n  var buf = exports.base64urlToBuffer(str);\n  return new forge.jsbn.BigInteger(uint8ArrayToString(buf, 'base16'), 16);\n};\n\nexports.base64urlToBuffer = function (str, len) {\n  var buf = uint8ArrayFromString(str, 'base64urlpad');\n\n  if (len != null) {\n    if (buf.length > len) throw new Error('byte array longer than desired length');\n    buf = uint8ArrayConcat([new Uint8Array(len - buf.length), buf]);\n  }\n\n  return buf;\n};","map":{"version":3,"names":["require","forge","uint8ArrayFromString","fromString","uint8ArrayToString","toString","uint8ArrayConcat","concat","exports","bigIntegerToUintBase64url","num","len","buf","Uint8Array","from","abs","toByteArray","slice","length","Error","base64urlToBigInteger","str","base64urlToBuffer","jsbn","BigInteger"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-crypto/src/util.js"],"sourcesContent":["'use strict'\n\nrequire('node-forge/lib/util')\nrequire('node-forge/lib/jsbn')\nconst forge = require('node-forge/lib/forge')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\nconst { concat: uint8ArrayConcat } = require('uint8arrays/concat')\n\nexports.bigIntegerToUintBase64url = (num, len) => {\n  // Call `.abs()` to convert to unsigned\n  let buf = Uint8Array.from(num.abs().toByteArray()) // toByteArray converts to big endian\n\n  // toByteArray() gives us back a signed array, which will include a leading 0\n  // byte if the most significant bit of the number is 1:\n  // https://docs.microsoft.com/en-us/windows/win32/seccertenroll/about-integer\n  // Our number will always be positive so we should remove the leading padding.\n  buf = buf[0] === 0 ? buf.slice(1) : buf\n\n  if (len != null) {\n    if (buf.length > len) throw new Error('byte array longer than desired length')\n    buf = uint8ArrayConcat([new Uint8Array(len - buf.length), buf])\n  }\n\n  return uint8ArrayToString(buf, 'base64url')\n}\n\n// Convert a base64url encoded string to a BigInteger\nexports.base64urlToBigInteger = str => {\n  const buf = exports.base64urlToBuffer(str)\n  return new forge.jsbn.BigInteger(uint8ArrayToString(buf, 'base16'), 16)\n}\n\nexports.base64urlToBuffer = (str, len) => {\n  let buf = uint8ArrayFromString(str, 'base64urlpad')\n\n  if (len != null) {\n    if (buf.length > len) throw new Error('byte array longer than desired length')\n    buf = uint8ArrayConcat([new Uint8Array(len - buf.length), buf])\n  }\n\n  return buf\n}\n"],"mappings":"AAAA;;AAEAA,OAAO,CAAC,qBAAD,CAAP;;AACAA,OAAO,CAAC,qBAAD,CAAP;;AACA,IAAMC,KAAK,GAAGD,OAAO,CAAC,sBAAD,CAArB;;AACA,eAA6CA,OAAO,CAAC,yBAAD,CAApD;AAAA,IAAoBE,oBAApB,YAAQC,UAAR;;AACA,gBAAyCH,OAAO,CAAC,uBAAD,CAAhD;AAAA,IAAkBI,kBAAlB,aAAQC,QAAR;;AACA,gBAAqCL,OAAO,CAAC,oBAAD,CAA5C;AAAA,IAAgBM,gBAAhB,aAAQC,MAAR;;AAEAC,OAAO,CAACC,yBAAR,GAAoC,UAACC,GAAD,EAAMC,GAAN,EAAc;EAChD;EACA,IAAIC,GAAG,GAAGC,UAAU,CAACC,IAAX,CAAgBJ,GAAG,CAACK,GAAJ,GAAUC,WAAV,EAAhB,CAAV,CAFgD,CAEG;EAEnD;EACA;EACA;EACA;;EACAJ,GAAG,GAAGA,GAAG,CAAC,CAAD,CAAH,KAAW,CAAX,GAAeA,GAAG,CAACK,KAAJ,CAAU,CAAV,CAAf,GAA8BL,GAApC;;EAEA,IAAID,GAAG,IAAI,IAAX,EAAiB;IACf,IAAIC,GAAG,CAACM,MAAJ,GAAaP,GAAjB,EAAsB,MAAM,IAAIQ,KAAJ,CAAU,uCAAV,CAAN;IACtBP,GAAG,GAAGN,gBAAgB,CAAC,CAAC,IAAIO,UAAJ,CAAeF,GAAG,GAAGC,GAAG,CAACM,MAAzB,CAAD,EAAmCN,GAAnC,CAAD,CAAtB;EACD;;EAED,OAAOR,kBAAkB,CAACQ,GAAD,EAAM,WAAN,CAAzB;AACD,CAhBD,C,CAkBA;;;AACAJ,OAAO,CAACY,qBAAR,GAAgC,UAAAC,GAAG,EAAI;EACrC,IAAMT,GAAG,GAAGJ,OAAO,CAACc,iBAAR,CAA0BD,GAA1B,CAAZ;EACA,OAAO,IAAIpB,KAAK,CAACsB,IAAN,CAAWC,UAAf,CAA0BpB,kBAAkB,CAACQ,GAAD,EAAM,QAAN,CAA5C,EAA6D,EAA7D,CAAP;AACD,CAHD;;AAKAJ,OAAO,CAACc,iBAAR,GAA4B,UAACD,GAAD,EAAMV,GAAN,EAAc;EACxC,IAAIC,GAAG,GAAGV,oBAAoB,CAACmB,GAAD,EAAM,cAAN,CAA9B;;EAEA,IAAIV,GAAG,IAAI,IAAX,EAAiB;IACf,IAAIC,GAAG,CAACM,MAAJ,GAAaP,GAAjB,EAAsB,MAAM,IAAIQ,KAAJ,CAAU,uCAAV,CAAN;IACtBP,GAAG,GAAGN,gBAAgB,CAAC,CAAC,IAAIO,UAAJ,CAAeF,GAAG,GAAGC,GAAG,CAACM,MAAzB,CAAD,EAAmCN,GAAnC,CAAD,CAAtB;EACD;;EAED,OAAOA,GAAP;AACD,CATD"},"metadata":{},"sourceType":"script"}