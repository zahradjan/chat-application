{"ast":null,"code":"/* eslint max-nested-callbacks: [\"error\", 8] */\n'use strict';\n\nconst {\n  PinTypes\n} = require('ipfs-repo');\n\nconst {\n  normaliseInput\n} = require('ipfs-core-utils/src/pins/normalise-input');\n\nconst {\n  resolvePath\n} = require('../../utils');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst errCode = require('err-code');\n/**\n * @typedef {import('multiformats/cid').CID} CID\n */\n\n/**\n * @param {string} type\n * @param {CID} cid\n * @param {Record<string, any>} [metadata]\n */\n\n\nfunction toPin(type, cid, metadata) {\n  /** @type {import('ipfs-core-types/src/pin').LsResult} */\n  const output = {\n    type,\n    cid\n  };\n\n  if (metadata) {\n    output.metadata = metadata;\n  }\n\n  return output;\n}\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n */\n\n\nmodule.exports = _ref => {\n  let {\n    repo,\n    codecs\n  } = _ref;\n\n  /**\n   * @type {import('ipfs-core-types/src/pin').API[\"ls\"]}\n   */\n  async function* ls() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    /** @type {import('ipfs-core-types/src/pin').PinQueryType} */\n    let type = PinTypes.all;\n\n    if (options.type) {\n      type = options.type;\n\n      if (!Object.keys(PinTypes).includes(type)) {\n        throw errCode(new Error('Invalid pin type'), 'ERR_INVALID_PIN_TYPE');\n      }\n    }\n\n    if (options.paths) {\n      // check the pinned state of specific hashes\n      let matched = false;\n\n      for await (const {\n        path\n      } of normaliseInput(options.paths)) {\n        const {\n          cid\n        } = await resolvePath(repo, codecs, path);\n        const {\n          reason,\n          pinned,\n          parent,\n          metadata\n        } = await repo.pins.isPinnedWithType(cid, type);\n\n        if (!pinned) {\n          throw errCode(new Error(`path '${path}' is not pinned`), 'ERR_NOT_PINNED');\n        }\n\n        switch (reason) {\n          case PinTypes.direct:\n          case PinTypes.recursive:\n            matched = true;\n            yield toPin(reason, cid, metadata);\n            break;\n\n          default:\n            matched = true;\n            yield toPin(`${PinTypes.indirect} through ${parent}`, cid, metadata);\n        }\n      }\n\n      if (!matched) {\n        throw new Error('No match found');\n      }\n\n      return;\n    }\n\n    if (type === PinTypes.recursive || type === PinTypes.all) {\n      for await (const {\n        cid,\n        metadata\n      } of repo.pins.recursiveKeys()) {\n        yield toPin(PinTypes.recursive, cid, metadata);\n      }\n    }\n\n    if (type === PinTypes.indirect || type === PinTypes.all) {\n      // @ts-ignore - LsSettings & AbortOptions have no properties in common\n      // with type { preload?: boolean }\n      for await (const cid of repo.pins.indirectKeys(options)) {\n        yield toPin(PinTypes.indirect, cid);\n      }\n    }\n\n    if (type === PinTypes.direct || type === PinTypes.all) {\n      for await (const {\n        cid,\n        metadata\n      } of repo.pins.directKeys()) {\n        yield toPin(PinTypes.direct, cid, metadata);\n      }\n    }\n  }\n\n  return withTimeoutOption(ls);\n};","map":{"version":3,"names":["PinTypes","require","normaliseInput","resolvePath","withTimeoutOption","errCode","toPin","type","cid","metadata","output","module","exports","repo","codecs","ls","options","all","Object","keys","includes","Error","paths","matched","path","reason","pinned","parent","pins","isPinnedWithType","direct","recursive","indirect","recursiveKeys","indirectKeys","directKeys"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/pin/ls.js"],"sourcesContent":["/* eslint max-nested-callbacks: [\"error\", 8] */\n'use strict'\n\nconst { PinTypes } = require('ipfs-repo')\nconst { normaliseInput } = require('ipfs-core-utils/src/pins/normalise-input')\nconst { resolvePath } = require('../../utils')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst errCode = require('err-code')\n\n/**\n * @typedef {import('multiformats/cid').CID} CID\n */\n\n/**\n * @param {string} type\n * @param {CID} cid\n * @param {Record<string, any>} [metadata]\n */\nfunction toPin (type, cid, metadata) {\n  /** @type {import('ipfs-core-types/src/pin').LsResult} */\n  const output = {\n    type,\n    cid\n  }\n\n  if (metadata) {\n    output.metadata = metadata\n  }\n\n  return output\n}\n\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n */\nmodule.exports = ({ repo, codecs }) => {\n  /**\n   * @type {import('ipfs-core-types/src/pin').API[\"ls\"]}\n   */\n  async function * ls (options = {}) {\n    /** @type {import('ipfs-core-types/src/pin').PinQueryType} */\n    let type = PinTypes.all\n\n    if (options.type) {\n      type = options.type\n\n      if (!Object.keys(PinTypes).includes(type)) {\n        throw errCode(new Error('Invalid pin type'), 'ERR_INVALID_PIN_TYPE')\n      }\n    }\n\n    if (options.paths) {\n      // check the pinned state of specific hashes\n      let matched = false\n\n      for await (const { path } of normaliseInput(options.paths)) {\n        const { cid } = await resolvePath(repo, codecs, path)\n        const { reason, pinned, parent, metadata } = await repo.pins.isPinnedWithType(cid, type)\n\n        if (!pinned) {\n          throw errCode(new Error(`path '${path}' is not pinned`), 'ERR_NOT_PINNED')\n        }\n\n        switch (reason) {\n          case PinTypes.direct:\n          case PinTypes.recursive:\n            matched = true\n            yield toPin(reason, cid, metadata)\n            break\n          default:\n            matched = true\n            yield toPin(`${PinTypes.indirect} through ${parent}`, cid, metadata)\n        }\n      }\n\n      if (!matched) {\n        throw new Error('No match found')\n      }\n\n      return\n    }\n\n    if (type === PinTypes.recursive || type === PinTypes.all) {\n      for await (const { cid, metadata } of repo.pins.recursiveKeys()) {\n        yield toPin(PinTypes.recursive, cid, metadata)\n      }\n    }\n\n    if (type === PinTypes.indirect || type === PinTypes.all) {\n      // @ts-ignore - LsSettings & AbortOptions have no properties in common\n      // with type { preload?: boolean }\n      for await (const cid of repo.pins.indirectKeys(options)) {\n        yield toPin(PinTypes.indirect, cid)\n      }\n    }\n\n    if (type === PinTypes.direct || type === PinTypes.all) {\n      for await (const { cid, metadata } of repo.pins.directKeys()) {\n        yield toPin(PinTypes.direct, cid, metadata)\n      }\n    }\n  }\n\n  return withTimeoutOption(ls)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}