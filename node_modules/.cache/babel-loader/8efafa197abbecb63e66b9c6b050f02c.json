{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _slicedToArray = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar _createForOfIteratorHelper = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('../../types').NetworkService} config.network\n */\n\n\nmodule.exports = function (_ref) {\n  var network = _ref.network;\n\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API[\"addrs\"]}\n   */\n  function addrs() {\n    return _addrs.apply(this, arguments);\n  }\n\n  function _addrs() {\n    _addrs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var options,\n          peers,\n          _yield$network$use,\n          libp2p,\n          _iterator,\n          _step,\n          _step$value,\n          peerId,\n          peer,\n          _args = arguments;\n\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              // eslint-disable-line require-await\n              peers = [];\n              _context.next = 4;\n              return network.use(options);\n\n            case 4:\n              _yield$network$use = _context.sent;\n              libp2p = _yield$network$use.libp2p;\n              _iterator = _createForOfIteratorHelper(libp2p.peerStore.peers.entries());\n\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  _step$value = _slicedToArray(_step.value, 2), peerId = _step$value[0], peer = _step$value[1];\n                  peers.push({\n                    id: peerId,\n                    // @ts-ignore - libp2p types are missing\n                    addrs: peer.addresses.map(function (mi) {\n                      return mi.multiaddr;\n                    })\n                  });\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n\n              return _context.abrupt(\"return\", peers);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _addrs.apply(this, arguments);\n  }\n\n  return withTimeoutOption(addrs);\n};","map":{"version":3,"names":["withTimeoutOption","require","module","exports","network","addrs","options","peers","use","libp2p","peerStore","entries","peerId","peer","push","id","addresses","map","mi","multiaddr"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/swarm/addrs.js"],"sourcesContent":["'use strict'\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @param {Object} config\n * @param {import('../../types').NetworkService} config.network\n */\nmodule.exports = ({ network }) => {\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API[\"addrs\"]}\n   */\n  async function addrs (options = {}) { // eslint-disable-line require-await\n    const peers = []\n    const { libp2p } = await network.use(options)\n    for (const [peerId, peer] of libp2p.peerStore.peers.entries()) {\n      peers.push({\n        id: peerId,\n        // @ts-ignore - libp2p types are missing\n        addrs: peer.addresses.map((mi) => mi.multiaddr)\n      })\n    }\n    return peers\n  }\n\n  return withTimeoutOption(addrs)\n}\n"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,iBAAiB,GAAGC,OAAO,CAAC,yCAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,gBAAiB;EAAA,IAAdC,OAAc,QAAdA,OAAc;;EAChC;AACF;AACA;EAHkC,SAIjBC,KAJiB;IAAA;EAAA;;EAAA;IAAA,oEAIhC;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;;MAAA;QAAA;UAAA;YAAA;cAAsBC,OAAtB,2DAAgC,EAAhC;cAAsC;cAC9BC,KADR,GACgB,EADhB;cAAA;cAAA,OAE2BH,OAAO,CAACI,GAAR,CAAYF,OAAZ,CAF3B;;YAAA;cAAA;cAEUG,MAFV,sBAEUA,MAFV;cAAA,uCAG+BA,MAAM,CAACC,SAAP,CAAiBH,KAAjB,CAAuBI,OAAvB,EAH/B;;cAAA;gBAGE,oDAA+D;kBAAA,8CAAnDC,MAAmD,mBAA3CC,IAA2C;kBAC7DN,KAAK,CAACO,IAAN,CAAW;oBACTC,EAAE,EAAEH,MADK;oBAET;oBACAP,KAAK,EAAEQ,IAAI,CAACG,SAAL,CAAeC,GAAf,CAAmB,UAACC,EAAD;sBAAA,OAAQA,EAAE,CAACC,SAAX;oBAAA,CAAnB;kBAHE,CAAX;gBAKD;cATH;gBAAA;cAAA;gBAAA;cAAA;;cAAA,iCAUSZ,KAVT;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAJgC;IAAA;EAAA;;EAiBhC,OAAOP,iBAAiB,CAACK,KAAD,CAAxB;AACD,CAlBD"},"metadata":{},"sourceType":"script"}