{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar hamtSharding = require('hamt-sharding');\n\nvar dagPb = require('@ipld/dag-pb');\n\nvar murmur3 = require('@multiformats/murmur3');\n\nvar hashFn = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(buf) {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return murmur3.murmur3128.encode(buf);\n\n          case 2:\n            return _context.abrupt(\"return\", _context.sent.slice(0, 8).reverse());\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function hashFn(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar addLinksToHamtBucket = function addLinksToHamtBucket(links, bucket, rootBucket) {\n  return Promise.all(links.map(function (link) {\n    if (link.Name == null) {\n      throw new Error('Unexpected Link without a Name');\n    }\n\n    if (link.Name.length === 2) {\n      var pos = parseInt(link.Name, 16);\n      return bucket._putObjectAt(pos, new hamtSharding.Bucket({\n        hash: rootBucket._options.hash,\n        bits: rootBucket._options.bits\n      }, bucket, pos));\n    }\n\n    return rootBucket.put(link.Name.substring(2), true);\n  }));\n};\n\nvar toPrefix = function toPrefix(position) {\n  return position.toString(16).toUpperCase().padStart(2, '0').substring(0, 2);\n};\n\nvar toBucketPath = function toBucketPath(position) {\n  var bucket = position.bucket;\n  var path = [];\n\n  while (bucket._parent) {\n    path.push(bucket);\n    bucket = bucket._parent;\n  }\n\n  path.push(bucket);\n  return path.reverse();\n};\n\nvar findShardCid = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(node, name, blockstore, context, options) {\n    var rootBucket, position, prefix, bucketPath, link, block;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!context) {\n              rootBucket = hamtSharding.createHAMT({\n                hashFn: hashFn\n              });\n              context = {\n                rootBucket: rootBucket,\n                hamtDepth: 1,\n                lastBucket: rootBucket\n              };\n            }\n\n            _context2.next = 3;\n            return addLinksToHamtBucket(node.Links, context.lastBucket, context.rootBucket);\n\n          case 3:\n            _context2.next = 5;\n            return context.rootBucket._findNewBucketAndPos(name);\n\n          case 5:\n            position = _context2.sent;\n            prefix = toPrefix(position.pos);\n            bucketPath = toBucketPath(position);\n\n            if (bucketPath.length > context.hamtDepth) {\n              context.lastBucket = bucketPath[context.hamtDepth];\n              prefix = toPrefix(context.lastBucket._posAtParent);\n            }\n\n            link = node.Links.find(function (link) {\n              if (link.Name == null) {\n                return false;\n              }\n\n              var entryPrefix = link.Name.substring(0, 2);\n              var entryName = link.Name.substring(2);\n\n              if (entryPrefix !== prefix) {\n                return false;\n              }\n\n              if (entryName && entryName !== name) {\n                return false;\n              }\n\n              return true;\n            });\n\n            if (link) {\n              _context2.next = 12;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", null);\n\n          case 12:\n            if (!(link.Name != null && link.Name.substring(2) === name)) {\n              _context2.next = 14;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", link.Hash);\n\n          case 14:\n            context.hamtDepth++;\n            _context2.next = 17;\n            return blockstore.get(link.Hash, options);\n\n          case 17:\n            block = _context2.sent;\n            node = dagPb.decode(block);\n            return _context2.abrupt(\"return\", findShardCid(node, name, blockstore, context, options));\n\n          case 20:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function findShardCid(_x2, _x3, _x4, _x5, _x6) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nmodule.exports = findShardCid;","map":{"version":3,"names":["hamtSharding","require","dagPb","murmur3","hashFn","buf","murmur3128","encode","slice","reverse","addLinksToHamtBucket","links","bucket","rootBucket","Promise","all","map","link","Name","Error","length","pos","parseInt","_putObjectAt","Bucket","hash","_options","bits","put","substring","toPrefix","position","toString","toUpperCase","padStart","toBucketPath","path","_parent","push","findShardCid","node","name","blockstore","context","options","createHAMT","hamtDepth","lastBucket","Links","_findNewBucketAndPos","prefix","bucketPath","_posAtParent","find","entryPrefix","entryName","Hash","get","block","decode","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-unixfs-exporter/cjs/src/utils/find-cid-in-shard.js"],"sourcesContent":["'use strict';\n\nvar hamtSharding = require('hamt-sharding');\nvar dagPb = require('@ipld/dag-pb');\nvar murmur3 = require('@multiformats/murmur3');\n\nconst hashFn = async function (buf) {\n  return (await murmur3.murmur3128.encode(buf)).slice(0, 8).reverse();\n};\nconst addLinksToHamtBucket = (links, bucket, rootBucket) => {\n  return Promise.all(links.map(link => {\n    if (link.Name == null) {\n      throw new Error('Unexpected Link without a Name');\n    }\n    if (link.Name.length === 2) {\n      const pos = parseInt(link.Name, 16);\n      return bucket._putObjectAt(pos, new hamtSharding.Bucket({\n        hash: rootBucket._options.hash,\n        bits: rootBucket._options.bits\n      }, bucket, pos));\n    }\n    return rootBucket.put(link.Name.substring(2), true);\n  }));\n};\nconst toPrefix = position => {\n  return position.toString(16).toUpperCase().padStart(2, '0').substring(0, 2);\n};\nconst toBucketPath = position => {\n  let bucket = position.bucket;\n  const path = [];\n  while (bucket._parent) {\n    path.push(bucket);\n    bucket = bucket._parent;\n  }\n  path.push(bucket);\n  return path.reverse();\n};\nconst findShardCid = async (node, name, blockstore, context, options) => {\n  if (!context) {\n    const rootBucket = hamtSharding.createHAMT({ hashFn });\n    context = {\n      rootBucket,\n      hamtDepth: 1,\n      lastBucket: rootBucket\n    };\n  }\n  await addLinksToHamtBucket(node.Links, context.lastBucket, context.rootBucket);\n  const position = await context.rootBucket._findNewBucketAndPos(name);\n  let prefix = toPrefix(position.pos);\n  const bucketPath = toBucketPath(position);\n  if (bucketPath.length > context.hamtDepth) {\n    context.lastBucket = bucketPath[context.hamtDepth];\n    prefix = toPrefix(context.lastBucket._posAtParent);\n  }\n  const link = node.Links.find(link => {\n    if (link.Name == null) {\n      return false;\n    }\n    const entryPrefix = link.Name.substring(0, 2);\n    const entryName = link.Name.substring(2);\n    if (entryPrefix !== prefix) {\n      return false;\n    }\n    if (entryName && entryName !== name) {\n      return false;\n    }\n    return true;\n  });\n  if (!link) {\n    return null;\n  }\n  if (link.Name != null && link.Name.substring(2) === name) {\n    return link.Hash;\n  }\n  context.hamtDepth++;\n  const block = await blockstore.get(link.Hash, options);\n  node = dagPb.decode(block);\n  return findShardCid(node, name, blockstore, context, options);\n};\n\nmodule.exports = findShardCid;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}