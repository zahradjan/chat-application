{"ast":null,"code":"'use strict';\n\nconst {\n  murmur3128\n} = require('@multiformats/murmur3');\n\nmodule.exports = {\n  hamtHashCode: murmur3128.code,\n  hamtBucketBits: 8,\n\n  /**\n   * @param {Uint8Array} buf\n   */\n  async hamtHashFn(buf) {\n    return (await murmur3128.encode(buf) // Murmur3 outputs 128 bit but, accidentally, IPFS Go's\n    // implementation only uses the first 64, so we must do the same\n    // for parity..\n    ).slice(0, 8) // Invert buffer because that's how Go impl does it\n    .reverse();\n  }\n\n};","map":{"version":3,"names":["murmur3128","require","module","exports","hamtHashCode","code","hamtBucketBits","hamtHashFn","buf","encode","slice","reverse"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/files/utils/hamt-constants.js"],"sourcesContent":["'use strict'\n\nconst { murmur3128 } = require('@multiformats/murmur3')\n\nmodule.exports = {\n  hamtHashCode: murmur3128.code,\n  hamtBucketBits: 8,\n  /**\n   * @param {Uint8Array} buf\n   */\n  async hamtHashFn (buf) {\n    return (await murmur3128.encode(buf))\n      // Murmur3 outputs 128 bit but, accidentally, IPFS Go's\n      // implementation only uses the first 64, so we must do the same\n      // for parity..\n      .slice(0, 8)\n      // Invert buffer because that's how Go impl does it\n      .reverse()\n  }\n}\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA;AAAF,IAAiBC,OAAO,CAAC,uBAAD,CAA9B;;AAEAC,MAAM,CAACC,OAAP,GAAiB;EACfC,YAAY,EAAEJ,UAAU,CAACK,IADV;EAEfC,cAAc,EAAE,CAFD;;EAGf;AACF;AACA;EACE,MAAMC,UAAN,CAAkBC,GAAlB,EAAuB;IACrB,OAAO,CAAC,MAAMR,UAAU,CAACS,MAAX,CAAkBD,GAAlB,CAAP,CACL;IACA;IACA;IAHK,EAIJE,KAJI,CAIE,CAJF,EAIK,CAJL,EAKL;IALK,CAMJC,OANI,EAAP;EAOD;;AAdc,CAAjB"},"metadata":{},"sourceType":"script"}