{"ast":null,"code":"var _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _asyncIterator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar BufferList = require('bl/BufferList');\n\nvar TypeDefault = {\n  string: function string() {\n    return '';\n  },\n  buffer: function buffer() {\n    return BufferList();\n  }\n};\n\nmodule.exports = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(source, options) {\n    var res, type, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, chunk;\n\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = options || {};\n\n            if (!(options.type && !TypeDefault[options.type])) {\n              _context.next = 3;\n              break;\n            }\n\n            throw new Error(\"invalid type \\\"\".concat(options.type, \"\\\"\"));\n\n          case 3:\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context.prev = 5;\n            _iterator = _asyncIterator(source);\n\n          case 7:\n            _context.next = 9;\n            return _iterator.next();\n\n          case 9:\n            if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n              _context.next = 16;\n              break;\n            }\n\n            chunk = _step.value;\n\n            if (!res) {\n              type = options.type || (typeof chunk === 'string' ? 'string' : 'buffer');\n              res = TypeDefault[type]();\n            }\n\n            if (type === 'string') {\n              res += chunk;\n            } else {\n              res.append(chunk);\n            }\n\n          case 13:\n            _iteratorAbruptCompletion = false;\n            _context.next = 7;\n            break;\n\n          case 16:\n            _context.next = 22;\n            break;\n\n          case 18:\n            _context.prev = 18;\n            _context.t0 = _context[\"catch\"](5);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 22:\n            _context.prev = 22;\n            _context.prev = 23;\n\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context.next = 27;\n              break;\n            }\n\n            _context.next = 27;\n            return _iterator.return();\n\n          case 27:\n            _context.prev = 27;\n\n            if (!_didIteratorError) {\n              _context.next = 30;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 30:\n            return _context.finish(27);\n\n          case 31:\n            return _context.finish(22);\n\n          case 32:\n            return _context.abrupt(\"return\", res || TypeDefault[options.type || 'buffer']());\n\n          case 33:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[5, 18, 22, 32], [23,, 27, 31]]);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["BufferList","require","TypeDefault","string","buffer","module","exports","source","options","type","Error","chunk","res","append"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/it-concat/index.js"],"sourcesContent":["const BufferList = require('bl/BufferList')\n\nconst TypeDefault = {\n  string: () => '',\n  buffer: () => BufferList()\n}\n\nmodule.exports = async (source, options) => {\n  options = options || {}\n\n  if (options.type && !TypeDefault[options.type]) {\n    throw new Error(`invalid type \"${options.type}\"`)\n  }\n\n  let res, type\n  for await (const chunk of source) {\n    if (!res) {\n      type = options.type || (typeof chunk === 'string' ? 'string' : 'buffer')\n      res = TypeDefault[type]()\n    }\n\n    if (type === 'string') {\n      res += chunk\n    } else {\n      res.append(chunk)\n    }\n  }\n\n  return res || TypeDefault[options.type || 'buffer']()\n}\n"],"mappings":";;;;;;AAAA,IAAMA,UAAU,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAMC,WAAW,GAAG;EAClBC,MAAM,EAAE;IAAA,OAAM,EAAN;EAAA,CADU;EAElBC,MAAM,EAAE;IAAA,OAAMJ,UAAU,EAAhB;EAAA;AAFU,CAApB;;AAKAK,MAAM,CAACC,OAAP;EAAA,sEAAiB,iBAAOC,MAAP,EAAeC,OAAf;IAAA;;IAAA;MAAA;QAAA;UAAA;YACfA,OAAO,GAAGA,OAAO,IAAI,EAArB;;YADe,MAGXA,OAAO,CAACC,IAAR,IAAgB,CAACP,WAAW,CAACM,OAAO,CAACC,IAAT,CAHjB;cAAA;cAAA;YAAA;;YAAA,MAIP,IAAIC,KAAJ,0BAA2BF,OAAO,CAACC,IAAnC,QAJO;;UAAA;YAAA;YAAA;YAAA;YAAA,2BAQWF,MARX;;UAAA;YAAA;YAAA;;UAAA;YAAA;cAAA;cAAA;YAAA;;YAQEI,KARF;;YASb,IAAI,CAACC,GAAL,EAAU;cACRH,IAAI,GAAGD,OAAO,CAACC,IAAR,KAAiB,OAAOE,KAAP,KAAiB,QAAjB,GAA4B,QAA5B,GAAuC,QAAxD,CAAP;cACAC,GAAG,GAAGV,WAAW,CAACO,IAAD,CAAX,EAAN;YACD;;YAED,IAAIA,IAAI,KAAK,QAAb,EAAuB;cACrBG,GAAG,IAAID,KAAP;YACD,CAFD,MAEO;cACLC,GAAG,CAACC,MAAJ,CAAWF,KAAX;YACD;;UAlBY;YAAA;YAAA;YAAA;;UAAA;YAAA;YAAA;;UAAA;YAAA;YAAA;YAAA;YAAA;;UAAA;YAAA;YAAA;;YAAA;cAAA;cAAA;YAAA;;YAAA;YAAA;;UAAA;YAAA;;YAAA;cAAA;cAAA;YAAA;;YAAA;;UAAA;YAAA;;UAAA;YAAA;;UAAA;YAAA,iCAqBRC,GAAG,IAAIV,WAAW,CAACM,OAAO,CAACC,IAAR,IAAgB,QAAjB,CAAX,EArBC;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAjB;;EAAA;IAAA;EAAA;AAAA"},"metadata":{},"sourceType":"script"}