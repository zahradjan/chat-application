{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _objectSpread = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {ConfigAPI[\"set\"]}\n   */\n  var set = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(key, value) {\n      var options,\n          params,\n          res,\n          _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n\n              if (!(typeof key !== 'string')) {\n                _context.next = 3;\n                break;\n              }\n\n              throw new Error('Invalid key type');\n\n            case 3:\n              params = _objectSpread(_objectSpread({}, options), encodeParam(key, value));\n              _context.next = 6;\n              return api.post('config', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(params),\n                headers: options.headers\n              });\n\n            case 6:\n              res = _context.sent;\n              _context.next = 9;\n              return res.text();\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function set(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return set;\n});\n/**\n * @param {*} key\n * @param {*} value\n */\n\nvar encodeParam = function encodeParam(key, value) {\n  switch (typeof value) {\n    case 'boolean':\n      return {\n        arg: [key, value.toString()],\n        bool: true\n      };\n\n    case 'string':\n      return {\n        arg: [key, value]\n      };\n\n    default:\n      return {\n        arg: [key, JSON.stringify(value)],\n        json: true\n      };\n  }\n};","map":{"version":3,"names":["configure","require","toUrlSearchParams","module","exports","api","set","key","value","options","Error","params","encodeParam","post","signal","searchParams","headers","res","text","arg","toString","bool","JSON","stringify","json"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-http-client/src/config/set.js"],"sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {ConfigAPI[\"set\"]}\n   */\n  const set = async (key, value, options = {}) => {\n    if (typeof key !== 'string') {\n      throw new Error('Invalid key type')\n    }\n\n    const params = {\n      ...options,\n      ...encodeParam(key, value)\n    }\n\n    const res = await api.post('config', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(params),\n      headers: options.headers\n    })\n\n    await res.text()\n  }\n\n  return set\n})\n\n/**\n * @param {*} key\n * @param {*} value\n */\nconst encodeParam = (key, value) => {\n  switch (typeof value) {\n    case 'boolean':\n      return { arg: [key, value.toString()], bool: true }\n    case 'string':\n      return { arg: [key, value] }\n    default:\n      return { arg: [key, JSON.stringify(value)], json: true }\n  }\n}\n"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMC,iBAAiB,GAAGD,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAE,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAAC,UAAAK,GAAG,EAAI;EAChC;AACF;AACA;EACE,IAAMC,GAAG;IAAA,sEAAG,iBAAOC,GAAP,EAAYC,KAAZ;MAAA;MAAA;MAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAmBC,OAAnB,2DAA6B,EAA7B;;cAAA,MACN,OAAOF,GAAP,KAAe,QADT;gBAAA;gBAAA;cAAA;;cAAA,MAEF,IAAIG,KAAJ,CAAU,kBAAV,CAFE;;YAAA;cAKJC,MALI,mCAMLF,OANK,GAOLG,WAAW,CAACL,GAAD,EAAMC,KAAN,CAPN;cAAA;cAAA,OAUQH,GAAG,CAACQ,IAAJ,CAAS,QAAT,EAAmB;gBACnCC,MAAM,EAAEL,OAAO,CAACK,MADmB;gBAEnCC,YAAY,EAAEb,iBAAiB,CAACS,MAAD,CAFI;gBAGnCK,OAAO,EAAEP,OAAO,CAACO;cAHkB,CAAnB,CAVR;;YAAA;cAUJC,GAVI;cAAA;cAAA,OAgBJA,GAAG,CAACC,IAAJ,EAhBI;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAH;;IAAA,gBAAHZ,GAAG;MAAA;IAAA;EAAA,GAAT;;EAmBA,OAAOA,GAAP;AACD,CAxByB,CAA1B;AA0BA;AACA;AACA;AACA;;AACA,IAAMM,WAAW,GAAG,SAAdA,WAAc,CAACL,GAAD,EAAMC,KAAN,EAAgB;EAClC,QAAQ,OAAOA,KAAf;IACE,KAAK,SAAL;MACE,OAAO;QAAEW,GAAG,EAAE,CAACZ,GAAD,EAAMC,KAAK,CAACY,QAAN,EAAN,CAAP;QAAgCC,IAAI,EAAE;MAAtC,CAAP;;IACF,KAAK,QAAL;MACE,OAAO;QAAEF,GAAG,EAAE,CAACZ,GAAD,EAAMC,KAAN;MAAP,CAAP;;IACF;MACE,OAAO;QAAEW,GAAG,EAAE,CAACZ,GAAD,EAAMe,IAAI,CAACC,SAAL,CAAef,KAAf,CAAN,CAAP;QAAqCgB,IAAI,EAAE;MAA3C,CAAP;EANJ;AAQD,CATD"},"metadata":{},"sourceType":"script"}