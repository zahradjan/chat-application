{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getGossipPeers = void 0;\n\nvar utils_1 = require(\"./utils\");\n/**\n * Given a topic, returns up to count peers subscribed to that topic\n * that pass an optional filter function\n *\n * @param {Gossipsub} router\n * @param {String} topic\n * @param {Number} count\n * @param {Function} [filter] a function to filter acceptable peers\n * @returns {Set<string>}\n *\n */\n\n\nfunction getGossipPeers(router, topic, count) {\n  var filter = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {\n    return true;\n  };\n  var peersInTopic = router.topics.get(topic);\n\n  if (!peersInTopic) {\n    return new Set();\n  } // Adds all peers using our protocol\n  // that also pass the filter function\n\n\n  var peers = [];\n  peersInTopic.forEach(function (id) {\n    var peerStreams = router.peers.get(id);\n\n    if (!peerStreams) {\n      return;\n    }\n\n    if (utils_1.hasGossipProtocol(peerStreams.protocol) && filter(id)) {\n      peers.push(id);\n    }\n  }); // Pseudo-randomly shuffles peers\n\n  peers = utils_1.shuffle(peers);\n\n  if (count > 0 && peers.length > count) {\n    peers = peers.slice(0, count);\n  }\n\n  return new Set(peers);\n}\n\nexports.getGossipPeers = getGossipPeers;","map":{"version":3,"names":["Object","defineProperty","exports","value","getGossipPeers","utils_1","require","router","topic","count","filter","peersInTopic","topics","get","Set","peers","forEach","id","peerStreams","hasGossipProtocol","protocol","push","shuffle","length","slice"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-gossipsub/src/get-gossip-peers.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getGossipPeers = void 0;\nconst utils_1 = require(\"./utils\");\n/**\n * Given a topic, returns up to count peers subscribed to that topic\n * that pass an optional filter function\n *\n * @param {Gossipsub} router\n * @param {String} topic\n * @param {Number} count\n * @param {Function} [filter] a function to filter acceptable peers\n * @returns {Set<string>}\n *\n */\nfunction getGossipPeers(router, topic, count, filter = () => true) {\n    const peersInTopic = router.topics.get(topic);\n    if (!peersInTopic) {\n        return new Set();\n    }\n    // Adds all peers using our protocol\n    // that also pass the filter function\n    let peers = [];\n    peersInTopic.forEach((id) => {\n        const peerStreams = router.peers.get(id);\n        if (!peerStreams) {\n            return;\n        }\n        if (utils_1.hasGossipProtocol(peerStreams.protocol) &&\n            filter(id)) {\n            peers.push(id);\n        }\n    });\n    // Pseudo-randomly shuffles peers\n    peers = utils_1.shuffle(peers);\n    if (count > 0 && peers.length > count) {\n        peers = peers.slice(0, count);\n    }\n    return new Set(peers);\n}\nexports.getGossipPeers = getGossipPeers;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,cAAR,GAAyB,KAAK,CAA9B;;AACA,IAAMC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,cAAT,CAAwBG,MAAxB,EAAgCC,KAAhC,EAAuCC,KAAvC,EAAmE;EAAA,IAArBC,MAAqB,uEAAZ;IAAA,OAAM,IAAN;EAAA,CAAY;EAC/D,IAAMC,YAAY,GAAGJ,MAAM,CAACK,MAAP,CAAcC,GAAd,CAAkBL,KAAlB,CAArB;;EACA,IAAI,CAACG,YAAL,EAAmB;IACf,OAAO,IAAIG,GAAJ,EAAP;EACH,CAJ8D,CAK/D;EACA;;;EACA,IAAIC,KAAK,GAAG,EAAZ;EACAJ,YAAY,CAACK,OAAb,CAAqB,UAACC,EAAD,EAAQ;IACzB,IAAMC,WAAW,GAAGX,MAAM,CAACQ,KAAP,CAAaF,GAAb,CAAiBI,EAAjB,CAApB;;IACA,IAAI,CAACC,WAAL,EAAkB;MACd;IACH;;IACD,IAAIb,OAAO,CAACc,iBAAR,CAA0BD,WAAW,CAACE,QAAtC,KACAV,MAAM,CAACO,EAAD,CADV,EACgB;MACZF,KAAK,CAACM,IAAN,CAAWJ,EAAX;IACH;EACJ,CATD,EAR+D,CAkB/D;;EACAF,KAAK,GAAGV,OAAO,CAACiB,OAAR,CAAgBP,KAAhB,CAAR;;EACA,IAAIN,KAAK,GAAG,CAAR,IAAaM,KAAK,CAACQ,MAAN,GAAed,KAAhC,EAAuC;IACnCM,KAAK,GAAGA,KAAK,CAACS,KAAN,CAAY,CAAZ,EAAef,KAAf,CAAR;EACH;;EACD,OAAO,IAAIK,GAAJ,CAAQC,KAAR,CAAP;AACH;;AACDb,OAAO,CAACE,cAAR,GAAyBA,cAAzB"},"metadata":{},"sourceType":"script"}