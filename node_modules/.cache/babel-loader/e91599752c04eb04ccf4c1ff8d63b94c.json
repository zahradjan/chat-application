{"ast":null,"code":"'use strict'; // @ts-ignore nat-api does not export types\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _createForOfIteratorHelper = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _objectWithoutProperties = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/objectWithoutProperties.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _excluded = [\"peerId\", \"addressManager\", \"transportManager\"];\n\nvar NatAPI = require('@motrix/nat-api');\n\nvar debug = require('debug');\n\nvar _require = require('es6-promisify'),\n    promisify = _require.promisify;\n\nvar _require2 = require('multiaddr'),\n    Multiaddr = _require2.Multiaddr;\n\nvar log = Object.assign(debug('libp2p:nat'), {\n  error: debug('libp2p:nat:err')\n});\n\nvar _require3 = require('wherearewe'),\n    isBrowser = _require3.isBrowser;\n\nvar retry = require('p-retry'); // @ts-ignore private-api does not export types\n\n\nvar isPrivateIp = require('private-ip');\n\nvar pkg = require('../package.json');\n\nvar errcode = require('err-code');\n\nvar _require4 = require('./errors'),\n    ERR_INVALID_PARAMETERS = _require4.codes.ERR_INVALID_PARAMETERS;\n\nvar isLoopback = require('libp2p-utils/src/multiaddr/is-loopback');\n\nvar DEFAULT_TTL = 7200;\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('./transport-manager')} TransportManager\n * @typedef {import('./address-manager')} AddressManager\n */\n\n/**\n * @typedef {Object} NatManagerProperties\n * @property {PeerId} peerId - The peer ID of the current node\n * @property {TransportManager} transportManager - A transport manager\n * @property {AddressManager} addressManager - An address manager\n *\n * @typedef {Object} NatManagerOptions\n * @property {boolean} enabled - Whether to enable the NAT manager\n * @property {string} [externalIp] - Pass a value to use instead of auto-detection\n * @property {string} [description] - A string value to use for the port mapping description on the gateway\n * @property {number} [ttl = DEFAULT_TTL] - How long UPnP port mappings should last for in seconds (minimum 1200)\n * @property {boolean} [keepAlive] - Whether to automatically refresh UPnP port mappings when their TTL is reached\n * @property {string} [gateway] - Pass a value to use instead of auto-detection\n * @property {object} [pmp] - PMP options\n * @property {boolean} [pmp.enabled] - Whether to enable PMP as well as UPnP\n */\n\nfunction highPort() {\n  var min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1024;\n  var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 65535;\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nvar NatManager = /*#__PURE__*/function () {\n  /**\n   * @class\n   * @param {NatManagerProperties & NatManagerOptions} options\n   */\n  function NatManager(_ref) {\n    var peerId = _ref.peerId,\n        addressManager = _ref.addressManager,\n        transportManager = _ref.transportManager,\n        options = _objectWithoutProperties(_ref, _excluded);\n\n    _classCallCheck(this, NatManager);\n\n    this._peerId = peerId;\n    this._addressManager = addressManager;\n    this._transportManager = transportManager;\n    this._enabled = options.enabled;\n    this._externalIp = options.externalIp;\n    this._options = {\n      description: options.description || \"\".concat(pkg.name, \"@\").concat(pkg.version, \" \").concat(this._peerId),\n      ttl: options.ttl || DEFAULT_TTL,\n      autoUpdate: options.keepAlive || true,\n      gateway: options.gateway,\n      enablePMP: Boolean(options.pmp && options.pmp.enabled)\n    };\n\n    if (this._options.ttl < DEFAULT_TTL) {\n      throw errcode(new Error(\"NatManager ttl should be at least \".concat(DEFAULT_TTL, \" seconds\")), ERR_INVALID_PARAMETERS);\n    }\n  }\n  /**\n   * Starts the NAT manager\n   */\n\n\n  _createClass(NatManager, [{\n    key: \"start\",\n    value: function start() {\n      if (isBrowser || !this._enabled) {\n        return;\n      } // done async to not slow down startup\n\n\n      this._start().catch(function (err) {\n        // hole punching errors are non-fatal\n        log.error(err);\n      });\n    }\n  }, {\n    key: \"_start\",\n    value: function () {\n      var _start2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var addrs, _iterator, _step, addr, _addr$toOptions, family, host, port, transport, client, publicIp, publicPort;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                addrs = this._transportManager.getAddrs();\n                _iterator = _createForOfIteratorHelper(addrs);\n                _context.prev = 2;\n\n                _iterator.s();\n\n              case 4:\n                if ((_step = _iterator.n()).done) {\n                  _context.next = 29;\n                  break;\n                }\n\n                addr = _step.value;\n                // try to open uPnP ports for each thin waist address\n                _addr$toOptions = addr.toOptions(), family = _addr$toOptions.family, host = _addr$toOptions.host, port = _addr$toOptions.port, transport = _addr$toOptions.transport;\n\n                if (!(!addr.isThinWaistAddress() || transport !== 'tcp')) {\n                  _context.next = 9;\n                  break;\n                }\n\n                return _context.abrupt(\"continue\", 27);\n\n              case 9:\n                if (!isLoopback(addr)) {\n                  _context.next = 11;\n                  break;\n                }\n\n                return _context.abrupt(\"continue\", 27);\n\n              case 11:\n                if (!(family !== 4)) {\n                  _context.next = 13;\n                  break;\n                }\n\n                return _context.abrupt(\"continue\", 27);\n\n              case 13:\n                client = this._getClient();\n                _context.t0 = this._externalIp;\n\n                if (_context.t0) {\n                  _context.next = 19;\n                  break;\n                }\n\n                _context.next = 18;\n                return client.externalIp();\n\n              case 18:\n                _context.t0 = _context.sent;\n\n              case 19:\n                publicIp = _context.t0;\n\n                if (!isPrivateIp(publicIp)) {\n                  _context.next = 22;\n                  break;\n                }\n\n                throw new Error(\"\".concat(publicIp, \" is private - please set config.nat.externalIp to an externally routable IP or ensure you are not behind a double NAT\"));\n\n              case 22:\n                publicPort = highPort();\n                log(\"opening uPnP connection from \".concat(publicIp, \":\").concat(publicPort, \" to \").concat(host, \":\").concat(port));\n                _context.next = 26;\n                return client.map({\n                  publicPort: publicPort,\n                  privatePort: port,\n                  protocol: transport.toUpperCase()\n                });\n\n              case 26:\n                this._addressManager.addObservedAddr(Multiaddr.fromNodeAddress({\n                  family: 4,\n                  address: publicIp,\n                  port: publicPort\n                }, transport));\n\n              case 27:\n                _context.next = 4;\n                break;\n\n              case 29:\n                _context.next = 34;\n                break;\n\n              case 31:\n                _context.prev = 31;\n                _context.t1 = _context[\"catch\"](2);\n\n                _iterator.e(_context.t1);\n\n              case 34:\n                _context.prev = 34;\n\n                _iterator.f();\n\n                return _context.finish(34);\n\n              case 37:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2, 31, 34, 37]]);\n      }));\n\n      function _start() {\n        return _start2.apply(this, arguments);\n      }\n\n      return _start;\n    }()\n  }, {\n    key: \"_getClient\",\n    value: function _getClient() {\n      if (this._client) {\n        return this._client;\n      }\n\n      var client = new NatAPI(this._options);\n      /** @type {(...any: any) => any} */\n\n      var _map = promisify(client.map.bind(client));\n      /** @type {(...any: any) => any} */\n\n\n      var _destroy = promisify(client.destroy.bind(client));\n      /** @type {(...any: any) => any} */\n\n\n      var _externalIp = promisify(client.externalIp.bind(client)); // these are all network operations so add a retry\n\n\n      this._client = {\n        /**\n         * @param  {...any} args\n         * @returns {Promise<void>}\n         */\n        map: function map() {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          return retry(function () {\n            return _map.apply(void 0, args);\n          }, {\n            onFailedAttempt: log.error,\n            unref: true\n          });\n        },\n\n        /**\n         * @param  {...any} args\n         * @returns {Promise<void>}\n         */\n        destroy: function destroy() {\n          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n            args[_key2] = arguments[_key2];\n          }\n\n          return retry(function () {\n            return _destroy.apply(void 0, args);\n          }, {\n            onFailedAttempt: log.error,\n            unref: true\n          });\n        },\n\n        /**\n         * @param  {...any} args\n         * @returns {Promise<string>}\n         */\n        externalIp: function externalIp() {\n          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n            args[_key3] = arguments[_key3];\n          }\n\n          return retry(function () {\n            return _externalIp.apply(void 0, args);\n          }, {\n            onFailedAttempt: log.error,\n            unref: true\n          });\n        }\n      };\n      return this._client;\n    }\n    /**\n     * Stops the NAT manager\n     *\n     * @async\n     */\n\n  }, {\n    key: \"stop\",\n    value: function () {\n      var _stop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(isBrowser || !this._client)) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 2:\n                _context2.prev = 2;\n                _context2.next = 5;\n                return this._client.destroy();\n\n              case 5:\n                this._client = null;\n                _context2.next = 11;\n                break;\n\n              case 8:\n                _context2.prev = 8;\n                _context2.t0 = _context2[\"catch\"](2);\n                log.error(_context2.t0);\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[2, 8]]);\n      }));\n\n      function stop() {\n        return _stop.apply(this, arguments);\n      }\n\n      return stop;\n    }()\n  }]);\n\n  return NatManager;\n}();\n\nmodule.exports = NatManager;","map":{"version":3,"names":["NatAPI","require","debug","promisify","Multiaddr","log","Object","assign","error","isBrowser","retry","isPrivateIp","pkg","errcode","ERR_INVALID_PARAMETERS","codes","isLoopback","DEFAULT_TTL","highPort","min","max","Math","floor","random","NatManager","peerId","addressManager","transportManager","options","_peerId","_addressManager","_transportManager","_enabled","enabled","_externalIp","externalIp","_options","description","name","version","ttl","autoUpdate","keepAlive","gateway","enablePMP","Boolean","pmp","Error","_start","catch","err","addrs","getAddrs","addr","toOptions","family","host","port","transport","isThinWaistAddress","client","_getClient","publicIp","publicPort","map","privatePort","protocol","toUpperCase","addObservedAddr","fromNodeAddress","address","_client","bind","destroy","args","onFailedAttempt","unref","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p/src/nat-manager.js"],"sourcesContent":["'use strict'\n\n// @ts-ignore nat-api does not export types\nconst NatAPI = require('@motrix/nat-api')\nconst debug = require('debug')\nconst { promisify } = require('es6-promisify')\nconst { Multiaddr } = require('multiaddr')\nconst log = Object.assign(debug('libp2p:nat'), {\n  error: debug('libp2p:nat:err')\n})\nconst { isBrowser } = require('wherearewe')\nconst retry = require('p-retry')\n// @ts-ignore private-api does not export types\nconst isPrivateIp = require('private-ip')\nconst pkg = require('../package.json')\nconst errcode = require('err-code')\nconst {\n  codes: { ERR_INVALID_PARAMETERS }\n} = require('./errors')\nconst isLoopback = require('libp2p-utils/src/multiaddr/is-loopback')\n\nconst DEFAULT_TTL = 7200\n\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('./transport-manager')} TransportManager\n * @typedef {import('./address-manager')} AddressManager\n */\n\n/**\n * @typedef {Object} NatManagerProperties\n * @property {PeerId} peerId - The peer ID of the current node\n * @property {TransportManager} transportManager - A transport manager\n * @property {AddressManager} addressManager - An address manager\n *\n * @typedef {Object} NatManagerOptions\n * @property {boolean} enabled - Whether to enable the NAT manager\n * @property {string} [externalIp] - Pass a value to use instead of auto-detection\n * @property {string} [description] - A string value to use for the port mapping description on the gateway\n * @property {number} [ttl = DEFAULT_TTL] - How long UPnP port mappings should last for in seconds (minimum 1200)\n * @property {boolean} [keepAlive] - Whether to automatically refresh UPnP port mappings when their TTL is reached\n * @property {string} [gateway] - Pass a value to use instead of auto-detection\n * @property {object} [pmp] - PMP options\n * @property {boolean} [pmp.enabled] - Whether to enable PMP as well as UPnP\n */\n\nfunction highPort (min = 1024, max = 65535) {\n  return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\nclass NatManager {\n  /**\n   * @class\n   * @param {NatManagerProperties & NatManagerOptions} options\n   */\n  constructor ({ peerId, addressManager, transportManager, ...options }) {\n    this._peerId = peerId\n    this._addressManager = addressManager\n    this._transportManager = transportManager\n\n    this._enabled = options.enabled\n    this._externalIp = options.externalIp\n    this._options = {\n      description: options.description || `${pkg.name}@${pkg.version} ${this._peerId}`,\n      ttl: options.ttl || DEFAULT_TTL,\n      autoUpdate: options.keepAlive || true,\n      gateway: options.gateway,\n      enablePMP: Boolean(options.pmp && options.pmp.enabled)\n    }\n\n    if (this._options.ttl < DEFAULT_TTL) {\n      throw errcode(new Error(`NatManager ttl should be at least ${DEFAULT_TTL} seconds`), ERR_INVALID_PARAMETERS)\n    }\n  }\n\n  /**\n   * Starts the NAT manager\n   */\n  start () {\n    if (isBrowser || !this._enabled) {\n      return\n    }\n\n    // done async to not slow down startup\n    this._start().catch((err) => {\n      // hole punching errors are non-fatal\n      log.error(err)\n    })\n  }\n\n  async _start () {\n    const addrs = this._transportManager.getAddrs()\n\n    for (const addr of addrs) {\n      // try to open uPnP ports for each thin waist address\n      const { family, host, port, transport } = addr.toOptions()\n\n      if (!addr.isThinWaistAddress() || transport !== 'tcp') {\n        // only bare tcp addresses\n        // eslint-disable-next-line no-continue\n        continue\n      }\n\n      if (isLoopback(addr)) {\n        // eslint-disable-next-line no-continue\n        continue\n      }\n\n      if (family !== 4) {\n        // ignore ipv6\n        // eslint-disable-next-line no-continue\n        continue\n      }\n\n      const client = this._getClient()\n      const publicIp = this._externalIp || await client.externalIp()\n\n      if (isPrivateIp(publicIp)) {\n        throw new Error(`${publicIp} is private - please set config.nat.externalIp to an externally routable IP or ensure you are not behind a double NAT`)\n      }\n\n      const publicPort = highPort()\n\n      log(`opening uPnP connection from ${publicIp}:${publicPort} to ${host}:${port}`)\n\n      await client.map({\n        publicPort,\n        privatePort: port,\n        protocol: transport.toUpperCase()\n      })\n\n      this._addressManager.addObservedAddr(Multiaddr.fromNodeAddress({\n        family: 4,\n        address: publicIp,\n        port: publicPort\n      }, transport))\n    }\n  }\n\n  _getClient () {\n    if (this._client) {\n      return this._client\n    }\n\n    const client = new NatAPI(this._options)\n\n    /** @type {(...any: any) => any} */\n    const map = promisify(client.map.bind(client))\n    /** @type {(...any: any) => any} */\n    const destroy = promisify(client.destroy.bind(client))\n    /** @type {(...any: any) => any} */\n    const externalIp = promisify(client.externalIp.bind(client))\n\n    // these are all network operations so add a retry\n    this._client = {\n      /**\n       * @param  {...any} args\n       * @returns {Promise<void>}\n       */\n      map: (...args) => retry(() => map(...args), { onFailedAttempt: log.error, unref: true }),\n\n      /**\n       * @param  {...any} args\n       * @returns {Promise<void>}\n       */\n      destroy: (...args) => retry(() => destroy(...args), { onFailedAttempt: log.error, unref: true }),\n\n      /**\n       * @param  {...any} args\n       * @returns {Promise<string>}\n       */\n      externalIp: (...args) => retry(() => externalIp(...args), { onFailedAttempt: log.error, unref: true })\n    }\n\n    return this._client\n  }\n\n  /**\n   * Stops the NAT manager\n   *\n   * @async\n   */\n  async stop () {\n    if (isBrowser || !this._client) {\n      return\n    }\n\n    try {\n      await this._client.destroy()\n      this._client = null\n    } catch (err) {\n      log.error(err)\n    }\n  }\n}\n\nmodule.exports = NatManager\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}