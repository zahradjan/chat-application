{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar repoInit = require('./init');\n\nvar _require = require('../errors'),\n    MissingRepoOptionsError = _require.MissingRepoOptionsError,\n    NotInitializedRepoError = _require.NotInitializedRepoError;\n\nvar _require2 = require('../utils'),\n    VERSION_KEY = _require2.VERSION_KEY;\n\nvar _require3 = require('uint8arrays/from-string'),\n    uint8ArrayFromString = _require3.fromString;\n\nvar _require4 = require('uint8arrays/to-string'),\n    uint8ArrayToString = _require4.toString;\n/**\n * Function that has responsibility to retrieve version of repo from its root datastore's instance.\n * This function needs to be cross-repo-version functional to be able to fetch any version number,\n * even in case of change of repo's versioning.\n *\n * @param {import('../types').Backends} backends\n */\n\n\nfunction getVersion(_x) {\n  return _getVersion.apply(this, arguments);\n}\n/**\n * Function for setting a version in cross-repo-version manner.\n *\n * @param {number} version\n * @param {import('../types').Backends} backends\n */\n\n\nfunction _getVersion() {\n  _getVersion = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(backends) {\n    var store;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return repoInit.isRepoInitialized(backends);\n\n          case 2:\n            if (_context.sent) {\n              _context.next = 4;\n              break;\n            }\n\n            throw new NotInitializedRepoError('Repo is not initialized!');\n\n          case 4:\n            store = backends.root;\n            _context.next = 7;\n            return store.open();\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = parseInt;\n            _context.t1 = uint8ArrayToString;\n            _context.next = 12;\n            return store.get(VERSION_KEY);\n\n          case 12:\n            _context.t2 = _context.sent;\n            _context.t3 = (0, _context.t1)(_context.t2);\n            return _context.abrupt(\"return\", (0, _context.t0)(_context.t3));\n\n          case 15:\n            _context.prev = 15;\n            _context.next = 18;\n            return store.close();\n\n          case 18:\n            return _context.finish(15);\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[7,, 15, 19]]);\n  }));\n  return _getVersion.apply(this, arguments);\n}\n\nfunction setVersion(_x2, _x3) {\n  return _setVersion.apply(this, arguments);\n}\n\nfunction _setVersion() {\n  _setVersion = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(version, backends) {\n    var store;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (backends) {\n              _context2.next = 2;\n              break;\n            }\n\n            throw new MissingRepoOptionsError('Please pass repo options when trying to open a repo');\n\n          case 2:\n            store = backends.root;\n            _context2.next = 5;\n            return store.open();\n\n          case 5:\n            _context2.next = 7;\n            return store.put(VERSION_KEY, uint8ArrayFromString(String(version)));\n\n          case 7:\n            _context2.next = 9;\n            return store.close();\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _setVersion.apply(this, arguments);\n}\n\nmodule.exports = {\n  getVersion: getVersion,\n  setVersion: setVersion\n};","map":{"version":3,"names":["repoInit","require","MissingRepoOptionsError","NotInitializedRepoError","VERSION_KEY","uint8ArrayFromString","fromString","uint8ArrayToString","toString","getVersion","backends","isRepoInitialized","store","root","open","parseInt","get","close","setVersion","version","put","String","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-repo-migrations/src/repo/version.js"],"sourcesContent":["'use strict'\n\nconst repoInit = require('./init')\nconst { MissingRepoOptionsError, NotInitializedRepoError } = require('../errors')\nconst { VERSION_KEY } = require('../utils')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\n\n/**\n * Function that has responsibility to retrieve version of repo from its root datastore's instance.\n * This function needs to be cross-repo-version functional to be able to fetch any version number,\n * even in case of change of repo's versioning.\n *\n * @param {import('../types').Backends} backends\n */\nasync function getVersion (backends) {\n  if (!(await repoInit.isRepoInitialized(backends))) {\n    throw new NotInitializedRepoError('Repo is not initialized!')\n  }\n\n  const store = backends.root\n  await store.open()\n\n  try {\n    return parseInt(uint8ArrayToString(await store.get(VERSION_KEY)))\n  } finally {\n    await store.close()\n  }\n}\n\n/**\n * Function for setting a version in cross-repo-version manner.\n *\n * @param {number} version\n * @param {import('../types').Backends} backends\n */\nasync function setVersion (version, backends) {\n  if (!backends) {\n    throw new MissingRepoOptionsError('Please pass repo options when trying to open a repo')\n  }\n\n  const store = backends.root\n  await store.open()\n  await store.put(VERSION_KEY, uint8ArrayFromString(String(version)))\n  await store.close()\n}\n\nmodule.exports = {\n  getVersion,\n  setVersion\n}\n"],"mappings":"AAAA;;;;;;AAEA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,QAAD,CAAxB;;AACA,eAA6DA,OAAO,CAAC,WAAD,CAApE;AAAA,IAAQC,uBAAR,YAAQA,uBAAR;AAAA,IAAiCC,uBAAjC,YAAiCA,uBAAjC;;AACA,gBAAwBF,OAAO,CAAC,UAAD,CAA/B;AAAA,IAAQG,WAAR,aAAQA,WAAR;;AACA,gBAA6CH,OAAO,CAAC,yBAAD,CAApD;AAAA,IAAoBI,oBAApB,aAAQC,UAAR;;AACA,gBAAyCL,OAAO,CAAC,uBAAD,CAAhD;AAAA,IAAkBM,kBAAlB,aAAQC,QAAR;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;SACeC,U;;;AAef;AACA;AACA;AACA;AACA;AACA;;;;2EApBA,iBAA2BC,QAA3B;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,OACcV,QAAQ,CAACW,iBAAT,CAA2BD,QAA3B,CADd;;UAAA;YAAA;cAAA;cAAA;YAAA;;YAAA,MAEU,IAAIP,uBAAJ,CAA4B,0BAA5B,CAFV;;UAAA;YAKQS,KALR,GAKgBF,QAAQ,CAACG,IALzB;YAAA;YAAA,OAMQD,KAAK,CAACE,IAAN,EANR;;UAAA;YAAA;YAAA,cASWC,QATX;YAAA,cASoBR,kBATpB;YAAA;YAAA,OAS6CK,KAAK,CAACI,GAAN,CAAUZ,WAAV,CAT7C;;UAAA;YAAA;YAAA;YAAA;;UAAA;YAAA;YAAA;YAAA,OAWUQ,KAAK,CAACK,KAAN,EAXV;;UAAA;YAAA;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;SAqBeC,U;;;;;2EAAf,kBAA2BC,OAA3B,EAAoCT,QAApC;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA,IACOA,QADP;cAAA;cAAA;YAAA;;YAAA,MAEU,IAAIR,uBAAJ,CAA4B,qDAA5B,CAFV;;UAAA;YAKQU,KALR,GAKgBF,QAAQ,CAACG,IALzB;YAAA;YAAA,OAMQD,KAAK,CAACE,IAAN,EANR;;UAAA;YAAA;YAAA,OAOQF,KAAK,CAACQ,GAAN,CAAUhB,WAAV,EAAuBC,oBAAoB,CAACgB,MAAM,CAACF,OAAD,CAAP,CAA3C,CAPR;;UAAA;YAAA;YAAA,OAQQP,KAAK,CAACK,KAAN,EARR;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AAWAK,MAAM,CAACC,OAAP,GAAiB;EACfd,UAAU,EAAVA,UADe;EAEfS,UAAU,EAAVA;AAFe,CAAjB"},"metadata":{},"sourceType":"script"}