{"ast":null,"code":"'use strict';\n\nconst Bitswap = require('./bitswap');\n/**\n * @typedef {import('./types').IPFSBitswap} IPFSBitswap\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('./types/message')} BitswapMessage\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('interface-blockstore').Pair} Pair\n * @typedef {import('interface-blockstore').Options} Options\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n */\n\n/**\n * @param {import('libp2p')} libp2p\n * @param {Blockstore} blockstore\n * @param {Object} [options]\n * @param {boolean} [options.statsEnabled=false]\n * @param {number} [options.statsComputeThrottleTimeout=1000]\n * @param {number} [options.statsComputeThrottleMaxQueueSize=1000]\n * @param {Record<number, MultihashHasher>} [options.hashers]\n * @returns {IPFSBitswap}\n */\n\n\nconst createBitswap = function (libp2p, blockstore) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return new Bitswap(libp2p, blockstore, options);\n};\n\nmodule.exports = {\n  createBitswap\n};","map":{"version":3,"names":["Bitswap","require","createBitswap","libp2p","blockstore","options","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-bitswap/src/index.js"],"sourcesContent":["'use strict'\n\nconst Bitswap = require('./bitswap')\n\n/**\n * @typedef {import('./types').IPFSBitswap} IPFSBitswap\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('./types/message')} BitswapMessage\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('interface-blockstore').Pair} Pair\n * @typedef {import('interface-blockstore').Options} Options\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n */\n\n/**\n * @param {import('libp2p')} libp2p\n * @param {Blockstore} blockstore\n * @param {Object} [options]\n * @param {boolean} [options.statsEnabled=false]\n * @param {number} [options.statsComputeThrottleTimeout=1000]\n * @param {number} [options.statsComputeThrottleMaxQueueSize=1000]\n * @param {Record<number, MultihashHasher>} [options.hashers]\n * @returns {IPFSBitswap}\n */\nconst createBitswap = (libp2p, blockstore, options = {}) => {\n  return new Bitswap(libp2p, blockstore, options)\n}\n\nmodule.exports = {\n  createBitswap\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,aAAa,GAAG,UAACC,MAAD,EAASC,UAAT,EAAsC;EAAA,IAAjBC,OAAiB,uEAAP,EAAO;EAC1D,OAAO,IAAIL,OAAJ,CAAYG,MAAZ,EAAoBC,UAApB,EAAgCC,OAAhC,CAAP;AACD,CAFD;;AAIAC,MAAM,CAACC,OAAP,GAAiB;EACfL;AADe,CAAjB"},"metadata":{},"sourceType":"script"}