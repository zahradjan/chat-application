{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _require = require('multiformats/hashes/sha2'),\n    sha256 = _require.sha256;\n\nvar errcode = require('err-code');\n\nvar _require2 = require('uint8arrays/to-string'),\n    uint8ArrayToString = _require2.toString;\n\nvar _require3 = require('uint8arrays/equals'),\n    uint8ArrayEquals = _require3.equals;\n/**\n * Validator for public key records.\n * Verifies that the passed in record value is the PublicKey\n * that matches the passed in key.\n * If validation fails the returned Promise will reject with the error.\n *\n * @param {Uint8Array} key - A valid key is of the form `'/pk/<keymultihash>'`\n * @param {Uint8Array} publicKey - The public key to validate against (protobuf encoded).\n */\n\n\nvar validatePublicKeyRecord = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(key, publicKey) {\n    var prefix, keyhash, publicKeyHash;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (key instanceof Uint8Array) {\n              _context.next = 2;\n              break;\n            }\n\n            throw errcode(new Error('\"key\" must be a Uint8Array'), 'ERR_INVALID_RECORD_KEY_NOT_BUFFER');\n\n          case 2:\n            if (!(key.byteLength < 5)) {\n              _context.next = 4;\n              break;\n            }\n\n            throw errcode(new Error('invalid public key record'), 'ERR_INVALID_RECORD_KEY_TOO_SHORT');\n\n          case 4:\n            prefix = uint8ArrayToString(key.subarray(0, 4));\n\n            if (!(prefix !== '/pk/')) {\n              _context.next = 7;\n              break;\n            }\n\n            throw errcode(new Error('key was not prefixed with /pk/'), 'ERR_INVALID_RECORD_KEY_BAD_PREFIX');\n\n          case 7:\n            keyhash = key.slice(4);\n            _context.next = 10;\n            return sha256.digest(publicKey);\n\n          case 10:\n            publicKeyHash = _context.sent;\n\n            if (uint8ArrayEquals(keyhash, publicKeyHash.bytes)) {\n              _context.next = 13;\n              break;\n            }\n\n            throw errcode(new Error('public key does not match passed in key'), 'ERR_INVALID_RECORD_HASH_MISMATCH');\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function validatePublicKeyRecord(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = {\n  func: validatePublicKeyRecord,\n  sign: false\n};","map":{"version":3,"names":["require","sha256","errcode","uint8ArrayToString","toString","uint8ArrayEquals","equals","validatePublicKeyRecord","key","publicKey","Uint8Array","Error","byteLength","prefix","subarray","keyhash","slice","digest","publicKeyHash","bytes","module","exports","func","sign"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-record/src/validators/public-key.js"],"sourcesContent":["'use strict'\n\nconst { sha256 } = require('multiformats/hashes/sha2')\nconst errcode = require('err-code')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\nconst { equals: uint8ArrayEquals } = require('uint8arrays/equals')\n\n/**\n * Validator for public key records.\n * Verifies that the passed in record value is the PublicKey\n * that matches the passed in key.\n * If validation fails the returned Promise will reject with the error.\n *\n * @param {Uint8Array} key - A valid key is of the form `'/pk/<keymultihash>'`\n * @param {Uint8Array} publicKey - The public key to validate against (protobuf encoded).\n */\nconst validatePublicKeyRecord = async (key, publicKey) => {\n  if (!(key instanceof Uint8Array)) {\n    throw errcode(new Error('\"key\" must be a Uint8Array'), 'ERR_INVALID_RECORD_KEY_NOT_BUFFER')\n  }\n\n  if (key.byteLength < 5) {\n    throw errcode(new Error('invalid public key record'), 'ERR_INVALID_RECORD_KEY_TOO_SHORT')\n  }\n\n  const prefix = uint8ArrayToString(key.subarray(0, 4))\n\n  if (prefix !== '/pk/') {\n    throw errcode(new Error('key was not prefixed with /pk/'), 'ERR_INVALID_RECORD_KEY_BAD_PREFIX')\n  }\n\n  const keyhash = key.slice(4)\n\n  const publicKeyHash = await sha256.digest(publicKey)\n\n  if (!uint8ArrayEquals(keyhash, publicKeyHash.bytes)) {\n    throw errcode(new Error('public key does not match passed in key'), 'ERR_INVALID_RECORD_HASH_MISMATCH')\n  }\n}\n\nmodule.exports = {\n  func: validatePublicKeyRecord,\n  sign: false\n}\n"],"mappings":"AAAA;;;;;;AAEA,eAAmBA,OAAO,CAAC,0BAAD,CAA1B;AAAA,IAAQC,MAAR,YAAQA,MAAR;;AACA,IAAMC,OAAO,GAAGF,OAAO,CAAC,UAAD,CAAvB;;AACA,gBAAyCA,OAAO,CAAC,uBAAD,CAAhD;AAAA,IAAkBG,kBAAlB,aAAQC,QAAR;;AACA,gBAAqCJ,OAAO,CAAC,oBAAD,CAA5C;AAAA,IAAgBK,gBAAhB,aAAQC,MAAR;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMC,uBAAuB;EAAA,sEAAG,iBAAOC,GAAP,EAAYC,SAAZ;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA,IACxBD,GAAG,YAAYE,UADS;cAAA;cAAA;YAAA;;YAAA,MAEtBR,OAAO,CAAC,IAAIS,KAAJ,CAAU,4BAAV,CAAD,EAA0C,mCAA1C,CAFe;;UAAA;YAAA,MAK1BH,GAAG,CAACI,UAAJ,GAAiB,CALS;cAAA;cAAA;YAAA;;YAAA,MAMtBV,OAAO,CAAC,IAAIS,KAAJ,CAAU,2BAAV,CAAD,EAAyC,kCAAzC,CANe;;UAAA;YASxBE,MATwB,GASfV,kBAAkB,CAACK,GAAG,CAACM,QAAJ,CAAa,CAAb,EAAgB,CAAhB,CAAD,CATH;;YAAA,MAW1BD,MAAM,KAAK,MAXe;cAAA;cAAA;YAAA;;YAAA,MAYtBX,OAAO,CAAC,IAAIS,KAAJ,CAAU,gCAAV,CAAD,EAA8C,mCAA9C,CAZe;;UAAA;YAexBI,OAfwB,GAedP,GAAG,CAACQ,KAAJ,CAAU,CAAV,CAfc;YAAA;YAAA,OAiBFf,MAAM,CAACgB,MAAP,CAAcR,SAAd,CAjBE;;UAAA;YAiBxBS,aAjBwB;;YAAA,IAmBzBb,gBAAgB,CAACU,OAAD,EAAUG,aAAa,CAACC,KAAxB,CAnBS;cAAA;cAAA;YAAA;;YAAA,MAoBtBjB,OAAO,CAAC,IAAIS,KAAJ,CAAU,yCAAV,CAAD,EAAuD,kCAAvD,CApBe;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAH;;EAAA,gBAAvBJ,uBAAuB;IAAA;EAAA;AAAA,GAA7B;;AAwBAa,MAAM,CAACC,OAAP,GAAiB;EACfC,IAAI,EAAEf,uBADS;EAEfgB,IAAI,EAAE;AAFS,CAAjB"},"metadata":{},"sourceType":"script"}