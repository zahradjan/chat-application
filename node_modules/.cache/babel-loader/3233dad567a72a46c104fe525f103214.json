{"ast":null,"code":"var _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nmodule.exports = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(socket) {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(socket.readyState >= 2)) {\n              _context.next = 2;\n              break;\n            }\n\n            throw new Error('socket closed');\n\n          case 2:\n            if (!(socket.readyState === 1)) {\n              _context.next = 4;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 4:\n            return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n              var remove = socket && (socket.removeEventListener || socket.removeListener);\n\n              function cleanup() {\n                if (typeof remove === 'function') {\n                  remove.call(socket, 'open', handleOpen);\n                  remove.call(socket, 'error', handleErr);\n                }\n              }\n\n              function handleOpen() {\n                cleanup();\n                resolve();\n              }\n\n              function handleErr(evt) {\n                cleanup();\n                reject(evt);\n              }\n\n              socket.addEventListener('open', handleOpen);\n              socket.addEventListener('error', handleErr);\n            }));\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["module","exports","socket","readyState","Error","Promise","resolve","reject","remove","removeEventListener","removeListener","cleanup","call","handleOpen","handleErr","evt","addEventListener"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/it-ws/ready.js"],"sourcesContent":["module.exports = async socket => {\n  // if the socket is closing or closed, return end\n  if (socket.readyState >= 2) {\n    throw new Error('socket closed')\n  }\n\n  // if open, return\n  if (socket.readyState === 1) {\n    return\n  }\n\n  return new Promise((resolve, reject) => {\n    const remove = socket && (socket.removeEventListener || socket.removeListener)\n\n    function cleanup () {\n      if (typeof remove === 'function') {\n        remove.call(socket, 'open', handleOpen)\n        remove.call(socket, 'error', handleErr)\n      }\n    }\n\n    function handleOpen () {\n      cleanup(); resolve()\n    }\n\n    function handleErr (evt) {\n      cleanup(); reject(evt)\n    }\n\n    socket.addEventListener('open', handleOpen)\n    socket.addEventListener('error', handleErr)\n  })\n}\n"],"mappings":";;;;AAAAA,MAAM,CAACC,OAAP;EAAA,sEAAiB,iBAAMC,MAAN;IAAA;MAAA;QAAA;UAAA;YAAA,MAEXA,MAAM,CAACC,UAAP,IAAqB,CAFV;cAAA;cAAA;YAAA;;YAAA,MAGP,IAAIC,KAAJ,CAAU,eAAV,CAHO;;UAAA;YAAA,MAOXF,MAAM,CAACC,UAAP,KAAsB,CAPX;cAAA;cAAA;YAAA;;YAAA;;UAAA;YAAA,iCAWR,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;cACtC,IAAMC,MAAM,GAAGN,MAAM,KAAKA,MAAM,CAACO,mBAAP,IAA8BP,MAAM,CAACQ,cAA1C,CAArB;;cAEA,SAASC,OAAT,GAAoB;gBAClB,IAAI,OAAOH,MAAP,KAAkB,UAAtB,EAAkC;kBAChCA,MAAM,CAACI,IAAP,CAAYV,MAAZ,EAAoB,MAApB,EAA4BW,UAA5B;kBACAL,MAAM,CAACI,IAAP,CAAYV,MAAZ,EAAoB,OAApB,EAA6BY,SAA7B;gBACD;cACF;;cAED,SAASD,UAAT,GAAuB;gBACrBF,OAAO;gBAAIL,OAAO;cACnB;;cAED,SAASQ,SAAT,CAAoBC,GAApB,EAAyB;gBACvBJ,OAAO;gBAAIJ,MAAM,CAACQ,GAAD,CAAN;cACZ;;cAEDb,MAAM,CAACc,gBAAP,CAAwB,MAAxB,EAAgCH,UAAhC;cACAX,MAAM,CAACc,gBAAP,CAAwB,OAAxB,EAAiCF,SAAjC;YACD,CApBM,CAXQ;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAjB;;EAAA;IAAA;EAAA;AAAA"},"metadata":{},"sourceType":"script"}