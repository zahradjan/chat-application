{"ast":null,"code":"'use strict';\n\nconst isBuffer = require('is-buffer');\n\nconst Shake = require('it-handshake');\n\nconst lp = require('it-length-prefixed');\n\nmodule.exports = function (duplex) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const shake = Shake(duplex);\n  const lpReader = lp.decode.fromReader(shake.reader, opts);\n  let isDone = false;\n  const W = {\n    read: async bytes => {\n      // just read\n      const {\n        value,\n        done\n      } = await shake.reader.next(bytes);\n\n      if (done && value.length < bytes) {\n        throw new Error('Couldn\\'t read enough bytes');\n      }\n\n      isDone = done;\n\n      if (!value) {\n        throw new Error('Value is null');\n      }\n\n      return value;\n    },\n    readLP: async () => {\n      // read, decode\n      const {\n        value,\n        done\n      } = await lpReader.next();\n      isDone = done;\n\n      if (!value) {\n        throw new Error('Value is null');\n      }\n\n      return value;\n    },\n    readPB: async proto => {\n      // readLP, decode\n      const value = await W.readLP();\n\n      if (!value) {\n        throw new Error('Value is null');\n      } // Is this a buffer?\n\n\n      const buf = isBuffer(value) ? value : value.slice();\n      return proto.decode(buf);\n    },\n    write: data => {\n      // just write\n      shake.writer.push(data);\n    },\n    writeLP: data => {\n      // encode, write\n      W.write(lp.encode.single(data, opts));\n    },\n    writePB: (data, proto) => {\n      // encode, writeLP\n      W.writeLP(proto.encode(data));\n    },\n    pb: proto => {\n      return {\n        read: () => W.readPB(proto),\n        write: d => W.writePB(d, proto)\n      };\n    },\n    unwrap: () => {\n      // returns vanilla duplex again, terminates all reads/writes from this object\n      shake.rest();\n      return shake.stream;\n    }\n  };\n  return W;\n};","map":{"version":3,"names":["isBuffer","require","Shake","lp","module","exports","duplex","opts","shake","lpReader","decode","fromReader","reader","isDone","W","read","bytes","value","done","next","length","Error","readLP","readPB","proto","buf","slice","write","data","writer","push","writeLP","encode","single","writePB","pb","d","unwrap","rest","stream"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/it-pb-rpc/src/index.js"],"sourcesContent":["'use strict'\n\nconst isBuffer = require('is-buffer')\nconst Shake = require('it-handshake')\nconst lp = require('it-length-prefixed')\n\nmodule.exports = (duplex, opts = {}) => {\n  const shake = Shake(duplex)\n  const lpReader = lp.decode.fromReader(\n      shake.reader,\n      opts\n  )\n\n  let isDone = false\n\n  const W = {\n    read: async (bytes) => {\n      // just read\n\n      const { value, done } = await shake.reader.next(bytes)\n\n      if (done && value.length < bytes) {\n        throw new Error('Couldn\\'t read enough bytes')\n      }\n\n      isDone = done\n\n      if (!value) { throw new Error('Value is null') }\n      return value\n    },\n    readLP: async () => {\n      // read, decode\n      const { value, done } = await lpReader.next()\n\n      isDone = done\n\n      if (!value) { throw new Error('Value is null') }\n      return value\n    },\n    readPB: async (proto) => {\n      // readLP, decode\n      const value = await W.readLP()\n\n      if (!value) { throw new Error('Value is null') }\n\n      // Is this a buffer?\n      const buf = isBuffer(value) ? value : value.slice()\n\n      return proto.decode(buf)\n    },\n    write: (data) => {\n      // just write\n      shake.writer.push(data)\n    },\n    writeLP: (data) => {\n      // encode, write\n      W.write(lp.encode.single(data, opts))\n    },\n    writePB: (data, proto) => {\n      // encode, writeLP\n      W.writeLP(proto.encode(data))\n    },\n\n    pb: (proto) => {\n      return {\n        read: () => W.readPB(proto),\n        write: (d) => W.writePB(d, proto)\n      }\n    },\n\n    unwrap: () => {\n      // returns vanilla duplex again, terminates all reads/writes from this object\n      shake.rest()\n      return shake.stream\n    }\n  }\n\n  return W\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,cAAD,CAArB;;AACA,MAAME,EAAE,GAAGF,OAAO,CAAC,oBAAD,CAAlB;;AAEAG,MAAM,CAACC,OAAP,GAAiB,UAACC,MAAD,EAAuB;EAAA,IAAdC,IAAc,uEAAP,EAAO;EACtC,MAAMC,KAAK,GAAGN,KAAK,CAACI,MAAD,CAAnB;EACA,MAAMG,QAAQ,GAAGN,EAAE,CAACO,MAAH,CAAUC,UAAV,CACbH,KAAK,CAACI,MADO,EAEbL,IAFa,CAAjB;EAKA,IAAIM,MAAM,GAAG,KAAb;EAEA,MAAMC,CAAC,GAAG;IACRC,IAAI,EAAE,MAAOC,KAAP,IAAiB;MACrB;MAEA,MAAM;QAAEC,KAAF;QAASC;MAAT,IAAkB,MAAMV,KAAK,CAACI,MAAN,CAAaO,IAAb,CAAkBH,KAAlB,CAA9B;;MAEA,IAAIE,IAAI,IAAID,KAAK,CAACG,MAAN,GAAeJ,KAA3B,EAAkC;QAChC,MAAM,IAAIK,KAAJ,CAAU,6BAAV,CAAN;MACD;;MAEDR,MAAM,GAAGK,IAAT;;MAEA,IAAI,CAACD,KAAL,EAAY;QAAE,MAAM,IAAII,KAAJ,CAAU,eAAV,CAAN;MAAkC;;MAChD,OAAOJ,KAAP;IACD,CAdO;IAeRK,MAAM,EAAE,YAAY;MAClB;MACA,MAAM;QAAEL,KAAF;QAASC;MAAT,IAAkB,MAAMT,QAAQ,CAACU,IAAT,EAA9B;MAEAN,MAAM,GAAGK,IAAT;;MAEA,IAAI,CAACD,KAAL,EAAY;QAAE,MAAM,IAAII,KAAJ,CAAU,eAAV,CAAN;MAAkC;;MAChD,OAAOJ,KAAP;IACD,CAvBO;IAwBRM,MAAM,EAAE,MAAOC,KAAP,IAAiB;MACvB;MACA,MAAMP,KAAK,GAAG,MAAMH,CAAC,CAACQ,MAAF,EAApB;;MAEA,IAAI,CAACL,KAAL,EAAY;QAAE,MAAM,IAAII,KAAJ,CAAU,eAAV,CAAN;MAAkC,CAJzB,CAMvB;;;MACA,MAAMI,GAAG,GAAGzB,QAAQ,CAACiB,KAAD,CAAR,GAAkBA,KAAlB,GAA0BA,KAAK,CAACS,KAAN,EAAtC;MAEA,OAAOF,KAAK,CAACd,MAAN,CAAae,GAAb,CAAP;IACD,CAlCO;IAmCRE,KAAK,EAAGC,IAAD,IAAU;MACf;MACApB,KAAK,CAACqB,MAAN,CAAaC,IAAb,CAAkBF,IAAlB;IACD,CAtCO;IAuCRG,OAAO,EAAGH,IAAD,IAAU;MACjB;MACAd,CAAC,CAACa,KAAF,CAAQxB,EAAE,CAAC6B,MAAH,CAAUC,MAAV,CAAiBL,IAAjB,EAAuBrB,IAAvB,CAAR;IACD,CA1CO;IA2CR2B,OAAO,EAAE,CAACN,IAAD,EAAOJ,KAAP,KAAiB;MACxB;MACAV,CAAC,CAACiB,OAAF,CAAUP,KAAK,CAACQ,MAAN,CAAaJ,IAAb,CAAV;IACD,CA9CO;IAgDRO,EAAE,EAAGX,KAAD,IAAW;MACb,OAAO;QACLT,IAAI,EAAE,MAAMD,CAAC,CAACS,MAAF,CAASC,KAAT,CADP;QAELG,KAAK,EAAGS,CAAD,IAAOtB,CAAC,CAACoB,OAAF,CAAUE,CAAV,EAAaZ,KAAb;MAFT,CAAP;IAID,CArDO;IAuDRa,MAAM,EAAE,MAAM;MACZ;MACA7B,KAAK,CAAC8B,IAAN;MACA,OAAO9B,KAAK,CAAC+B,MAAb;IACD;EA3DO,CAAV;EA8DA,OAAOzB,CAAP;AACD,CAxED"},"metadata":{},"sourceType":"script"}