{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst log = Object.assign(debug('libp2p:connection-manager'), {\n  error: debug('libp2p:connection-manager:err')\n});\n\nconst errcode = require('err-code');\n\nconst mergeOptions = require('merge-options');\n\nconst LatencyMonitor = require('./latency-monitor'); // @ts-ignore retimer does not have types\n\n\nconst retimer = require('retimer');\n\nconst {\n  EventEmitter\n} = require('events');\n\nconst PeerId = require('peer-id');\n\nconst {\n  codes: {\n    ERR_INVALID_PARAMETERS\n  }\n} = require('../errors');\n\nconst defaultOptions = {\n  maxConnections: Infinity,\n  minConnections: 0,\n  maxData: Infinity,\n  maxSentData: Infinity,\n  maxReceivedData: Infinity,\n  maxEventLoopDelay: Infinity,\n  pollInterval: 2000,\n  autoDialInterval: 10000,\n  movingAverageInterval: 60000,\n  defaultPeerValue: 1\n};\n/**\n * @typedef {import('../')} Libp2p\n * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection\n */\n\n/**\n * @typedef {Object} ConnectionManagerOptions\n * @property {number} [maxConnections = Infinity] - The maximum number of connections allowed.\n * @property {number} [minConnections = 0] - The minimum number of connections to avoid pruning.\n * @property {number} [maxData = Infinity] - The max data (in and out), per average interval to allow.\n * @property {number} [maxSentData = Infinity] - The max outgoing data, per average interval to allow.\n * @property {number} [maxReceivedData = Infinity] - The max incoming data, per average interval to allow.\n * @property {number} [maxEventLoopDelay = Infinity] - The upper limit the event loop can take to run.\n * @property {number} [pollInterval = 2000] - How often, in milliseconds, metrics and latency should be checked.\n * @property {number} [movingAverageInterval = 60000] - How often, in milliseconds, to compute averages.\n * @property {number} [defaultPeerValue = 1] - The value of the peer.\n * @property {boolean} [autoDial = true] - Should preemptively guarantee connections are above the low watermark.\n * @property {number} [autoDialInterval = 10000] - How often, in milliseconds, it should preemptively guarantee connections are above the low watermark.\n */\n\n/**\n *\n * @fires ConnectionManager#peer:connect Emitted when a new peer is connected.\n * @fires ConnectionManager#peer:disconnect Emitted when a peer is disconnected.\n */\n\nclass ConnectionManager extends EventEmitter {\n  /**\n   * Responsible for managing known connections.\n   *\n   * @class\n   * @param {Libp2p} libp2p\n   * @param {ConnectionManagerOptions} options\n   */\n  constructor(libp2p) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super();\n    this._libp2p = libp2p;\n    this._peerId = libp2p.peerId.toB58String();\n    this._options = mergeOptions.call({\n      ignoreUndefined: true\n    }, defaultOptions, options);\n\n    if (this._options.maxConnections < this._options.minConnections) {\n      throw errcode(new Error('Connection Manager maxConnections must be greater than minConnections'), ERR_INVALID_PARAMETERS);\n    }\n\n    log('options: %j', this._options);\n    /**\n     * Map of peer identifiers to their peer value for pruning connections.\n     *\n     * @type {Map<string, number>}\n     */\n\n    this._peerValues = new Map();\n    /**\n     * Map of connections per peer\n     *\n     * @type {Map<string, Connection[]>}\n     */\n\n    this.connections = new Map();\n    this._started = false;\n    this._timer = null;\n    this._autoDialTimeout = null;\n    this._checkMetrics = this._checkMetrics.bind(this);\n    this._autoDial = this._autoDial.bind(this);\n    this._latencyMonitor = new LatencyMonitor({\n      latencyCheckIntervalMs: this._options.pollInterval,\n      dataEmitIntervalMs: this._options.pollInterval\n    });\n  }\n  /**\n   * Get current number of open connections.\n   */\n\n\n  get size() {\n    return Array.from(this.connections.values()).reduce((accumulator, value) => accumulator + value.length, 0);\n  }\n  /**\n   * Starts the Connection Manager. If Metrics are not enabled on libp2p\n   * only event loop and connection limits will be monitored.\n   */\n\n\n  start() {\n    if (this._libp2p.metrics) {\n      this._timer = this._timer || retimer(this._checkMetrics, this._options.pollInterval);\n    } // latency monitor\n\n\n    this._latencyMonitor.start();\n\n    this._onLatencyMeasure = this._onLatencyMeasure.bind(this);\n\n    this._latencyMonitor.on('data', this._onLatencyMeasure);\n\n    this._started = true;\n    log('started');\n    this._options.autoDial && this._autoDial();\n  }\n  /**\n   * Stops the Connection Manager\n   *\n   * @async\n   */\n\n\n  async stop() {\n    this._autoDialTimeout && this._autoDialTimeout.clear();\n    this._timer && this._timer.clear();\n\n    this._latencyMonitor.removeListener('data', this._onLatencyMeasure);\n\n    this._latencyMonitor.stop();\n\n    this._started = false;\n    await this._close();\n    log('stopped');\n  }\n  /**\n   * Cleans up the connections\n   *\n   * @async\n   */\n\n\n  async _close() {\n    // Close all connections we're tracking\n    const tasks = [];\n\n    for (const connectionList of this.connections.values()) {\n      for (const connection of connectionList) {\n        tasks.push(connection.close());\n      }\n    }\n\n    await Promise.all(tasks);\n    this.connections.clear();\n  }\n  /**\n   * Sets the value of the given peer. Peers with lower values\n   * will be disconnected first.\n   *\n   * @param {PeerId} peerId\n   * @param {number} value - A number between 0 and 1\n   * @returns {void}\n   */\n\n\n  setPeerValue(peerId, value) {\n    if (value < 0 || value > 1) {\n      throw new Error('value should be a number between 0 and 1');\n    }\n\n    this._peerValues.set(peerId.toB58String(), value);\n  }\n  /**\n   * Checks the libp2p metrics to determine if any values have exceeded\n   * the configured maximums.\n   *\n   * @private\n   */\n\n\n  _checkMetrics() {\n    if (this._libp2p.metrics) {\n      const movingAverages = this._libp2p.metrics.global.movingAverages; // @ts-ignore moving averages object types\n\n      const received = movingAverages.dataReceived[this._options.movingAverageInterval].movingAverage();\n\n      this._checkMaxLimit('maxReceivedData', received); // @ts-ignore moving averages object types\n\n\n      const sent = movingAverages.dataSent[this._options.movingAverageInterval].movingAverage();\n\n      this._checkMaxLimit('maxSentData', sent);\n\n      const total = received + sent;\n\n      this._checkMaxLimit('maxData', total);\n\n      log('metrics update', total);\n      this._timer = retimer(this._checkMetrics, this._options.pollInterval);\n    }\n  }\n  /**\n   * Tracks the incoming connection and check the connection limit\n   *\n   * @param {Connection} connection\n   * @returns {void}\n   */\n\n\n  onConnect(connection) {\n    const peerId = connection.remotePeer;\n    const peerIdStr = peerId.toB58String();\n    const storedConn = this.connections.get(peerIdStr);\n    this.emit('peer:connect', connection);\n\n    if (storedConn) {\n      storedConn.push(connection);\n    } else {\n      this.connections.set(peerIdStr, [connection]);\n    }\n\n    this._libp2p.peerStore.keyBook.set(peerId, peerId.pubKey);\n\n    if (!this._peerValues.has(peerIdStr)) {\n      this._peerValues.set(peerIdStr, this._options.defaultPeerValue);\n    }\n\n    this._checkMaxLimit('maxConnections', this.size);\n  }\n  /**\n   * Removes the connection from tracking\n   *\n   * @param {Connection} connection\n   * @returns {void}\n   */\n\n\n  onDisconnect(connection) {\n    const peerId = connection.remotePeer.toB58String();\n    let storedConn = this.connections.get(peerId);\n\n    if (storedConn && storedConn.length > 1) {\n      storedConn = storedConn.filter(conn => conn.id !== connection.id);\n      this.connections.set(peerId, storedConn);\n    } else if (storedConn) {\n      this.connections.delete(peerId);\n\n      this._peerValues.delete(connection.remotePeer.toB58String());\n\n      this.emit('peer:disconnect', connection);\n    }\n  }\n  /**\n   * Get a connection with a peer.\n   *\n   * @param {PeerId} peerId\n   * @returns {Connection|null}\n   */\n\n\n  get(peerId) {\n    const connections = this.getAll(peerId);\n\n    if (connections.length) {\n      return connections[0];\n    }\n\n    return null;\n  }\n  /**\n   * Get all open connections with a peer.\n   *\n   * @param {PeerId} peerId\n   * @returns {Connection[]}\n   */\n\n\n  getAll(peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n    }\n\n    const id = peerId.toB58String();\n    const connections = this.connections.get(id); // Return all open connections\n\n    if (connections) {\n      return connections.filter(connection => connection.stat.status === 'open');\n    }\n\n    return [];\n  }\n  /**\n   * If the event loop is slow, maybe close a connection\n   *\n   * @private\n   * @param {*} summary - The LatencyMonitor summary\n   */\n\n\n  _onLatencyMeasure(summary) {\n    this._checkMaxLimit('maxEventLoopDelay', summary.avgMs);\n  }\n  /**\n   * If the `value` of `name` has exceeded its limit, maybe close a connection\n   *\n   * @private\n   * @param {string} name - The name of the field to check limits for\n   * @param {number} value - The current value of the field\n   */\n\n\n  _checkMaxLimit(name, value) {\n    const limit = this._options[name];\n    log('checking limit of %s. current value: %d of %d', name, value, limit);\n\n    if (value > limit) {\n      log('%s: limit exceeded: %s, %d', this._peerId, name, value);\n\n      this._maybeDisconnectOne();\n    }\n  }\n  /**\n   * Proactively tries to connect to known peers stored in the PeerStore.\n   * It will keep the number of connections below the upper limit and sort\n   * the peers to connect based on wether we know their keys and protocols.\n   *\n   * @async\n   * @private\n   */\n\n\n  async _autoDial() {\n    const minConnections = this._options.minConnections; // Already has enough connections\n\n    if (this.size >= minConnections) {\n      this._autoDialTimeout = retimer(this._autoDial, this._options.autoDialInterval);\n      return;\n    } // Sort peers on wether we know protocols of public keys for them\n\n\n    const peers = Array.from(this._libp2p.peerStore.peers.values()).sort((a, b) => {\n      if (b.protocols && b.protocols.length && (!a.protocols || !a.protocols.length)) {\n        return 1;\n      } else if (b.id.pubKey && !a.id.pubKey) {\n        return 1;\n      }\n\n      return -1;\n    });\n\n    for (let i = 0; i < peers.length && this.size < minConnections; i++) {\n      if (!this.get(peers[i].id)) {\n        log('connecting to a peerStore stored peer %s', peers[i].id.toB58String());\n\n        try {\n          await this._libp2p.dialer.connectToPeer(peers[i].id); // Connection Manager was stopped\n\n          if (!this._started) {\n            return;\n          }\n        } catch (err) {\n          log.error('could not connect to peerStore stored peer', err);\n        }\n      }\n    }\n\n    this._autoDialTimeout = retimer(this._autoDial, this._options.autoDialInterval);\n  }\n  /**\n   * If we have more connections than our maximum, close a connection\n   * to the lowest valued peer.\n   *\n   * @private\n   */\n\n\n  _maybeDisconnectOne() {\n    if (this._options.minConnections < this.connections.size) {\n      const peerValues = Array.from(new Map([...this._peerValues.entries()].sort((a, b) => a[1] - b[1])));\n      log('%s: sorted peer values: %j', this._peerId, peerValues);\n      const disconnectPeer = peerValues[0];\n\n      if (disconnectPeer) {\n        const peerId = disconnectPeer[0];\n        log('%s: lowest value peer is %s', this._peerId, peerId);\n        log('%s: closing a connection to %j', this._peerId, peerId);\n\n        for (const connections of this.connections.values()) {\n          if (connections[0].remotePeer.toB58String() === peerId) {\n            connections[0].close();\n            break;\n          }\n        }\n      }\n    }\n  }\n\n}\n\nmodule.exports = ConnectionManager;","map":{"version":3,"names":["debug","require","log","Object","assign","error","errcode","mergeOptions","LatencyMonitor","retimer","EventEmitter","PeerId","codes","ERR_INVALID_PARAMETERS","defaultOptions","maxConnections","Infinity","minConnections","maxData","maxSentData","maxReceivedData","maxEventLoopDelay","pollInterval","autoDialInterval","movingAverageInterval","defaultPeerValue","ConnectionManager","constructor","libp2p","options","_libp2p","_peerId","peerId","toB58String","_options","call","ignoreUndefined","Error","_peerValues","Map","connections","_started","_timer","_autoDialTimeout","_checkMetrics","bind","_autoDial","_latencyMonitor","latencyCheckIntervalMs","dataEmitIntervalMs","size","Array","from","values","reduce","accumulator","value","length","start","metrics","_onLatencyMeasure","on","autoDial","stop","clear","removeListener","_close","tasks","connectionList","connection","push","close","Promise","all","setPeerValue","set","movingAverages","global","received","dataReceived","movingAverage","_checkMaxLimit","sent","dataSent","total","onConnect","remotePeer","peerIdStr","storedConn","get","emit","peerStore","keyBook","pubKey","has","onDisconnect","filter","conn","id","delete","getAll","isPeerId","stat","status","summary","avgMs","name","limit","_maybeDisconnectOne","peers","sort","a","b","protocols","i","dialer","connectToPeer","err","peerValues","entries","disconnectPeer","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p/src/connection-manager/index.js"],"sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = Object.assign(debug('libp2p:connection-manager'), {\n  error: debug('libp2p:connection-manager:err')\n})\n\nconst errcode = require('err-code')\nconst mergeOptions = require('merge-options')\nconst LatencyMonitor = require('./latency-monitor')\n// @ts-ignore retimer does not have types\nconst retimer = require('retimer')\n\nconst { EventEmitter } = require('events')\n\nconst PeerId = require('peer-id')\n\nconst {\n  codes: { ERR_INVALID_PARAMETERS }\n} = require('../errors')\n\nconst defaultOptions = {\n  maxConnections: Infinity,\n  minConnections: 0,\n  maxData: Infinity,\n  maxSentData: Infinity,\n  maxReceivedData: Infinity,\n  maxEventLoopDelay: Infinity,\n  pollInterval: 2000,\n  autoDialInterval: 10000,\n  movingAverageInterval: 60000,\n  defaultPeerValue: 1\n}\n\n/**\n * @typedef {import('../')} Libp2p\n * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection\n */\n\n/**\n * @typedef {Object} ConnectionManagerOptions\n * @property {number} [maxConnections = Infinity] - The maximum number of connections allowed.\n * @property {number} [minConnections = 0] - The minimum number of connections to avoid pruning.\n * @property {number} [maxData = Infinity] - The max data (in and out), per average interval to allow.\n * @property {number} [maxSentData = Infinity] - The max outgoing data, per average interval to allow.\n * @property {number} [maxReceivedData = Infinity] - The max incoming data, per average interval to allow.\n * @property {number} [maxEventLoopDelay = Infinity] - The upper limit the event loop can take to run.\n * @property {number} [pollInterval = 2000] - How often, in milliseconds, metrics and latency should be checked.\n * @property {number} [movingAverageInterval = 60000] - How often, in milliseconds, to compute averages.\n * @property {number} [defaultPeerValue = 1] - The value of the peer.\n * @property {boolean} [autoDial = true] - Should preemptively guarantee connections are above the low watermark.\n * @property {number} [autoDialInterval = 10000] - How often, in milliseconds, it should preemptively guarantee connections are above the low watermark.\n */\n\n/**\n *\n * @fires ConnectionManager#peer:connect Emitted when a new peer is connected.\n * @fires ConnectionManager#peer:disconnect Emitted when a peer is disconnected.\n */\nclass ConnectionManager extends EventEmitter {\n  /**\n   * Responsible for managing known connections.\n   *\n   * @class\n   * @param {Libp2p} libp2p\n   * @param {ConnectionManagerOptions} options\n   */\n  constructor (libp2p, options = {}) {\n    super()\n\n    this._libp2p = libp2p\n    this._peerId = libp2p.peerId.toB58String()\n\n    this._options = mergeOptions.call({ ignoreUndefined: true }, defaultOptions, options)\n    if (this._options.maxConnections < this._options.minConnections) {\n      throw errcode(new Error('Connection Manager maxConnections must be greater than minConnections'), ERR_INVALID_PARAMETERS)\n    }\n\n    log('options: %j', this._options)\n\n    /**\n     * Map of peer identifiers to their peer value for pruning connections.\n     *\n     * @type {Map<string, number>}\n     */\n    this._peerValues = new Map()\n\n    /**\n     * Map of connections per peer\n     *\n     * @type {Map<string, Connection[]>}\n     */\n    this.connections = new Map()\n\n    this._started = false\n    this._timer = null\n    this._autoDialTimeout = null\n    this._checkMetrics = this._checkMetrics.bind(this)\n    this._autoDial = this._autoDial.bind(this)\n\n    this._latencyMonitor = new LatencyMonitor({\n      latencyCheckIntervalMs: this._options.pollInterval,\n      dataEmitIntervalMs: this._options.pollInterval\n    })\n  }\n\n  /**\n   * Get current number of open connections.\n   */\n  get size () {\n    return Array.from(this.connections.values())\n      .reduce((accumulator, value) => accumulator + value.length, 0)\n  }\n\n  /**\n   * Starts the Connection Manager. If Metrics are not enabled on libp2p\n   * only event loop and connection limits will be monitored.\n   */\n  start () {\n    if (this._libp2p.metrics) {\n      this._timer = this._timer || retimer(this._checkMetrics, this._options.pollInterval)\n    }\n\n    // latency monitor\n    this._latencyMonitor.start()\n    this._onLatencyMeasure = this._onLatencyMeasure.bind(this)\n    this._latencyMonitor.on('data', this._onLatencyMeasure)\n\n    this._started = true\n    log('started')\n\n    this._options.autoDial && this._autoDial()\n  }\n\n  /**\n   * Stops the Connection Manager\n   *\n   * @async\n   */\n  async stop () {\n    this._autoDialTimeout && this._autoDialTimeout.clear()\n    this._timer && this._timer.clear()\n\n    this._latencyMonitor.removeListener('data', this._onLatencyMeasure)\n    this._latencyMonitor.stop()\n\n    this._started = false\n    await this._close()\n    log('stopped')\n  }\n\n  /**\n   * Cleans up the connections\n   *\n   * @async\n   */\n  async _close () {\n    // Close all connections we're tracking\n    const tasks = []\n    for (const connectionList of this.connections.values()) {\n      for (const connection of connectionList) {\n        tasks.push(connection.close())\n      }\n    }\n\n    await Promise.all(tasks)\n    this.connections.clear()\n  }\n\n  /**\n   * Sets the value of the given peer. Peers with lower values\n   * will be disconnected first.\n   *\n   * @param {PeerId} peerId\n   * @param {number} value - A number between 0 and 1\n   * @returns {void}\n   */\n  setPeerValue (peerId, value) {\n    if (value < 0 || value > 1) {\n      throw new Error('value should be a number between 0 and 1')\n    }\n    this._peerValues.set(peerId.toB58String(), value)\n  }\n\n  /**\n   * Checks the libp2p metrics to determine if any values have exceeded\n   * the configured maximums.\n   *\n   * @private\n   */\n  _checkMetrics () {\n    if (this._libp2p.metrics) {\n      const movingAverages = this._libp2p.metrics.global.movingAverages\n      // @ts-ignore moving averages object types\n      const received = movingAverages.dataReceived[this._options.movingAverageInterval].movingAverage()\n      this._checkMaxLimit('maxReceivedData', received)\n      // @ts-ignore moving averages object types\n      const sent = movingAverages.dataSent[this._options.movingAverageInterval].movingAverage()\n      this._checkMaxLimit('maxSentData', sent)\n      const total = received + sent\n      this._checkMaxLimit('maxData', total)\n      log('metrics update', total)\n      this._timer = retimer(this._checkMetrics, this._options.pollInterval)\n    }\n  }\n\n  /**\n   * Tracks the incoming connection and check the connection limit\n   *\n   * @param {Connection} connection\n   * @returns {void}\n   */\n  onConnect (connection) {\n    const peerId = connection.remotePeer\n    const peerIdStr = peerId.toB58String()\n    const storedConn = this.connections.get(peerIdStr)\n\n    this.emit('peer:connect', connection)\n    if (storedConn) {\n      storedConn.push(connection)\n    } else {\n      this.connections.set(peerIdStr, [connection])\n    }\n\n    this._libp2p.peerStore.keyBook.set(peerId, peerId.pubKey)\n\n    if (!this._peerValues.has(peerIdStr)) {\n      this._peerValues.set(peerIdStr, this._options.defaultPeerValue)\n    }\n\n    this._checkMaxLimit('maxConnections', this.size)\n  }\n\n  /**\n   * Removes the connection from tracking\n   *\n   * @param {Connection} connection\n   * @returns {void}\n   */\n  onDisconnect (connection) {\n    const peerId = connection.remotePeer.toB58String()\n    let storedConn = this.connections.get(peerId)\n\n    if (storedConn && storedConn.length > 1) {\n      storedConn = storedConn.filter((conn) => conn.id !== connection.id)\n      this.connections.set(peerId, storedConn)\n    } else if (storedConn) {\n      this.connections.delete(peerId)\n      this._peerValues.delete(connection.remotePeer.toB58String())\n      this.emit('peer:disconnect', connection)\n    }\n  }\n\n  /**\n   * Get a connection with a peer.\n   *\n   * @param {PeerId} peerId\n   * @returns {Connection|null}\n   */\n  get (peerId) {\n    const connections = this.getAll(peerId)\n    if (connections.length) {\n      return connections[0]\n    }\n    return null\n  }\n\n  /**\n   * Get all open connections with a peer.\n   *\n   * @param {PeerId} peerId\n   * @returns {Connection[]}\n   */\n  getAll (peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    const id = peerId.toB58String()\n    const connections = this.connections.get(id)\n\n    // Return all open connections\n    if (connections) {\n      return connections.filter(connection => connection.stat.status === 'open')\n    }\n    return []\n  }\n\n  /**\n   * If the event loop is slow, maybe close a connection\n   *\n   * @private\n   * @param {*} summary - The LatencyMonitor summary\n   */\n  _onLatencyMeasure (summary) {\n    this._checkMaxLimit('maxEventLoopDelay', summary.avgMs)\n  }\n\n  /**\n   * If the `value` of `name` has exceeded its limit, maybe close a connection\n   *\n   * @private\n   * @param {string} name - The name of the field to check limits for\n   * @param {number} value - The current value of the field\n   */\n  _checkMaxLimit (name, value) {\n    const limit = this._options[name]\n    log('checking limit of %s. current value: %d of %d', name, value, limit)\n    if (value > limit) {\n      log('%s: limit exceeded: %s, %d', this._peerId, name, value)\n      this._maybeDisconnectOne()\n    }\n  }\n\n  /**\n   * Proactively tries to connect to known peers stored in the PeerStore.\n   * It will keep the number of connections below the upper limit and sort\n   * the peers to connect based on wether we know their keys and protocols.\n   *\n   * @async\n   * @private\n   */\n  async _autoDial () {\n    const minConnections = this._options.minConnections\n\n    // Already has enough connections\n    if (this.size >= minConnections) {\n      this._autoDialTimeout = retimer(this._autoDial, this._options.autoDialInterval)\n      return\n    }\n\n    // Sort peers on wether we know protocols of public keys for them\n    const peers = Array.from(this._libp2p.peerStore.peers.values())\n      .sort((a, b) => {\n        if (b.protocols && b.protocols.length && (!a.protocols || !a.protocols.length)) {\n          return 1\n        } else if (b.id.pubKey && !a.id.pubKey) {\n          return 1\n        }\n        return -1\n      })\n\n    for (let i = 0; i < peers.length && this.size < minConnections; i++) {\n      if (!this.get(peers[i].id)) {\n        log('connecting to a peerStore stored peer %s', peers[i].id.toB58String())\n        try {\n          await this._libp2p.dialer.connectToPeer(peers[i].id)\n\n          // Connection Manager was stopped\n          if (!this._started) {\n            return\n          }\n        } catch (err) {\n          log.error('could not connect to peerStore stored peer', err)\n        }\n      }\n    }\n\n    this._autoDialTimeout = retimer(this._autoDial, this._options.autoDialInterval)\n  }\n\n  /**\n   * If we have more connections than our maximum, close a connection\n   * to the lowest valued peer.\n   *\n   * @private\n   */\n  _maybeDisconnectOne () {\n    if (this._options.minConnections < this.connections.size) {\n      const peerValues = Array.from(new Map([...this._peerValues.entries()].sort((a, b) => a[1] - b[1])))\n      log('%s: sorted peer values: %j', this._peerId, peerValues)\n      const disconnectPeer = peerValues[0]\n      if (disconnectPeer) {\n        const peerId = disconnectPeer[0]\n        log('%s: lowest value peer is %s', this._peerId, peerId)\n        log('%s: closing a connection to %j', this._peerId, peerId)\n        for (const connections of this.connections.values()) {\n          if (connections[0].remotePeer.toB58String() === peerId) {\n            connections[0].close()\n            break\n          }\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = ConnectionManager\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}