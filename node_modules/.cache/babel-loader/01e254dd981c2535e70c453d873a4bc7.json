{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _wrapAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nvar _awaitAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _asyncIterator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar _asyncGeneratorDelegate = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate.js\").default;\n\nvar log = require('debug')('ipfs:repo:gc');\n\nvar withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nvar loadMfsRoot = require('../files/utils/with-mfs-root');\n/**\n * @typedef {import('ipfs-core-types/src/pin').API} PinAPI\n * @typedef {import('ipfs-core-types/src/refs').API} RefsAPI\n * @typedef {import('ipfs-repo').IPFSRepo} IPFSRepo\n * @typedef {import('interface-datastore').Key} Key\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('ipfs-core-utils/src/multihashes')} Multihashes\n */\n\n/**\n * Perform mark and sweep garbage collection\n *\n * @param {Object} config\n * @param {IPFSRepo} config.repo\n * @param {Multihashes} config.hashers\n */\n\n\nmodule.exports = function (_ref) {\n  var repo = _ref.repo,\n      hashers = _ref.hashers;\n\n  /**\n   * @type {import('ipfs-core-types/src/repo').API[\"gc\"]}\n   */\n  function gc() {\n    return _gc.apply(this, arguments);\n  }\n\n  function _gc() {\n    _gc = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var options,\n          start,\n          mfsRootCid,\n          _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              start = Date.now();\n              _context.prev = 2;\n              _context.next = 5;\n              return _awaitAsyncGenerator(loadMfsRoot({\n                repo: repo,\n                hashers: hashers\n              }, options));\n\n            case 5:\n              mfsRootCid = _context.sent;\n              _context.next = 8;\n              return _awaitAsyncGenerator(repo.pins.pinRecursively(mfsRootCid));\n\n            case 8:\n              return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(repo.gc()), _awaitAsyncGenerator), \"t0\", 9);\n\n            case 9:\n              _context.prev = 9;\n\n              if (!mfsRootCid) {\n                _context.next = 13;\n                break;\n              }\n\n              _context.next = 13;\n              return _awaitAsyncGenerator(repo.pins.unpin(mfsRootCid));\n\n            case 13:\n              return _context.finish(9);\n\n            case 14:\n              log(\"Complete (\".concat(Date.now() - start, \"ms)\"));\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2,, 9, 14]]);\n    }));\n    return _gc.apply(this, arguments);\n  }\n\n  return withTimeoutOption(gc);\n};","map":{"version":3,"names":["log","require","withTimeoutOption","loadMfsRoot","module","exports","repo","hashers","gc","options","start","Date","now","mfsRootCid","pins","pinRecursively","unpin"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/repo/gc.js"],"sourcesContent":["'use strict'\n\nconst log = require('debug')('ipfs:repo:gc')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst loadMfsRoot = require('../files/utils/with-mfs-root')\n\n/**\n * @typedef {import('ipfs-core-types/src/pin').API} PinAPI\n * @typedef {import('ipfs-core-types/src/refs').API} RefsAPI\n * @typedef {import('ipfs-repo').IPFSRepo} IPFSRepo\n * @typedef {import('interface-datastore').Key} Key\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('ipfs-core-utils/src/multihashes')} Multihashes\n */\n\n/**\n * Perform mark and sweep garbage collection\n *\n * @param {Object} config\n * @param {IPFSRepo} config.repo\n * @param {Multihashes} config.hashers\n */\nmodule.exports = ({ repo, hashers }) => {\n  /**\n   * @type {import('ipfs-core-types/src/repo').API[\"gc\"]}\n   */\n  async function * gc (options = {}) {\n    const start = Date.now()\n    let mfsRootCid\n\n    try {\n      mfsRootCid = await loadMfsRoot({\n        repo,\n        hashers\n      }, options)\n\n      // temporarily pin mfs root\n      await repo.pins.pinRecursively(mfsRootCid)\n\n      yield * repo.gc()\n    } finally {\n      // gc complete, unpin mfs root\n      if (mfsRootCid) {\n        await repo.pins.unpin(mfsRootCid)\n      }\n    }\n\n    log(`Complete (${Date.now() - start}ms)`)\n  }\n\n  return withTimeoutOption(gc)\n}\n"],"mappings":"AAAA;;;;;;;;;;;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,cAAjB,CAAZ;;AACA,IAAMC,iBAAiB,GAAGD,OAAO,CAAC,yCAAD,CAAjC;;AACA,IAAME,WAAW,GAAGF,OAAO,CAAC,8BAAD,CAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAG,MAAM,CAACC,OAAP,GAAiB,gBAAuB;EAAA,IAApBC,IAAoB,QAApBA,IAAoB;EAAA,IAAdC,OAAc,QAAdA,OAAc;;EACtC;AACF;AACA;EAHwC,SAIrBC,EAJqB;IAAA;EAAA;;EAAA;IAAA,mEAItC;MAAA;MAAA;MAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAqBC,OAArB,2DAA+B,EAA/B;cACQC,KADR,GACgBC,IAAI,CAACC,GAAL,EADhB;cAAA;cAAA;cAAA,4BAKuBT,WAAW,CAAC;gBAC7BG,IAAI,EAAJA,IAD6B;gBAE7BC,OAAO,EAAPA;cAF6B,CAAD,EAG3BE,OAH2B,CALlC;;YAAA;cAKII,UALJ;cAAA;cAAA,4BAWUP,IAAI,CAACQ,IAAL,CAAUC,cAAV,CAAyBF,UAAzB,CAXV;;YAAA;cAaI,qEAAQP,IAAI,CAACE,EAAL,EAAR;;YAbJ;cAAA;;cAAA,KAgBQK,UAhBR;gBAAA;gBAAA;cAAA;;cAAA;cAAA,4BAiBYP,IAAI,CAACQ,IAAL,CAAUE,KAAV,CAAgBH,UAAhB,CAjBZ;;YAAA;cAAA;;YAAA;cAqBEb,GAAG,qBAAcW,IAAI,CAACC,GAAL,KAAaF,KAA3B,SAAH;;YArBF;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAJsC;IAAA;EAAA;;EA4BtC,OAAOR,iBAAiB,CAACM,EAAD,CAAxB;AACD,CA7BD"},"metadata":{},"sourceType":"script"}