{"ast":null,"code":"'use strict';\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('../../types').NetworkService} config.network\n */\n\n\nmodule.exports = _ref => {\n  let {\n    network\n  } = _ref;\n\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API[\"peers\"]}\n   */\n  async function peers() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      libp2p\n    } = await network.use(options);\n    const peers = [];\n\n    for (const [peerId, connections] of libp2p.connections) {\n      for (const connection of connections) {\n        /** @type {import('ipfs-core-types/src/swarm').PeersResult} */\n        const peer = {\n          addr: connection.remoteAddr,\n          peer: peerId\n        };\n\n        if (options.verbose || options.direction) {\n          peer.direction = connection.stat.direction;\n        }\n\n        if (options.verbose) {\n          peer.muxer = connection.stat.multiplexer;\n          peer.latency = 'n/a';\n          peer.streams = []; // TODO: get this from libp2p\n        }\n\n        peers.push(peer);\n      }\n    }\n\n    return peers;\n  }\n\n  return withTimeoutOption(peers);\n};","map":{"version":3,"names":["withTimeoutOption","require","module","exports","network","peers","options","libp2p","use","peerId","connections","connection","peer","addr","remoteAddr","verbose","direction","stat","muxer","multiplexer","latency","streams","push"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/swarm/peers.js"],"sourcesContent":["'use strict'\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @param {Object} config\n * @param {import('../../types').NetworkService} config.network\n */\nmodule.exports = ({ network }) => {\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API[\"peers\"]}\n   */\n  async function peers (options = {}) {\n    const { libp2p } = await network.use(options)\n    const peers = []\n\n    for (const [peerId, connections] of libp2p.connections) {\n      for (const connection of connections) {\n        /** @type {import('ipfs-core-types/src/swarm').PeersResult} */\n        const peer = {\n          addr: connection.remoteAddr,\n          peer: peerId\n        }\n\n        if (options.verbose || options.direction) {\n          peer.direction = connection.stat.direction\n        }\n\n        if (options.verbose) {\n          peer.muxer = connection.stat.multiplexer\n          peer.latency = 'n/a'\n          peer.streams = [] // TODO: get this from libp2p\n        }\n\n        peers.push(peer)\n      }\n    }\n\n    return peers\n  }\n\n  return withTimeoutOption(peers)\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,yCAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,QAAiB;EAAA,IAAhB;IAAEC;EAAF,CAAgB;;EAChC;AACF;AACA;EACE,eAAeC,KAAf,GAAoC;IAAA,IAAdC,OAAc,uEAAJ,EAAI;IAClC,MAAM;MAAEC;IAAF,IAAa,MAAMH,OAAO,CAACI,GAAR,CAAYF,OAAZ,CAAzB;IACA,MAAMD,KAAK,GAAG,EAAd;;IAEA,KAAK,MAAM,CAACI,MAAD,EAASC,WAAT,CAAX,IAAoCH,MAAM,CAACG,WAA3C,EAAwD;MACtD,KAAK,MAAMC,UAAX,IAAyBD,WAAzB,EAAsC;QACpC;QACA,MAAME,IAAI,GAAG;UACXC,IAAI,EAAEF,UAAU,CAACG,UADN;UAEXF,IAAI,EAAEH;QAFK,CAAb;;QAKA,IAAIH,OAAO,CAACS,OAAR,IAAmBT,OAAO,CAACU,SAA/B,EAA0C;UACxCJ,IAAI,CAACI,SAAL,GAAiBL,UAAU,CAACM,IAAX,CAAgBD,SAAjC;QACD;;QAED,IAAIV,OAAO,CAACS,OAAZ,EAAqB;UACnBH,IAAI,CAACM,KAAL,GAAaP,UAAU,CAACM,IAAX,CAAgBE,WAA7B;UACAP,IAAI,CAACQ,OAAL,GAAe,KAAf;UACAR,IAAI,CAACS,OAAL,GAAe,EAAf,CAHmB,CAGD;QACnB;;QAEDhB,KAAK,CAACiB,IAAN,CAAWV,IAAX;MACD;IACF;;IAED,OAAOP,KAAP;EACD;;EAED,OAAOL,iBAAiB,CAACK,KAAD,CAAxB;AACD,CAlCD"},"metadata":{},"sourceType":"script"}