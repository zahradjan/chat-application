{"ast":null,"code":"'use strict';\n\nconst Topology = require('./index');\n\nconst multicodecTopologySymbol = Symbol.for('@libp2p/js-interfaces/topology/multicodec-topology');\n\nclass MulticodecTopology extends Topology {\n  /**\n   * @param {TopologyOptions & MulticodecOptions} props\n   */\n  constructor(_ref) {\n    let {\n      min,\n      max,\n      multicodecs,\n      handlers\n    } = _ref;\n    super({\n      min,\n      max,\n      handlers\n    });\n\n    if (!multicodecs) {\n      throw new Error('one or more multicodec should be provided');\n    }\n\n    if (!handlers) {\n      throw new Error('the handlers should be provided');\n    }\n\n    if (typeof handlers.onConnect !== 'function') {\n      throw new Error('the \\'onConnect\\' handler must be provided');\n    }\n\n    if (typeof handlers.onDisconnect !== 'function') {\n      throw new Error('the \\'onDisconnect\\' handler must be provided');\n    }\n\n    this.multicodecs = Array.isArray(multicodecs) ? multicodecs : [multicodecs];\n    this._registrar = undefined;\n    this._onProtocolChange = this._onProtocolChange.bind(this);\n    this._onPeerConnect = this._onPeerConnect.bind(this);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Topology';\n  }\n\n  get [multicodecTopologySymbol]() {\n    return true;\n  }\n  /**\n   * Checks if the given value is a `MulticodecTopology` instance.\n   *\n   * @param {any} other\n   * @returns {other is MulticodecTopology}\n   */\n\n\n  static isMulticodecTopology(other) {\n    return Boolean(other && other[multicodecTopologySymbol]);\n  }\n  /**\n   * @param {any} registrar\n   */\n\n\n  set registrar(registrar) {\n    // eslint-disable-line\n    this._registrar = registrar;\n\n    this._registrar.peerStore.on('change:protocols', this._onProtocolChange);\n\n    this._registrar.connectionManager.on('peer:connect', this._onPeerConnect); // Update topology peers\n\n\n    this._updatePeers(this._registrar.peerStore.peers.values());\n  }\n  /**\n   * Update topology.\n   *\n   * @param {Array<{id: PeerId, multiaddrs: Array<Multiaddr>, protocols: Array<string>}>} peerDataIterable\n   * @returns {void}\n   */\n\n\n  _updatePeers(peerDataIterable) {\n    for (const {\n      id,\n      protocols\n    } of peerDataIterable) {\n      if (this.multicodecs.filter(multicodec => protocols.includes(multicodec)).length) {\n        // Add the peer regardless of whether or not there is currently a connection\n        this.peers.add(id.toB58String()); // If there is a connection, call _onConnect\n\n        const connection = this._registrar.getConnection(id);\n\n        connection && this._onConnect(id, connection);\n      } else {\n        // Remove any peers we might be tracking that are no longer of value to us\n        this.peers.delete(id.toB58String());\n      }\n    }\n  }\n  /**\n   * Check if a new peer support the multicodecs for this topology.\n   *\n   * @param {Object} props\n   * @param {PeerId} props.peerId\n   * @param {Array<string>} props.protocols\n   */\n\n\n  _onProtocolChange(_ref2) {\n    let {\n      peerId,\n      protocols\n    } = _ref2;\n    const hadPeer = this.peers.has(peerId.toB58String());\n    const hasProtocol = protocols.filter(protocol => this.multicodecs.includes(protocol)); // Not supporting the protocol anymore?\n\n    if (hadPeer && hasProtocol.length === 0) {\n      this._onDisconnect(peerId);\n    } // New to protocol support\n\n\n    for (const protocol of protocols) {\n      if (this.multicodecs.includes(protocol)) {\n        const peerData = this._registrar.peerStore.get(peerId);\n\n        this._updatePeers([peerData]);\n\n        return;\n      }\n    }\n  }\n  /**\n   * Verify if a new connected peer has a topology multicodec and call _onConnect.\n   *\n   * @param {Connection} connection\n   * @returns {void}\n   */\n\n\n  _onPeerConnect(connection) {\n    // @ts-ignore - remotePeer does not existist on Connection\n    const peerId = connection.remotePeer;\n\n    const protocols = this._registrar.peerStore.protoBook.get(peerId);\n\n    if (!protocols) {\n      return;\n    }\n\n    if (this.multicodecs.find(multicodec => protocols.includes(multicodec))) {\n      this.peers.add(peerId.toB58String());\n\n      this._onConnect(peerId, connection);\n    }\n  }\n\n}\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('multiaddr')} Multiaddr\n * @typedef {import('../connection/connection')} Connection\n * @typedef {import('.').Options} TopologyOptions\n * @typedef {Object} MulticodecOptions\n * @property {string[]} multicodecs - protocol multicodecs\n * @property {Required<Handlers>} handlers\n * @typedef {import('.').Handlers} Handlers\n */\n\n\nmodule.exports = MulticodecTopology;","map":{"version":3,"names":["Topology","require","multicodecTopologySymbol","Symbol","for","MulticodecTopology","constructor","min","max","multicodecs","handlers","Error","onConnect","onDisconnect","Array","isArray","_registrar","undefined","_onProtocolChange","bind","_onPeerConnect","toStringTag","isMulticodecTopology","other","Boolean","registrar","peerStore","on","connectionManager","_updatePeers","peers","values","peerDataIterable","id","protocols","filter","multicodec","includes","length","add","toB58String","connection","getConnection","_onConnect","delete","peerId","hadPeer","has","hasProtocol","protocol","_onDisconnect","peerData","get","remotePeer","protoBook","find","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-interfaces/src/topology/multicodec-topology.js"],"sourcesContent":["'use strict'\n\nconst Topology = require('./index')\nconst multicodecTopologySymbol = Symbol.for('@libp2p/js-interfaces/topology/multicodec-topology')\n\nclass MulticodecTopology extends Topology {\n  /**\n   * @param {TopologyOptions & MulticodecOptions} props\n   */\n  constructor ({\n    min,\n    max,\n    multicodecs,\n    handlers\n  }) {\n    super({ min, max, handlers })\n\n    if (!multicodecs) {\n      throw new Error('one or more multicodec should be provided')\n    }\n\n    if (!handlers) {\n      throw new Error('the handlers should be provided')\n    }\n\n    if (typeof handlers.onConnect !== 'function') {\n      throw new Error('the \\'onConnect\\' handler must be provided')\n    }\n\n    if (typeof handlers.onDisconnect !== 'function') {\n      throw new Error('the \\'onDisconnect\\' handler must be provided')\n    }\n\n    this.multicodecs = Array.isArray(multicodecs) ? multicodecs : [multicodecs]\n    this._registrar = undefined\n\n    this._onProtocolChange = this._onProtocolChange.bind(this)\n    this._onPeerConnect = this._onPeerConnect.bind(this)\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'Topology'\n  }\n\n  get [multicodecTopologySymbol] () {\n    return true\n  }\n\n  /**\n   * Checks if the given value is a `MulticodecTopology` instance.\n   *\n   * @param {any} other\n   * @returns {other is MulticodecTopology}\n   */\n  static isMulticodecTopology (other) {\n    return Boolean(other && other[multicodecTopologySymbol])\n  }\n\n  /**\n   * @param {any} registrar\n   */\n  set registrar (registrar) { // eslint-disable-line\n    this._registrar = registrar\n    this._registrar.peerStore.on('change:protocols', this._onProtocolChange)\n    this._registrar.connectionManager.on('peer:connect', this._onPeerConnect)\n\n    // Update topology peers\n    this._updatePeers(this._registrar.peerStore.peers.values())\n  }\n\n  /**\n   * Update topology.\n   *\n   * @param {Array<{id: PeerId, multiaddrs: Array<Multiaddr>, protocols: Array<string>}>} peerDataIterable\n   * @returns {void}\n   */\n  _updatePeers (peerDataIterable) {\n    for (const { id, protocols } of peerDataIterable) {\n      if (this.multicodecs.filter(multicodec => protocols.includes(multicodec)).length) {\n        // Add the peer regardless of whether or not there is currently a connection\n        this.peers.add(id.toB58String())\n        // If there is a connection, call _onConnect\n        const connection = this._registrar.getConnection(id)\n        connection && this._onConnect(id, connection)\n      } else {\n        // Remove any peers we might be tracking that are no longer of value to us\n        this.peers.delete(id.toB58String())\n      }\n    }\n  }\n\n  /**\n   * Check if a new peer support the multicodecs for this topology.\n   *\n   * @param {Object} props\n   * @param {PeerId} props.peerId\n   * @param {Array<string>} props.protocols\n   */\n  _onProtocolChange ({ peerId, protocols }) {\n    const hadPeer = this.peers.has(peerId.toB58String())\n    const hasProtocol = protocols.filter(protocol => this.multicodecs.includes(protocol))\n\n    // Not supporting the protocol anymore?\n    if (hadPeer && hasProtocol.length === 0) {\n      this._onDisconnect(peerId)\n    }\n\n    // New to protocol support\n    for (const protocol of protocols) {\n      if (this.multicodecs.includes(protocol)) {\n        const peerData = this._registrar.peerStore.get(peerId)\n        this._updatePeers([peerData])\n        return\n      }\n    }\n  }\n\n  /**\n   * Verify if a new connected peer has a topology multicodec and call _onConnect.\n   *\n   * @param {Connection} connection\n   * @returns {void}\n   */\n  _onPeerConnect (connection) {\n    // @ts-ignore - remotePeer does not existist on Connection\n    const peerId = connection.remotePeer\n    const protocols = this._registrar.peerStore.protoBook.get(peerId)\n\n    if (!protocols) {\n      return\n    }\n\n    if (this.multicodecs.find(multicodec => protocols.includes(multicodec))) {\n      this.peers.add(peerId.toB58String())\n      this._onConnect(peerId, connection)\n    }\n  }\n}\n\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('multiaddr')} Multiaddr\n * @typedef {import('../connection/connection')} Connection\n * @typedef {import('.').Options} TopologyOptions\n * @typedef {Object} MulticodecOptions\n * @property {string[]} multicodecs - protocol multicodecs\n * @property {Required<Handlers>} handlers\n * @typedef {import('.').Handlers} Handlers\n */\nmodule.exports = MulticodecTopology\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}