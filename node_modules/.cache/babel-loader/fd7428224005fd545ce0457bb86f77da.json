{"ast":null,"code":"'use strict';\n\nconst dagPb = require('@ipld/dag-pb');\n\nconst dagCbor = require('@ipld/dag-cbor');\n\nconst raw = require('multiformats/codecs/raw');\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @typedef {import('@ipld/dag-pb').PBLink} DAGLink\n */\n\n/**\n * @param {any} node\n * @param {DAGLink[]} [links]\n * @returns {DAGLink[]}\n */\n\n\nfunction findLinks(node) {\n  let links = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  for (const key in node) {\n    const val = node[key];\n\n    if (key === '/' && Object.keys(node).length === 1) {\n      try {\n        links.push({\n          Name: '',\n          Tsize: 0,\n          Hash: CID.parse(val)\n        });\n        continue;\n      } catch (_) {// not a CID\n      }\n    }\n\n    const cid = CID.asCID(val);\n\n    if (cid) {\n      links.push({\n        Name: '',\n        Tsize: 0,\n        Hash: cid\n      });\n      continue;\n    }\n\n    if (Array.isArray(val)) {\n      findLinks(val, links);\n    }\n\n    if (val && typeof val === 'object') {\n      findLinks(val, links);\n    }\n  }\n\n  return links;\n}\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n */\n\n\nmodule.exports = _ref => {\n  let {\n    repo,\n    codecs\n  } = _ref;\n\n  /**\n   * @type {import('ipfs-core-types/src/object').API[\"links\"]}\n   */\n  async function links(cid) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const codec = await codecs.getCodec(cid.code);\n    const block = await repo.blocks.get(cid, options);\n    const node = codec.decode(block);\n\n    if (cid.code === raw.code) {\n      return [];\n    }\n\n    if (cid.code === dagPb.code) {\n      return node.Links;\n    }\n\n    if (cid.code === dagCbor.code) {\n      return findLinks(node);\n    }\n\n    throw new Error(`Cannot resolve links from codec ${cid.code}`);\n  }\n\n  return withTimeoutOption(links);\n};","map":{"version":3,"names":["dagPb","require","dagCbor","raw","CID","withTimeoutOption","findLinks","node","links","key","val","Object","keys","length","push","Name","Tsize","Hash","parse","_","cid","asCID","Array","isArray","module","exports","repo","codecs","options","codec","getCodec","code","block","blocks","get","decode","Links","Error"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/object/links.js"],"sourcesContent":["'use strict'\n\nconst dagPb = require('@ipld/dag-pb')\nconst dagCbor = require('@ipld/dag-cbor')\nconst raw = require('multiformats/codecs/raw')\nconst { CID } = require('multiformats/cid')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @typedef {import('@ipld/dag-pb').PBLink} DAGLink\n */\n\n/**\n * @param {any} node\n * @param {DAGLink[]} [links]\n * @returns {DAGLink[]}\n */\nfunction findLinks (node, links = []) {\n  for (const key in node) {\n    const val = node[key]\n\n    if (key === '/' && Object.keys(node).length === 1) {\n      try {\n        links.push({\n          Name: '',\n          Tsize: 0,\n          Hash: CID.parse(val)\n        })\n        continue\n      } catch (_) {\n        // not a CID\n      }\n    }\n\n    const cid = CID.asCID(val)\n\n    if (cid) {\n      links.push({\n        Name: '',\n        Tsize: 0,\n        Hash: cid\n      })\n      continue\n    }\n\n    if (Array.isArray(val)) {\n      findLinks(val, links)\n    }\n\n    if (val && typeof val === 'object') {\n      findLinks(val, links)\n    }\n  }\n\n  return links\n}\n\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n */\nmodule.exports = ({ repo, codecs }) => {\n  /**\n   * @type {import('ipfs-core-types/src/object').API[\"links\"]}\n   */\n  async function links (cid, options = {}) {\n    const codec = await codecs.getCodec(cid.code)\n    const block = await repo.blocks.get(cid, options)\n    const node = codec.decode(block)\n\n    if (cid.code === raw.code) {\n      return []\n    }\n\n    if (cid.code === dagPb.code) {\n      return node.Links\n    }\n\n    if (cid.code === dagCbor.code) {\n      return findLinks(node)\n    }\n\n    throw new Error(`Cannot resolve links from codec ${cid.code}`)\n  }\n\n  return withTimeoutOption(links)\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,cAAD,CAArB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,gBAAD,CAAvB;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,yBAAD,CAAnB;;AACA,MAAM;EAAEG;AAAF,IAAUH,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMI,iBAAiB,GAAGJ,OAAO,CAAC,yCAAD,CAAjC;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AACA,SAASK,SAAT,CAAoBC,IAApB,EAAsC;EAAA,IAAZC,KAAY,uEAAJ,EAAI;;EACpC,KAAK,MAAMC,GAAX,IAAkBF,IAAlB,EAAwB;IACtB,MAAMG,GAAG,GAAGH,IAAI,CAACE,GAAD,CAAhB;;IAEA,IAAIA,GAAG,KAAK,GAAR,IAAeE,MAAM,CAACC,IAAP,CAAYL,IAAZ,EAAkBM,MAAlB,KAA6B,CAAhD,EAAmD;MACjD,IAAI;QACFL,KAAK,CAACM,IAAN,CAAW;UACTC,IAAI,EAAE,EADG;UAETC,KAAK,EAAE,CAFE;UAGTC,IAAI,EAAEb,GAAG,CAACc,KAAJ,CAAUR,GAAV;QAHG,CAAX;QAKA;MACD,CAPD,CAOE,OAAOS,CAAP,EAAU,CACV;MACD;IACF;;IAED,MAAMC,GAAG,GAAGhB,GAAG,CAACiB,KAAJ,CAAUX,GAAV,CAAZ;;IAEA,IAAIU,GAAJ,EAAS;MACPZ,KAAK,CAACM,IAAN,CAAW;QACTC,IAAI,EAAE,EADG;QAETC,KAAK,EAAE,CAFE;QAGTC,IAAI,EAAEG;MAHG,CAAX;MAKA;IACD;;IAED,IAAIE,KAAK,CAACC,OAAN,CAAcb,GAAd,CAAJ,EAAwB;MACtBJ,SAAS,CAACI,GAAD,EAAMF,KAAN,CAAT;IACD;;IAED,IAAIE,GAAG,IAAI,OAAOA,GAAP,KAAe,QAA1B,EAAoC;MAClCJ,SAAS,CAACI,GAAD,EAAMF,KAAN,CAAT;IACD;EACF;;EAED,OAAOA,KAAP;AACD;AAED;AACA;AACA;AACA;AACA;;;AACAgB,MAAM,CAACC,OAAP,GAAiB,QAAsB;EAAA,IAArB;IAAEC,IAAF;IAAQC;EAAR,CAAqB;;EACrC;AACF;AACA;EACE,eAAenB,KAAf,CAAsBY,GAAtB,EAAyC;IAAA,IAAdQ,OAAc,uEAAJ,EAAI;IACvC,MAAMC,KAAK,GAAG,MAAMF,MAAM,CAACG,QAAP,CAAgBV,GAAG,CAACW,IAApB,CAApB;IACA,MAAMC,KAAK,GAAG,MAAMN,IAAI,CAACO,MAAL,CAAYC,GAAZ,CAAgBd,GAAhB,EAAqBQ,OAArB,CAApB;IACA,MAAMrB,IAAI,GAAGsB,KAAK,CAACM,MAAN,CAAaH,KAAb,CAAb;;IAEA,IAAIZ,GAAG,CAACW,IAAJ,KAAa5B,GAAG,CAAC4B,IAArB,EAA2B;MACzB,OAAO,EAAP;IACD;;IAED,IAAIX,GAAG,CAACW,IAAJ,KAAa/B,KAAK,CAAC+B,IAAvB,EAA6B;MAC3B,OAAOxB,IAAI,CAAC6B,KAAZ;IACD;;IAED,IAAIhB,GAAG,CAACW,IAAJ,KAAa7B,OAAO,CAAC6B,IAAzB,EAA+B;MAC7B,OAAOzB,SAAS,CAACC,IAAD,CAAhB;IACD;;IAED,MAAM,IAAI8B,KAAJ,CAAW,mCAAkCjB,GAAG,CAACW,IAAK,EAAtD,CAAN;EACD;;EAED,OAAO1B,iBAAiB,CAACG,KAAD,CAAxB;AACD,CAzBD"},"metadata":{},"sourceType":"script"}