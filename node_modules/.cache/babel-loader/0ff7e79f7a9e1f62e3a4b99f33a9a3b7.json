{"ast":null,"code":"'use strict';\n/** @type {typeof import('hashlru').default} */\n// @ts-ignore - hashlru has incorrect typedefs\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar hashlru = require('hashlru');\n/**\n * Time Aware Least Recent Used Cache\n *\n * @see https://arxiv.org/pdf/1801.00390\n * @todo move this to ipfs-utils or it's own package\n *\n * @template T\n * @class TLRU\n */\n\n\nvar TLRU = /*#__PURE__*/function () {\n  /**\n   * Creates an instance of TLRU.\n   *\n   * @param {number} maxSize\n   */\n  function TLRU(maxSize) {\n    _classCallCheck(this, TLRU);\n\n    this.lru = hashlru(maxSize);\n  }\n  /**\n   * Get the value from the a key\n   *\n   * @param {string} key\n   * @returns {T|undefined}\n   * @memberof TLoRU\n   */\n\n\n  _createClass(TLRU, [{\n    key: \"get\",\n    value: function get(key) {\n      var value = this.lru.get(key);\n\n      if (value) {\n        if (value.expire && value.expire < Date.now()) {\n          this.lru.remove(key);\n          return undefined;\n        }\n\n        return value.value;\n      }\n\n      return undefined;\n    }\n    /**\n     * Set a key value pair\n     *\n     * @param {string} key\n     * @param {T} value\n     * @param {number} ttl - in miliseconds\n     * @returns {void}\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(key, value, ttl) {\n      this.lru.set(key, {\n        value: value,\n        expire: Date.now() + ttl\n      });\n    }\n    /**\n     * Find if the cache has the key\n     *\n     * @param {string} key\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"has\",\n    value: function has(key) {\n      var value = this.get(key);\n\n      if (value) {\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Remove key\n     *\n     * @param {string} key\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(key) {\n      this.lru.remove(key);\n    }\n    /**\n     * Clears the cache\n     *\n     * @memberof TLRU\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.lru.clear();\n    }\n  }]);\n\n  return TLRU;\n}();\n\nmodule.exports = TLRU;","map":{"version":3,"names":["hashlru","require","TLRU","maxSize","lru","key","value","get","expire","Date","now","remove","undefined","ttl","set","clear","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/utils/tlru.js"],"sourcesContent":["'use strict'\n\n/** @type {typeof import('hashlru').default} */\n// @ts-ignore - hashlru has incorrect typedefs\nconst hashlru = require('hashlru')\n\n/**\n * Time Aware Least Recent Used Cache\n *\n * @see https://arxiv.org/pdf/1801.00390\n * @todo move this to ipfs-utils or it's own package\n *\n * @template T\n * @class TLRU\n */\nclass TLRU {\n  /**\n   * Creates an instance of TLRU.\n   *\n   * @param {number} maxSize\n   */\n  constructor (maxSize) {\n    this.lru = hashlru(maxSize)\n  }\n\n  /**\n   * Get the value from the a key\n   *\n   * @param {string} key\n   * @returns {T|undefined}\n   * @memberof TLoRU\n   */\n  get (key) {\n    const value = this.lru.get(key)\n    if (value) {\n      if ((value.expire) && (value.expire < Date.now())) {\n        this.lru.remove(key)\n        return undefined\n      }\n      return value.value\n    }\n    return undefined\n  }\n\n  /**\n   * Set a key value pair\n   *\n   * @param {string} key\n   * @param {T} value\n   * @param {number} ttl - in miliseconds\n   * @returns {void}\n   */\n  set (key, value, ttl) {\n    this.lru.set(key, { value, expire: Date.now() + ttl })\n  }\n\n  /**\n   * Find if the cache has the key\n   *\n   * @param {string} key\n   * @returns {boolean}\n   */\n  has (key) {\n    const value = this.get(key)\n    if (value) {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Remove key\n   *\n   * @param {string} key\n   */\n  remove (key) {\n    this.lru.remove(key)\n  }\n\n  /**\n   * Clears the cache\n   *\n   * @memberof TLRU\n   */\n  clear () {\n    this.lru.clear()\n  }\n}\n\nmodule.exports = TLRU\n"],"mappings":"AAAA;AAEA;AACA;;;;;;AACA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACMC,I;EACJ;AACF;AACA;AACA;AACA;EACE,cAAaC,OAAb,EAAsB;IAAA;;IACpB,KAAKC,GAAL,GAAWJ,OAAO,CAACG,OAAD,CAAlB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;;WACE,aAAKE,GAAL,EAAU;MACR,IAAMC,KAAK,GAAG,KAAKF,GAAL,CAASG,GAAT,CAAaF,GAAb,CAAd;;MACA,IAAIC,KAAJ,EAAW;QACT,IAAKA,KAAK,CAACE,MAAP,IAAmBF,KAAK,CAACE,MAAN,GAAeC,IAAI,CAACC,GAAL,EAAtC,EAAmD;UACjD,KAAKN,GAAL,CAASO,MAAT,CAAgBN,GAAhB;UACA,OAAOO,SAAP;QACD;;QACD,OAAON,KAAK,CAACA,KAAb;MACD;;MACD,OAAOM,SAAP;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,aAAKP,GAAL,EAAUC,KAAV,EAAiBO,GAAjB,EAAsB;MACpB,KAAKT,GAAL,CAASU,GAAT,CAAaT,GAAb,EAAkB;QAAEC,KAAK,EAALA,KAAF;QAASE,MAAM,EAAEC,IAAI,CAACC,GAAL,KAAaG;MAA9B,CAAlB;IACD;IAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,aAAKR,GAAL,EAAU;MACR,IAAMC,KAAK,GAAG,KAAKC,GAAL,CAASF,GAAT,CAAd;;MACA,IAAIC,KAAJ,EAAW;QACT,OAAO,IAAP;MACD;;MACD,OAAO,KAAP;IACD;IAED;AACF;AACA;AACA;AACA;;;;WACE,gBAAQD,GAAR,EAAa;MACX,KAAKD,GAAL,CAASO,MAAT,CAAgBN,GAAhB;IACD;IAED;AACF;AACA;AACA;AACA;;;;WACE,iBAAS;MACP,KAAKD,GAAL,CAASW,KAAT;IACD;;;;;;AAGHC,MAAM,CAACC,OAAP,GAAiBf,IAAjB"},"metadata":{},"sourceType":"script"}