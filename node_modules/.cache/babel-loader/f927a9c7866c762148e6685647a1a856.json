{"ast":null,"code":"'use strict';\n\nconst intervals = new Map();\n\nconst _generateId = () => `${Date.now()}:${Math.floor(Math.random() * 1000000)}`;\n/**\n * Run a given task each {interval} ms\n *\n * @param {() => Promise} task\n * @param {number} interval\n * @param {string} id\n */\n\n\nasync function _runPeriodically(task, interval, id) {\n  while (intervals.get(id)) {\n    try {\n      await task();\n    } catch (err) {\n      // Throw global context error if handler throws\n      setTimeout(() => {\n        throw err;\n      }, 1);\n      break;\n    }\n\n    if (!intervals.get(id)) {\n      break;\n    }\n\n    await new Promise(resolve => {\n      const _timeout = setTimeout(resolve, interval);\n\n      intervals.set(id, _timeout);\n    });\n  }\n}\n/**\n * Asynchronous setInterval that is properly delayed using promises and can be delayed on boot.\n *\n * @param {() => Promise} task\n * @param {number} interval\n * @param {number} [delay = interval]\n * @returns {string}\n */\n\n\nfunction setDelayedInterval(task, interval, delay) {\n  delay = delay || interval;\n\n  const id = _generateId();\n\n  const _timeout = setTimeout(() => {\n    _runPeriodically(task, interval, id);\n  }, delay);\n\n  intervals.set(id, _timeout);\n  return id;\n}\n/**\n * Clear delayed interval.\n *\n * @param {string} id\n */\n\n\nfunction clearDelayedInterval(id) {\n  const _timeout = intervals.get(id);\n\n  if (_timeout) {\n    clearTimeout(_timeout);\n    intervals.delete(id);\n  }\n}\n\nmodule.exports = {\n  setDelayedInterval,\n  clearDelayedInterval\n};","map":{"version":3,"names":["intervals","Map","_generateId","Date","now","Math","floor","random","_runPeriodically","task","interval","id","get","err","setTimeout","Promise","resolve","_timeout","set","setDelayedInterval","delay","clearDelayedInterval","clearTimeout","delete","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/set-delayed-interval/src/index.js"],"sourcesContent":["'use strict'\n\nconst intervals = new Map()\n\nconst _generateId = () => `${Date.now()}:${Math.floor(Math.random() * 1000000)}`\n\n/**\n * Run a given task each {interval} ms\n *\n * @param {() => Promise} task\n * @param {number} interval\n * @param {string} id\n */\nasync function _runPeriodically (task, interval, id) {\n  while (intervals.get(id)) {\n    try {\n      await task()\n    } catch (err) {\n      // Throw global context error if handler throws\n      setTimeout(() => { throw err }, 1)\n      break\n    }\n\n    if (!intervals.get(id)) {\n      break\n    }\n\n    await new Promise(resolve => {\n      const _timeout = setTimeout(resolve, interval)\n\n      intervals.set(id, _timeout)\n    })\n  }\n}\n\n/**\n * Asynchronous setInterval that is properly delayed using promises and can be delayed on boot.\n *\n * @param {() => Promise} task\n * @param {number} interval\n * @param {number} [delay = interval]\n * @returns {string}\n */\nfunction setDelayedInterval (task, interval, delay) {\n  delay = delay || interval\n\n  const id = _generateId()\n  const _timeout = setTimeout(() => {\n    _runPeriodically(task, interval, id)\n  }, delay)\n\n  intervals.set(id, _timeout)\n\n  return id\n}\n\n/**\n * Clear delayed interval.\n *\n * @param {string} id\n */\nfunction clearDelayedInterval (id) {\n  const _timeout = intervals.get(id)\n\n  if (_timeout) {\n    clearTimeout(_timeout)\n    intervals.delete(id)\n  }\n}\n\nmodule.exports = {\n  setDelayedInterval,\n  clearDelayedInterval\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAG,IAAIC,GAAJ,EAAlB;;AAEA,MAAMC,WAAW,GAAG,MAAO,GAAEC,IAAI,CAACC,GAAL,EAAW,IAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,OAA3B,CAAoC,EAA/E;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAeC,gBAAf,CAAiCC,IAAjC,EAAuCC,QAAvC,EAAiDC,EAAjD,EAAqD;EACnD,OAAOX,SAAS,CAACY,GAAV,CAAcD,EAAd,CAAP,EAA0B;IACxB,IAAI;MACF,MAAMF,IAAI,EAAV;IACD,CAFD,CAEE,OAAOI,GAAP,EAAY;MACZ;MACAC,UAAU,CAAC,MAAM;QAAE,MAAMD,GAAN;MAAW,CAApB,EAAsB,CAAtB,CAAV;MACA;IACD;;IAED,IAAI,CAACb,SAAS,CAACY,GAAV,CAAcD,EAAd,CAAL,EAAwB;MACtB;IACD;;IAED,MAAM,IAAII,OAAJ,CAAYC,OAAO,IAAI;MAC3B,MAAMC,QAAQ,GAAGH,UAAU,CAACE,OAAD,EAAUN,QAAV,CAA3B;;MAEAV,SAAS,CAACkB,GAAV,CAAcP,EAAd,EAAkBM,QAAlB;IACD,CAJK,CAAN;EAKD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,kBAAT,CAA6BV,IAA7B,EAAmCC,QAAnC,EAA6CU,KAA7C,EAAoD;EAClDA,KAAK,GAAGA,KAAK,IAAIV,QAAjB;;EAEA,MAAMC,EAAE,GAAGT,WAAW,EAAtB;;EACA,MAAMe,QAAQ,GAAGH,UAAU,CAAC,MAAM;IAChCN,gBAAgB,CAACC,IAAD,EAAOC,QAAP,EAAiBC,EAAjB,CAAhB;EACD,CAF0B,EAExBS,KAFwB,CAA3B;;EAIApB,SAAS,CAACkB,GAAV,CAAcP,EAAd,EAAkBM,QAAlB;EAEA,OAAON,EAAP;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASU,oBAAT,CAA+BV,EAA/B,EAAmC;EACjC,MAAMM,QAAQ,GAAGjB,SAAS,CAACY,GAAV,CAAcD,EAAd,CAAjB;;EAEA,IAAIM,QAAJ,EAAc;IACZK,YAAY,CAACL,QAAD,CAAZ;IACAjB,SAAS,CAACuB,MAAV,CAAiBZ,EAAjB;EACD;AACF;;AAEDa,MAAM,CAACC,OAAP,GAAiB;EACfN,kBADe;EAEfE;AAFe,CAAjB"},"metadata":{},"sourceType":"script"}