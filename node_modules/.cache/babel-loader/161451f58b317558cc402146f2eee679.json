{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar debug = require('debug');\n\nvar log = Object.assign(debug('libp2p:circuit:hop'), {\n  error: debug('libp2p:circuit:hop:err')\n});\n\nvar errCode = require('err-code');\n\nvar PeerId = require('peer-id');\n\nvar _require = require('./utils'),\n    validateAddrs = _require.validateAddrs;\n\nvar StreamHandler = require('./stream-handler');\n\nvar _require2 = require('../protocol'),\n    CircuitPB = _require2.CircuitRelay;\n\nvar _require3 = require('it-pipe'),\n    pipe = _require3.pipe;\n\nvar _require4 = require('../../errors'),\n    Errors = _require4.codes;\n\nvar _require5 = require('./stop'),\n    stop = _require5.stop;\n\nvar multicodec = require('./../multicodec');\n/**\n * @typedef {import('../protocol').ICircuitRelay} ICircuitRelay\n * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection\n * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream\n * @typedef {import('../transport')} Transport\n */\n\n/**\n * @typedef {Object} HopRequest\n * @property {Connection} connection\n * @property {ICircuitRelay} request\n * @property {StreamHandler} streamHandler\n * @property {Transport} circuit\n */\n\n/**\n * @param {HopRequest} options\n * @returns {Promise<void>}\n */\n\n\nfunction handleHop(_x) {\n  return _handleHop.apply(this, arguments);\n}\n/**\n * Performs a HOP request to a relay peer, to request a connection to another\n * peer. A new, virtual, connection will be created between the two via the relay.\n *\n * @param {object} options\n * @param {Connection} options.connection - Connection to the relay\n * @param {ICircuitRelay} options.request\n * @returns {Promise<MuxedStream>}\n */\n\n\nfunction _handleHop() {\n  _handleHop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {\n    var connection, request, streamHandler, circuit, destinationPeer, destinationConnection, stopRequest, destinationStream, sourceStream;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            connection = _ref.connection, request = _ref.request, streamHandler = _ref.streamHandler, circuit = _ref.circuit;\n\n            if (circuit._options.hop.enabled) {\n              _context.next = 4;\n              break;\n            }\n\n            log('HOP request received but we are not acting as a relay');\n            return _context.abrupt(\"return\", streamHandler.end({\n              type: CircuitPB.Type.STATUS,\n              code: CircuitPB.Status.HOP_CANT_SPEAK_RELAY\n            }));\n\n          case 4:\n            _context.prev = 4;\n            validateAddrs(request, streamHandler);\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](4);\n            return _context.abrupt(\"return\", log.error('invalid hop request via peer %s', connection.remotePeer.toB58String(), _context.t0));\n\n          case 11:\n            if (request.dstPeer) {\n              _context.next = 14;\n              break;\n            }\n\n            log('HOP request received but we do not receive a dstPeer');\n            return _context.abrupt(\"return\");\n\n          case 14:\n            // Get the connection to the destination (stop) peer\n            destinationPeer = new PeerId(request.dstPeer.id);\n            destinationConnection = circuit._connectionManager.get(destinationPeer);\n\n            if (!(!destinationConnection && !circuit._options.hop.active)) {\n              _context.next = 19;\n              break;\n            }\n\n            log('HOP request received but we are not connected to the destination peer');\n            return _context.abrupt(\"return\", streamHandler.end({\n              type: CircuitPB.Type.STATUS,\n              code: CircuitPB.Status.HOP_NO_CONN_TO_DST\n            }));\n\n          case 19:\n            if (destinationConnection) {\n              _context.next = 21;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 21:\n            // Handle the incoming HOP request by performing a STOP request\n            stopRequest = {\n              type: CircuitPB.Type.STOP,\n              dstPeer: request.dstPeer,\n              srcPeer: request.srcPeer\n            };\n            _context.prev = 22;\n            _context.next = 25;\n            return stop({\n              connection: destinationConnection,\n              request: stopRequest\n            });\n\n          case 25:\n            destinationStream = _context.sent;\n            _context.next = 31;\n            break;\n\n          case 28:\n            _context.prev = 28;\n            _context.t1 = _context[\"catch\"](22);\n            return _context.abrupt(\"return\", log.error(_context.t1));\n\n          case 31:\n            log('hop request from %s is valid', connection.remotePeer.toB58String());\n            streamHandler.write({\n              type: CircuitPB.Type.STATUS,\n              code: CircuitPB.Status.SUCCESS\n            });\n            sourceStream = streamHandler.rest(); // Short circuit the two streams to create the relayed connection\n\n            return _context.abrupt(\"return\", pipe(sourceStream, destinationStream, sourceStream));\n\n          case 35:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[4, 8], [22, 28]]);\n  }));\n  return _handleHop.apply(this, arguments);\n}\n\nfunction hop(_x2) {\n  return _hop.apply(this, arguments);\n}\n/**\n * Performs a CAN_HOP request to a relay peer, in order to understand its capabilities.\n *\n * @param {object} options\n * @param {Connection} options.connection - Connection to the relay\n * @returns {Promise<boolean>}\n */\n\n\nfunction _hop() {\n  _hop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_ref2) {\n    var connection, request, _yield$connection$new, stream, streamHandler, response;\n\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            connection = _ref2.connection, request = _ref2.request;\n            _context2.next = 3;\n            return connection.newStream([multicodec.relay]);\n\n          case 3:\n            _yield$connection$new = _context2.sent;\n            stream = _yield$connection$new.stream;\n            // Send the HOP request\n            streamHandler = new StreamHandler({\n              stream: stream\n            });\n            streamHandler.write(request);\n            _context2.next = 9;\n            return streamHandler.read();\n\n          case 9:\n            response = _context2.sent;\n\n            if (response) {\n              _context2.next = 12;\n              break;\n            }\n\n            throw errCode(new Error('HOP request had no response'), Errors.ERR_HOP_REQUEST_FAILED);\n\n          case 12:\n            if (!(response.code === CircuitPB.Status.SUCCESS)) {\n              _context2.next = 15;\n              break;\n            }\n\n            log('hop request was successful');\n            return _context2.abrupt(\"return\", streamHandler.rest());\n\n          case 15:\n            log('hop request failed with code %d, closing stream', response.code);\n            streamHandler.close();\n            throw errCode(new Error(\"HOP request failed with code \".concat(response.code)), Errors.ERR_HOP_REQUEST_FAILED);\n\n          case 18:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _hop.apply(this, arguments);\n}\n\nfunction canHop(_x3) {\n  return _canHop.apply(this, arguments);\n}\n/**\n * Creates an unencoded CAN_HOP response based on the Circuits configuration\n *\n * @param {Object} options\n * @param {Connection} options.connection\n * @param {StreamHandler} options.streamHandler\n * @param {Transport} options.circuit\n * @private\n */\n\n\nfunction _canHop() {\n  _canHop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(_ref3) {\n    var connection, _yield$connection$new2, stream, streamHandler, response;\n\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            connection = _ref3.connection;\n            _context3.next = 3;\n            return connection.newStream([multicodec.relay]);\n\n          case 3:\n            _yield$connection$new2 = _context3.sent;\n            stream = _yield$connection$new2.stream;\n            // Send the HOP request\n            streamHandler = new StreamHandler({\n              stream: stream\n            });\n            streamHandler.write({\n              type: CircuitPB.Type.CAN_HOP\n            });\n            _context3.next = 9;\n            return streamHandler.read();\n\n          case 9:\n            response = _context3.sent;\n            _context3.next = 12;\n            return streamHandler.close();\n\n          case 12:\n            if (!(!response || response.code !== CircuitPB.Status.SUCCESS)) {\n              _context3.next = 14;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", false);\n\n          case 14:\n            return _context3.abrupt(\"return\", true);\n\n          case 15:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _canHop.apply(this, arguments);\n}\n\nfunction handleCanHop(_ref4) {\n  var connection = _ref4.connection,\n      streamHandler = _ref4.streamHandler,\n      circuit = _ref4.circuit;\n  var canHop = circuit._options.hop.enabled;\n  log('can hop (%s) request from %s', canHop, connection.remotePeer.toB58String());\n  streamHandler.end({\n    type: CircuitPB.Type.STATUS,\n    code: canHop ? CircuitPB.Status.SUCCESS : CircuitPB.Status.HOP_CANT_SPEAK_RELAY\n  });\n}\n\nmodule.exports = {\n  handleHop: handleHop,\n  hop: hop,\n  canHop: canHop,\n  handleCanHop: handleCanHop\n};","map":{"version":3,"names":["debug","require","log","Object","assign","error","errCode","PeerId","validateAddrs","StreamHandler","CircuitPB","CircuitRelay","pipe","Errors","codes","stop","multicodec","handleHop","connection","request","streamHandler","circuit","_options","hop","enabled","end","type","Type","STATUS","code","Status","HOP_CANT_SPEAK_RELAY","remotePeer","toB58String","dstPeer","destinationPeer","id","destinationConnection","_connectionManager","get","active","HOP_NO_CONN_TO_DST","stopRequest","STOP","srcPeer","destinationStream","write","SUCCESS","sourceStream","rest","newStream","relay","stream","read","response","Error","ERR_HOP_REQUEST_FAILED","close","canHop","CAN_HOP","handleCanHop","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p/src/circuit/circuit/hop.js"],"sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = Object.assign(debug('libp2p:circuit:hop'), {\n  error: debug('libp2p:circuit:hop:err')\n})\nconst errCode = require('err-code')\n\nconst PeerId = require('peer-id')\nconst { validateAddrs } = require('./utils')\nconst StreamHandler = require('./stream-handler')\nconst { CircuitRelay: CircuitPB } = require('../protocol')\nconst { pipe } = require('it-pipe')\nconst { codes: Errors } = require('../../errors')\n\nconst { stop } = require('./stop')\n\nconst multicodec = require('./../multicodec')\n\n/**\n * @typedef {import('../protocol').ICircuitRelay} ICircuitRelay\n * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection\n * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream\n * @typedef {import('../transport')} Transport\n */\n\n/**\n * @typedef {Object} HopRequest\n * @property {Connection} connection\n * @property {ICircuitRelay} request\n * @property {StreamHandler} streamHandler\n * @property {Transport} circuit\n */\n\n/**\n * @param {HopRequest} options\n * @returns {Promise<void>}\n */\nasync function handleHop ({\n  connection,\n  request,\n  streamHandler,\n  circuit\n}) {\n  // Ensure hop is enabled\n  if (!circuit._options.hop.enabled) {\n    log('HOP request received but we are not acting as a relay')\n    return streamHandler.end({\n      type: CircuitPB.Type.STATUS,\n      code: CircuitPB.Status.HOP_CANT_SPEAK_RELAY\n    })\n  }\n\n  // Validate the HOP request has the required input\n  try {\n    validateAddrs(request, streamHandler)\n  } catch (err) {\n    return log.error('invalid hop request via peer %s', connection.remotePeer.toB58String(), err)\n  }\n\n  if (!request.dstPeer) {\n    log('HOP request received but we do not receive a dstPeer')\n    return\n  }\n\n  // Get the connection to the destination (stop) peer\n  const destinationPeer = new PeerId(request.dstPeer.id)\n\n  const destinationConnection = circuit._connectionManager.get(destinationPeer)\n  if (!destinationConnection && !circuit._options.hop.active) {\n    log('HOP request received but we are not connected to the destination peer')\n    return streamHandler.end({\n      type: CircuitPB.Type.STATUS,\n      code: CircuitPB.Status.HOP_NO_CONN_TO_DST\n    })\n  }\n\n  // TODO: Handle being an active relay\n  if (!destinationConnection) {\n    return\n  }\n\n  // Handle the incoming HOP request by performing a STOP request\n  const stopRequest = {\n    type: CircuitPB.Type.STOP,\n    dstPeer: request.dstPeer,\n    srcPeer: request.srcPeer\n  }\n\n  let destinationStream\n  try {\n    destinationStream = await stop({\n      connection: destinationConnection,\n      request: stopRequest\n    })\n  } catch (err) {\n    return log.error(err)\n  }\n\n  log('hop request from %s is valid', connection.remotePeer.toB58String())\n  streamHandler.write({\n    type: CircuitPB.Type.STATUS,\n    code: CircuitPB.Status.SUCCESS\n  })\n  const sourceStream = streamHandler.rest()\n\n  // Short circuit the two streams to create the relayed connection\n  return pipe(\n    sourceStream,\n    destinationStream,\n    sourceStream\n  )\n}\n\n/**\n * Performs a HOP request to a relay peer, to request a connection to another\n * peer. A new, virtual, connection will be created between the two via the relay.\n *\n * @param {object} options\n * @param {Connection} options.connection - Connection to the relay\n * @param {ICircuitRelay} options.request\n * @returns {Promise<MuxedStream>}\n */\nasync function hop ({\n  connection,\n  request\n}) {\n  // Create a new stream to the relay\n  const { stream } = await connection.newStream([multicodec.relay])\n  // Send the HOP request\n  const streamHandler = new StreamHandler({ stream })\n  streamHandler.write(request)\n\n  const response = await streamHandler.read()\n\n  if (!response) {\n    throw errCode(new Error('HOP request had no response'), Errors.ERR_HOP_REQUEST_FAILED)\n  }\n\n  if (response.code === CircuitPB.Status.SUCCESS) {\n    log('hop request was successful')\n    return streamHandler.rest()\n  }\n\n  log('hop request failed with code %d, closing stream', response.code)\n  streamHandler.close()\n  throw errCode(new Error(`HOP request failed with code ${response.code}`), Errors.ERR_HOP_REQUEST_FAILED)\n}\n\n/**\n * Performs a CAN_HOP request to a relay peer, in order to understand its capabilities.\n *\n * @param {object} options\n * @param {Connection} options.connection - Connection to the relay\n * @returns {Promise<boolean>}\n */\nasync function canHop ({\n  connection\n}) {\n  // Create a new stream to the relay\n  const { stream } = await connection.newStream([multicodec.relay])\n  // Send the HOP request\n  const streamHandler = new StreamHandler({ stream })\n  streamHandler.write({\n    type: CircuitPB.Type.CAN_HOP\n  })\n\n  const response = await streamHandler.read()\n  await streamHandler.close()\n\n  if (!response || response.code !== CircuitPB.Status.SUCCESS) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * Creates an unencoded CAN_HOP response based on the Circuits configuration\n *\n * @param {Object} options\n * @param {Connection} options.connection\n * @param {StreamHandler} options.streamHandler\n * @param {Transport} options.circuit\n * @private\n */\nfunction handleCanHop ({\n  connection,\n  streamHandler,\n  circuit\n}) {\n  const canHop = circuit._options.hop.enabled\n  log('can hop (%s) request from %s', canHop, connection.remotePeer.toB58String())\n  streamHandler.end({\n    type: CircuitPB.Type.STATUS,\n    code: canHop ? CircuitPB.Status.SUCCESS : CircuitPB.Status.HOP_CANT_SPEAK_RELAY\n  })\n}\n\nmodule.exports = {\n  handleHop,\n  hop,\n  canHop,\n  handleCanHop\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}