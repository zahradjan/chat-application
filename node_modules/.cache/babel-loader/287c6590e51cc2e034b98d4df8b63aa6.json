{"ast":null,"code":"'use strict';\n\nvar forgePbkdf2 = require('node-forge/lib/pbkdf2');\n\nvar forgeUtil = require('node-forge/lib/util');\n/**\n * Maps an IPFS hash name to its node-forge equivalent.\n *\n * See https://github.com/multiformats/multihash/blob/master/hashtable.csv\n *\n * @private\n */\n\n\nvar hashName = {\n  sha1: 'sha1',\n  'sha2-256': 'sha256',\n  'sha2-512': 'sha512'\n};\n/**\n * Computes the Password-Based Key Derivation Function 2.\n *\n * @param {string} password\n * @param {string} salt\n * @param {number} iterations\n * @param {number} keySize (in bytes)\n * @param {string} hash - The hash name ('sha1', 'sha2-512, ...)\n * @returns {string} - A new password\n */\n\nfunction pbkdf2(password, salt, iterations, keySize, hash) {\n  var hasher = hashName[hash];\n\n  if (!hasher) {\n    throw new Error(\"Hash '\".concat(hash, \"' is unknown or not supported\"));\n  }\n\n  var dek = forgePbkdf2(password, salt, iterations, keySize, hasher);\n  return forgeUtil.encode64(dek);\n}\n\nmodule.exports = pbkdf2;","map":{"version":3,"names":["forgePbkdf2","require","forgeUtil","hashName","sha1","pbkdf2","password","salt","iterations","keySize","hash","hasher","Error","dek","encode64","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/orbit-db-keystore/node_modules/libp2p-crypto/src/pbkdf2.js"],"sourcesContent":["'use strict'\n\nconst forgePbkdf2 = require('node-forge/lib/pbkdf2')\nconst forgeUtil = require('node-forge/lib/util')\n\n/**\n * Maps an IPFS hash name to its node-forge equivalent.\n *\n * See https://github.com/multiformats/multihash/blob/master/hashtable.csv\n *\n * @private\n */\nconst hashName = {\n  sha1: 'sha1',\n  'sha2-256': 'sha256',\n  'sha2-512': 'sha512'\n}\n\n/**\n * Computes the Password-Based Key Derivation Function 2.\n *\n * @param {string} password\n * @param {string} salt\n * @param {number} iterations\n * @param {number} keySize (in bytes)\n * @param {string} hash - The hash name ('sha1', 'sha2-512, ...)\n * @returns {string} - A new password\n */\nfunction pbkdf2 (password, salt, iterations, keySize, hash) {\n  const hasher = hashName[hash]\n  if (!hasher) {\n    throw new Error(`Hash '${hash}' is unknown or not supported`)\n  }\n  const dek = forgePbkdf2(\n    password,\n    salt,\n    iterations,\n    keySize,\n    hasher)\n  return forgeUtil.encode64(dek)\n}\n\nmodule.exports = pbkdf2\n"],"mappings":"AAAA;;AAEA,IAAMA,WAAW,GAAGC,OAAO,CAAC,uBAAD,CAA3B;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,qBAAD,CAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAME,QAAQ,GAAG;EACfC,IAAI,EAAE,MADS;EAEf,YAAY,QAFG;EAGf,YAAY;AAHG,CAAjB;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,MAAT,CAAiBC,QAAjB,EAA2BC,IAA3B,EAAiCC,UAAjC,EAA6CC,OAA7C,EAAsDC,IAAtD,EAA4D;EAC1D,IAAMC,MAAM,GAAGR,QAAQ,CAACO,IAAD,CAAvB;;EACA,IAAI,CAACC,MAAL,EAAa;IACX,MAAM,IAAIC,KAAJ,iBAAmBF,IAAnB,mCAAN;EACD;;EACD,IAAMG,GAAG,GAAGb,WAAW,CACrBM,QADqB,EAErBC,IAFqB,EAGrBC,UAHqB,EAIrBC,OAJqB,EAKrBE,MALqB,CAAvB;EAMA,OAAOT,SAAS,CAACY,QAAV,CAAmBD,GAAnB,CAAP;AACD;;AAEDE,MAAM,CAACC,OAAP,GAAiBX,MAAjB"},"metadata":{},"sourceType":"script"}