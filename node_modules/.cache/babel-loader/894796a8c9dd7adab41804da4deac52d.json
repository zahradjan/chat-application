{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _objectSpread = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar errCode = require('err-code');\n\nvar AbortController = require('abort-controller').default;\n\nvar _require = require('any-signal'),\n    anySignal = _require.anySignal; // @ts-ignore p-fifo does not export types\n\n\nvar FIFO = require('p-fifo');\n\nvar pAny = require('p-any');\n/**\n * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection\n * @typedef {import('./')} Dialer\n * @typedef {import('multiaddr').Multiaddr} Multiaddr\n */\n\n/**\n * @typedef {Object} DialOptions\n * @property {AbortSignal} signal\n *\n * @typedef {Object} DialRequestOptions\n * @property {Multiaddr[]} addrs\n * @property {(m: Multiaddr, options: DialOptions) => Promise<Connection>} dialAction\n * @property {Dialer} dialer\n */\n\n\nvar DialRequest = /*#__PURE__*/function () {\n  /**\n   * Manages running the `dialAction` on multiple provided `addrs` in parallel\n   * up to a maximum determined by the number of tokens returned\n   * from `dialer.getTokens`. Once a DialRequest is created, it can be\n   * started using `DialRequest.run(options)`. Once a single dial has succeeded,\n   * all other dials in the request will be cancelled.\n   *\n   * @class\n   * @param {DialRequestOptions} options\n   */\n  function DialRequest(_ref) {\n    var addrs = _ref.addrs,\n        dialAction = _ref.dialAction,\n        dialer = _ref.dialer;\n\n    _classCallCheck(this, DialRequest);\n\n    this.addrs = addrs;\n    this.dialer = dialer;\n    this.dialAction = dialAction;\n  }\n  /**\n   * @async\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal] - An AbortController signal\n   * @returns {Promise<Connection>}\n   */\n\n\n  _createClass(DialRequest, [{\n    key: \"run\",\n    value: function () {\n      var _run = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _this = this;\n\n        var options,\n            tokens,\n            tokenHolder,\n            dialAbortControllers,\n            completedDials,\n            _args2 = arguments;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                options = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};\n                tokens = this.dialer.getTokens(this.addrs.length); // If no tokens are available, throw\n\n                if (!(tokens.length < 1)) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                throw errCode(new Error('No dial tokens available'), 'ERR_NO_DIAL_TOKENS');\n\n              case 4:\n                tokenHolder = new FIFO();\n                tokens.forEach(function (token) {\n                  return tokenHolder.push(token);\n                });\n                dialAbortControllers = this.addrs.map(function () {\n                  return new AbortController();\n                });\n                completedDials = 0;\n                _context2.prev = 8;\n                _context2.next = 11;\n                return pAny(this.addrs.map( /*#__PURE__*/function () {\n                  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(addr, i) {\n                    var token, conn, signal;\n                    return _regeneratorRuntime().wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.next = 2;\n                            return tokenHolder.shift();\n\n                          case 2:\n                            token = _context.sent;\n                            _context.prev = 3;\n                            signal = dialAbortControllers[i].signal;\n                            _context.next = 7;\n                            return _this.dialAction(addr, _objectSpread(_objectSpread({}, options), {}, {\n                              signal: options.signal ? anySignal([signal, options.signal]) : signal\n                            }));\n\n                          case 7:\n                            conn = _context.sent;\n                            // Remove the successful AbortController so it is not aborted\n                            dialAbortControllers.splice(i, 1);\n\n                          case 9:\n                            _context.prev = 9;\n                            completedDials++; // If we have more or equal dials remaining than tokens, recycle the token, otherwise release it\n\n                            if (_this.addrs.length - completedDials >= tokens.length) {\n                              tokenHolder.push(token);\n                            } else {\n                              _this.dialer.releaseToken(tokens.splice(tokens.indexOf(token), 1)[0]);\n                            }\n\n                            return _context.finish(9);\n\n                          case 13:\n                            return _context.abrupt(\"return\", conn);\n\n                          case 14:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee, null, [[3,, 9, 13]]);\n                  }));\n\n                  return function (_x, _x2) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }()));\n\n              case 11:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 12:\n                _context2.prev = 12;\n                dialAbortControllers.map(function (c) {\n                  return c.abort();\n                }); // success/failure happened, abort everything else\n\n                tokens.forEach(function (token) {\n                  return _this.dialer.releaseToken(token);\n                }); // release tokens back to the dialer\n\n                return _context2.finish(12);\n\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[8,, 12, 16]]);\n      }));\n\n      function run() {\n        return _run.apply(this, arguments);\n      }\n\n      return run;\n    }()\n  }]);\n\n  return DialRequest;\n}();\n\nmodule.exports = DialRequest;","map":{"version":3,"names":["errCode","require","AbortController","default","anySignal","FIFO","pAny","DialRequest","addrs","dialAction","dialer","options","tokens","getTokens","length","Error","tokenHolder","forEach","token","push","dialAbortControllers","map","completedDials","addr","i","shift","signal","conn","splice","releaseToken","indexOf","c","abort","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p/src/dialer/dial-request.js"],"sourcesContent":["'use strict'\n\nconst errCode = require('err-code')\nconst AbortController = require('abort-controller').default\nconst { anySignal } = require('any-signal')\n// @ts-ignore p-fifo does not export types\nconst FIFO = require('p-fifo')\nconst pAny = require('p-any')\n\n/**\n * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection\n * @typedef {import('./')} Dialer\n * @typedef {import('multiaddr').Multiaddr} Multiaddr\n */\n\n/**\n * @typedef {Object} DialOptions\n * @property {AbortSignal} signal\n *\n * @typedef {Object} DialRequestOptions\n * @property {Multiaddr[]} addrs\n * @property {(m: Multiaddr, options: DialOptions) => Promise<Connection>} dialAction\n * @property {Dialer} dialer\n */\n\nclass DialRequest {\n  /**\n   * Manages running the `dialAction` on multiple provided `addrs` in parallel\n   * up to a maximum determined by the number of tokens returned\n   * from `dialer.getTokens`. Once a DialRequest is created, it can be\n   * started using `DialRequest.run(options)`. Once a single dial has succeeded,\n   * all other dials in the request will be cancelled.\n   *\n   * @class\n   * @param {DialRequestOptions} options\n   */\n  constructor ({\n    addrs,\n    dialAction,\n    dialer\n  }) {\n    this.addrs = addrs\n    this.dialer = dialer\n    this.dialAction = dialAction\n  }\n\n  /**\n   * @async\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal] - An AbortController signal\n   * @returns {Promise<Connection>}\n   */\n  async run (options = {}) {\n    const tokens = this.dialer.getTokens(this.addrs.length)\n    // If no tokens are available, throw\n    if (tokens.length < 1) {\n      throw errCode(new Error('No dial tokens available'), 'ERR_NO_DIAL_TOKENS')\n    }\n\n    const tokenHolder = new FIFO()\n    tokens.forEach(token => tokenHolder.push(token))\n    const dialAbortControllers = this.addrs.map(() => new AbortController())\n    let completedDials = 0\n\n    try {\n      return await pAny(this.addrs.map(async (addr, i) => {\n        const token = await tokenHolder.shift() // get token\n        let conn\n        try {\n          const signal = dialAbortControllers[i].signal\n          conn = await this.dialAction(addr, { ...options, signal: options.signal ? anySignal([signal, options.signal]) : signal })\n          // Remove the successful AbortController so it is not aborted\n          dialAbortControllers.splice(i, 1)\n        } finally {\n          completedDials++\n          // If we have more or equal dials remaining than tokens, recycle the token, otherwise release it\n          if (this.addrs.length - completedDials >= tokens.length) {\n            tokenHolder.push(token)\n          } else {\n            this.dialer.releaseToken(tokens.splice(tokens.indexOf(token), 1)[0])\n          }\n        }\n\n        return conn\n      }))\n    } finally {\n      dialAbortControllers.map(c => c.abort()) // success/failure happened, abort everything else\n      tokens.forEach(token => this.dialer.releaseToken(token)) // release tokens back to the dialer\n    }\n  }\n}\n\nmodule.exports = DialRequest\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}