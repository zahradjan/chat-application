{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar PeerQueue = require('../peer-list/peer-queue');\n\nvar utils = require('../utils'); // TODO: Temporary until parallel dial in Switch have a proper\n// timeout. Requires async/await refactor of transports and\n// dial abort logic. This gives us 30s to complete the `queryFunc`.\n// This should help reduce the high end call times of queries\n\n\nvar QUERY_FUNC_TIMEOUT = 30e3;\n/**\n * @typedef {import('peer-id')} PeerId\n */\n\n/**\n * Manages a single Path through the DHT.\n */\n\nvar Path = /*#__PURE__*/function () {\n  /**\n   * Creates a Path.\n   *\n   * @param {import('./run')} run\n   * @param {import('./index').QueryFunc} queryFunc\n   */\n  function Path(run, queryFunc) {\n    _classCallCheck(this, Path);\n\n    this.run = run;\n    this.queryFunc = utils.withTimeout(queryFunc, QUERY_FUNC_TIMEOUT);\n    if (!this.queryFunc) throw new Error('Path requires a `queryFn` to be specified');\n    if (typeof this.queryFunc !== 'function') throw new Error('Path expected `queryFn` to be a function. Got ' + typeof this.queryFunc);\n    /** @type {PeerId[]} */\n\n    this.initialPeers = [];\n    /** @type {PeerQueue | null} */\n\n    this.peersToQuery = null;\n    /** @type {import('./index').QueryResult | null} */\n\n    this.res = null;\n  }\n  /**\n   * Add a peer to the set of peers that are used to intialize the path.\n   *\n   * @param {PeerId} peer\n   */\n\n\n  _createClass(Path, [{\n    key: \"addInitialPeer\",\n    value: function addInitialPeer(peer) {\n      this.initialPeers.push(peer);\n    }\n    /**\n     * Execute the path\n     */\n\n  }, {\n    key: \"execute\",\n    value: function () {\n      var _execute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _this = this;\n\n        var queue;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return PeerQueue.fromKey(this.run.query.key);\n\n              case 2:\n                queue = _context.sent;\n                // Add initial peers to the queue\n                this.peersToQuery = queue;\n                _context.next = 6;\n                return Promise.all(this.initialPeers.map(function (peer) {\n                  return _this.addPeerToQuery(peer);\n                }));\n\n              case 6:\n                _context.next = 8;\n                return this.run.workerQueue(this);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function execute() {\n        return _execute.apply(this, arguments);\n      }\n\n      return execute;\n    }()\n    /**\n     * Add a peer to the peers to be queried.\n     *\n     * @param {PeerId} peer\n     */\n\n  }, {\n    key: \"addPeerToQuery\",\n    value: function () {\n      var _addPeerToQuery = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(peer) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!this.run.query.dht._isSelf(peer)) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 2:\n                if (!this.run.peersSeen.has(peer.toB58String())) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 4:\n                if (!this.peersToQuery) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                _context2.next = 7;\n                return this.peersToQuery.enqueue(peer);\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function addPeerToQuery(_x) {\n        return _addPeerToQuery.apply(this, arguments);\n      }\n\n      return addPeerToQuery;\n    }()\n  }]);\n\n  return Path;\n}();\n\nmodule.exports = Path;","map":{"version":3,"names":["PeerQueue","require","utils","QUERY_FUNC_TIMEOUT","Path","run","queryFunc","withTimeout","Error","initialPeers","peersToQuery","res","peer","push","fromKey","query","key","queue","Promise","all","map","addPeerToQuery","workerQueue","dht","_isSelf","peersSeen","has","toB58String","enqueue","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-kad-dht/src/query/path.js"],"sourcesContent":["'use strict'\n\nconst PeerQueue = require('../peer-list/peer-queue')\nconst utils = require('../utils')\n\n// TODO: Temporary until parallel dial in Switch have a proper\n// timeout. Requires async/await refactor of transports and\n// dial abort logic. This gives us 30s to complete the `queryFunc`.\n// This should help reduce the high end call times of queries\nconst QUERY_FUNC_TIMEOUT = 30e3\n\n/**\n * @typedef {import('peer-id')} PeerId\n */\n\n/**\n * Manages a single Path through the DHT.\n */\nclass Path {\n  /**\n   * Creates a Path.\n   *\n   * @param {import('./run')} run\n   * @param {import('./index').QueryFunc} queryFunc\n   */\n  constructor (run, queryFunc) {\n    this.run = run\n    this.queryFunc = utils.withTimeout(queryFunc, QUERY_FUNC_TIMEOUT)\n    if (!this.queryFunc) throw new Error('Path requires a `queryFn` to be specified')\n    if (typeof this.queryFunc !== 'function') throw new Error('Path expected `queryFn` to be a function. Got ' + typeof this.queryFunc)\n\n    /** @type {PeerId[]} */\n    this.initialPeers = []\n\n    /** @type {PeerQueue | null} */\n    this.peersToQuery = null\n\n    /** @type {import('./index').QueryResult | null} */\n    this.res = null\n  }\n\n  /**\n   * Add a peer to the set of peers that are used to intialize the path.\n   *\n   * @param {PeerId} peer\n   */\n  addInitialPeer (peer) {\n    this.initialPeers.push(peer)\n  }\n\n  /**\n   * Execute the path\n   */\n  async execute () {\n    // Create a queue of peers ordered by distance from the key\n    const queue = await PeerQueue.fromKey(this.run.query.key)\n    // Add initial peers to the queue\n    this.peersToQuery = queue\n    await Promise.all(this.initialPeers.map(peer => this.addPeerToQuery(peer)))\n    await this.run.workerQueue(this)\n  }\n\n  /**\n   * Add a peer to the peers to be queried.\n   *\n   * @param {PeerId} peer\n   */\n  async addPeerToQuery (peer) {\n    // Don't add self\n    if (this.run.query.dht._isSelf(peer)) {\n      return\n    }\n\n    // The paths must be disjoint, meaning that no two paths in the Query may\n    // traverse the same peer\n    if (this.run.peersSeen.has(peer.toB58String())) {\n      return\n    }\n\n    if (this.peersToQuery) {\n      await this.peersToQuery.enqueue(peer)\n    }\n  }\n}\n\nmodule.exports = Path\n"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,yBAAD,CAAzB;;AACA,IAAMC,KAAK,GAAGD,OAAO,CAAC,UAAD,CAArB,C,CAEA;AACA;AACA;AACA;;;AACA,IAAME,kBAAkB,GAAG,IAA3B;AAEA;AACA;AACA;;AAEA;AACA;AACA;;IACMC,I;EACJ;AACF;AACA;AACA;AACA;AACA;EACE,cAAaC,GAAb,EAAkBC,SAAlB,EAA6B;IAAA;;IAC3B,KAAKD,GAAL,GAAWA,GAAX;IACA,KAAKC,SAAL,GAAiBJ,KAAK,CAACK,WAAN,CAAkBD,SAAlB,EAA6BH,kBAA7B,CAAjB;IACA,IAAI,CAAC,KAAKG,SAAV,EAAqB,MAAM,IAAIE,KAAJ,CAAU,2CAAV,CAAN;IACrB,IAAI,OAAO,KAAKF,SAAZ,KAA0B,UAA9B,EAA0C,MAAM,IAAIE,KAAJ,CAAU,mDAAmD,OAAO,KAAKF,SAAzE,CAAN;IAE1C;;IACA,KAAKG,YAAL,GAAoB,EAApB;IAEA;;IACA,KAAKC,YAAL,GAAoB,IAApB;IAEA;;IACA,KAAKC,GAAL,GAAW,IAAX;EACD;EAED;AACF;AACA;AACA;AACA;;;;;WACE,wBAAgBC,IAAhB,EAAsB;MACpB,KAAKH,YAAL,CAAkBI,IAAlB,CAAuBD,IAAvB;IACD;IAED;AACF;AACA;;;;;gFACE;QAAA;;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OAEsBZ,SAAS,CAACc,OAAV,CAAkB,KAAKT,GAAL,CAASU,KAAT,CAAeC,GAAjC,CAFtB;;cAAA;gBAEQC,KAFR;gBAGE;gBACA,KAAKP,YAAL,GAAoBO,KAApB;gBAJF;gBAAA,OAKQC,OAAO,CAACC,GAAR,CAAY,KAAKV,YAAL,CAAkBW,GAAlB,CAAsB,UAAAR,IAAI;kBAAA,OAAI,KAAI,CAACS,cAAL,CAAoBT,IAApB,CAAJ;gBAAA,CAA1B,CAAZ,CALR;;cAAA;gBAAA;gBAAA,OAMQ,KAAKP,GAAL,CAASiB,WAAT,CAAqB,IAArB,CANR;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;IASA;AACF;AACA;AACA;AACA;;;;;uFACE,kBAAsBV,IAAtB;QAAA;UAAA;YAAA;cAAA;gBAAA,KAEM,KAAKP,GAAL,CAASU,KAAT,CAAeQ,GAAf,CAAmBC,OAAnB,CAA2BZ,IAA3B,CAFN;kBAAA;kBAAA;gBAAA;;gBAAA;;cAAA;gBAAA,KAQM,KAAKP,GAAL,CAASoB,SAAT,CAAmBC,GAAnB,CAAuBd,IAAI,CAACe,WAAL,EAAvB,CARN;kBAAA;kBAAA;gBAAA;;gBAAA;;cAAA;gBAAA,KAYM,KAAKjB,YAZX;kBAAA;kBAAA;gBAAA;;gBAAA;gBAAA,OAaU,KAAKA,YAAL,CAAkBkB,OAAlB,CAA0BhB,IAA1B,CAbV;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;;;;;;AAkBFiB,MAAM,CAACC,OAAP,GAAiB1B,IAAjB"},"metadata":{},"sourceType":"script"}