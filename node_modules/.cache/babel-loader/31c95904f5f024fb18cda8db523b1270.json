{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _objectSpread = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nvar multipartRequest = require('../lib/multipart-request');\n\nvar abortSignal = require('../lib/abort-signal');\n\nvar _require = require('native-abort-controller'),\n    AbortController = _require.AbortController;\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions>} PubsubAPI\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {PubsubAPI[\"publish\"]}\n   */\n  function publish(_x, _x2) {\n    return _publish.apply(this, arguments);\n  }\n\n  function _publish() {\n    _publish = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(topic, data) {\n      var options,\n          searchParams,\n          controller,\n          signal,\n          res,\n          _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n              searchParams = toUrlSearchParams(_objectSpread({\n                arg: topic\n              }, options)); // allow aborting requests on body errors\n\n              controller = new AbortController();\n              signal = abortSignal(controller.signal, options.signal);\n              _context.t0 = api;\n              _context.t1 = _objectSpread;\n              _context.t2 = {\n                signal: signal,\n                searchParams: searchParams\n              };\n              _context.next = 9;\n              return multipartRequest(data, controller, options.headers);\n\n            case 9:\n              _context.t3 = _context.sent;\n              _context.t4 = (0, _context.t1)(_context.t2, _context.t3);\n              _context.next = 13;\n              return _context.t0.post.call(_context.t0, 'pubsub/pub', _context.t4);\n\n            case 13:\n              res = _context.sent;\n              _context.next = 16;\n              return res.text();\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _publish.apply(this, arguments);\n  }\n\n  return publish;\n});","map":{"version":3,"names":["configure","require","toUrlSearchParams","multipartRequest","abortSignal","AbortController","module","exports","api","publish","topic","data","options","searchParams","arg","controller","signal","headers","post","res","text"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-http-client/src/pubsub/publish.js"],"sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst multipartRequest = require('../lib/multipart-request')\nconst abortSignal = require('../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions>} PubsubAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {PubsubAPI[\"publish\"]}\n   */\n  async function publish (topic, data, options = {}) {\n    const searchParams = toUrlSearchParams({\n      arg: topic,\n      ...options\n    })\n\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('pubsub/pub', {\n      signal,\n      searchParams,\n      ...(\n        await multipartRequest(data, controller, options.headers)\n      )\n    })\n\n    await res.text()\n  }\n  return publish\n})\n"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMC,iBAAiB,GAAGD,OAAO,CAAC,6BAAD,CAAjC;;AACA,IAAME,gBAAgB,GAAGF,OAAO,CAAC,0BAAD,CAAhC;;AACA,IAAMG,WAAW,GAAGH,OAAO,CAAC,qBAAD,CAA3B;;AACA,eAA4BA,OAAO,CAAC,yBAAD,CAAnC;AAAA,IAAQI,eAAR,YAAQA,eAAR;AAEA;AACA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiBP,SAAS,CAAC,UAAAQ,GAAG,EAAI;EAChC;AACF;AACA;EAHkC,SAIjBC,OAJiB;IAAA;EAAA;;EAAA;IAAA,sEAIhC,iBAAwBC,KAAxB,EAA+BC,IAA/B;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAqCC,OAArC,2DAA+C,EAA/C;cACQC,YADR,GACuBX,iBAAiB;gBACpCY,GAAG,EAAEJ;cAD+B,GAEjCE,OAFiC,EADxC,EAME;;cACMG,UAPR,GAOqB,IAAIV,eAAJ,EAPrB;cAQQW,MARR,GAQiBZ,WAAW,CAACW,UAAU,CAACC,MAAZ,EAAoBJ,OAAO,CAACI,MAA5B,CAR5B;cAAA,cAUoBR,GAVpB;cAAA;cAAA;gBAWIQ,MAAM,EAANA,MAXJ;gBAYIH,YAAY,EAAZA;cAZJ;cAAA;cAAA,OAcYV,gBAAgB,CAACQ,IAAD,EAAOI,UAAP,EAAmBH,OAAO,CAACK,OAA3B,CAd5B;;YAAA;cAAA;cAAA;cAAA;cAAA,mBAUwBC,IAVxB,mBAU6B,YAV7B;;YAAA;cAUQC,GAVR;cAAA;cAAA,OAkBQA,GAAG,CAACC,IAAJ,EAlBR;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAJgC;IAAA;EAAA;;EAwBhC,OAAOX,OAAP;AACD,CAzByB,CAA1B"},"metadata":{},"sourceType":"script"}