{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar IdentityProvider = /*#__PURE__*/function () {\n  function IdentityProvider() {\n    _classCallCheck(this, IdentityProvider);\n  }\n\n  _createClass(IdentityProvider, [{\n    key: \"getId\",\n    value:\n    /* Return id of identity (to be signed by orbit-db public key) */\n    function () {\n      var _getId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(options) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getId(_x) {\n        return _getId.apply(this, arguments);\n      }\n\n      return getId;\n    }()\n    /* Return signature of OrbitDB public key signature */\n\n  }, {\n    key: \"signIdentity\",\n    value: function () {\n      var _signIdentity = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(data, options) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function signIdentity(_x2, _x3) {\n        return _signIdentity.apply(this, arguments);\n      }\n\n      return signIdentity;\n    }()\n    /* Verify a signature of OrbitDB public key signature */\n\n  }, {\n    key: \"type\",\n    get:\n    /*\n      Return the type for this identity-procider\n      NOTE! This is the only property of the interface that\n      shouldn't be overridden in the inherited IdentityProvider\n    */\n    function get() {\n      return this.constructor.type;\n    }\n  }], [{\n    key: \"verifyIdentity\",\n    value: function () {\n      var _verifyIdentity = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(identity) {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function verifyIdentity(_x4) {\n        return _verifyIdentity.apply(this, arguments);\n      }\n\n      return verifyIdentity;\n    }()\n    /* Return the type for this identity provider */\n\n  }, {\n    key: \"type\",\n    get: function get() {\n      throw new Error(\"'static get type ()' needs to be defined in the inheriting class\");\n    }\n  }]);\n\n  return IdentityProvider;\n}();\n\nmodule.exports = IdentityProvider;","map":{"version":3,"names":["IdentityProvider","options","data","constructor","type","identity","Error","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/orbit-db-identity-provider/src/identity-provider-interface.js"],"sourcesContent":["'use strict'\n\nclass IdentityProvider {\n  /* Return id of identity (to be signed by orbit-db public key) */\n  async getId (options) {}\n\n  /* Return signature of OrbitDB public key signature */\n  async signIdentity (data, options) {}\n\n  /* Verify a signature of OrbitDB public key signature */\n  static async verifyIdentity (identity) {}\n\n  /* Return the type for this identity provider */\n  static get type () {\n    throw new Error(`'static get type ()' needs to be defined in the inheriting class`)\n  }\n\n  /*\n    Return the type for this identity-procider\n    NOTE! This is the only property of the interface that\n    shouldn't be overridden in the inherited IdentityProvider\n  */\n  get type () {\n    return this.constructor.type\n  }\n}\n\nmodule.exports = IdentityProvider\n"],"mappings":"AAAA;;;;;;;;;;IAEMA,gB;;;;;;;;IACJ;;8EACA,iBAAaC,OAAb;QAAA;UAAA;YAAA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;IAEA;;;;;qFACA,kBAAoBC,IAApB,EAA0BD,OAA1B;QAAA;UAAA;YAAA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;IAEA;;;;;IAQA;AACF;AACA;AACA;AACA;IACE,eAAY;MACV,OAAO,KAAKE,WAAL,CAAiBC,IAAxB;IACD;;;;uFAdD,kBAA6BC,QAA7B;QAAA;UAAA;YAAA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;IAEA;;;;SACA,eAAmB;MACjB,MAAM,IAAIC,KAAJ,oEAAN;IACD;;;;;;AAYHC,MAAM,CAACC,OAAP,GAAiBR,gBAAjB"},"metadata":{},"sourceType":"script"}