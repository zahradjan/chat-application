{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _asyncGeneratorDelegate = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate.js\").default;\n\nvar _awaitAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _wrapAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nvar _asyncIterator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar filter = require('it-filter');\n\nvar pushable = require('it-pushable');\n\nvar drain = require('it-drain');\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar errCode = require('err-code');\n\nvar _require2 = require('multiformats/hashes/identity'),\n    identity = _require2.identity;\n/**\n * @typedef {import('interface-datastore').Query} Query\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-datastore').Options} DatastoreOptions\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n */\n\n/**\n *\n * @param {Blockstore} blockstore\n */\n\n\nmodule.exports = createIdStore;\n/**\n * @param {Blockstore} store\n * @returns {Blockstore}\n */\n\nfunction createIdStore(store) {\n  return {\n    open: function open() {\n      return store.open();\n    },\n    close: function close() {\n      return store.close();\n    },\n    query: function query(_query, options) {\n      return store.query(_query, options);\n    },\n    queryKeys: function queryKeys(query, options) {\n      return store.queryKeys(query, options);\n    },\n    get: function get(cid, options) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var extracted;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                extracted = extractContents(cid);\n\n                if (!extracted.isIdentity) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", Promise.resolve(extracted.digest));\n\n              case 3:\n                return _context.abrupt(\"return\", store.get(cid, options));\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    getMany: function getMany(cids, options) {\n      var _this = this;\n\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, cid;\n\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _iteratorAbruptCompletion = false;\n                _didIteratorError = false;\n                _context2.prev = 2;\n                _iterator = _asyncIterator(cids);\n\n              case 4:\n                _context2.next = 6;\n                return _awaitAsyncGenerator(_iterator.next());\n\n              case 6:\n                if (!(_iteratorAbruptCompletion = !(_step = _context2.sent).done)) {\n                  _context2.next = 13;\n                  break;\n                }\n\n                cid = _step.value;\n                _context2.next = 10;\n                return _this.get(cid, options);\n\n              case 10:\n                _iteratorAbruptCompletion = false;\n                _context2.next = 4;\n                break;\n\n              case 13:\n                _context2.next = 19;\n                break;\n\n              case 15:\n                _context2.prev = 15;\n                _context2.t0 = _context2[\"catch\"](2);\n                _didIteratorError = true;\n                _iteratorError = _context2.t0;\n\n              case 19:\n                _context2.prev = 19;\n                _context2.prev = 20;\n\n                if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                  _context2.next = 24;\n                  break;\n                }\n\n                _context2.next = 24;\n                return _awaitAsyncGenerator(_iterator.return());\n\n              case 24:\n                _context2.prev = 24;\n\n                if (!_didIteratorError) {\n                  _context2.next = 27;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 27:\n                return _context2.finish(24);\n\n              case 28:\n                return _context2.finish(19);\n\n              case 29:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[2, 15, 19, 29], [20,, 24, 28]]);\n      }))();\n    },\n    put: function put(cid, buf, options) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var _extractContents, isIdentity;\n\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _extractContents = extractContents(cid), isIdentity = _extractContents.isIdentity;\n\n                if (!isIdentity) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 3:\n                _context3.next = 5;\n                return store.put(cid, buf, options);\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    },\n    putMany: function putMany(pairs, options) {\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var output, runner;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                // in order to return all blocks. we're going to assemble a seperate iterable\n                // return rather than return the resolves of store.putMany using the same\n                // process used by blockstore.putMany\n                output = pushable(); // process.nextTick runs on the microtask queue, setImmediate runs on the next\n                // event loop iteration so is slower. Use process.nextTick if it is available.\n\n                runner = process && process.nextTick ? process.nextTick : setImmediate;\n                runner( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n                  return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          _context5.prev = 0;\n                          _context5.next = 3;\n                          return drain(store.putMany(_wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n                            var _iteratorAbruptCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _step2$value, key, value;\n\n                            return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n                              while (1) {\n                                switch (_context4.prev = _context4.next) {\n                                  case 0:\n                                    _iteratorAbruptCompletion2 = false;\n                                    _didIteratorError2 = false;\n                                    _context4.prev = 2;\n                                    _iterator2 = _asyncIterator(pairs);\n\n                                  case 4:\n                                    _context4.next = 6;\n                                    return _awaitAsyncGenerator(_iterator2.next());\n\n                                  case 6:\n                                    if (!(_iteratorAbruptCompletion2 = !(_step2 = _context4.sent).done)) {\n                                      _context4.next = 15;\n                                      break;\n                                    }\n\n                                    _step2$value = _step2.value, key = _step2$value.key, value = _step2$value.value;\n\n                                    if (extractContents(key).isIdentity) {\n                                      _context4.next = 11;\n                                      break;\n                                    }\n\n                                    _context4.next = 11;\n                                    return {\n                                      key: key,\n                                      value: value\n                                    };\n\n                                  case 11:\n                                    // if non identity blocks successfully write, blocks are included in output\n                                    output.push({\n                                      key: key,\n                                      value: value\n                                    });\n\n                                  case 12:\n                                    _iteratorAbruptCompletion2 = false;\n                                    _context4.next = 4;\n                                    break;\n\n                                  case 15:\n                                    _context4.next = 21;\n                                    break;\n\n                                  case 17:\n                                    _context4.prev = 17;\n                                    _context4.t0 = _context4[\"catch\"](2);\n                                    _didIteratorError2 = true;\n                                    _iteratorError2 = _context4.t0;\n\n                                  case 21:\n                                    _context4.prev = 21;\n                                    _context4.prev = 22;\n\n                                    if (!(_iteratorAbruptCompletion2 && _iterator2.return != null)) {\n                                      _context4.next = 26;\n                                      break;\n                                    }\n\n                                    _context4.next = 26;\n                                    return _awaitAsyncGenerator(_iterator2.return());\n\n                                  case 26:\n                                    _context4.prev = 26;\n\n                                    if (!_didIteratorError2) {\n                                      _context4.next = 29;\n                                      break;\n                                    }\n\n                                    throw _iteratorError2;\n\n                                  case 29:\n                                    return _context4.finish(26);\n\n                                  case 30:\n                                    return _context4.finish(21);\n\n                                  case 31:\n                                  case \"end\":\n                                    return _context4.stop();\n                                }\n                              }\n                            }, _callee4, null, [[2, 17, 21, 31], [22,, 26, 30]]);\n                          }))()));\n\n                        case 3:\n                          output.end();\n                          _context5.next = 9;\n                          break;\n\n                        case 6:\n                          _context5.prev = 6;\n                          _context5.t0 = _context5[\"catch\"](0);\n                          output.end(_context5.t0);\n\n                        case 9:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, _callee5, null, [[0, 6]]);\n                })));\n                return _context6.delegateYield(_asyncGeneratorDelegate(_asyncIterator(output), _awaitAsyncGenerator), \"t0\", 4);\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }))();\n    },\n    has: function has(cid, options) {\n      var _extractContents2 = extractContents(cid),\n          isIdentity = _extractContents2.isIdentity;\n\n      if (isIdentity) {\n        return Promise.resolve(true);\n      }\n\n      return store.has(cid, options);\n    },\n    delete: function _delete(cid, options) {\n      var _extractContents3 = extractContents(cid),\n          isIdentity = _extractContents3.isIdentity;\n\n      if (isIdentity) {\n        return Promise.resolve();\n      }\n\n      return store.delete(cid, options);\n    },\n    deleteMany: function deleteMany(cids, options) {\n      return store.deleteMany(filter(cids, function (cid) {\n        return !extractContents(cid).isIdentity;\n      }), options);\n    },\n    batch: function batch() {\n      var batch = store.batch();\n      return {\n        put: function put(cid, buf) {\n          var _extractContents4 = extractContents(cid),\n              isIdentity = _extractContents4.isIdentity;\n\n          if (isIdentity) {\n            return;\n          }\n\n          batch.put(cid, buf);\n        },\n        delete: function _delete(cid) {\n          var _extractContents5 = extractContents(cid),\n              isIdentity = _extractContents5.isIdentity;\n\n          if (isIdentity) {\n            return;\n          }\n\n          batch.delete(cid);\n        },\n        commit: function commit(options) {\n          return batch.commit(options);\n        }\n      };\n    }\n  };\n}\n/**\n * @param {CID} k\n * @returns {{ isIdentity: false } | { isIdentity: true, digest: Uint8Array}}\n */\n\n\nfunction extractContents(k) {\n  var cid = CID.asCID(k);\n\n  if (cid == null) {\n    throw errCode(new Error('Not a valid cid'), 'ERR_INVALID_CID');\n  }\n\n  if (cid.multihash.code !== identity.code) {\n    return {\n      isIdentity: false\n    };\n  }\n\n  return {\n    isIdentity: true,\n    digest: cid.multihash.digest\n  };\n}","map":{"version":3,"names":["filter","require","pushable","drain","CID","errCode","identity","module","exports","createIdStore","store","open","close","query","options","queryKeys","get","cid","extracted","extractContents","isIdentity","Promise","resolve","digest","getMany","cids","put","buf","putMany","pairs","output","runner","process","nextTick","setImmediate","key","value","push","end","has","delete","deleteMany","batch","commit","k","asCID","Error","multihash","code"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-repo/src/idstore.js"],"sourcesContent":["'use strict'\n\nconst filter = require('it-filter')\nconst pushable = require('it-pushable')\nconst drain = require('it-drain')\nconst { CID } = require('multiformats/cid')\nconst errCode = require('err-code')\nconst { identity } = require('multiformats/hashes/identity')\n\n/**\n * @typedef {import('interface-datastore').Query} Query\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-datastore').Options} DatastoreOptions\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n */\n\n/**\n *\n * @param {Blockstore} blockstore\n */\nmodule.exports = createIdStore\n\n/**\n * @param {Blockstore} store\n * @returns {Blockstore}\n */\nfunction createIdStore (store) {\n  return {\n    open () {\n      return store.open()\n    },\n\n    close () {\n      return store.close()\n    },\n\n    query (query, options) {\n      return store.query(query, options)\n    },\n\n    queryKeys (query, options) {\n      return store.queryKeys(query, options)\n    },\n\n    async get (cid, options) {\n      const extracted = extractContents(cid)\n      if (extracted.isIdentity) {\n        return Promise.resolve(extracted.digest)\n      }\n      return store.get(cid, options)\n    },\n\n    async * getMany (cids, options) {\n      for await (const cid of cids) {\n        yield this.get(cid, options)\n      }\n    },\n\n    async put (cid, buf, options) {\n      const { isIdentity } = extractContents(cid)\n\n      if (isIdentity) {\n        return\n      }\n\n      await store.put(cid, buf, options)\n    },\n\n    async * putMany (pairs, options) {\n      // in order to return all blocks. we're going to assemble a seperate iterable\n      // return rather than return the resolves of store.putMany using the same\n      // process used by blockstore.putMany\n      const output = pushable()\n\n      // process.nextTick runs on the microtask queue, setImmediate runs on the next\n      // event loop iteration so is slower. Use process.nextTick if it is available.\n      const runner = process && process.nextTick ? process.nextTick : setImmediate\n\n      runner(async () => {\n        try {\n          await drain(store.putMany(async function * () {\n            for await (const { key, value } of pairs) {\n              if (!extractContents(key).isIdentity) {\n                yield { key, value }\n              }\n\n              // if non identity blocks successfully write, blocks are included in output\n              output.push({ key, value })\n            }\n          }()))\n\n          output.end()\n        } catch (err) {\n          output.end(err)\n        }\n      })\n\n      yield * output\n    },\n\n    has (cid, options) {\n      const { isIdentity } = extractContents(cid)\n      if (isIdentity) {\n        return Promise.resolve(true)\n      }\n      return store.has(cid, options)\n    },\n\n    delete (cid, options) {\n      const { isIdentity } = extractContents(cid)\n      if (isIdentity) {\n        return Promise.resolve()\n      }\n      return store.delete(cid, options)\n    },\n\n    deleteMany (cids, options) {\n      return store.deleteMany(filter(cids, (cid) => !extractContents(cid).isIdentity), options)\n    },\n\n    batch () {\n      const batch = store.batch()\n\n      return {\n        put (cid, buf) {\n          const { isIdentity } = extractContents(cid)\n\n          if (isIdentity) {\n            return\n          }\n\n          batch.put(cid, buf)\n        },\n        delete (cid) {\n          const { isIdentity } = extractContents(cid)\n\n          if (isIdentity) {\n            return\n          }\n\n          batch.delete(cid)\n        },\n        commit: (options) => {\n          return batch.commit(options)\n        }\n      }\n    }\n  }\n}\n\n/**\n * @param {CID} k\n * @returns {{ isIdentity: false } | { isIdentity: true, digest: Uint8Array}}\n */\nfunction extractContents (k) {\n  const cid = CID.asCID(k)\n\n  if (cid == null) {\n    throw errCode(new Error('Not a valid cid'), 'ERR_INVALID_CID')\n  }\n\n  if (cid.multihash.code !== identity.code) {\n    return {\n      isIdentity: false\n    }\n  }\n\n  return {\n    isIdentity: true,\n    digest: cid.multihash.digest\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}