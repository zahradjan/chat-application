{"ast":null,"code":"/* eslint-env browser */\n'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _require = require('p-queue'),\n    PQueue = _require.default;\n\nvar HTTP = require('ipfs-utils/src/http');\n\nvar debug = require('debug');\n\nvar log = Object.assign(debug('ipfs:preload'), {\n  error: debug('ipfs:preload:error')\n}); // browsers limit concurrent connections per host,\n// we don't want preload calls to exhaust the limit (~6)\n\nvar httpQueue = new PQueue({\n  concurrency: 4\n});\n/**\n * @param {string} url\n * @param {import('ipfs-core-types/src/utils').AbortOptions} options\n */\n\nmodule.exports = function preload(url) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  log(url);\n  return httpQueue.add( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var res, reader, _yield$reader$read, done;\n\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return HTTP.post(url, {\n              signal: options.signal\n            });\n\n          case 2:\n            res = _context.sent;\n            // @ts-ignore\n            reader = res.body.getReader();\n            _context.prev = 4;\n\n          case 5:\n            if (!true) {\n              _context.next = 14;\n              break;\n            }\n\n            _context.next = 8;\n            return reader.read();\n\n          case 8:\n            _yield$reader$read = _context.sent;\n            done = _yield$reader$read.done;\n\n            if (!done) {\n              _context.next = 12;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 12:\n            _context.next = 5;\n            break;\n\n          case 14:\n            _context.prev = 14;\n            reader.releaseLock();\n            return _context.finish(14);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[4,, 14, 17]]);\n  })));\n};","map":{"version":3,"names":["require","PQueue","default","HTTP","debug","log","Object","assign","error","httpQueue","concurrency","module","exports","preload","url","options","add","post","signal","res","reader","body","getReader","read","done","releaseLock"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/runtime/preload-browser.js"],"sourcesContent":["/* eslint-env browser */\n'use strict'\n\nconst { default: PQueue } = require('p-queue')\nconst HTTP = require('ipfs-utils/src/http')\nconst debug = require('debug')\n\nconst log = Object.assign(debug('ipfs:preload'), {\n  error: debug('ipfs:preload:error')\n})\n\n// browsers limit concurrent connections per host,\n// we don't want preload calls to exhaust the limit (~6)\nconst httpQueue = new PQueue({ concurrency: 4 })\n\n/**\n * @param {string} url\n * @param {import('ipfs-core-types/src/utils').AbortOptions} options\n */\nmodule.exports = function preload (url, options = {}) {\n  log(url)\n\n  return httpQueue.add(async () => {\n    const res = await HTTP.post(url, { signal: options.signal })\n\n    // @ts-ignore\n    const reader = res.body.getReader()\n\n    try {\n      while (true) {\n        const { done } = await reader.read()\n        if (done) return\n        // Read to completion but do not cache\n      }\n    } finally {\n      reader.releaseLock()\n    }\n  })\n}\n"],"mappings":"AAAA;AACA;;;;;;AAEA,eAA4BA,OAAO,CAAC,SAAD,CAAnC;AAAA,IAAiBC,MAAjB,YAAQC,OAAR;;AACA,IAAMC,IAAI,GAAGH,OAAO,CAAC,qBAAD,CAApB;;AACA,IAAMI,KAAK,GAAGJ,OAAO,CAAC,OAAD,CAArB;;AAEA,IAAMK,GAAG,GAAGC,MAAM,CAACC,MAAP,CAAcH,KAAK,CAAC,cAAD,CAAnB,EAAqC;EAC/CI,KAAK,EAAEJ,KAAK,CAAC,oBAAD;AADmC,CAArC,CAAZ,C,CAIA;AACA;;AACA,IAAMK,SAAS,GAAG,IAAIR,MAAJ,CAAW;EAAES,WAAW,EAAE;AAAf,CAAX,CAAlB;AAEA;AACA;AACA;AACA;;AACAC,MAAM,CAACC,OAAP,GAAiB,SAASC,OAAT,CAAkBC,GAAlB,EAAqC;EAAA,IAAdC,OAAc,uEAAJ,EAAI;EACpDV,GAAG,CAACS,GAAD,CAAH;EAEA,OAAOL,SAAS,CAACO,GAAV,0EAAc;IAAA;;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,OACDb,IAAI,CAACc,IAAL,CAAUH,GAAV,EAAe;cAAEI,MAAM,EAAEH,OAAO,CAACG;YAAlB,CAAf,CADC;;UAAA;YACbC,GADa;YAGnB;YACMC,MAJa,GAIJD,GAAG,CAACE,IAAJ,CAASC,SAAT,EAJI;YAAA;;UAAA;YAAA,KAOV,IAPU;cAAA;cAAA;YAAA;;YAAA;YAAA,OAQQF,MAAM,CAACG,IAAP,EARR;;UAAA;YAAA;YAQPC,IARO,sBAQPA,IARO;;YAAA,KASXA,IATW;cAAA;cAAA;YAAA;;YAAA;;UAAA;YAAA;YAAA;;UAAA;YAAA;YAajBJ,MAAM,CAACK,WAAP;YAbiB;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAd,GAAP;AAgBD,CAnBD"},"metadata":{},"sourceType":"script"}