{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _require = require('multiaddr'),\n    Multiaddr = _require.Multiaddr;\n\nvar PeerId = require('peer-id');\n\nvar arrayEquals = require('libp2p-utils/src/array-equals');\n\nvar _require2 = require('./peer-record'),\n    Protobuf = _require2.PeerRecord;\n\nvar _require3 = require('./consts'),\n    ENVELOPE_DOMAIN_PEER_RECORD = _require3.ENVELOPE_DOMAIN_PEER_RECORD,\n    ENVELOPE_PAYLOAD_TYPE_PEER_RECORD = _require3.ENVELOPE_PAYLOAD_TYPE_PEER_RECORD;\n/**\n * @typedef {import('../../peer-store/address-book.js').Address} Address\n * @typedef {import('libp2p-interfaces/src/record/types').Record} Record\n */\n\n/**\n * @implements {Record}\n */\n\n\nvar PeerRecord = /*#__PURE__*/function () {\n  /**\n   * The PeerRecord is used for distributing peer routing records across the network.\n   * It contains the peer's reachable listen addresses.\n   *\n   * @class\n   * @param {Object} params\n   * @param {PeerId} params.peerId\n   * @param {Multiaddr[]} params.multiaddrs - addresses of the associated peer.\n   * @param {number} [params.seqNumber] - monotonically-increasing sequence counter that's used to order PeerRecords in time.\n   */\n  function PeerRecord(_ref) {\n    var peerId = _ref.peerId,\n        _ref$multiaddrs = _ref.multiaddrs,\n        multiaddrs = _ref$multiaddrs === void 0 ? [] : _ref$multiaddrs,\n        _ref$seqNumber = _ref.seqNumber,\n        seqNumber = _ref$seqNumber === void 0 ? Date.now() : _ref$seqNumber;\n\n    _classCallCheck(this, PeerRecord);\n\n    this.domain = ENVELOPE_DOMAIN_PEER_RECORD;\n    this.codec = ENVELOPE_PAYLOAD_TYPE_PEER_RECORD;\n    this.peerId = peerId;\n    this.multiaddrs = multiaddrs;\n    this.seqNumber = seqNumber; // Cache\n\n    this._marshal = undefined;\n  }\n  /**\n   * Marshal a record to be used in an envelope.\n   *\n   * @returns {Uint8Array}\n   */\n\n\n  _createClass(PeerRecord, [{\n    key: \"marshal\",\n    value: function marshal() {\n      if (this._marshal) {\n        return this._marshal;\n      }\n\n      this._marshal = Protobuf.encode({\n        peerId: this.peerId.toBytes(),\n        seq: this.seqNumber,\n        addresses: this.multiaddrs.map(function (m) {\n          return {\n            multiaddr: m.bytes\n          };\n        })\n      }).finish();\n      return this._marshal;\n    }\n    /**\n     * Returns true if `this` record equals the `other`.\n     *\n     * @param {unknown} other\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      if (!(other instanceof PeerRecord)) {\n        return false;\n      } // Validate PeerId\n\n\n      if (!this.peerId.equals(other.peerId)) {\n        return false;\n      } // Validate seqNumber\n\n\n      if (this.seqNumber !== other.seqNumber) {\n        return false;\n      } // Validate multiaddrs\n\n\n      if (!arrayEquals(this.multiaddrs, other.multiaddrs)) {\n        return false;\n      }\n\n      return true;\n    }\n  }]);\n\n  return PeerRecord;\n}();\n/**\n * Unmarshal Peer Record Protobuf.\n *\n * @param {Uint8Array} buf - marshaled peer record.\n * @returns {PeerRecord}\n */\n\n\nPeerRecord.createFromProtobuf = function (buf) {\n  var peerRecord = Protobuf.decode(buf);\n  var peerId = PeerId.createFromBytes(peerRecord.peerId);\n  var multiaddrs = (peerRecord.addresses || []).map(function (a) {\n    return new Multiaddr(a.multiaddr);\n  });\n  var seqNumber = Number(peerRecord.seq);\n  return new PeerRecord({\n    peerId: peerId,\n    multiaddrs: multiaddrs,\n    seqNumber: seqNumber\n  });\n};\n\nPeerRecord.DOMAIN = ENVELOPE_DOMAIN_PEER_RECORD;\nmodule.exports = PeerRecord;","map":{"version":3,"names":["require","Multiaddr","PeerId","arrayEquals","Protobuf","PeerRecord","ENVELOPE_DOMAIN_PEER_RECORD","ENVELOPE_PAYLOAD_TYPE_PEER_RECORD","peerId","multiaddrs","seqNumber","Date","now","domain","codec","_marshal","undefined","encode","toBytes","seq","addresses","map","m","multiaddr","bytes","finish","other","equals","createFromProtobuf","buf","peerRecord","decode","createFromBytes","a","Number","DOMAIN","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p/src/record/peer-record/index.js"],"sourcesContent":["'use strict'\n\nconst { Multiaddr } = require('multiaddr')\nconst PeerId = require('peer-id')\nconst arrayEquals = require('libp2p-utils/src/array-equals')\n\nconst { PeerRecord: Protobuf } = require('./peer-record')\nconst {\n  ENVELOPE_DOMAIN_PEER_RECORD,\n  ENVELOPE_PAYLOAD_TYPE_PEER_RECORD\n} = require('./consts')\n\n/**\n * @typedef {import('../../peer-store/address-book.js').Address} Address\n * @typedef {import('libp2p-interfaces/src/record/types').Record} Record\n */\n\n/**\n * @implements {Record}\n */\nclass PeerRecord {\n  /**\n   * The PeerRecord is used for distributing peer routing records across the network.\n   * It contains the peer's reachable listen addresses.\n   *\n   * @class\n   * @param {Object} params\n   * @param {PeerId} params.peerId\n   * @param {Multiaddr[]} params.multiaddrs - addresses of the associated peer.\n   * @param {number} [params.seqNumber] - monotonically-increasing sequence counter that's used to order PeerRecords in time.\n   */\n  constructor ({ peerId, multiaddrs = [], seqNumber = Date.now() }) {\n    this.domain = ENVELOPE_DOMAIN_PEER_RECORD\n    this.codec = ENVELOPE_PAYLOAD_TYPE_PEER_RECORD\n\n    this.peerId = peerId\n    this.multiaddrs = multiaddrs\n    this.seqNumber = seqNumber\n\n    // Cache\n    this._marshal = undefined\n  }\n\n  /**\n   * Marshal a record to be used in an envelope.\n   *\n   * @returns {Uint8Array}\n   */\n  marshal () {\n    if (this._marshal) {\n      return this._marshal\n    }\n\n    this._marshal = Protobuf.encode({\n      peerId: this.peerId.toBytes(),\n      seq: this.seqNumber,\n      addresses: this.multiaddrs.map((m) => ({\n        multiaddr: m.bytes\n      }))\n    }).finish()\n\n    return this._marshal\n  }\n\n  /**\n   * Returns true if `this` record equals the `other`.\n   *\n   * @param {unknown} other\n   * @returns {boolean}\n   */\n  equals (other) {\n    if (!(other instanceof PeerRecord)) {\n      return false\n    }\n\n    // Validate PeerId\n    if (!this.peerId.equals(other.peerId)) {\n      return false\n    }\n\n    // Validate seqNumber\n    if (this.seqNumber !== other.seqNumber) {\n      return false\n    }\n\n    // Validate multiaddrs\n    if (!arrayEquals(this.multiaddrs, other.multiaddrs)) {\n      return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Unmarshal Peer Record Protobuf.\n *\n * @param {Uint8Array} buf - marshaled peer record.\n * @returns {PeerRecord}\n */\nPeerRecord.createFromProtobuf = (buf) => {\n  const peerRecord = Protobuf.decode(buf)\n\n  const peerId = PeerId.createFromBytes(peerRecord.peerId)\n  const multiaddrs = (peerRecord.addresses || []).map((a) => new Multiaddr(a.multiaddr))\n  const seqNumber = Number(peerRecord.seq)\n\n  return new PeerRecord({ peerId, multiaddrs, seqNumber })\n}\n\nPeerRecord.DOMAIN = ENVELOPE_DOMAIN_PEER_RECORD\n\nmodule.exports = PeerRecord\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}