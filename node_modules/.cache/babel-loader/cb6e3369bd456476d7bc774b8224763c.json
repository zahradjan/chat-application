{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MessageCache = void 0;\n\nvar utils_1 = require(\"./utils\");\n\nvar MessageCache = /*#__PURE__*/function () {\n  /**\n   * @param {Number} gossip\n   * @param {Number} history\n   * @param {msgIdFn} msgIdFn a function that returns message id from a message\n   *\n   * @constructor\n   */\n  function MessageCache(gossip, history, msgIdFn) {\n    _classCallCheck(this, MessageCache);\n\n    /**\n     * @type {Map<string, RPC.Message>}\n     */\n    this.msgs = new Map();\n    this.peertx = new Map();\n    /**\n     * @type {Array<Array<CacheEntry>>}\n     */\n\n    this.history = [];\n\n    for (var i = 0; i < history; i++) {\n      this.history[i] = [];\n    }\n    /**\n     * @type {Number}\n     */\n\n\n    this.gossip = gossip;\n    /**\n     * @type {Function}\n     */\n\n    this.msgIdFn = msgIdFn;\n  }\n  /**\n   * Adds a message to the current window and the cache\n   *\n   * @param {RPC.Message} msg\n   * @returns {Promise<void>}\n   */\n\n\n  _createClass(MessageCache, [{\n    key: \"put\",\n    value: function put(msg) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var msgID, msgIdStr;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.getMsgId(msg);\n\n              case 2:\n                msgID = _context.sent;\n                msgIdStr = utils_1.messageIdToString(msgID);\n                this.msgs.set(msgIdStr, msg);\n                this.history[0].push({\n                  msgID: msgID,\n                  topics: msg.topicIDs\n                });\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\n     * Get message id of message.\n     * @param {RPC.Message} msg\n     * @returns {Promise<Uint8Array> | Uint8Array}\n     */\n\n  }, {\n    key: \"getMsgId\",\n    value: function getMsgId(msg) {\n      return this.msgIdFn(msg);\n    }\n    /**\n     * Retrieves a message from the cache by its ID, if it is still present\n     *\n     * @param {Uint8Array} msgID\n     * @returns {Message}\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(msgID) {\n      return this.msgs.get(utils_1.messageIdToString(msgID));\n    }\n    /**\n     * Retrieves a message from the cache by its ID, if it is present\n     * for a specific peer.\n     * Returns the message and the number of times the peer has requested the message\n     *\n     * @param {string} msgID\n     * @param {string} p\n     * @returns {[InMessage | undefined, number]}\n     */\n\n  }, {\n    key: \"getForPeer\",\n    value: function getForPeer(msgID, p) {\n      var msgIdStr = utils_1.messageIdToString(msgID);\n      var msg = this.msgs.get(msgIdStr);\n\n      if (!msg) {\n        return [undefined, 0];\n      }\n\n      var peertx = this.peertx.get(msgIdStr);\n\n      if (!peertx) {\n        peertx = new Map();\n        this.peertx.set(msgIdStr, peertx);\n      }\n\n      var count = (peertx.get(p) || 0) + 1;\n      peertx.set(p, count);\n      return [msg, count];\n    }\n    /**\n     * Retrieves a list of message IDs for a given topic\n     *\n     * @param {String} topic\n     *\n     * @returns {Array<Uint8Array>}\n     */\n\n  }, {\n    key: \"getGossipIDs\",\n    value: function getGossipIDs(topic) {\n      var msgIDs = [];\n\n      for (var i = 0; i < this.gossip; i++) {\n        this.history[i].forEach(function (entry) {\n          var _iterator = _createForOfIteratorHelper(entry.topics),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var t = _step.value;\n\n              if (t === topic) {\n                msgIDs.push(entry.msgID);\n                break;\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        });\n      }\n\n      return msgIDs;\n    }\n    /**\n     * Shifts the current window, discarding messages older than this.history.length of the cache\n     *\n     * @returns {void}\n     */\n\n  }, {\n    key: \"shift\",\n    value: function shift() {\n      var _this = this;\n\n      var last = this.history[this.history.length - 1];\n      last.forEach(function (entry) {\n        var msgIdStr = utils_1.messageIdToString(entry.msgID);\n\n        _this.msgs.delete(msgIdStr);\n\n        _this.peertx.delete(msgIdStr);\n      });\n      this.history.pop();\n      this.history.unshift([]);\n    }\n  }]);\n\n  return MessageCache;\n}();\n\nexports.MessageCache = MessageCache;","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","MessageCache","utils_1","require","gossip","history","msgIdFn","msgs","Map","peertx","i","msg","getMsgId","msgID","msgIdStr","messageIdToString","set","push","topics","topicIDs","get","p","undefined","count","topic","msgIDs","forEach","entry","t","last","length","delete","pop","unshift"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-gossipsub/src/message-cache.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MessageCache = void 0;\nconst utils_1 = require(\"./utils\");\nclass MessageCache {\n    /**\n     * @param {Number} gossip\n     * @param {Number} history\n     * @param {msgIdFn} msgIdFn a function that returns message id from a message\n     *\n     * @constructor\n     */\n    constructor(gossip, history, msgIdFn) {\n        /**\n         * @type {Map<string, RPC.Message>}\n         */\n        this.msgs = new Map();\n        this.peertx = new Map();\n        /**\n         * @type {Array<Array<CacheEntry>>}\n         */\n        this.history = [];\n        for (let i = 0; i < history; i++) {\n            this.history[i] = [];\n        }\n        /**\n         * @type {Number}\n         */\n        this.gossip = gossip;\n        /**\n         * @type {Function}\n         */\n        this.msgIdFn = msgIdFn;\n    }\n    /**\n     * Adds a message to the current window and the cache\n     *\n     * @param {RPC.Message} msg\n     * @returns {Promise<void>}\n     */\n    put(msg) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const msgID = yield this.getMsgId(msg);\n            const msgIdStr = utils_1.messageIdToString(msgID);\n            this.msgs.set(msgIdStr, msg);\n            this.history[0].push({ msgID, topics: msg.topicIDs });\n        });\n    }\n    /**\n     * Get message id of message.\n     * @param {RPC.Message} msg\n     * @returns {Promise<Uint8Array> | Uint8Array}\n     */\n    getMsgId(msg) {\n        return this.msgIdFn(msg);\n    }\n    /**\n     * Retrieves a message from the cache by its ID, if it is still present\n     *\n     * @param {Uint8Array} msgID\n     * @returns {Message}\n     */\n    get(msgID) {\n        return this.msgs.get(utils_1.messageIdToString(msgID));\n    }\n    /**\n     * Retrieves a message from the cache by its ID, if it is present\n     * for a specific peer.\n     * Returns the message and the number of times the peer has requested the message\n     *\n     * @param {string} msgID\n     * @param {string} p\n     * @returns {[InMessage | undefined, number]}\n     */\n    getForPeer(msgID, p) {\n        const msgIdStr = utils_1.messageIdToString(msgID);\n        const msg = this.msgs.get(msgIdStr);\n        if (!msg) {\n            return [undefined, 0];\n        }\n        let peertx = this.peertx.get(msgIdStr);\n        if (!peertx) {\n            peertx = new Map();\n            this.peertx.set(msgIdStr, peertx);\n        }\n        const count = (peertx.get(p) || 0) + 1;\n        peertx.set(p, count);\n        return [msg, count];\n    }\n    /**\n     * Retrieves a list of message IDs for a given topic\n     *\n     * @param {String} topic\n     *\n     * @returns {Array<Uint8Array>}\n     */\n    getGossipIDs(topic) {\n        const msgIDs = [];\n        for (let i = 0; i < this.gossip; i++) {\n            this.history[i].forEach((entry) => {\n                for (const t of entry.topics) {\n                    if (t === topic) {\n                        msgIDs.push(entry.msgID);\n                        break;\n                    }\n                }\n            });\n        }\n        return msgIDs;\n    }\n    /**\n     * Shifts the current window, discarding messages older than this.history.length of the cache\n     *\n     * @returns {void}\n     */\n    shift() {\n        const last = this.history[this.history.length - 1];\n        last.forEach((entry) => {\n            const msgIdStr = utils_1.messageIdToString(entry.msgID);\n            this.msgs.delete(msgIdStr);\n            this.peertx.delete(msgIdStr);\n        });\n        this.history.pop();\n        this.history.unshift([]);\n    }\n}\nexports.MessageCache = MessageCache;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}