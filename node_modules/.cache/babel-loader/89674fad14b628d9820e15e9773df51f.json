{"ast":null,"code":"'use strict';\n\nvar _require = require('datastore-core'),\n    TieredDatastore = _require.TieredDatastore;\n\nvar get = require('dlv');\n\nvar PubsubDatastore = require('./pubsub-datastore');\n\nvar OfflineDatastore = require('./offline-datastore');\n/**\n * @param {object} arg\n * @param {import('libp2p')} arg.libp2p\n * @param {import('ipfs-repo').IPFSRepo} arg.repo\n * @param {import('peer-id')} arg.peerId\n * @param {object} arg.options\n */\n\n\nmodule.exports = function (_ref) {\n  var libp2p = _ref.libp2p,\n      repo = _ref.repo,\n      peerId = _ref.peerId,\n      options = _ref.options;\n  // Setup online routing for IPNS with a tiered routing composed by a DHT and a Pubsub router (if properly enabled)\n  var ipnsStores = []; // Add IPNS pubsub if enabled\n\n  var pubsubDs;\n\n  if (get(options, 'EXPERIMENTAL.ipnsPubsub', false)) {\n    var pubsub = libp2p.pubsub;\n    var localDatastore = repo.datastore;\n    pubsubDs = new PubsubDatastore(pubsub, localDatastore, peerId);\n    ipnsStores.push(pubsubDs);\n  } // DHT should not be added as routing if we are offline or it is disabled\n\n\n  if (get(options, 'offline') || !get(options, 'libp2p.config.dht.enabled', false)) {\n    var offlineDatastore = new OfflineDatastore(repo);\n    ipnsStores.push(offlineDatastore);\n  } else {\n    ipnsStores.push(libp2p._dht);\n  } // Create ipns routing with a set of datastores\n\n\n  return new TieredDatastore(ipnsStores);\n};","map":{"version":3,"names":["require","TieredDatastore","get","PubsubDatastore","OfflineDatastore","module","exports","libp2p","repo","peerId","options","ipnsStores","pubsubDs","pubsub","localDatastore","datastore","push","offlineDatastore","_dht"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/ipns/routing/config.js"],"sourcesContent":["'use strict'\n\nconst { TieredDatastore } = require('datastore-core')\nconst get = require('dlv')\n\nconst PubsubDatastore = require('./pubsub-datastore')\nconst OfflineDatastore = require('./offline-datastore')\n\n/**\n * @param {object} arg\n * @param {import('libp2p')} arg.libp2p\n * @param {import('ipfs-repo').IPFSRepo} arg.repo\n * @param {import('peer-id')} arg.peerId\n * @param {object} arg.options\n */\nmodule.exports = ({ libp2p, repo, peerId, options }) => {\n  // Setup online routing for IPNS with a tiered routing composed by a DHT and a Pubsub router (if properly enabled)\n  const ipnsStores = []\n\n  // Add IPNS pubsub if enabled\n  let pubsubDs\n  if (get(options, 'EXPERIMENTAL.ipnsPubsub', false)) {\n    const pubsub = libp2p.pubsub\n    const localDatastore = repo.datastore\n\n    pubsubDs = new PubsubDatastore(pubsub, localDatastore, peerId)\n    ipnsStores.push(pubsubDs)\n  }\n\n  // DHT should not be added as routing if we are offline or it is disabled\n  if (get(options, 'offline') || !get(options, 'libp2p.config.dht.enabled', false)) {\n    const offlineDatastore = new OfflineDatastore(repo)\n    ipnsStores.push(offlineDatastore)\n  } else {\n    ipnsStores.push(libp2p._dht)\n  }\n\n  // Create ipns routing with a set of datastores\n  return new TieredDatastore(ipnsStores)\n}\n"],"mappings":"AAAA;;AAEA,eAA4BA,OAAO,CAAC,gBAAD,CAAnC;AAAA,IAAQC,eAAR,YAAQA,eAAR;;AACA,IAAMC,GAAG,GAAGF,OAAO,CAAC,KAAD,CAAnB;;AAEA,IAAMG,eAAe,GAAGH,OAAO,CAAC,oBAAD,CAA/B;;AACA,IAAMI,gBAAgB,GAAGJ,OAAO,CAAC,qBAAD,CAAhC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAK,MAAM,CAACC,OAAP,GAAiB,gBAAuC;EAAA,IAApCC,MAAoC,QAApCA,MAAoC;EAAA,IAA5BC,IAA4B,QAA5BA,IAA4B;EAAA,IAAtBC,MAAsB,QAAtBA,MAAsB;EAAA,IAAdC,OAAc,QAAdA,OAAc;EACtD;EACA,IAAMC,UAAU,GAAG,EAAnB,CAFsD,CAItD;;EACA,IAAIC,QAAJ;;EACA,IAAIV,GAAG,CAACQ,OAAD,EAAU,yBAAV,EAAqC,KAArC,CAAP,EAAoD;IAClD,IAAMG,MAAM,GAAGN,MAAM,CAACM,MAAtB;IACA,IAAMC,cAAc,GAAGN,IAAI,CAACO,SAA5B;IAEAH,QAAQ,GAAG,IAAIT,eAAJ,CAAoBU,MAApB,EAA4BC,cAA5B,EAA4CL,MAA5C,CAAX;IACAE,UAAU,CAACK,IAAX,CAAgBJ,QAAhB;EACD,CAZqD,CActD;;;EACA,IAAIV,GAAG,CAACQ,OAAD,EAAU,SAAV,CAAH,IAA2B,CAACR,GAAG,CAACQ,OAAD,EAAU,2BAAV,EAAuC,KAAvC,CAAnC,EAAkF;IAChF,IAAMO,gBAAgB,GAAG,IAAIb,gBAAJ,CAAqBI,IAArB,CAAzB;IACAG,UAAU,CAACK,IAAX,CAAgBC,gBAAhB;EACD,CAHD,MAGO;IACLN,UAAU,CAACK,IAAX,CAAgBT,MAAM,CAACW,IAAvB;EACD,CApBqD,CAsBtD;;;EACA,OAAO,IAAIjB,eAAJ,CAAoBU,UAApB,CAAP;AACD,CAxBD"},"metadata":{},"sourceType":"script"}