{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _objectSpread = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _wrapAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nvar _awaitAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _asyncIterator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar _asyncGeneratorDelegate = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate.js\").default;\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar toCamel = require('../lib/object-to-camel');\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/refs').API<HTTPClientExtraOptions>} RefsAPI\n */\n\n\nmodule.exports = configure(function (api, opts) {\n  /**\n   * @type {RefsAPI[\"refs\"]}\n   */\n  var refs = /*#__PURE__*/function () {\n    var _ref = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(args) {\n      var options,\n          argsArr,\n          res,\n          _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n\n              /** @type {import('ipfs-core-types/src/utils').IPFSPath[]} */\n              argsArr = Array.isArray(args) ? args : [args];\n              _context.next = 4;\n              return _awaitAsyncGenerator(api.post('refs', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: argsArr.map(function (arg) {\n                    return \"\".concat(arg instanceof Uint8Array ? CID.decode(arg) : arg);\n                  })\n                }, options)),\n                headers: options.headers,\n                transform: toCamel\n              }));\n\n            case 4:\n              res = _context.sent;\n              return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(res.ndjson()), _awaitAsyncGenerator), \"t0\", 6);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function refs(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return Object.assign(refs, {\n    local: require('./local')(opts)\n  });\n});","map":{"version":3,"names":["require","CID","toCamel","configure","toUrlSearchParams","module","exports","api","opts","refs","args","options","argsArr","Array","isArray","post","signal","searchParams","arg","map","Uint8Array","decode","headers","transform","res","ndjson","Object","assign","local"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-http-client/src/refs/index.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/refs').API<HTTPClientExtraOptions>} RefsAPI\n */\n\nmodule.exports = configure((api, opts) => {\n  /**\n   * @type {RefsAPI[\"refs\"]}\n   */\n  const refs = async function * (args, options = {}) {\n    /** @type {import('ipfs-core-types/src/utils').IPFSPath[]} */\n    const argsArr = Array.isArray(args) ? args : [args]\n\n    const res = await api.post('refs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: argsArr.map(arg => `${arg instanceof Uint8Array ? CID.decode(arg) : arg}`),\n        ...options\n      }),\n      headers: options.headers,\n      transform: toCamel\n    })\n\n    yield * res.ndjson()\n  }\n\n  return Object.assign(refs, {\n    local: require('./local')(opts)\n  })\n})\n"],"mappings":"AAAA;;;;;;;;;;;;;;AAEA,eAAgBA,OAAO,CAAC,kBAAD,CAAvB;AAAA,IAAQC,GAAR,YAAQA,GAAR;;AACA,IAAMC,OAAO,GAAGF,OAAO,CAAC,wBAAD,CAAvB;;AACA,IAAMG,SAAS,GAAGH,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMI,iBAAiB,GAAGJ,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAK,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAAC,UAACI,GAAD,EAAMC,IAAN,EAAe;EACxC;AACF;AACA;EACE,IAAMC,IAAI;IAAA,wEAAG,iBAAkBC,IAAlB;MAAA;MAAA;MAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAwBC,OAAxB,2DAAkC,EAAlC;;cACX;cACMC,OAFK,GAEKC,KAAK,CAACC,OAAN,CAAcJ,IAAd,IAAsBA,IAAtB,GAA6B,CAACA,IAAD,CAFlC;cAAA;cAAA,4BAIOH,GAAG,CAACQ,IAAJ,CAAS,MAAT,EAAiB;gBACjCC,MAAM,EAAEL,OAAO,CAACK,MADiB;gBAEjCC,YAAY,EAAEb,iBAAiB;kBAC7Bc,GAAG,EAAEN,OAAO,CAACO,GAAR,CAAY,UAAAD,GAAG;oBAAA,iBAAOA,GAAG,YAAYE,UAAf,GAA4BnB,GAAG,CAACoB,MAAJ,CAAWH,GAAX,CAA5B,GAA8CA,GAArD;kBAAA,CAAf;gBADwB,GAE1BP,OAF0B,EAFE;gBAMjCW,OAAO,EAAEX,OAAO,CAACW,OANgB;gBAOjCC,SAAS,EAAErB;cAPsB,CAAjB,CAJP;;YAAA;cAILsB,GAJK;cAcX,qEAAQA,GAAG,CAACC,MAAJ,EAAR;;YAdW;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAH;;IAAA,gBAAJhB,IAAI;MAAA;IAAA;EAAA,GAAV;;EAiBA,OAAOiB,MAAM,CAACC,MAAP,CAAclB,IAAd,EAAoB;IACzBmB,KAAK,EAAE5B,OAAO,CAAC,SAAD,CAAP,CAAmBQ,IAAnB;EADkB,CAApB,CAAP;AAGD,CAxByB,CAA1B"},"metadata":{},"sourceType":"script"}