{"ast":null,"code":"'use strict';\n\nconst {\n  source: abortable\n} = require('abortable-iterator');\n\nconst debug = require('debug');\n\nconst log = debug('libp2p:stream:converter');\n/**\n * @typedef {import('multiaddr').Multiaddr} Multiaddr\n * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream\n *\n * @typedef {Object} Timeline\n * @property {number} open - connection opening timestamp.\n * @property {number} [upgraded] - connection upgraded timestamp.\n * @property {number} [close]\n */\n\n/**\n * Convert a duplex iterable into a MultiaddrConnection.\n * https://github.com/libp2p/interface-transport#multiaddrconnection\n *\n * @param {object} streamProperties\n * @param {MuxedStream} streamProperties.stream\n * @param {Multiaddr} streamProperties.remoteAddr\n * @param {Multiaddr} streamProperties.localAddr\n * @param {object} [options]\n * @param {AbortSignal} [options.signal]\n * @returns {import('libp2p-interfaces/src/transport/types').MultiaddrConnection}\n */\n\nfunction streamToMaConnection(_ref) {\n  let {\n    stream,\n    remoteAddr,\n    localAddr\n  } = _ref;\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    sink,\n    source\n  } = stream;\n  const maConn = {\n    /**\n     * @param {Uint8Array} source\n     */\n    async sink(source) {\n      if (options.signal) {\n        // @ts-ignore ts infers source template will be a number\n        source = abortable(source, options.signal);\n      }\n\n      try {\n        await sink(source);\n      } catch (err) {\n        // If aborted we can safely ignore\n        if (err.type !== 'aborted') {\n          // If the source errored the socket will already have been destroyed by\n          // toIterable.duplex(). If the socket errored it will already be\n          // destroyed. There's nothing to do here except log the error & return.\n          log(err);\n        }\n      }\n\n      close();\n    },\n\n    source: options.signal ? abortable(source, options.signal) : source,\n    conn: stream,\n    localAddr,\n    remoteAddr,\n\n    /** @type {Timeline} */\n    timeline: {\n      open: Date.now(),\n      close: undefined\n    },\n\n    close() {\n      sink(new Uint8Array(0));\n      return close();\n    }\n\n  };\n\n  function close() {\n    if (!maConn.timeline.close) {\n      maConn.timeline.close = Date.now();\n    }\n\n    return Promise.resolve();\n  }\n\n  return maConn;\n}\n\nmodule.exports = streamToMaConnection;","map":{"version":3,"names":["source","abortable","require","debug","log","streamToMaConnection","stream","remoteAddr","localAddr","options","sink","maConn","signal","err","type","close","conn","timeline","open","Date","now","undefined","Uint8Array","Promise","resolve","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-utils/src/stream-to-ma-conn.js"],"sourcesContent":["'use strict'\n\nconst { source: abortable } = require('abortable-iterator')\nconst debug = require('debug')\nconst log = debug('libp2p:stream:converter')\n\n/**\n * @typedef {import('multiaddr').Multiaddr} Multiaddr\n * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream\n *\n * @typedef {Object} Timeline\n * @property {number} open - connection opening timestamp.\n * @property {number} [upgraded] - connection upgraded timestamp.\n * @property {number} [close]\n */\n\n/**\n * Convert a duplex iterable into a MultiaddrConnection.\n * https://github.com/libp2p/interface-transport#multiaddrconnection\n *\n * @param {object} streamProperties\n * @param {MuxedStream} streamProperties.stream\n * @param {Multiaddr} streamProperties.remoteAddr\n * @param {Multiaddr} streamProperties.localAddr\n * @param {object} [options]\n * @param {AbortSignal} [options.signal]\n * @returns {import('libp2p-interfaces/src/transport/types').MultiaddrConnection}\n */\nfunction streamToMaConnection ({ stream, remoteAddr, localAddr }, options = {}) {\n  const { sink, source } = stream\n  const maConn = {\n    /**\n     * @param {Uint8Array} source\n     */\n    async sink (source) {\n      if (options.signal) {\n        // @ts-ignore ts infers source template will be a number\n        source = abortable(source, options.signal)\n      }\n\n      try {\n        await sink(source)\n      } catch (err) {\n        // If aborted we can safely ignore\n        if (err.type !== 'aborted') {\n          // If the source errored the socket will already have been destroyed by\n          // toIterable.duplex(). If the socket errored it will already be\n          // destroyed. There's nothing to do here except log the error & return.\n          log(err)\n        }\n      }\n      close()\n    },\n    source: options.signal ? abortable(source, options.signal) : source,\n    conn: stream,\n    localAddr,\n    remoteAddr,\n    /** @type {Timeline} */\n    timeline: { open: Date.now(), close: undefined },\n    close () {\n      sink(new Uint8Array(0))\n      return close()\n    }\n  }\n\n  function close () {\n    if (!maConn.timeline.close) {\n      maConn.timeline.close = Date.now()\n    }\n    return Promise.resolve()\n  }\n\n  return maConn\n}\n\nmodule.exports = streamToMaConnection\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA,MAAM,EAAEC;AAAV,IAAwBC,OAAO,CAAC,oBAAD,CAArC;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,MAAME,GAAG,GAAGD,KAAK,CAAC,yBAAD,CAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASE,oBAAT,OAAgF;EAAA,IAAjD;IAAEC,MAAF;IAAUC,UAAV;IAAsBC;EAAtB,CAAiD;EAAA,IAAdC,OAAc,uEAAJ,EAAI;EAC9E,MAAM;IAAEC,IAAF;IAAQV;EAAR,IAAmBM,MAAzB;EACA,MAAMK,MAAM,GAAG;IACb;AACJ;AACA;IACI,MAAMD,IAAN,CAAYV,MAAZ,EAAoB;MAClB,IAAIS,OAAO,CAACG,MAAZ,EAAoB;QAClB;QACAZ,MAAM,GAAGC,SAAS,CAACD,MAAD,EAASS,OAAO,CAACG,MAAjB,CAAlB;MACD;;MAED,IAAI;QACF,MAAMF,IAAI,CAACV,MAAD,CAAV;MACD,CAFD,CAEE,OAAOa,GAAP,EAAY;QACZ;QACA,IAAIA,GAAG,CAACC,IAAJ,KAAa,SAAjB,EAA4B;UAC1B;UACA;UACA;UACAV,GAAG,CAACS,GAAD,CAAH;QACD;MACF;;MACDE,KAAK;IACN,CAtBY;;IAuBbf,MAAM,EAAES,OAAO,CAACG,MAAR,GAAiBX,SAAS,CAACD,MAAD,EAASS,OAAO,CAACG,MAAjB,CAA1B,GAAqDZ,MAvBhD;IAwBbgB,IAAI,EAAEV,MAxBO;IAyBbE,SAzBa;IA0BbD,UA1Ba;;IA2Bb;IACAU,QAAQ,EAAE;MAAEC,IAAI,EAAEC,IAAI,CAACC,GAAL,EAAR;MAAoBL,KAAK,EAAEM;IAA3B,CA5BG;;IA6BbN,KAAK,GAAI;MACPL,IAAI,CAAC,IAAIY,UAAJ,CAAe,CAAf,CAAD,CAAJ;MACA,OAAOP,KAAK,EAAZ;IACD;;EAhCY,CAAf;;EAmCA,SAASA,KAAT,GAAkB;IAChB,IAAI,CAACJ,MAAM,CAACM,QAAP,CAAgBF,KAArB,EAA4B;MAC1BJ,MAAM,CAACM,QAAP,CAAgBF,KAAhB,GAAwBI,IAAI,CAACC,GAAL,EAAxB;IACD;;IACD,OAAOG,OAAO,CAACC,OAAR,EAAP;EACD;;EAED,OAAOb,MAAP;AACD;;AAEDc,MAAM,CAACC,OAAP,GAAiBrB,oBAAjB"},"metadata":{},"sourceType":"script"}