{"ast":null,"code":"/*eslint-disable*/\n(function (global, factory) {\n  /* global define, require, module */\n\n  /* AMD */\n  if (typeof define === 'function' && define.amd) define([\"protobufjs/minimal\"], factory);\n  /* CommonJS */\n  else if (typeof require === 'function' && typeof module === 'object' && module && module.exports) module.exports = factory(require(\"protobufjs/minimal\"));\n})(this, function ($protobuf) {\n  \"use strict\"; // Common aliases\n\n  var $Reader = $protobuf.Reader,\n      $Writer = $protobuf.Writer,\n      $util = $protobuf.util; // Exported root namespace\n\n  var $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n  $root.RPC = function () {\n    /**\n     * Properties of a RPC.\n     * @exports IRPC\n     * @interface IRPC\n     * @property {Array.<RPC.ISubOpts>|null} [subscriptions] RPC subscriptions\n     * @property {Array.<RPC.IMessage>|null} [msgs] RPC msgs\n     * @property {RPC.IControlMessage|null} [control] RPC control\n     */\n\n    /**\n     * Constructs a new RPC.\n     * @exports RPC\n     * @classdesc Represents a RPC.\n     * @implements IRPC\n     * @constructor\n     * @param {IRPC=} [p] Properties to set\n     */\n    function RPC(p) {\n      this.subscriptions = [];\n      this.msgs = [];\n      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n    }\n    /**\n     * RPC subscriptions.\n     * @member {Array.<RPC.ISubOpts>} subscriptions\n     * @memberof RPC\n     * @instance\n     */\n\n\n    RPC.prototype.subscriptions = $util.emptyArray;\n    /**\n     * RPC msgs.\n     * @member {Array.<RPC.IMessage>} msgs\n     * @memberof RPC\n     * @instance\n     */\n\n    RPC.prototype.msgs = $util.emptyArray;\n    /**\n     * RPC control.\n     * @member {RPC.IControlMessage|null|undefined} control\n     * @memberof RPC\n     * @instance\n     */\n\n    RPC.prototype.control = null; // OneOf field names bound to virtual getters and setters\n\n    var $oneOfFields;\n    /**\n     * RPC _control.\n     * @member {\"control\"|undefined} _control\n     * @memberof RPC\n     * @instance\n     */\n\n    Object.defineProperty(RPC.prototype, \"_control\", {\n      get: $util.oneOfGetter($oneOfFields = [\"control\"]),\n      set: $util.oneOfSetter($oneOfFields)\n    });\n    /**\n     * Encodes the specified RPC message. Does not implicitly {@link RPC.verify|verify} messages.\n     * @function encode\n     * @memberof RPC\n     * @static\n     * @param {IRPC} m RPC message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n    RPC.encode = function encode(m, w) {\n      if (!w) w = $Writer.create();\n\n      if (m.subscriptions != null && m.subscriptions.length) {\n        for (var i = 0; i < m.subscriptions.length; ++i) $root.RPC.SubOpts.encode(m.subscriptions[i], w.uint32(10).fork()).ldelim();\n      }\n\n      if (m.msgs != null && m.msgs.length) {\n        for (var i = 0; i < m.msgs.length; ++i) $root.RPC.Message.encode(m.msgs[i], w.uint32(18).fork()).ldelim();\n      }\n\n      if (m.control != null && Object.hasOwnProperty.call(m, \"control\")) $root.RPC.ControlMessage.encode(m.control, w.uint32(26).fork()).ldelim();\n      return w;\n    };\n    /**\n     * Decodes a RPC message from the specified reader or buffer.\n     * @function decode\n     * @memberof RPC\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {RPC} RPC\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    RPC.decode = function decode(r, l) {\n      if (!(r instanceof $Reader)) r = $Reader.create(r);\n      var c = l === undefined ? r.len : r.pos + l,\n          m = new $root.RPC();\n\n      while (r.pos < c) {\n        var t = r.uint32();\n\n        switch (t >>> 3) {\n          case 1:\n            if (!(m.subscriptions && m.subscriptions.length)) m.subscriptions = [];\n            m.subscriptions.push($root.RPC.SubOpts.decode(r, r.uint32()));\n            break;\n\n          case 2:\n            if (!(m.msgs && m.msgs.length)) m.msgs = [];\n            m.msgs.push($root.RPC.Message.decode(r, r.uint32()));\n            break;\n\n          case 3:\n            m.control = $root.RPC.ControlMessage.decode(r, r.uint32());\n            break;\n\n          default:\n            r.skipType(t & 7);\n            break;\n        }\n      }\n\n      return m;\n    };\n    /**\n     * Creates a RPC message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof RPC\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {RPC} RPC\n     */\n\n\n    RPC.fromObject = function fromObject(d) {\n      if (d instanceof $root.RPC) return d;\n      var m = new $root.RPC();\n\n      if (d.subscriptions) {\n        if (!Array.isArray(d.subscriptions)) throw TypeError(\".RPC.subscriptions: array expected\");\n        m.subscriptions = [];\n\n        for (var i = 0; i < d.subscriptions.length; ++i) {\n          if (typeof d.subscriptions[i] !== \"object\") throw TypeError(\".RPC.subscriptions: object expected\");\n          m.subscriptions[i] = $root.RPC.SubOpts.fromObject(d.subscriptions[i]);\n        }\n      }\n\n      if (d.msgs) {\n        if (!Array.isArray(d.msgs)) throw TypeError(\".RPC.msgs: array expected\");\n        m.msgs = [];\n\n        for (var i = 0; i < d.msgs.length; ++i) {\n          if (typeof d.msgs[i] !== \"object\") throw TypeError(\".RPC.msgs: object expected\");\n          m.msgs[i] = $root.RPC.Message.fromObject(d.msgs[i]);\n        }\n      }\n\n      if (d.control != null) {\n        if (typeof d.control !== \"object\") throw TypeError(\".RPC.control: object expected\");\n        m.control = $root.RPC.ControlMessage.fromObject(d.control);\n      }\n\n      return m;\n    };\n    /**\n     * Creates a plain object from a RPC message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof RPC\n     * @static\n     * @param {RPC} m RPC\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    RPC.toObject = function toObject(m, o) {\n      if (!o) o = {};\n      var d = {};\n\n      if (o.arrays || o.defaults) {\n        d.subscriptions = [];\n        d.msgs = [];\n      }\n\n      if (m.subscriptions && m.subscriptions.length) {\n        d.subscriptions = [];\n\n        for (var j = 0; j < m.subscriptions.length; ++j) {\n          d.subscriptions[j] = $root.RPC.SubOpts.toObject(m.subscriptions[j], o);\n        }\n      }\n\n      if (m.msgs && m.msgs.length) {\n        d.msgs = [];\n\n        for (var j = 0; j < m.msgs.length; ++j) {\n          d.msgs[j] = $root.RPC.Message.toObject(m.msgs[j], o);\n        }\n      }\n\n      if (m.control != null && m.hasOwnProperty(\"control\")) {\n        d.control = $root.RPC.ControlMessage.toObject(m.control, o);\n        if (o.oneofs) d._control = \"control\";\n      }\n\n      return d;\n    };\n    /**\n     * Converts this RPC to JSON.\n     * @function toJSON\n     * @memberof RPC\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    RPC.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    RPC.SubOpts = function () {\n      /**\n       * Properties of a SubOpts.\n       * @memberof RPC\n       * @interface ISubOpts\n       * @property {boolean|null} [subscribe] SubOpts subscribe\n       * @property {string|null} [topicID] SubOpts topicID\n       */\n\n      /**\n       * Constructs a new SubOpts.\n       * @memberof RPC\n       * @classdesc Represents a SubOpts.\n       * @implements ISubOpts\n       * @constructor\n       * @param {RPC.ISubOpts=} [p] Properties to set\n       */\n      function SubOpts(p) {\n        if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n      }\n      /**\n       * SubOpts subscribe.\n       * @member {boolean|null|undefined} subscribe\n       * @memberof RPC.SubOpts\n       * @instance\n       */\n\n\n      SubOpts.prototype.subscribe = null;\n      /**\n       * SubOpts topicID.\n       * @member {string|null|undefined} topicID\n       * @memberof RPC.SubOpts\n       * @instance\n       */\n\n      SubOpts.prototype.topicID = null; // OneOf field names bound to virtual getters and setters\n\n      var $oneOfFields;\n      /**\n       * SubOpts _subscribe.\n       * @member {\"subscribe\"|undefined} _subscribe\n       * @memberof RPC.SubOpts\n       * @instance\n       */\n\n      Object.defineProperty(SubOpts.prototype, \"_subscribe\", {\n        get: $util.oneOfGetter($oneOfFields = [\"subscribe\"]),\n        set: $util.oneOfSetter($oneOfFields)\n      });\n      /**\n       * SubOpts _topicID.\n       * @member {\"topicID\"|undefined} _topicID\n       * @memberof RPC.SubOpts\n       * @instance\n       */\n\n      Object.defineProperty(SubOpts.prototype, \"_topicID\", {\n        get: $util.oneOfGetter($oneOfFields = [\"topicID\"]),\n        set: $util.oneOfSetter($oneOfFields)\n      });\n      /**\n       * Encodes the specified SubOpts message. Does not implicitly {@link RPC.SubOpts.verify|verify} messages.\n       * @function encode\n       * @memberof RPC.SubOpts\n       * @static\n       * @param {RPC.ISubOpts} m SubOpts message or plain object to encode\n       * @param {$protobuf.Writer} [w] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n      SubOpts.encode = function encode(m, w) {\n        if (!w) w = $Writer.create();\n        if (m.subscribe != null && Object.hasOwnProperty.call(m, \"subscribe\")) w.uint32(8).bool(m.subscribe);\n        if (m.topicID != null && Object.hasOwnProperty.call(m, \"topicID\")) w.uint32(18).string(m.topicID);\n        return w;\n      };\n      /**\n       * Decodes a SubOpts message from the specified reader or buffer.\n       * @function decode\n       * @memberof RPC.SubOpts\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n       * @param {number} [l] Message length if known beforehand\n       * @returns {RPC.SubOpts} SubOpts\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      SubOpts.decode = function decode(r, l) {\n        if (!(r instanceof $Reader)) r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l,\n            m = new $root.RPC.SubOpts();\n\n        while (r.pos < c) {\n          var t = r.uint32();\n\n          switch (t >>> 3) {\n            case 1:\n              m.subscribe = r.bool();\n              break;\n\n            case 2:\n              m.topicID = r.string();\n              break;\n\n            default:\n              r.skipType(t & 7);\n              break;\n          }\n        }\n\n        return m;\n      };\n      /**\n       * Creates a SubOpts message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof RPC.SubOpts\n       * @static\n       * @param {Object.<string,*>} d Plain object\n       * @returns {RPC.SubOpts} SubOpts\n       */\n\n\n      SubOpts.fromObject = function fromObject(d) {\n        if (d instanceof $root.RPC.SubOpts) return d;\n        var m = new $root.RPC.SubOpts();\n\n        if (d.subscribe != null) {\n          m.subscribe = Boolean(d.subscribe);\n        }\n\n        if (d.topicID != null) {\n          m.topicID = String(d.topicID);\n        }\n\n        return m;\n      };\n      /**\n       * Creates a plain object from a SubOpts message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof RPC.SubOpts\n       * @static\n       * @param {RPC.SubOpts} m SubOpts\n       * @param {$protobuf.IConversionOptions} [o] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      SubOpts.toObject = function toObject(m, o) {\n        if (!o) o = {};\n        var d = {};\n\n        if (m.subscribe != null && m.hasOwnProperty(\"subscribe\")) {\n          d.subscribe = m.subscribe;\n          if (o.oneofs) d._subscribe = \"subscribe\";\n        }\n\n        if (m.topicID != null && m.hasOwnProperty(\"topicID\")) {\n          d.topicID = m.topicID;\n          if (o.oneofs) d._topicID = \"topicID\";\n        }\n\n        return d;\n      };\n      /**\n       * Converts this SubOpts to JSON.\n       * @function toJSON\n       * @memberof RPC.SubOpts\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      SubOpts.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return SubOpts;\n    }();\n\n    RPC.Message = function () {\n      /**\n       * Properties of a Message.\n       * @memberof RPC\n       * @interface IMessage\n       * @property {Uint8Array|null} [from] Message from\n       * @property {Uint8Array|null} [data] Message data\n       * @property {Uint8Array|null} [seqno] Message seqno\n       * @property {Array.<string>|null} [topicIDs] Message topicIDs\n       * @property {Uint8Array|null} [signature] Message signature\n       * @property {Uint8Array|null} [key] Message key\n       */\n\n      /**\n       * Constructs a new Message.\n       * @memberof RPC\n       * @classdesc Represents a Message.\n       * @implements IMessage\n       * @constructor\n       * @param {RPC.IMessage=} [p] Properties to set\n       */\n      function Message(p) {\n        this.topicIDs = [];\n        if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n      }\n      /**\n       * Message from.\n       * @member {Uint8Array|null|undefined} from\n       * @memberof RPC.Message\n       * @instance\n       */\n\n\n      Message.prototype.from = null;\n      /**\n       * Message data.\n       * @member {Uint8Array|null|undefined} data\n       * @memberof RPC.Message\n       * @instance\n       */\n\n      Message.prototype.data = null;\n      /**\n       * Message seqno.\n       * @member {Uint8Array|null|undefined} seqno\n       * @memberof RPC.Message\n       * @instance\n       */\n\n      Message.prototype.seqno = null;\n      /**\n       * Message topicIDs.\n       * @member {Array.<string>} topicIDs\n       * @memberof RPC.Message\n       * @instance\n       */\n\n      Message.prototype.topicIDs = $util.emptyArray;\n      /**\n       * Message signature.\n       * @member {Uint8Array|null|undefined} signature\n       * @memberof RPC.Message\n       * @instance\n       */\n\n      Message.prototype.signature = null;\n      /**\n       * Message key.\n       * @member {Uint8Array|null|undefined} key\n       * @memberof RPC.Message\n       * @instance\n       */\n\n      Message.prototype.key = null; // OneOf field names bound to virtual getters and setters\n\n      var $oneOfFields;\n      /**\n       * Message _from.\n       * @member {\"from\"|undefined} _from\n       * @memberof RPC.Message\n       * @instance\n       */\n\n      Object.defineProperty(Message.prototype, \"_from\", {\n        get: $util.oneOfGetter($oneOfFields = [\"from\"]),\n        set: $util.oneOfSetter($oneOfFields)\n      });\n      /**\n       * Message _data.\n       * @member {\"data\"|undefined} _data\n       * @memberof RPC.Message\n       * @instance\n       */\n\n      Object.defineProperty(Message.prototype, \"_data\", {\n        get: $util.oneOfGetter($oneOfFields = [\"data\"]),\n        set: $util.oneOfSetter($oneOfFields)\n      });\n      /**\n       * Message _seqno.\n       * @member {\"seqno\"|undefined} _seqno\n       * @memberof RPC.Message\n       * @instance\n       */\n\n      Object.defineProperty(Message.prototype, \"_seqno\", {\n        get: $util.oneOfGetter($oneOfFields = [\"seqno\"]),\n        set: $util.oneOfSetter($oneOfFields)\n      });\n      /**\n       * Message _signature.\n       * @member {\"signature\"|undefined} _signature\n       * @memberof RPC.Message\n       * @instance\n       */\n\n      Object.defineProperty(Message.prototype, \"_signature\", {\n        get: $util.oneOfGetter($oneOfFields = [\"signature\"]),\n        set: $util.oneOfSetter($oneOfFields)\n      });\n      /**\n       * Message _key.\n       * @member {\"key\"|undefined} _key\n       * @memberof RPC.Message\n       * @instance\n       */\n\n      Object.defineProperty(Message.prototype, \"_key\", {\n        get: $util.oneOfGetter($oneOfFields = [\"key\"]),\n        set: $util.oneOfSetter($oneOfFields)\n      });\n      /**\n       * Encodes the specified Message message. Does not implicitly {@link RPC.Message.verify|verify} messages.\n       * @function encode\n       * @memberof RPC.Message\n       * @static\n       * @param {RPC.IMessage} m Message message or plain object to encode\n       * @param {$protobuf.Writer} [w] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n      Message.encode = function encode(m, w) {\n        if (!w) w = $Writer.create();\n        if (m.from != null && Object.hasOwnProperty.call(m, \"from\")) w.uint32(10).bytes(m.from);\n        if (m.data != null && Object.hasOwnProperty.call(m, \"data\")) w.uint32(18).bytes(m.data);\n        if (m.seqno != null && Object.hasOwnProperty.call(m, \"seqno\")) w.uint32(26).bytes(m.seqno);\n\n        if (m.topicIDs != null && m.topicIDs.length) {\n          for (var i = 0; i < m.topicIDs.length; ++i) w.uint32(34).string(m.topicIDs[i]);\n        }\n\n        if (m.signature != null && Object.hasOwnProperty.call(m, \"signature\")) w.uint32(42).bytes(m.signature);\n        if (m.key != null && Object.hasOwnProperty.call(m, \"key\")) w.uint32(50).bytes(m.key);\n        return w;\n      };\n      /**\n       * Decodes a Message message from the specified reader or buffer.\n       * @function decode\n       * @memberof RPC.Message\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n       * @param {number} [l] Message length if known beforehand\n       * @returns {RPC.Message} Message\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      Message.decode = function decode(r, l) {\n        if (!(r instanceof $Reader)) r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l,\n            m = new $root.RPC.Message();\n\n        while (r.pos < c) {\n          var t = r.uint32();\n\n          switch (t >>> 3) {\n            case 1:\n              m.from = r.bytes();\n              break;\n\n            case 2:\n              m.data = r.bytes();\n              break;\n\n            case 3:\n              m.seqno = r.bytes();\n              break;\n\n            case 4:\n              if (!(m.topicIDs && m.topicIDs.length)) m.topicIDs = [];\n              m.topicIDs.push(r.string());\n              break;\n\n            case 5:\n              m.signature = r.bytes();\n              break;\n\n            case 6:\n              m.key = r.bytes();\n              break;\n\n            default:\n              r.skipType(t & 7);\n              break;\n          }\n        }\n\n        return m;\n      };\n      /**\n       * Creates a Message message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof RPC.Message\n       * @static\n       * @param {Object.<string,*>} d Plain object\n       * @returns {RPC.Message} Message\n       */\n\n\n      Message.fromObject = function fromObject(d) {\n        if (d instanceof $root.RPC.Message) return d;\n        var m = new $root.RPC.Message();\n\n        if (d.from != null) {\n          if (typeof d.from === \"string\") $util.base64.decode(d.from, m.from = $util.newBuffer($util.base64.length(d.from)), 0);else if (d.from.length) m.from = d.from;\n        }\n\n        if (d.data != null) {\n          if (typeof d.data === \"string\") $util.base64.decode(d.data, m.data = $util.newBuffer($util.base64.length(d.data)), 0);else if (d.data.length) m.data = d.data;\n        }\n\n        if (d.seqno != null) {\n          if (typeof d.seqno === \"string\") $util.base64.decode(d.seqno, m.seqno = $util.newBuffer($util.base64.length(d.seqno)), 0);else if (d.seqno.length) m.seqno = d.seqno;\n        }\n\n        if (d.topicIDs) {\n          if (!Array.isArray(d.topicIDs)) throw TypeError(\".RPC.Message.topicIDs: array expected\");\n          m.topicIDs = [];\n\n          for (var i = 0; i < d.topicIDs.length; ++i) {\n            m.topicIDs[i] = String(d.topicIDs[i]);\n          }\n        }\n\n        if (d.signature != null) {\n          if (typeof d.signature === \"string\") $util.base64.decode(d.signature, m.signature = $util.newBuffer($util.base64.length(d.signature)), 0);else if (d.signature.length) m.signature = d.signature;\n        }\n\n        if (d.key != null) {\n          if (typeof d.key === \"string\") $util.base64.decode(d.key, m.key = $util.newBuffer($util.base64.length(d.key)), 0);else if (d.key.length) m.key = d.key;\n        }\n\n        return m;\n      };\n      /**\n       * Creates a plain object from a Message message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof RPC.Message\n       * @static\n       * @param {RPC.Message} m Message\n       * @param {$protobuf.IConversionOptions} [o] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      Message.toObject = function toObject(m, o) {\n        if (!o) o = {};\n        var d = {};\n\n        if (o.arrays || o.defaults) {\n          d.topicIDs = [];\n        }\n\n        if (m.from != null && m.hasOwnProperty(\"from\")) {\n          d.from = o.bytes === String ? $util.base64.encode(m.from, 0, m.from.length) : o.bytes === Array ? Array.prototype.slice.call(m.from) : m.from;\n          if (o.oneofs) d._from = \"from\";\n        }\n\n        if (m.data != null && m.hasOwnProperty(\"data\")) {\n          d.data = o.bytes === String ? $util.base64.encode(m.data, 0, m.data.length) : o.bytes === Array ? Array.prototype.slice.call(m.data) : m.data;\n          if (o.oneofs) d._data = \"data\";\n        }\n\n        if (m.seqno != null && m.hasOwnProperty(\"seqno\")) {\n          d.seqno = o.bytes === String ? $util.base64.encode(m.seqno, 0, m.seqno.length) : o.bytes === Array ? Array.prototype.slice.call(m.seqno) : m.seqno;\n          if (o.oneofs) d._seqno = \"seqno\";\n        }\n\n        if (m.topicIDs && m.topicIDs.length) {\n          d.topicIDs = [];\n\n          for (var j = 0; j < m.topicIDs.length; ++j) {\n            d.topicIDs[j] = m.topicIDs[j];\n          }\n        }\n\n        if (m.signature != null && m.hasOwnProperty(\"signature\")) {\n          d.signature = o.bytes === String ? $util.base64.encode(m.signature, 0, m.signature.length) : o.bytes === Array ? Array.prototype.slice.call(m.signature) : m.signature;\n          if (o.oneofs) d._signature = \"signature\";\n        }\n\n        if (m.key != null && m.hasOwnProperty(\"key\")) {\n          d.key = o.bytes === String ? $util.base64.encode(m.key, 0, m.key.length) : o.bytes === Array ? Array.prototype.slice.call(m.key) : m.key;\n          if (o.oneofs) d._key = \"key\";\n        }\n\n        return d;\n      };\n      /**\n       * Converts this Message to JSON.\n       * @function toJSON\n       * @memberof RPC.Message\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      Message.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return Message;\n    }();\n\n    RPC.ControlMessage = function () {\n      /**\n       * Properties of a ControlMessage.\n       * @memberof RPC\n       * @interface IControlMessage\n       * @property {Array.<RPC.IControlIHave>|null} [ihave] ControlMessage ihave\n       * @property {Array.<RPC.IControlIWant>|null} [iwant] ControlMessage iwant\n       * @property {Array.<RPC.IControlGraft>|null} [graft] ControlMessage graft\n       * @property {Array.<RPC.IControlPrune>|null} [prune] ControlMessage prune\n       */\n\n      /**\n       * Constructs a new ControlMessage.\n       * @memberof RPC\n       * @classdesc Represents a ControlMessage.\n       * @implements IControlMessage\n       * @constructor\n       * @param {RPC.IControlMessage=} [p] Properties to set\n       */\n      function ControlMessage(p) {\n        this.ihave = [];\n        this.iwant = [];\n        this.graft = [];\n        this.prune = [];\n        if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n      }\n      /**\n       * ControlMessage ihave.\n       * @member {Array.<RPC.IControlIHave>} ihave\n       * @memberof RPC.ControlMessage\n       * @instance\n       */\n\n\n      ControlMessage.prototype.ihave = $util.emptyArray;\n      /**\n       * ControlMessage iwant.\n       * @member {Array.<RPC.IControlIWant>} iwant\n       * @memberof RPC.ControlMessage\n       * @instance\n       */\n\n      ControlMessage.prototype.iwant = $util.emptyArray;\n      /**\n       * ControlMessage graft.\n       * @member {Array.<RPC.IControlGraft>} graft\n       * @memberof RPC.ControlMessage\n       * @instance\n       */\n\n      ControlMessage.prototype.graft = $util.emptyArray;\n      /**\n       * ControlMessage prune.\n       * @member {Array.<RPC.IControlPrune>} prune\n       * @memberof RPC.ControlMessage\n       * @instance\n       */\n\n      ControlMessage.prototype.prune = $util.emptyArray;\n      /**\n       * Encodes the specified ControlMessage message. Does not implicitly {@link RPC.ControlMessage.verify|verify} messages.\n       * @function encode\n       * @memberof RPC.ControlMessage\n       * @static\n       * @param {RPC.IControlMessage} m ControlMessage message or plain object to encode\n       * @param {$protobuf.Writer} [w] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n      ControlMessage.encode = function encode(m, w) {\n        if (!w) w = $Writer.create();\n\n        if (m.ihave != null && m.ihave.length) {\n          for (var i = 0; i < m.ihave.length; ++i) $root.RPC.ControlIHave.encode(m.ihave[i], w.uint32(10).fork()).ldelim();\n        }\n\n        if (m.iwant != null && m.iwant.length) {\n          for (var i = 0; i < m.iwant.length; ++i) $root.RPC.ControlIWant.encode(m.iwant[i], w.uint32(18).fork()).ldelim();\n        }\n\n        if (m.graft != null && m.graft.length) {\n          for (var i = 0; i < m.graft.length; ++i) $root.RPC.ControlGraft.encode(m.graft[i], w.uint32(26).fork()).ldelim();\n        }\n\n        if (m.prune != null && m.prune.length) {\n          for (var i = 0; i < m.prune.length; ++i) $root.RPC.ControlPrune.encode(m.prune[i], w.uint32(34).fork()).ldelim();\n        }\n\n        return w;\n      };\n      /**\n       * Decodes a ControlMessage message from the specified reader or buffer.\n       * @function decode\n       * @memberof RPC.ControlMessage\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n       * @param {number} [l] Message length if known beforehand\n       * @returns {RPC.ControlMessage} ControlMessage\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      ControlMessage.decode = function decode(r, l) {\n        if (!(r instanceof $Reader)) r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l,\n            m = new $root.RPC.ControlMessage();\n\n        while (r.pos < c) {\n          var t = r.uint32();\n\n          switch (t >>> 3) {\n            case 1:\n              if (!(m.ihave && m.ihave.length)) m.ihave = [];\n              m.ihave.push($root.RPC.ControlIHave.decode(r, r.uint32()));\n              break;\n\n            case 2:\n              if (!(m.iwant && m.iwant.length)) m.iwant = [];\n              m.iwant.push($root.RPC.ControlIWant.decode(r, r.uint32()));\n              break;\n\n            case 3:\n              if (!(m.graft && m.graft.length)) m.graft = [];\n              m.graft.push($root.RPC.ControlGraft.decode(r, r.uint32()));\n              break;\n\n            case 4:\n              if (!(m.prune && m.prune.length)) m.prune = [];\n              m.prune.push($root.RPC.ControlPrune.decode(r, r.uint32()));\n              break;\n\n            default:\n              r.skipType(t & 7);\n              break;\n          }\n        }\n\n        return m;\n      };\n      /**\n       * Creates a ControlMessage message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof RPC.ControlMessage\n       * @static\n       * @param {Object.<string,*>} d Plain object\n       * @returns {RPC.ControlMessage} ControlMessage\n       */\n\n\n      ControlMessage.fromObject = function fromObject(d) {\n        if (d instanceof $root.RPC.ControlMessage) return d;\n        var m = new $root.RPC.ControlMessage();\n\n        if (d.ihave) {\n          if (!Array.isArray(d.ihave)) throw TypeError(\".RPC.ControlMessage.ihave: array expected\");\n          m.ihave = [];\n\n          for (var i = 0; i < d.ihave.length; ++i) {\n            if (typeof d.ihave[i] !== \"object\") throw TypeError(\".RPC.ControlMessage.ihave: object expected\");\n            m.ihave[i] = $root.RPC.ControlIHave.fromObject(d.ihave[i]);\n          }\n        }\n\n        if (d.iwant) {\n          if (!Array.isArray(d.iwant)) throw TypeError(\".RPC.ControlMessage.iwant: array expected\");\n          m.iwant = [];\n\n          for (var i = 0; i < d.iwant.length; ++i) {\n            if (typeof d.iwant[i] !== \"object\") throw TypeError(\".RPC.ControlMessage.iwant: object expected\");\n            m.iwant[i] = $root.RPC.ControlIWant.fromObject(d.iwant[i]);\n          }\n        }\n\n        if (d.graft) {\n          if (!Array.isArray(d.graft)) throw TypeError(\".RPC.ControlMessage.graft: array expected\");\n          m.graft = [];\n\n          for (var i = 0; i < d.graft.length; ++i) {\n            if (typeof d.graft[i] !== \"object\") throw TypeError(\".RPC.ControlMessage.graft: object expected\");\n            m.graft[i] = $root.RPC.ControlGraft.fromObject(d.graft[i]);\n          }\n        }\n\n        if (d.prune) {\n          if (!Array.isArray(d.prune)) throw TypeError(\".RPC.ControlMessage.prune: array expected\");\n          m.prune = [];\n\n          for (var i = 0; i < d.prune.length; ++i) {\n            if (typeof d.prune[i] !== \"object\") throw TypeError(\".RPC.ControlMessage.prune: object expected\");\n            m.prune[i] = $root.RPC.ControlPrune.fromObject(d.prune[i]);\n          }\n        }\n\n        return m;\n      };\n      /**\n       * Creates a plain object from a ControlMessage message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof RPC.ControlMessage\n       * @static\n       * @param {RPC.ControlMessage} m ControlMessage\n       * @param {$protobuf.IConversionOptions} [o] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      ControlMessage.toObject = function toObject(m, o) {\n        if (!o) o = {};\n        var d = {};\n\n        if (o.arrays || o.defaults) {\n          d.ihave = [];\n          d.iwant = [];\n          d.graft = [];\n          d.prune = [];\n        }\n\n        if (m.ihave && m.ihave.length) {\n          d.ihave = [];\n\n          for (var j = 0; j < m.ihave.length; ++j) {\n            d.ihave[j] = $root.RPC.ControlIHave.toObject(m.ihave[j], o);\n          }\n        }\n\n        if (m.iwant && m.iwant.length) {\n          d.iwant = [];\n\n          for (var j = 0; j < m.iwant.length; ++j) {\n            d.iwant[j] = $root.RPC.ControlIWant.toObject(m.iwant[j], o);\n          }\n        }\n\n        if (m.graft && m.graft.length) {\n          d.graft = [];\n\n          for (var j = 0; j < m.graft.length; ++j) {\n            d.graft[j] = $root.RPC.ControlGraft.toObject(m.graft[j], o);\n          }\n        }\n\n        if (m.prune && m.prune.length) {\n          d.prune = [];\n\n          for (var j = 0; j < m.prune.length; ++j) {\n            d.prune[j] = $root.RPC.ControlPrune.toObject(m.prune[j], o);\n          }\n        }\n\n        return d;\n      };\n      /**\n       * Converts this ControlMessage to JSON.\n       * @function toJSON\n       * @memberof RPC.ControlMessage\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      ControlMessage.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return ControlMessage;\n    }();\n\n    RPC.ControlIHave = function () {\n      /**\n       * Properties of a ControlIHave.\n       * @memberof RPC\n       * @interface IControlIHave\n       * @property {string|null} [topicID] ControlIHave topicID\n       * @property {Array.<Uint8Array>|null} [messageIDs] ControlIHave messageIDs\n       */\n\n      /**\n       * Constructs a new ControlIHave.\n       * @memberof RPC\n       * @classdesc Represents a ControlIHave.\n       * @implements IControlIHave\n       * @constructor\n       * @param {RPC.IControlIHave=} [p] Properties to set\n       */\n      function ControlIHave(p) {\n        this.messageIDs = [];\n        if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n      }\n      /**\n       * ControlIHave topicID.\n       * @member {string|null|undefined} topicID\n       * @memberof RPC.ControlIHave\n       * @instance\n       */\n\n\n      ControlIHave.prototype.topicID = null;\n      /**\n       * ControlIHave messageIDs.\n       * @member {Array.<Uint8Array>} messageIDs\n       * @memberof RPC.ControlIHave\n       * @instance\n       */\n\n      ControlIHave.prototype.messageIDs = $util.emptyArray; // OneOf field names bound to virtual getters and setters\n\n      var $oneOfFields;\n      /**\n       * ControlIHave _topicID.\n       * @member {\"topicID\"|undefined} _topicID\n       * @memberof RPC.ControlIHave\n       * @instance\n       */\n\n      Object.defineProperty(ControlIHave.prototype, \"_topicID\", {\n        get: $util.oneOfGetter($oneOfFields = [\"topicID\"]),\n        set: $util.oneOfSetter($oneOfFields)\n      });\n      /**\n       * Encodes the specified ControlIHave message. Does not implicitly {@link RPC.ControlIHave.verify|verify} messages.\n       * @function encode\n       * @memberof RPC.ControlIHave\n       * @static\n       * @param {RPC.IControlIHave} m ControlIHave message or plain object to encode\n       * @param {$protobuf.Writer} [w] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n      ControlIHave.encode = function encode(m, w) {\n        if (!w) w = $Writer.create();\n        if (m.topicID != null && Object.hasOwnProperty.call(m, \"topicID\")) w.uint32(10).string(m.topicID);\n\n        if (m.messageIDs != null && m.messageIDs.length) {\n          for (var i = 0; i < m.messageIDs.length; ++i) w.uint32(18).bytes(m.messageIDs[i]);\n        }\n\n        return w;\n      };\n      /**\n       * Decodes a ControlIHave message from the specified reader or buffer.\n       * @function decode\n       * @memberof RPC.ControlIHave\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n       * @param {number} [l] Message length if known beforehand\n       * @returns {RPC.ControlIHave} ControlIHave\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      ControlIHave.decode = function decode(r, l) {\n        if (!(r instanceof $Reader)) r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l,\n            m = new $root.RPC.ControlIHave();\n\n        while (r.pos < c) {\n          var t = r.uint32();\n\n          switch (t >>> 3) {\n            case 1:\n              m.topicID = r.string();\n              break;\n\n            case 2:\n              if (!(m.messageIDs && m.messageIDs.length)) m.messageIDs = [];\n              m.messageIDs.push(r.bytes());\n              break;\n\n            default:\n              r.skipType(t & 7);\n              break;\n          }\n        }\n\n        return m;\n      };\n      /**\n       * Creates a ControlIHave message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof RPC.ControlIHave\n       * @static\n       * @param {Object.<string,*>} d Plain object\n       * @returns {RPC.ControlIHave} ControlIHave\n       */\n\n\n      ControlIHave.fromObject = function fromObject(d) {\n        if (d instanceof $root.RPC.ControlIHave) return d;\n        var m = new $root.RPC.ControlIHave();\n\n        if (d.topicID != null) {\n          m.topicID = String(d.topicID);\n        }\n\n        if (d.messageIDs) {\n          if (!Array.isArray(d.messageIDs)) throw TypeError(\".RPC.ControlIHave.messageIDs: array expected\");\n          m.messageIDs = [];\n\n          for (var i = 0; i < d.messageIDs.length; ++i) {\n            if (typeof d.messageIDs[i] === \"string\") $util.base64.decode(d.messageIDs[i], m.messageIDs[i] = $util.newBuffer($util.base64.length(d.messageIDs[i])), 0);else if (d.messageIDs[i].length) m.messageIDs[i] = d.messageIDs[i];\n          }\n        }\n\n        return m;\n      };\n      /**\n       * Creates a plain object from a ControlIHave message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof RPC.ControlIHave\n       * @static\n       * @param {RPC.ControlIHave} m ControlIHave\n       * @param {$protobuf.IConversionOptions} [o] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      ControlIHave.toObject = function toObject(m, o) {\n        if (!o) o = {};\n        var d = {};\n\n        if (o.arrays || o.defaults) {\n          d.messageIDs = [];\n        }\n\n        if (m.topicID != null && m.hasOwnProperty(\"topicID\")) {\n          d.topicID = m.topicID;\n          if (o.oneofs) d._topicID = \"topicID\";\n        }\n\n        if (m.messageIDs && m.messageIDs.length) {\n          d.messageIDs = [];\n\n          for (var j = 0; j < m.messageIDs.length; ++j) {\n            d.messageIDs[j] = o.bytes === String ? $util.base64.encode(m.messageIDs[j], 0, m.messageIDs[j].length) : o.bytes === Array ? Array.prototype.slice.call(m.messageIDs[j]) : m.messageIDs[j];\n          }\n        }\n\n        return d;\n      };\n      /**\n       * Converts this ControlIHave to JSON.\n       * @function toJSON\n       * @memberof RPC.ControlIHave\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      ControlIHave.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return ControlIHave;\n    }();\n\n    RPC.ControlIWant = function () {\n      /**\n       * Properties of a ControlIWant.\n       * @memberof RPC\n       * @interface IControlIWant\n       * @property {Array.<Uint8Array>|null} [messageIDs] ControlIWant messageIDs\n       */\n\n      /**\n       * Constructs a new ControlIWant.\n       * @memberof RPC\n       * @classdesc Represents a ControlIWant.\n       * @implements IControlIWant\n       * @constructor\n       * @param {RPC.IControlIWant=} [p] Properties to set\n       */\n      function ControlIWant(p) {\n        this.messageIDs = [];\n        if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n      }\n      /**\n       * ControlIWant messageIDs.\n       * @member {Array.<Uint8Array>} messageIDs\n       * @memberof RPC.ControlIWant\n       * @instance\n       */\n\n\n      ControlIWant.prototype.messageIDs = $util.emptyArray;\n      /**\n       * Encodes the specified ControlIWant message. Does not implicitly {@link RPC.ControlIWant.verify|verify} messages.\n       * @function encode\n       * @memberof RPC.ControlIWant\n       * @static\n       * @param {RPC.IControlIWant} m ControlIWant message or plain object to encode\n       * @param {$protobuf.Writer} [w] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n      ControlIWant.encode = function encode(m, w) {\n        if (!w) w = $Writer.create();\n\n        if (m.messageIDs != null && m.messageIDs.length) {\n          for (var i = 0; i < m.messageIDs.length; ++i) w.uint32(10).bytes(m.messageIDs[i]);\n        }\n\n        return w;\n      };\n      /**\n       * Decodes a ControlIWant message from the specified reader or buffer.\n       * @function decode\n       * @memberof RPC.ControlIWant\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n       * @param {number} [l] Message length if known beforehand\n       * @returns {RPC.ControlIWant} ControlIWant\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      ControlIWant.decode = function decode(r, l) {\n        if (!(r instanceof $Reader)) r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l,\n            m = new $root.RPC.ControlIWant();\n\n        while (r.pos < c) {\n          var t = r.uint32();\n\n          switch (t >>> 3) {\n            case 1:\n              if (!(m.messageIDs && m.messageIDs.length)) m.messageIDs = [];\n              m.messageIDs.push(r.bytes());\n              break;\n\n            default:\n              r.skipType(t & 7);\n              break;\n          }\n        }\n\n        return m;\n      };\n      /**\n       * Creates a ControlIWant message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof RPC.ControlIWant\n       * @static\n       * @param {Object.<string,*>} d Plain object\n       * @returns {RPC.ControlIWant} ControlIWant\n       */\n\n\n      ControlIWant.fromObject = function fromObject(d) {\n        if (d instanceof $root.RPC.ControlIWant) return d;\n        var m = new $root.RPC.ControlIWant();\n\n        if (d.messageIDs) {\n          if (!Array.isArray(d.messageIDs)) throw TypeError(\".RPC.ControlIWant.messageIDs: array expected\");\n          m.messageIDs = [];\n\n          for (var i = 0; i < d.messageIDs.length; ++i) {\n            if (typeof d.messageIDs[i] === \"string\") $util.base64.decode(d.messageIDs[i], m.messageIDs[i] = $util.newBuffer($util.base64.length(d.messageIDs[i])), 0);else if (d.messageIDs[i].length) m.messageIDs[i] = d.messageIDs[i];\n          }\n        }\n\n        return m;\n      };\n      /**\n       * Creates a plain object from a ControlIWant message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof RPC.ControlIWant\n       * @static\n       * @param {RPC.ControlIWant} m ControlIWant\n       * @param {$protobuf.IConversionOptions} [o] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      ControlIWant.toObject = function toObject(m, o) {\n        if (!o) o = {};\n        var d = {};\n\n        if (o.arrays || o.defaults) {\n          d.messageIDs = [];\n        }\n\n        if (m.messageIDs && m.messageIDs.length) {\n          d.messageIDs = [];\n\n          for (var j = 0; j < m.messageIDs.length; ++j) {\n            d.messageIDs[j] = o.bytes === String ? $util.base64.encode(m.messageIDs[j], 0, m.messageIDs[j].length) : o.bytes === Array ? Array.prototype.slice.call(m.messageIDs[j]) : m.messageIDs[j];\n          }\n        }\n\n        return d;\n      };\n      /**\n       * Converts this ControlIWant to JSON.\n       * @function toJSON\n       * @memberof RPC.ControlIWant\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      ControlIWant.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return ControlIWant;\n    }();\n\n    RPC.ControlGraft = function () {\n      /**\n       * Properties of a ControlGraft.\n       * @memberof RPC\n       * @interface IControlGraft\n       * @property {string|null} [topicID] ControlGraft topicID\n       */\n\n      /**\n       * Constructs a new ControlGraft.\n       * @memberof RPC\n       * @classdesc Represents a ControlGraft.\n       * @implements IControlGraft\n       * @constructor\n       * @param {RPC.IControlGraft=} [p] Properties to set\n       */\n      function ControlGraft(p) {\n        if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n      }\n      /**\n       * ControlGraft topicID.\n       * @member {string|null|undefined} topicID\n       * @memberof RPC.ControlGraft\n       * @instance\n       */\n\n\n      ControlGraft.prototype.topicID = null; // OneOf field names bound to virtual getters and setters\n\n      var $oneOfFields;\n      /**\n       * ControlGraft _topicID.\n       * @member {\"topicID\"|undefined} _topicID\n       * @memberof RPC.ControlGraft\n       * @instance\n       */\n\n      Object.defineProperty(ControlGraft.prototype, \"_topicID\", {\n        get: $util.oneOfGetter($oneOfFields = [\"topicID\"]),\n        set: $util.oneOfSetter($oneOfFields)\n      });\n      /**\n       * Encodes the specified ControlGraft message. Does not implicitly {@link RPC.ControlGraft.verify|verify} messages.\n       * @function encode\n       * @memberof RPC.ControlGraft\n       * @static\n       * @param {RPC.IControlGraft} m ControlGraft message or plain object to encode\n       * @param {$protobuf.Writer} [w] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n      ControlGraft.encode = function encode(m, w) {\n        if (!w) w = $Writer.create();\n        if (m.topicID != null && Object.hasOwnProperty.call(m, \"topicID\")) w.uint32(10).string(m.topicID);\n        return w;\n      };\n      /**\n       * Decodes a ControlGraft message from the specified reader or buffer.\n       * @function decode\n       * @memberof RPC.ControlGraft\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n       * @param {number} [l] Message length if known beforehand\n       * @returns {RPC.ControlGraft} ControlGraft\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      ControlGraft.decode = function decode(r, l) {\n        if (!(r instanceof $Reader)) r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l,\n            m = new $root.RPC.ControlGraft();\n\n        while (r.pos < c) {\n          var t = r.uint32();\n\n          switch (t >>> 3) {\n            case 1:\n              m.topicID = r.string();\n              break;\n\n            default:\n              r.skipType(t & 7);\n              break;\n          }\n        }\n\n        return m;\n      };\n      /**\n       * Creates a ControlGraft message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof RPC.ControlGraft\n       * @static\n       * @param {Object.<string,*>} d Plain object\n       * @returns {RPC.ControlGraft} ControlGraft\n       */\n\n\n      ControlGraft.fromObject = function fromObject(d) {\n        if (d instanceof $root.RPC.ControlGraft) return d;\n        var m = new $root.RPC.ControlGraft();\n\n        if (d.topicID != null) {\n          m.topicID = String(d.topicID);\n        }\n\n        return m;\n      };\n      /**\n       * Creates a plain object from a ControlGraft message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof RPC.ControlGraft\n       * @static\n       * @param {RPC.ControlGraft} m ControlGraft\n       * @param {$protobuf.IConversionOptions} [o] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      ControlGraft.toObject = function toObject(m, o) {\n        if (!o) o = {};\n        var d = {};\n\n        if (m.topicID != null && m.hasOwnProperty(\"topicID\")) {\n          d.topicID = m.topicID;\n          if (o.oneofs) d._topicID = \"topicID\";\n        }\n\n        return d;\n      };\n      /**\n       * Converts this ControlGraft to JSON.\n       * @function toJSON\n       * @memberof RPC.ControlGraft\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      ControlGraft.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return ControlGraft;\n    }();\n\n    RPC.ControlPrune = function () {\n      /**\n       * Properties of a ControlPrune.\n       * @memberof RPC\n       * @interface IControlPrune\n       * @property {string|null} [topicID] ControlPrune topicID\n       * @property {Array.<RPC.IPeerInfo>|null} [peers] ControlPrune peers\n       * @property {number|null} [backoff] ControlPrune backoff\n       */\n\n      /**\n       * Constructs a new ControlPrune.\n       * @memberof RPC\n       * @classdesc Represents a ControlPrune.\n       * @implements IControlPrune\n       * @constructor\n       * @param {RPC.IControlPrune=} [p] Properties to set\n       */\n      function ControlPrune(p) {\n        this.peers = [];\n        if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n      }\n      /**\n       * ControlPrune topicID.\n       * @member {string|null|undefined} topicID\n       * @memberof RPC.ControlPrune\n       * @instance\n       */\n\n\n      ControlPrune.prototype.topicID = null;\n      /**\n       * ControlPrune peers.\n       * @member {Array.<RPC.IPeerInfo>} peers\n       * @memberof RPC.ControlPrune\n       * @instance\n       */\n\n      ControlPrune.prototype.peers = $util.emptyArray;\n      /**\n       * ControlPrune backoff.\n       * @member {number|null|undefined} backoff\n       * @memberof RPC.ControlPrune\n       * @instance\n       */\n\n      ControlPrune.prototype.backoff = null; // OneOf field names bound to virtual getters and setters\n\n      var $oneOfFields;\n      /**\n       * ControlPrune _topicID.\n       * @member {\"topicID\"|undefined} _topicID\n       * @memberof RPC.ControlPrune\n       * @instance\n       */\n\n      Object.defineProperty(ControlPrune.prototype, \"_topicID\", {\n        get: $util.oneOfGetter($oneOfFields = [\"topicID\"]),\n        set: $util.oneOfSetter($oneOfFields)\n      });\n      /**\n       * ControlPrune _backoff.\n       * @member {\"backoff\"|undefined} _backoff\n       * @memberof RPC.ControlPrune\n       * @instance\n       */\n\n      Object.defineProperty(ControlPrune.prototype, \"_backoff\", {\n        get: $util.oneOfGetter($oneOfFields = [\"backoff\"]),\n        set: $util.oneOfSetter($oneOfFields)\n      });\n      /**\n       * Encodes the specified ControlPrune message. Does not implicitly {@link RPC.ControlPrune.verify|verify} messages.\n       * @function encode\n       * @memberof RPC.ControlPrune\n       * @static\n       * @param {RPC.IControlPrune} m ControlPrune message or plain object to encode\n       * @param {$protobuf.Writer} [w] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n      ControlPrune.encode = function encode(m, w) {\n        if (!w) w = $Writer.create();\n        if (m.topicID != null && Object.hasOwnProperty.call(m, \"topicID\")) w.uint32(10).string(m.topicID);\n\n        if (m.peers != null && m.peers.length) {\n          for (var i = 0; i < m.peers.length; ++i) $root.RPC.PeerInfo.encode(m.peers[i], w.uint32(18).fork()).ldelim();\n        }\n\n        if (m.backoff != null && Object.hasOwnProperty.call(m, \"backoff\")) w.uint32(24).uint64(m.backoff);\n        return w;\n      };\n      /**\n       * Decodes a ControlPrune message from the specified reader or buffer.\n       * @function decode\n       * @memberof RPC.ControlPrune\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n       * @param {number} [l] Message length if known beforehand\n       * @returns {RPC.ControlPrune} ControlPrune\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      ControlPrune.decode = function decode(r, l) {\n        if (!(r instanceof $Reader)) r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l,\n            m = new $root.RPC.ControlPrune();\n\n        while (r.pos < c) {\n          var t = r.uint32();\n\n          switch (t >>> 3) {\n            case 1:\n              m.topicID = r.string();\n              break;\n\n            case 2:\n              if (!(m.peers && m.peers.length)) m.peers = [];\n              m.peers.push($root.RPC.PeerInfo.decode(r, r.uint32()));\n              break;\n\n            case 3:\n              m.backoff = r.uint64();\n              break;\n\n            default:\n              r.skipType(t & 7);\n              break;\n          }\n        }\n\n        return m;\n      };\n      /**\n       * Creates a ControlPrune message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof RPC.ControlPrune\n       * @static\n       * @param {Object.<string,*>} d Plain object\n       * @returns {RPC.ControlPrune} ControlPrune\n       */\n\n\n      ControlPrune.fromObject = function fromObject(d) {\n        if (d instanceof $root.RPC.ControlPrune) return d;\n        var m = new $root.RPC.ControlPrune();\n\n        if (d.topicID != null) {\n          m.topicID = String(d.topicID);\n        }\n\n        if (d.peers) {\n          if (!Array.isArray(d.peers)) throw TypeError(\".RPC.ControlPrune.peers: array expected\");\n          m.peers = [];\n\n          for (var i = 0; i < d.peers.length; ++i) {\n            if (typeof d.peers[i] !== \"object\") throw TypeError(\".RPC.ControlPrune.peers: object expected\");\n            m.peers[i] = $root.RPC.PeerInfo.fromObject(d.peers[i]);\n          }\n        }\n\n        if (d.backoff != null) {\n          if ($util.Long) (m.backoff = $util.Long.fromValue(d.backoff)).unsigned = true;else if (typeof d.backoff === \"string\") m.backoff = parseInt(d.backoff, 10);else if (typeof d.backoff === \"number\") m.backoff = d.backoff;else if (typeof d.backoff === \"object\") m.backoff = new $util.LongBits(d.backoff.low >>> 0, d.backoff.high >>> 0).toNumber(true);\n        }\n\n        return m;\n      };\n      /**\n       * Creates a plain object from a ControlPrune message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof RPC.ControlPrune\n       * @static\n       * @param {RPC.ControlPrune} m ControlPrune\n       * @param {$protobuf.IConversionOptions} [o] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      ControlPrune.toObject = function toObject(m, o) {\n        if (!o) o = {};\n        var d = {};\n\n        if (o.arrays || o.defaults) {\n          d.peers = [];\n        }\n\n        if (m.topicID != null && m.hasOwnProperty(\"topicID\")) {\n          d.topicID = m.topicID;\n          if (o.oneofs) d._topicID = \"topicID\";\n        }\n\n        if (m.peers && m.peers.length) {\n          d.peers = [];\n\n          for (var j = 0; j < m.peers.length; ++j) {\n            d.peers[j] = $root.RPC.PeerInfo.toObject(m.peers[j], o);\n          }\n        }\n\n        if (m.backoff != null && m.hasOwnProperty(\"backoff\")) {\n          if (typeof m.backoff === \"number\") d.backoff = o.longs === String ? String(m.backoff) : m.backoff;else d.backoff = o.longs === String ? $util.Long.prototype.toString.call(m.backoff) : o.longs === Number ? new $util.LongBits(m.backoff.low >>> 0, m.backoff.high >>> 0).toNumber(true) : m.backoff;\n          if (o.oneofs) d._backoff = \"backoff\";\n        }\n\n        return d;\n      };\n      /**\n       * Converts this ControlPrune to JSON.\n       * @function toJSON\n       * @memberof RPC.ControlPrune\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      ControlPrune.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return ControlPrune;\n    }();\n\n    RPC.PeerInfo = function () {\n      /**\n       * Properties of a PeerInfo.\n       * @memberof RPC\n       * @interface IPeerInfo\n       * @property {Uint8Array|null} [peerID] PeerInfo peerID\n       * @property {Uint8Array|null} [signedPeerRecord] PeerInfo signedPeerRecord\n       */\n\n      /**\n       * Constructs a new PeerInfo.\n       * @memberof RPC\n       * @classdesc Represents a PeerInfo.\n       * @implements IPeerInfo\n       * @constructor\n       * @param {RPC.IPeerInfo=} [p] Properties to set\n       */\n      function PeerInfo(p) {\n        if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n      }\n      /**\n       * PeerInfo peerID.\n       * @member {Uint8Array|null|undefined} peerID\n       * @memberof RPC.PeerInfo\n       * @instance\n       */\n\n\n      PeerInfo.prototype.peerID = null;\n      /**\n       * PeerInfo signedPeerRecord.\n       * @member {Uint8Array|null|undefined} signedPeerRecord\n       * @memberof RPC.PeerInfo\n       * @instance\n       */\n\n      PeerInfo.prototype.signedPeerRecord = null; // OneOf field names bound to virtual getters and setters\n\n      var $oneOfFields;\n      /**\n       * PeerInfo _peerID.\n       * @member {\"peerID\"|undefined} _peerID\n       * @memberof RPC.PeerInfo\n       * @instance\n       */\n\n      Object.defineProperty(PeerInfo.prototype, \"_peerID\", {\n        get: $util.oneOfGetter($oneOfFields = [\"peerID\"]),\n        set: $util.oneOfSetter($oneOfFields)\n      });\n      /**\n       * PeerInfo _signedPeerRecord.\n       * @member {\"signedPeerRecord\"|undefined} _signedPeerRecord\n       * @memberof RPC.PeerInfo\n       * @instance\n       */\n\n      Object.defineProperty(PeerInfo.prototype, \"_signedPeerRecord\", {\n        get: $util.oneOfGetter($oneOfFields = [\"signedPeerRecord\"]),\n        set: $util.oneOfSetter($oneOfFields)\n      });\n      /**\n       * Encodes the specified PeerInfo message. Does not implicitly {@link RPC.PeerInfo.verify|verify} messages.\n       * @function encode\n       * @memberof RPC.PeerInfo\n       * @static\n       * @param {RPC.IPeerInfo} m PeerInfo message or plain object to encode\n       * @param {$protobuf.Writer} [w] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n      PeerInfo.encode = function encode(m, w) {\n        if (!w) w = $Writer.create();\n        if (m.peerID != null && Object.hasOwnProperty.call(m, \"peerID\")) w.uint32(10).bytes(m.peerID);\n        if (m.signedPeerRecord != null && Object.hasOwnProperty.call(m, \"signedPeerRecord\")) w.uint32(18).bytes(m.signedPeerRecord);\n        return w;\n      };\n      /**\n       * Decodes a PeerInfo message from the specified reader or buffer.\n       * @function decode\n       * @memberof RPC.PeerInfo\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n       * @param {number} [l] Message length if known beforehand\n       * @returns {RPC.PeerInfo} PeerInfo\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      PeerInfo.decode = function decode(r, l) {\n        if (!(r instanceof $Reader)) r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l,\n            m = new $root.RPC.PeerInfo();\n\n        while (r.pos < c) {\n          var t = r.uint32();\n\n          switch (t >>> 3) {\n            case 1:\n              m.peerID = r.bytes();\n              break;\n\n            case 2:\n              m.signedPeerRecord = r.bytes();\n              break;\n\n            default:\n              r.skipType(t & 7);\n              break;\n          }\n        }\n\n        return m;\n      };\n      /**\n       * Creates a PeerInfo message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof RPC.PeerInfo\n       * @static\n       * @param {Object.<string,*>} d Plain object\n       * @returns {RPC.PeerInfo} PeerInfo\n       */\n\n\n      PeerInfo.fromObject = function fromObject(d) {\n        if (d instanceof $root.RPC.PeerInfo) return d;\n        var m = new $root.RPC.PeerInfo();\n\n        if (d.peerID != null) {\n          if (typeof d.peerID === \"string\") $util.base64.decode(d.peerID, m.peerID = $util.newBuffer($util.base64.length(d.peerID)), 0);else if (d.peerID.length) m.peerID = d.peerID;\n        }\n\n        if (d.signedPeerRecord != null) {\n          if (typeof d.signedPeerRecord === \"string\") $util.base64.decode(d.signedPeerRecord, m.signedPeerRecord = $util.newBuffer($util.base64.length(d.signedPeerRecord)), 0);else if (d.signedPeerRecord.length) m.signedPeerRecord = d.signedPeerRecord;\n        }\n\n        return m;\n      };\n      /**\n       * Creates a plain object from a PeerInfo message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof RPC.PeerInfo\n       * @static\n       * @param {RPC.PeerInfo} m PeerInfo\n       * @param {$protobuf.IConversionOptions} [o] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      PeerInfo.toObject = function toObject(m, o) {\n        if (!o) o = {};\n        var d = {};\n\n        if (m.peerID != null && m.hasOwnProperty(\"peerID\")) {\n          d.peerID = o.bytes === String ? $util.base64.encode(m.peerID, 0, m.peerID.length) : o.bytes === Array ? Array.prototype.slice.call(m.peerID) : m.peerID;\n          if (o.oneofs) d._peerID = \"peerID\";\n        }\n\n        if (m.signedPeerRecord != null && m.hasOwnProperty(\"signedPeerRecord\")) {\n          d.signedPeerRecord = o.bytes === String ? $util.base64.encode(m.signedPeerRecord, 0, m.signedPeerRecord.length) : o.bytes === Array ? Array.prototype.slice.call(m.signedPeerRecord) : m.signedPeerRecord;\n          if (o.oneofs) d._signedPeerRecord = \"signedPeerRecord\";\n        }\n\n        return d;\n      };\n      /**\n       * Converts this PeerInfo to JSON.\n       * @function toJSON\n       * @memberof RPC.PeerInfo\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      PeerInfo.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return PeerInfo;\n    }();\n\n    return RPC;\n  }();\n\n  return $root;\n});","map":{"version":3,"names":["global","factory","define","amd","require","module","exports","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","RPC","p","subscriptions","msgs","ks","Object","keys","i","length","prototype","emptyArray","control","$oneOfFields","defineProperty","get","oneOfGetter","set","oneOfSetter","encode","m","w","create","SubOpts","uint32","fork","ldelim","Message","hasOwnProperty","call","ControlMessage","decode","r","l","c","undefined","len","pos","t","push","skipType","fromObject","d","Array","isArray","TypeError","toObject","o","arrays","defaults","j","oneofs","_control","toJSON","constructor","toJSONOptions","subscribe","topicID","bool","string","Boolean","String","_subscribe","_topicID","topicIDs","from","data","seqno","signature","key","bytes","base64","newBuffer","slice","_from","_data","_seqno","_signature","_key","ihave","iwant","graft","prune","ControlIHave","ControlIWant","ControlGraft","ControlPrune","messageIDs","peers","backoff","PeerInfo","uint64","Long","fromValue","unsigned","parseInt","LongBits","low","high","toNumber","longs","toString","Number","_backoff","peerID","signedPeerRecord","_peerID","_signedPeerRecord"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-gossipsub/src/message/rpc.js"],"sourcesContent":["/*eslint-disable*/\n(function(global, factory) { /* global define, require, module */\n\n    /* AMD */ if (typeof define === 'function' && define.amd)\n        define([\"protobufjs/minimal\"], factory);\n\n    /* CommonJS */ else if (typeof require === 'function' && typeof module === 'object' && module && module.exports)\n        module.exports = factory(require(\"protobufjs/minimal\"));\n\n})(this, function($protobuf) {\n    \"use strict\";\n\n    // Common aliases\n    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n    \n    // Exported root namespace\n    var $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n    \n    $root.RPC = (function() {\n    \n        /**\n         * Properties of a RPC.\n         * @exports IRPC\n         * @interface IRPC\n         * @property {Array.<RPC.ISubOpts>|null} [subscriptions] RPC subscriptions\n         * @property {Array.<RPC.IMessage>|null} [msgs] RPC msgs\n         * @property {RPC.IControlMessage|null} [control] RPC control\n         */\n    \n        /**\n         * Constructs a new RPC.\n         * @exports RPC\n         * @classdesc Represents a RPC.\n         * @implements IRPC\n         * @constructor\n         * @param {IRPC=} [p] Properties to set\n         */\n        function RPC(p) {\n            this.subscriptions = [];\n            this.msgs = [];\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n    \n        /**\n         * RPC subscriptions.\n         * @member {Array.<RPC.ISubOpts>} subscriptions\n         * @memberof RPC\n         * @instance\n         */\n        RPC.prototype.subscriptions = $util.emptyArray;\n    \n        /**\n         * RPC msgs.\n         * @member {Array.<RPC.IMessage>} msgs\n         * @memberof RPC\n         * @instance\n         */\n        RPC.prototype.msgs = $util.emptyArray;\n    \n        /**\n         * RPC control.\n         * @member {RPC.IControlMessage|null|undefined} control\n         * @memberof RPC\n         * @instance\n         */\n        RPC.prototype.control = null;\n    \n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n    \n        /**\n         * RPC _control.\n         * @member {\"control\"|undefined} _control\n         * @memberof RPC\n         * @instance\n         */\n        Object.defineProperty(RPC.prototype, \"_control\", {\n            get: $util.oneOfGetter($oneOfFields = [\"control\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n    \n        /**\n         * Encodes the specified RPC message. Does not implicitly {@link RPC.verify|verify} messages.\n         * @function encode\n         * @memberof RPC\n         * @static\n         * @param {IRPC} m RPC message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RPC.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.subscriptions != null && m.subscriptions.length) {\n                for (var i = 0; i < m.subscriptions.length; ++i)\n                    $root.RPC.SubOpts.encode(m.subscriptions[i], w.uint32(10).fork()).ldelim();\n            }\n            if (m.msgs != null && m.msgs.length) {\n                for (var i = 0; i < m.msgs.length; ++i)\n                    $root.RPC.Message.encode(m.msgs[i], w.uint32(18).fork()).ldelim();\n            }\n            if (m.control != null && Object.hasOwnProperty.call(m, \"control\"))\n                $root.RPC.ControlMessage.encode(m.control, w.uint32(26).fork()).ldelim();\n            return w;\n        };\n    \n        /**\n         * Decodes a RPC message from the specified reader or buffer.\n         * @function decode\n         * @memberof RPC\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {RPC} RPC\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RPC.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    if (!(m.subscriptions && m.subscriptions.length))\n                        m.subscriptions = [];\n                    m.subscriptions.push($root.RPC.SubOpts.decode(r, r.uint32()));\n                    break;\n                case 2:\n                    if (!(m.msgs && m.msgs.length))\n                        m.msgs = [];\n                    m.msgs.push($root.RPC.Message.decode(r, r.uint32()));\n                    break;\n                case 3:\n                    m.control = $root.RPC.ControlMessage.decode(r, r.uint32());\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n    \n        /**\n         * Creates a RPC message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof RPC\n         * @static\n         * @param {Object.<string,*>} d Plain object\n         * @returns {RPC} RPC\n         */\n        RPC.fromObject = function fromObject(d) {\n            if (d instanceof $root.RPC)\n                return d;\n            var m = new $root.RPC();\n            if (d.subscriptions) {\n                if (!Array.isArray(d.subscriptions))\n                    throw TypeError(\".RPC.subscriptions: array expected\");\n                m.subscriptions = [];\n                for (var i = 0; i < d.subscriptions.length; ++i) {\n                    if (typeof d.subscriptions[i] !== \"object\")\n                        throw TypeError(\".RPC.subscriptions: object expected\");\n                    m.subscriptions[i] = $root.RPC.SubOpts.fromObject(d.subscriptions[i]);\n                }\n            }\n            if (d.msgs) {\n                if (!Array.isArray(d.msgs))\n                    throw TypeError(\".RPC.msgs: array expected\");\n                m.msgs = [];\n                for (var i = 0; i < d.msgs.length; ++i) {\n                    if (typeof d.msgs[i] !== \"object\")\n                        throw TypeError(\".RPC.msgs: object expected\");\n                    m.msgs[i] = $root.RPC.Message.fromObject(d.msgs[i]);\n                }\n            }\n            if (d.control != null) {\n                if (typeof d.control !== \"object\")\n                    throw TypeError(\".RPC.control: object expected\");\n                m.control = $root.RPC.ControlMessage.fromObject(d.control);\n            }\n            return m;\n        };\n    \n        /**\n         * Creates a plain object from a RPC message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof RPC\n         * @static\n         * @param {RPC} m RPC\n         * @param {$protobuf.IConversionOptions} [o] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RPC.toObject = function toObject(m, o) {\n            if (!o)\n                o = {};\n            var d = {};\n            if (o.arrays || o.defaults) {\n                d.subscriptions = [];\n                d.msgs = [];\n            }\n            if (m.subscriptions && m.subscriptions.length) {\n                d.subscriptions = [];\n                for (var j = 0; j < m.subscriptions.length; ++j) {\n                    d.subscriptions[j] = $root.RPC.SubOpts.toObject(m.subscriptions[j], o);\n                }\n            }\n            if (m.msgs && m.msgs.length) {\n                d.msgs = [];\n                for (var j = 0; j < m.msgs.length; ++j) {\n                    d.msgs[j] = $root.RPC.Message.toObject(m.msgs[j], o);\n                }\n            }\n            if (m.control != null && m.hasOwnProperty(\"control\")) {\n                d.control = $root.RPC.ControlMessage.toObject(m.control, o);\n                if (o.oneofs)\n                    d._control = \"control\";\n            }\n            return d;\n        };\n    \n        /**\n         * Converts this RPC to JSON.\n         * @function toJSON\n         * @memberof RPC\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RPC.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        RPC.SubOpts = (function() {\n    \n            /**\n             * Properties of a SubOpts.\n             * @memberof RPC\n             * @interface ISubOpts\n             * @property {boolean|null} [subscribe] SubOpts subscribe\n             * @property {string|null} [topicID] SubOpts topicID\n             */\n    \n            /**\n             * Constructs a new SubOpts.\n             * @memberof RPC\n             * @classdesc Represents a SubOpts.\n             * @implements ISubOpts\n             * @constructor\n             * @param {RPC.ISubOpts=} [p] Properties to set\n             */\n            function SubOpts(p) {\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n    \n            /**\n             * SubOpts subscribe.\n             * @member {boolean|null|undefined} subscribe\n             * @memberof RPC.SubOpts\n             * @instance\n             */\n            SubOpts.prototype.subscribe = null;\n    \n            /**\n             * SubOpts topicID.\n             * @member {string|null|undefined} topicID\n             * @memberof RPC.SubOpts\n             * @instance\n             */\n            SubOpts.prototype.topicID = null;\n    \n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n    \n            /**\n             * SubOpts _subscribe.\n             * @member {\"subscribe\"|undefined} _subscribe\n             * @memberof RPC.SubOpts\n             * @instance\n             */\n            Object.defineProperty(SubOpts.prototype, \"_subscribe\", {\n                get: $util.oneOfGetter($oneOfFields = [\"subscribe\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n    \n            /**\n             * SubOpts _topicID.\n             * @member {\"topicID\"|undefined} _topicID\n             * @memberof RPC.SubOpts\n             * @instance\n             */\n            Object.defineProperty(SubOpts.prototype, \"_topicID\", {\n                get: $util.oneOfGetter($oneOfFields = [\"topicID\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n    \n            /**\n             * Encodes the specified SubOpts message. Does not implicitly {@link RPC.SubOpts.verify|verify} messages.\n             * @function encode\n             * @memberof RPC.SubOpts\n             * @static\n             * @param {RPC.ISubOpts} m SubOpts message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SubOpts.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.subscribe != null && Object.hasOwnProperty.call(m, \"subscribe\"))\n                    w.uint32(8).bool(m.subscribe);\n                if (m.topicID != null && Object.hasOwnProperty.call(m, \"topicID\"))\n                    w.uint32(18).string(m.topicID);\n                return w;\n            };\n    \n            /**\n             * Decodes a SubOpts message from the specified reader or buffer.\n             * @function decode\n             * @memberof RPC.SubOpts\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {RPC.SubOpts} SubOpts\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SubOpts.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC.SubOpts();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.subscribe = r.bool();\n                        break;\n                    case 2:\n                        m.topicID = r.string();\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n    \n            /**\n             * Creates a SubOpts message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof RPC.SubOpts\n             * @static\n             * @param {Object.<string,*>} d Plain object\n             * @returns {RPC.SubOpts} SubOpts\n             */\n            SubOpts.fromObject = function fromObject(d) {\n                if (d instanceof $root.RPC.SubOpts)\n                    return d;\n                var m = new $root.RPC.SubOpts();\n                if (d.subscribe != null) {\n                    m.subscribe = Boolean(d.subscribe);\n                }\n                if (d.topicID != null) {\n                    m.topicID = String(d.topicID);\n                }\n                return m;\n            };\n    \n            /**\n             * Creates a plain object from a SubOpts message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof RPC.SubOpts\n             * @static\n             * @param {RPC.SubOpts} m SubOpts\n             * @param {$protobuf.IConversionOptions} [o] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            SubOpts.toObject = function toObject(m, o) {\n                if (!o)\n                    o = {};\n                var d = {};\n                if (m.subscribe != null && m.hasOwnProperty(\"subscribe\")) {\n                    d.subscribe = m.subscribe;\n                    if (o.oneofs)\n                        d._subscribe = \"subscribe\";\n                }\n                if (m.topicID != null && m.hasOwnProperty(\"topicID\")) {\n                    d.topicID = m.topicID;\n                    if (o.oneofs)\n                        d._topicID = \"topicID\";\n                }\n                return d;\n            };\n    \n            /**\n             * Converts this SubOpts to JSON.\n             * @function toJSON\n             * @memberof RPC.SubOpts\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            SubOpts.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n    \n            return SubOpts;\n        })();\n    \n        RPC.Message = (function() {\n    \n            /**\n             * Properties of a Message.\n             * @memberof RPC\n             * @interface IMessage\n             * @property {Uint8Array|null} [from] Message from\n             * @property {Uint8Array|null} [data] Message data\n             * @property {Uint8Array|null} [seqno] Message seqno\n             * @property {Array.<string>|null} [topicIDs] Message topicIDs\n             * @property {Uint8Array|null} [signature] Message signature\n             * @property {Uint8Array|null} [key] Message key\n             */\n    \n            /**\n             * Constructs a new Message.\n             * @memberof RPC\n             * @classdesc Represents a Message.\n             * @implements IMessage\n             * @constructor\n             * @param {RPC.IMessage=} [p] Properties to set\n             */\n            function Message(p) {\n                this.topicIDs = [];\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n    \n            /**\n             * Message from.\n             * @member {Uint8Array|null|undefined} from\n             * @memberof RPC.Message\n             * @instance\n             */\n            Message.prototype.from = null;\n    \n            /**\n             * Message data.\n             * @member {Uint8Array|null|undefined} data\n             * @memberof RPC.Message\n             * @instance\n             */\n            Message.prototype.data = null;\n    \n            /**\n             * Message seqno.\n             * @member {Uint8Array|null|undefined} seqno\n             * @memberof RPC.Message\n             * @instance\n             */\n            Message.prototype.seqno = null;\n    \n            /**\n             * Message topicIDs.\n             * @member {Array.<string>} topicIDs\n             * @memberof RPC.Message\n             * @instance\n             */\n            Message.prototype.topicIDs = $util.emptyArray;\n    \n            /**\n             * Message signature.\n             * @member {Uint8Array|null|undefined} signature\n             * @memberof RPC.Message\n             * @instance\n             */\n            Message.prototype.signature = null;\n    \n            /**\n             * Message key.\n             * @member {Uint8Array|null|undefined} key\n             * @memberof RPC.Message\n             * @instance\n             */\n            Message.prototype.key = null;\n    \n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n    \n            /**\n             * Message _from.\n             * @member {\"from\"|undefined} _from\n             * @memberof RPC.Message\n             * @instance\n             */\n            Object.defineProperty(Message.prototype, \"_from\", {\n                get: $util.oneOfGetter($oneOfFields = [\"from\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n    \n            /**\n             * Message _data.\n             * @member {\"data\"|undefined} _data\n             * @memberof RPC.Message\n             * @instance\n             */\n            Object.defineProperty(Message.prototype, \"_data\", {\n                get: $util.oneOfGetter($oneOfFields = [\"data\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n    \n            /**\n             * Message _seqno.\n             * @member {\"seqno\"|undefined} _seqno\n             * @memberof RPC.Message\n             * @instance\n             */\n            Object.defineProperty(Message.prototype, \"_seqno\", {\n                get: $util.oneOfGetter($oneOfFields = [\"seqno\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n    \n            /**\n             * Message _signature.\n             * @member {\"signature\"|undefined} _signature\n             * @memberof RPC.Message\n             * @instance\n             */\n            Object.defineProperty(Message.prototype, \"_signature\", {\n                get: $util.oneOfGetter($oneOfFields = [\"signature\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n    \n            /**\n             * Message _key.\n             * @member {\"key\"|undefined} _key\n             * @memberof RPC.Message\n             * @instance\n             */\n            Object.defineProperty(Message.prototype, \"_key\", {\n                get: $util.oneOfGetter($oneOfFields = [\"key\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n    \n            /**\n             * Encodes the specified Message message. Does not implicitly {@link RPC.Message.verify|verify} messages.\n             * @function encode\n             * @memberof RPC.Message\n             * @static\n             * @param {RPC.IMessage} m Message message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Message.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.from != null && Object.hasOwnProperty.call(m, \"from\"))\n                    w.uint32(10).bytes(m.from);\n                if (m.data != null && Object.hasOwnProperty.call(m, \"data\"))\n                    w.uint32(18).bytes(m.data);\n                if (m.seqno != null && Object.hasOwnProperty.call(m, \"seqno\"))\n                    w.uint32(26).bytes(m.seqno);\n                if (m.topicIDs != null && m.topicIDs.length) {\n                    for (var i = 0; i < m.topicIDs.length; ++i)\n                        w.uint32(34).string(m.topicIDs[i]);\n                }\n                if (m.signature != null && Object.hasOwnProperty.call(m, \"signature\"))\n                    w.uint32(42).bytes(m.signature);\n                if (m.key != null && Object.hasOwnProperty.call(m, \"key\"))\n                    w.uint32(50).bytes(m.key);\n                return w;\n            };\n    \n            /**\n             * Decodes a Message message from the specified reader or buffer.\n             * @function decode\n             * @memberof RPC.Message\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {RPC.Message} Message\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Message.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC.Message();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.from = r.bytes();\n                        break;\n                    case 2:\n                        m.data = r.bytes();\n                        break;\n                    case 3:\n                        m.seqno = r.bytes();\n                        break;\n                    case 4:\n                        if (!(m.topicIDs && m.topicIDs.length))\n                            m.topicIDs = [];\n                        m.topicIDs.push(r.string());\n                        break;\n                    case 5:\n                        m.signature = r.bytes();\n                        break;\n                    case 6:\n                        m.key = r.bytes();\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n    \n            /**\n             * Creates a Message message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof RPC.Message\n             * @static\n             * @param {Object.<string,*>} d Plain object\n             * @returns {RPC.Message} Message\n             */\n            Message.fromObject = function fromObject(d) {\n                if (d instanceof $root.RPC.Message)\n                    return d;\n                var m = new $root.RPC.Message();\n                if (d.from != null) {\n                    if (typeof d.from === \"string\")\n                        $util.base64.decode(d.from, m.from = $util.newBuffer($util.base64.length(d.from)), 0);\n                    else if (d.from.length)\n                        m.from = d.from;\n                }\n                if (d.data != null) {\n                    if (typeof d.data === \"string\")\n                        $util.base64.decode(d.data, m.data = $util.newBuffer($util.base64.length(d.data)), 0);\n                    else if (d.data.length)\n                        m.data = d.data;\n                }\n                if (d.seqno != null) {\n                    if (typeof d.seqno === \"string\")\n                        $util.base64.decode(d.seqno, m.seqno = $util.newBuffer($util.base64.length(d.seqno)), 0);\n                    else if (d.seqno.length)\n                        m.seqno = d.seqno;\n                }\n                if (d.topicIDs) {\n                    if (!Array.isArray(d.topicIDs))\n                        throw TypeError(\".RPC.Message.topicIDs: array expected\");\n                    m.topicIDs = [];\n                    for (var i = 0; i < d.topicIDs.length; ++i) {\n                        m.topicIDs[i] = String(d.topicIDs[i]);\n                    }\n                }\n                if (d.signature != null) {\n                    if (typeof d.signature === \"string\")\n                        $util.base64.decode(d.signature, m.signature = $util.newBuffer($util.base64.length(d.signature)), 0);\n                    else if (d.signature.length)\n                        m.signature = d.signature;\n                }\n                if (d.key != null) {\n                    if (typeof d.key === \"string\")\n                        $util.base64.decode(d.key, m.key = $util.newBuffer($util.base64.length(d.key)), 0);\n                    else if (d.key.length)\n                        m.key = d.key;\n                }\n                return m;\n            };\n    \n            /**\n             * Creates a plain object from a Message message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof RPC.Message\n             * @static\n             * @param {RPC.Message} m Message\n             * @param {$protobuf.IConversionOptions} [o] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Message.toObject = function toObject(m, o) {\n                if (!o)\n                    o = {};\n                var d = {};\n                if (o.arrays || o.defaults) {\n                    d.topicIDs = [];\n                }\n                if (m.from != null && m.hasOwnProperty(\"from\")) {\n                    d.from = o.bytes === String ? $util.base64.encode(m.from, 0, m.from.length) : o.bytes === Array ? Array.prototype.slice.call(m.from) : m.from;\n                    if (o.oneofs)\n                        d._from = \"from\";\n                }\n                if (m.data != null && m.hasOwnProperty(\"data\")) {\n                    d.data = o.bytes === String ? $util.base64.encode(m.data, 0, m.data.length) : o.bytes === Array ? Array.prototype.slice.call(m.data) : m.data;\n                    if (o.oneofs)\n                        d._data = \"data\";\n                }\n                if (m.seqno != null && m.hasOwnProperty(\"seqno\")) {\n                    d.seqno = o.bytes === String ? $util.base64.encode(m.seqno, 0, m.seqno.length) : o.bytes === Array ? Array.prototype.slice.call(m.seqno) : m.seqno;\n                    if (o.oneofs)\n                        d._seqno = \"seqno\";\n                }\n                if (m.topicIDs && m.topicIDs.length) {\n                    d.topicIDs = [];\n                    for (var j = 0; j < m.topicIDs.length; ++j) {\n                        d.topicIDs[j] = m.topicIDs[j];\n                    }\n                }\n                if (m.signature != null && m.hasOwnProperty(\"signature\")) {\n                    d.signature = o.bytes === String ? $util.base64.encode(m.signature, 0, m.signature.length) : o.bytes === Array ? Array.prototype.slice.call(m.signature) : m.signature;\n                    if (o.oneofs)\n                        d._signature = \"signature\";\n                }\n                if (m.key != null && m.hasOwnProperty(\"key\")) {\n                    d.key = o.bytes === String ? $util.base64.encode(m.key, 0, m.key.length) : o.bytes === Array ? Array.prototype.slice.call(m.key) : m.key;\n                    if (o.oneofs)\n                        d._key = \"key\";\n                }\n                return d;\n            };\n    \n            /**\n             * Converts this Message to JSON.\n             * @function toJSON\n             * @memberof RPC.Message\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Message.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n    \n            return Message;\n        })();\n    \n        RPC.ControlMessage = (function() {\n    \n            /**\n             * Properties of a ControlMessage.\n             * @memberof RPC\n             * @interface IControlMessage\n             * @property {Array.<RPC.IControlIHave>|null} [ihave] ControlMessage ihave\n             * @property {Array.<RPC.IControlIWant>|null} [iwant] ControlMessage iwant\n             * @property {Array.<RPC.IControlGraft>|null} [graft] ControlMessage graft\n             * @property {Array.<RPC.IControlPrune>|null} [prune] ControlMessage prune\n             */\n    \n            /**\n             * Constructs a new ControlMessage.\n             * @memberof RPC\n             * @classdesc Represents a ControlMessage.\n             * @implements IControlMessage\n             * @constructor\n             * @param {RPC.IControlMessage=} [p] Properties to set\n             */\n            function ControlMessage(p) {\n                this.ihave = [];\n                this.iwant = [];\n                this.graft = [];\n                this.prune = [];\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n    \n            /**\n             * ControlMessage ihave.\n             * @member {Array.<RPC.IControlIHave>} ihave\n             * @memberof RPC.ControlMessage\n             * @instance\n             */\n            ControlMessage.prototype.ihave = $util.emptyArray;\n    \n            /**\n             * ControlMessage iwant.\n             * @member {Array.<RPC.IControlIWant>} iwant\n             * @memberof RPC.ControlMessage\n             * @instance\n             */\n            ControlMessage.prototype.iwant = $util.emptyArray;\n    \n            /**\n             * ControlMessage graft.\n             * @member {Array.<RPC.IControlGraft>} graft\n             * @memberof RPC.ControlMessage\n             * @instance\n             */\n            ControlMessage.prototype.graft = $util.emptyArray;\n    \n            /**\n             * ControlMessage prune.\n             * @member {Array.<RPC.IControlPrune>} prune\n             * @memberof RPC.ControlMessage\n             * @instance\n             */\n            ControlMessage.prototype.prune = $util.emptyArray;\n    \n            /**\n             * Encodes the specified ControlMessage message. Does not implicitly {@link RPC.ControlMessage.verify|verify} messages.\n             * @function encode\n             * @memberof RPC.ControlMessage\n             * @static\n             * @param {RPC.IControlMessage} m ControlMessage message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ControlMessage.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.ihave != null && m.ihave.length) {\n                    for (var i = 0; i < m.ihave.length; ++i)\n                        $root.RPC.ControlIHave.encode(m.ihave[i], w.uint32(10).fork()).ldelim();\n                }\n                if (m.iwant != null && m.iwant.length) {\n                    for (var i = 0; i < m.iwant.length; ++i)\n                        $root.RPC.ControlIWant.encode(m.iwant[i], w.uint32(18).fork()).ldelim();\n                }\n                if (m.graft != null && m.graft.length) {\n                    for (var i = 0; i < m.graft.length; ++i)\n                        $root.RPC.ControlGraft.encode(m.graft[i], w.uint32(26).fork()).ldelim();\n                }\n                if (m.prune != null && m.prune.length) {\n                    for (var i = 0; i < m.prune.length; ++i)\n                        $root.RPC.ControlPrune.encode(m.prune[i], w.uint32(34).fork()).ldelim();\n                }\n                return w;\n            };\n    \n            /**\n             * Decodes a ControlMessage message from the specified reader or buffer.\n             * @function decode\n             * @memberof RPC.ControlMessage\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {RPC.ControlMessage} ControlMessage\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ControlMessage.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC.ControlMessage();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        if (!(m.ihave && m.ihave.length))\n                            m.ihave = [];\n                        m.ihave.push($root.RPC.ControlIHave.decode(r, r.uint32()));\n                        break;\n                    case 2:\n                        if (!(m.iwant && m.iwant.length))\n                            m.iwant = [];\n                        m.iwant.push($root.RPC.ControlIWant.decode(r, r.uint32()));\n                        break;\n                    case 3:\n                        if (!(m.graft && m.graft.length))\n                            m.graft = [];\n                        m.graft.push($root.RPC.ControlGraft.decode(r, r.uint32()));\n                        break;\n                    case 4:\n                        if (!(m.prune && m.prune.length))\n                            m.prune = [];\n                        m.prune.push($root.RPC.ControlPrune.decode(r, r.uint32()));\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n    \n            /**\n             * Creates a ControlMessage message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof RPC.ControlMessage\n             * @static\n             * @param {Object.<string,*>} d Plain object\n             * @returns {RPC.ControlMessage} ControlMessage\n             */\n            ControlMessage.fromObject = function fromObject(d) {\n                if (d instanceof $root.RPC.ControlMessage)\n                    return d;\n                var m = new $root.RPC.ControlMessage();\n                if (d.ihave) {\n                    if (!Array.isArray(d.ihave))\n                        throw TypeError(\".RPC.ControlMessage.ihave: array expected\");\n                    m.ihave = [];\n                    for (var i = 0; i < d.ihave.length; ++i) {\n                        if (typeof d.ihave[i] !== \"object\")\n                            throw TypeError(\".RPC.ControlMessage.ihave: object expected\");\n                        m.ihave[i] = $root.RPC.ControlIHave.fromObject(d.ihave[i]);\n                    }\n                }\n                if (d.iwant) {\n                    if (!Array.isArray(d.iwant))\n                        throw TypeError(\".RPC.ControlMessage.iwant: array expected\");\n                    m.iwant = [];\n                    for (var i = 0; i < d.iwant.length; ++i) {\n                        if (typeof d.iwant[i] !== \"object\")\n                            throw TypeError(\".RPC.ControlMessage.iwant: object expected\");\n                        m.iwant[i] = $root.RPC.ControlIWant.fromObject(d.iwant[i]);\n                    }\n                }\n                if (d.graft) {\n                    if (!Array.isArray(d.graft))\n                        throw TypeError(\".RPC.ControlMessage.graft: array expected\");\n                    m.graft = [];\n                    for (var i = 0; i < d.graft.length; ++i) {\n                        if (typeof d.graft[i] !== \"object\")\n                            throw TypeError(\".RPC.ControlMessage.graft: object expected\");\n                        m.graft[i] = $root.RPC.ControlGraft.fromObject(d.graft[i]);\n                    }\n                }\n                if (d.prune) {\n                    if (!Array.isArray(d.prune))\n                        throw TypeError(\".RPC.ControlMessage.prune: array expected\");\n                    m.prune = [];\n                    for (var i = 0; i < d.prune.length; ++i) {\n                        if (typeof d.prune[i] !== \"object\")\n                            throw TypeError(\".RPC.ControlMessage.prune: object expected\");\n                        m.prune[i] = $root.RPC.ControlPrune.fromObject(d.prune[i]);\n                    }\n                }\n                return m;\n            };\n    \n            /**\n             * Creates a plain object from a ControlMessage message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof RPC.ControlMessage\n             * @static\n             * @param {RPC.ControlMessage} m ControlMessage\n             * @param {$protobuf.IConversionOptions} [o] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ControlMessage.toObject = function toObject(m, o) {\n                if (!o)\n                    o = {};\n                var d = {};\n                if (o.arrays || o.defaults) {\n                    d.ihave = [];\n                    d.iwant = [];\n                    d.graft = [];\n                    d.prune = [];\n                }\n                if (m.ihave && m.ihave.length) {\n                    d.ihave = [];\n                    for (var j = 0; j < m.ihave.length; ++j) {\n                        d.ihave[j] = $root.RPC.ControlIHave.toObject(m.ihave[j], o);\n                    }\n                }\n                if (m.iwant && m.iwant.length) {\n                    d.iwant = [];\n                    for (var j = 0; j < m.iwant.length; ++j) {\n                        d.iwant[j] = $root.RPC.ControlIWant.toObject(m.iwant[j], o);\n                    }\n                }\n                if (m.graft && m.graft.length) {\n                    d.graft = [];\n                    for (var j = 0; j < m.graft.length; ++j) {\n                        d.graft[j] = $root.RPC.ControlGraft.toObject(m.graft[j], o);\n                    }\n                }\n                if (m.prune && m.prune.length) {\n                    d.prune = [];\n                    for (var j = 0; j < m.prune.length; ++j) {\n                        d.prune[j] = $root.RPC.ControlPrune.toObject(m.prune[j], o);\n                    }\n                }\n                return d;\n            };\n    \n            /**\n             * Converts this ControlMessage to JSON.\n             * @function toJSON\n             * @memberof RPC.ControlMessage\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ControlMessage.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n    \n            return ControlMessage;\n        })();\n    \n        RPC.ControlIHave = (function() {\n    \n            /**\n             * Properties of a ControlIHave.\n             * @memberof RPC\n             * @interface IControlIHave\n             * @property {string|null} [topicID] ControlIHave topicID\n             * @property {Array.<Uint8Array>|null} [messageIDs] ControlIHave messageIDs\n             */\n    \n            /**\n             * Constructs a new ControlIHave.\n             * @memberof RPC\n             * @classdesc Represents a ControlIHave.\n             * @implements IControlIHave\n             * @constructor\n             * @param {RPC.IControlIHave=} [p] Properties to set\n             */\n            function ControlIHave(p) {\n                this.messageIDs = [];\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n    \n            /**\n             * ControlIHave topicID.\n             * @member {string|null|undefined} topicID\n             * @memberof RPC.ControlIHave\n             * @instance\n             */\n            ControlIHave.prototype.topicID = null;\n    \n            /**\n             * ControlIHave messageIDs.\n             * @member {Array.<Uint8Array>} messageIDs\n             * @memberof RPC.ControlIHave\n             * @instance\n             */\n            ControlIHave.prototype.messageIDs = $util.emptyArray;\n    \n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n    \n            /**\n             * ControlIHave _topicID.\n             * @member {\"topicID\"|undefined} _topicID\n             * @memberof RPC.ControlIHave\n             * @instance\n             */\n            Object.defineProperty(ControlIHave.prototype, \"_topicID\", {\n                get: $util.oneOfGetter($oneOfFields = [\"topicID\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n    \n            /**\n             * Encodes the specified ControlIHave message. Does not implicitly {@link RPC.ControlIHave.verify|verify} messages.\n             * @function encode\n             * @memberof RPC.ControlIHave\n             * @static\n             * @param {RPC.IControlIHave} m ControlIHave message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ControlIHave.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.topicID != null && Object.hasOwnProperty.call(m, \"topicID\"))\n                    w.uint32(10).string(m.topicID);\n                if (m.messageIDs != null && m.messageIDs.length) {\n                    for (var i = 0; i < m.messageIDs.length; ++i)\n                        w.uint32(18).bytes(m.messageIDs[i]);\n                }\n                return w;\n            };\n    \n            /**\n             * Decodes a ControlIHave message from the specified reader or buffer.\n             * @function decode\n             * @memberof RPC.ControlIHave\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {RPC.ControlIHave} ControlIHave\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ControlIHave.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC.ControlIHave();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.topicID = r.string();\n                        break;\n                    case 2:\n                        if (!(m.messageIDs && m.messageIDs.length))\n                            m.messageIDs = [];\n                        m.messageIDs.push(r.bytes());\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n    \n            /**\n             * Creates a ControlIHave message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof RPC.ControlIHave\n             * @static\n             * @param {Object.<string,*>} d Plain object\n             * @returns {RPC.ControlIHave} ControlIHave\n             */\n            ControlIHave.fromObject = function fromObject(d) {\n                if (d instanceof $root.RPC.ControlIHave)\n                    return d;\n                var m = new $root.RPC.ControlIHave();\n                if (d.topicID != null) {\n                    m.topicID = String(d.topicID);\n                }\n                if (d.messageIDs) {\n                    if (!Array.isArray(d.messageIDs))\n                        throw TypeError(\".RPC.ControlIHave.messageIDs: array expected\");\n                    m.messageIDs = [];\n                    for (var i = 0; i < d.messageIDs.length; ++i) {\n                        if (typeof d.messageIDs[i] === \"string\")\n                            $util.base64.decode(d.messageIDs[i], m.messageIDs[i] = $util.newBuffer($util.base64.length(d.messageIDs[i])), 0);\n                        else if (d.messageIDs[i].length)\n                            m.messageIDs[i] = d.messageIDs[i];\n                    }\n                }\n                return m;\n            };\n    \n            /**\n             * Creates a plain object from a ControlIHave message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof RPC.ControlIHave\n             * @static\n             * @param {RPC.ControlIHave} m ControlIHave\n             * @param {$protobuf.IConversionOptions} [o] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ControlIHave.toObject = function toObject(m, o) {\n                if (!o)\n                    o = {};\n                var d = {};\n                if (o.arrays || o.defaults) {\n                    d.messageIDs = [];\n                }\n                if (m.topicID != null && m.hasOwnProperty(\"topicID\")) {\n                    d.topicID = m.topicID;\n                    if (o.oneofs)\n                        d._topicID = \"topicID\";\n                }\n                if (m.messageIDs && m.messageIDs.length) {\n                    d.messageIDs = [];\n                    for (var j = 0; j < m.messageIDs.length; ++j) {\n                        d.messageIDs[j] = o.bytes === String ? $util.base64.encode(m.messageIDs[j], 0, m.messageIDs[j].length) : o.bytes === Array ? Array.prototype.slice.call(m.messageIDs[j]) : m.messageIDs[j];\n                    }\n                }\n                return d;\n            };\n    \n            /**\n             * Converts this ControlIHave to JSON.\n             * @function toJSON\n             * @memberof RPC.ControlIHave\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ControlIHave.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n    \n            return ControlIHave;\n        })();\n    \n        RPC.ControlIWant = (function() {\n    \n            /**\n             * Properties of a ControlIWant.\n             * @memberof RPC\n             * @interface IControlIWant\n             * @property {Array.<Uint8Array>|null} [messageIDs] ControlIWant messageIDs\n             */\n    \n            /**\n             * Constructs a new ControlIWant.\n             * @memberof RPC\n             * @classdesc Represents a ControlIWant.\n             * @implements IControlIWant\n             * @constructor\n             * @param {RPC.IControlIWant=} [p] Properties to set\n             */\n            function ControlIWant(p) {\n                this.messageIDs = [];\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n    \n            /**\n             * ControlIWant messageIDs.\n             * @member {Array.<Uint8Array>} messageIDs\n             * @memberof RPC.ControlIWant\n             * @instance\n             */\n            ControlIWant.prototype.messageIDs = $util.emptyArray;\n    \n            /**\n             * Encodes the specified ControlIWant message. Does not implicitly {@link RPC.ControlIWant.verify|verify} messages.\n             * @function encode\n             * @memberof RPC.ControlIWant\n             * @static\n             * @param {RPC.IControlIWant} m ControlIWant message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ControlIWant.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.messageIDs != null && m.messageIDs.length) {\n                    for (var i = 0; i < m.messageIDs.length; ++i)\n                        w.uint32(10).bytes(m.messageIDs[i]);\n                }\n                return w;\n            };\n    \n            /**\n             * Decodes a ControlIWant message from the specified reader or buffer.\n             * @function decode\n             * @memberof RPC.ControlIWant\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {RPC.ControlIWant} ControlIWant\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ControlIWant.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC.ControlIWant();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        if (!(m.messageIDs && m.messageIDs.length))\n                            m.messageIDs = [];\n                        m.messageIDs.push(r.bytes());\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n    \n            /**\n             * Creates a ControlIWant message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof RPC.ControlIWant\n             * @static\n             * @param {Object.<string,*>} d Plain object\n             * @returns {RPC.ControlIWant} ControlIWant\n             */\n            ControlIWant.fromObject = function fromObject(d) {\n                if (d instanceof $root.RPC.ControlIWant)\n                    return d;\n                var m = new $root.RPC.ControlIWant();\n                if (d.messageIDs) {\n                    if (!Array.isArray(d.messageIDs))\n                        throw TypeError(\".RPC.ControlIWant.messageIDs: array expected\");\n                    m.messageIDs = [];\n                    for (var i = 0; i < d.messageIDs.length; ++i) {\n                        if (typeof d.messageIDs[i] === \"string\")\n                            $util.base64.decode(d.messageIDs[i], m.messageIDs[i] = $util.newBuffer($util.base64.length(d.messageIDs[i])), 0);\n                        else if (d.messageIDs[i].length)\n                            m.messageIDs[i] = d.messageIDs[i];\n                    }\n                }\n                return m;\n            };\n    \n            /**\n             * Creates a plain object from a ControlIWant message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof RPC.ControlIWant\n             * @static\n             * @param {RPC.ControlIWant} m ControlIWant\n             * @param {$protobuf.IConversionOptions} [o] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ControlIWant.toObject = function toObject(m, o) {\n                if (!o)\n                    o = {};\n                var d = {};\n                if (o.arrays || o.defaults) {\n                    d.messageIDs = [];\n                }\n                if (m.messageIDs && m.messageIDs.length) {\n                    d.messageIDs = [];\n                    for (var j = 0; j < m.messageIDs.length; ++j) {\n                        d.messageIDs[j] = o.bytes === String ? $util.base64.encode(m.messageIDs[j], 0, m.messageIDs[j].length) : o.bytes === Array ? Array.prototype.slice.call(m.messageIDs[j]) : m.messageIDs[j];\n                    }\n                }\n                return d;\n            };\n    \n            /**\n             * Converts this ControlIWant to JSON.\n             * @function toJSON\n             * @memberof RPC.ControlIWant\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ControlIWant.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n    \n            return ControlIWant;\n        })();\n    \n        RPC.ControlGraft = (function() {\n    \n            /**\n             * Properties of a ControlGraft.\n             * @memberof RPC\n             * @interface IControlGraft\n             * @property {string|null} [topicID] ControlGraft topicID\n             */\n    \n            /**\n             * Constructs a new ControlGraft.\n             * @memberof RPC\n             * @classdesc Represents a ControlGraft.\n             * @implements IControlGraft\n             * @constructor\n             * @param {RPC.IControlGraft=} [p] Properties to set\n             */\n            function ControlGraft(p) {\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n    \n            /**\n             * ControlGraft topicID.\n             * @member {string|null|undefined} topicID\n             * @memberof RPC.ControlGraft\n             * @instance\n             */\n            ControlGraft.prototype.topicID = null;\n    \n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n    \n            /**\n             * ControlGraft _topicID.\n             * @member {\"topicID\"|undefined} _topicID\n             * @memberof RPC.ControlGraft\n             * @instance\n             */\n            Object.defineProperty(ControlGraft.prototype, \"_topicID\", {\n                get: $util.oneOfGetter($oneOfFields = [\"topicID\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n    \n            /**\n             * Encodes the specified ControlGraft message. Does not implicitly {@link RPC.ControlGraft.verify|verify} messages.\n             * @function encode\n             * @memberof RPC.ControlGraft\n             * @static\n             * @param {RPC.IControlGraft} m ControlGraft message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ControlGraft.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.topicID != null && Object.hasOwnProperty.call(m, \"topicID\"))\n                    w.uint32(10).string(m.topicID);\n                return w;\n            };\n    \n            /**\n             * Decodes a ControlGraft message from the specified reader or buffer.\n             * @function decode\n             * @memberof RPC.ControlGraft\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {RPC.ControlGraft} ControlGraft\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ControlGraft.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC.ControlGraft();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.topicID = r.string();\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n    \n            /**\n             * Creates a ControlGraft message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof RPC.ControlGraft\n             * @static\n             * @param {Object.<string,*>} d Plain object\n             * @returns {RPC.ControlGraft} ControlGraft\n             */\n            ControlGraft.fromObject = function fromObject(d) {\n                if (d instanceof $root.RPC.ControlGraft)\n                    return d;\n                var m = new $root.RPC.ControlGraft();\n                if (d.topicID != null) {\n                    m.topicID = String(d.topicID);\n                }\n                return m;\n            };\n    \n            /**\n             * Creates a plain object from a ControlGraft message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof RPC.ControlGraft\n             * @static\n             * @param {RPC.ControlGraft} m ControlGraft\n             * @param {$protobuf.IConversionOptions} [o] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ControlGraft.toObject = function toObject(m, o) {\n                if (!o)\n                    o = {};\n                var d = {};\n                if (m.topicID != null && m.hasOwnProperty(\"topicID\")) {\n                    d.topicID = m.topicID;\n                    if (o.oneofs)\n                        d._topicID = \"topicID\";\n                }\n                return d;\n            };\n    \n            /**\n             * Converts this ControlGraft to JSON.\n             * @function toJSON\n             * @memberof RPC.ControlGraft\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ControlGraft.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n    \n            return ControlGraft;\n        })();\n    \n        RPC.ControlPrune = (function() {\n    \n            /**\n             * Properties of a ControlPrune.\n             * @memberof RPC\n             * @interface IControlPrune\n             * @property {string|null} [topicID] ControlPrune topicID\n             * @property {Array.<RPC.IPeerInfo>|null} [peers] ControlPrune peers\n             * @property {number|null} [backoff] ControlPrune backoff\n             */\n    \n            /**\n             * Constructs a new ControlPrune.\n             * @memberof RPC\n             * @classdesc Represents a ControlPrune.\n             * @implements IControlPrune\n             * @constructor\n             * @param {RPC.IControlPrune=} [p] Properties to set\n             */\n            function ControlPrune(p) {\n                this.peers = [];\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n    \n            /**\n             * ControlPrune topicID.\n             * @member {string|null|undefined} topicID\n             * @memberof RPC.ControlPrune\n             * @instance\n             */\n            ControlPrune.prototype.topicID = null;\n    \n            /**\n             * ControlPrune peers.\n             * @member {Array.<RPC.IPeerInfo>} peers\n             * @memberof RPC.ControlPrune\n             * @instance\n             */\n            ControlPrune.prototype.peers = $util.emptyArray;\n    \n            /**\n             * ControlPrune backoff.\n             * @member {number|null|undefined} backoff\n             * @memberof RPC.ControlPrune\n             * @instance\n             */\n            ControlPrune.prototype.backoff = null;\n    \n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n    \n            /**\n             * ControlPrune _topicID.\n             * @member {\"topicID\"|undefined} _topicID\n             * @memberof RPC.ControlPrune\n             * @instance\n             */\n            Object.defineProperty(ControlPrune.prototype, \"_topicID\", {\n                get: $util.oneOfGetter($oneOfFields = [\"topicID\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n    \n            /**\n             * ControlPrune _backoff.\n             * @member {\"backoff\"|undefined} _backoff\n             * @memberof RPC.ControlPrune\n             * @instance\n             */\n            Object.defineProperty(ControlPrune.prototype, \"_backoff\", {\n                get: $util.oneOfGetter($oneOfFields = [\"backoff\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n    \n            /**\n             * Encodes the specified ControlPrune message. Does not implicitly {@link RPC.ControlPrune.verify|verify} messages.\n             * @function encode\n             * @memberof RPC.ControlPrune\n             * @static\n             * @param {RPC.IControlPrune} m ControlPrune message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ControlPrune.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.topicID != null && Object.hasOwnProperty.call(m, \"topicID\"))\n                    w.uint32(10).string(m.topicID);\n                if (m.peers != null && m.peers.length) {\n                    for (var i = 0; i < m.peers.length; ++i)\n                        $root.RPC.PeerInfo.encode(m.peers[i], w.uint32(18).fork()).ldelim();\n                }\n                if (m.backoff != null && Object.hasOwnProperty.call(m, \"backoff\"))\n                    w.uint32(24).uint64(m.backoff);\n                return w;\n            };\n    \n            /**\n             * Decodes a ControlPrune message from the specified reader or buffer.\n             * @function decode\n             * @memberof RPC.ControlPrune\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {RPC.ControlPrune} ControlPrune\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ControlPrune.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC.ControlPrune();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.topicID = r.string();\n                        break;\n                    case 2:\n                        if (!(m.peers && m.peers.length))\n                            m.peers = [];\n                        m.peers.push($root.RPC.PeerInfo.decode(r, r.uint32()));\n                        break;\n                    case 3:\n                        m.backoff = r.uint64();\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n    \n            /**\n             * Creates a ControlPrune message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof RPC.ControlPrune\n             * @static\n             * @param {Object.<string,*>} d Plain object\n             * @returns {RPC.ControlPrune} ControlPrune\n             */\n            ControlPrune.fromObject = function fromObject(d) {\n                if (d instanceof $root.RPC.ControlPrune)\n                    return d;\n                var m = new $root.RPC.ControlPrune();\n                if (d.topicID != null) {\n                    m.topicID = String(d.topicID);\n                }\n                if (d.peers) {\n                    if (!Array.isArray(d.peers))\n                        throw TypeError(\".RPC.ControlPrune.peers: array expected\");\n                    m.peers = [];\n                    for (var i = 0; i < d.peers.length; ++i) {\n                        if (typeof d.peers[i] !== \"object\")\n                            throw TypeError(\".RPC.ControlPrune.peers: object expected\");\n                        m.peers[i] = $root.RPC.PeerInfo.fromObject(d.peers[i]);\n                    }\n                }\n                if (d.backoff != null) {\n                    if ($util.Long)\n                        (m.backoff = $util.Long.fromValue(d.backoff)).unsigned = true;\n                    else if (typeof d.backoff === \"string\")\n                        m.backoff = parseInt(d.backoff, 10);\n                    else if (typeof d.backoff === \"number\")\n                        m.backoff = d.backoff;\n                    else if (typeof d.backoff === \"object\")\n                        m.backoff = new $util.LongBits(d.backoff.low >>> 0, d.backoff.high >>> 0).toNumber(true);\n                }\n                return m;\n            };\n    \n            /**\n             * Creates a plain object from a ControlPrune message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof RPC.ControlPrune\n             * @static\n             * @param {RPC.ControlPrune} m ControlPrune\n             * @param {$protobuf.IConversionOptions} [o] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ControlPrune.toObject = function toObject(m, o) {\n                if (!o)\n                    o = {};\n                var d = {};\n                if (o.arrays || o.defaults) {\n                    d.peers = [];\n                }\n                if (m.topicID != null && m.hasOwnProperty(\"topicID\")) {\n                    d.topicID = m.topicID;\n                    if (o.oneofs)\n                        d._topicID = \"topicID\";\n                }\n                if (m.peers && m.peers.length) {\n                    d.peers = [];\n                    for (var j = 0; j < m.peers.length; ++j) {\n                        d.peers[j] = $root.RPC.PeerInfo.toObject(m.peers[j], o);\n                    }\n                }\n                if (m.backoff != null && m.hasOwnProperty(\"backoff\")) {\n                    if (typeof m.backoff === \"number\")\n                        d.backoff = o.longs === String ? String(m.backoff) : m.backoff;\n                    else\n                        d.backoff = o.longs === String ? $util.Long.prototype.toString.call(m.backoff) : o.longs === Number ? new $util.LongBits(m.backoff.low >>> 0, m.backoff.high >>> 0).toNumber(true) : m.backoff;\n                    if (o.oneofs)\n                        d._backoff = \"backoff\";\n                }\n                return d;\n            };\n    \n            /**\n             * Converts this ControlPrune to JSON.\n             * @function toJSON\n             * @memberof RPC.ControlPrune\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ControlPrune.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n    \n            return ControlPrune;\n        })();\n    \n        RPC.PeerInfo = (function() {\n    \n            /**\n             * Properties of a PeerInfo.\n             * @memberof RPC\n             * @interface IPeerInfo\n             * @property {Uint8Array|null} [peerID] PeerInfo peerID\n             * @property {Uint8Array|null} [signedPeerRecord] PeerInfo signedPeerRecord\n             */\n    \n            /**\n             * Constructs a new PeerInfo.\n             * @memberof RPC\n             * @classdesc Represents a PeerInfo.\n             * @implements IPeerInfo\n             * @constructor\n             * @param {RPC.IPeerInfo=} [p] Properties to set\n             */\n            function PeerInfo(p) {\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n    \n            /**\n             * PeerInfo peerID.\n             * @member {Uint8Array|null|undefined} peerID\n             * @memberof RPC.PeerInfo\n             * @instance\n             */\n            PeerInfo.prototype.peerID = null;\n    \n            /**\n             * PeerInfo signedPeerRecord.\n             * @member {Uint8Array|null|undefined} signedPeerRecord\n             * @memberof RPC.PeerInfo\n             * @instance\n             */\n            PeerInfo.prototype.signedPeerRecord = null;\n    \n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n    \n            /**\n             * PeerInfo _peerID.\n             * @member {\"peerID\"|undefined} _peerID\n             * @memberof RPC.PeerInfo\n             * @instance\n             */\n            Object.defineProperty(PeerInfo.prototype, \"_peerID\", {\n                get: $util.oneOfGetter($oneOfFields = [\"peerID\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n    \n            /**\n             * PeerInfo _signedPeerRecord.\n             * @member {\"signedPeerRecord\"|undefined} _signedPeerRecord\n             * @memberof RPC.PeerInfo\n             * @instance\n             */\n            Object.defineProperty(PeerInfo.prototype, \"_signedPeerRecord\", {\n                get: $util.oneOfGetter($oneOfFields = [\"signedPeerRecord\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n    \n            /**\n             * Encodes the specified PeerInfo message. Does not implicitly {@link RPC.PeerInfo.verify|verify} messages.\n             * @function encode\n             * @memberof RPC.PeerInfo\n             * @static\n             * @param {RPC.IPeerInfo} m PeerInfo message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            PeerInfo.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.peerID != null && Object.hasOwnProperty.call(m, \"peerID\"))\n                    w.uint32(10).bytes(m.peerID);\n                if (m.signedPeerRecord != null && Object.hasOwnProperty.call(m, \"signedPeerRecord\"))\n                    w.uint32(18).bytes(m.signedPeerRecord);\n                return w;\n            };\n    \n            /**\n             * Decodes a PeerInfo message from the specified reader or buffer.\n             * @function decode\n             * @memberof RPC.PeerInfo\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {RPC.PeerInfo} PeerInfo\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            PeerInfo.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC.PeerInfo();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.peerID = r.bytes();\n                        break;\n                    case 2:\n                        m.signedPeerRecord = r.bytes();\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n    \n            /**\n             * Creates a PeerInfo message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof RPC.PeerInfo\n             * @static\n             * @param {Object.<string,*>} d Plain object\n             * @returns {RPC.PeerInfo} PeerInfo\n             */\n            PeerInfo.fromObject = function fromObject(d) {\n                if (d instanceof $root.RPC.PeerInfo)\n                    return d;\n                var m = new $root.RPC.PeerInfo();\n                if (d.peerID != null) {\n                    if (typeof d.peerID === \"string\")\n                        $util.base64.decode(d.peerID, m.peerID = $util.newBuffer($util.base64.length(d.peerID)), 0);\n                    else if (d.peerID.length)\n                        m.peerID = d.peerID;\n                }\n                if (d.signedPeerRecord != null) {\n                    if (typeof d.signedPeerRecord === \"string\")\n                        $util.base64.decode(d.signedPeerRecord, m.signedPeerRecord = $util.newBuffer($util.base64.length(d.signedPeerRecord)), 0);\n                    else if (d.signedPeerRecord.length)\n                        m.signedPeerRecord = d.signedPeerRecord;\n                }\n                return m;\n            };\n    \n            /**\n             * Creates a plain object from a PeerInfo message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof RPC.PeerInfo\n             * @static\n             * @param {RPC.PeerInfo} m PeerInfo\n             * @param {$protobuf.IConversionOptions} [o] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            PeerInfo.toObject = function toObject(m, o) {\n                if (!o)\n                    o = {};\n                var d = {};\n                if (m.peerID != null && m.hasOwnProperty(\"peerID\")) {\n                    d.peerID = o.bytes === String ? $util.base64.encode(m.peerID, 0, m.peerID.length) : o.bytes === Array ? Array.prototype.slice.call(m.peerID) : m.peerID;\n                    if (o.oneofs)\n                        d._peerID = \"peerID\";\n                }\n                if (m.signedPeerRecord != null && m.hasOwnProperty(\"signedPeerRecord\")) {\n                    d.signedPeerRecord = o.bytes === String ? $util.base64.encode(m.signedPeerRecord, 0, m.signedPeerRecord.length) : o.bytes === Array ? Array.prototype.slice.call(m.signedPeerRecord) : m.signedPeerRecord;\n                    if (o.oneofs)\n                        d._signedPeerRecord = \"signedPeerRecord\";\n                }\n                return d;\n            };\n    \n            /**\n             * Converts this PeerInfo to JSON.\n             * @function toJSON\n             * @memberof RPC.PeerInfo\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            PeerInfo.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n    \n            return PeerInfo;\n        })();\n    \n        return RPC;\n    })();\n\n    return $root;\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}