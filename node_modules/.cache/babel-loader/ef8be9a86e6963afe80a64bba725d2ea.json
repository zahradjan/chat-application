{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _awaitAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _wrapAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nvar _asyncIterator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar parallelBatch = require('it-parallel-batch');\n\nvar options = require('./options.js');\n\nvar index = require('./dag-builder/index.js');\n\nvar treeBuilder = require('./tree-builder.js');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar parallelBatch__default = /*#__PURE__*/_interopDefaultLegacy(parallelBatch);\n\nfunction importer(_x, _x2) {\n  return _importer.apply(this, arguments);\n}\n\nfunction _importer() {\n  _importer = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(source, blockstore) {\n    var options$1,\n        opts,\n        dagBuilder,\n        treeBuilder$1,\n        candidates,\n        _iteratorAbruptCompletion,\n        _didIteratorError,\n        _iteratorError,\n        _iterator,\n        _step,\n        entry,\n        _args = arguments;\n\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options$1 = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n            opts = options(options$1);\n\n            if (typeof options$1.dagBuilder === 'function') {\n              dagBuilder = options$1.dagBuilder;\n            } else {\n              dagBuilder = index;\n            }\n\n            if (typeof options$1.treeBuilder === 'function') {\n              treeBuilder$1 = options$1.treeBuilder;\n            } else {\n              treeBuilder$1 = treeBuilder;\n            }\n\n            if (Symbol.asyncIterator in source || Symbol.iterator in source) {\n              candidates = source;\n            } else {\n              candidates = [source];\n            }\n\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context.prev = 7;\n            _iterator = _asyncIterator(treeBuilder$1(parallelBatch__default[\"default\"](dagBuilder(candidates, blockstore, opts), opts.fileImportConcurrency), blockstore, opts));\n\n          case 9:\n            _context.next = 11;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 11:\n            if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n              _context.next = 18;\n              break;\n            }\n\n            entry = _step.value;\n            _context.next = 15;\n            return {\n              cid: entry.cid,\n              path: entry.path,\n              unixfs: entry.unixfs,\n              size: entry.size\n            };\n\n          case 15:\n            _iteratorAbruptCompletion = false;\n            _context.next = 9;\n            break;\n\n          case 18:\n            _context.next = 24;\n            break;\n\n          case 20:\n            _context.prev = 20;\n            _context.t0 = _context[\"catch\"](7);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 24:\n            _context.prev = 24;\n            _context.prev = 25;\n\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context.next = 29;\n              break;\n            }\n\n            _context.next = 29;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 29:\n            _context.prev = 29;\n\n            if (!_didIteratorError) {\n              _context.next = 32;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 32:\n            return _context.finish(29);\n\n          case 33:\n            return _context.finish(24);\n\n          case 34:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[7, 20, 24, 34], [25,, 29, 33]]);\n  }));\n  return _importer.apply(this, arguments);\n}\n\nexports.importer = importer;","map":{"version":3,"names":["Object","defineProperty","exports","value","parallelBatch","require","options","index","treeBuilder","_interopDefaultLegacy","e","parallelBatch__default","importer","source","blockstore","options$1","opts","dagBuilder","treeBuilder$1","Symbol","asyncIterator","iterator","candidates","fileImportConcurrency","entry","cid","path","unixfs","size"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-unixfs-importer/cjs/src/index.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar parallelBatch = require('it-parallel-batch');\nvar options = require('./options.js');\nvar index = require('./dag-builder/index.js');\nvar treeBuilder = require('./tree-builder.js');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar parallelBatch__default = /*#__PURE__*/_interopDefaultLegacy(parallelBatch);\n\nasync function* importer(source, blockstore, options$1 = {}) {\n  const opts = options(options$1);\n  let dagBuilder;\n  if (typeof options$1.dagBuilder === 'function') {\n    dagBuilder = options$1.dagBuilder;\n  } else {\n    dagBuilder = index;\n  }\n  let treeBuilder$1;\n  if (typeof options$1.treeBuilder === 'function') {\n    treeBuilder$1 = options$1.treeBuilder;\n  } else {\n    treeBuilder$1 = treeBuilder;\n  }\n  let candidates;\n  if (Symbol.asyncIterator in source || Symbol.iterator in source) {\n    candidates = source;\n  } else {\n    candidates = [source];\n  }\n  for await (const entry of treeBuilder$1(parallelBatch__default[\"default\"](dagBuilder(candidates, blockstore, opts), opts.fileImportConcurrency), blockstore, opts)) {\n    yield {\n      cid: entry.cid,\n      path: entry.path,\n      unixfs: entry.unixfs,\n      size: entry.size\n    };\n  }\n}\n\nexports.importer = importer;\n"],"mappings":"AAAA;;;;;;;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,aAAa,GAAGC,OAAO,CAAC,mBAAD,CAA3B;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,cAAD,CAArB;;AACA,IAAIE,KAAK,GAAGF,OAAO,CAAC,wBAAD,CAAnB;;AACA,IAAIG,WAAW,GAAGH,OAAO,CAAC,mBAAD,CAAzB;;AAEA,SAASI,qBAAT,CAAgCC,CAAhC,EAAmC;EAAE,OAAOA,CAAC,IAAI,OAAOA,CAAP,KAAa,QAAlB,IAA8B,aAAaA,CAA3C,GAA+CA,CAA/C,GAAmD;IAAE,WAAWA;EAAb,CAA1D;AAA6E;;AAElH,IAAIC,sBAAsB,GAAG,aAAaF,qBAAqB,CAACL,aAAD,CAA/D;;SAEgBQ,Q;;;;;2EAAhB,iBAAyBC,MAAzB,EAAiCC,UAAjC;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;;IAAA;MAAA;QAAA;UAAA;YAA6CC,SAA7C,2DAAyD,EAAzD;YACQC,IADR,GACeV,OAAO,CAACS,SAAD,CADtB;;YAGE,IAAI,OAAOA,SAAS,CAACE,UAAjB,KAAgC,UAApC,EAAgD;cAC9CA,UAAU,GAAGF,SAAS,CAACE,UAAvB;YACD,CAFD,MAEO;cACLA,UAAU,GAAGV,KAAb;YACD;;YAED,IAAI,OAAOQ,SAAS,CAACP,WAAjB,KAAiC,UAArC,EAAiD;cAC/CU,aAAa,GAAGH,SAAS,CAACP,WAA1B;YACD,CAFD,MAEO;cACLU,aAAa,GAAGV,WAAhB;YACD;;YAED,IAAIW,MAAM,CAACC,aAAP,IAAwBP,MAAxB,IAAkCM,MAAM,CAACE,QAAP,IAAmBR,MAAzD,EAAiE;cAC/DS,UAAU,GAAGT,MAAb;YACD,CAFD,MAEO;cACLS,UAAU,GAAG,CAACT,MAAD,CAAb;YACD;;YAnBH;YAAA;YAAA;YAAA,2BAoB4BK,aAAa,CAACP,sBAAsB,CAAC,SAAD,CAAtB,CAAkCM,UAAU,CAACK,UAAD,EAAaR,UAAb,EAAyBE,IAAzB,CAA5C,EAA4EA,IAAI,CAACO,qBAAjF,CAAD,EAA0GT,UAA1G,EAAsHE,IAAtH,CApBzC;;UAAA;YAAA;YAAA;;UAAA;YAAA;cAAA;cAAA;YAAA;;YAoBmBQ,KApBnB;YAAA;YAqBI,OAAM;cACJC,GAAG,EAAED,KAAK,CAACC,GADP;cAEJC,IAAI,EAAEF,KAAK,CAACE,IAFR;cAGJC,MAAM,EAAEH,KAAK,CAACG,MAHV;cAIJC,IAAI,EAAEJ,KAAK,CAACI;YAJR,CAAN;;UArBJ;YAAA;YAAA;YAAA;;UAAA;YAAA;YAAA;;UAAA;YAAA;YAAA;YAAA;YAAA;;UAAA;YAAA;YAAA;;YAAA;cAAA;cAAA;YAAA;;YAAA;YAAA;;UAAA;YAAA;;YAAA;cAAA;cAAA;YAAA;;YAAA;;UAAA;YAAA;;UAAA;YAAA;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AA8BA1B,OAAO,CAACU,QAAR,GAAmBA,QAAnB"},"metadata":{},"sourceType":"script"}