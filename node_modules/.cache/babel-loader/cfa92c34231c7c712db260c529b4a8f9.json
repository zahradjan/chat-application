{"ast":null,"code":"import { makeAutoObservable, runInAction, toJS } from \"mobx\";\nimport { ChatRoom } from \"../models/Room.js\"; // var util = require(\"util\");\n\nexport class RoomStore {\n  //TODO:load rooms from db\n  constructor(rootStore) {\n    this.rootStore = rootStore;\n    this.rooms = [];\n    this.selectedRoom = undefined;\n    this.selectedReceiver = undefined;\n    makeAutoObservable(this);\n  }\n\n  async init() {\n    if (this.rootStore.dataStore.ipfsNode === undefined) throw Error(\"IPFS Node not defined!\");\n    if (this.rootStore.dataStore.orbitDb === undefined) throw Error(\"OrbitDb not defined!\");\n    await this.loadRoomsDb();\n    await this.setRoomsFromDb();\n  }\n\n  async createRoom(roomName) {\n    if (this.rootStore.dataStore.ipfsNode === undefined) throw Error(\"IPFS Node not defined!\");\n    if (this.rootStore.dataStore.orbitDb === undefined) throw Error(\"OrbitDb not defined!\");\n    console.log(roomName);\n    const chatRoom = new ChatRoom(this.rootStore, roomName);\n    this.rooms.push(chatRoom);\n    await this.roomsDb.add(roomName);\n    console.log(chatRoom);\n    console.log(toJS(this.rooms)); // const roomJSON = util.inspect(chatRoom);\n    // console.log(roomJSON);\n\n    return chatRoom;\n  }\n\n  getRoom(roomName) {\n    return this.rooms.find(room => roomName === room.roomName);\n  }\n\n  getRoomByUser(chatUser) {\n    return this.rooms.find(room => room.chatRoomUsers.includes(chatUser));\n  }\n\n  async loadRoomsDb() {\n    this.roomsDb = await this.rootStore.dataStore.orbitDb.feed(\"rooms\");\n    await this.roomsDb.load();\n  }\n\n  async setRoomsFromDb() {\n    const all = await toJS(this.roomsDb.all);\n    runInAction(() => {\n      all.map(item => {\n        const roomName = item.payload.value;\n        console.log(item.payload.value);\n        const room = new ChatRoom(this.rootStore, roomName);\n        room.init();\n        return this.rooms.push(room);\n      });\n    });\n  }\n\n  setSelectedRoom(user) {\n    let room;\n    runInAction(async () => {\n      //generate room name\n      const roomName = \"testRoomName\" + Math.random() * 1000;\n      room = this.getRoomByUser(user.peerId);\n\n      if (!room) {\n        room = await this.createRoom(roomName); //connect to chat room\n\n        room.setRoomUser(user.peerId);\n        await room.init();\n        const message = {\n          roomName: roomName,\n          sender: this.rootStore.dataStore.getPeerId()\n        };\n        const stringifyMessage = JSON.stringify(message); // publish to users involved\n\n        this.rootStore.dataStore.ipfsNode.pubsub.publish(user, stringifyMessage);\n      }\n\n      this.selectedReceiver = user._username;\n      this.selectedRoom = room;\n    });\n  }\n\n  isChatRoomReady(roomName) {\n    const room = this.getRoom(roomName);\n    return room;\n  }\n\n}","map":{"version":3,"names":["makeAutoObservable","runInAction","toJS","ChatRoom","RoomStore","constructor","rootStore","rooms","selectedRoom","undefined","selectedReceiver","init","dataStore","ipfsNode","Error","orbitDb","loadRoomsDb","setRoomsFromDb","createRoom","roomName","console","log","chatRoom","push","roomsDb","add","getRoom","find","room","getRoomByUser","chatUser","chatRoomUsers","includes","feed","load","all","map","item","payload","value","setSelectedRoom","user","Math","random","peerId","setRoomUser","message","sender","getPeerId","stringifyMessage","JSON","stringify","pubsub","publish","_username","isChatRoomReady"],"sources":["C:/Users/zajan/GitHub/chatApplication/src/data/store/RoomStore.js"],"sourcesContent":["import { makeAutoObservable, runInAction, toJS } from \"mobx\";\r\nimport { ChatRoom } from \"../models/Room.js\";\r\n// var util = require(\"util\");\r\n\r\nexport class RoomStore {\r\n  //TODO:load rooms from db\r\n  rooms;\r\n  selectedRoom;\r\n  selectedReceiver;\r\n  constructor(rootStore) {\r\n    this.rootStore = rootStore;\r\n    this.rooms = [];\r\n    this.selectedRoom = undefined;\r\n    this.selectedReceiver = undefined;\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  async init() {\r\n    if (this.rootStore.dataStore.ipfsNode === undefined) throw Error(\"IPFS Node not defined!\");\r\n    if (this.rootStore.dataStore.orbitDb === undefined) throw Error(\"OrbitDb not defined!\");\r\n    await this.loadRoomsDb();\r\n    await this.setRoomsFromDb();\r\n  }\r\n\r\n  async createRoom(roomName) {\r\n    if (this.rootStore.dataStore.ipfsNode === undefined) throw Error(\"IPFS Node not defined!\");\r\n    if (this.rootStore.dataStore.orbitDb === undefined) throw Error(\"OrbitDb not defined!\");\r\n    console.log(roomName);\r\n\r\n    const chatRoom = new ChatRoom(this.rootStore, roomName);\r\n\r\n    this.rooms.push(chatRoom);\r\n    await this.roomsDb.add(roomName);\r\n    console.log(chatRoom);\r\n    console.log(toJS(this.rooms));\r\n    // const roomJSON = util.inspect(chatRoom);\r\n    // console.log(roomJSON);\r\n    return chatRoom;\r\n  }\r\n  getRoom(roomName) {\r\n    return this.rooms.find((room) => roomName === room.roomName);\r\n  }\r\n  getRoomByUser(chatUser) {\r\n    return this.rooms.find((room) => room.chatRoomUsers.includes(chatUser));\r\n  }\r\n\r\n  async loadRoomsDb() {\r\n    this.roomsDb = await this.rootStore.dataStore.orbitDb.feed(\"rooms\");\r\n    await this.roomsDb.load();\r\n  }\r\n  async setRoomsFromDb() {\r\n    const all = await toJS(this.roomsDb.all);\r\n    runInAction(() => {\r\n      all.map((item) => {\r\n        const roomName = item.payload.value;\r\n        console.log(item.payload.value);\r\n        const room = new ChatRoom(this.rootStore, roomName);\r\n        room.init();\r\n        return this.rooms.push(room);\r\n      });\r\n    });\r\n  }\r\n  setSelectedRoom(user) {\r\n    let room;\r\n    runInAction(async () => {\r\n      //generate room name\r\n      const roomName = \"testRoomName\" + Math.random() * 1000;\r\n      room = this.getRoomByUser(user.peerId);\r\n\r\n      if (!room) {\r\n        room = await this.createRoom(roomName);\r\n        //connect to chat room\r\n        room.setRoomUser(user.peerId);\r\n        await room.init();\r\n        const message = { roomName: roomName, sender: this.rootStore.dataStore.getPeerId() };\r\n        const stringifyMessage = JSON.stringify(message);\r\n        // publish to users involved\r\n        this.rootStore.dataStore.ipfsNode.pubsub.publish(user, stringifyMessage);\r\n      }\r\n      this.selectedReceiver = user._username;\r\n      this.selectedRoom = room;\r\n    });\r\n  }\r\n\r\n  isChatRoomReady(roomName) {\r\n    const room = this.getRoom(roomName);\r\n    return room;\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}