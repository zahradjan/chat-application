{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _wrapAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nvar _awaitAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _asyncIterator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar _asyncGeneratorDelegate = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate.js\").default;\n\nvar errCode = require('err-code');\n\nvar _require = require('streaming-iterables'),\n    parallelMap = _require.parallelMap,\n    filter = _require.filter;\n\nvar _require2 = require('it-pipe'),\n    pipe = _require2.pipe;\n\nvar _require3 = require('./utils'),\n    cleanCid = _require3.cleanCid;\n\nvar withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nvar BLOCK_RM_CONCURRENCY = 8;\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\n\nmodule.exports = function (_ref) {\n  var repo = _ref.repo;\n\n  /**\n   * @type {import('ipfs-core-types/src/block').API[\"rm\"]}\n   */\n  function rm(_x) {\n    return _rm.apply(this, arguments);\n  }\n\n  function _rm() {\n    _rm = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(cids) {\n      var options,\n          release,\n          _args2 = arguments;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n\n              if (!Array.isArray(cids)) {\n                cids = [cids];\n              } // We need to take a write lock here to ensure that adding and removing\n              // blocks are exclusive operations\n\n\n              _context2.next = 4;\n              return _awaitAsyncGenerator(repo.gcLock.writeLock());\n\n            case 4:\n              release = _context2.sent;\n              _context2.prev = 5;\n              return _context2.delegateYield(_asyncGeneratorDelegate(_asyncIterator(pipe(cids, parallelMap(BLOCK_RM_CONCURRENCY, /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(cid) {\n                  var result, has;\n                  return _regeneratorRuntime().wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          cid = cleanCid(cid);\n                          /** @type {import('ipfs-core-types/src/block').RmResult} */\n\n                          result = {\n                            cid: cid\n                          };\n                          _context.prev = 2;\n                          _context.next = 5;\n                          return repo.blocks.has(cid);\n\n                        case 5:\n                          has = _context.sent;\n\n                          if (has) {\n                            _context.next = 8;\n                            break;\n                          }\n\n                          throw errCode(new Error('block not found'), 'ERR_BLOCK_NOT_FOUND');\n\n                        case 8:\n                          _context.next = 10;\n                          return repo.blocks.delete(cid);\n\n                        case 10:\n                          _context.next = 15;\n                          break;\n\n                        case 12:\n                          _context.prev = 12;\n                          _context.t0 = _context[\"catch\"](2);\n\n                          if (!options.force) {\n                            _context.t0.message = \"cannot remove \".concat(cid, \": \").concat(_context.t0.message);\n                            result.error = _context.t0;\n                          }\n\n                        case 15:\n                          return _context.abrupt(\"return\", result);\n\n                        case 16:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee, null, [[2, 12]]);\n                }));\n\n                return function (_x2) {\n                  return _ref2.apply(this, arguments);\n                };\n              }()), filter(function () {\n                return !options.quiet;\n              }))), _awaitAsyncGenerator), \"t0\", 7);\n\n            case 7:\n              _context2.prev = 7;\n              release();\n              return _context2.finish(7);\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[5,, 7, 10]]);\n    }));\n    return _rm.apply(this, arguments);\n  }\n\n  return withTimeoutOption(rm);\n};","map":{"version":3,"names":["errCode","require","parallelMap","filter","pipe","cleanCid","withTimeoutOption","BLOCK_RM_CONCURRENCY","module","exports","repo","rm","cids","options","Array","isArray","gcLock","writeLock","release","cid","result","blocks","has","Error","delete","force","message","error","quiet"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/block/rm.js"],"sourcesContent":["'use strict'\n\nconst errCode = require('err-code')\nconst { parallelMap, filter } = require('streaming-iterables')\nconst { pipe } = require('it-pipe')\nconst { cleanCid } = require('./utils')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\nconst BLOCK_RM_CONCURRENCY = 8\n\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nmodule.exports = ({ repo }) => {\n  /**\n   * @type {import('ipfs-core-types/src/block').API[\"rm\"]}\n   */\n  async function * rm (cids, options = {}) {\n    if (!Array.isArray(cids)) {\n      cids = [cids]\n    }\n\n    // We need to take a write lock here to ensure that adding and removing\n    // blocks are exclusive operations\n    const release = await repo.gcLock.writeLock()\n\n    try {\n      yield * pipe(\n        cids,\n        parallelMap(BLOCK_RM_CONCURRENCY, async cid => {\n          cid = cleanCid(cid)\n\n          /** @type {import('ipfs-core-types/src/block').RmResult} */\n          const result = { cid }\n\n          try {\n            const has = await repo.blocks.has(cid)\n\n            if (!has) {\n              throw errCode(new Error('block not found'), 'ERR_BLOCK_NOT_FOUND')\n            }\n\n            await repo.blocks.delete(cid)\n          } catch (err) {\n            if (!options.force) {\n              err.message = `cannot remove ${cid}: ${err.message}`\n              result.error = err\n            }\n          }\n\n          return result\n        }),\n        filter(() => !options.quiet)\n      )\n    } finally {\n      release()\n    }\n  }\n\n  return withTimeoutOption(rm)\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;AAEA,IAAMA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AACA,eAAgCA,OAAO,CAAC,qBAAD,CAAvC;AAAA,IAAQC,WAAR,YAAQA,WAAR;AAAA,IAAqBC,MAArB,YAAqBA,MAArB;;AACA,gBAAiBF,OAAO,CAAC,SAAD,CAAxB;AAAA,IAAQG,IAAR,aAAQA,IAAR;;AACA,gBAAqBH,OAAO,CAAC,SAAD,CAA5B;AAAA,IAAQI,QAAR,aAAQA,QAAR;;AACA,IAAMC,iBAAiB,GAAGL,OAAO,CAAC,yCAAD,CAAjC;;AAEA,IAAMM,oBAAoB,GAAG,CAA7B;AAEA;AACA;AACA;AACA;;AACAC,MAAM,CAACC,OAAP,GAAiB,gBAAc;EAAA,IAAXC,IAAW,QAAXA,IAAW;;EAC7B;AACF;AACA;EAH+B,SAIZC,EAJY;IAAA;EAAA;;EAAA;IAAA,mEAI7B,kBAAqBC,IAArB;MAAA;MAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAA2BC,OAA3B,8DAAqC,EAArC;;cACE,IAAI,CAACC,KAAK,CAACC,OAAN,CAAcH,IAAd,CAAL,EAA0B;gBACxBA,IAAI,GAAG,CAACA,IAAD,CAAP;cACD,CAHH,CAKE;cACA;;;cANF;cAAA,4BAOwBF,IAAI,CAACM,MAAL,CAAYC,SAAZ,EAPxB;;YAAA;cAOQC,OAPR;cAAA;cAUI,sEAAQd,IAAI,CACVQ,IADU,EAEVV,WAAW,CAACK,oBAAD;gBAAA,uEAAuB,iBAAMY,GAAN;kBAAA;kBAAA;oBAAA;sBAAA;wBAAA;0BAChCA,GAAG,GAAGd,QAAQ,CAACc,GAAD,CAAd;0BAEA;;0BACMC,MAJ0B,GAIjB;4BAAED,GAAG,EAAHA;0BAAF,CAJiB;0BAAA;0BAAA;0BAAA,OAOZT,IAAI,CAACW,MAAL,CAAYC,GAAZ,CAAgBH,GAAhB,CAPY;;wBAAA;0BAOxBG,GAPwB;;0BAAA,IASzBA,GATyB;4BAAA;4BAAA;0BAAA;;0BAAA,MAUtBtB,OAAO,CAAC,IAAIuB,KAAJ,CAAU,iBAAV,CAAD,EAA+B,qBAA/B,CAVe;;wBAAA;0BAAA;0BAAA,OAaxBb,IAAI,CAACW,MAAL,CAAYG,MAAZ,CAAmBL,GAAnB,CAbwB;;wBAAA;0BAAA;0BAAA;;wBAAA;0BAAA;0BAAA;;0BAe9B,IAAI,CAACN,OAAO,CAACY,KAAb,EAAoB;4BAClB,YAAIC,OAAJ,2BAA+BP,GAA/B,eAAuC,YAAIO,OAA3C;4BACAN,MAAM,CAACO,KAAP;0BACD;;wBAlB6B;0BAAA,iCAqBzBP,MArByB;;wBAAA;wBAAA;0BAAA;sBAAA;oBAAA;kBAAA;gBAAA,CAAvB;;gBAAA;kBAAA;gBAAA;cAAA,IAFD,EAyBVjB,MAAM,CAAC;gBAAA,OAAM,CAACU,OAAO,CAACe,KAAf;cAAA,CAAD,CAzBI,CAAZ;;YAVJ;cAAA;cAsCIV,OAAO;cAtCX;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAJ6B;IAAA;EAAA;;EA8C7B,OAAOZ,iBAAiB,CAACK,EAAD,CAAxB;AACD,CA/CD"},"metadata":{},"sourceType":"script"}