{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _objectSpread = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {FilesAPI[\"flush\"]}\n   */\n  function flush(_x) {\n    return _flush.apply(this, arguments);\n  }\n\n  function _flush() {\n    _flush = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(path) {\n      var options,\n          res,\n          data,\n          _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n\n              if (!(!path || typeof path !== 'string')) {\n                _context.next = 3;\n                break;\n              }\n\n              throw new Error('ipfs.files.flush requires a path');\n\n            case 3:\n              _context.next = 5;\n              return api.post('files/flush', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: path\n                }, options)),\n                headers: options.headers\n              });\n\n            case 5:\n              res = _context.sent;\n              _context.next = 8;\n              return res.json();\n\n            case 8:\n              data = _context.sent;\n              return _context.abrupt(\"return\", CID.parse(data.Cid));\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _flush.apply(this, arguments);\n  }\n\n  return flush;\n});","map":{"version":3,"names":["require","CID","configure","toUrlSearchParams","module","exports","api","flush","path","options","Error","post","signal","searchParams","arg","headers","res","json","data","parse","Cid"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-http-client/src/files/flush.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {FilesAPI[\"flush\"]}\n   */\n  async function flush (path, options = {}) {\n    if (!path || typeof path !== 'string') {\n      throw new Error('ipfs.files.flush requires a path')\n    }\n\n    const res = await api.post('files/flush', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return CID.parse(data.Cid)\n  }\n  return flush\n})\n"],"mappings":"AAAA;;;;;;;;AAEA,eAAgBA,OAAO,CAAC,kBAAD,CAAvB;AAAA,IAAQC,GAAR,YAAQA,GAAR;;AACA,IAAMC,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAI,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAAC,UAAAI,GAAG,EAAI;EAChC;AACF;AACA;EAHkC,SAIjBC,KAJiB;IAAA;EAAA;;EAAA;IAAA,oEAIhC,iBAAsBC,IAAtB;MAAA;MAAA;MAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAA4BC,OAA5B,2DAAsC,EAAtC;;cAAA,MACM,CAACD,IAAD,IAAS,OAAOA,IAAP,KAAgB,QAD/B;gBAAA;gBAAA;cAAA;;cAAA,MAEU,IAAIE,KAAJ,CAAU,kCAAV,CAFV;;YAAA;cAAA;cAAA,OAKoBJ,GAAG,CAACK,IAAJ,CAAS,aAAT,EAAwB;gBACxCC,MAAM,EAAEH,OAAO,CAACG,MADwB;gBAExCC,YAAY,EAAEV,iBAAiB;kBAC7BW,GAAG,EAAEN;gBADwB,GAE1BC,OAF0B,EAFS;gBAMxCM,OAAO,EAAEN,OAAO,CAACM;cANuB,CAAxB,CALpB;;YAAA;cAKQC,GALR;cAAA;cAAA,OAaqBA,GAAG,CAACC,IAAJ,EAbrB;;YAAA;cAaQC,IAbR;cAAA,iCAeSjB,GAAG,CAACkB,KAAJ,CAAUD,IAAI,CAACE,GAAf,CAfT;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAJgC;IAAA;EAAA;;EAqBhC,OAAOb,KAAP;AACD,CAtByB,CAA1B"},"metadata":{},"sourceType":"script"}