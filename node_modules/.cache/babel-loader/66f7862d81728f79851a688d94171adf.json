{"ast":null,"code":"'use strict';\n\nconst {\n  EventEmitter\n} = require('events');\n\nconst Stat = require('./stat');\n/**\n * @typedef {import('multiformats').CID} CID\n * @typedef {import('peer-id')} PeerId\n */\n\n/**\n * @typedef {[number, number, number]} AverageIntervals\n */\n\n\nconst defaultOptions = {\n  enabled: false,\n  computeThrottleTimeout: 1000,\n  computeThrottleMaxQueueSize: 1000,\n  movingAverageIntervals:\n  /** @type {AverageIntervals} */\n  [60 * 1000, // 1 minute\n  5 * 60 * 1000, // 5 minutes\n  15 * 60 * 1000 // 15 minutes\n  ]\n};\n\nclass Stats extends EventEmitter {\n  /**\n   * @param {string[]} [initialCounters]\n   * @param {Object} _options\n   * @param {boolean} _options.enabled\n   * @param {number} _options.computeThrottleTimeout\n   * @param {number} _options.computeThrottleMaxQueueSize\n   */\n  constructor() {\n    let initialCounters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n    let _options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;\n\n    super();\n    const options = Object.assign({}, defaultOptions, _options);\n\n    if (typeof options.computeThrottleTimeout !== 'number') {\n      throw new Error('need computeThrottleTimeout');\n    }\n\n    if (typeof options.computeThrottleMaxQueueSize !== 'number') {\n      throw new Error('need computeThrottleMaxQueueSize');\n    }\n\n    this._initialCounters = initialCounters;\n    this._options = options;\n    this._enabled = this._options.enabled;\n    this._global = new Stat(initialCounters, options);\n\n    this._global.on('update', stats => this.emit('update', stats));\n    /** @type {Map<string, Stat>} */\n\n\n    this._peers = new Map();\n  }\n\n  enable() {\n    this._enabled = true;\n    this._options.enabled = true;\n\n    this._global.enable();\n  }\n\n  disable() {\n    this._enabled = false;\n    this._options.enabled = false;\n\n    this._global.disable();\n  }\n\n  stop() {\n    this._enabled = false;\n\n    this._global.stop();\n\n    for (const peerStat of this._peers) {\n      peerStat[1].stop();\n    }\n  }\n\n  get snapshot() {\n    return this._global.snapshot;\n  }\n\n  get movingAverages() {\n    return this._global.movingAverages;\n  }\n  /**\n   * @param {PeerId|string} peerId\n   * @returns {Stat|undefined}\n   */\n\n\n  forPeer(peerId) {\n    const peerIdStr = typeof peerId !== 'string' && peerId.toB58String ? peerId.toB58String() : `${peerId}`;\n    return this._peers.get(peerIdStr);\n  }\n  /**\n   *\n   * @param {string|null} peer\n   * @param {string} counter\n   * @param {number} inc\n   */\n\n\n  push(peer, counter, inc) {\n    if (this._enabled) {\n      this._global.push(counter, inc);\n\n      if (peer) {\n        let peerStats = this._peers.get(peer);\n\n        if (!peerStats) {\n          peerStats = new Stat(this._initialCounters, this._options);\n\n          this._peers.set(peer, peerStats);\n        }\n\n        peerStats.push(counter, inc);\n      }\n    }\n  }\n  /**\n   * @param {PeerId} peer\n   */\n\n\n  disconnected(peer) {\n    const peerId = peer.toB58String();\n\n    const peerStats = this._peers.get(peerId);\n\n    if (peerStats) {\n      peerStats.stop();\n\n      this._peers.delete(peerId);\n    }\n  }\n\n}\n\nmodule.exports = Stats;","map":{"version":3,"names":["EventEmitter","require","Stat","defaultOptions","enabled","computeThrottleTimeout","computeThrottleMaxQueueSize","movingAverageIntervals","Stats","constructor","initialCounters","_options","options","Object","assign","Error","_initialCounters","_enabled","_global","on","stats","emit","_peers","Map","enable","disable","stop","peerStat","snapshot","movingAverages","forPeer","peerId","peerIdStr","toB58String","get","push","peer","counter","inc","peerStats","set","disconnected","delete","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-bitswap/src/stats/index.js"],"sourcesContent":["'use strict'\n\nconst { EventEmitter } = require('events')\nconst Stat = require('./stat')\n\n/**\n * @typedef {import('multiformats').CID} CID\n * @typedef {import('peer-id')} PeerId\n */\n\n/**\n * @typedef {[number, number, number]} AverageIntervals\n */\nconst defaultOptions = {\n  enabled: false,\n  computeThrottleTimeout: 1000,\n  computeThrottleMaxQueueSize: 1000,\n  movingAverageIntervals: /** @type {AverageIntervals} */ ([\n    60 * 1000, // 1 minute\n    5 * 60 * 1000, // 5 minutes\n    15 * 60 * 1000 // 15 minutes\n  ])\n}\n\nclass Stats extends EventEmitter {\n  /**\n   * @param {string[]} [initialCounters]\n   * @param {Object} _options\n   * @param {boolean} _options.enabled\n   * @param {number} _options.computeThrottleTimeout\n   * @param {number} _options.computeThrottleMaxQueueSize\n   */\n  constructor (initialCounters = [], _options = defaultOptions) {\n    super()\n\n    const options = Object.assign({}, defaultOptions, _options)\n\n    if (typeof options.computeThrottleTimeout !== 'number') {\n      throw new Error('need computeThrottleTimeout')\n    }\n\n    if (typeof options.computeThrottleMaxQueueSize !== 'number') {\n      throw new Error('need computeThrottleMaxQueueSize')\n    }\n\n    this._initialCounters = initialCounters\n    this._options = options\n    this._enabled = this._options.enabled\n\n    this._global = new Stat(initialCounters, options)\n    this._global.on('update', (stats) => this.emit('update', stats))\n\n    /** @type {Map<string, Stat>} */\n    this._peers = new Map()\n  }\n\n  enable () {\n    this._enabled = true\n    this._options.enabled = true\n    this._global.enable()\n  }\n\n  disable () {\n    this._enabled = false\n    this._options.enabled = false\n    this._global.disable()\n  }\n\n  stop () {\n    this._enabled = false\n    this._global.stop()\n    for (const peerStat of this._peers) {\n      peerStat[1].stop()\n    }\n  }\n\n  get snapshot () {\n    return this._global.snapshot\n  }\n\n  get movingAverages () {\n    return this._global.movingAverages\n  }\n\n  /**\n   * @param {PeerId|string} peerId\n   * @returns {Stat|undefined}\n   */\n  forPeer (peerId) {\n    const peerIdStr = (typeof peerId !== 'string' && peerId.toB58String)\n      ? peerId.toB58String()\n      : `${peerId}`\n\n    return this._peers.get(peerIdStr)\n  }\n\n  /**\n   *\n   * @param {string|null} peer\n   * @param {string} counter\n   * @param {number} inc\n   */\n  push (peer, counter, inc) {\n    if (this._enabled) {\n      this._global.push(counter, inc)\n\n      if (peer) {\n        let peerStats = this._peers.get(peer)\n        if (!peerStats) {\n          peerStats = new Stat(this._initialCounters, this._options)\n          this._peers.set(peer, peerStats)\n        }\n\n        peerStats.push(counter, inc)\n      }\n    }\n  }\n\n  /**\n   * @param {PeerId} peer\n   */\n  disconnected (peer) {\n    const peerId = peer.toB58String()\n    const peerStats = this._peers.get(peerId)\n    if (peerStats) {\n      peerStats.stop()\n      this._peers.delete(peerId)\n    }\n  }\n}\n\nmodule.exports = Stats\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA;AAAF,IAAmBC,OAAO,CAAC,QAAD,CAAhC;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,QAAD,CAApB;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AACA,MAAME,cAAc,GAAG;EACrBC,OAAO,EAAE,KADY;EAErBC,sBAAsB,EAAE,IAFH;EAGrBC,2BAA2B,EAAE,IAHR;EAIrBC,sBAAsB;EAAE;EAAiC,CACvD,KAAK,IADkD,EAC5C;EACX,IAAI,EAAJ,GAAS,IAF8C,EAExC;EACf,KAAK,EAAL,GAAU,IAH6C,CAGxC;EAHwC;AAJpC,CAAvB;;AAWA,MAAMC,KAAN,SAAoBR,YAApB,CAAiC;EAC/B;AACF;AACA;AACA;AACA;AACA;AACA;EACES,WAAW,GAAmD;IAAA,IAAjDC,eAAiD,uEAA/B,EAA+B;;IAAA,IAA3BC,QAA2B,uEAAhBR,cAAgB;;IAC5D;IAEA,MAAMS,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBX,cAAlB,EAAkCQ,QAAlC,CAAhB;;IAEA,IAAI,OAAOC,OAAO,CAACP,sBAAf,KAA0C,QAA9C,EAAwD;MACtD,MAAM,IAAIU,KAAJ,CAAU,6BAAV,CAAN;IACD;;IAED,IAAI,OAAOH,OAAO,CAACN,2BAAf,KAA+C,QAAnD,EAA6D;MAC3D,MAAM,IAAIS,KAAJ,CAAU,kCAAV,CAAN;IACD;;IAED,KAAKC,gBAAL,GAAwBN,eAAxB;IACA,KAAKC,QAAL,GAAgBC,OAAhB;IACA,KAAKK,QAAL,GAAgB,KAAKN,QAAL,CAAcP,OAA9B;IAEA,KAAKc,OAAL,GAAe,IAAIhB,IAAJ,CAASQ,eAAT,EAA0BE,OAA1B,CAAf;;IACA,KAAKM,OAAL,CAAaC,EAAb,CAAgB,QAAhB,EAA2BC,KAAD,IAAW,KAAKC,IAAL,CAAU,QAAV,EAAoBD,KAApB,CAArC;IAEA;;;IACA,KAAKE,MAAL,GAAc,IAAIC,GAAJ,EAAd;EACD;;EAEDC,MAAM,GAAI;IACR,KAAKP,QAAL,GAAgB,IAAhB;IACA,KAAKN,QAAL,CAAcP,OAAd,GAAwB,IAAxB;;IACA,KAAKc,OAAL,CAAaM,MAAb;EACD;;EAEDC,OAAO,GAAI;IACT,KAAKR,QAAL,GAAgB,KAAhB;IACA,KAAKN,QAAL,CAAcP,OAAd,GAAwB,KAAxB;;IACA,KAAKc,OAAL,CAAaO,OAAb;EACD;;EAEDC,IAAI,GAAI;IACN,KAAKT,QAAL,GAAgB,KAAhB;;IACA,KAAKC,OAAL,CAAaQ,IAAb;;IACA,KAAK,MAAMC,QAAX,IAAuB,KAAKL,MAA5B,EAAoC;MAClCK,QAAQ,CAAC,CAAD,CAAR,CAAYD,IAAZ;IACD;EACF;;EAEW,IAARE,QAAQ,GAAI;IACd,OAAO,KAAKV,OAAL,CAAaU,QAApB;EACD;;EAEiB,IAAdC,cAAc,GAAI;IACpB,OAAO,KAAKX,OAAL,CAAaW,cAApB;EACD;EAED;AACF;AACA;AACA;;;EACEC,OAAO,CAAEC,MAAF,EAAU;IACf,MAAMC,SAAS,GAAI,OAAOD,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,CAACE,WAAtC,GACdF,MAAM,CAACE,WAAP,EADc,GAEb,GAAEF,MAAO,EAFd;IAIA,OAAO,KAAKT,MAAL,CAAYY,GAAZ,CAAgBF,SAAhB,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEG,IAAI,CAAEC,IAAF,EAAQC,OAAR,EAAiBC,GAAjB,EAAsB;IACxB,IAAI,KAAKrB,QAAT,EAAmB;MACjB,KAAKC,OAAL,CAAaiB,IAAb,CAAkBE,OAAlB,EAA2BC,GAA3B;;MAEA,IAAIF,IAAJ,EAAU;QACR,IAAIG,SAAS,GAAG,KAAKjB,MAAL,CAAYY,GAAZ,CAAgBE,IAAhB,CAAhB;;QACA,IAAI,CAACG,SAAL,EAAgB;UACdA,SAAS,GAAG,IAAIrC,IAAJ,CAAS,KAAKc,gBAAd,EAAgC,KAAKL,QAArC,CAAZ;;UACA,KAAKW,MAAL,CAAYkB,GAAZ,CAAgBJ,IAAhB,EAAsBG,SAAtB;QACD;;QAEDA,SAAS,CAACJ,IAAV,CAAeE,OAAf,EAAwBC,GAAxB;MACD;IACF;EACF;EAED;AACF;AACA;;;EACEG,YAAY,CAAEL,IAAF,EAAQ;IAClB,MAAML,MAAM,GAAGK,IAAI,CAACH,WAAL,EAAf;;IACA,MAAMM,SAAS,GAAG,KAAKjB,MAAL,CAAYY,GAAZ,CAAgBH,MAAhB,CAAlB;;IACA,IAAIQ,SAAJ,EAAe;MACbA,SAAS,CAACb,IAAV;;MACA,KAAKJ,MAAL,CAAYoB,MAAZ,CAAmBX,MAAnB;IACD;EACF;;AAxG8B;;AA2GjCY,MAAM,CAACC,OAAP,GAAiBpC,KAAjB"},"metadata":{},"sourceType":"script"}