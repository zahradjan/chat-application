{"ast":null,"code":"'use strict';\n\nconst errcode = require('err-code');\n\nconst secp = require('noble-secp256k1');\n\nconst {\n  sha256\n} = require('multiformats/hashes/sha2');\n\nmodule.exports = () => {\n  const privateKeyLength = 32;\n\n  function generateKey() {\n    return secp.utils.randomPrivateKey();\n  }\n  /**\n   * Hash and sign message with private key\n   *\n   * @param {number | bigint | (string | Uint8Array)} key\n   * @param {Uint8Array} msg\n   */\n\n\n  async function hashAndSign(key, msg) {\n    const {\n      digest\n    } = await sha256.digest(msg);\n\n    try {\n      return await secp.sign(digest, key);\n    } catch (err) {\n      throw errcode(err, 'ERR_INVALID_INPUT');\n    }\n  }\n  /**\n   * Hash message and verify signature with public key\n   *\n   * @param {secp.Point | (string | Uint8Array)} key\n   * @param {(string | Uint8Array) | secp.Signature} sig\n   * @param {Uint8Array} msg\n   */\n\n\n  async function hashAndVerify(key, sig, msg) {\n    try {\n      const {\n        digest\n      } = await sha256.digest(msg);\n      return secp.verify(sig, digest, key);\n    } catch (err) {\n      throw errcode(err, 'ERR_INVALID_INPUT');\n    }\n  }\n\n  function compressPublicKey(key) {\n    const point = secp.Point.fromHex(key).toRawBytes(true);\n    return point;\n  }\n\n  function decompressPublicKey(key) {\n    const point = secp.Point.fromHex(key).toRawBytes(false);\n    return point;\n  }\n\n  function validatePrivateKey(key) {\n    try {\n      secp.getPublicKey(key, true);\n    } catch (err) {\n      throw errcode(err, 'ERR_INVALID_PRIVATE_KEY');\n    }\n  }\n\n  function validatePublicKey(key) {\n    try {\n      secp.Point.fromHex(key);\n    } catch (err) {\n      throw errcode(err, 'ERR_INVALID_PUBLIC_KEY');\n    }\n  }\n\n  function computePublicKey(privateKey) {\n    try {\n      return secp.getPublicKey(privateKey, true);\n    } catch (err) {\n      throw errcode(err, 'ERR_INVALID_PRIVATE_KEY');\n    }\n  }\n\n  return {\n    generateKey,\n    privateKeyLength,\n    hashAndSign,\n    hashAndVerify,\n    compressPublicKey,\n    decompressPublicKey,\n    validatePrivateKey,\n    validatePublicKey,\n    computePublicKey\n  };\n};","map":{"version":3,"names":["errcode","require","secp","sha256","module","exports","privateKeyLength","generateKey","utils","randomPrivateKey","hashAndSign","key","msg","digest","sign","err","hashAndVerify","sig","verify","compressPublicKey","point","Point","fromHex","toRawBytes","decompressPublicKey","validatePrivateKey","getPublicKey","validatePublicKey","computePublicKey","privateKey"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/peer-id/node_modules/libp2p-crypto/src/keys/secp256k1.js"],"sourcesContent":["'use strict'\n\nconst errcode = require('err-code')\nconst secp = require('noble-secp256k1')\nconst { sha256 } = require('multiformats/hashes/sha2')\n\nmodule.exports = () => {\n  const privateKeyLength = 32\n\n  function generateKey () {\n    return secp.utils.randomPrivateKey()\n  }\n\n  /**\n   * Hash and sign message with private key\n   *\n   * @param {number | bigint | (string | Uint8Array)} key\n   * @param {Uint8Array} msg\n   */\n  async function hashAndSign (key, msg) {\n    const { digest } = await sha256.digest(msg)\n    try {\n      return await secp.sign(digest, key)\n    } catch (err) {\n      throw errcode(err, 'ERR_INVALID_INPUT')\n    }\n  }\n\n  /**\n   * Hash message and verify signature with public key\n   *\n   * @param {secp.Point | (string | Uint8Array)} key\n   * @param {(string | Uint8Array) | secp.Signature} sig\n   * @param {Uint8Array} msg\n   */\n  async function hashAndVerify (key, sig, msg) {\n    try {\n      const { digest } = await sha256.digest(msg)\n      return secp.verify(sig, digest, key)\n    } catch (err) {\n      throw errcode(err, 'ERR_INVALID_INPUT')\n    }\n  }\n\n  function compressPublicKey (key) {\n    const point = secp.Point.fromHex(key).toRawBytes(true)\n    return point\n  }\n\n  function decompressPublicKey (key) {\n    const point = secp.Point.fromHex(key).toRawBytes(false)\n    return point\n  }\n\n  function validatePrivateKey (key) {\n    try {\n      secp.getPublicKey(key, true)\n    } catch (err) {\n      throw errcode(err, 'ERR_INVALID_PRIVATE_KEY')\n    }\n  }\n\n  function validatePublicKey (key) {\n    try {\n      secp.Point.fromHex(key)\n    } catch (err) {\n      throw errcode(err, 'ERR_INVALID_PUBLIC_KEY')\n    }\n  }\n\n  function computePublicKey (privateKey) {\n    try {\n      return secp.getPublicKey(privateKey, true)\n    } catch (err) {\n      throw errcode(err, 'ERR_INVALID_PRIVATE_KEY')\n    }\n  }\n\n  return {\n    generateKey,\n    privateKeyLength,\n    hashAndSign,\n    hashAndVerify,\n    compressPublicKey,\n    decompressPublicKey,\n    validatePrivateKey,\n    validatePublicKey,\n    computePublicKey\n  }\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,iBAAD,CAApB;;AACA,MAAM;EAAEE;AAAF,IAAaF,OAAO,CAAC,0BAAD,CAA1B;;AAEAG,MAAM,CAACC,OAAP,GAAiB,MAAM;EACrB,MAAMC,gBAAgB,GAAG,EAAzB;;EAEA,SAASC,WAAT,GAAwB;IACtB,OAAOL,IAAI,CAACM,KAAL,CAAWC,gBAAX,EAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACE,eAAeC,WAAf,CAA4BC,GAA5B,EAAiCC,GAAjC,EAAsC;IACpC,MAAM;MAAEC;IAAF,IAAa,MAAMV,MAAM,CAACU,MAAP,CAAcD,GAAd,CAAzB;;IACA,IAAI;MACF,OAAO,MAAMV,IAAI,CAACY,IAAL,CAAUD,MAAV,EAAkBF,GAAlB,CAAb;IACD,CAFD,CAEE,OAAOI,GAAP,EAAY;MACZ,MAAMf,OAAO,CAACe,GAAD,EAAM,mBAAN,CAAb;IACD;EACF;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACE,eAAeC,aAAf,CAA8BL,GAA9B,EAAmCM,GAAnC,EAAwCL,GAAxC,EAA6C;IAC3C,IAAI;MACF,MAAM;QAAEC;MAAF,IAAa,MAAMV,MAAM,CAACU,MAAP,CAAcD,GAAd,CAAzB;MACA,OAAOV,IAAI,CAACgB,MAAL,CAAYD,GAAZ,EAAiBJ,MAAjB,EAAyBF,GAAzB,CAAP;IACD,CAHD,CAGE,OAAOI,GAAP,EAAY;MACZ,MAAMf,OAAO,CAACe,GAAD,EAAM,mBAAN,CAAb;IACD;EACF;;EAED,SAASI,iBAAT,CAA4BR,GAA5B,EAAiC;IAC/B,MAAMS,KAAK,GAAGlB,IAAI,CAACmB,KAAL,CAAWC,OAAX,CAAmBX,GAAnB,EAAwBY,UAAxB,CAAmC,IAAnC,CAAd;IACA,OAAOH,KAAP;EACD;;EAED,SAASI,mBAAT,CAA8Bb,GAA9B,EAAmC;IACjC,MAAMS,KAAK,GAAGlB,IAAI,CAACmB,KAAL,CAAWC,OAAX,CAAmBX,GAAnB,EAAwBY,UAAxB,CAAmC,KAAnC,CAAd;IACA,OAAOH,KAAP;EACD;;EAED,SAASK,kBAAT,CAA6Bd,GAA7B,EAAkC;IAChC,IAAI;MACFT,IAAI,CAACwB,YAAL,CAAkBf,GAAlB,EAAuB,IAAvB;IACD,CAFD,CAEE,OAAOI,GAAP,EAAY;MACZ,MAAMf,OAAO,CAACe,GAAD,EAAM,yBAAN,CAAb;IACD;EACF;;EAED,SAASY,iBAAT,CAA4BhB,GAA5B,EAAiC;IAC/B,IAAI;MACFT,IAAI,CAACmB,KAAL,CAAWC,OAAX,CAAmBX,GAAnB;IACD,CAFD,CAEE,OAAOI,GAAP,EAAY;MACZ,MAAMf,OAAO,CAACe,GAAD,EAAM,wBAAN,CAAb;IACD;EACF;;EAED,SAASa,gBAAT,CAA2BC,UAA3B,EAAuC;IACrC,IAAI;MACF,OAAO3B,IAAI,CAACwB,YAAL,CAAkBG,UAAlB,EAA8B,IAA9B,CAAP;IACD,CAFD,CAEE,OAAOd,GAAP,EAAY;MACZ,MAAMf,OAAO,CAACe,GAAD,EAAM,yBAAN,CAAb;IACD;EACF;;EAED,OAAO;IACLR,WADK;IAELD,gBAFK;IAGLI,WAHK;IAILM,aAJK;IAKLG,iBALK;IAMLK,mBANK;IAOLC,kBAPK;IAQLE,iBARK;IASLC;EATK,CAAP;AAWD,CAnFD"},"metadata":{},"sourceType":"script"}