{"ast":null,"code":"/*eslint-disable*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\"); // Common aliases\n\n\nvar $Reader = $protobuf.Reader,\n    $Writer = $protobuf.Writer,\n    $util = $protobuf.util; // Exported root namespace\n\nvar $root = $protobuf.roots[\"libp2p-identify\"] || ($protobuf.roots[\"libp2p-identify\"] = {});\n\n$root.Identify = function () {\n  /**\n   * Properties of an Identify.\n   * @exports IIdentify\n   * @interface IIdentify\n   * @property {string|null} [protocolVersion] Identify protocolVersion\n   * @property {string|null} [agentVersion] Identify agentVersion\n   * @property {Uint8Array|null} [publicKey] Identify publicKey\n   * @property {Array.<Uint8Array>|null} [listenAddrs] Identify listenAddrs\n   * @property {Uint8Array|null} [observedAddr] Identify observedAddr\n   * @property {Array.<string>|null} [protocols] Identify protocols\n   * @property {Uint8Array|null} [signedPeerRecord] Identify signedPeerRecord\n   */\n\n  /**\n   * Constructs a new Identify.\n   * @exports Identify\n   * @classdesc Represents an Identify.\n   * @implements IIdentify\n   * @constructor\n   * @param {IIdentify=} [p] Properties to set\n   */\n  function Identify(p) {\n    this.listenAddrs = [];\n    this.protocols = [];\n    if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n  }\n  /**\n   * Identify protocolVersion.\n   * @member {string} protocolVersion\n   * @memberof Identify\n   * @instance\n   */\n\n\n  Identify.prototype.protocolVersion = \"\";\n  /**\n   * Identify agentVersion.\n   * @member {string} agentVersion\n   * @memberof Identify\n   * @instance\n   */\n\n  Identify.prototype.agentVersion = \"\";\n  /**\n   * Identify publicKey.\n   * @member {Uint8Array} publicKey\n   * @memberof Identify\n   * @instance\n   */\n\n  Identify.prototype.publicKey = $util.newBuffer([]);\n  /**\n   * Identify listenAddrs.\n   * @member {Array.<Uint8Array>} listenAddrs\n   * @memberof Identify\n   * @instance\n   */\n\n  Identify.prototype.listenAddrs = $util.emptyArray;\n  /**\n   * Identify observedAddr.\n   * @member {Uint8Array} observedAddr\n   * @memberof Identify\n   * @instance\n   */\n\n  Identify.prototype.observedAddr = $util.newBuffer([]);\n  /**\n   * Identify protocols.\n   * @member {Array.<string>} protocols\n   * @memberof Identify\n   * @instance\n   */\n\n  Identify.prototype.protocols = $util.emptyArray;\n  /**\n   * Identify signedPeerRecord.\n   * @member {Uint8Array} signedPeerRecord\n   * @memberof Identify\n   * @instance\n   */\n\n  Identify.prototype.signedPeerRecord = $util.newBuffer([]);\n  /**\n   * Encodes the specified Identify message. Does not implicitly {@link Identify.verify|verify} messages.\n   * @function encode\n   * @memberof Identify\n   * @static\n   * @param {IIdentify} m Identify message or plain object to encode\n   * @param {$protobuf.Writer} [w] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n  Identify.encode = function encode(m, w) {\n    if (!w) w = $Writer.create();\n    if (m.publicKey != null && Object.hasOwnProperty.call(m, \"publicKey\")) w.uint32(10).bytes(m.publicKey);\n\n    if (m.listenAddrs != null && m.listenAddrs.length) {\n      for (var i = 0; i < m.listenAddrs.length; ++i) w.uint32(18).bytes(m.listenAddrs[i]);\n    }\n\n    if (m.protocols != null && m.protocols.length) {\n      for (var i = 0; i < m.protocols.length; ++i) w.uint32(26).string(m.protocols[i]);\n    }\n\n    if (m.observedAddr != null && Object.hasOwnProperty.call(m, \"observedAddr\")) w.uint32(34).bytes(m.observedAddr);\n    if (m.protocolVersion != null && Object.hasOwnProperty.call(m, \"protocolVersion\")) w.uint32(42).string(m.protocolVersion);\n    if (m.agentVersion != null && Object.hasOwnProperty.call(m, \"agentVersion\")) w.uint32(50).string(m.agentVersion);\n    if (m.signedPeerRecord != null && Object.hasOwnProperty.call(m, \"signedPeerRecord\")) w.uint32(66).bytes(m.signedPeerRecord);\n    return w;\n  };\n  /**\n   * Decodes an Identify message from the specified reader or buffer.\n   * @function decode\n   * @memberof Identify\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n   * @param {number} [l] Message length if known beforehand\n   * @returns {Identify} Identify\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  Identify.decode = function decode(r, l) {\n    if (!(r instanceof $Reader)) r = $Reader.create(r);\n    var c = l === undefined ? r.len : r.pos + l,\n        m = new $root.Identify();\n\n    while (r.pos < c) {\n      var t = r.uint32();\n\n      switch (t >>> 3) {\n        case 5:\n          m.protocolVersion = r.string();\n          break;\n\n        case 6:\n          m.agentVersion = r.string();\n          break;\n\n        case 1:\n          m.publicKey = r.bytes();\n          break;\n\n        case 2:\n          if (!(m.listenAddrs && m.listenAddrs.length)) m.listenAddrs = [];\n          m.listenAddrs.push(r.bytes());\n          break;\n\n        case 4:\n          m.observedAddr = r.bytes();\n          break;\n\n        case 3:\n          if (!(m.protocols && m.protocols.length)) m.protocols = [];\n          m.protocols.push(r.string());\n          break;\n\n        case 8:\n          m.signedPeerRecord = r.bytes();\n          break;\n\n        default:\n          r.skipType(t & 7);\n          break;\n      }\n    }\n\n    return m;\n  };\n  /**\n   * Creates an Identify message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Identify\n   * @static\n   * @param {Object.<string,*>} d Plain object\n   * @returns {Identify} Identify\n   */\n\n\n  Identify.fromObject = function fromObject(d) {\n    if (d instanceof $root.Identify) return d;\n    var m = new $root.Identify();\n\n    if (d.protocolVersion != null) {\n      m.protocolVersion = String(d.protocolVersion);\n    }\n\n    if (d.agentVersion != null) {\n      m.agentVersion = String(d.agentVersion);\n    }\n\n    if (d.publicKey != null) {\n      if (typeof d.publicKey === \"string\") $util.base64.decode(d.publicKey, m.publicKey = $util.newBuffer($util.base64.length(d.publicKey)), 0);else if (d.publicKey.length) m.publicKey = d.publicKey;\n    }\n\n    if (d.listenAddrs) {\n      if (!Array.isArray(d.listenAddrs)) throw TypeError(\".Identify.listenAddrs: array expected\");\n      m.listenAddrs = [];\n\n      for (var i = 0; i < d.listenAddrs.length; ++i) {\n        if (typeof d.listenAddrs[i] === \"string\") $util.base64.decode(d.listenAddrs[i], m.listenAddrs[i] = $util.newBuffer($util.base64.length(d.listenAddrs[i])), 0);else if (d.listenAddrs[i].length) m.listenAddrs[i] = d.listenAddrs[i];\n      }\n    }\n\n    if (d.observedAddr != null) {\n      if (typeof d.observedAddr === \"string\") $util.base64.decode(d.observedAddr, m.observedAddr = $util.newBuffer($util.base64.length(d.observedAddr)), 0);else if (d.observedAddr.length) m.observedAddr = d.observedAddr;\n    }\n\n    if (d.protocols) {\n      if (!Array.isArray(d.protocols)) throw TypeError(\".Identify.protocols: array expected\");\n      m.protocols = [];\n\n      for (var i = 0; i < d.protocols.length; ++i) {\n        m.protocols[i] = String(d.protocols[i]);\n      }\n    }\n\n    if (d.signedPeerRecord != null) {\n      if (typeof d.signedPeerRecord === \"string\") $util.base64.decode(d.signedPeerRecord, m.signedPeerRecord = $util.newBuffer($util.base64.length(d.signedPeerRecord)), 0);else if (d.signedPeerRecord.length) m.signedPeerRecord = d.signedPeerRecord;\n    }\n\n    return m;\n  };\n  /**\n   * Creates a plain object from an Identify message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Identify\n   * @static\n   * @param {Identify} m Identify\n   * @param {$protobuf.IConversionOptions} [o] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  Identify.toObject = function toObject(m, o) {\n    if (!o) o = {};\n    var d = {};\n\n    if (o.arrays || o.defaults) {\n      d.listenAddrs = [];\n      d.protocols = [];\n    }\n\n    if (o.defaults) {\n      if (o.bytes === String) d.publicKey = \"\";else {\n        d.publicKey = [];\n        if (o.bytes !== Array) d.publicKey = $util.newBuffer(d.publicKey);\n      }\n      if (o.bytes === String) d.observedAddr = \"\";else {\n        d.observedAddr = [];\n        if (o.bytes !== Array) d.observedAddr = $util.newBuffer(d.observedAddr);\n      }\n      d.protocolVersion = \"\";\n      d.agentVersion = \"\";\n      if (o.bytes === String) d.signedPeerRecord = \"\";else {\n        d.signedPeerRecord = [];\n        if (o.bytes !== Array) d.signedPeerRecord = $util.newBuffer(d.signedPeerRecord);\n      }\n    }\n\n    if (m.publicKey != null && m.hasOwnProperty(\"publicKey\")) {\n      d.publicKey = o.bytes === String ? $util.base64.encode(m.publicKey, 0, m.publicKey.length) : o.bytes === Array ? Array.prototype.slice.call(m.publicKey) : m.publicKey;\n    }\n\n    if (m.listenAddrs && m.listenAddrs.length) {\n      d.listenAddrs = [];\n\n      for (var j = 0; j < m.listenAddrs.length; ++j) {\n        d.listenAddrs[j] = o.bytes === String ? $util.base64.encode(m.listenAddrs[j], 0, m.listenAddrs[j].length) : o.bytes === Array ? Array.prototype.slice.call(m.listenAddrs[j]) : m.listenAddrs[j];\n      }\n    }\n\n    if (m.protocols && m.protocols.length) {\n      d.protocols = [];\n\n      for (var j = 0; j < m.protocols.length; ++j) {\n        d.protocols[j] = m.protocols[j];\n      }\n    }\n\n    if (m.observedAddr != null && m.hasOwnProperty(\"observedAddr\")) {\n      d.observedAddr = o.bytes === String ? $util.base64.encode(m.observedAddr, 0, m.observedAddr.length) : o.bytes === Array ? Array.prototype.slice.call(m.observedAddr) : m.observedAddr;\n    }\n\n    if (m.protocolVersion != null && m.hasOwnProperty(\"protocolVersion\")) {\n      d.protocolVersion = m.protocolVersion;\n    }\n\n    if (m.agentVersion != null && m.hasOwnProperty(\"agentVersion\")) {\n      d.agentVersion = m.agentVersion;\n    }\n\n    if (m.signedPeerRecord != null && m.hasOwnProperty(\"signedPeerRecord\")) {\n      d.signedPeerRecord = o.bytes === String ? $util.base64.encode(m.signedPeerRecord, 0, m.signedPeerRecord.length) : o.bytes === Array ? Array.prototype.slice.call(m.signedPeerRecord) : m.signedPeerRecord;\n    }\n\n    return d;\n  };\n  /**\n   * Converts this Identify to JSON.\n   * @function toJSON\n   * @memberof Identify\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  Identify.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return Identify;\n}();\n\nmodule.exports = $root;","map":{"version":3,"names":["$protobuf","require","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Identify","p","listenAddrs","protocols","ks","Object","keys","i","length","prototype","protocolVersion","agentVersion","publicKey","newBuffer","emptyArray","observedAddr","signedPeerRecord","encode","m","w","create","hasOwnProperty","call","uint32","bytes","string","decode","r","l","c","undefined","len","pos","t","push","skipType","fromObject","d","String","base64","Array","isArray","TypeError","toObject","o","arrays","defaults","slice","j","toJSON","constructor","toJSONOptions","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p/src/identify/message.js"],"sourcesContent":["/*eslint-disable*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"libp2p-identify\"] || ($protobuf.roots[\"libp2p-identify\"] = {});\n\n$root.Identify = (function() {\n\n    /**\n     * Properties of an Identify.\n     * @exports IIdentify\n     * @interface IIdentify\n     * @property {string|null} [protocolVersion] Identify protocolVersion\n     * @property {string|null} [agentVersion] Identify agentVersion\n     * @property {Uint8Array|null} [publicKey] Identify publicKey\n     * @property {Array.<Uint8Array>|null} [listenAddrs] Identify listenAddrs\n     * @property {Uint8Array|null} [observedAddr] Identify observedAddr\n     * @property {Array.<string>|null} [protocols] Identify protocols\n     * @property {Uint8Array|null} [signedPeerRecord] Identify signedPeerRecord\n     */\n\n    /**\n     * Constructs a new Identify.\n     * @exports Identify\n     * @classdesc Represents an Identify.\n     * @implements IIdentify\n     * @constructor\n     * @param {IIdentify=} [p] Properties to set\n     */\n    function Identify(p) {\n        this.listenAddrs = [];\n        this.protocols = [];\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Identify protocolVersion.\n     * @member {string} protocolVersion\n     * @memberof Identify\n     * @instance\n     */\n    Identify.prototype.protocolVersion = \"\";\n\n    /**\n     * Identify agentVersion.\n     * @member {string} agentVersion\n     * @memberof Identify\n     * @instance\n     */\n    Identify.prototype.agentVersion = \"\";\n\n    /**\n     * Identify publicKey.\n     * @member {Uint8Array} publicKey\n     * @memberof Identify\n     * @instance\n     */\n    Identify.prototype.publicKey = $util.newBuffer([]);\n\n    /**\n     * Identify listenAddrs.\n     * @member {Array.<Uint8Array>} listenAddrs\n     * @memberof Identify\n     * @instance\n     */\n    Identify.prototype.listenAddrs = $util.emptyArray;\n\n    /**\n     * Identify observedAddr.\n     * @member {Uint8Array} observedAddr\n     * @memberof Identify\n     * @instance\n     */\n    Identify.prototype.observedAddr = $util.newBuffer([]);\n\n    /**\n     * Identify protocols.\n     * @member {Array.<string>} protocols\n     * @memberof Identify\n     * @instance\n     */\n    Identify.prototype.protocols = $util.emptyArray;\n\n    /**\n     * Identify signedPeerRecord.\n     * @member {Uint8Array} signedPeerRecord\n     * @memberof Identify\n     * @instance\n     */\n    Identify.prototype.signedPeerRecord = $util.newBuffer([]);\n\n    /**\n     * Encodes the specified Identify message. Does not implicitly {@link Identify.verify|verify} messages.\n     * @function encode\n     * @memberof Identify\n     * @static\n     * @param {IIdentify} m Identify message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Identify.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.publicKey != null && Object.hasOwnProperty.call(m, \"publicKey\"))\n            w.uint32(10).bytes(m.publicKey);\n        if (m.listenAddrs != null && m.listenAddrs.length) {\n            for (var i = 0; i < m.listenAddrs.length; ++i)\n                w.uint32(18).bytes(m.listenAddrs[i]);\n        }\n        if (m.protocols != null && m.protocols.length) {\n            for (var i = 0; i < m.protocols.length; ++i)\n                w.uint32(26).string(m.protocols[i]);\n        }\n        if (m.observedAddr != null && Object.hasOwnProperty.call(m, \"observedAddr\"))\n            w.uint32(34).bytes(m.observedAddr);\n        if (m.protocolVersion != null && Object.hasOwnProperty.call(m, \"protocolVersion\"))\n            w.uint32(42).string(m.protocolVersion);\n        if (m.agentVersion != null && Object.hasOwnProperty.call(m, \"agentVersion\"))\n            w.uint32(50).string(m.agentVersion);\n        if (m.signedPeerRecord != null && Object.hasOwnProperty.call(m, \"signedPeerRecord\"))\n            w.uint32(66).bytes(m.signedPeerRecord);\n        return w;\n    };\n\n    /**\n     * Decodes an Identify message from the specified reader or buffer.\n     * @function decode\n     * @memberof Identify\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Identify} Identify\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Identify.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Identify();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 5:\n                m.protocolVersion = r.string();\n                break;\n            case 6:\n                m.agentVersion = r.string();\n                break;\n            case 1:\n                m.publicKey = r.bytes();\n                break;\n            case 2:\n                if (!(m.listenAddrs && m.listenAddrs.length))\n                    m.listenAddrs = [];\n                m.listenAddrs.push(r.bytes());\n                break;\n            case 4:\n                m.observedAddr = r.bytes();\n                break;\n            case 3:\n                if (!(m.protocols && m.protocols.length))\n                    m.protocols = [];\n                m.protocols.push(r.string());\n                break;\n            case 8:\n                m.signedPeerRecord = r.bytes();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates an Identify message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Identify\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Identify} Identify\n     */\n    Identify.fromObject = function fromObject(d) {\n        if (d instanceof $root.Identify)\n            return d;\n        var m = new $root.Identify();\n        if (d.protocolVersion != null) {\n            m.protocolVersion = String(d.protocolVersion);\n        }\n        if (d.agentVersion != null) {\n            m.agentVersion = String(d.agentVersion);\n        }\n        if (d.publicKey != null) {\n            if (typeof d.publicKey === \"string\")\n                $util.base64.decode(d.publicKey, m.publicKey = $util.newBuffer($util.base64.length(d.publicKey)), 0);\n            else if (d.publicKey.length)\n                m.publicKey = d.publicKey;\n        }\n        if (d.listenAddrs) {\n            if (!Array.isArray(d.listenAddrs))\n                throw TypeError(\".Identify.listenAddrs: array expected\");\n            m.listenAddrs = [];\n            for (var i = 0; i < d.listenAddrs.length; ++i) {\n                if (typeof d.listenAddrs[i] === \"string\")\n                    $util.base64.decode(d.listenAddrs[i], m.listenAddrs[i] = $util.newBuffer($util.base64.length(d.listenAddrs[i])), 0);\n                else if (d.listenAddrs[i].length)\n                    m.listenAddrs[i] = d.listenAddrs[i];\n            }\n        }\n        if (d.observedAddr != null) {\n            if (typeof d.observedAddr === \"string\")\n                $util.base64.decode(d.observedAddr, m.observedAddr = $util.newBuffer($util.base64.length(d.observedAddr)), 0);\n            else if (d.observedAddr.length)\n                m.observedAddr = d.observedAddr;\n        }\n        if (d.protocols) {\n            if (!Array.isArray(d.protocols))\n                throw TypeError(\".Identify.protocols: array expected\");\n            m.protocols = [];\n            for (var i = 0; i < d.protocols.length; ++i) {\n                m.protocols[i] = String(d.protocols[i]);\n            }\n        }\n        if (d.signedPeerRecord != null) {\n            if (typeof d.signedPeerRecord === \"string\")\n                $util.base64.decode(d.signedPeerRecord, m.signedPeerRecord = $util.newBuffer($util.base64.length(d.signedPeerRecord)), 0);\n            else if (d.signedPeerRecord.length)\n                m.signedPeerRecord = d.signedPeerRecord;\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from an Identify message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Identify\n     * @static\n     * @param {Identify} m Identify\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Identify.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.arrays || o.defaults) {\n            d.listenAddrs = [];\n            d.protocols = [];\n        }\n        if (o.defaults) {\n            if (o.bytes === String)\n                d.publicKey = \"\";\n            else {\n                d.publicKey = [];\n                if (o.bytes !== Array)\n                    d.publicKey = $util.newBuffer(d.publicKey);\n            }\n            if (o.bytes === String)\n                d.observedAddr = \"\";\n            else {\n                d.observedAddr = [];\n                if (o.bytes !== Array)\n                    d.observedAddr = $util.newBuffer(d.observedAddr);\n            }\n            d.protocolVersion = \"\";\n            d.agentVersion = \"\";\n            if (o.bytes === String)\n                d.signedPeerRecord = \"\";\n            else {\n                d.signedPeerRecord = [];\n                if (o.bytes !== Array)\n                    d.signedPeerRecord = $util.newBuffer(d.signedPeerRecord);\n            }\n        }\n        if (m.publicKey != null && m.hasOwnProperty(\"publicKey\")) {\n            d.publicKey = o.bytes === String ? $util.base64.encode(m.publicKey, 0, m.publicKey.length) : o.bytes === Array ? Array.prototype.slice.call(m.publicKey) : m.publicKey;\n        }\n        if (m.listenAddrs && m.listenAddrs.length) {\n            d.listenAddrs = [];\n            for (var j = 0; j < m.listenAddrs.length; ++j) {\n                d.listenAddrs[j] = o.bytes === String ? $util.base64.encode(m.listenAddrs[j], 0, m.listenAddrs[j].length) : o.bytes === Array ? Array.prototype.slice.call(m.listenAddrs[j]) : m.listenAddrs[j];\n            }\n        }\n        if (m.protocols && m.protocols.length) {\n            d.protocols = [];\n            for (var j = 0; j < m.protocols.length; ++j) {\n                d.protocols[j] = m.protocols[j];\n            }\n        }\n        if (m.observedAddr != null && m.hasOwnProperty(\"observedAddr\")) {\n            d.observedAddr = o.bytes === String ? $util.base64.encode(m.observedAddr, 0, m.observedAddr.length) : o.bytes === Array ? Array.prototype.slice.call(m.observedAddr) : m.observedAddr;\n        }\n        if (m.protocolVersion != null && m.hasOwnProperty(\"protocolVersion\")) {\n            d.protocolVersion = m.protocolVersion;\n        }\n        if (m.agentVersion != null && m.hasOwnProperty(\"agentVersion\")) {\n            d.agentVersion = m.agentVersion;\n        }\n        if (m.signedPeerRecord != null && m.hasOwnProperty(\"signedPeerRecord\")) {\n            d.signedPeerRecord = o.bytes === String ? $util.base64.encode(m.signedPeerRecord, 0, m.signedPeerRecord.length) : o.bytes === Array ? Array.prototype.slice.call(m.signedPeerRecord) : m.signedPeerRecord;\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Identify to JSON.\n     * @function toJSON\n     * @memberof Identify\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Identify.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Identify;\n})();\n\nmodule.exports = $root;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}