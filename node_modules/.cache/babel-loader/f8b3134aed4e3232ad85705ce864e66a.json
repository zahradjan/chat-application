{"ast":null,"code":"'use strict';\n\nconst errCode = require('err-code');\n\nconst {\n  parallelMap,\n  filter\n} = require('streaming-iterables');\n\nconst {\n  pipe\n} = require('it-pipe');\n\nconst {\n  cleanCid\n} = require('./utils');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst BLOCK_RM_CONCURRENCY = 8;\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\n\nmodule.exports = _ref => {\n  let {\n    repo\n  } = _ref;\n\n  /**\n   * @type {import('ipfs-core-types/src/block').API[\"rm\"]}\n   */\n  async function* rm(cids) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!Array.isArray(cids)) {\n      cids = [cids];\n    } // We need to take a write lock here to ensure that adding and removing\n    // blocks are exclusive operations\n\n\n    const release = await repo.gcLock.writeLock();\n\n    try {\n      yield* pipe(cids, parallelMap(BLOCK_RM_CONCURRENCY, async cid => {\n        cid = cleanCid(cid);\n        /** @type {import('ipfs-core-types/src/block').RmResult} */\n\n        const result = {\n          cid\n        };\n\n        try {\n          const has = await repo.blocks.has(cid);\n\n          if (!has) {\n            throw errCode(new Error('block not found'), 'ERR_BLOCK_NOT_FOUND');\n          }\n\n          await repo.blocks.delete(cid);\n        } catch (err) {\n          if (!options.force) {\n            err.message = `cannot remove ${cid}: ${err.message}`;\n            result.error = err;\n          }\n        }\n\n        return result;\n      }), filter(() => !options.quiet));\n    } finally {\n      release();\n    }\n  }\n\n  return withTimeoutOption(rm);\n};","map":{"version":3,"names":["errCode","require","parallelMap","filter","pipe","cleanCid","withTimeoutOption","BLOCK_RM_CONCURRENCY","module","exports","repo","rm","cids","options","Array","isArray","release","gcLock","writeLock","cid","result","has","blocks","Error","delete","err","force","message","error","quiet"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/block/rm.js"],"sourcesContent":["'use strict'\n\nconst errCode = require('err-code')\nconst { parallelMap, filter } = require('streaming-iterables')\nconst { pipe } = require('it-pipe')\nconst { cleanCid } = require('./utils')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\nconst BLOCK_RM_CONCURRENCY = 8\n\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nmodule.exports = ({ repo }) => {\n  /**\n   * @type {import('ipfs-core-types/src/block').API[\"rm\"]}\n   */\n  async function * rm (cids, options = {}) {\n    if (!Array.isArray(cids)) {\n      cids = [cids]\n    }\n\n    // We need to take a write lock here to ensure that adding and removing\n    // blocks are exclusive operations\n    const release = await repo.gcLock.writeLock()\n\n    try {\n      yield * pipe(\n        cids,\n        parallelMap(BLOCK_RM_CONCURRENCY, async cid => {\n          cid = cleanCid(cid)\n\n          /** @type {import('ipfs-core-types/src/block').RmResult} */\n          const result = { cid }\n\n          try {\n            const has = await repo.blocks.has(cid)\n\n            if (!has) {\n              throw errCode(new Error('block not found'), 'ERR_BLOCK_NOT_FOUND')\n            }\n\n            await repo.blocks.delete(cid)\n          } catch (err) {\n            if (!options.force) {\n              err.message = `cannot remove ${cid}: ${err.message}`\n              result.error = err\n            }\n          }\n\n          return result\n        }),\n        filter(() => !options.quiet)\n      )\n    } finally {\n      release()\n    }\n  }\n\n  return withTimeoutOption(rm)\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAM;EAAEC,WAAF;EAAeC;AAAf,IAA0BF,OAAO,CAAC,qBAAD,CAAvC;;AACA,MAAM;EAAEG;AAAF,IAAWH,OAAO,CAAC,SAAD,CAAxB;;AACA,MAAM;EAAEI;AAAF,IAAeJ,OAAO,CAAC,SAAD,CAA5B;;AACA,MAAMK,iBAAiB,GAAGL,OAAO,CAAC,yCAAD,CAAjC;;AAEA,MAAMM,oBAAoB,GAAG,CAA7B;AAEA;AACA;AACA;AACA;;AACAC,MAAM,CAACC,OAAP,GAAiB,QAAc;EAAA,IAAb;IAAEC;EAAF,CAAa;;EAC7B;AACF;AACA;EACE,gBAAiBC,EAAjB,CAAqBC,IAArB,EAAyC;IAAA,IAAdC,OAAc,uEAAJ,EAAI;;IACvC,IAAI,CAACC,KAAK,CAACC,OAAN,CAAcH,IAAd,CAAL,EAA0B;MACxBA,IAAI,GAAG,CAACA,IAAD,CAAP;IACD,CAHsC,CAKvC;IACA;;;IACA,MAAMI,OAAO,GAAG,MAAMN,IAAI,CAACO,MAAL,CAAYC,SAAZ,EAAtB;;IAEA,IAAI;MACF,OAAQd,IAAI,CACVQ,IADU,EAEVV,WAAW,CAACK,oBAAD,EAAuB,MAAMY,GAAN,IAAa;QAC7CA,GAAG,GAAGd,QAAQ,CAACc,GAAD,CAAd;QAEA;;QACA,MAAMC,MAAM,GAAG;UAAED;QAAF,CAAf;;QAEA,IAAI;UACF,MAAME,GAAG,GAAG,MAAMX,IAAI,CAACY,MAAL,CAAYD,GAAZ,CAAgBF,GAAhB,CAAlB;;UAEA,IAAI,CAACE,GAAL,EAAU;YACR,MAAMrB,OAAO,CAAC,IAAIuB,KAAJ,CAAU,iBAAV,CAAD,EAA+B,qBAA/B,CAAb;UACD;;UAED,MAAMb,IAAI,CAACY,MAAL,CAAYE,MAAZ,CAAmBL,GAAnB,CAAN;QACD,CARD,CAQE,OAAOM,GAAP,EAAY;UACZ,IAAI,CAACZ,OAAO,CAACa,KAAb,EAAoB;YAClBD,GAAG,CAACE,OAAJ,GAAe,iBAAgBR,GAAI,KAAIM,GAAG,CAACE,OAAQ,EAAnD;YACAP,MAAM,CAACQ,KAAP,GAAeH,GAAf;UACD;QACF;;QAED,OAAOL,MAAP;MACD,CAtBU,CAFD,EAyBVjB,MAAM,CAAC,MAAM,CAACU,OAAO,CAACgB,KAAhB,CAzBI,CAAZ;IA2BD,CA5BD,SA4BU;MACRb,OAAO;IACR;EACF;;EAED,OAAOV,iBAAiB,CAACK,EAAD,CAAxB;AACD,CA/CD"},"metadata":{},"sourceType":"script"}