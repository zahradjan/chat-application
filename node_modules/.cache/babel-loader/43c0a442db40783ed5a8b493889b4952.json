{"ast":null,"code":"'use strict';\n\nconst path = require('path');\n\nconst EventEmitter = require('events');\n\nconst PROTOCOL = require('./protocol');\n\nconst encode = require('./encoding');\n\nconst waitForPeers = require('./wait-for-peers');\n\nconst getPeerID = require('./get-peer-id');\n/**\n * Communication channel over Pubsub between two IPFS nodes\n */\n\n\nclass DirectChannel extends EventEmitter {\n  constructor(ipfs, receiverID) {\n    super(); // IPFS instance to use internally\n\n    this._ipfs = ipfs;\n\n    if (!ipfs.pubsub) {\n      throw new Error('This IPFS node does not support pubsub.');\n    }\n\n    this._closed = false;\n\n    this._isClosed = () => this._closed;\n\n    this._receiverID = receiverID;\n\n    if (!this._receiverID) {\n      throw new Error('Receiver ID was undefined');\n    } // See _setup() for more state initialization\n\n  }\n  /**\n   * Channel ID\n   * @return {[String]} Channel's ID\n   */\n\n\n  get id() {\n    return this._id;\n  }\n  /**\n   * Peers participating in this channel\n   * @return {[Array]} Array of peer IDs participating in this channel\n   */\n\n\n  get peers() {\n    return this._peers;\n  }\n\n  async connect() {\n    await waitForPeers(this._ipfs, [this._receiverID], this._id, this._isClosed);\n  }\n  /**\n   * Send a message to the other peer\n   * @param  {[Any]} message Payload\n   */\n\n\n  async send(message) {\n    if (this._closed) return;\n    let m = encode(message);\n    await this._ipfs.pubsub.publish(this._id, m);\n  }\n  /**\n   * Close the channel\n   */\n\n\n  close() {\n    this._closed = true;\n    this.removeAllListeners('message');\n\n    this._ipfs.pubsub.unsubscribe(this._id, this._messageHandler);\n  }\n\n  async _setup() {\n    this._senderID = await getPeerID(this._ipfs); // Channel's participants\n\n    this._peers = Array.from([this._senderID, this._receiverID]).sort(); // ID of the channel is \"<peer1 id>/<peer 2 id>\"\"\n\n    this._id = '/' + PROTOCOL + '/' + this._peers.join('/'); // Function to use to handle incoming messages\n\n    this._messageHandler = message => {\n      // Make sure the message is coming from the correct peer\n      const isValid = message && message.from === this._receiverID; // Filter out all messages that didn't come from the second peer\n\n      if (isValid) {\n        this.emit('message', message);\n      }\n    };\n  }\n\n  async _openChannel() {\n    this._closed = false;\n    await this._setup();\n    await this._ipfs.pubsub.subscribe(this._id, this._messageHandler);\n  }\n\n  static async open(ipfs, receiverID) {\n    const channel = new DirectChannel(ipfs, receiverID);\n    await channel._openChannel();\n    return channel;\n  }\n\n}\n\nmodule.exports = DirectChannel;","map":{"version":3,"names":["path","require","EventEmitter","PROTOCOL","encode","waitForPeers","getPeerID","DirectChannel","constructor","ipfs","receiverID","_ipfs","pubsub","Error","_closed","_isClosed","_receiverID","id","_id","peers","_peers","connect","send","message","m","publish","close","removeAllListeners","unsubscribe","_messageHandler","_setup","_senderID","Array","from","sort","join","isValid","emit","_openChannel","subscribe","open","channel","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-pubsub-1on1/src/direct-channel.js"],"sourcesContent":["'use strict'\n\nconst path = require('path')\nconst EventEmitter = require('events')\nconst PROTOCOL = require('./protocol')\nconst encode = require('./encoding')\nconst waitForPeers = require('./wait-for-peers')\nconst getPeerID = require('./get-peer-id')\n\n/**\n * Communication channel over Pubsub between two IPFS nodes\n */\nclass DirectChannel extends EventEmitter {\n  constructor (ipfs, receiverID) {\n    super()\n\n    // IPFS instance to use internally\n    this._ipfs = ipfs\n\n    if (!ipfs.pubsub) {\n      throw new Error('This IPFS node does not support pubsub.')\n    }\n\n    this._closed = false\n    this._isClosed = () => this._closed\n    this._receiverID = receiverID\n\n    if (!this._receiverID) {\n      throw new Error('Receiver ID was undefined')\n    }\n    // See _setup() for more state initialization\n  }\n\n  /**\n   * Channel ID\n   * @return {[String]} Channel's ID\n   */\n  get id () {\n    return this._id\n  }\n\n  /**\n   * Peers participating in this channel\n   * @return {[Array]} Array of peer IDs participating in this channel\n   */\n  get peers () {\n    return this._peers\n  }\n\n  async connect () {\n    await waitForPeers(this._ipfs, [this._receiverID], this._id, this._isClosed)\n  }\n\n  /**\n   * Send a message to the other peer\n   * @param  {[Any]} message Payload\n   */\n  async send (message) {\n    if (this._closed) return\n    let m = encode(message)\n    await this._ipfs.pubsub.publish(this._id, m)\n  }\n\n  /**\n   * Close the channel\n   */\n  close () {\n    this._closed = true\n    this.removeAllListeners('message')\n    this._ipfs.pubsub.unsubscribe(this._id, this._messageHandler)\n  }\n\n  async _setup () {\n    this._senderID = await getPeerID(this._ipfs)\n\n    // Channel's participants\n    this._peers = Array.from([this._senderID, this._receiverID]).sort()\n\n    // ID of the channel is \"<peer1 id>/<peer 2 id>\"\"\n    this._id = '/' + PROTOCOL + '/' + this._peers.join('/')\n\n    // Function to use to handle incoming messages\n    this._messageHandler = message => {\n      // Make sure the message is coming from the correct peer\n      const isValid = message && message.from === this._receiverID\n      // Filter out all messages that didn't come from the second peer\n      if (isValid) {\n        this.emit('message', message)\n      }\n    }\n  }\n\n  async _openChannel () {\n    this._closed = false\n    await this._setup()\n    await this._ipfs.pubsub.subscribe(this._id, this._messageHandler)\n  }\n\n  static async open (ipfs, receiverID) {\n    const channel = new DirectChannel(ipfs, receiverID)\n    await channel._openChannel()\n    return channel\n  }\n}\n\nmodule.exports = DirectChannel\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}