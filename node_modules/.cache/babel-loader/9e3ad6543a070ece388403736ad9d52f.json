{"ast":null,"code":"'use strict';\n\nconst isDefined = require('./is-defined');\n\nclass Identity {\n  constructor(id, publicKey, idSignature, pubKeyIdSignature, type, provider) {\n    if (!isDefined(id)) {\n      throw new Error('Identity id is required');\n    }\n\n    if (!isDefined(publicKey)) {\n      throw new Error('Invalid public key');\n    }\n\n    if (!isDefined(idSignature)) {\n      throw new Error('Signature of the id (idSignature) is required');\n    }\n\n    if (!isDefined(pubKeyIdSignature)) {\n      throw new Error('Signature of (publicKey + idSignature) is required');\n    }\n\n    if (!isDefined(type)) {\n      throw new Error('Identity type is required');\n    }\n\n    if (!isDefined(provider)) {\n      throw new Error('Identity provider is required');\n    }\n\n    this._id = id;\n    this._publicKey = publicKey;\n    this._signatures = Object.assign({}, {\n      id: idSignature\n    }, {\n      publicKey: pubKeyIdSignature\n    });\n    this._type = type;\n    this._provider = provider;\n  }\n  /**\n  * This is only used as a fallback to the clock id when necessary\n  * @return {string} public key hex encoded\n  */\n\n\n  get id() {\n    return this._id;\n  }\n\n  get publicKey() {\n    return this._publicKey;\n  }\n\n  get signatures() {\n    return this._signatures;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get provider() {\n    return this._provider;\n  }\n\n  toJSON() {\n    return {\n      id: this.id,\n      publicKey: this.publicKey,\n      signatures: this.signatures,\n      type: this.type\n    };\n  }\n\n  static isIdentity(identity) {\n    return identity.id !== undefined && identity.publicKey !== undefined && identity.signatures !== undefined && identity.signatures.id !== undefined && identity.signatures.publicKey !== undefined && identity.type !== undefined;\n  }\n\n  static toJSON(identity) {\n    return {\n      id: identity.id,\n      publicKey: identity.publicKey,\n      signatures: identity.signatures,\n      type: identity.type\n    };\n  }\n\n}\n\nmodule.exports = Identity;","map":{"version":3,"names":["isDefined","require","Identity","constructor","id","publicKey","idSignature","pubKeyIdSignature","type","provider","Error","_id","_publicKey","_signatures","Object","assign","_type","_provider","signatures","toJSON","isIdentity","identity","undefined","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/orbit-db-identity-provider/src/identity.js"],"sourcesContent":["'use strict'\nconst isDefined = require('./is-defined')\n\nclass Identity {\n  constructor (id, publicKey, idSignature, pubKeyIdSignature, type, provider) {\n    if (!isDefined(id)) {\n      throw new Error('Identity id is required')\n    }\n\n    if (!isDefined(publicKey)) {\n      throw new Error('Invalid public key')\n    }\n\n    if (!isDefined(idSignature)) {\n      throw new Error('Signature of the id (idSignature) is required')\n    }\n\n    if (!isDefined(pubKeyIdSignature)) {\n      throw new Error('Signature of (publicKey + idSignature) is required')\n    }\n\n    if (!isDefined(type)) {\n      throw new Error('Identity type is required')\n    }\n\n    if (!isDefined(provider)) {\n      throw new Error('Identity provider is required')\n    }\n\n    this._id = id\n    this._publicKey = publicKey\n    this._signatures = Object.assign({}, { id: idSignature }, { publicKey: pubKeyIdSignature })\n    this._type = type\n    this._provider = provider\n  }\n\n  /**\n  * This is only used as a fallback to the clock id when necessary\n  * @return {string} public key hex encoded\n  */\n  get id () {\n    return this._id\n  }\n\n  get publicKey () {\n    return this._publicKey\n  }\n\n  get signatures () {\n    return this._signatures\n  }\n\n  get type () {\n    return this._type\n  }\n\n  get provider () {\n    return this._provider\n  }\n\n  toJSON () {\n    return {\n      id: this.id,\n      publicKey: this.publicKey,\n      signatures: this.signatures,\n      type: this.type\n    }\n  }\n\n  static isIdentity (identity) {\n    return identity.id !== undefined &&\n           identity.publicKey !== undefined &&\n           identity.signatures !== undefined &&\n           identity.signatures.id !== undefined &&\n           identity.signatures.publicKey !== undefined &&\n           identity.type !== undefined\n  }\n\n  static toJSON (identity) {\n    return {\n      id: identity.id,\n      publicKey: identity.publicKey,\n      signatures: identity.signatures,\n      type: identity.type\n    }\n  }\n}\n\nmodule.exports = Identity\n"],"mappings":"AAAA;;AACA,MAAMA,SAAS,GAAGC,OAAO,CAAC,cAAD,CAAzB;;AAEA,MAAMC,QAAN,CAAe;EACbC,WAAW,CAAEC,EAAF,EAAMC,SAAN,EAAiBC,WAAjB,EAA8BC,iBAA9B,EAAiDC,IAAjD,EAAuDC,QAAvD,EAAiE;IAC1E,IAAI,CAACT,SAAS,CAACI,EAAD,CAAd,EAAoB;MAClB,MAAM,IAAIM,KAAJ,CAAU,yBAAV,CAAN;IACD;;IAED,IAAI,CAACV,SAAS,CAACK,SAAD,CAAd,EAA2B;MACzB,MAAM,IAAIK,KAAJ,CAAU,oBAAV,CAAN;IACD;;IAED,IAAI,CAACV,SAAS,CAACM,WAAD,CAAd,EAA6B;MAC3B,MAAM,IAAII,KAAJ,CAAU,+CAAV,CAAN;IACD;;IAED,IAAI,CAACV,SAAS,CAACO,iBAAD,CAAd,EAAmC;MACjC,MAAM,IAAIG,KAAJ,CAAU,oDAAV,CAAN;IACD;;IAED,IAAI,CAACV,SAAS,CAACQ,IAAD,CAAd,EAAsB;MACpB,MAAM,IAAIE,KAAJ,CAAU,2BAAV,CAAN;IACD;;IAED,IAAI,CAACV,SAAS,CAACS,QAAD,CAAd,EAA0B;MACxB,MAAM,IAAIC,KAAJ,CAAU,+BAAV,CAAN;IACD;;IAED,KAAKC,GAAL,GAAWP,EAAX;IACA,KAAKQ,UAAL,GAAkBP,SAAlB;IACA,KAAKQ,WAAL,GAAmBC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB;MAAEX,EAAE,EAAEE;IAAN,CAAlB,EAAuC;MAAED,SAAS,EAAEE;IAAb,CAAvC,CAAnB;IACA,KAAKS,KAAL,GAAaR,IAAb;IACA,KAAKS,SAAL,GAAiBR,QAAjB;EACD;EAED;AACF;AACA;AACA;;;EACQ,IAAFL,EAAE,GAAI;IACR,OAAO,KAAKO,GAAZ;EACD;;EAEY,IAATN,SAAS,GAAI;IACf,OAAO,KAAKO,UAAZ;EACD;;EAEa,IAAVM,UAAU,GAAI;IAChB,OAAO,KAAKL,WAAZ;EACD;;EAEO,IAAJL,IAAI,GAAI;IACV,OAAO,KAAKQ,KAAZ;EACD;;EAEW,IAARP,QAAQ,GAAI;IACd,OAAO,KAAKQ,SAAZ;EACD;;EAEDE,MAAM,GAAI;IACR,OAAO;MACLf,EAAE,EAAE,KAAKA,EADJ;MAELC,SAAS,EAAE,KAAKA,SAFX;MAGLa,UAAU,EAAE,KAAKA,UAHZ;MAILV,IAAI,EAAE,KAAKA;IAJN,CAAP;EAMD;;EAEgB,OAAVY,UAAU,CAAEC,QAAF,EAAY;IAC3B,OAAOA,QAAQ,CAACjB,EAAT,KAAgBkB,SAAhB,IACAD,QAAQ,CAAChB,SAAT,KAAuBiB,SADvB,IAEAD,QAAQ,CAACH,UAAT,KAAwBI,SAFxB,IAGAD,QAAQ,CAACH,UAAT,CAAoBd,EAApB,KAA2BkB,SAH3B,IAIAD,QAAQ,CAACH,UAAT,CAAoBb,SAApB,KAAkCiB,SAJlC,IAKAD,QAAQ,CAACb,IAAT,KAAkBc,SALzB;EAMD;;EAEY,OAANH,MAAM,CAAEE,QAAF,EAAY;IACvB,OAAO;MACLjB,EAAE,EAAEiB,QAAQ,CAACjB,EADR;MAELC,SAAS,EAAEgB,QAAQ,CAAChB,SAFf;MAGLa,UAAU,EAAEG,QAAQ,CAACH,UAHhB;MAILV,IAAI,EAAEa,QAAQ,CAACb;IAJV,CAAP;EAMD;;AAlFY;;AAqFfe,MAAM,CAACC,OAAP,GAAiBtB,QAAjB"},"metadata":{},"sourceType":"script"}