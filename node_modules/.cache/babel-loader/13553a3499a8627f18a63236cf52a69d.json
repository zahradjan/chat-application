{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {BitswapAPI[\"wantlist\"]}\n   */\n  function wantlist() {\n    return _wantlist.apply(this, arguments);\n  }\n\n  function _wantlist() {\n    _wantlist = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var options,\n          res,\n          _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              _context.next = 3;\n              return api.post('bitswap/wantlist', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(options),\n                headers: options.headers\n              });\n\n            case 3:\n              _context.next = 5;\n              return _context.sent.json();\n\n            case 5:\n              res = _context.sent;\n              return _context.abrupt(\"return\", (res.Keys || []).map(function (\n              /** @type {{ '/': string }} */\n              k) {\n                return CID.parse(k['/']);\n              }));\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _wantlist.apply(this, arguments);\n  }\n\n  return wantlist;\n});","map":{"version":3,"names":["require","CID","configure","toUrlSearchParams","module","exports","api","wantlist","options","post","signal","searchParams","headers","json","res","Keys","map","k","parse"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-http-client/src/bitswap/wantlist.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {BitswapAPI[\"wantlist\"]}\n   */\n  async function wantlist (options = {}) {\n    const res = await (await api.post('bitswap/wantlist', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    })).json()\n\n    return (res.Keys || []).map((/** @type {{ '/': string }} */ k) => CID.parse(k['/']))\n  }\n  return wantlist\n})\n"],"mappings":"AAAA;;;;;;AAEA,eAAgBA,OAAO,CAAC,kBAAD,CAAvB;AAAA,IAAQC,GAAR,YAAQA,GAAR;;AACA,IAAMC,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AAEAI,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAAC,UAAAI,GAAG,EAAI;EAChC;AACF;AACA;EAHkC,SAIjBC,QAJiB;IAAA;EAAA;;EAAA;IAAA,uEAIhC;MAAA;MAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAyBC,OAAzB,2DAAmC,EAAnC;cAAA;cAAA,OAC2BF,GAAG,CAACG,IAAJ,CAAS,kBAAT,EAA6B;gBACpDC,MAAM,EAAEF,OAAO,CAACE,MADoC;gBAEpDC,YAAY,EAAER,iBAAiB,CAACK,OAAD,CAFqB;gBAGpDI,OAAO,EAAEJ,OAAO,CAACI;cAHmC,CAA7B,CAD3B;;YAAA;cAAA;cAAA,qBAKMC,IALN;;YAAA;cACQC,GADR;cAAA,iCAOS,CAACA,GAAG,CAACC,IAAJ,IAAY,EAAb,EAAiBC,GAAjB,CAAqB;cAAC;cAA+BC,CAAhC;gBAAA,OAAsChB,GAAG,CAACiB,KAAJ,CAAUD,CAAC,CAAC,GAAD,CAAX,CAAtC;cAAA,CAArB,CAPT;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAJgC;IAAA;EAAA;;EAahC,OAAOV,QAAP;AACD,CAdyB,CAA1B"},"metadata":{},"sourceType":"script"}