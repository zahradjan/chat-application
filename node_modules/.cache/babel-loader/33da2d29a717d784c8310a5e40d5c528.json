{"ast":null,"code":"'use strict';\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar errCode = require('err-code');\n\nvar IPFS_PREFIX = '/ipfs/';\n/**\n * @param {string|Uint8Array|CID} string\n * @returns {{cid:CID, path?:string}}\n */\n\nvar toCidAndPath = function toCidAndPath(string) {\n  if (string instanceof Uint8Array) {\n    try {\n      string = CID.decode(string);\n    } catch (err) {\n      throw errCode(err, 'ERR_INVALID_CID');\n    }\n  }\n\n  var cid = CID.asCID(string);\n\n  if (cid) {\n    return {\n      cid: cid,\n      path: undefined\n    };\n  }\n\n  string = string.toString();\n\n  if (string.startsWith(IPFS_PREFIX)) {\n    string = string.substring(IPFS_PREFIX.length);\n  }\n\n  var parts = string.split('/');\n  var path;\n\n  try {\n    cid = CID.parse(parts.shift() || '');\n  } catch (err) {\n    throw errCode(err, 'ERR_INVALID_CID');\n  }\n\n  if (parts.length) {\n    path = \"/\".concat(parts.join('/'));\n  }\n\n  return {\n    cid: cid,\n    path: path\n  };\n};\n\nmodule.exports = toCidAndPath;","map":{"version":3,"names":["require","CID","errCode","IPFS_PREFIX","toCidAndPath","string","Uint8Array","decode","err","cid","asCID","path","undefined","toString","startsWith","substring","length","parts","split","parse","shift","join","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core-utils/src/to-cid-and-path.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst errCode = require('err-code')\n\nconst IPFS_PREFIX = '/ipfs/'\n\n/**\n * @param {string|Uint8Array|CID} string\n * @returns {{cid:CID, path?:string}}\n */\nconst toCidAndPath = (string) => {\n  if (string instanceof Uint8Array) {\n    try {\n      string = CID.decode(string)\n    } catch (err) {\n      throw errCode(err, 'ERR_INVALID_CID')\n    }\n  }\n\n  let cid = CID.asCID(string)\n\n  if (cid) {\n    return {\n      cid,\n      path: undefined\n    }\n  }\n\n  string = string.toString()\n\n  if (string.startsWith(IPFS_PREFIX)) {\n    string = string.substring(IPFS_PREFIX.length)\n  }\n\n  const parts = string.split('/')\n  let path\n\n  try {\n    cid = CID.parse(parts.shift() || '')\n  } catch (err) {\n    throw errCode(err, 'ERR_INVALID_CID')\n  }\n\n  if (parts.length) {\n    path = `/${parts.join('/')}`\n  }\n\n  return {\n    cid,\n    path\n  }\n}\n\nmodule.exports = toCidAndPath\n"],"mappings":"AAAA;;AAEA,eAAgBA,OAAO,CAAC,kBAAD,CAAvB;AAAA,IAAQC,GAAR,YAAQA,GAAR;;AACA,IAAMC,OAAO,GAAGF,OAAO,CAAC,UAAD,CAAvB;;AAEA,IAAMG,WAAW,GAAG,QAApB;AAEA;AACA;AACA;AACA;;AACA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,MAAD,EAAY;EAC/B,IAAIA,MAAM,YAAYC,UAAtB,EAAkC;IAChC,IAAI;MACFD,MAAM,GAAGJ,GAAG,CAACM,MAAJ,CAAWF,MAAX,CAAT;IACD,CAFD,CAEE,OAAOG,GAAP,EAAY;MACZ,MAAMN,OAAO,CAACM,GAAD,EAAM,iBAAN,CAAb;IACD;EACF;;EAED,IAAIC,GAAG,GAAGR,GAAG,CAACS,KAAJ,CAAUL,MAAV,CAAV;;EAEA,IAAII,GAAJ,EAAS;IACP,OAAO;MACLA,GAAG,EAAHA,GADK;MAELE,IAAI,EAAEC;IAFD,CAAP;EAID;;EAEDP,MAAM,GAAGA,MAAM,CAACQ,QAAP,EAAT;;EAEA,IAAIR,MAAM,CAACS,UAAP,CAAkBX,WAAlB,CAAJ,EAAoC;IAClCE,MAAM,GAAGA,MAAM,CAACU,SAAP,CAAiBZ,WAAW,CAACa,MAA7B,CAAT;EACD;;EAED,IAAMC,KAAK,GAAGZ,MAAM,CAACa,KAAP,CAAa,GAAb,CAAd;EACA,IAAIP,IAAJ;;EAEA,IAAI;IACFF,GAAG,GAAGR,GAAG,CAACkB,KAAJ,CAAUF,KAAK,CAACG,KAAN,MAAiB,EAA3B,CAAN;EACD,CAFD,CAEE,OAAOZ,GAAP,EAAY;IACZ,MAAMN,OAAO,CAACM,GAAD,EAAM,iBAAN,CAAb;EACD;;EAED,IAAIS,KAAK,CAACD,MAAV,EAAkB;IAChBL,IAAI,cAAOM,KAAK,CAACI,IAAN,CAAW,GAAX,CAAP,CAAJ;EACD;;EAED,OAAO;IACLZ,GAAG,EAAHA,GADK;IAELE,IAAI,EAAJA;EAFK,CAAP;AAID,CAzCD;;AA2CAW,MAAM,CAACC,OAAP,GAAiBnB,YAAjB"},"metadata":{},"sourceType":"script"}