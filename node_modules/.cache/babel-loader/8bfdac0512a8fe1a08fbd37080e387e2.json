{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _require = require('p-queue'),\n    Queue = _require.default;\n/**\n * @typedef {import('peer-id')} PeerId\n */\n\n\nvar WorkerQueue = /*#__PURE__*/function () {\n  /**\n   * Creates a new WorkerQueue.\n   *\n   * @param {import('../index')} dht\n   * @param {import('./run')} run\n   * @param {import('./path')} path\n   * @param {Function & {error: Function}} log\n   */\n  function WorkerQueue(dht, run, path, log) {\n    _classCallCheck(this, WorkerQueue);\n\n    this.dht = dht;\n    this.run = run;\n    this.path = path;\n    this.log = log;\n    this.concurrency = this.dht.concurrency;\n    this.queue = this.setupQueue(); // a container for resolve/reject functions that will be populated\n    // when execute() is called\n\n    /** @type {{ resolve: (result?: any) => void, reject: (err: Error) => void} | null} */\n\n    this.execution = null;\n    /** @type {Set<PeerId>} */\n\n    this.queuedPeerIds = new Set();\n  }\n  /**\n   * Create the underlying async queue.\n   *\n   * @returns {Queue}\n   */\n\n\n  _createClass(WorkerQueue, [{\n    key: \"setupQueue\",\n    value: function setupQueue() {\n      var _this = this;\n\n      var q = new Queue({\n        concurrency: this.concurrency\n      }); // When all peers in the queue have been processed, stop the worker\n\n      q.on('idle', function () {\n        if (_this.path.peersToQuery && !_this.path.peersToQuery.length) {\n          _this.log('queue:drain');\n\n          _this.stop();\n        }\n      }); // When a space opens up in the queue, add some more peers\n\n      q.on('next', function () {\n        if (!_this.running) {\n          return;\n        }\n\n        if (q.pending < _this.concurrency) {\n          _this.fill();\n        }\n      });\n      return q;\n    }\n    /**\n     * Stop the worker, optionally providing an error to pass to the worker's\n     * callback.\n     *\n     * @param {Error} [err]\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop(err) {\n      if (!this.running) {\n        return;\n      }\n\n      this.running = false;\n      this.queue.clear();\n      this.log('worker:stop, %d workers still running', this.run.workers.filter(function (w) {\n        return w.running;\n      }).length);\n\n      if (this.execution) {\n        if (err) {\n          this.execution.reject(err);\n        } else {\n          this.execution.resolve();\n        }\n      }\n    }\n    /**\n     * Use the queue from async to keep `concurrency` amount items running\n     * per path.\n     *\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"execute\",\n    value: function () {\n      var _execute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _this2 = this;\n\n        var execPromise;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.running = true; // store the promise resolution functions to be resolved at end of queue\n\n                this.execution = null;\n                execPromise = new Promise(function (resolve, reject) {\n                  _this2.execution = {\n                    resolve: resolve,\n                    reject: reject\n                  };\n                }); // start queue\n\n                this.fill(); // await completion\n\n                _context.next = 6;\n                return execPromise;\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function execute() {\n        return _execute.apply(this, arguments);\n      }\n\n      return execute;\n    }()\n    /**\n     * Add peers to the worker queue until there are enough to satisfy the\n     * worker queue concurrency.\n     * Note that we don't want to take any more than those required to satisfy\n     * concurrency from the peers-to-query queue, because we always want to\n     * query the closest peers to the key first, and new peers are continuously\n     * being added to the peers-to-query queue.\n     */\n\n  }, {\n    key: \"fill\",\n    value: function fill() {\n      var _this3 = this;\n\n      if (!this.path.peersToQuery) {\n        return;\n      } // Note:\n      // - queue.pending: number of items that are currently running\n      // - queue.size: the number of items that are waiting to be run\n\n\n      var _loop = function _loop() {\n        var peer = _this3.path.peersToQuery.dequeue(); // store the peer id so we can potentially abort early\n\n\n        _this3.queuedPeerIds.add(peer);\n\n        _this3.queue.add(function () {\n          return _this3.processNext(peer).catch(function (err) {\n            _this3.log.error('queue', err);\n\n            _this3.stop(err);\n          }).finally(function () {\n            _this3.queuedPeerIds.delete(peer);\n          });\n        });\n      };\n\n      while (this.queue.pending + this.queue.size < this.concurrency && this.path.peersToQuery.length > 0) {\n        _loop();\n      }\n    }\n    /**\n     * Process the next peer in the queue\n     *\n     * @param {PeerId} peer\n     */\n\n  }, {\n    key: \"processNext\",\n    value: function () {\n      var _processNext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(peer) {\n        var continueQuerying, continueQueryingError, state, execError;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this.running) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 2:\n                if (!this.run.peersSeen.has(peer.toB58String())) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 4:\n                _context2.prev = 4;\n                _context2.next = 7;\n                return this.run.continueQuerying(this);\n\n              case 7:\n                continueQuerying = _context2.sent;\n                _context2.next = 13;\n                break;\n\n              case 10:\n                _context2.prev = 10;\n                _context2.t0 = _context2[\"catch\"](4);\n                continueQueryingError = _context2.t0;\n\n              case 13:\n                if (this.running) {\n                  _context2.next = 15;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 15:\n                if (!continueQueryingError) {\n                  _context2.next = 17;\n                  break;\n                }\n\n                throw continueQueryingError;\n\n              case 17:\n                if (continueQuerying) {\n                  _context2.next = 20;\n                  break;\n                }\n\n                this.stop();\n                return _context2.abrupt(\"return\");\n\n              case 20:\n                if (!this.run.peersSeen.has(peer.toB58String())) {\n                  _context2.next = 22;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 22:\n                this.run.peersSeen.add(peer.toB58String()); // Execute the query on the next peer\n\n                this.log('queue:work');\n                _context2.prev = 24;\n                _context2.next = 27;\n                return this.execQuery(peer);\n\n              case 27:\n                state = _context2.sent;\n                _context2.next = 33;\n                break;\n\n              case 30:\n                _context2.prev = 30;\n                _context2.t1 = _context2[\"catch\"](24);\n                execError = _context2.t1;\n\n              case 33:\n                if (this.running) {\n                  _context2.next = 35;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 35:\n                this.log('queue:work:done', execError, state);\n\n                if (!execError) {\n                  _context2.next = 38;\n                  break;\n                }\n\n                throw execError;\n\n              case 38:\n                if (!(state && state.queryComplete)) {\n                  _context2.next = 42;\n                  break;\n                }\n\n                this.log('query:complete');\n                this.run.stop();\n                return _context2.abrupt(\"return\");\n\n              case 42:\n                // If path is complete, just stop this worker.\n                // Note: this.stop() kills the queue and resolves execution\n                if (state && state.pathComplete) {\n                  this.stop();\n                }\n\n              case 43:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[4, 10], [24, 30]]);\n      }));\n\n      function processNext(_x) {\n        return _processNext.apply(this, arguments);\n      }\n\n      return processNext;\n    }()\n    /**\n     * Execute a query on the next peer.\n     *\n     * @param {PeerId} peer\n     */\n\n  }, {\n    key: \"execQuery\",\n    value: function () {\n      var _execQuery = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(peer) {\n        var _this4 = this;\n\n        var res, queryError, queryCloser;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _context4.next = 3;\n                return this.path.queryFunc(peer);\n\n              case 3:\n                res = _context4.sent;\n                _context4.next = 9;\n                break;\n\n              case 6:\n                _context4.prev = 6;\n                _context4.t0 = _context4[\"catch\"](0);\n                queryError = _context4.t0;\n\n              case 9:\n                if (this.running) {\n                  _context4.next = 11;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 11:\n                if (!queryError) {\n                  _context4.next = 14;\n                  break;\n                }\n\n                this.run.errors.push(queryError);\n                return _context4.abrupt(\"return\");\n\n              case 14:\n                _context4.t1 = this.run.peersQueried;\n\n                if (!_context4.t1) {\n                  _context4.next = 18;\n                  break;\n                }\n\n                _context4.next = 18;\n                return this.run.peersQueried.add(peer);\n\n              case 18:\n                if (res) {\n                  _context4.next = 20;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 20:\n                if (!(res.pathComplete || res.queryComplete)) {\n                  _context4.next = 23;\n                  break;\n                }\n\n                this.path.res = res;\n                return _context4.abrupt(\"return\", {\n                  pathComplete: res.pathComplete,\n                  queryComplete: res.queryComplete\n                });\n\n              case 23:\n                if (!(res.closerPeers && res.closerPeers.length > 0)) {\n                  _context4.next = 27;\n                  break;\n                }\n\n                /**\n                 * @param {import('../').PeerData} closer\n                 */\n                queryCloser = /*#__PURE__*/function () {\n                  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(closer) {\n                    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            if (!_this4.dht._isSelf(closer.id)) {\n                              _context3.next = 2;\n                              break;\n                            }\n\n                            return _context3.abrupt(\"return\");\n\n                          case 2:\n                            _this4.dht._peerDiscovered(closer.id, closer.multiaddrs);\n\n                            _context3.next = 5;\n                            return _this4.path.addPeerToQuery(closer.id);\n\n                          case 5:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3);\n                  }));\n\n                  return function queryCloser(_x3) {\n                    return _ref.apply(this, arguments);\n                  };\n                }();\n\n                _context4.next = 27;\n                return Promise.all(res.closerPeers.map(queryCloser));\n\n              case 27:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[0, 6]]);\n      }));\n\n      function execQuery(_x2) {\n        return _execQuery.apply(this, arguments);\n      }\n\n      return execQuery;\n    }()\n  }]);\n\n  return WorkerQueue;\n}();\n\nmodule.exports = WorkerQueue;","map":{"version":3,"names":["require","Queue","default","WorkerQueue","dht","run","path","log","concurrency","queue","setupQueue","execution","queuedPeerIds","Set","q","on","peersToQuery","length","stop","running","pending","fill","err","clear","workers","filter","w","reject","resolve","execPromise","Promise","peer","dequeue","add","processNext","catch","error","finally","delete","size","peersSeen","has","toB58String","continueQuerying","continueQueryingError","execQuery","state","execError","queryComplete","pathComplete","queryFunc","res","queryError","errors","push","peersQueried","closerPeers","queryCloser","closer","_isSelf","id","_peerDiscovered","multiaddrs","addPeerToQuery","all","map","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-kad-dht/src/query/worker-queue.js"],"sourcesContent":["'use strict'\n\nconst { default: Queue } = require('p-queue')\n\n/**\n * @typedef {import('peer-id')} PeerId\n */\n\nclass WorkerQueue {\n  /**\n   * Creates a new WorkerQueue.\n   *\n   * @param {import('../index')} dht\n   * @param {import('./run')} run\n   * @param {import('./path')} path\n   * @param {Function & {error: Function}} log\n   */\n  constructor (dht, run, path, log) {\n    this.dht = dht\n    this.run = run\n    this.path = path\n    this.log = log\n\n    this.concurrency = this.dht.concurrency\n    this.queue = this.setupQueue()\n    // a container for resolve/reject functions that will be populated\n    // when execute() is called\n\n    /** @type {{ resolve: (result?: any) => void, reject: (err: Error) => void} | null} */\n    this.execution = null\n\n    /** @type {Set<PeerId>} */\n    this.queuedPeerIds = new Set()\n  }\n\n  /**\n   * Create the underlying async queue.\n   *\n   * @returns {Queue}\n   */\n  setupQueue () {\n    const q = new Queue({\n      concurrency: this.concurrency\n    })\n\n    // When all peers in the queue have been processed, stop the worker\n    q.on('idle', () => {\n      if (this.path.peersToQuery && !this.path.peersToQuery.length) {\n        this.log('queue:drain')\n        this.stop()\n      }\n    })\n\n    // When a space opens up in the queue, add some more peers\n    q.on('next', () => {\n      if (!this.running) {\n        return\n      }\n\n      if (q.pending < this.concurrency) {\n        this.fill()\n      }\n    })\n\n    return q\n  }\n\n  /**\n   * Stop the worker, optionally providing an error to pass to the worker's\n   * callback.\n   *\n   * @param {Error} [err]\n   */\n  stop (err) {\n    if (!this.running) {\n      return\n    }\n\n    this.running = false\n    this.queue.clear()\n    this.log('worker:stop, %d workers still running', this.run.workers.filter(w => w.running).length)\n\n    if (this.execution) {\n      if (err) {\n        this.execution.reject(err)\n      } else {\n        this.execution.resolve()\n      }\n    }\n  }\n\n  /**\n   * Use the queue from async to keep `concurrency` amount items running\n   * per path.\n   *\n   * @returns {Promise<void>}\n   */\n  async execute () {\n    this.running = true\n    // store the promise resolution functions to be resolved at end of queue\n    this.execution = null\n    const execPromise = new Promise((resolve, reject) => {\n      this.execution = {\n        resolve, reject\n      }\n    })\n    // start queue\n    this.fill()\n    // await completion\n    await execPromise\n  }\n\n  /**\n   * Add peers to the worker queue until there are enough to satisfy the\n   * worker queue concurrency.\n   * Note that we don't want to take any more than those required to satisfy\n   * concurrency from the peers-to-query queue, because we always want to\n   * query the closest peers to the key first, and new peers are continuously\n   * being added to the peers-to-query queue.\n   */\n  fill () {\n    if (!this.path.peersToQuery) {\n      return\n    }\n\n    // Note:\n    // - queue.pending: number of items that are currently running\n    // - queue.size: the number of items that are waiting to be run\n    while (this.queue.pending + this.queue.size < this.concurrency && this.path.peersToQuery.length > 0) {\n      const peer = this.path.peersToQuery.dequeue()\n\n      // store the peer id so we can potentially abort early\n      this.queuedPeerIds.add(peer)\n\n      this.queue.add(\n        () => {\n          return this.processNext(peer)\n            .catch(err => {\n              this.log.error('queue', err)\n              this.stop(err)\n            })\n            .finally(() => {\n              this.queuedPeerIds.delete(peer)\n            })\n        }\n      )\n    }\n  }\n\n  /**\n   * Process the next peer in the queue\n   *\n   * @param {PeerId} peer\n   */\n  async processNext (peer) {\n    if (!this.running) {\n      return\n    }\n\n    // The paths must be disjoint, meaning that no two paths in the Query may\n    // traverse the same peer\n    if (this.run.peersSeen.has(peer.toB58String())) {\n      return\n    }\n\n    // Check if we've queried enough peers already\n    let continueQuerying, continueQueryingError\n    try {\n      continueQuerying = await this.run.continueQuerying(this)\n    } catch (err) {\n      continueQueryingError = err\n    }\n\n    // Abort and ignore any error if we're no longer running\n    if (!this.running) {\n      return\n    }\n\n    if (continueQueryingError) {\n      throw continueQueryingError\n    }\n\n    // No peer we're querying is closer, stop the queue\n    // This will cause queries that may potentially result in\n    // closer nodes to be ended, but it reduces overall query time\n    if (!continueQuerying) {\n      this.stop()\n      return\n    }\n\n    // Check if another path has queried this peer in the mean time\n    if (this.run.peersSeen.has(peer.toB58String())) {\n      return\n    }\n    this.run.peersSeen.add(peer.toB58String())\n\n    // Execute the query on the next peer\n    this.log('queue:work')\n    let state, execError\n    try {\n      state = await this.execQuery(peer)\n    } catch (err) {\n      execError = err\n    }\n\n    // Abort and ignore any error if we're no longer running\n    if (!this.running) {\n      return\n    }\n\n    this.log('queue:work:done', execError, state)\n\n    if (execError) {\n      throw execError\n    }\n\n    // If query is complete, stop all workers.\n    // Note: run.stop() calls stop() on all the workers, which kills the\n    // queue and resolves execution\n    if (state && state.queryComplete) {\n      this.log('query:complete')\n      this.run.stop()\n      return\n    }\n\n    // If path is complete, just stop this worker.\n    // Note: this.stop() kills the queue and resolves execution\n    if (state && state.pathComplete) {\n      this.stop()\n    }\n  }\n\n  /**\n   * Execute a query on the next peer.\n   *\n   * @param {PeerId} peer\n   */\n  async execQuery (peer) {\n    let res, queryError\n    try {\n      res = await this.path.queryFunc(peer)\n    } catch (err) {\n      queryError = err\n    }\n\n    // Abort and ignore any error if we're no longer running\n    if (!this.running) {\n      return\n    }\n\n    if (queryError) {\n      this.run.errors.push(queryError)\n      return\n    }\n\n    // Add the peer to the closest peers we have successfully queried\n    this.run.peersQueried && await this.run.peersQueried.add(peer)\n\n    if (!res) {\n      return\n    }\n\n    // If the query indicates that this path or the whole query is complete\n    // set the path result and bail out\n    if (res.pathComplete || res.queryComplete) {\n      this.path.res = res\n\n      return {\n        pathComplete: res.pathComplete,\n        queryComplete: res.queryComplete\n      }\n    }\n\n    // If there are closer peers to query, add them to the queue\n    if (res.closerPeers && res.closerPeers.length > 0) {\n      /**\n       * @param {import('../').PeerData} closer\n       */\n      const queryCloser = async (closer) => {\n        // don't add ourselves\n        if (this.dht._isSelf(closer.id)) {\n          return\n        }\n\n        this.dht._peerDiscovered(closer.id, closer.multiaddrs)\n        await this.path.addPeerToQuery(closer.id)\n      }\n\n      await Promise.all(res.closerPeers.map(queryCloser))\n    }\n  }\n}\n\nmodule.exports = WorkerQueue\n"],"mappings":"AAAA;;;;;;;;;;AAEA,eAA2BA,OAAO,CAAC,SAAD,CAAlC;AAAA,IAAiBC,KAAjB,YAAQC,OAAR;AAEA;AACA;AACA;;;IAEMC,W;EACJ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,qBAAaC,GAAb,EAAkBC,GAAlB,EAAuBC,IAAvB,EAA6BC,GAA7B,EAAkC;IAAA;;IAChC,KAAKH,GAAL,GAAWA,GAAX;IACA,KAAKC,GAAL,GAAWA,GAAX;IACA,KAAKC,IAAL,GAAYA,IAAZ;IACA,KAAKC,GAAL,GAAWA,GAAX;IAEA,KAAKC,WAAL,GAAmB,KAAKJ,GAAL,CAASI,WAA5B;IACA,KAAKC,KAAL,GAAa,KAAKC,UAAL,EAAb,CAPgC,CAQhC;IACA;;IAEA;;IACA,KAAKC,SAAL,GAAiB,IAAjB;IAEA;;IACA,KAAKC,aAAL,GAAqB,IAAIC,GAAJ,EAArB;EACD;EAED;AACF;AACA;AACA;AACA;;;;;WACE,sBAAc;MAAA;;MACZ,IAAMC,CAAC,GAAG,IAAIb,KAAJ,CAAU;QAClBO,WAAW,EAAE,KAAKA;MADA,CAAV,CAAV,CADY,CAKZ;;MACAM,CAAC,CAACC,EAAF,CAAK,MAAL,EAAa,YAAM;QACjB,IAAI,KAAI,CAACT,IAAL,CAAUU,YAAV,IAA0B,CAAC,KAAI,CAACV,IAAL,CAAUU,YAAV,CAAuBC,MAAtD,EAA8D;UAC5D,KAAI,CAACV,GAAL,CAAS,aAAT;;UACA,KAAI,CAACW,IAAL;QACD;MACF,CALD,EANY,CAaZ;;MACAJ,CAAC,CAACC,EAAF,CAAK,MAAL,EAAa,YAAM;QACjB,IAAI,CAAC,KAAI,CAACI,OAAV,EAAmB;UACjB;QACD;;QAED,IAAIL,CAAC,CAACM,OAAF,GAAY,KAAI,CAACZ,WAArB,EAAkC;UAChC,KAAI,CAACa,IAAL;QACD;MACF,CARD;MAUA,OAAOP,CAAP;IACD;IAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,cAAMQ,GAAN,EAAW;MACT,IAAI,CAAC,KAAKH,OAAV,EAAmB;QACjB;MACD;;MAED,KAAKA,OAAL,GAAe,KAAf;MACA,KAAKV,KAAL,CAAWc,KAAX;MACA,KAAKhB,GAAL,CAAS,uCAAT,EAAkD,KAAKF,GAAL,CAASmB,OAAT,CAAiBC,MAAjB,CAAwB,UAAAC,CAAC;QAAA,OAAIA,CAAC,CAACP,OAAN;MAAA,CAAzB,EAAwCF,MAA1F;;MAEA,IAAI,KAAKN,SAAT,EAAoB;QAClB,IAAIW,GAAJ,EAAS;UACP,KAAKX,SAAL,CAAegB,MAAf,CAAsBL,GAAtB;QACD,CAFD,MAEO;UACL,KAAKX,SAAL,CAAeiB,OAAf;QACD;MACF;IACF;IAED;AACF;AACA;AACA;AACA;AACA;;;;;gFACE;QAAA;;QAAA;QAAA;UAAA;YAAA;cAAA;gBACE,KAAKT,OAAL,GAAe,IAAf,CADF,CAEE;;gBACA,KAAKR,SAAL,GAAiB,IAAjB;gBACMkB,WAJR,GAIsB,IAAIC,OAAJ,CAAY,UAACF,OAAD,EAAUD,MAAV,EAAqB;kBACnD,MAAI,CAAChB,SAAL,GAAiB;oBACfiB,OAAO,EAAPA,OADe;oBACND,MAAM,EAANA;kBADM,CAAjB;gBAGD,CAJmB,CAJtB,EASE;;gBACA,KAAKN,IAAL,GAVF,CAWE;;gBAXF;gBAAA,OAYQQ,WAZR;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;IAeA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,gBAAQ;MAAA;;MACN,IAAI,CAAC,KAAKvB,IAAL,CAAUU,YAAf,EAA6B;QAC3B;MACD,CAHK,CAKN;MACA;MACA;;;MAPM;QASJ,IAAMe,IAAI,GAAG,MAAI,CAACzB,IAAL,CAAUU,YAAV,CAAuBgB,OAAvB,EAAb,CATI,CAWJ;;;QACA,MAAI,CAACpB,aAAL,CAAmBqB,GAAnB,CAAuBF,IAAvB;;QAEA,MAAI,CAACtB,KAAL,CAAWwB,GAAX,CACE,YAAM;UACJ,OAAO,MAAI,CAACC,WAAL,CAAiBH,IAAjB,EACJI,KADI,CACE,UAAAb,GAAG,EAAI;YACZ,MAAI,CAACf,GAAL,CAAS6B,KAAT,CAAe,OAAf,EAAwBd,GAAxB;;YACA,MAAI,CAACJ,IAAL,CAAUI,GAAV;UACD,CAJI,EAKJe,OALI,CAKI,YAAM;YACb,MAAI,CAACzB,aAAL,CAAmB0B,MAAnB,CAA0BP,IAA1B;UACD,CAPI,CAAP;QAQD,CAVH;MAdI;;MAQN,OAAO,KAAKtB,KAAL,CAAWW,OAAX,GAAqB,KAAKX,KAAL,CAAW8B,IAAhC,GAAuC,KAAK/B,WAA5C,IAA2D,KAAKF,IAAL,CAAUU,YAAV,CAAuBC,MAAvB,GAAgC,CAAlG,EAAqG;QAAA;MAkBpG;IACF;IAED;AACF;AACA;AACA;AACA;;;;;oFACE,kBAAmBc,IAAnB;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,IACO,KAAKZ,OADZ;kBAAA;kBAAA;gBAAA;;gBAAA;;cAAA;gBAAA,KAOM,KAAKd,GAAL,CAASmC,SAAT,CAAmBC,GAAnB,CAAuBV,IAAI,CAACW,WAAL,EAAvB,CAPN;kBAAA;kBAAA;gBAAA;;gBAAA;;cAAA;gBAAA;gBAAA;gBAAA,OAc6B,KAAKrC,GAAL,CAASsC,gBAAT,CAA0B,IAA1B,CAd7B;;cAAA;gBAcIA,gBAdJ;gBAAA;gBAAA;;cAAA;gBAAA;gBAAA;gBAgBIC,qBAAqB,eAArB;;cAhBJ;gBAAA,IAoBO,KAAKzB,OApBZ;kBAAA;kBAAA;gBAAA;;gBAAA;;cAAA;gBAAA,KAwBMyB,qBAxBN;kBAAA;kBAAA;gBAAA;;gBAAA,MAyBUA,qBAzBV;;cAAA;gBAAA,IA+BOD,gBA/BP;kBAAA;kBAAA;gBAAA;;gBAgCI,KAAKzB,IAAL;gBAhCJ;;cAAA;gBAAA,KAqCM,KAAKb,GAAL,CAASmC,SAAT,CAAmBC,GAAnB,CAAuBV,IAAI,CAACW,WAAL,EAAvB,CArCN;kBAAA;kBAAA;gBAAA;;gBAAA;;cAAA;gBAwCE,KAAKrC,GAAL,CAASmC,SAAT,CAAmBP,GAAnB,CAAuBF,IAAI,CAACW,WAAL,EAAvB,EAxCF,CA0CE;;gBACA,KAAKnC,GAAL,CAAS,YAAT;gBA3CF;gBAAA;gBAAA,OA8CkB,KAAKsC,SAAL,CAAed,IAAf,CA9ClB;;cAAA;gBA8CIe,KA9CJ;gBAAA;gBAAA;;cAAA;gBAAA;gBAAA;gBAgDIC,SAAS,eAAT;;cAhDJ;gBAAA,IAoDO,KAAK5B,OApDZ;kBAAA;kBAAA;gBAAA;;gBAAA;;cAAA;gBAwDE,KAAKZ,GAAL,CAAS,iBAAT,EAA4BwC,SAA5B,EAAuCD,KAAvC;;gBAxDF,KA0DMC,SA1DN;kBAAA;kBAAA;gBAAA;;gBAAA,MA2DUA,SA3DV;;cAAA;gBAAA,MAiEMD,KAAK,IAAIA,KAAK,CAACE,aAjErB;kBAAA;kBAAA;gBAAA;;gBAkEI,KAAKzC,GAAL,CAAS,gBAAT;gBACA,KAAKF,GAAL,CAASa,IAAT;gBAnEJ;;cAAA;gBAuEE;gBACA;gBACA,IAAI4B,KAAK,IAAIA,KAAK,CAACG,YAAnB,EAAiC;kBAC/B,KAAK/B,IAAL;gBACD;;cA3EH;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;IA8EA;AACF;AACA;AACA;AACA;;;;;kFACE,kBAAiBa,IAAjB;QAAA;;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA;gBAAA,OAGgB,KAAKzB,IAAL,CAAU4C,SAAV,CAAoBnB,IAApB,CAHhB;;cAAA;gBAGIoB,GAHJ;gBAAA;gBAAA;;cAAA;gBAAA;gBAAA;gBAKIC,UAAU,eAAV;;cALJ;gBAAA,IASO,KAAKjC,OATZ;kBAAA;kBAAA;gBAAA;;gBAAA;;cAAA;gBAAA,KAaMiC,UAbN;kBAAA;kBAAA;gBAAA;;gBAcI,KAAK/C,GAAL,CAASgD,MAAT,CAAgBC,IAAhB,CAAqBF,UAArB;gBAdJ;;cAAA;gBAAA,eAmBE,KAAK/C,GAAL,CAASkD,YAnBX;;gBAAA;kBAAA;kBAAA;gBAAA;;gBAAA;gBAAA,OAmBiC,KAAKlD,GAAL,CAASkD,YAAT,CAAsBtB,GAAtB,CAA0BF,IAA1B,CAnBjC;;cAAA;gBAAA,IAqBOoB,GArBP;kBAAA;kBAAA;gBAAA;;gBAAA;;cAAA;gBAAA,MA2BMA,GAAG,CAACF,YAAJ,IAAoBE,GAAG,CAACH,aA3B9B;kBAAA;kBAAA;gBAAA;;gBA4BI,KAAK1C,IAAL,CAAU6C,GAAV,GAAgBA,GAAhB;gBA5BJ,kCA8BW;kBACLF,YAAY,EAAEE,GAAG,CAACF,YADb;kBAELD,aAAa,EAAEG,GAAG,CAACH;gBAFd,CA9BX;;cAAA;gBAAA,MAqCMG,GAAG,CAACK,WAAJ,IAAmBL,GAAG,CAACK,WAAJ,CAAgBvC,MAAhB,GAAyB,CArClD;kBAAA;kBAAA;gBAAA;;gBAsCI;AACN;AACA;gBACYwC,WAzCV;kBAAA,sEAyCwB,kBAAOC,MAAP;oBAAA;sBAAA;wBAAA;0BAAA;4BAAA,KAEd,MAAI,CAACtD,GAAL,CAASuD,OAAT,CAAiBD,MAAM,CAACE,EAAxB,CAFc;8BAAA;8BAAA;4BAAA;;4BAAA;;0BAAA;4BAMlB,MAAI,CAACxD,GAAL,CAASyD,eAAT,CAAyBH,MAAM,CAACE,EAAhC,EAAoCF,MAAM,CAACI,UAA3C;;4BANkB;4BAAA,OAOZ,MAAI,CAACxD,IAAL,CAAUyD,cAAV,CAAyBL,MAAM,CAACE,EAAhC,CAPY;;0BAAA;0BAAA;4BAAA;wBAAA;sBAAA;oBAAA;kBAAA,CAzCxB;;kBAAA,gBAyCUH,WAzCV;oBAAA;kBAAA;gBAAA;;gBAAA;gBAAA,OAmDU3B,OAAO,CAACkC,GAAR,CAAYb,GAAG,CAACK,WAAJ,CAAgBS,GAAhB,CAAoBR,WAApB,CAAZ,CAnDV;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;;;;;;AAwDFS,MAAM,CAACC,OAAP,GAAiBhE,WAAjB"},"metadata":{},"sourceType":"script"}