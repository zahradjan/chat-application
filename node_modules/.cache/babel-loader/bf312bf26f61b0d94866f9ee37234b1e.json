{"ast":null,"code":"'use strict';\n\nvar errCode = require('err-code');\n\nvar ipfsUnixfs = require('ipfs-unixfs');\n\nvar persist = require('../../utils/persist.js');\n\nvar dagPb = require('@ipld/dag-pb');\n\nvar parallelBatch = require('it-parallel-batch');\n\nvar rawCodec = require('multiformats/codecs/raw');\n\nvar flat = require('./flat.js');\n\nvar balanced = require('./balanced.js');\n\nvar trickle = require('./trickle.js');\n\nvar bufferImporter = require('./buffer-importer.js');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\n\nvar dagPb__namespace = /*#__PURE__*/_interopNamespace(dagPb);\n\nvar parallelBatch__default = /*#__PURE__*/_interopDefaultLegacy(parallelBatch);\n\nvar rawCodec__namespace = /*#__PURE__*/_interopNamespace(rawCodec);\n\nconst dagBuilders = {\n  flat: flat,\n  balanced: balanced,\n  trickle: trickle\n};\n\nasync function* buildFileBatch(file, blockstore, options) {\n  let count = -1;\n  let previous;\n  let bufferImporter$1;\n\n  if (typeof options.bufferImporter === 'function') {\n    bufferImporter$1 = options.bufferImporter;\n  } else {\n    bufferImporter$1 = bufferImporter;\n  }\n\n  for await (const entry of parallelBatch__default[\"default\"](bufferImporter$1(file, blockstore, options), options.blockWriteConcurrency)) {\n    count++;\n\n    if (count === 0) {\n      previous = entry;\n      continue;\n    } else if (count === 1 && previous) {\n      yield previous;\n      previous = null;\n    }\n\n    yield entry;\n  }\n\n  if (previous) {\n    previous.single = true;\n    yield previous;\n  }\n}\n\nconst reduce = (file, blockstore, options) => {\n  async function reducer(leaves) {\n    if (leaves.length === 1 && leaves[0].single && options.reduceSingleLeafToSelf) {\n      const leaf = leaves[0];\n\n      if (file.mtime !== undefined || file.mode !== undefined) {\n        let buffer = await blockstore.get(leaf.cid);\n        leaf.unixfs = new ipfsUnixfs.UnixFS({\n          type: 'file',\n          mtime: file.mtime,\n          mode: file.mode,\n          data: buffer\n        });\n        buffer = dagPb.encode(dagPb.prepare({\n          Data: leaf.unixfs.marshal()\n        }));\n        leaf.cid = await persist(buffer, blockstore, { ...options,\n          codec: dagPb__namespace,\n          hasher: options.hasher,\n          cidVersion: options.cidVersion\n        });\n        leaf.size = buffer.length;\n      }\n\n      return {\n        cid: leaf.cid,\n        path: file.path,\n        unixfs: leaf.unixfs,\n        size: leaf.size\n      };\n    }\n\n    const f = new ipfsUnixfs.UnixFS({\n      type: 'file',\n      mtime: file.mtime,\n      mode: file.mode\n    });\n    const links = leaves.filter(leaf => {\n      if (leaf.cid.code === rawCodec__namespace.code && leaf.size) {\n        return true;\n      }\n\n      if (leaf.unixfs && !leaf.unixfs.data && leaf.unixfs.fileSize()) {\n        return true;\n      }\n\n      return Boolean(leaf.unixfs && leaf.unixfs.data && leaf.unixfs.data.length);\n    }).map(leaf => {\n      if (leaf.cid.code === rawCodec__namespace.code) {\n        f.addBlockSize(leaf.size);\n        return {\n          Name: '',\n          Tsize: leaf.size,\n          Hash: leaf.cid\n        };\n      }\n\n      if (!leaf.unixfs || !leaf.unixfs.data) {\n        f.addBlockSize(leaf.unixfs && leaf.unixfs.fileSize() || 0);\n      } else {\n        f.addBlockSize(leaf.unixfs.data.length);\n      }\n\n      return {\n        Name: '',\n        Tsize: leaf.size,\n        Hash: leaf.cid\n      };\n    });\n    const node = {\n      Data: f.marshal(),\n      Links: links\n    };\n    const buffer = dagPb.encode(dagPb.prepare(node));\n    const cid = await persist(buffer, blockstore, options);\n    return {\n      cid,\n      path: file.path,\n      unixfs: f,\n      size: buffer.length + node.Links.reduce((acc, curr) => acc + curr.Tsize, 0)\n    };\n  }\n\n  return reducer;\n};\n\nfunction fileBuilder(file, block, options) {\n  const dagBuilder = dagBuilders[options.strategy];\n\n  if (!dagBuilder) {\n    throw errCode__default[\"default\"](new Error(`Unknown importer build strategy name: ${options.strategy}`), 'ERR_BAD_STRATEGY');\n  }\n\n  return dagBuilder(buildFileBatch(file, block, options), reduce(file, block, options), options);\n}\n\nmodule.exports = fileBuilder;","map":{"version":3,"names":["errCode","require","ipfsUnixfs","persist","dagPb","parallelBatch","rawCodec","flat","balanced","trickle","bufferImporter","_interopDefaultLegacy","e","_interopNamespace","__esModule","n","Object","create","keys","forEach","k","d","getOwnPropertyDescriptor","defineProperty","get","enumerable","freeze","errCode__default","dagPb__namespace","parallelBatch__default","rawCodec__namespace","dagBuilders","buildFileBatch","file","blockstore","options","count","previous","bufferImporter$1","entry","blockWriteConcurrency","single","reduce","reducer","leaves","length","reduceSingleLeafToSelf","leaf","mtime","undefined","mode","buffer","cid","unixfs","UnixFS","type","data","encode","prepare","Data","marshal","codec","hasher","cidVersion","size","path","f","links","filter","code","fileSize","Boolean","map","addBlockSize","Name","Tsize","Hash","node","Links","acc","curr","fileBuilder","block","dagBuilder","strategy","Error","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-unixfs-importer/cjs/src/dag-builder/file/index.js"],"sourcesContent":["'use strict';\n\nvar errCode = require('err-code');\nvar ipfsUnixfs = require('ipfs-unixfs');\nvar persist = require('../../utils/persist.js');\nvar dagPb = require('@ipld/dag-pb');\nvar parallelBatch = require('it-parallel-batch');\nvar rawCodec = require('multiformats/codecs/raw');\nvar flat = require('./flat.js');\nvar balanced = require('./balanced.js');\nvar trickle = require('./trickle.js');\nvar bufferImporter = require('./buffer-importer.js');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () { return e[k]; }\n        });\n      }\n    });\n  }\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\nvar dagPb__namespace = /*#__PURE__*/_interopNamespace(dagPb);\nvar parallelBatch__default = /*#__PURE__*/_interopDefaultLegacy(parallelBatch);\nvar rawCodec__namespace = /*#__PURE__*/_interopNamespace(rawCodec);\n\nconst dagBuilders = {\n  flat: flat,\n  balanced: balanced,\n  trickle: trickle\n};\nasync function* buildFileBatch(file, blockstore, options) {\n  let count = -1;\n  let previous;\n  let bufferImporter$1;\n  if (typeof options.bufferImporter === 'function') {\n    bufferImporter$1 = options.bufferImporter;\n  } else {\n    bufferImporter$1 = bufferImporter;\n  }\n  for await (const entry of parallelBatch__default[\"default\"](bufferImporter$1(file, blockstore, options), options.blockWriteConcurrency)) {\n    count++;\n    if (count === 0) {\n      previous = entry;\n      continue;\n    } else if (count === 1 && previous) {\n      yield previous;\n      previous = null;\n    }\n    yield entry;\n  }\n  if (previous) {\n    previous.single = true;\n    yield previous;\n  }\n}\nconst reduce = (file, blockstore, options) => {\n  async function reducer(leaves) {\n    if (leaves.length === 1 && leaves[0].single && options.reduceSingleLeafToSelf) {\n      const leaf = leaves[0];\n      if (file.mtime !== undefined || file.mode !== undefined) {\n        let buffer = await blockstore.get(leaf.cid);\n        leaf.unixfs = new ipfsUnixfs.UnixFS({\n          type: 'file',\n          mtime: file.mtime,\n          mode: file.mode,\n          data: buffer\n        });\n        buffer = dagPb.encode(dagPb.prepare({ Data: leaf.unixfs.marshal() }));\n        leaf.cid = await persist(buffer, blockstore, {\n          ...options,\n          codec: dagPb__namespace,\n          hasher: options.hasher,\n          cidVersion: options.cidVersion\n        });\n        leaf.size = buffer.length;\n      }\n      return {\n        cid: leaf.cid,\n        path: file.path,\n        unixfs: leaf.unixfs,\n        size: leaf.size\n      };\n    }\n    const f = new ipfsUnixfs.UnixFS({\n      type: 'file',\n      mtime: file.mtime,\n      mode: file.mode\n    });\n    const links = leaves.filter(leaf => {\n      if (leaf.cid.code === rawCodec__namespace.code && leaf.size) {\n        return true;\n      }\n      if (leaf.unixfs && !leaf.unixfs.data && leaf.unixfs.fileSize()) {\n        return true;\n      }\n      return Boolean(leaf.unixfs && leaf.unixfs.data && leaf.unixfs.data.length);\n    }).map(leaf => {\n      if (leaf.cid.code === rawCodec__namespace.code) {\n        f.addBlockSize(leaf.size);\n        return {\n          Name: '',\n          Tsize: leaf.size,\n          Hash: leaf.cid\n        };\n      }\n      if (!leaf.unixfs || !leaf.unixfs.data) {\n        f.addBlockSize(leaf.unixfs && leaf.unixfs.fileSize() || 0);\n      } else {\n        f.addBlockSize(leaf.unixfs.data.length);\n      }\n      return {\n        Name: '',\n        Tsize: leaf.size,\n        Hash: leaf.cid\n      };\n    });\n    const node = {\n      Data: f.marshal(),\n      Links: links\n    };\n    const buffer = dagPb.encode(dagPb.prepare(node));\n    const cid = await persist(buffer, blockstore, options);\n    return {\n      cid,\n      path: file.path,\n      unixfs: f,\n      size: buffer.length + node.Links.reduce((acc, curr) => acc + curr.Tsize, 0)\n    };\n  }\n  return reducer;\n};\nfunction fileBuilder(file, block, options) {\n  const dagBuilder = dagBuilders[options.strategy];\n  if (!dagBuilder) {\n    throw errCode__default[\"default\"](new Error(`Unknown importer build strategy name: ${ options.strategy }`), 'ERR_BAD_STRATEGY');\n  }\n  return dagBuilder(buildFileBatch(file, block, options), reduce(file, block, options), options);\n}\n\nmodule.exports = fileBuilder;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}