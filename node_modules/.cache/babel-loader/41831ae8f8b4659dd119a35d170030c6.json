{"ast":null,"code":"'use strict';\n\nconst createPublishAPI = require('./publish');\n\nconst createResolveAPI = require('./resolve');\n\nconst PubSubAPI = require('./pubsub');\n\nclass NameAPI {\n  /**\n   * @param {Object} config\n   * @param {import('../ipns')} config.ipns\n   * @param {import('peer-id')} config.peerId\n   * @param {import('../../types').Options} config.options\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n   * @param {import('ipfs-core-types/src/root').API[\"isOnline\"]} config.isOnline\n   * @param {import('libp2p/src/keychain')} config.keychain\n   * @param {import('ipfs-core-types/src/root').API[\"dns\"]} config.dns\n   */\n  constructor(_ref) {\n    let {\n      dns,\n      ipns,\n      repo,\n      codecs,\n      peerId,\n      isOnline,\n      keychain,\n      options\n    } = _ref;\n    this.publish = createPublishAPI({\n      ipns,\n      repo,\n      codecs,\n      peerId,\n      isOnline,\n      keychain\n    });\n    this.resolve = createResolveAPI({\n      dns,\n      ipns,\n      peerId,\n      isOnline,\n      options\n    });\n    this.pubsub = new PubSubAPI({\n      ipns,\n      options\n    });\n  }\n\n}\n\nmodule.exports = NameAPI;","map":{"version":3,"names":["createPublishAPI","require","createResolveAPI","PubSubAPI","NameAPI","constructor","dns","ipns","repo","codecs","peerId","isOnline","keychain","options","publish","resolve","pubsub","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/name/index.js"],"sourcesContent":["'use strict'\n\nconst createPublishAPI = require('./publish')\nconst createResolveAPI = require('./resolve')\nconst PubSubAPI = require('./pubsub')\n\nclass NameAPI {\n  /**\n   * @param {Object} config\n   * @param {import('../ipns')} config.ipns\n   * @param {import('peer-id')} config.peerId\n   * @param {import('../../types').Options} config.options\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n   * @param {import('ipfs-core-types/src/root').API[\"isOnline\"]} config.isOnline\n   * @param {import('libp2p/src/keychain')} config.keychain\n   * @param {import('ipfs-core-types/src/root').API[\"dns\"]} config.dns\n   */\n  constructor ({ dns, ipns, repo, codecs, peerId, isOnline, keychain, options }) {\n    this.publish = createPublishAPI({ ipns, repo, codecs, peerId, isOnline, keychain })\n    this.resolve = createResolveAPI({ dns, ipns, peerId, isOnline, options })\n    this.pubsub = new PubSubAPI({ ipns, options })\n  }\n}\n\nmodule.exports = NameAPI\n"],"mappings":"AAAA;;AAEA,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,WAAD,CAAhC;;AACA,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,WAAD,CAAhC;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,UAAD,CAAzB;;AAEA,MAAMG,OAAN,CAAc;EACZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,WAAW,OAAoE;IAAA,IAAlE;MAAEC,GAAF;MAAOC,IAAP;MAAaC,IAAb;MAAmBC,MAAnB;MAA2BC,MAA3B;MAAmCC,QAAnC;MAA6CC,QAA7C;MAAuDC;IAAvD,CAAkE;IAC7E,KAAKC,OAAL,GAAed,gBAAgB,CAAC;MAAEO,IAAF;MAAQC,IAAR;MAAcC,MAAd;MAAsBC,MAAtB;MAA8BC,QAA9B;MAAwCC;IAAxC,CAAD,CAA/B;IACA,KAAKG,OAAL,GAAeb,gBAAgB,CAAC;MAAEI,GAAF;MAAOC,IAAP;MAAaG,MAAb;MAAqBC,QAArB;MAA+BE;IAA/B,CAAD,CAA/B;IACA,KAAKG,MAAL,GAAc,IAAIb,SAAJ,CAAc;MAAEI,IAAF;MAAQM;IAAR,CAAd,CAAd;EACD;;AAhBW;;AAmBdI,MAAM,CAACC,OAAP,GAAiBd,OAAjB"},"metadata":{},"sourceType":"script"}