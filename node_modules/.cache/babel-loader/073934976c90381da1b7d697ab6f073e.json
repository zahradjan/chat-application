{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar mergeOptions = require('merge-options').bind({\n  ignoreUndefined: true\n});\n\nvar toMfsPath = require('./utils/to-mfs-path');\n\nvar _require = require('ipfs-unixfs-exporter'),\n    exporter = _require.exporter;\n\nvar log = require('debug')('ipfs:mfs:stat');\n\nvar errCode = require('err-code');\n\nvar withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nvar dagPb = require('@ipld/dag-pb');\n/**\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} withLocal\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\n\n\nvar defaultOptions = {\n  withLocal: false\n};\n/**\n * @typedef {import('ipfs-core-types/src/files').StatResult} StatResult\n */\n\n/**\n * @param {MfsContext} context\n */\n\nmodule.exports = function (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API[\"stat\"]}\n   */\n  function mfsStat(_x) {\n    return _mfsStat.apply(this, arguments);\n  }\n\n  function _mfsStat() {\n    _mfsStat = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(path) {\n      var options,\n          _yield$toMfsPath,\n          type,\n          cid,\n          mfsPath,\n          exportPath,\n          file,\n          _args = arguments;\n\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n\n              /** @type {DefaultOptions} */\n              options = mergeOptions(defaultOptions, options);\n              log(\"Fetching stats for \".concat(path));\n              _context.next = 5;\n              return toMfsPath(context, path, options);\n\n            case 5:\n              _yield$toMfsPath = _context.sent;\n              type = _yield$toMfsPath.type;\n              cid = _yield$toMfsPath.cid;\n              mfsPath = _yield$toMfsPath.mfsPath;\n              exportPath = type === 'ipfs' && cid ? cid : mfsPath;\n              _context.prev = 10;\n              _context.next = 13;\n              return exporter(exportPath, context.repo.blocks);\n\n            case 13:\n              file = _context.sent;\n              _context.next = 21;\n              break;\n\n            case 16:\n              _context.prev = 16;\n              _context.t0 = _context[\"catch\"](10);\n\n              if (!(_context.t0.code === 'ERR_NOT_FOUND')) {\n                _context.next = 20;\n                break;\n              }\n\n              throw errCode(new Error(\"\".concat(path, \" does not exist\")), 'ERR_NOT_FOUND');\n\n            case 20:\n              throw _context.t0;\n\n            case 21:\n              if (statters[file.type]) {\n                _context.next = 23;\n                break;\n              }\n\n              throw new Error(\"Cannot stat codec \".concat(file.cid.code));\n\n            case 23:\n              return _context.abrupt(\"return\", statters[file.type](file));\n\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[10, 16]]);\n    }));\n    return _mfsStat.apply(this, arguments);\n  }\n\n  return withTimeoutOption(mfsStat);\n};\n/** @type {Record<string, (file:any) => StatResult>} */\n\n\nvar statters = {\n  /**\n   * @param {import('ipfs-unixfs-exporter').RawNode} file\n   */\n  raw: function raw(file) {\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      blocks: 0,\n      type: 'file',\n      // for go compatibility\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    };\n  },\n\n  /**\n   * @param {import('ipfs-unixfs-exporter').UnixFSFile} file\n   */\n  file: function file(_file) {\n    /** @type {StatResult} */\n    var stat = {\n      cid: _file.cid,\n      type: 'file',\n      size: _file.unixfs.fileSize(),\n      cumulativeSize: dagPb.encode(_file.node).length + (_file.node.Links || []).reduce(function (acc, curr) {\n        return acc + (curr.Tsize || 0);\n      }, 0),\n      blocks: _file.unixfs.blockSizes.length,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false,\n      mode: _file.unixfs.mode\n    };\n\n    if (_file.unixfs.mtime) {\n      stat.mtime = _file.unixfs.mtime;\n    }\n\n    return stat;\n  },\n\n  /**\n   * @param {import('ipfs-unixfs-exporter').UnixFSDirectory} file\n   */\n  directory: function directory(file) {\n    /** @type {StatResult} */\n    var stat = {\n      cid: file.cid,\n      type: 'directory',\n      size: 0,\n      cumulativeSize: dagPb.encode(file.node).length + (file.node.Links || []).reduce(function (acc, curr) {\n        return acc + (curr.Tsize || 0);\n      }, 0),\n      blocks: file.node.Links.length,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false,\n      mode: file.unixfs.mode\n    };\n\n    if (file.unixfs.mtime) {\n      stat.mtime = file.unixfs.mtime;\n    }\n\n    return stat;\n  },\n\n  /**\n   * @param {import('ipfs-unixfs-exporter').ObjectNode} file\n   */\n  object: function object(file) {\n    /** @type {StatResult} */\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      type: 'file',\n      // for go compatibility\n      blocks: 0,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    };\n  },\n\n  /**\n   * @param {import('ipfs-unixfs-exporter').IdentityNode} file\n   */\n  identity: function identity(file) {\n    /** @type {StatResult} */\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      blocks: 0,\n      type: 'file',\n      // for go compatibility\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    };\n  }\n};","map":{"version":3,"names":["mergeOptions","require","bind","ignoreUndefined","toMfsPath","exporter","log","errCode","withTimeoutOption","dagPb","defaultOptions","withLocal","module","exports","context","mfsStat","path","options","type","cid","mfsPath","exportPath","repo","blocks","file","code","Error","statters","raw","size","node","length","cumulativeSize","local","undefined","sizeLocal","withLocality","stat","unixfs","fileSize","encode","Links","reduce","acc","curr","Tsize","blockSizes","mode","mtime","directory","object","identity"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/files/stat.js"],"sourcesContent":["'use strict'\n\nconst mergeOptions = require('merge-options').bind({ ignoreUndefined: true })\nconst toMfsPath = require('./utils/to-mfs-path')\nconst { exporter } = require('ipfs-unixfs-exporter')\nconst log = require('debug')('ipfs:mfs:stat')\nconst errCode = require('err-code')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst dagPb = require('@ipld/dag-pb')\n\n/**\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} withLocal\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  withLocal: false\n}\n\n/**\n * @typedef {import('ipfs-core-types/src/files').StatResult} StatResult\n */\n\n/**\n * @param {MfsContext} context\n */\nmodule.exports = (context) => {\n  /**\n   * @type {import('ipfs-core-types/src/files').API[\"stat\"]}\n   */\n  async function mfsStat (path, options = {}) {\n    /** @type {DefaultOptions} */\n    options = mergeOptions(defaultOptions, options)\n\n    log(`Fetching stats for ${path}`)\n\n    const {\n      type,\n      cid,\n      mfsPath\n    } = await toMfsPath(context, path, options)\n\n    const exportPath = type === 'ipfs' && cid ? cid : mfsPath\n    let file\n\n    try {\n      file = await exporter(exportPath, context.repo.blocks)\n    } catch (err) {\n      if (err.code === 'ERR_NOT_FOUND') {\n        throw errCode(new Error(`${path} does not exist`), 'ERR_NOT_FOUND')\n      }\n\n      throw err\n    }\n\n    if (!statters[file.type]) {\n      throw new Error(`Cannot stat codec ${file.cid.code}`)\n    }\n\n    return statters[file.type](file)\n  }\n\n  return withTimeoutOption(mfsStat)\n}\n\n/** @type {Record<string, (file:any) => StatResult>} */\nconst statters = {\n  /**\n   * @param {import('ipfs-unixfs-exporter').RawNode} file\n   */\n  raw: (file) => {\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      blocks: 0,\n      type: 'file', // for go compatibility\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    }\n  },\n  /**\n   * @param {import('ipfs-unixfs-exporter').UnixFSFile} file\n   */\n  file: (file) => {\n    /** @type {StatResult} */\n    const stat = {\n      cid: file.cid,\n      type: 'file',\n      size: file.unixfs.fileSize(),\n      cumulativeSize: dagPb.encode(file.node).length + (file.node.Links || []).reduce((acc, curr) => acc + (curr.Tsize || 0), 0),\n      blocks: file.unixfs.blockSizes.length,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false,\n      mode: file.unixfs.mode\n    }\n\n    if (file.unixfs.mtime) {\n      stat.mtime = file.unixfs.mtime\n    }\n\n    return stat\n  },\n  /**\n   * @param {import('ipfs-unixfs-exporter').UnixFSDirectory} file\n   */\n  directory: (file) => {\n    /** @type {StatResult} */\n    const stat = {\n      cid: file.cid,\n      type: 'directory',\n      size: 0,\n      cumulativeSize: dagPb.encode(file.node).length + (file.node.Links || []).reduce((acc, curr) => acc + (curr.Tsize || 0), 0),\n      blocks: file.node.Links.length,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false,\n      mode: file.unixfs.mode\n    }\n\n    if (file.unixfs.mtime) {\n      stat.mtime = file.unixfs.mtime\n    }\n\n    return stat\n  },\n  /**\n   * @param {import('ipfs-unixfs-exporter').ObjectNode} file\n   */\n  object: (file) => {\n    /** @type {StatResult} */\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      type: 'file', // for go compatibility\n      blocks: 0,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    }\n  },\n  /**\n   * @param {import('ipfs-unixfs-exporter').IdentityNode} file\n   */\n  identity: (file) => {\n    /** @type {StatResult} */\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      blocks: 0,\n      type: 'file', // for go compatibility\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}