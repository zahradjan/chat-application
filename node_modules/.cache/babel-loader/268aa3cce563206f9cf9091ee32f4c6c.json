{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _require = require('./utils'),\n    cleanCid = _require.cleanCid;\n\nvar withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\n\n\nmodule.exports = function (_ref) {\n  var repo = _ref.repo,\n      preload = _ref.preload;\n\n  /**\n   * @type {import('ipfs-core-types/src/block').API[\"stat\"]}\n   */\n  function stat(_x) {\n    return _stat.apply(this, arguments);\n  }\n\n  function _stat() {\n    _stat = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(cid) {\n      var options,\n          block,\n          _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              cid = cleanCid(cid);\n\n              if (options.preload !== false) {\n                preload(cid);\n              }\n\n              _context.next = 5;\n              return repo.blocks.get(cid);\n\n            case 5:\n              block = _context.sent;\n              return _context.abrupt(\"return\", {\n                cid: cid,\n                size: block.length\n              });\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _stat.apply(this, arguments);\n  }\n\n  return withTimeoutOption(stat);\n};","map":{"version":3,"names":["require","cleanCid","withTimeoutOption","module","exports","repo","preload","stat","cid","options","blocks","get","block","size","length"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/block/stat.js"],"sourcesContent":["'use strict'\n\nconst { cleanCid } = require('./utils')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\n\nmodule.exports = ({ repo, preload }) => {\n  /**\n   * @type {import('ipfs-core-types/src/block').API[\"stat\"]}\n   */\n  async function stat (cid, options = {}) {\n    cid = cleanCid(cid)\n\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    const block = await repo.blocks.get(cid)\n\n    return { cid, size: block.length }\n  }\n\n  return withTimeoutOption(stat)\n}\n"],"mappings":"AAAA;;;;;;AAEA,eAAqBA,OAAO,CAAC,SAAD,CAA5B;AAAA,IAAQC,QAAR,YAAQA,QAAR;;AACA,IAAMC,iBAAiB,GAAGF,OAAO,CAAC,yCAAD,CAAjC;AAEA;AACA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiB,gBAAuB;EAAA,IAApBC,IAAoB,QAApBA,IAAoB;EAAA,IAAdC,OAAc,QAAdA,OAAc;;EACtC;AACF;AACA;EAHwC,SAIvBC,IAJuB;IAAA;EAAA;;EAAA;IAAA,mEAItC,iBAAqBC,GAArB;MAAA;MAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAA0BC,OAA1B,2DAAoC,EAApC;cACED,GAAG,GAAGP,QAAQ,CAACO,GAAD,CAAd;;cAEA,IAAIC,OAAO,CAACH,OAAR,KAAoB,KAAxB,EAA+B;gBAC7BA,OAAO,CAACE,GAAD,CAAP;cACD;;cALH;cAAA,OAOsBH,IAAI,CAACK,MAAL,CAAYC,GAAZ,CAAgBH,GAAhB,CAPtB;;YAAA;cAOQI,KAPR;cAAA,iCASS;gBAAEJ,GAAG,EAAHA,GAAF;gBAAOK,IAAI,EAAED,KAAK,CAACE;cAAnB,CATT;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAJsC;IAAA;EAAA;;EAgBtC,OAAOZ,iBAAiB,CAACK,IAAD,CAAxB;AACD,CAjBD"},"metadata":{},"sourceType":"script"}