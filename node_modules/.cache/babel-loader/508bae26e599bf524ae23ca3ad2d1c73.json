{"ast":null,"code":"import OrbitDB from \"orbit-db\";\nimport IPFS from \"ipfs\";\nimport { makeAutoObservable } from \"mobx\";\nimport IpfsPubsubPeerMonitor from \"ipfs-pubsub-peer-monitor\";\nexport default class DataStore {\n  constructor(rootStore) {\n    this.rootStore = rootStore;\n    makeAutoObservable(this);\n  }\n\n  async init() {\n    if (this.ipfsNode !== undefined) return;\n    if (this.orbitDb !== undefined) return;\n    const dbConfig = {\n      // If database doesn't exist, create it\n      create: true,\n      // Don't wait to load from the network\n      sync: true,\n      // directory: `/orbitdb/decentio-orbitdb-chat-${Math.random()}}`,\n      // Load only the local version of the database\n      localOnly: false,\n      // Allow anyone to write to the database,\n      // otherwise only the creator of the database can write\n      accessController: {\n        write: [\"*\"]\n      }\n    };\n    const ipfsConfig = {\n      // preload: { enabled: false },\n      relay: {\n        enabled: true,\n        hop: {\n          enabled: true,\n          active: true\n        }\n      },\n      // libp2p: {\n      //   config: {\n      //     dht: {\n      //       enabled: true,\n      //     },\n      //     modules: {\n      //       transport: [\"WebRTCStar\", \"WebSockets\"],\n      //     },\n      //     // transport: {\n      //     //   WebRTCStar: {\n      //     //     wrtc,\n      //     //   },\n      //     // },\n      //   },\n      // },\n      // peerDiscovery: {\n      //   autoDial: true, // Auto connect to discovered peers (limited by ConnectionManager minPeers)\n      //   mdns: {\n      //     // mdns options\n      //     interval: 1000, // ms\n      //     enabled: true,\n      //   },\n      //   webRTCStar: {\n      //     // webrtc-star options\n      //     interval: 1000, // ms\n      //     enabled: false,\n      //   },\n      //   // .. other discovery module options.\n      // },\n      // Prevents large data transfers\n      //TODO: nejak oddelit at to neni random ale treba username nebo neco\n      repo: `/orbitdb/decentio-orbitdb-chat-ipfs-${this.rootStore.sessionStore._user}}`,\n      EXPERIMENTAL: {\n        pubsub: true\n      },\n      config: {\n        Addresses: {\n          Swarm: [//       // Use IPFS dev signal server\n          //       // Websocket:\n          // \"/dns4/ws-star-signal-1.servep2p.com/tcp/443/wss/p2p-websocket-star\",\n          // \"/dns4/ws-star-signal-2.servep2p.com/tcp/443/wss/p2p-websocket-star\",\n          // \"/dns4/ws-star.discovery.libp2p.io/tcp/443/wss/p2p-websocket-star\",\n          // WebRTC:\n          \"/dns4/wrtc-star1.par.dwebops.pub/tcp/443/wss/p2p-webrtc-star/\", \"/dns4/wrtc-star2.sjc.dwebops.pub/tcp/443/wss/p2p-webrtc-star/\", \"/dns4/webrtc-star.discovery.libp2p.io/tcp/443/wss/p2p-webrtc-star/\", \"/dns4/wrtc-star1.par.dwebops.pub/tcp/443/wss/p2p-webrtc-star\", \"/dns4/wrtc-star2.sjc.dwebops.pub/tcp/443/wss/p2p-webrtc-star\", // \"/ip4/0.0.0.0/tcp/4002\",\n          // \"/ip4/127.0.0.1/tcp/4003/ws\",\n          // \"/libp2p-webrtc-star/dns4/star-signal.cloud.ipfs.team/wss\",\n          // \"/dns4/star-signal.cloud.ipfs.team/wss/p2p-webrtc-star\",\n          //       // Use local signal server\n          \"/ip4/0.0.0.0/tcp/4011/ws\", \"/ip6/::/tcp/4011/ws\"]\n        },\n        Bootstrap: []\n      }\n    };\n    await this.start(ipfsConfig, dbConfig);\n  }\n\n  async start(ipfsConf, orbitDbconf) {\n    await this.startIpfsNode(ipfsConf);\n    await this.startOrbitDb(orbitDbconf); // this.ipfsNode.config.set(\"Addresses.Swarm\", [\"/ip4/0.0.0.0/tcp/4002\", \"/ip4/127.0.0.1/tcp/4003/ws\"], console.log);\n    //TODO: Peer se connecti na stejnym pubsub topicu a lze volat ten connect, joined apod.\n    //potrebuji je umet propojit tak aby kazdy mel svoji DB a komunikovali nejakym chat roomu == pubsub room a v tom se ukladali ty zpravy\n    // vymodelovat si podrobneji jak tam bude proudit ta informace\n\n    const peerInfo = await this.ipfsNode.id();\n    console.log(\"Peer ID: \" + peerInfo.id);\n    this.ipfsNode.libp2p.on(\"peer:connect\", msg => console.log(\"MSG\" + msg));\n    console.log(this.ipfsNode.swarm); // this.ipfsNode.libp2p.pubsub.on(\"peer:connect\", (peer) => console.log(\"Connected peer: \" + peer));\n    // this.ipfsNode.libp2p.on(\"peer:discovery\", (peer) => console.log(\"Peer: \" + peer));\n    // const defaultOptions = { accessController: { write: [this.orbitDb.identity.id] } };\n\n    this.peersDb = await this.orbitDb.feed(\"peers\");\n    await this.peersDb.load();\n    console.log(this.peersDb.address.toString());\n    this.ipfsNode.pubsub.subscribe(this.peersDb.address.toString(), msg => console.log(\"peersdbsub: \" + msg));\n    const monitor = new IpfsPubsubPeerMonitor(this.ipfsNode.pubsub, this.peersDb.address.toString()); // this.ipfsNode.libp2p.pubsub.unsubscribe(\"DecentioPubsubNetwork\");\n    // this.ipfsNode.libp2p.pubsub.subscribe(\"DecentioPubsubNetwork\", (msg) => console.log(msg));\n    // this.ipfsNode.libp2p.pubsub.publish(\"DecentioPubsubNetwork\", { message: \"Hello\", name: this.rootStore.sessionStore._user });\n    // this.peersDb.events.on(\"peer\", (peer) => console.log(\"PeersDB: \" + peer));\n    // this.peersDb.events.on(\"replicated\", (address) => console.log(\"Adrress: \" + address));\n    // this.peersDb.events.on(\"ready\", () => {\n    //   console.log(\"ready\");\n    // });\n\n    monitor.on(\"join\", async peerJoined => {\n      await this.peersDb.add({\n        peerId: peerJoined\n      });\n    });\n    monitor.on(\"leave\", peer => console.log(\"Peer left\", peer));\n    monitor.on(\"error\", e => console.error(e));\n    console.log(\"Peer Addresses: \" + peerInfo.addresses);\n    console.log(await this.getIpfsPeers());\n    const topics = await this.ipfsNode.pubsub.ls();\n    console.log(topics);\n  }\n\n  async handleMessageReceived(msg) {\n    const parsedMsg = JSON.parse(msg.data.toString());\n    const msgKeys = Object.keys(parsedMsg);\n    console.log(\"ParsedDb: \" + parsedMsg);\n    console.log(msgKeys[0]);\n\n    switch (msgKeys[0]) {\n      case \"userDb\":\n        var peerDb = await this.orbitDb.open(parsedMsg.userDb);\n        peerDb.events.on(\"replicated\", async () => {\n          console.log(\"DB replicated\"); // if (peerDb.get(\"pieces\")) {\n\n          await this.peersDb.set(peerDb.id, peerDb.all);\n          console.log(peerDb.all); // }\n        });\n        break;\n\n      default:\n        break;\n    }\n\n    console.log(msg.data.toString()); // if (this.onmessage) this.onmessage(msg);\n  }\n\n  async startIpfsNode(ipfsConf) {\n    this.ipfsNode = await IPFS.create(ipfsConf);\n  }\n\n  async startOrbitDb(orbitDbconf) {\n    this.orbitDb = await OrbitDB.createInstance(this.ipfsNode, orbitDbconf);\n  }\n\n  async getIpfsPeers() {\n    const peers = await this.ipfsNode.swarm.peers(); // console.log(peers);\n\n    return peers;\n  }\n\n  async createDBStore(address) {\n    const store = await this.orbitDb.docstore(address);\n    await store.load();\n    return store;\n  }\n\n  async handleStop() {\n    await this.orbitDb.disconnect();\n    await this.ipfsNode.stop();\n    delete this.orbitDb;\n    delete this.ipfsNode;\n  }\n\n}","map":{"version":3,"names":["OrbitDB","IPFS","makeAutoObservable","IpfsPubsubPeerMonitor","DataStore","constructor","rootStore","init","ipfsNode","undefined","orbitDb","dbConfig","create","sync","localOnly","accessController","write","ipfsConfig","relay","enabled","hop","active","repo","sessionStore","_user","EXPERIMENTAL","pubsub","config","Addresses","Swarm","Bootstrap","start","ipfsConf","orbitDbconf","startIpfsNode","startOrbitDb","peerInfo","id","console","log","libp2p","on","msg","swarm","peersDb","feed","load","address","toString","subscribe","monitor","peerJoined","add","peerId","peer","e","error","addresses","getIpfsPeers","topics","ls","handleMessageReceived","parsedMsg","JSON","parse","data","msgKeys","Object","keys","peerDb","open","userDb","events","set","all","createInstance","peers","createDBStore","store","docstore","handleStop","disconnect","stop"],"sources":["C:/Users/zajan/GitHub/chatApplication/src/data/store/DataStore.js"],"sourcesContent":["import OrbitDB from \"orbit-db\";\r\nimport IPFS from \"ipfs\";\r\nimport { makeAutoObservable } from \"mobx\";\r\nimport IpfsPubsubPeerMonitor from \"ipfs-pubsub-peer-monitor\";\r\nexport default class DataStore {\r\n  ipfsNode;\r\n  orbitDb;\r\n  pubsubMonitor;\r\n  constructor(rootStore) {\r\n    this.rootStore = rootStore;\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  async init() {\r\n    if (this.ipfsNode !== undefined) return;\r\n    if (this.orbitDb !== undefined) return;\r\n\r\n    const dbConfig = {\r\n      // If database doesn't exist, create it\r\n      create: true,\r\n      // Don't wait to load from the network\r\n      sync: true,\r\n      // directory: `/orbitdb/decentio-orbitdb-chat-${Math.random()}}`,\r\n      // Load only the local version of the database\r\n      localOnly: false,\r\n      // Allow anyone to write to the database,\r\n      // otherwise only the creator of the database can write\r\n      accessController: {\r\n        write: [\"*\"],\r\n      },\r\n    };\r\n    const ipfsConfig = {\r\n      // preload: { enabled: false },\r\n      relay: { enabled: true, hop: { enabled: true, active: true } },\r\n      // libp2p: {\r\n      //   config: {\r\n      //     dht: {\r\n      //       enabled: true,\r\n      //     },\r\n      //     modules: {\r\n      //       transport: [\"WebRTCStar\", \"WebSockets\"],\r\n      //     },\r\n      //     // transport: {\r\n      //     //   WebRTCStar: {\r\n      //     //     wrtc,\r\n      //     //   },\r\n      //     // },\r\n      //   },\r\n      // },\r\n      // peerDiscovery: {\r\n      //   autoDial: true, // Auto connect to discovered peers (limited by ConnectionManager minPeers)\r\n      //   mdns: {\r\n      //     // mdns options\r\n      //     interval: 1000, // ms\r\n      //     enabled: true,\r\n      //   },\r\n      //   webRTCStar: {\r\n      //     // webrtc-star options\r\n      //     interval: 1000, // ms\r\n      //     enabled: false,\r\n      //   },\r\n      //   // .. other discovery module options.\r\n      // },\r\n      // Prevents large data transfers\r\n      //TODO: nejak oddelit at to neni random ale treba username nebo neco\r\n      repo: `/orbitdb/decentio-orbitdb-chat-ipfs-${this.rootStore.sessionStore._user}}`,\r\n      EXPERIMENTAL: {\r\n        pubsub: true,\r\n      },\r\n\r\n      config: {\r\n        Addresses: {\r\n          Swarm: [\r\n            //       // Use IPFS dev signal server\r\n            //       // Websocket:\r\n            // \"/dns4/ws-star-signal-1.servep2p.com/tcp/443/wss/p2p-websocket-star\",\r\n            // \"/dns4/ws-star-signal-2.servep2p.com/tcp/443/wss/p2p-websocket-star\",\r\n            // \"/dns4/ws-star.discovery.libp2p.io/tcp/443/wss/p2p-websocket-star\",\r\n            // WebRTC:\r\n            \"/dns4/wrtc-star1.par.dwebops.pub/tcp/443/wss/p2p-webrtc-star/\",\r\n            \"/dns4/wrtc-star2.sjc.dwebops.pub/tcp/443/wss/p2p-webrtc-star/\",\r\n            \"/dns4/webrtc-star.discovery.libp2p.io/tcp/443/wss/p2p-webrtc-star/\",\r\n            \"/dns4/wrtc-star1.par.dwebops.pub/tcp/443/wss/p2p-webrtc-star\",\r\n            \"/dns4/wrtc-star2.sjc.dwebops.pub/tcp/443/wss/p2p-webrtc-star\",\r\n            // \"/ip4/0.0.0.0/tcp/4002\",\r\n            // \"/ip4/127.0.0.1/tcp/4003/ws\",\r\n            // \"/libp2p-webrtc-star/dns4/star-signal.cloud.ipfs.team/wss\",\r\n            // \"/dns4/star-signal.cloud.ipfs.team/wss/p2p-webrtc-star\",\r\n            //       // Use local signal server\r\n            \"/ip4/0.0.0.0/tcp/4011/ws\",\r\n            \"/ip6/::/tcp/4011/ws\",\r\n          ],\r\n        },\r\n        Bootstrap: [],\r\n      },\r\n    };\r\n\r\n    await this.start(ipfsConfig, dbConfig);\r\n  }\r\n\r\n  async start(ipfsConf, orbitDbconf) {\r\n    await this.startIpfsNode(ipfsConf);\r\n    await this.startOrbitDb(orbitDbconf);\r\n    // this.ipfsNode.config.set(\"Addresses.Swarm\", [\"/ip4/0.0.0.0/tcp/4002\", \"/ip4/127.0.0.1/tcp/4003/ws\"], console.log);\r\n    //TODO: Peer se connecti na stejnym pubsub topicu a lze volat ten connect, joined apod.\r\n    //potrebuji je umet propojit tak aby kazdy mel svoji DB a komunikovali nejakym chat roomu == pubsub room a v tom se ukladali ty zpravy\r\n    // vymodelovat si podrobneji jak tam bude proudit ta informace\r\n    const peerInfo = await this.ipfsNode.id();\r\n    console.log(\"Peer ID: \" + peerInfo.id);\r\n    this.ipfsNode.libp2p.on(\"peer:connect\", (msg) => console.log(\"MSG\" + msg));\r\n    console.log(this.ipfsNode.swarm);\r\n    // this.ipfsNode.libp2p.pubsub.on(\"peer:connect\", (peer) => console.log(\"Connected peer: \" + peer));\r\n    // this.ipfsNode.libp2p.on(\"peer:discovery\", (peer) => console.log(\"Peer: \" + peer));\r\n    // const defaultOptions = { accessController: { write: [this.orbitDb.identity.id] } };\r\n    this.peersDb = await this.orbitDb.feed(\"peers\");\r\n    await this.peersDb.load();\r\n    console.log(this.peersDb.address.toString());\r\n    this.ipfsNode.pubsub.subscribe(this.peersDb.address.toString(), (msg) => console.log(\"peersdbsub: \" + msg));\r\n    const monitor = new IpfsPubsubPeerMonitor(this.ipfsNode.pubsub, this.peersDb.address.toString());\r\n    // this.ipfsNode.libp2p.pubsub.unsubscribe(\"DecentioPubsubNetwork\");\r\n    // this.ipfsNode.libp2p.pubsub.subscribe(\"DecentioPubsubNetwork\", (msg) => console.log(msg));\r\n    // this.ipfsNode.libp2p.pubsub.publish(\"DecentioPubsubNetwork\", { message: \"Hello\", name: this.rootStore.sessionStore._user });\r\n\r\n    // this.peersDb.events.on(\"peer\", (peer) => console.log(\"PeersDB: \" + peer));\r\n    // this.peersDb.events.on(\"replicated\", (address) => console.log(\"Adrress: \" + address));\r\n    // this.peersDb.events.on(\"ready\", () => {\r\n    //   console.log(\"ready\");\r\n    // });\r\n    monitor.on(\"join\", async (peerJoined) => {\r\n      await this.peersDb.add({ peerId: peerJoined });\r\n    });\r\n\r\n    monitor.on(\"leave\", (peer) => console.log(\"Peer left\", peer));\r\n    monitor.on(\"error\", (e) => console.error(e));\r\n\r\n    console.log(\"Peer Addresses: \" + peerInfo.addresses);\r\n    console.log(await this.getIpfsPeers());\r\n\r\n    const topics = await this.ipfsNode.pubsub.ls();\r\n    console.log(topics);\r\n  }\r\n\r\n  async handleMessageReceived(msg) {\r\n    const parsedMsg = JSON.parse(msg.data.toString());\r\n    const msgKeys = Object.keys(parsedMsg);\r\n    console.log(\"ParsedDb: \" + parsedMsg);\r\n    console.log(msgKeys[0]);\r\n    switch (msgKeys[0]) {\r\n      case \"userDb\":\r\n        var peerDb = await this.orbitDb.open(parsedMsg.userDb);\r\n        peerDb.events.on(\"replicated\", async () => {\r\n          console.log(\"DB replicated\");\r\n          // if (peerDb.get(\"pieces\")) {\r\n          await this.peersDb.set(peerDb.id, peerDb.all);\r\n          console.log(peerDb.all);\r\n          // }\r\n        });\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    console.log(msg.data.toString());\r\n    // if (this.onmessage) this.onmessage(msg);\r\n  }\r\n\r\n  async startIpfsNode(ipfsConf) {\r\n    this.ipfsNode = await IPFS.create(ipfsConf);\r\n  }\r\n  async startOrbitDb(orbitDbconf) {\r\n    this.orbitDb = await OrbitDB.createInstance(this.ipfsNode, orbitDbconf);\r\n  }\r\n  async getIpfsPeers() {\r\n    const peers = await this.ipfsNode.swarm.peers();\r\n    // console.log(peers);\r\n    return peers;\r\n  }\r\n\r\n  async createDBStore(address) {\r\n    const store = await this.orbitDb.docstore(address);\r\n    await store.load();\r\n    return store;\r\n  }\r\n\r\n  async handleStop() {\r\n    await this.orbitDb.disconnect();\r\n    await this.ipfsNode.stop();\r\n    delete this.orbitDb;\r\n    delete this.ipfsNode;\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}