{"ast":null,"code":"var _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar path = require('path');\n\nvar fs = require('../fs-shim');\n\nvar Cache = require('orbit-db-cache');\n\nvar Logger = require('logplease');\n\nvar logger = Logger.create('orbit-db');\nLogger.setLogLevel('ERROR');\n\nfunction migrate(_x, _x2, _x3) {\n  return _migrate.apply(this, arguments);\n}\n\nfunction _migrate() {\n  _migrate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(OrbitDB, options, dbAddress) {\n    var oldCache, oldStore, addr, _localHeads, keyRoot, migrationKeys, i, key, val;\n\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            oldCache = OrbitDB.caches[options.directory] ? OrbitDB.caches[options.directory].cache : null;\n\n            if (oldCache) {\n              _context.next = 9;\n              break;\n            }\n\n            addr = (path.posix || path).join(OrbitDB.directory, dbAddress.root, dbAddress.path);\n\n            if (!(fs && fs.existsSync && !fs.existsSync(addr))) {\n              _context.next = 5;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 5:\n            _context.next = 7;\n            return OrbitDB.storage.createStore(addr);\n\n          case 7:\n            oldStore = _context.sent;\n            oldCache = new Cache(oldStore);\n\n          case 9:\n            _context.next = 11;\n            return oldCache.get('_localHeads');\n\n          case 11:\n            _localHeads = _context.sent;\n\n            if (_localHeads) {\n              _context.next = 14;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 14:\n            keyRoot = dbAddress.toString();\n            logger.debug('Attempting to migrate from old cache location');\n            migrationKeys = ['_remoteHeads', '_localHeads', 'snapshot', 'queue'];\n            _context.t0 = _regeneratorRuntime().keys(migrationKeys);\n\n          case 18:\n            if ((_context.t1 = _context.t0()).done) {\n              _context.next = 35;\n              break;\n            }\n\n            i = _context.t1.value;\n            _context.prev = 20;\n            key = path.join(keyRoot, migrationKeys[i]);\n            _context.next = 24;\n            return oldCache.get(migrationKeys[i]);\n\n          case 24:\n            val = _context.sent;\n\n            if (!val) {\n              _context.next = 28;\n              break;\n            }\n\n            _context.next = 28;\n            return options.cache.set(key, val);\n\n          case 28:\n            _context.next = 33;\n            break;\n\n          case 30:\n            _context.prev = 30;\n            _context.t2 = _context[\"catch\"](20);\n            logger.debug(_context.t2.message);\n\n          case 33:\n            _context.next = 18;\n            break;\n\n          case 35:\n            _context.next = 37;\n            return options.cache.set(path.join(keyRoot, '_manifest'), dbAddress.root);\n\n          case 37:\n            if (!oldStore) {\n              _context.next = 40;\n              break;\n            }\n\n            _context.next = 40;\n            return oldStore.close();\n\n          case 40:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[20, 30]]);\n  }));\n  return _migrate.apply(this, arguments);\n}\n\nmodule.exports = migrate;","map":{"version":3,"names":["path","require","fs","Cache","Logger","logger","create","setLogLevel","migrate","OrbitDB","options","dbAddress","oldCache","caches","directory","cache","addr","posix","join","root","existsSync","storage","createStore","oldStore","get","_localHeads","keyRoot","toString","debug","migrationKeys","i","key","val","set","message","close","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/orbit-db/src/migrations/0.21-0.22.js"],"sourcesContent":["const path = require('path')\nconst fs = require('../fs-shim')\n\nconst Cache = require('orbit-db-cache')\n\nconst Logger = require('logplease')\nconst logger = Logger.create('orbit-db')\nLogger.setLogLevel('ERROR')\n\nasync function migrate (OrbitDB, options, dbAddress) {\n  let oldCache = OrbitDB.caches[options.directory] ? OrbitDB.caches[options.directory].cache : null\n  let oldStore\n\n  if (!oldCache) {\n    const addr = (path.posix || path).join(OrbitDB.directory, dbAddress.root, dbAddress.path)\n    if (fs && fs.existsSync && !fs.existsSync(addr)) return\n    oldStore = await OrbitDB.storage.createStore(addr)\n    oldCache = new Cache(oldStore)\n  }\n  const _localHeads = await oldCache.get('_localHeads')\n  if (!_localHeads) return\n\n  const keyRoot = dbAddress.toString()\n  logger.debug('Attempting to migrate from old cache location')\n  const migrationKeys = [\n    '_remoteHeads',\n    '_localHeads',\n    'snapshot',\n    'queue'\n  ]\n\n  for (const i in migrationKeys) {\n    try {\n      const key = path.join(keyRoot, migrationKeys[i])\n      const val = await oldCache.get(migrationKeys[i])\n      if (val) await options.cache.set(key, val)\n    } catch (e) {\n      logger.debug(e.message)\n    }\n  }\n  await options.cache.set(path.join(keyRoot, '_manifest'), dbAddress.root)\n  if (oldStore) await oldStore.close()\n}\n\nmodule.exports = migrate\n"],"mappings":";;;;AAAA,IAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMC,EAAE,GAAGD,OAAO,CAAC,YAAD,CAAlB;;AAEA,IAAME,KAAK,GAAGF,OAAO,CAAC,gBAAD,CAArB;;AAEA,IAAMG,MAAM,GAAGH,OAAO,CAAC,WAAD,CAAtB;;AACA,IAAMI,MAAM,GAAGD,MAAM,CAACE,MAAP,CAAc,UAAd,CAAf;AACAF,MAAM,CAACG,WAAP,CAAmB,OAAnB;;SAEeC,O;;;;;wEAAf,iBAAwBC,OAAxB,EAAiCC,OAAjC,EAA0CC,SAA1C;IAAA;;IAAA;MAAA;QAAA;UAAA;YACMC,QADN,GACiBH,OAAO,CAACI,MAAR,CAAeH,OAAO,CAACI,SAAvB,IAAoCL,OAAO,CAACI,MAAR,CAAeH,OAAO,CAACI,SAAvB,EAAkCC,KAAtE,GAA8E,IAD/F;;YAAA,IAIOH,QAJP;cAAA;cAAA;YAAA;;YAKUI,IALV,GAKiB,CAAChB,IAAI,CAACiB,KAAL,IAAcjB,IAAf,EAAqBkB,IAArB,CAA0BT,OAAO,CAACK,SAAlC,EAA6CH,SAAS,CAACQ,IAAvD,EAA6DR,SAAS,CAACX,IAAvE,CALjB;;YAAA,MAMQE,EAAE,IAAIA,EAAE,CAACkB,UAAT,IAAuB,CAAClB,EAAE,CAACkB,UAAH,CAAcJ,IAAd,CANhC;cAAA;cAAA;YAAA;;YAAA;;UAAA;YAAA;YAAA,OAOqBP,OAAO,CAACY,OAAR,CAAgBC,WAAhB,CAA4BN,IAA5B,CAPrB;;UAAA;YAOIO,QAPJ;YAQIX,QAAQ,GAAG,IAAIT,KAAJ,CAAUoB,QAAV,CAAX;;UARJ;YAAA;YAAA,OAU4BX,QAAQ,CAACY,GAAT,CAAa,aAAb,CAV5B;;UAAA;YAUQC,WAVR;;YAAA,IAWOA,WAXP;cAAA;cAAA;YAAA;;YAAA;;UAAA;YAaQC,OAbR,GAakBf,SAAS,CAACgB,QAAV,EAblB;YAcEtB,MAAM,CAACuB,KAAP,CAAa,+CAAb;YACMC,aAfR,GAewB,CACpB,cADoB,EAEpB,aAFoB,EAGpB,UAHoB,EAIpB,OAJoB,CAfxB;YAAA,yCAsBkBA,aAtBlB;;UAAA;YAAA;cAAA;cAAA;YAAA;;YAsBaC,CAtBb;YAAA;YAwBYC,GAxBZ,GAwBkB/B,IAAI,CAACkB,IAAL,CAAUQ,OAAV,EAAmBG,aAAa,CAACC,CAAD,CAAhC,CAxBlB;YAAA;YAAA,OAyBwBlB,QAAQ,CAACY,GAAT,CAAaK,aAAa,CAACC,CAAD,CAA1B,CAzBxB;;UAAA;YAyBYE,GAzBZ;;YAAA,KA0BUA,GA1BV;cAAA;cAAA;YAAA;;YAAA;YAAA,OA0BqBtB,OAAO,CAACK,KAAR,CAAckB,GAAd,CAAkBF,GAAlB,EAAuBC,GAAvB,CA1BrB;;UAAA;YAAA;YAAA;;UAAA;YAAA;YAAA;YA4BM3B,MAAM,CAACuB,KAAP,CAAa,YAAEM,OAAf;;UA5BN;YAAA;YAAA;;UAAA;YAAA;YAAA,OA+BQxB,OAAO,CAACK,KAAR,CAAckB,GAAd,CAAkBjC,IAAI,CAACkB,IAAL,CAAUQ,OAAV,EAAmB,WAAnB,CAAlB,EAAmDf,SAAS,CAACQ,IAA7D,CA/BR;;UAAA;YAAA,KAgCMI,QAhCN;cAAA;cAAA;YAAA;;YAAA;YAAA,OAgCsBA,QAAQ,CAACY,KAAT,EAhCtB;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AAmCAC,MAAM,CAACC,OAAP,GAAiB7B,OAAjB"},"metadata":{},"sourceType":"script"}