{"ast":null,"code":"/*eslint-disable*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\"); // Common aliases\n\n\nvar $Reader = $protobuf.Reader,\n    $Writer = $protobuf.Writer,\n    $util = $protobuf.util; // Exported root namespace\n\nvar $root = $protobuf.roots[\"libp2p-record\"] || ($protobuf.roots[\"libp2p-record\"] = {});\n\n$root.Record = function () {\n  /**\n   * Properties of a Record.\n   * @exports IRecord\n   * @interface IRecord\n   * @property {Uint8Array|null} [key] Record key\n   * @property {Uint8Array|null} [value] Record value\n   * @property {string|null} [timeReceived] Record timeReceived\n   */\n\n  /**\n   * Constructs a new Record.\n   * @exports Record\n   * @classdesc Represents a Record.\n   * @implements IRecord\n   * @constructor\n   * @param {IRecord=} [p] Properties to set\n   */\n  function Record(p) {\n    if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n  }\n  /**\n   * Record key.\n   * @member {Uint8Array} key\n   * @memberof Record\n   * @instance\n   */\n\n\n  Record.prototype.key = $util.newBuffer([]);\n  /**\n   * Record value.\n   * @member {Uint8Array} value\n   * @memberof Record\n   * @instance\n   */\n\n  Record.prototype.value = $util.newBuffer([]);\n  /**\n   * Record timeReceived.\n   * @member {string} timeReceived\n   * @memberof Record\n   * @instance\n   */\n\n  Record.prototype.timeReceived = \"\";\n  /**\n   * Encodes the specified Record message. Does not implicitly {@link Record.verify|verify} messages.\n   * @function encode\n   * @memberof Record\n   * @static\n   * @param {IRecord} m Record message or plain object to encode\n   * @param {$protobuf.Writer} [w] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n  Record.encode = function encode(m, w) {\n    if (!w) w = $Writer.create();\n    if (m.key != null && Object.hasOwnProperty.call(m, \"key\")) w.uint32(10).bytes(m.key);\n    if (m.value != null && Object.hasOwnProperty.call(m, \"value\")) w.uint32(18).bytes(m.value);\n    if (m.timeReceived != null && Object.hasOwnProperty.call(m, \"timeReceived\")) w.uint32(42).string(m.timeReceived);\n    return w;\n  };\n  /**\n   * Decodes a Record message from the specified reader or buffer.\n   * @function decode\n   * @memberof Record\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n   * @param {number} [l] Message length if known beforehand\n   * @returns {Record} Record\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  Record.decode = function decode(r, l) {\n    if (!(r instanceof $Reader)) r = $Reader.create(r);\n    var c = l === undefined ? r.len : r.pos + l,\n        m = new $root.Record();\n\n    while (r.pos < c) {\n      var t = r.uint32();\n\n      switch (t >>> 3) {\n        case 1:\n          m.key = r.bytes();\n          break;\n\n        case 2:\n          m.value = r.bytes();\n          break;\n\n        case 5:\n          m.timeReceived = r.string();\n          break;\n\n        default:\n          r.skipType(t & 7);\n          break;\n      }\n    }\n\n    return m;\n  };\n  /**\n   * Creates a Record message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Record\n   * @static\n   * @param {Object.<string,*>} d Plain object\n   * @returns {Record} Record\n   */\n\n\n  Record.fromObject = function fromObject(d) {\n    if (d instanceof $root.Record) return d;\n    var m = new $root.Record();\n\n    if (d.key != null) {\n      if (typeof d.key === \"string\") $util.base64.decode(d.key, m.key = $util.newBuffer($util.base64.length(d.key)), 0);else if (d.key.length) m.key = d.key;\n    }\n\n    if (d.value != null) {\n      if (typeof d.value === \"string\") $util.base64.decode(d.value, m.value = $util.newBuffer($util.base64.length(d.value)), 0);else if (d.value.length) m.value = d.value;\n    }\n\n    if (d.timeReceived != null) {\n      m.timeReceived = String(d.timeReceived);\n    }\n\n    return m;\n  };\n  /**\n   * Creates a plain object from a Record message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Record\n   * @static\n   * @param {Record} m Record\n   * @param {$protobuf.IConversionOptions} [o] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  Record.toObject = function toObject(m, o) {\n    if (!o) o = {};\n    var d = {};\n\n    if (o.defaults) {\n      if (o.bytes === String) d.key = \"\";else {\n        d.key = [];\n        if (o.bytes !== Array) d.key = $util.newBuffer(d.key);\n      }\n      if (o.bytes === String) d.value = \"\";else {\n        d.value = [];\n        if (o.bytes !== Array) d.value = $util.newBuffer(d.value);\n      }\n      d.timeReceived = \"\";\n    }\n\n    if (m.key != null && m.hasOwnProperty(\"key\")) {\n      d.key = o.bytes === String ? $util.base64.encode(m.key, 0, m.key.length) : o.bytes === Array ? Array.prototype.slice.call(m.key) : m.key;\n    }\n\n    if (m.value != null && m.hasOwnProperty(\"value\")) {\n      d.value = o.bytes === String ? $util.base64.encode(m.value, 0, m.value.length) : o.bytes === Array ? Array.prototype.slice.call(m.value) : m.value;\n    }\n\n    if (m.timeReceived != null && m.hasOwnProperty(\"timeReceived\")) {\n      d.timeReceived = m.timeReceived;\n    }\n\n    return d;\n  };\n  /**\n   * Converts this Record to JSON.\n   * @function toJSON\n   * @memberof Record\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  Record.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return Record;\n}();\n\nmodule.exports = $root;","map":{"version":3,"names":["$protobuf","require","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Record","p","ks","Object","keys","i","length","prototype","key","newBuffer","value","timeReceived","encode","m","w","create","hasOwnProperty","call","uint32","bytes","string","decode","r","l","c","undefined","len","pos","t","skipType","fromObject","d","base64","String","toObject","o","defaults","Array","slice","toJSON","constructor","toJSONOptions","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-record/src/record/record.js"],"sourcesContent":["/*eslint-disable*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"libp2p-record\"] || ($protobuf.roots[\"libp2p-record\"] = {});\n\n$root.Record = (function() {\n\n    /**\n     * Properties of a Record.\n     * @exports IRecord\n     * @interface IRecord\n     * @property {Uint8Array|null} [key] Record key\n     * @property {Uint8Array|null} [value] Record value\n     * @property {string|null} [timeReceived] Record timeReceived\n     */\n\n    /**\n     * Constructs a new Record.\n     * @exports Record\n     * @classdesc Represents a Record.\n     * @implements IRecord\n     * @constructor\n     * @param {IRecord=} [p] Properties to set\n     */\n    function Record(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Record key.\n     * @member {Uint8Array} key\n     * @memberof Record\n     * @instance\n     */\n    Record.prototype.key = $util.newBuffer([]);\n\n    /**\n     * Record value.\n     * @member {Uint8Array} value\n     * @memberof Record\n     * @instance\n     */\n    Record.prototype.value = $util.newBuffer([]);\n\n    /**\n     * Record timeReceived.\n     * @member {string} timeReceived\n     * @memberof Record\n     * @instance\n     */\n    Record.prototype.timeReceived = \"\";\n\n    /**\n     * Encodes the specified Record message. Does not implicitly {@link Record.verify|verify} messages.\n     * @function encode\n     * @memberof Record\n     * @static\n     * @param {IRecord} m Record message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Record.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.key != null && Object.hasOwnProperty.call(m, \"key\"))\n            w.uint32(10).bytes(m.key);\n        if (m.value != null && Object.hasOwnProperty.call(m, \"value\"))\n            w.uint32(18).bytes(m.value);\n        if (m.timeReceived != null && Object.hasOwnProperty.call(m, \"timeReceived\"))\n            w.uint32(42).string(m.timeReceived);\n        return w;\n    };\n\n    /**\n     * Decodes a Record message from the specified reader or buffer.\n     * @function decode\n     * @memberof Record\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Record} Record\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Record.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Record();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.key = r.bytes();\n                break;\n            case 2:\n                m.value = r.bytes();\n                break;\n            case 5:\n                m.timeReceived = r.string();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a Record message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Record\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Record} Record\n     */\n    Record.fromObject = function fromObject(d) {\n        if (d instanceof $root.Record)\n            return d;\n        var m = new $root.Record();\n        if (d.key != null) {\n            if (typeof d.key === \"string\")\n                $util.base64.decode(d.key, m.key = $util.newBuffer($util.base64.length(d.key)), 0);\n            else if (d.key.length)\n                m.key = d.key;\n        }\n        if (d.value != null) {\n            if (typeof d.value === \"string\")\n                $util.base64.decode(d.value, m.value = $util.newBuffer($util.base64.length(d.value)), 0);\n            else if (d.value.length)\n                m.value = d.value;\n        }\n        if (d.timeReceived != null) {\n            m.timeReceived = String(d.timeReceived);\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a Record message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Record\n     * @static\n     * @param {Record} m Record\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Record.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            if (o.bytes === String)\n                d.key = \"\";\n            else {\n                d.key = [];\n                if (o.bytes !== Array)\n                    d.key = $util.newBuffer(d.key);\n            }\n            if (o.bytes === String)\n                d.value = \"\";\n            else {\n                d.value = [];\n                if (o.bytes !== Array)\n                    d.value = $util.newBuffer(d.value);\n            }\n            d.timeReceived = \"\";\n        }\n        if (m.key != null && m.hasOwnProperty(\"key\")) {\n            d.key = o.bytes === String ? $util.base64.encode(m.key, 0, m.key.length) : o.bytes === Array ? Array.prototype.slice.call(m.key) : m.key;\n        }\n        if (m.value != null && m.hasOwnProperty(\"value\")) {\n            d.value = o.bytes === String ? $util.base64.encode(m.value, 0, m.value.length) : o.bytes === Array ? Array.prototype.slice.call(m.value) : m.value;\n        }\n        if (m.timeReceived != null && m.hasOwnProperty(\"timeReceived\")) {\n            d.timeReceived = m.timeReceived;\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Record to JSON.\n     * @function toJSON\n     * @memberof Record\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Record.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Record;\n})();\n\nmodule.exports = $root;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}