{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _awaitAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _wrapAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nvar createAdd = require('./add');\n\nvar createAddAll = require('./add-all');\n\nvar createLs = require('./ls');\n\nvar createRm = require('./rm');\n\nvar createRmAll = require('./rm-all');\n\nvar PinAPI = /*#__PURE__*/_createClass(\n/**\n * @param {Object} config\n * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nfunction PinAPI(_ref2) {\n  var codecs = _ref2.codecs,\n      repo = _ref2.repo;\n\n  _classCallCheck(this, PinAPI);\n\n  var addAll = createAddAll({\n    codecs: codecs,\n    repo: repo\n  });\n  this.addAll = addAll;\n  this.add = createAdd({\n    addAll: addAll\n  });\n  var rmAll = createRmAll({\n    codecs: codecs,\n    repo: repo\n  });\n  this.rmAll = rmAll;\n  this.rm = createRm({\n    rmAll: rmAll\n  });\n  this.ls = createLs({\n    codecs: codecs,\n    repo: repo\n  });\n  /** @type {import('ipfs-core-types/src/pin/remote').API} */\n\n  this.remote = {\n    add: function add(cid) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return Promise.reject(new Error('Not implemented'));\n    },\n    ls: function () {\n      var _ref = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(query) {\n        var options,\n            _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n                return _context.abrupt(\"return\", Promise.reject(new Error('Not implemented')));\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function ls(_x) {\n        return _ref.apply(this, arguments);\n      };\n    }(),\n    // eslint-disable-line require-yield\n    rm: function rm(query) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return Promise.reject(new Error('Not implemented'));\n    },\n    rmAll: function rmAll(query) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return Promise.reject(new Error('Not implemented'));\n    },\n    service: {\n      add: function add(name, credentials) {\n        return Promise.reject(new Error('Not implemented'));\n      },\n      rm: function rm(name) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return Promise.reject(new Error('Not implemented'));\n      },\n      // @ts-ignore return types seem to be broken by a recent ts release. doesn't matter here because\n      // we are just throwing. Will be removed by https://github.com/protocol/web3-dev-team/pull/58\n      ls: function ls() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return Promise.reject(new Error('Not implemented'));\n      }\n    }\n  };\n});\n\nmodule.exports = PinAPI;","map":{"version":3,"names":["createAdd","require","createAddAll","createLs","createRm","createRmAll","PinAPI","codecs","repo","addAll","add","rmAll","rm","ls","remote","cid","options","Promise","reject","Error","query","service","name","credentials","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/pin/index.js"],"sourcesContent":["'use strict'\n\nconst createAdd = require('./add')\nconst createAddAll = require('./add-all')\nconst createLs = require('./ls')\nconst createRm = require('./rm')\nconst createRmAll = require('./rm-all')\n\nclass PinAPI {\n  /**\n   * @param {Object} config\n   * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   */\n  constructor ({ codecs, repo }) {\n    const addAll = createAddAll({ codecs, repo })\n    this.addAll = addAll\n    this.add = createAdd({ addAll })\n    const rmAll = createRmAll({ codecs, repo })\n    this.rmAll = rmAll\n    this.rm = createRm({ rmAll })\n    this.ls = createLs({ codecs, repo })\n\n    /** @type {import('ipfs-core-types/src/pin/remote').API} */\n    this.remote = {\n      add: (cid, options = {}) => Promise.reject(new Error('Not implemented')),\n      ls: async function * (query, options = {}) { return Promise.reject(new Error('Not implemented')) }, // eslint-disable-line require-yield\n      rm: (query, options = {}) => Promise.reject(new Error('Not implemented')),\n      rmAll: (query, options = {}) => Promise.reject(new Error('Not implemented')),\n      service: {\n        add: (name, credentials) => Promise.reject(new Error('Not implemented')),\n        rm: (name, options = {}) => Promise.reject(new Error('Not implemented')),\n        // @ts-ignore return types seem to be broken by a recent ts release. doesn't matter here because\n        // we are just throwing. Will be removed by https://github.com/protocol/web3-dev-team/pull/58\n        ls: (options = {}) => Promise.reject(new Error('Not implemented'))\n      }\n    }\n  }\n}\n\nmodule.exports = PinAPI\n"],"mappings":"AAAA;;;;;;;;;;;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,OAAD,CAAzB;;AACA,IAAMC,YAAY,GAAGD,OAAO,CAAC,WAAD,CAA5B;;AACA,IAAME,QAAQ,GAAGF,OAAO,CAAC,MAAD,CAAxB;;AACA,IAAMG,QAAQ,GAAGH,OAAO,CAAC,MAAD,CAAxB;;AACA,IAAMI,WAAW,GAAGJ,OAAO,CAAC,UAAD,CAA3B;;IAEMK,M;AACJ;AACF;AACA;AACA;AACA;AACE,uBAA+B;EAAA,IAAhBC,MAAgB,SAAhBA,MAAgB;EAAA,IAARC,IAAQ,SAARA,IAAQ;;EAAA;;EAC7B,IAAMC,MAAM,GAAGP,YAAY,CAAC;IAAEK,MAAM,EAANA,MAAF;IAAUC,IAAI,EAAJA;EAAV,CAAD,CAA3B;EACA,KAAKC,MAAL,GAAcA,MAAd;EACA,KAAKC,GAAL,GAAWV,SAAS,CAAC;IAAES,MAAM,EAANA;EAAF,CAAD,CAApB;EACA,IAAME,KAAK,GAAGN,WAAW,CAAC;IAAEE,MAAM,EAANA,MAAF;IAAUC,IAAI,EAAJA;EAAV,CAAD,CAAzB;EACA,KAAKG,KAAL,GAAaA,KAAb;EACA,KAAKC,EAAL,GAAUR,QAAQ,CAAC;IAAEO,KAAK,EAALA;EAAF,CAAD,CAAlB;EACA,KAAKE,EAAL,GAAUV,QAAQ,CAAC;IAAEI,MAAM,EAANA,MAAF;IAAUC,IAAI,EAAJA;EAAV,CAAD,CAAlB;EAEA;;EACA,KAAKM,MAAL,GAAc;IACZJ,GAAG,EAAE,aAACK,GAAD;MAAA,IAAMC,OAAN,uEAAgB,EAAhB;MAAA,OAAuBC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,iBAAV,CAAf,CAAvB;IAAA,CADO;IAEZN,EAAE;MAAA,wEAAE,iBAAkBO,KAAlB;QAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAyBJ,OAAzB,2DAAmC,EAAnC;gBAAA,iCAAgDC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,iBAAV,CAAf,CAAhD;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAAF;;MAAA;QAAA;MAAA;IAAA,GAFU;IAEwF;IACpGP,EAAE,EAAE,YAACQ,KAAD;MAAA,IAAQJ,OAAR,uEAAkB,EAAlB;MAAA,OAAyBC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,iBAAV,CAAf,CAAzB;IAAA,CAHQ;IAIZR,KAAK,EAAE,eAACS,KAAD;MAAA,IAAQJ,OAAR,uEAAkB,EAAlB;MAAA,OAAyBC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,iBAAV,CAAf,CAAzB;IAAA,CAJK;IAKZE,OAAO,EAAE;MACPX,GAAG,EAAE,aAACY,IAAD,EAAOC,WAAP;QAAA,OAAuBN,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,iBAAV,CAAf,CAAvB;MAAA,CADE;MAEPP,EAAE,EAAE,YAACU,IAAD;QAAA,IAAON,OAAP,uEAAiB,EAAjB;QAAA,OAAwBC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,iBAAV,CAAf,CAAxB;MAAA,CAFG;MAGP;MACA;MACAN,EAAE,EAAE;QAAA,IAACG,OAAD,uEAAW,EAAX;QAAA,OAAkBC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,iBAAV,CAAf,CAAlB;MAAA;IALG;EALG,CAAd;AAaD,C;;AAGHK,MAAM,CAACC,OAAP,GAAiBnB,MAAjB"},"metadata":{},"sourceType":"script"}