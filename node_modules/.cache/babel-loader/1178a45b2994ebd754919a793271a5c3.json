{"ast":null,"code":"'use strict';\n\nvar globSource = require('ipfs-utils/src/files/glob-source');\n\nvar urlSource = require('ipfs-utils/src/files/url-source');\n\nvar PeerId = require('peer-id');\n\nvar crypto = require('libp2p-crypto');\n\nvar isIPFS = require('is-ipfs');\n\nvar _require = require('multiaddr'),\n    multiaddr = _require.multiaddr;\n\nvar _require2 = require('multiformats/cid'),\n    CID = _require2.CID;\n\nvar _require3 = require('./components'),\n    create = _require3.create;\n/**\n * @typedef {import('ipfs-core-types').IPFS} IPFS\n * @typedef {import('./types').Options} Options\n * @typedef {import('./types').Libp2pFactoryFn} Libp2pFactoryFn\n * @typedef {import('./types').Libp2pFactoryFnArgs} Libp2pFactoryFnArgs\n * @typedef {import('./types').InitOptions} InitOptions\n * @typedef {import('./types').RelayOptions} RelayOptions\n * @typedef {import('./types').PreloadOptions} PreloadOptions\n * @typedef {import('./types').ExperimentalOptions} ExperimentalOptions\n * @typedef {import('./types').Preload} Preload\n * @typedef {import('./types').MfsPreload} MfsPreload\n * @typedef {import('./types').LoadBaseFn} LoadBaseFn\n * @typedef {import('./types').LoadCodecFn} LoadCodecFn\n * @typedef {import('./types').LoadHasherFn} LoadHasherFn\n * @typedef {import('./types').IPLDOptions} IPLDOptions\n */\n\n\nmodule.exports = {\n  create: create,\n  crypto: crypto,\n  isIPFS: isIPFS,\n  CID: CID,\n  multiaddr: multiaddr,\n  PeerId: PeerId,\n  globSource: globSource,\n  urlSource: urlSource\n};","map":{"version":3,"names":["globSource","require","urlSource","PeerId","crypto","isIPFS","multiaddr","CID","create","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/index.js"],"sourcesContent":["'use strict'\n\nconst globSource = require('ipfs-utils/src/files/glob-source')\nconst urlSource = require('ipfs-utils/src/files/url-source')\nconst PeerId = require('peer-id')\nconst crypto = require('libp2p-crypto')\nconst isIPFS = require('is-ipfs')\nconst { multiaddr } = require('multiaddr')\nconst { CID } = require('multiformats/cid')\nconst { create } = require('./components')\n\n/**\n * @typedef {import('ipfs-core-types').IPFS} IPFS\n * @typedef {import('./types').Options} Options\n * @typedef {import('./types').Libp2pFactoryFn} Libp2pFactoryFn\n * @typedef {import('./types').Libp2pFactoryFnArgs} Libp2pFactoryFnArgs\n * @typedef {import('./types').InitOptions} InitOptions\n * @typedef {import('./types').RelayOptions} RelayOptions\n * @typedef {import('./types').PreloadOptions} PreloadOptions\n * @typedef {import('./types').ExperimentalOptions} ExperimentalOptions\n * @typedef {import('./types').Preload} Preload\n * @typedef {import('./types').MfsPreload} MfsPreload\n * @typedef {import('./types').LoadBaseFn} LoadBaseFn\n * @typedef {import('./types').LoadCodecFn} LoadCodecFn\n * @typedef {import('./types').LoadHasherFn} LoadHasherFn\n * @typedef {import('./types').IPLDOptions} IPLDOptions\n */\n\nmodule.exports = {\n  create,\n  crypto,\n  isIPFS,\n  CID,\n  multiaddr,\n  PeerId,\n  globSource,\n  urlSource\n}\n"],"mappings":"AAAA;;AAEA,IAAMA,UAAU,GAAGC,OAAO,CAAC,kCAAD,CAA1B;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,iCAAD,CAAzB;;AACA,IAAME,MAAM,GAAGF,OAAO,CAAC,SAAD,CAAtB;;AACA,IAAMG,MAAM,GAAGH,OAAO,CAAC,eAAD,CAAtB;;AACA,IAAMI,MAAM,GAAGJ,OAAO,CAAC,SAAD,CAAtB;;AACA,eAAsBA,OAAO,CAAC,WAAD,CAA7B;AAAA,IAAQK,SAAR,YAAQA,SAAR;;AACA,gBAAgBL,OAAO,CAAC,kBAAD,CAAvB;AAAA,IAAQM,GAAR,aAAQA,GAAR;;AACA,gBAAmBN,OAAO,CAAC,cAAD,CAA1B;AAAA,IAAQO,MAAR,aAAQA,MAAR;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB;EACfF,MAAM,EAANA,MADe;EAEfJ,MAAM,EAANA,MAFe;EAGfC,MAAM,EAANA,MAHe;EAIfE,GAAG,EAAHA,GAJe;EAKfD,SAAS,EAATA,SALe;EAMfH,MAAM,EAANA,MANe;EAOfH,UAAU,EAAVA,UAPe;EAQfE,SAAS,EAATA;AARe,CAAjB"},"metadata":{},"sourceType":"script"}