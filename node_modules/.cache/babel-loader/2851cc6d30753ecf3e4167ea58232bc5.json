{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _assertThisInitialized = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\n\nvar _inherits = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar Topology = require('./index');\n\nvar multicodecTopologySymbol = Symbol.for('@libp2p/js-interfaces/topology/multicodec-topology');\n\nvar MulticodecTopology = /*#__PURE__*/function (_Topology, _Symbol$toStringTag) {\n  _inherits(MulticodecTopology, _Topology);\n\n  var _super = _createSuper(MulticodecTopology);\n\n  /**\n   * @param {TopologyOptions & MulticodecOptions} props\n   */\n  function MulticodecTopology(_ref) {\n    var _this;\n\n    var min = _ref.min,\n        max = _ref.max,\n        multicodecs = _ref.multicodecs,\n        handlers = _ref.handlers;\n\n    _classCallCheck(this, MulticodecTopology);\n\n    _this = _super.call(this, {\n      min: min,\n      max: max,\n      handlers: handlers\n    });\n\n    if (!multicodecs) {\n      throw new Error('one or more multicodec should be provided');\n    }\n\n    if (!handlers) {\n      throw new Error('the handlers should be provided');\n    }\n\n    if (typeof handlers.onConnect !== 'function') {\n      throw new Error('the \\'onConnect\\' handler must be provided');\n    }\n\n    if (typeof handlers.onDisconnect !== 'function') {\n      throw new Error('the \\'onDisconnect\\' handler must be provided');\n    }\n\n    _this.multicodecs = Array.isArray(multicodecs) ? multicodecs : [multicodecs];\n    _this._registrar = undefined;\n    _this._onProtocolChange = _this._onProtocolChange.bind(_assertThisInitialized(_this));\n    _this._onPeerConnect = _this._onPeerConnect.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(MulticodecTopology, [{\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return 'Topology';\n    }\n  }, {\n    key: multicodecTopologySymbol,\n    get: function get() {\n      return true;\n    }\n    /**\n     * Checks if the given value is a `MulticodecTopology` instance.\n     *\n     * @param {any} other\n     * @returns {other is MulticodecTopology}\n     */\n\n  }, {\n    key: \"registrar\",\n    set:\n    /**\n     * @param {any} registrar\n     */\n    function set(registrar) {\n      // eslint-disable-line\n      this._registrar = registrar;\n\n      this._registrar.peerStore.on('change:protocols', this._onProtocolChange);\n\n      this._registrar.connectionManager.on('peer:connect', this._onPeerConnect); // Update topology peers\n\n\n      this._updatePeers(this._registrar.peerStore.peers.values());\n    }\n    /**\n     * Update topology.\n     *\n     * @param {Array<{id: PeerId, multiaddrs: Array<Multiaddr>, protocols: Array<string>}>} peerDataIterable\n     * @returns {void}\n     */\n\n  }, {\n    key: \"_updatePeers\",\n    value: function _updatePeers(peerDataIterable) {\n      var _this2 = this;\n\n      var _iterator = _createForOfIteratorHelper(peerDataIterable),\n          _step;\n\n      try {\n        var _loop = function _loop() {\n          var _step$value = _step.value,\n              id = _step$value.id,\n              protocols = _step$value.protocols;\n\n          if (_this2.multicodecs.filter(function (multicodec) {\n            return protocols.includes(multicodec);\n          }).length) {\n            // Add the peer regardless of whether or not there is currently a connection\n            _this2.peers.add(id.toB58String()); // If there is a connection, call _onConnect\n\n\n            var connection = _this2._registrar.getConnection(id);\n\n            connection && _this2._onConnect(id, connection);\n          } else {\n            // Remove any peers we might be tracking that are no longer of value to us\n            _this2.peers.delete(id.toB58String());\n          }\n        };\n\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    /**\n     * Check if a new peer support the multicodecs for this topology.\n     *\n     * @param {Object} props\n     * @param {PeerId} props.peerId\n     * @param {Array<string>} props.protocols\n     */\n\n  }, {\n    key: \"_onProtocolChange\",\n    value: function _onProtocolChange(_ref2) {\n      var _this3 = this;\n\n      var peerId = _ref2.peerId,\n          protocols = _ref2.protocols;\n      var hadPeer = this.peers.has(peerId.toB58String());\n      var hasProtocol = protocols.filter(function (protocol) {\n        return _this3.multicodecs.includes(protocol);\n      }); // Not supporting the protocol anymore?\n\n      if (hadPeer && hasProtocol.length === 0) {\n        this._onDisconnect(peerId);\n      } // New to protocol support\n\n\n      var _iterator2 = _createForOfIteratorHelper(protocols),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var protocol = _step2.value;\n\n          if (this.multicodecs.includes(protocol)) {\n            var peerData = this._registrar.peerStore.get(peerId);\n\n            this._updatePeers([peerData]);\n\n            return;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n    /**\n     * Verify if a new connected peer has a topology multicodec and call _onConnect.\n     *\n     * @param {Connection} connection\n     * @returns {void}\n     */\n\n  }, {\n    key: \"_onPeerConnect\",\n    value: function _onPeerConnect(connection) {\n      // @ts-ignore - remotePeer does not existist on Connection\n      var peerId = connection.remotePeer;\n\n      var protocols = this._registrar.peerStore.protoBook.get(peerId);\n\n      if (!protocols) {\n        return;\n      }\n\n      if (this.multicodecs.find(function (multicodec) {\n        return protocols.includes(multicodec);\n      })) {\n        this.peers.add(peerId.toB58String());\n\n        this._onConnect(peerId, connection);\n      }\n    }\n  }], [{\n    key: \"isMulticodecTopology\",\n    value: function isMulticodecTopology(other) {\n      return Boolean(other && other[multicodecTopologySymbol]);\n    }\n  }]);\n\n  return MulticodecTopology;\n}(Topology, Symbol.toStringTag);\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('multiaddr')} Multiaddr\n * @typedef {import('../connection/connection')} Connection\n * @typedef {import('.').Options} TopologyOptions\n * @typedef {Object} MulticodecOptions\n * @property {string[]} multicodecs - protocol multicodecs\n * @property {Required<Handlers>} handlers\n * @typedef {import('.').Handlers} Handlers\n */\n\n\nmodule.exports = MulticodecTopology;","map":{"version":3,"names":["Topology","require","multicodecTopologySymbol","Symbol","for","MulticodecTopology","min","max","multicodecs","handlers","Error","onConnect","onDisconnect","Array","isArray","_registrar","undefined","_onProtocolChange","bind","_onPeerConnect","registrar","peerStore","on","connectionManager","_updatePeers","peers","values","peerDataIterable","id","protocols","filter","multicodec","includes","length","add","toB58String","connection","getConnection","_onConnect","delete","peerId","hadPeer","has","hasProtocol","protocol","_onDisconnect","peerData","get","remotePeer","protoBook","find","other","Boolean","toStringTag","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-interfaces/src/topology/multicodec-topology.js"],"sourcesContent":["'use strict'\n\nconst Topology = require('./index')\nconst multicodecTopologySymbol = Symbol.for('@libp2p/js-interfaces/topology/multicodec-topology')\n\nclass MulticodecTopology extends Topology {\n  /**\n   * @param {TopologyOptions & MulticodecOptions} props\n   */\n  constructor ({\n    min,\n    max,\n    multicodecs,\n    handlers\n  }) {\n    super({ min, max, handlers })\n\n    if (!multicodecs) {\n      throw new Error('one or more multicodec should be provided')\n    }\n\n    if (!handlers) {\n      throw new Error('the handlers should be provided')\n    }\n\n    if (typeof handlers.onConnect !== 'function') {\n      throw new Error('the \\'onConnect\\' handler must be provided')\n    }\n\n    if (typeof handlers.onDisconnect !== 'function') {\n      throw new Error('the \\'onDisconnect\\' handler must be provided')\n    }\n\n    this.multicodecs = Array.isArray(multicodecs) ? multicodecs : [multicodecs]\n    this._registrar = undefined\n\n    this._onProtocolChange = this._onProtocolChange.bind(this)\n    this._onPeerConnect = this._onPeerConnect.bind(this)\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'Topology'\n  }\n\n  get [multicodecTopologySymbol] () {\n    return true\n  }\n\n  /**\n   * Checks if the given value is a `MulticodecTopology` instance.\n   *\n   * @param {any} other\n   * @returns {other is MulticodecTopology}\n   */\n  static isMulticodecTopology (other) {\n    return Boolean(other && other[multicodecTopologySymbol])\n  }\n\n  /**\n   * @param {any} registrar\n   */\n  set registrar (registrar) { // eslint-disable-line\n    this._registrar = registrar\n    this._registrar.peerStore.on('change:protocols', this._onProtocolChange)\n    this._registrar.connectionManager.on('peer:connect', this._onPeerConnect)\n\n    // Update topology peers\n    this._updatePeers(this._registrar.peerStore.peers.values())\n  }\n\n  /**\n   * Update topology.\n   *\n   * @param {Array<{id: PeerId, multiaddrs: Array<Multiaddr>, protocols: Array<string>}>} peerDataIterable\n   * @returns {void}\n   */\n  _updatePeers (peerDataIterable) {\n    for (const { id, protocols } of peerDataIterable) {\n      if (this.multicodecs.filter(multicodec => protocols.includes(multicodec)).length) {\n        // Add the peer regardless of whether or not there is currently a connection\n        this.peers.add(id.toB58String())\n        // If there is a connection, call _onConnect\n        const connection = this._registrar.getConnection(id)\n        connection && this._onConnect(id, connection)\n      } else {\n        // Remove any peers we might be tracking that are no longer of value to us\n        this.peers.delete(id.toB58String())\n      }\n    }\n  }\n\n  /**\n   * Check if a new peer support the multicodecs for this topology.\n   *\n   * @param {Object} props\n   * @param {PeerId} props.peerId\n   * @param {Array<string>} props.protocols\n   */\n  _onProtocolChange ({ peerId, protocols }) {\n    const hadPeer = this.peers.has(peerId.toB58String())\n    const hasProtocol = protocols.filter(protocol => this.multicodecs.includes(protocol))\n\n    // Not supporting the protocol anymore?\n    if (hadPeer && hasProtocol.length === 0) {\n      this._onDisconnect(peerId)\n    }\n\n    // New to protocol support\n    for (const protocol of protocols) {\n      if (this.multicodecs.includes(protocol)) {\n        const peerData = this._registrar.peerStore.get(peerId)\n        this._updatePeers([peerData])\n        return\n      }\n    }\n  }\n\n  /**\n   * Verify if a new connected peer has a topology multicodec and call _onConnect.\n   *\n   * @param {Connection} connection\n   * @returns {void}\n   */\n  _onPeerConnect (connection) {\n    // @ts-ignore - remotePeer does not existist on Connection\n    const peerId = connection.remotePeer\n    const protocols = this._registrar.peerStore.protoBook.get(peerId)\n\n    if (!protocols) {\n      return\n    }\n\n    if (this.multicodecs.find(multicodec => protocols.includes(multicodec))) {\n      this.peers.add(peerId.toB58String())\n      this._onConnect(peerId, connection)\n    }\n  }\n}\n\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('multiaddr')} Multiaddr\n * @typedef {import('../connection/connection')} Connection\n * @typedef {import('.').Options} TopologyOptions\n * @typedef {Object} MulticodecOptions\n * @property {string[]} multicodecs - protocol multicodecs\n * @property {Required<Handlers>} handlers\n * @typedef {import('.').Handlers} Handlers\n */\nmodule.exports = MulticodecTopology\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}