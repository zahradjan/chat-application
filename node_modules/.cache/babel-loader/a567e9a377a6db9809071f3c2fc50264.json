{"ast":null,"code":"'use strict';\n\nconst createAdd = require('./add');\n\nconst createAddAll = require('./add-all');\n\nconst createLs = require('./ls');\n\nconst createRm = require('./rm');\n\nconst createRmAll = require('./rm-all');\n\nclass PinAPI {\n  /**\n   * @param {Object} config\n   * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   */\n  constructor(_ref) {\n    let {\n      codecs,\n      repo\n    } = _ref;\n    const addAll = createAddAll({\n      codecs,\n      repo\n    });\n    this.addAll = addAll;\n    this.add = createAdd({\n      addAll\n    });\n    const rmAll = createRmAll({\n      codecs,\n      repo\n    });\n    this.rmAll = rmAll;\n    this.rm = createRm({\n      rmAll\n    });\n    this.ls = createLs({\n      codecs,\n      repo\n    });\n    /** @type {import('ipfs-core-types/src/pin/remote').API} */\n\n    this.remote = {\n      add: function (cid) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return Promise.reject(new Error('Not implemented'));\n      },\n      ls: async function* (query) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return Promise.reject(new Error('Not implemented'));\n      },\n      // eslint-disable-line require-yield\n      rm: function (query) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return Promise.reject(new Error('Not implemented'));\n      },\n      rmAll: function (query) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return Promise.reject(new Error('Not implemented'));\n      },\n      service: {\n        add: (name, credentials) => Promise.reject(new Error('Not implemented')),\n        rm: function (name) {\n          let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          return Promise.reject(new Error('Not implemented'));\n        },\n        // @ts-ignore return types seem to be broken by a recent ts release. doesn't matter here because\n        // we are just throwing. Will be removed by https://github.com/protocol/web3-dev-team/pull/58\n        ls: function () {\n          let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          return Promise.reject(new Error('Not implemented'));\n        }\n      }\n    };\n  }\n\n}\n\nmodule.exports = PinAPI;","map":{"version":3,"names":["createAdd","require","createAddAll","createLs","createRm","createRmAll","PinAPI","constructor","codecs","repo","addAll","add","rmAll","rm","ls","remote","cid","options","Promise","reject","Error","query","service","name","credentials","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/pin/index.js"],"sourcesContent":["'use strict'\n\nconst createAdd = require('./add')\nconst createAddAll = require('./add-all')\nconst createLs = require('./ls')\nconst createRm = require('./rm')\nconst createRmAll = require('./rm-all')\n\nclass PinAPI {\n  /**\n   * @param {Object} config\n   * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   */\n  constructor ({ codecs, repo }) {\n    const addAll = createAddAll({ codecs, repo })\n    this.addAll = addAll\n    this.add = createAdd({ addAll })\n    const rmAll = createRmAll({ codecs, repo })\n    this.rmAll = rmAll\n    this.rm = createRm({ rmAll })\n    this.ls = createLs({ codecs, repo })\n\n    /** @type {import('ipfs-core-types/src/pin/remote').API} */\n    this.remote = {\n      add: (cid, options = {}) => Promise.reject(new Error('Not implemented')),\n      ls: async function * (query, options = {}) { return Promise.reject(new Error('Not implemented')) }, // eslint-disable-line require-yield\n      rm: (query, options = {}) => Promise.reject(new Error('Not implemented')),\n      rmAll: (query, options = {}) => Promise.reject(new Error('Not implemented')),\n      service: {\n        add: (name, credentials) => Promise.reject(new Error('Not implemented')),\n        rm: (name, options = {}) => Promise.reject(new Error('Not implemented')),\n        // @ts-ignore return types seem to be broken by a recent ts release. doesn't matter here because\n        // we are just throwing. Will be removed by https://github.com/protocol/web3-dev-team/pull/58\n        ls: (options = {}) => Promise.reject(new Error('Not implemented'))\n      }\n    }\n  }\n}\n\nmodule.exports = PinAPI\n"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,OAAD,CAAzB;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,WAAD,CAA5B;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,MAAD,CAAxB;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,MAAD,CAAxB;;AACA,MAAMI,WAAW,GAAGJ,OAAO,CAAC,UAAD,CAA3B;;AAEA,MAAMK,MAAN,CAAa;EACX;AACF;AACA;AACA;AACA;EACEC,WAAW,OAAoB;IAAA,IAAlB;MAAEC,MAAF;MAAUC;IAAV,CAAkB;IAC7B,MAAMC,MAAM,GAAGR,YAAY,CAAC;MAAEM,MAAF;MAAUC;IAAV,CAAD,CAA3B;IACA,KAAKC,MAAL,GAAcA,MAAd;IACA,KAAKC,GAAL,GAAWX,SAAS,CAAC;MAAEU;IAAF,CAAD,CAApB;IACA,MAAME,KAAK,GAAGP,WAAW,CAAC;MAAEG,MAAF;MAAUC;IAAV,CAAD,CAAzB;IACA,KAAKG,KAAL,GAAaA,KAAb;IACA,KAAKC,EAAL,GAAUT,QAAQ,CAAC;MAAEQ;IAAF,CAAD,CAAlB;IACA,KAAKE,EAAL,GAAUX,QAAQ,CAAC;MAAEK,MAAF;MAAUC;IAAV,CAAD,CAAlB;IAEA;;IACA,KAAKM,MAAL,GAAc;MACZJ,GAAG,EAAE,UAACK,GAAD;QAAA,IAAMC,OAAN,uEAAgB,EAAhB;QAAA,OAAuBC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,iBAAV,CAAf,CAAvB;MAAA,CADO;MAEZN,EAAE,EAAE,iBAAkBO,KAAlB,EAAuC;QAAA,IAAdJ,OAAc,uEAAJ,EAAI;QAAE,OAAOC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,iBAAV,CAAf,CAAP;MAAqD,CAFtF;MAEwF;MACpGP,EAAE,EAAE,UAACQ,KAAD;QAAA,IAAQJ,OAAR,uEAAkB,EAAlB;QAAA,OAAyBC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,iBAAV,CAAf,CAAzB;MAAA,CAHQ;MAIZR,KAAK,EAAE,UAACS,KAAD;QAAA,IAAQJ,OAAR,uEAAkB,EAAlB;QAAA,OAAyBC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,iBAAV,CAAf,CAAzB;MAAA,CAJK;MAKZE,OAAO,EAAE;QACPX,GAAG,EAAE,CAACY,IAAD,EAAOC,WAAP,KAAuBN,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,iBAAV,CAAf,CADrB;QAEPP,EAAE,EAAE,UAACU,IAAD;UAAA,IAAON,OAAP,uEAAiB,EAAjB;UAAA,OAAwBC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,iBAAV,CAAf,CAAxB;QAAA,CAFG;QAGP;QACA;QACAN,EAAE,EAAE;UAAA,IAACG,OAAD,uEAAW,EAAX;UAAA,OAAkBC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,iBAAV,CAAf,CAAlB;QAAA;MALG;IALG,CAAd;EAaD;;AA7BU;;AAgCbK,MAAM,CAACC,OAAP,GAAiBpB,MAAjB"},"metadata":{},"sourceType":"script"}