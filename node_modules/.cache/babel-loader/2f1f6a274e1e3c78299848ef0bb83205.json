{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AbstractHandshake = exports.MIN_NONCE = void 0;\n\nconst buffer_1 = require(\"buffer\");\n\nconst x25519 = __importStar(require(\"@stablelib/x25519\"));\n\nconst SHA256 = __importStar(require(\"@stablelib/sha256\"));\n\nconst chacha20poly1305_1 = require(\"@stablelib/chacha20poly1305\");\n\nconst utils_1 = require(\"../utils\");\n\nconst logger_1 = require(\"../logger\");\n\nexports.MIN_NONCE = 0;\n\nclass AbstractHandshake {\n  encryptWithAd(cs, ad, plaintext) {\n    const e = this.encrypt(cs.k, cs.n, ad, plaintext);\n    this.setNonce(cs, this.incrementNonce(cs.n));\n    return e;\n  }\n\n  decryptWithAd(cs, ad, ciphertext) {\n    const {\n      plaintext,\n      valid\n    } = this.decrypt(cs.k, cs.n, ad, ciphertext);\n    this.setNonce(cs, this.incrementNonce(cs.n));\n    return {\n      plaintext,\n      valid\n    };\n  } // Cipher state related\n\n\n  hasKey(cs) {\n    return !this.isEmptyKey(cs.k);\n  }\n\n  setNonce(cs, nonce) {\n    cs.n = nonce;\n  }\n\n  createEmptyKey() {\n    return buffer_1.Buffer.alloc(32);\n  }\n\n  isEmptyKey(k) {\n    const emptyKey = this.createEmptyKey();\n    return emptyKey.equals(k);\n  }\n\n  incrementNonce(n) {\n    return n + 1;\n  }\n\n  nonceToBytes(n) {\n    const nonce = buffer_1.Buffer.alloc(12);\n    nonce.writeUInt32LE(n, 4);\n    return nonce;\n  }\n\n  encrypt(k, n, ad, plaintext) {\n    const nonce = this.nonceToBytes(n);\n    const ctx = new chacha20poly1305_1.ChaCha20Poly1305(k);\n    const encryptedMessage = ctx.seal(nonce, plaintext, ad);\n    return buffer_1.Buffer.from(encryptedMessage.buffer, encryptedMessage.byteOffset, encryptedMessage.length);\n  }\n\n  encryptAndHash(ss, plaintext) {\n    let ciphertext;\n\n    if (this.hasKey(ss.cs)) {\n      ciphertext = this.encryptWithAd(ss.cs, ss.h, plaintext);\n    } else {\n      ciphertext = plaintext;\n    }\n\n    this.mixHash(ss, ciphertext);\n    return ciphertext;\n  }\n\n  decrypt(k, n, ad, ciphertext) {\n    const nonce = this.nonceToBytes(n);\n    const ctx = new chacha20poly1305_1.ChaCha20Poly1305(k);\n    const encryptedMessage = ctx.open(nonce, ciphertext, ad);\n\n    if (encryptedMessage) {\n      return {\n        plaintext: buffer_1.Buffer.from(encryptedMessage.buffer, encryptedMessage.byteOffset, encryptedMessage.length),\n        valid: true\n      };\n    } else {\n      return {\n        plaintext: buffer_1.Buffer.from(''),\n        valid: false\n      };\n    }\n  }\n\n  decryptAndHash(ss, ciphertext) {\n    let plaintext;\n    let valid = true;\n\n    if (this.hasKey(ss.cs)) {\n      ({\n        plaintext,\n        valid\n      } = this.decryptWithAd(ss.cs, ss.h, ciphertext));\n    } else {\n      plaintext = ciphertext;\n    }\n\n    this.mixHash(ss, ciphertext);\n    return {\n      plaintext,\n      valid\n    };\n  }\n\n  dh(privateKey, publicKey) {\n    try {\n      const derivedU8 = x25519.sharedKey(privateKey, publicKey);\n      const derived = buffer_1.Buffer.from(derivedU8.buffer, derivedU8.byteOffset, derivedU8.length);\n      const result = buffer_1.Buffer.alloc(32);\n      derived.copy(result);\n      return result;\n    } catch (e) {\n      logger_1.logger(e.message);\n      return buffer_1.Buffer.alloc(32);\n    }\n  }\n\n  mixHash(ss, data) {\n    ss.h = this.getHash(ss.h, data);\n  }\n\n  getHash(a, b) {\n    const hash = SHA256.hash(buffer_1.Buffer.from([...a, ...b]));\n    return buffer_1.Buffer.from(hash.buffer, hash.byteOffset, hash.length);\n  }\n\n  mixKey(ss, ikm) {\n    const [ck, tempK] = utils_1.getHkdf(ss.ck, ikm);\n    ss.cs = this.initializeKey(tempK);\n    ss.ck = ck;\n  }\n\n  initializeKey(k) {\n    const n = exports.MIN_NONCE;\n    return {\n      k,\n      n\n    };\n  } // Symmetric state related\n\n\n  initializeSymmetric(protocolName) {\n    const protocolNameBytes = buffer_1.Buffer.from(protocolName, 'utf-8');\n    const h = this.hashProtocolName(protocolNameBytes);\n    const ck = h;\n    const key = this.createEmptyKey();\n    const cs = this.initializeKey(key);\n    return {\n      cs,\n      ck,\n      h\n    };\n  }\n\n  hashProtocolName(protocolName) {\n    if (protocolName.length <= 32) {\n      const h = buffer_1.Buffer.alloc(32);\n      protocolName.copy(h);\n      return h;\n    } else {\n      return this.getHash(protocolName, buffer_1.Buffer.alloc(0));\n    }\n  }\n\n  split(ss) {\n    const [tempk1, tempk2] = utils_1.getHkdf(ss.ck, buffer_1.Buffer.alloc(0));\n    const cs1 = this.initializeKey(tempk1);\n    const cs2 = this.initializeKey(tempk2);\n    return {\n      cs1,\n      cs2\n    };\n  }\n\n  writeMessageRegular(cs, payload) {\n    const ciphertext = this.encryptWithAd(cs, buffer_1.Buffer.alloc(0), payload);\n    const ne = this.createEmptyKey();\n    const ns = buffer_1.Buffer.alloc(0);\n    return {\n      ne,\n      ns,\n      ciphertext\n    };\n  }\n\n  readMessageRegular(cs, message) {\n    return this.decryptWithAd(cs, buffer_1.Buffer.alloc(0), message.ciphertext);\n  }\n\n}\n\nexports.AbstractHandshake = AbstractHandshake;","map":{"version":3,"mappings":"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","names":["exports","AbstractHandshake","encryptWithAd","cs","ad","plaintext","e","encrypt","k","n","setNonce","incrementNonce","decryptWithAd","ciphertext","valid","decrypt","hasKey","isEmptyKey","nonce","createEmptyKey","buffer_1","alloc","emptyKey","equals","nonceToBytes","writeUInt32LE","ctx","chacha20poly1305_1","encryptedMessage","seal","from","buffer","byteOffset","length","encryptAndHash","ss","h","mixHash","open","decryptAndHash","dh","privateKey","publicKey","derivedU8","x25519","sharedKey","derived","result","copy","logger_1","message","data","getHash","a","b","hash","SHA256","mixKey","ikm","ck","tempK","utils_1","initializeKey","initializeSymmetric","protocolName","protocolNameBytes","hashProtocolName","key","split","tempk1","tempk2","cs1","cs2","writeMessageRegular","payload","ne","ns","readMessageRegular"],"sourceRoot":"","sources":["../../../src/handshakes/abstract-handshake.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}