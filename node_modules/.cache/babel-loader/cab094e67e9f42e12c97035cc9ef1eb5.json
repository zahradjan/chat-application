{"ast":null,"code":"'use strict';\n\nconst bs58 = require('bs58');\n\nconst multihashing = require('multihashing-async');\n\nmodule.exports = (keysProtobuf, randomBytes, crypto) => {\n  crypto = crypto || require('./crypto')(randomBytes);\n\n  class Secp256k1PublicKey {\n    constructor(key) {\n      crypto.validatePublicKey(key);\n      this._key = key;\n    }\n\n    verify(data, sig, callback) {\n      ensure(callback);\n      crypto.hashAndVerify(this._key, sig, data, callback);\n    }\n\n    marshal() {\n      return crypto.compressPublicKey(this._key);\n    }\n\n    get bytes() {\n      return keysProtobuf.PublicKey.encode({\n        Type: keysProtobuf.KeyType.Secp256k1,\n        Data: this.marshal()\n      });\n    }\n\n    equals(key) {\n      return this.bytes.equals(key.bytes);\n    }\n\n    hash(callback) {\n      ensure(callback);\n      multihashing(this.bytes, 'sha2-256', callback);\n    }\n\n  }\n\n  class Secp256k1PrivateKey {\n    constructor(key, publicKey) {\n      this._key = key;\n      this._publicKey = publicKey || crypto.computePublicKey(key);\n      crypto.validatePrivateKey(this._key);\n      crypto.validatePublicKey(this._publicKey);\n    }\n\n    sign(message, callback) {\n      ensure(callback);\n      crypto.hashAndSign(this._key, message, callback);\n    }\n\n    get public() {\n      return new Secp256k1PublicKey(this._publicKey);\n    }\n\n    marshal() {\n      return this._key;\n    }\n\n    get bytes() {\n      return keysProtobuf.PrivateKey.encode({\n        Type: keysProtobuf.KeyType.Secp256k1,\n        Data: this.marshal()\n      });\n    }\n\n    equals(key) {\n      return this.bytes.equals(key.bytes);\n    }\n\n    hash(callback) {\n      ensure(callback);\n      multihashing(this.bytes, 'sha2-256', callback);\n    }\n    /**\n     * Gets the ID of the key.\n     *\n     * The key id is the base58 encoding of the SHA-256 multihash of its public key.\n     * The public key is a protobuf encoding containing a type and the DER encoding\n     * of the PKCS SubjectPublicKeyInfo.\n     *\n     * @param {function(Error, id)} callback\n     * @returns {undefined}\n     */\n\n\n    id(callback) {\n      this.public.hash((err, hash) => {\n        if (err) {\n          return callback(err);\n        }\n\n        callback(null, bs58.encode(hash));\n      });\n    }\n\n  }\n\n  function unmarshalSecp256k1PrivateKey(bytes, callback) {\n    callback(null, new Secp256k1PrivateKey(bytes));\n  }\n\n  function unmarshalSecp256k1PublicKey(bytes) {\n    return new Secp256k1PublicKey(bytes);\n  }\n\n  function generateKeyPair(_bits, callback) {\n    if (callback === undefined && typeof _bits === 'function') {\n      callback = _bits;\n    }\n\n    ensure(callback);\n    crypto.generateKey((err, privateKeyBytes) => {\n      if (err) {\n        return callback(err);\n      }\n\n      let privkey;\n\n      try {\n        privkey = new Secp256k1PrivateKey(privateKeyBytes);\n      } catch (err) {\n        return callback(err);\n      }\n\n      callback(null, privkey);\n    });\n  }\n\n  function ensure(callback) {\n    if (typeof callback !== 'function') {\n      throw new Error('callback is required');\n    }\n  }\n\n  return {\n    Secp256k1PublicKey,\n    Secp256k1PrivateKey,\n    unmarshalSecp256k1PrivateKey,\n    unmarshalSecp256k1PublicKey,\n    generateKeyPair\n  };\n};","map":{"version":3,"names":["bs58","require","multihashing","module","exports","keysProtobuf","randomBytes","crypto","Secp256k1PublicKey","constructor","key","validatePublicKey","_key","verify","data","sig","callback","ensure","hashAndVerify","marshal","compressPublicKey","bytes","PublicKey","encode","Type","KeyType","Secp256k1","Data","equals","hash","Secp256k1PrivateKey","publicKey","_publicKey","computePublicKey","validatePrivateKey","sign","message","hashAndSign","public","PrivateKey","id","err","unmarshalSecp256k1PrivateKey","unmarshalSecp256k1PublicKey","generateKeyPair","_bits","undefined","generateKey","privateKeyBytes","privkey","Error"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-crypto-secp256k1/src/index.js"],"sourcesContent":["'use strict'\n\nconst bs58 = require('bs58')\nconst multihashing = require('multihashing-async')\n\nmodule.exports = (keysProtobuf, randomBytes, crypto) => {\n  crypto = crypto || require('./crypto')(randomBytes)\n\n  class Secp256k1PublicKey {\n    constructor (key) {\n      crypto.validatePublicKey(key)\n      this._key = key\n    }\n\n    verify (data, sig, callback) {\n      ensure(callback)\n      crypto.hashAndVerify(this._key, sig, data, callback)\n    }\n\n    marshal () {\n      return crypto.compressPublicKey(this._key)\n    }\n\n    get bytes () {\n      return keysProtobuf.PublicKey.encode({\n        Type: keysProtobuf.KeyType.Secp256k1,\n        Data: this.marshal()\n      })\n    }\n\n    equals (key) {\n      return this.bytes.equals(key.bytes)\n    }\n\n    hash (callback) {\n      ensure(callback)\n      multihashing(this.bytes, 'sha2-256', callback)\n    }\n  }\n\n  class Secp256k1PrivateKey {\n    constructor (key, publicKey) {\n      this._key = key\n      this._publicKey = publicKey || crypto.computePublicKey(key)\n      crypto.validatePrivateKey(this._key)\n      crypto.validatePublicKey(this._publicKey)\n    }\n\n    sign (message, callback) {\n      ensure(callback)\n      crypto.hashAndSign(this._key, message, callback)\n    }\n\n    get public () {\n      return new Secp256k1PublicKey(this._publicKey)\n    }\n\n    marshal () {\n      return this._key\n    }\n\n    get bytes () {\n      return keysProtobuf.PrivateKey.encode({\n        Type: keysProtobuf.KeyType.Secp256k1,\n        Data: this.marshal()\n      })\n    }\n\n    equals (key) {\n      return this.bytes.equals(key.bytes)\n    }\n\n    hash (callback) {\n      ensure(callback)\n      multihashing(this.bytes, 'sha2-256', callback)\n    }\n\n    /**\n     * Gets the ID of the key.\n     *\n     * The key id is the base58 encoding of the SHA-256 multihash of its public key.\n     * The public key is a protobuf encoding containing a type and the DER encoding\n     * of the PKCS SubjectPublicKeyInfo.\n     *\n     * @param {function(Error, id)} callback\n     * @returns {undefined}\n     */\n    id (callback) {\n      this.public.hash((err, hash) => {\n        if (err) {\n          return callback(err)\n        }\n        callback(null, bs58.encode(hash))\n      })\n    }\n  }\n\n  function unmarshalSecp256k1PrivateKey (bytes, callback) {\n    callback(null, new Secp256k1PrivateKey(bytes))\n  }\n\n  function unmarshalSecp256k1PublicKey (bytes) {\n    return new Secp256k1PublicKey(bytes)\n  }\n\n  function generateKeyPair (_bits, callback) {\n    if (callback === undefined && typeof _bits === 'function') {\n      callback = _bits\n    }\n\n    ensure(callback)\n\n    crypto.generateKey((err, privateKeyBytes) => {\n      if (err) { return callback(err) }\n\n      let privkey\n      try {\n        privkey = new Secp256k1PrivateKey(privateKeyBytes)\n      } catch (err) { return callback(err) }\n\n      callback(null, privkey)\n    })\n  }\n\n  function ensure (callback) {\n    if (typeof callback !== 'function') {\n      throw new Error('callback is required')\n    }\n  }\n\n  return {\n    Secp256k1PublicKey,\n    Secp256k1PrivateKey,\n    unmarshalSecp256k1PrivateKey,\n    unmarshalSecp256k1PublicKey,\n    generateKeyPair\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}