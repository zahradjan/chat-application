{"ast":null,"code":"var _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _wrapAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nvar _awaitAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _asyncIterator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar _asyncGeneratorDelegate = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate.js\").default;\n\nvar toDuplex = require('./duplex');\n\nmodule.exports = function (transform) {\n  return /*#__PURE__*/function () {\n    var _ref = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(source) {\n      var duplex, sinkError;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              duplex = toDuplex(transform); // In a transform the sink and source are connected, an error in the sink\n              // will be thrown in the source also. Catch the sink error to avoid unhandled\n              // rejections and yield from the source.\n\n              duplex.sink(source).catch(function (err) {\n                sinkError = err;\n              });\n              return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(duplex.source), _awaitAsyncGenerator), \"t0\", 3);\n\n            case 3:\n              if (!sinkError) {\n                _context.next = 5;\n                break;\n              }\n\n              throw sinkError;\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"names":["toDuplex","require","module","exports","transform","source","duplex","sink","catch","err","sinkError"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/stream-to-it/transform.js"],"sourcesContent":["const toDuplex = require('./duplex')\n\nmodule.exports = transform => async function * (source) {\n  const duplex = toDuplex(transform)\n  // In a transform the sink and source are connected, an error in the sink\n  // will be thrown in the source also. Catch the sink error to avoid unhandled\n  // rejections and yield from the source.\n  let sinkError\n  duplex.sink(source).catch(err => { sinkError = err })\n\n  yield * duplex.source\n  if (sinkError) throw sinkError\n}\n"],"mappings":";;;;;;;;;;AAAA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAAAC,SAAS;EAAA;IAAA,wEAAI,iBAAkBC,MAAlB;MAAA;MAAA;QAAA;UAAA;YAAA;cACtBC,MADsB,GACbN,QAAQ,CAACI,SAAD,CADK,EAE5B;cACA;cACA;;cAEAE,MAAM,CAACC,IAAP,CAAYF,MAAZ,EAAoBG,KAApB,CAA0B,UAAAC,GAAG,EAAI;gBAAEC,SAAS,GAAGD,GAAZ;cAAiB,CAApD;cAEA,qEAAQH,MAAM,CAACD,MAAf;;YAR4B;cAAA,KASxBK,SATwB;gBAAA;gBAAA;cAAA;;cAAA,MASPA,SATO;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAJ;;IAAA;MAAA;IAAA;EAAA;AAAA,CAA1B"},"metadata":{},"sourceType":"script"}