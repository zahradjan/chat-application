{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _defineProperty = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\n\nvar _awaitAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _wrapAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nvar _asyncIterator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar _ReadHandlers;\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer; // @ts-ignore\n\n\nvar BufferList = require('bl/BufferList');\n\nvar varintDecode = require('./varint-decode'); // Maximum length of the length section of the message\n\n\nvar MAX_LENGTH_LENGTH = 8; // Varint.encode(Number.MAX_SAFE_INTEGER).length\n// Maximum length of the data section of the message\n\nvar MAX_DATA_LENGTH = 1024 * 1024 * 4;\nvar Empty = Buffer.alloc(0);\nvar ReadModes = {\n  LENGTH: 'readLength',\n  DATA: 'readData'\n};\nvar ReadHandlers = (_ReadHandlers = {}, _defineProperty(_ReadHandlers, ReadModes.LENGTH, function (chunk, buffer, state, options) {\n  // console.log(ReadModes.LENGTH, chunk.length)\n  buffer = buffer.append(chunk);\n  var dataLength;\n\n  try {\n    dataLength = options.lengthDecoder(buffer);\n  } catch (err) {\n    if (buffer.length > options.maxLengthLength) {\n      throw Object.assign(err, {\n        message: 'message length too long',\n        code: 'ERR_MSG_LENGTH_TOO_LONG'\n      });\n    }\n\n    if (err instanceof RangeError) {\n      return {\n        mode: ReadModes.LENGTH,\n        buffer: buffer,\n        chunk: undefined,\n        state: undefined,\n        data: undefined\n      };\n    }\n\n    throw err;\n  }\n\n  if (dataLength > options.maxDataLength) {\n    throw Object.assign(new Error('message data too long'), {\n      code: 'ERR_MSG_DATA_TOO_LONG'\n    });\n  }\n\n  chunk = buffer.shallowSlice(options.lengthDecoder.bytes);\n  buffer = new BufferList();\n  if (options.onLength) options.onLength(dataLength);\n\n  if (dataLength <= 0) {\n    if (options.onData) options.onData(Empty);\n    return {\n      mode: ReadModes.LENGTH,\n      chunk: chunk,\n      buffer: buffer,\n      data: Empty\n    };\n  }\n\n  return {\n    mode: ReadModes.DATA,\n    chunk: chunk,\n    buffer: buffer,\n    state: {\n      dataLength: dataLength\n    },\n    data: undefined\n  };\n}), _defineProperty(_ReadHandlers, ReadModes.DATA, function (chunk, buffer, state, options) {\n  // console.log(ReadModes.DATA, chunk.length)\n  buffer = buffer.append(chunk);\n\n  if (!state) {\n    throw new Error('state is required');\n  }\n\n  if (buffer.length < state.dataLength) {\n    return {\n      mode: ReadModes.DATA,\n      buffer: buffer,\n      state: state,\n      chunk: undefined,\n      data: undefined\n    };\n  }\n\n  var dataLength = state.dataLength;\n  var data = buffer.shallowSlice(0, dataLength);\n  var nextChunk = buffer.length > dataLength ? buffer.shallowSlice(dataLength) : undefined;\n  buffer = new BufferList();\n  if (options.onData) options.onData(data);\n  return {\n    mode: ReadModes.LENGTH,\n    chunk: nextChunk,\n    buffer: buffer,\n    state: undefined,\n    data: data\n  };\n}), _ReadHandlers);\n/**\n * @param {any} [options]\n */\n\nfunction decode(options) {\n  options = options || {};\n  /**\n   * @type {import('./types').DecoderOptions}\n   */\n\n  var opts = {\n    lengthDecoder: options.lengthDecoder || varintDecode,\n    maxLengthLength: options.maxLengthLength || MAX_LENGTH_LENGTH,\n    maxDataLength: options.maxDataLength || MAX_DATA_LENGTH,\n    onLength: options.onLength,\n    onData: options.onData\n  };\n  /**\n   * @param {AsyncIterable<BufferList>} source\n   */\n\n  var decoder = /*#__PURE__*/function () {\n    var _ref = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(source) {\n      var buffer, mode, state, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, chunk, nextChunk, result;\n\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              buffer = new BufferList();\n              mode = ReadModes.LENGTH; // current parsing mode\n\n              // accumulated state for the current mode\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 4;\n              _iterator = _asyncIterator(source);\n\n            case 6:\n              _context.next = 8;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 8:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 25;\n                break;\n              }\n\n              chunk = _step.value;\n\n              /** @type {BufferList | undefined} */\n              nextChunk = chunk; // Each chunk may contain multiple messages - keep calling handler for the\n              // current parsing mode until all handlers have consumed the chunk.\n\n            case 11:\n              if (!nextChunk) {\n                _context.next = 22;\n                break;\n              }\n\n              result = ReadHandlers[mode](nextChunk, buffer, state, opts);\n              mode = result.mode;\n              nextChunk = result.chunk;\n              buffer = result.buffer;\n              state = result.state;\n\n              if (!result.data) {\n                _context.next = 20;\n                break;\n              }\n\n              _context.next = 20;\n              return result.data;\n\n            case 20:\n              _context.next = 11;\n              break;\n\n            case 22:\n              _iteratorAbruptCompletion = false;\n              _context.next = 6;\n              break;\n\n            case 25:\n              _context.next = 31;\n              break;\n\n            case 27:\n              _context.prev = 27;\n              _context.t0 = _context[\"catch\"](4);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n\n            case 31:\n              _context.prev = 31;\n              _context.prev = 32;\n\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 36;\n                break;\n              }\n\n              _context.next = 36;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 36:\n              _context.prev = 36;\n\n              if (!_didIteratorError) {\n                _context.next = 39;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 39:\n              return _context.finish(36);\n\n            case 40:\n              return _context.finish(31);\n\n            case 41:\n              if (!buffer.length) {\n                _context.next = 43;\n                break;\n              }\n\n              throw Object.assign(new Error('unexpected end of input'), {\n                code: 'ERR_UNEXPECTED_EOF'\n              });\n\n            case 43:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[4, 27, 31, 41], [32,, 36, 40]]);\n    }));\n\n    return function decoder(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return decoder;\n}\n/**\n * @param {*} reader\n * @param {import('./types').DecoderOptions} [options]\n * @returns\n */\n\n\ndecode.fromReader = function (reader, options) {\n  var _varByteSource;\n\n  var byteLength = 1; // Read single byte chunks until the length is known\n\n  var varByteSource = (_varByteSource = {}, _defineProperty(_varByteSource, Symbol.asyncIterator, function () {\n    return this;\n  }), _defineProperty(_varByteSource, \"next\", function () {\n    var _next = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return reader.next(byteLength);\n\n            case 3:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 6:\n              _context2.prev = 6;\n              _context2.t0 = _context2[\"catch\"](0);\n\n              if (!(_context2.t0.code === 'ERR_UNDER_READ')) {\n                _context2.next = 10;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", {\n                done: true,\n                value: null\n              });\n\n            case 10:\n              throw _context2.t0;\n\n            case 11:\n              _context2.prev = 11;\n              // Reset the byteLength so we continue to check for varints\n              byteLength = 1;\n              return _context2.finish(11);\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 6, 11, 14]]);\n    }));\n\n    function next() {\n      return _next.apply(this, arguments);\n    }\n\n    return next;\n  }()), _varByteSource);\n  /**\n   * Once the length has been parsed, read chunk for that length\n   *\n   * @param {number} l\n   */\n\n  var onLength = function onLength(l) {\n    byteLength = l;\n  };\n\n  return decode(_objectSpread(_objectSpread({}, options || {}), {}, {\n    onLength: onLength\n  }))(varByteSource);\n};\n\nmodule.exports = decode;\nmodule.exports.MAX_LENGTH_LENGTH = MAX_LENGTH_LENGTH;\nmodule.exports.MAX_DATA_LENGTH = MAX_DATA_LENGTH;","map":{"version":3,"names":["require","Buffer","BufferList","varintDecode","MAX_LENGTH_LENGTH","MAX_DATA_LENGTH","Empty","alloc","ReadModes","LENGTH","DATA","ReadHandlers","chunk","buffer","state","options","append","dataLength","lengthDecoder","err","length","maxLengthLength","Object","assign","message","code","RangeError","mode","undefined","data","maxDataLength","Error","shallowSlice","bytes","onLength","onData","nextChunk","decode","opts","decoder","source","result","fromReader","reader","byteLength","varByteSource","Symbol","asyncIterator","next","done","value","l","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/it-length-prefixed/src/decode.js"],"sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer')\n// @ts-ignore\nconst BufferList = require('bl/BufferList')\nconst varintDecode = require('./varint-decode')\n\n// Maximum length of the length section of the message\nconst MAX_LENGTH_LENGTH = 8 // Varint.encode(Number.MAX_SAFE_INTEGER).length\n// Maximum length of the data section of the message\nconst MAX_DATA_LENGTH = 1024 * 1024 * 4\n\nconst Empty = Buffer.alloc(0)\nconst ReadModes = { LENGTH: 'readLength', DATA: 'readData' }\n\nconst ReadHandlers = {\n  /**\n   * @param {BufferList} chunk\n   * @param {BufferList} buffer\n   * @param {import('./types').ReadState | undefined} state\n   * @param {import('./types').DecoderOptions} options\n   * @returns {import('./types').ReadResult}\n   */\n  [ReadModes.LENGTH]: (chunk, buffer, state, options) => {\n    // console.log(ReadModes.LENGTH, chunk.length)\n    buffer = buffer.append(chunk)\n\n    let dataLength\n    try {\n      dataLength = options.lengthDecoder(buffer)\n    } catch (err) {\n      if (buffer.length > options.maxLengthLength) {\n        throw Object.assign(err, { message: 'message length too long', code: 'ERR_MSG_LENGTH_TOO_LONG' })\n      }\n      if (err instanceof RangeError) {\n        return { mode: ReadModes.LENGTH, buffer, chunk: undefined, state: undefined, data: undefined }\n      }\n      throw err\n    }\n\n    if (dataLength > options.maxDataLength) {\n      throw Object.assign(new Error('message data too long'), { code: 'ERR_MSG_DATA_TOO_LONG' })\n    }\n\n    chunk = buffer.shallowSlice(options.lengthDecoder.bytes)\n    buffer = new BufferList()\n\n    if (options.onLength) options.onLength(dataLength)\n\n    if (dataLength <= 0) {\n      if (options.onData) options.onData(Empty)\n      return { mode: ReadModes.LENGTH, chunk, buffer, data: Empty }\n    }\n\n    return { mode: ReadModes.DATA, chunk, buffer, state: { dataLength }, data: undefined }\n  },\n\n  /**\n   * @param {BufferList} chunk\n   * @param {BufferList} buffer\n   * @param {import('./types').ReadState | undefined} state\n   * @param {import('./types').DecoderOptions} options\n   * @returns {import('./types').ReadResult}\n   */\n  [ReadModes.DATA]: (chunk, buffer, state, options) => {\n    // console.log(ReadModes.DATA, chunk.length)\n    buffer = buffer.append(chunk)\n\n    if (!state) {\n      throw new Error('state is required')\n    }\n\n    if (buffer.length < state.dataLength) {\n      return { mode: ReadModes.DATA, buffer, state, chunk: undefined, data: undefined }\n    }\n\n    const { dataLength } = state\n    const data = buffer.shallowSlice(0, dataLength)\n\n    const nextChunk = buffer.length > dataLength ? buffer.shallowSlice(dataLength) : undefined\n    buffer = new BufferList()\n\n    if (options.onData) options.onData(data)\n    return { mode: ReadModes.LENGTH, chunk: nextChunk, buffer, state: undefined, data }\n  }\n}\n\n/**\n * @param {any} [options]\n */\nfunction decode (options) {\n  options = options || {}\n\n  /**\n   * @type {import('./types').DecoderOptions}\n   */\n  const opts = {\n    lengthDecoder: options.lengthDecoder || varintDecode,\n    maxLengthLength: options.maxLengthLength || MAX_LENGTH_LENGTH,\n    maxDataLength: options.maxDataLength || MAX_DATA_LENGTH,\n    onLength: options.onLength,\n    onData: options.onData\n  }\n\n  /**\n   * @param {AsyncIterable<BufferList>} source\n   */\n  const decoder = async function * (source) {\n    let buffer = new BufferList()\n    let mode = ReadModes.LENGTH // current parsing mode\n    let state // accumulated state for the current mode\n\n    for await (const chunk of source) {\n      /** @type {BufferList | undefined} */\n      let nextChunk = chunk\n\n      // Each chunk may contain multiple messages - keep calling handler for the\n      // current parsing mode until all handlers have consumed the chunk.\n      while (nextChunk) {\n        const result = ReadHandlers[mode](nextChunk, buffer, state, opts)\n\n        mode = result.mode\n        nextChunk = result.chunk\n        buffer = result.buffer\n        state = result.state\n\n        if (result.data) {\n          yield result.data\n        }\n      }\n    }\n\n    if (buffer.length) {\n      throw Object.assign(new Error('unexpected end of input'), { code: 'ERR_UNEXPECTED_EOF' })\n    }\n  }\n\n  return decoder\n}\n\n/**\n * @param {*} reader\n * @param {import('./types').DecoderOptions} [options]\n * @returns\n */\ndecode.fromReader = (reader, options) => {\n  let byteLength = 1 // Read single byte chunks until the length is known\n\n  const varByteSource = {\n    [Symbol.asyncIterator] () { return this },\n    next: async () => {\n      try {\n        return await reader.next(byteLength)\n      } catch (err) {\n        if (err.code === 'ERR_UNDER_READ') {\n          return { done: true, value: null }\n        }\n        throw err\n      } finally {\n        // Reset the byteLength so we continue to check for varints\n        byteLength = 1\n      }\n    }\n  }\n\n  /**\n   * Once the length has been parsed, read chunk for that length\n   *\n   * @param {number} l\n   */\n  const onLength = l => { byteLength = l }\n  return decode({\n    ...(options || {}),\n    onLength\n  })(varByteSource)\n}\n\nmodule.exports = decode\nmodule.exports.MAX_LENGTH_LENGTH = MAX_LENGTH_LENGTH\nmodule.exports.MAX_DATA_LENGTH = MAX_DATA_LENGTH\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}