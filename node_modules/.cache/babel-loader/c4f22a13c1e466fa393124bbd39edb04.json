{"ast":null,"code":"'use strict';\n\nconst noop = () => {};\n\nconst topologySymbol = Symbol.for('@libp2p/js-interfaces/topology');\n/**\n * @typedef {import('peer-id')} PeerId\n */\n\n/**\n * @typedef {Object} Options\n * @property {number} [min=0] - minimum needed connections.\n * @property {number} [max=Infinity] - maximum needed connections.\n * @property {Handlers} [handlers]\n *\n * @typedef {Object} Handlers\n * @property {(peerId: PeerId, conn: Connection) => void} [onConnect] - protocol \"onConnect\" handler\n * @property {(peerId: PeerId, error?:Error) => void} [onDisconnect] - protocol \"onDisconnect\" handler\n *\n * @typedef {import('../connection/connection')} Connection\n */\n\nclass Topology {\n  /**\n   * @param {Options} options\n   */\n  constructor(_ref) {\n    let {\n      min = 0,\n      max = Infinity,\n      handlers = {}\n    } = _ref;\n    this.min = min;\n    this.max = max; // Handlers\n\n    this._onConnect = handlers.onConnect || noop;\n    this._onDisconnect = handlers.onDisconnect || noop;\n    /**\n     * Set of peers that support the protocol.\n     *\n     * @type {Set<string>}\n     */\n\n    this.peers = new Set();\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Topology';\n  }\n\n  get [topologySymbol]() {\n    return true;\n  }\n  /**\n   * Checks if the given value is a Topology instance.\n   *\n   * @param {any} other\n   * @returns {other is Topology}\n   */\n\n\n  static isTopology(other) {\n    return Boolean(other && other[topologySymbol]);\n  }\n  /**\n   * @param {any} registrar\n   */\n\n\n  set registrar(registrar) {\n    // eslint-disable-line\n    this._registrar = registrar;\n  }\n  /**\n   * Notify about peer disconnected event.\n   *\n   * @param {PeerId} peerId\n   * @returns {void}\n   */\n\n\n  disconnect(peerId) {\n    this._onDisconnect(peerId);\n  }\n\n}\n\nmodule.exports = Topology;","map":{"version":3,"names":["noop","topologySymbol","Symbol","for","Topology","constructor","min","max","Infinity","handlers","_onConnect","onConnect","_onDisconnect","onDisconnect","peers","Set","toStringTag","isTopology","other","Boolean","registrar","_registrar","disconnect","peerId","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-interfaces/src/topology/index.js"],"sourcesContent":["'use strict'\n\nconst noop = () => {}\nconst topologySymbol = Symbol.for('@libp2p/js-interfaces/topology')\n\n/**\n * @typedef {import('peer-id')} PeerId\n */\n\n/**\n * @typedef {Object} Options\n * @property {number} [min=0] - minimum needed connections.\n * @property {number} [max=Infinity] - maximum needed connections.\n * @property {Handlers} [handlers]\n *\n * @typedef {Object} Handlers\n * @property {(peerId: PeerId, conn: Connection) => void} [onConnect] - protocol \"onConnect\" handler\n * @property {(peerId: PeerId, error?:Error) => void} [onDisconnect] - protocol \"onDisconnect\" handler\n *\n * @typedef {import('../connection/connection')} Connection\n */\n\nclass Topology {\n  /**\n   * @param {Options} options\n   */\n  constructor ({\n    min = 0,\n    max = Infinity,\n    handlers = {}\n  }) {\n    this.min = min\n    this.max = max\n\n    // Handlers\n    this._onConnect = handlers.onConnect || noop\n    this._onDisconnect = handlers.onDisconnect || noop\n\n    /**\n     * Set of peers that support the protocol.\n     *\n     * @type {Set<string>}\n     */\n    this.peers = new Set()\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'Topology'\n  }\n\n  get [topologySymbol] () {\n    return true\n  }\n\n  /**\n   * Checks if the given value is a Topology instance.\n   *\n   * @param {any} other\n   * @returns {other is Topology}\n   */\n  static isTopology (other) {\n    return Boolean(other && other[topologySymbol])\n  }\n\n  /**\n   * @param {any} registrar\n   */\n  set registrar (registrar) { // eslint-disable-line\n    this._registrar = registrar\n  }\n\n  /**\n   * Notify about peer disconnected event.\n   *\n   * @param {PeerId} peerId\n   * @returns {void}\n   */\n  disconnect (peerId) {\n    this._onDisconnect(peerId)\n  }\n}\n\nmodule.exports = Topology\n"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAG,MAAM,CAAE,CAArB;;AACA,MAAMC,cAAc,GAAGC,MAAM,CAACC,GAAP,CAAW,gCAAX,CAAvB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,QAAN,CAAe;EACb;AACF;AACA;EACEC,WAAW,OAIR;IAAA,IAJU;MACXC,GAAG,GAAG,CADK;MAEXC,GAAG,GAAGC,QAFK;MAGXC,QAAQ,GAAG;IAHA,CAIV;IACD,KAAKH,GAAL,GAAWA,GAAX;IACA,KAAKC,GAAL,GAAWA,GAAX,CAFC,CAID;;IACA,KAAKG,UAAL,GAAkBD,QAAQ,CAACE,SAAT,IAAsBX,IAAxC;IACA,KAAKY,aAAL,GAAqBH,QAAQ,CAACI,YAAT,IAAyBb,IAA9C;IAEA;AACJ;AACA;AACA;AACA;;IACI,KAAKc,KAAL,GAAa,IAAIC,GAAJ,EAAb;EACD;;EAEsB,KAAlBb,MAAM,CAACc,WAAW,IAAK;IAC1B,OAAO,UAAP;EACD;;EAEkB,KAAdf,cAAc,IAAK;IACtB,OAAO,IAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACmB,OAAVgB,UAAU,CAAEC,KAAF,EAAS;IACxB,OAAOC,OAAO,CAACD,KAAK,IAAIA,KAAK,CAACjB,cAAD,CAAf,CAAd;EACD;EAED;AACF;AACA;;;EACe,IAATmB,SAAS,CAAEA,SAAF,EAAa;IAAE;IAC1B,KAAKC,UAAL,GAAkBD,SAAlB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEE,UAAU,CAAEC,MAAF,EAAU;IAClB,KAAKX,aAAL,CAAmBW,MAAnB;EACD;;AAzDY;;AA4DfC,MAAM,CAACC,OAAP,GAAiBrB,QAAjB"},"metadata":{},"sourceType":"script"}