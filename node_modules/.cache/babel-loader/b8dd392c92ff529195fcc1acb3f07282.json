{"ast":null,"code":"/*eslint-disable*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\"); // Common aliases\n\n\nvar $Reader = $protobuf.Reader,\n    $Writer = $protobuf.Writer,\n    $util = $protobuf.util; // Exported root namespace\n\nvar $root = $protobuf.roots[\"libp2p-envelope\"] || ($protobuf.roots[\"libp2p-envelope\"] = {});\n\n$root.Envelope = function () {\n  /**\n   * Properties of an Envelope.\n   * @exports IEnvelope\n   * @interface IEnvelope\n   * @property {Uint8Array|null} [publicKey] Envelope publicKey\n   * @property {Uint8Array|null} [payloadType] Envelope payloadType\n   * @property {Uint8Array|null} [payload] Envelope payload\n   * @property {Uint8Array|null} [signature] Envelope signature\n   */\n\n  /**\n   * Constructs a new Envelope.\n   * @exports Envelope\n   * @classdesc Represents an Envelope.\n   * @implements IEnvelope\n   * @constructor\n   * @param {IEnvelope=} [p] Properties to set\n   */\n  function Envelope(p) {\n    if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {\n      if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n    }\n  }\n  /**\n   * Envelope publicKey.\n   * @member {Uint8Array} publicKey\n   * @memberof Envelope\n   * @instance\n   */\n\n\n  Envelope.prototype.publicKey = $util.newBuffer([]);\n  /**\n   * Envelope payloadType.\n   * @member {Uint8Array} payloadType\n   * @memberof Envelope\n   * @instance\n   */\n\n  Envelope.prototype.payloadType = $util.newBuffer([]);\n  /**\n   * Envelope payload.\n   * @member {Uint8Array} payload\n   * @memberof Envelope\n   * @instance\n   */\n\n  Envelope.prototype.payload = $util.newBuffer([]);\n  /**\n   * Envelope signature.\n   * @member {Uint8Array} signature\n   * @memberof Envelope\n   * @instance\n   */\n\n  Envelope.prototype.signature = $util.newBuffer([]);\n  /**\n   * Encodes the specified Envelope message. Does not implicitly {@link Envelope.verify|verify} messages.\n   * @function encode\n   * @memberof Envelope\n   * @static\n   * @param {IEnvelope} m Envelope message or plain object to encode\n   * @param {$protobuf.Writer} [w] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n  Envelope.encode = function encode(m, w) {\n    if (!w) w = $Writer.create();\n    if (m.publicKey != null && Object.hasOwnProperty.call(m, \"publicKey\")) w.uint32(10).bytes(m.publicKey);\n    if (m.payloadType != null && Object.hasOwnProperty.call(m, \"payloadType\")) w.uint32(18).bytes(m.payloadType);\n    if (m.payload != null && Object.hasOwnProperty.call(m, \"payload\")) w.uint32(26).bytes(m.payload);\n    if (m.signature != null && Object.hasOwnProperty.call(m, \"signature\")) w.uint32(42).bytes(m.signature);\n    return w;\n  };\n  /**\n   * Decodes an Envelope message from the specified reader or buffer.\n   * @function decode\n   * @memberof Envelope\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n   * @param {number} [l] Message length if known beforehand\n   * @returns {Envelope} Envelope\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  Envelope.decode = function decode(r, l) {\n    if (!(r instanceof $Reader)) r = $Reader.create(r);\n    var c = l === undefined ? r.len : r.pos + l,\n        m = new $root.Envelope();\n\n    while (r.pos < c) {\n      var t = r.uint32();\n\n      switch (t >>> 3) {\n        case 1:\n          m.publicKey = r.bytes();\n          break;\n\n        case 2:\n          m.payloadType = r.bytes();\n          break;\n\n        case 3:\n          m.payload = r.bytes();\n          break;\n\n        case 5:\n          m.signature = r.bytes();\n          break;\n\n        default:\n          r.skipType(t & 7);\n          break;\n      }\n    }\n\n    return m;\n  };\n  /**\n   * Creates an Envelope message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Envelope\n   * @static\n   * @param {Object.<string,*>} d Plain object\n   * @returns {Envelope} Envelope\n   */\n\n\n  Envelope.fromObject = function fromObject(d) {\n    if (d instanceof $root.Envelope) return d;\n    var m = new $root.Envelope();\n\n    if (d.publicKey != null) {\n      if (typeof d.publicKey === \"string\") $util.base64.decode(d.publicKey, m.publicKey = $util.newBuffer($util.base64.length(d.publicKey)), 0);else if (d.publicKey.length) m.publicKey = d.publicKey;\n    }\n\n    if (d.payloadType != null) {\n      if (typeof d.payloadType === \"string\") $util.base64.decode(d.payloadType, m.payloadType = $util.newBuffer($util.base64.length(d.payloadType)), 0);else if (d.payloadType.length) m.payloadType = d.payloadType;\n    }\n\n    if (d.payload != null) {\n      if (typeof d.payload === \"string\") $util.base64.decode(d.payload, m.payload = $util.newBuffer($util.base64.length(d.payload)), 0);else if (d.payload.length) m.payload = d.payload;\n    }\n\n    if (d.signature != null) {\n      if (typeof d.signature === \"string\") $util.base64.decode(d.signature, m.signature = $util.newBuffer($util.base64.length(d.signature)), 0);else if (d.signature.length) m.signature = d.signature;\n    }\n\n    return m;\n  };\n  /**\n   * Creates a plain object from an Envelope message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Envelope\n   * @static\n   * @param {Envelope} m Envelope\n   * @param {$protobuf.IConversionOptions} [o] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  Envelope.toObject = function toObject(m, o) {\n    if (!o) o = {};\n    var d = {};\n\n    if (o.defaults) {\n      if (o.bytes === String) d.publicKey = \"\";else {\n        d.publicKey = [];\n        if (o.bytes !== Array) d.publicKey = $util.newBuffer(d.publicKey);\n      }\n      if (o.bytes === String) d.payloadType = \"\";else {\n        d.payloadType = [];\n        if (o.bytes !== Array) d.payloadType = $util.newBuffer(d.payloadType);\n      }\n      if (o.bytes === String) d.payload = \"\";else {\n        d.payload = [];\n        if (o.bytes !== Array) d.payload = $util.newBuffer(d.payload);\n      }\n      if (o.bytes === String) d.signature = \"\";else {\n        d.signature = [];\n        if (o.bytes !== Array) d.signature = $util.newBuffer(d.signature);\n      }\n    }\n\n    if (m.publicKey != null && m.hasOwnProperty(\"publicKey\")) {\n      d.publicKey = o.bytes === String ? $util.base64.encode(m.publicKey, 0, m.publicKey.length) : o.bytes === Array ? Array.prototype.slice.call(m.publicKey) : m.publicKey;\n    }\n\n    if (m.payloadType != null && m.hasOwnProperty(\"payloadType\")) {\n      d.payloadType = o.bytes === String ? $util.base64.encode(m.payloadType, 0, m.payloadType.length) : o.bytes === Array ? Array.prototype.slice.call(m.payloadType) : m.payloadType;\n    }\n\n    if (m.payload != null && m.hasOwnProperty(\"payload\")) {\n      d.payload = o.bytes === String ? $util.base64.encode(m.payload, 0, m.payload.length) : o.bytes === Array ? Array.prototype.slice.call(m.payload) : m.payload;\n    }\n\n    if (m.signature != null && m.hasOwnProperty(\"signature\")) {\n      d.signature = o.bytes === String ? $util.base64.encode(m.signature, 0, m.signature.length) : o.bytes === Array ? Array.prototype.slice.call(m.signature) : m.signature;\n    }\n\n    return d;\n  };\n  /**\n   * Converts this Envelope to JSON.\n   * @function toJSON\n   * @memberof Envelope\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  Envelope.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return Envelope;\n}();\n\nmodule.exports = $root;","map":{"version":3,"names":["$protobuf","require","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Envelope","p","ks","Object","keys","i","length","prototype","publicKey","newBuffer","payloadType","payload","signature","encode","m","w","create","hasOwnProperty","call","uint32","bytes","decode","r","l","c","undefined","len","pos","t","skipType","fromObject","d","base64","toObject","o","defaults","String","Array","slice","toJSON","constructor","toJSONOptions","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p/src/record/envelope/envelope.js"],"sourcesContent":["/*eslint-disable*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"libp2p-envelope\"] || ($protobuf.roots[\"libp2p-envelope\"] = {});\n\n$root.Envelope = (function() {\n\n    /**\n     * Properties of an Envelope.\n     * @exports IEnvelope\n     * @interface IEnvelope\n     * @property {Uint8Array|null} [publicKey] Envelope publicKey\n     * @property {Uint8Array|null} [payloadType] Envelope payloadType\n     * @property {Uint8Array|null} [payload] Envelope payload\n     * @property {Uint8Array|null} [signature] Envelope signature\n     */\n\n    /**\n     * Constructs a new Envelope.\n     * @exports Envelope\n     * @classdesc Represents an Envelope.\n     * @implements IEnvelope\n     * @constructor\n     * @param {IEnvelope=} [p] Properties to set\n     */\n    function Envelope(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Envelope publicKey.\n     * @member {Uint8Array} publicKey\n     * @memberof Envelope\n     * @instance\n     */\n    Envelope.prototype.publicKey = $util.newBuffer([]);\n\n    /**\n     * Envelope payloadType.\n     * @member {Uint8Array} payloadType\n     * @memberof Envelope\n     * @instance\n     */\n    Envelope.prototype.payloadType = $util.newBuffer([]);\n\n    /**\n     * Envelope payload.\n     * @member {Uint8Array} payload\n     * @memberof Envelope\n     * @instance\n     */\n    Envelope.prototype.payload = $util.newBuffer([]);\n\n    /**\n     * Envelope signature.\n     * @member {Uint8Array} signature\n     * @memberof Envelope\n     * @instance\n     */\n    Envelope.prototype.signature = $util.newBuffer([]);\n\n    /**\n     * Encodes the specified Envelope message. Does not implicitly {@link Envelope.verify|verify} messages.\n     * @function encode\n     * @memberof Envelope\n     * @static\n     * @param {IEnvelope} m Envelope message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Envelope.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.publicKey != null && Object.hasOwnProperty.call(m, \"publicKey\"))\n            w.uint32(10).bytes(m.publicKey);\n        if (m.payloadType != null && Object.hasOwnProperty.call(m, \"payloadType\"))\n            w.uint32(18).bytes(m.payloadType);\n        if (m.payload != null && Object.hasOwnProperty.call(m, \"payload\"))\n            w.uint32(26).bytes(m.payload);\n        if (m.signature != null && Object.hasOwnProperty.call(m, \"signature\"))\n            w.uint32(42).bytes(m.signature);\n        return w;\n    };\n\n    /**\n     * Decodes an Envelope message from the specified reader or buffer.\n     * @function decode\n     * @memberof Envelope\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Envelope} Envelope\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Envelope.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Envelope();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.publicKey = r.bytes();\n                break;\n            case 2:\n                m.payloadType = r.bytes();\n                break;\n            case 3:\n                m.payload = r.bytes();\n                break;\n            case 5:\n                m.signature = r.bytes();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates an Envelope message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Envelope\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Envelope} Envelope\n     */\n    Envelope.fromObject = function fromObject(d) {\n        if (d instanceof $root.Envelope)\n            return d;\n        var m = new $root.Envelope();\n        if (d.publicKey != null) {\n            if (typeof d.publicKey === \"string\")\n                $util.base64.decode(d.publicKey, m.publicKey = $util.newBuffer($util.base64.length(d.publicKey)), 0);\n            else if (d.publicKey.length)\n                m.publicKey = d.publicKey;\n        }\n        if (d.payloadType != null) {\n            if (typeof d.payloadType === \"string\")\n                $util.base64.decode(d.payloadType, m.payloadType = $util.newBuffer($util.base64.length(d.payloadType)), 0);\n            else if (d.payloadType.length)\n                m.payloadType = d.payloadType;\n        }\n        if (d.payload != null) {\n            if (typeof d.payload === \"string\")\n                $util.base64.decode(d.payload, m.payload = $util.newBuffer($util.base64.length(d.payload)), 0);\n            else if (d.payload.length)\n                m.payload = d.payload;\n        }\n        if (d.signature != null) {\n            if (typeof d.signature === \"string\")\n                $util.base64.decode(d.signature, m.signature = $util.newBuffer($util.base64.length(d.signature)), 0);\n            else if (d.signature.length)\n                m.signature = d.signature;\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from an Envelope message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Envelope\n     * @static\n     * @param {Envelope} m Envelope\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Envelope.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            if (o.bytes === String)\n                d.publicKey = \"\";\n            else {\n                d.publicKey = [];\n                if (o.bytes !== Array)\n                    d.publicKey = $util.newBuffer(d.publicKey);\n            }\n            if (o.bytes === String)\n                d.payloadType = \"\";\n            else {\n                d.payloadType = [];\n                if (o.bytes !== Array)\n                    d.payloadType = $util.newBuffer(d.payloadType);\n            }\n            if (o.bytes === String)\n                d.payload = \"\";\n            else {\n                d.payload = [];\n                if (o.bytes !== Array)\n                    d.payload = $util.newBuffer(d.payload);\n            }\n            if (o.bytes === String)\n                d.signature = \"\";\n            else {\n                d.signature = [];\n                if (o.bytes !== Array)\n                    d.signature = $util.newBuffer(d.signature);\n            }\n        }\n        if (m.publicKey != null && m.hasOwnProperty(\"publicKey\")) {\n            d.publicKey = o.bytes === String ? $util.base64.encode(m.publicKey, 0, m.publicKey.length) : o.bytes === Array ? Array.prototype.slice.call(m.publicKey) : m.publicKey;\n        }\n        if (m.payloadType != null && m.hasOwnProperty(\"payloadType\")) {\n            d.payloadType = o.bytes === String ? $util.base64.encode(m.payloadType, 0, m.payloadType.length) : o.bytes === Array ? Array.prototype.slice.call(m.payloadType) : m.payloadType;\n        }\n        if (m.payload != null && m.hasOwnProperty(\"payload\")) {\n            d.payload = o.bytes === String ? $util.base64.encode(m.payload, 0, m.payload.length) : o.bytes === Array ? Array.prototype.slice.call(m.payload) : m.payload;\n        }\n        if (m.signature != null && m.hasOwnProperty(\"signature\")) {\n            d.signature = o.bytes === String ? $util.base64.encode(m.signature, 0, m.signature.length) : o.bytes === Array ? Array.prototype.slice.call(m.signature) : m.signature;\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Envelope to JSON.\n     * @function toJSON\n     * @memberof Envelope\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Envelope.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Envelope;\n})();\n\nmodule.exports = $root;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}