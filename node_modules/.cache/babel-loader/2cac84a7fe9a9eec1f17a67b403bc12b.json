{"ast":null,"code":"'use strict';\n\nvar _inherits = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _asyncGeneratorDelegate = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate.js\").default;\n\nvar _asyncIterator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar _awaitAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _wrapAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nvar _require = require('@ipld/dag-pb'),\n    encode = _require.encode,\n    prepare = _require.prepare;\n\nvar _require2 = require('ipfs-unixfs'),\n    UnixFS = _require2.UnixFS;\n\nvar persist = require('./persist');\n\nvar _require3 = require('hamt-sharding'),\n    createHAMT = _require3.createHAMT,\n    Bucket = _require3.Bucket;\n\nvar _require4 = require('./hamt-constants'),\n    hamtHashCode = _require4.hamtHashCode,\n    hamtHashFn = _require4.hamtHashFn,\n    hamtBucketBits = _require4.hamtBucketBits;\n/**\n * @typedef {import('ipfs-unixfs-importer').ImporterOptions} ImporterOptions\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-unixfs').Mtime} Mtime\n *\n * @typedef {object} ImportResult\n * @property {CID} cid\n * @property {import('@ipld/dag-pb').PBNode} node\n * @property {number} size\n *\n * @typedef {object} DirContents\n * @property {CID} [cid]\n * @property {number} [size]\n *\n * @typedef {object} DirOptions\n * @property {Mtime} [mtime]\n * @property {number} [mode]\n * @property {import('multiformats/codecs/interface').BlockCodec<any, any>} [codec]\n * @property {import('multiformats/cid').CIDVersion} [cidVersion]\n * @property {boolean} [onlyHash]\n * @property {AbortSignal} [signal]\n */\n\n/**\n * @typedef {object} DirProps\n * @property {boolean} root\n * @property {boolean} dir\n * @property {string} path\n * @property {boolean} dirty\n * @property {boolean} flat\n * @property {Dir} [parent]\n * @property {string} [parentKey]\n * @property {import('ipfs-unixfs').UnixFS} [unixfs]\n * @property {number} [mode]\n * @property {import('ipfs-unixfs').Mtime} [mtime]\n */\n\n\nvar Dir = /*#__PURE__*/function () {\n  /**\n   * @param {DirProps} props\n   * @param {DirOptions} options\n   */\n  function Dir(props, options) {\n    _classCallCheck(this, Dir);\n\n    this.options = options || {};\n    this.root = props.root;\n    this.dir = props.dir;\n    this.path = props.path;\n    this.dirty = props.dirty;\n    this.flat = props.flat;\n    this.parent = props.parent;\n    this.parentKey = props.parentKey;\n    this.unixfs = props.unixfs;\n    this.mode = props.mode;\n    this.mtime = props.mtime;\n    /** @type {CID | undefined} */\n\n    this.cid = undefined;\n    /** @type {number | undefined} */\n\n    this.size = undefined;\n  }\n  /**\n   * @param {string} name\n   * @param {DirContents} value\n   */\n\n\n  _createClass(Dir, [{\n    key: \"put\",\n    value: function () {\n      var _put = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(name, value) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function put(_x5, _x6) {\n        return _put.apply(this, arguments);\n      }\n\n      return put;\n    }()\n    /**\n     * @param {string} name\n     * @returns {Promise<DirContents | undefined>}\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      return Promise.resolve(this);\n    }\n    /**\n     * @returns {AsyncIterable<{ key: string, child: DirContents}>}\n     */\n\n  }, {\n    key: \"eachChildSeries\",\n    value: function eachChildSeries() {\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    }\n    /**\n     * @param {Blockstore} blockstore\n     * @returns {AsyncIterable<ImportResult>}\n     */\n\n  }, {\n    key: \"flush\",\n    value: function flush(blockstore) {\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    }\n  }]);\n\n  return Dir;\n}();\n\nvar DirSharded = /*#__PURE__*/function (_Dir) {\n  _inherits(DirSharded, _Dir);\n\n  var _super = _createSuper(DirSharded);\n\n  /**\n   * @param {DirProps} props\n   * @param {DirOptions} options\n   */\n  function DirSharded(props, options) {\n    var _this3;\n\n    _classCallCheck(this, DirSharded);\n\n    _this3 = _super.call(this, props, options);\n    /** @type {Bucket<DirContents>} */\n\n    _this3._bucket = createHAMT({\n      hashFn: hamtHashFn,\n      bits: hamtBucketBits\n    });\n    return _this3;\n  }\n  /**\n   * @param {string} name\n   * @param {DirContents} value\n   */\n\n\n  _createClass(DirSharded, [{\n    key: \"put\",\n    value: function () {\n      var _put2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(name, value) {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this._bucket.put(name, value);\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function put(_x7, _x8) {\n        return _put2.apply(this, arguments);\n      }\n\n      return put;\n    }()\n    /**\n     * @param {string} name\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      return this._bucket.get(name);\n    }\n  }, {\n    key: \"childCount\",\n    value: function childCount() {\n      return this._bucket.leafCount();\n    }\n  }, {\n    key: \"directChildrenCount\",\n    value: function directChildrenCount() {\n      return this._bucket.childrenCount();\n    }\n  }, {\n    key: \"onlyChild\",\n    value: function onlyChild() {\n      return this._bucket.onlyChild();\n    }\n  }, {\n    key: \"eachChildSeries\",\n    value: function eachChildSeries() {\n      var _this = this;\n\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step$value, key, value;\n\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _iteratorAbruptCompletion = false;\n                _didIteratorError = false;\n                _context5.prev = 2;\n                _iterator = _asyncIterator(_this._bucket.eachLeafSeries());\n\n              case 4:\n                _context5.next = 6;\n                return _awaitAsyncGenerator(_iterator.next());\n\n              case 6:\n                if (!(_iteratorAbruptCompletion = !(_step = _context5.sent).done)) {\n                  _context5.next = 13;\n                  break;\n                }\n\n                _step$value = _step.value, key = _step$value.key, value = _step$value.value;\n                _context5.next = 10;\n                return {\n                  key: key,\n                  child: value\n                };\n\n              case 10:\n                _iteratorAbruptCompletion = false;\n                _context5.next = 4;\n                break;\n\n              case 13:\n                _context5.next = 19;\n                break;\n\n              case 15:\n                _context5.prev = 15;\n                _context5.t0 = _context5[\"catch\"](2);\n                _didIteratorError = true;\n                _iteratorError = _context5.t0;\n\n              case 19:\n                _context5.prev = 19;\n                _context5.prev = 20;\n\n                if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                  _context5.next = 24;\n                  break;\n                }\n\n                _context5.next = 24;\n                return _awaitAsyncGenerator(_iterator.return());\n\n              case 24:\n                _context5.prev = 24;\n\n                if (!_didIteratorError) {\n                  _context5.next = 27;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 27:\n                return _context5.finish(24);\n\n              case 28:\n                return _context5.finish(19);\n\n              case 29:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, null, [[2, 15, 19, 29], [20,, 24, 28]]);\n      }))();\n    }\n    /**\n     * @param {Blockstore} blockstore\n     * @returns {AsyncIterable<ImportResult>}\n     */\n\n  }, {\n    key: \"flush\",\n    value: function flush(blockstore) {\n      var _this2 = this;\n\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                return _context6.delegateYield(_asyncGeneratorDelegate(_asyncIterator(_flush2(_this2._bucket, blockstore, _this2, _this2.options)), _awaitAsyncGenerator), \"t0\", 1);\n\n              case 1:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }))();\n    }\n  }]);\n\n  return DirSharded;\n}(Dir);\n\nmodule.exports = DirSharded;\n/**\n * @param {Bucket<?>} bucket\n * @param {Blockstore} blockstore\n * @param {*} shardRoot\n * @param {DirOptions} options\n * @returns {AsyncIterable<ImportResult>}\n */\n\nfunction _flush2(_x, _x2, _x3, _x4) {\n  return _flush.apply(this, arguments);\n}\n\nfunction _flush() {\n  _flush = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(bucket, blockstore, shardRoot, options) {\n    var children, links, childrenSize, i, child, labelPrefix, shard, _iteratorAbruptCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, subShard, _dir, flushedDir, _iteratorAbruptCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, entry, label, value, _label, _size, data, dir, node, buffer, cid, size;\n\n    return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            children = bucket._children;\n            links = [];\n            childrenSize = 0;\n            i = 0;\n\n          case 4:\n            if (!(i < children.length)) {\n              _context7.next = 97;\n              break;\n            }\n\n            child = children.get(i);\n\n            if (child) {\n              _context7.next = 8;\n              break;\n            }\n\n            return _context7.abrupt(\"continue\", 94);\n\n          case 8:\n            labelPrefix = i.toString(16).toUpperCase().padStart(2, '0');\n\n            if (!(child instanceof Bucket)) {\n              _context7.next = 49;\n              break;\n            }\n\n            shard = void 0;\n            _iteratorAbruptCompletion2 = false;\n            _didIteratorError2 = false;\n            _context7.prev = 13;\n            _context7.t0 = _asyncIterator;\n            _context7.next = 17;\n            return _awaitAsyncGenerator(_flush2(child, blockstore, null, options));\n\n          case 17:\n            _context7.t1 = _context7.sent;\n            _iterator2 = (0, _context7.t0)(_context7.t1);\n\n          case 19:\n            _context7.next = 21;\n            return _awaitAsyncGenerator(_iterator2.next());\n\n          case 21:\n            if (!(_iteratorAbruptCompletion2 = !(_step2 = _context7.sent).done)) {\n              _context7.next = 27;\n              break;\n            }\n\n            subShard = _step2.value;\n            shard = subShard;\n\n          case 24:\n            _iteratorAbruptCompletion2 = false;\n            _context7.next = 19;\n            break;\n\n          case 27:\n            _context7.next = 33;\n            break;\n\n          case 29:\n            _context7.prev = 29;\n            _context7.t2 = _context7[\"catch\"](13);\n            _didIteratorError2 = true;\n            _iteratorError2 = _context7.t2;\n\n          case 33:\n            _context7.prev = 33;\n            _context7.prev = 34;\n\n            if (!(_iteratorAbruptCompletion2 && _iterator2.return != null)) {\n              _context7.next = 38;\n              break;\n            }\n\n            _context7.next = 38;\n            return _awaitAsyncGenerator(_iterator2.return());\n\n          case 38:\n            _context7.prev = 38;\n\n            if (!_didIteratorError2) {\n              _context7.next = 41;\n              break;\n            }\n\n            throw _iteratorError2;\n\n          case 41:\n            return _context7.finish(38);\n\n          case 42:\n            return _context7.finish(33);\n\n          case 43:\n            if (shard) {\n              _context7.next = 45;\n              break;\n            }\n\n            throw new Error('Could not flush sharded directory, no subshard found');\n\n          case 45:\n            links.push({\n              Name: labelPrefix,\n              Tsize: shard.size,\n              Hash: shard.cid\n            });\n            childrenSize += shard.size;\n            _context7.next = 94;\n            break;\n\n          case 49:\n            if (!(typeof child.value.flush === 'function')) {\n              _context7.next = 87;\n              break;\n            }\n\n            _dir = child.value;\n            flushedDir = void 0;\n            _iteratorAbruptCompletion3 = false;\n            _didIteratorError3 = false;\n            _context7.prev = 54;\n            _iterator3 = _asyncIterator(_dir.flush(blockstore));\n\n          case 56:\n            _context7.next = 58;\n            return _awaitAsyncGenerator(_iterator3.next());\n\n          case 58:\n            if (!(_iteratorAbruptCompletion3 = !(_step3 = _context7.sent).done)) {\n              _context7.next = 66;\n              break;\n            }\n\n            entry = _step3.value;\n            flushedDir = entry;\n            _context7.next = 63;\n            return flushedDir;\n\n          case 63:\n            _iteratorAbruptCompletion3 = false;\n            _context7.next = 56;\n            break;\n\n          case 66:\n            _context7.next = 72;\n            break;\n\n          case 68:\n            _context7.prev = 68;\n            _context7.t3 = _context7[\"catch\"](54);\n            _didIteratorError3 = true;\n            _iteratorError3 = _context7.t3;\n\n          case 72:\n            _context7.prev = 72;\n            _context7.prev = 73;\n\n            if (!(_iteratorAbruptCompletion3 && _iterator3.return != null)) {\n              _context7.next = 77;\n              break;\n            }\n\n            _context7.next = 77;\n            return _awaitAsyncGenerator(_iterator3.return());\n\n          case 77:\n            _context7.prev = 77;\n\n            if (!_didIteratorError3) {\n              _context7.next = 80;\n              break;\n            }\n\n            throw _iteratorError3;\n\n          case 80:\n            return _context7.finish(77);\n\n          case 81:\n            return _context7.finish(72);\n\n          case 82:\n            label = labelPrefix + child.key;\n            links.push({\n              Name: label,\n              Tsize: flushedDir.size,\n              Hash: flushedDir.cid\n            });\n            childrenSize += flushedDir.size;\n            _context7.next = 94;\n            break;\n\n          case 87:\n            value = child.value;\n\n            if (value.cid) {\n              _context7.next = 90;\n              break;\n            }\n\n            return _context7.abrupt(\"continue\", 94);\n\n          case 90:\n            _label = labelPrefix + child.key;\n            _size = value.size;\n            links.push({\n              Name: _label,\n              Tsize: _size,\n              Hash: value.cid\n            });\n            childrenSize += _size;\n\n          case 94:\n            i++;\n            _context7.next = 4;\n            break;\n\n          case 97:\n            // go-ipfs uses little endian, that's why we have to\n            // reverse the bit field before storing it\n            data = Uint8Array.from(children.bitField().reverse());\n            dir = new UnixFS({\n              type: 'hamt-sharded-directory',\n              data: data,\n              fanout: bucket.tableSize(),\n              hashType: hamtHashCode,\n              mtime: shardRoot && shardRoot.mtime,\n              mode: shardRoot && shardRoot.mode\n            });\n            node = {\n              Data: dir.marshal(),\n              Links: links\n            };\n            buffer = encode(prepare(node));\n            _context7.next = 103;\n            return _awaitAsyncGenerator(persist(buffer, blockstore, options));\n\n          case 103:\n            cid = _context7.sent;\n            size = buffer.length + childrenSize;\n            _context7.next = 107;\n            return {\n              cid: cid,\n              node: node,\n              size: size\n            };\n\n          case 107:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7, null, [[13, 29, 33, 43], [34,, 38, 42], [54, 68, 72, 82], [73,, 77, 81]]);\n  }));\n  return _flush.apply(this, arguments);\n}","map":{"version":3,"names":["require","encode","prepare","UnixFS","persist","createHAMT","Bucket","hamtHashCode","hamtHashFn","hamtBucketBits","Dir","props","options","root","dir","path","dirty","flat","parent","parentKey","unixfs","mode","mtime","cid","undefined","size","name","value","Promise","resolve","blockstore","DirSharded","_bucket","hashFn","bits","put","get","leafCount","childrenCount","onlyChild","eachLeafSeries","key","child","flush","module","exports","bucket","shardRoot","children","_children","links","childrenSize","i","length","labelPrefix","toString","toUpperCase","padStart","shard","subShard","Error","push","Name","Tsize","Hash","flushedDir","entry","label","data","Uint8Array","from","bitField","reverse","type","fanout","tableSize","hashType","node","Data","marshal","Links","buffer"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/files/utils/dir-sharded.js"],"sourcesContent":["'use strict'\n\nconst { encode, prepare } = require('@ipld/dag-pb')\nconst { UnixFS } = require('ipfs-unixfs')\nconst persist = require('./persist')\nconst { createHAMT, Bucket } = require('hamt-sharding')\nconst {\n  hamtHashCode,\n  hamtHashFn,\n  hamtBucketBits\n} = require('./hamt-constants')\n\n/**\n * @typedef {import('ipfs-unixfs-importer').ImporterOptions} ImporterOptions\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-unixfs').Mtime} Mtime\n *\n * @typedef {object} ImportResult\n * @property {CID} cid\n * @property {import('@ipld/dag-pb').PBNode} node\n * @property {number} size\n *\n * @typedef {object} DirContents\n * @property {CID} [cid]\n * @property {number} [size]\n *\n * @typedef {object} DirOptions\n * @property {Mtime} [mtime]\n * @property {number} [mode]\n * @property {import('multiformats/codecs/interface').BlockCodec<any, any>} [codec]\n * @property {import('multiformats/cid').CIDVersion} [cidVersion]\n * @property {boolean} [onlyHash]\n * @property {AbortSignal} [signal]\n */\n\n/**\n * @typedef {object} DirProps\n * @property {boolean} root\n * @property {boolean} dir\n * @property {string} path\n * @property {boolean} dirty\n * @property {boolean} flat\n * @property {Dir} [parent]\n * @property {string} [parentKey]\n * @property {import('ipfs-unixfs').UnixFS} [unixfs]\n * @property {number} [mode]\n * @property {import('ipfs-unixfs').Mtime} [mtime]\n */\nclass Dir {\n  /**\n   * @param {DirProps} props\n   * @param {DirOptions} options\n   */\n  constructor (props, options) {\n    this.options = options || {}\n    this.root = props.root\n    this.dir = props.dir\n    this.path = props.path\n    this.dirty = props.dirty\n    this.flat = props.flat\n    this.parent = props.parent\n    this.parentKey = props.parentKey\n    this.unixfs = props.unixfs\n    this.mode = props.mode\n    this.mtime = props.mtime\n    /** @type {CID | undefined} */\n    this.cid = undefined\n    /** @type {number | undefined} */\n    this.size = undefined\n  }\n\n  /**\n   * @param {string} name\n   * @param {DirContents} value\n   */\n  async put (name, value) { }\n  /**\n   * @param {string} name\n   * @returns {Promise<DirContents | undefined>}\n   */\n  get (name) {\n    return Promise.resolve(this)\n  }\n\n  /**\n   * @returns {AsyncIterable<{ key: string, child: DirContents}>}\n   */\n  async * eachChildSeries () { }\n  /**\n   * @param {Blockstore} blockstore\n   * @returns {AsyncIterable<ImportResult>}\n   */\n  async * flush (blockstore) { }\n}\n\nclass DirSharded extends Dir {\n  /**\n   * @param {DirProps} props\n   * @param {DirOptions} options\n   */\n  constructor (props, options) {\n    super(props, options)\n\n    /** @type {Bucket<DirContents>} */\n    this._bucket = createHAMT({\n      hashFn: hamtHashFn,\n      bits: hamtBucketBits\n    })\n  }\n\n  /**\n   * @param {string} name\n   * @param {DirContents} value\n   */\n  async put (name, value) {\n    await this._bucket.put(name, value)\n  }\n\n  /**\n   * @param {string} name\n   */\n  get (name) {\n    return this._bucket.get(name)\n  }\n\n  childCount () {\n    return this._bucket.leafCount()\n  }\n\n  directChildrenCount () {\n    return this._bucket.childrenCount()\n  }\n\n  onlyChild () {\n    return this._bucket.onlyChild()\n  }\n\n  async * eachChildSeries () {\n    for await (const { key, value } of this._bucket.eachLeafSeries()) {\n      yield {\n        key,\n        child: value\n      }\n    }\n  }\n\n  /**\n   * @param {Blockstore} blockstore\n   * @returns {AsyncIterable<ImportResult>}\n   */\n  async * flush (blockstore) {\n    yield * flush(this._bucket, blockstore, this, this.options)\n  }\n}\n\nmodule.exports = DirSharded\n\n/**\n * @param {Bucket<?>} bucket\n * @param {Blockstore} blockstore\n * @param {*} shardRoot\n * @param {DirOptions} options\n * @returns {AsyncIterable<ImportResult>}\n */\nasync function * flush (bucket, blockstore, shardRoot, options) {\n  const children = bucket._children\n  const links = []\n  let childrenSize = 0\n\n  for (let i = 0; i < children.length; i++) {\n    const child = children.get(i)\n\n    if (!child) {\n      continue\n    }\n\n    const labelPrefix = i.toString(16).toUpperCase().padStart(2, '0')\n\n    if (child instanceof Bucket) {\n      let shard\n\n      for await (const subShard of await flush(child, blockstore, null, options)) {\n        shard = subShard\n      }\n\n      if (!shard) {\n        throw new Error('Could not flush sharded directory, no subshard found')\n      }\n\n      links.push({\n        Name: labelPrefix,\n        Tsize: shard.size,\n        Hash: shard.cid\n      })\n      childrenSize += shard.size\n    } else if (typeof child.value.flush === 'function') {\n      const dir = child.value\n      let flushedDir\n\n      for await (const entry of dir.flush(blockstore)) {\n        flushedDir = entry\n\n        yield flushedDir\n      }\n\n      const label = labelPrefix + child.key\n      links.push({\n        Name: label,\n        Tsize: flushedDir.size,\n        Hash: flushedDir.cid\n      })\n\n      childrenSize += flushedDir.size\n    } else {\n      const value = child.value\n\n      if (!value.cid) {\n        continue\n      }\n\n      const label = labelPrefix + child.key\n      const size = value.size\n\n      links.push({\n        Name: label,\n        Tsize: size,\n        Hash: value.cid\n      })\n      childrenSize += size\n    }\n  }\n\n  // go-ipfs uses little endian, that's why we have to\n  // reverse the bit field before storing it\n  const data = Uint8Array.from(children.bitField().reverse())\n  const dir = new UnixFS({\n    type: 'hamt-sharded-directory',\n    data,\n    fanout: bucket.tableSize(),\n    hashType: hamtHashCode,\n    mtime: shardRoot && shardRoot.mtime,\n    mode: shardRoot && shardRoot.mode\n  })\n\n  const node = {\n    Data: dir.marshal(),\n    Links: links\n  }\n  const buffer = encode(prepare(node))\n  const cid = await persist(buffer, blockstore, options)\n  const size = buffer.length + childrenSize\n\n  yield {\n    cid,\n    node,\n    size\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}