{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar Service = require('../utils/service');\n/**\n * @param {Object} config\n * @param {import('../types').NetworkService} config.network\n * @param {import('../types').Preload} config.preload\n * @param {import('./ipns')} config.ipns\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../types').MfsPreload} config.mfsPreload\n */\n\n\nmodule.exports = function (_ref) {\n  var network = _ref.network,\n      preload = _ref.preload,\n      ipns = _ref.ipns,\n      repo = _ref.repo,\n      mfsPreload = _ref.mfsPreload;\n\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"stop\"]}\n   */\n  var stop = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return Promise.all([preload.stop(), ipns.stop(), mfsPreload.stop(), Service.stop(network), repo.close()]);\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function stop() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return stop;\n};","map":{"version":3,"names":["Service","require","module","exports","network","preload","ipns","repo","mfsPreload","stop","Promise","all","close"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/stop.js"],"sourcesContent":["'use strict'\n\nconst Service = require('../utils/service')\n\n/**\n * @param {Object} config\n * @param {import('../types').NetworkService} config.network\n * @param {import('../types').Preload} config.preload\n * @param {import('./ipns')} config.ipns\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../types').MfsPreload} config.mfsPreload\n */\nmodule.exports = ({ network, preload, ipns, repo, mfsPreload }) => {\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"stop\"]}\n   */\n  const stop = async () => {\n    await Promise.all([\n      preload.stop(),\n      ipns.stop(),\n      mfsPreload.stop(),\n      Service.stop(network),\n      repo.close()\n    ])\n  }\n\n  return stop\n}\n"],"mappings":"AAAA;;;;;;AAEA,IAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,gBAAkD;EAAA,IAA/CC,OAA+C,QAA/CA,OAA+C;EAAA,IAAtCC,OAAsC,QAAtCA,OAAsC;EAAA,IAA7BC,IAA6B,QAA7BA,IAA6B;EAAA,IAAvBC,IAAuB,QAAvBA,IAAuB;EAAA,IAAjBC,UAAiB,QAAjBA,UAAiB;;EACjE;AACF;AACA;EACE,IAAMC,IAAI;IAAA,uEAAG;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,OACLC,OAAO,CAACC,GAAR,CAAY,CAChBN,OAAO,CAACI,IAAR,EADgB,EAEhBH,IAAI,CAACG,IAAL,EAFgB,EAGhBD,UAAU,CAACC,IAAX,EAHgB,EAIhBT,OAAO,CAACS,IAAR,CAAaL,OAAb,CAJgB,EAKhBG,IAAI,CAACK,KAAL,EALgB,CAAZ,CADK;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAH;;IAAA,gBAAJH,IAAI;MAAA;IAAA;EAAA,GAAV;;EAUA,OAAOA,IAAP;AACD,CAfD"},"metadata":{},"sourceType":"script"}