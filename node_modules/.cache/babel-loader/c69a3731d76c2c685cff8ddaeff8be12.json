{"ast":null,"code":"'use strict';\n\nconst isPrivate = require('./multiaddr/is-private');\n/**\n * @typedef {import('multiaddr').Multiaddr} Multiaddr\n */\n\n/**\n * @typedef {Object} Address\n * @property {Multiaddr} multiaddr peer multiaddr.\n * @property {boolean} isCertified obtained from a signed peer record.\n */\n\n/**\n * Compare function for array.sort().\n * This sort aims to move the private adresses to the end of the array.\n * In case of equality, a certified address will come first.\n *\n * @param {Address} a\n * @param {Address} b\n * @returns {number}\n */\n\n\nfunction addressesPublicFirstCompareFunction(a, b) {\n  const isAPrivate = isPrivate(a.multiaddr);\n  const isBPrivate = isPrivate(b.multiaddr);\n\n  if (isAPrivate && !isBPrivate) {\n    return 1;\n  } else if (!isAPrivate && isBPrivate) {\n    return -1;\n  } // Check certified?\n\n\n  if (a.isCertified && !b.isCertified) {\n    return -1;\n  } else if (!a.isCertified && b.isCertified) {\n    return 1;\n  }\n\n  return 0;\n}\n/**\n * Sort given addresses by putting public addresses first.\n * In case of equality, a certified address will come first.\n *\n * @param {Array<Address>} addresses\n * @returns {Array<Address>}\n */\n\n\nfunction publicAddressesFirst(addresses) {\n  return [...addresses].sort(addressesPublicFirstCompareFunction);\n}\n\nmodule.exports.publicAddressesFirst = publicAddressesFirst;","map":{"version":3,"names":["isPrivate","require","addressesPublicFirstCompareFunction","a","b","isAPrivate","multiaddr","isBPrivate","isCertified","publicAddressesFirst","addresses","sort","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-utils/src/address-sort.js"],"sourcesContent":["'use strict'\n\nconst isPrivate = require('./multiaddr/is-private')\n\n/**\n * @typedef {import('multiaddr').Multiaddr} Multiaddr\n */\n\n/**\n * @typedef {Object} Address\n * @property {Multiaddr} multiaddr peer multiaddr.\n * @property {boolean} isCertified obtained from a signed peer record.\n */\n\n/**\n * Compare function for array.sort().\n * This sort aims to move the private adresses to the end of the array.\n * In case of equality, a certified address will come first.\n *\n * @param {Address} a\n * @param {Address} b\n * @returns {number}\n */\nfunction addressesPublicFirstCompareFunction (a, b) {\n  const isAPrivate = isPrivate(a.multiaddr)\n  const isBPrivate = isPrivate(b.multiaddr)\n\n  if (isAPrivate && !isBPrivate) {\n    return 1\n  } else if (!isAPrivate && isBPrivate) {\n    return -1\n  }\n  // Check certified?\n  if (a.isCertified && !b.isCertified) {\n    return -1\n  } else if (!a.isCertified && b.isCertified) {\n    return 1\n  }\n\n  return 0\n}\n\n/**\n * Sort given addresses by putting public addresses first.\n * In case of equality, a certified address will come first.\n *\n * @param {Array<Address>} addresses\n * @returns {Array<Address>}\n */\nfunction publicAddressesFirst (addresses) {\n  return [...addresses].sort(addressesPublicFirstCompareFunction)\n}\n\nmodule.exports.publicAddressesFirst = publicAddressesFirst\n"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,wBAAD,CAAzB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,mCAAT,CAA8CC,CAA9C,EAAiDC,CAAjD,EAAoD;EAClD,MAAMC,UAAU,GAAGL,SAAS,CAACG,CAAC,CAACG,SAAH,CAA5B;EACA,MAAMC,UAAU,GAAGP,SAAS,CAACI,CAAC,CAACE,SAAH,CAA5B;;EAEA,IAAID,UAAU,IAAI,CAACE,UAAnB,EAA+B;IAC7B,OAAO,CAAP;EACD,CAFD,MAEO,IAAI,CAACF,UAAD,IAAeE,UAAnB,EAA+B;IACpC,OAAO,CAAC,CAAR;EACD,CARiD,CASlD;;;EACA,IAAIJ,CAAC,CAACK,WAAF,IAAiB,CAACJ,CAAC,CAACI,WAAxB,EAAqC;IACnC,OAAO,CAAC,CAAR;EACD,CAFD,MAEO,IAAI,CAACL,CAAC,CAACK,WAAH,IAAkBJ,CAAC,CAACI,WAAxB,EAAqC;IAC1C,OAAO,CAAP;EACD;;EAED,OAAO,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,oBAAT,CAA+BC,SAA/B,EAA0C;EACxC,OAAO,CAAC,GAAGA,SAAJ,EAAeC,IAAf,CAAoBT,mCAApB,CAAP;AACD;;AAEDU,MAAM,CAACC,OAAP,CAAeJ,oBAAf,GAAsCA,oBAAtC"},"metadata":{},"sourceType":"script"}