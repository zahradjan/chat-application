{"ast":null,"code":"'use strict';\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('../../types').NetworkService} config.network\n */\n\n\nmodule.exports = _ref => {\n  let {\n    network\n  } = _ref;\n\n  /**\n   * @type {import('ipfs-core-types/src/bitswap').API[\"stat\"]}\n   */\n  async function stat() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    /** @type {import('ipfs-bitswap').IPFSBitswap} */\n    const bitswap = (await network.use(options)).bitswap;\n    const snapshot = bitswap.stat().snapshot;\n    return {\n      provideBufLen: parseInt(snapshot.providesBufferLength.toString()),\n      blocksReceived: BigInt(snapshot.blocksReceived.toString()),\n      wantlist: Array.from(bitswap.getWantlist()).map(e => e[1].cid),\n      peers: bitswap.peers().map(id => id.toB58String()),\n      dupBlksReceived: BigInt(snapshot.dupBlksReceived.toString()),\n      dupDataReceived: BigInt(snapshot.dupDataReceived.toString()),\n      dataReceived: BigInt(snapshot.dataReceived.toString()),\n      blocksSent: BigInt(snapshot.blocksSent.toString()),\n      dataSent: BigInt(snapshot.dataSent.toString())\n    };\n  }\n\n  return withTimeoutOption(stat);\n};","map":{"version":3,"names":["withTimeoutOption","require","module","exports","network","stat","options","bitswap","use","snapshot","provideBufLen","parseInt","providesBufferLength","toString","blocksReceived","BigInt","wantlist","Array","from","getWantlist","map","e","cid","peers","id","toB58String","dupBlksReceived","dupDataReceived","dataReceived","blocksSent","dataSent"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/bitswap/stat.js"],"sourcesContent":["'use strict'\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @param {Object} config\n * @param {import('../../types').NetworkService} config.network\n */\nmodule.exports = ({ network }) => {\n  /**\n   * @type {import('ipfs-core-types/src/bitswap').API[\"stat\"]}\n   */\n  async function stat (options = {}) {\n    /** @type {import('ipfs-bitswap').IPFSBitswap} */\n    const bitswap = (await network.use(options)).bitswap\n    const snapshot = bitswap.stat().snapshot\n\n    return {\n      provideBufLen: parseInt(snapshot.providesBufferLength.toString()),\n      blocksReceived: BigInt(snapshot.blocksReceived.toString()),\n      wantlist: Array.from(bitswap.getWantlist()).map(e => e[1].cid),\n      peers: bitswap.peers().map(id => id.toB58String()),\n      dupBlksReceived: BigInt(snapshot.dupBlksReceived.toString()),\n      dupDataReceived: BigInt(snapshot.dupDataReceived.toString()),\n      dataReceived: BigInt(snapshot.dataReceived.toString()),\n      blocksSent: BigInt(snapshot.blocksSent.toString()),\n      dataSent: BigInt(snapshot.dataSent.toString())\n    }\n  }\n\n  return withTimeoutOption(stat)\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,yCAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,QAAiB;EAAA,IAAhB;IAAEC;EAAF,CAAgB;;EAChC;AACF;AACA;EACE,eAAeC,IAAf,GAAmC;IAAA,IAAdC,OAAc,uEAAJ,EAAI;;IACjC;IACA,MAAMC,OAAO,GAAG,CAAC,MAAMH,OAAO,CAACI,GAAR,CAAYF,OAAZ,CAAP,EAA6BC,OAA7C;IACA,MAAME,QAAQ,GAAGF,OAAO,CAACF,IAAR,GAAeI,QAAhC;IAEA,OAAO;MACLC,aAAa,EAAEC,QAAQ,CAACF,QAAQ,CAACG,oBAAT,CAA8BC,QAA9B,EAAD,CADlB;MAELC,cAAc,EAAEC,MAAM,CAACN,QAAQ,CAACK,cAAT,CAAwBD,QAAxB,EAAD,CAFjB;MAGLG,QAAQ,EAAEC,KAAK,CAACC,IAAN,CAAWX,OAAO,CAACY,WAAR,EAAX,EAAkCC,GAAlC,CAAsCC,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAD,CAAKC,GAAhD,CAHL;MAILC,KAAK,EAAEhB,OAAO,CAACgB,KAAR,GAAgBH,GAAhB,CAAoBI,EAAE,IAAIA,EAAE,CAACC,WAAH,EAA1B,CAJF;MAKLC,eAAe,EAAEX,MAAM,CAACN,QAAQ,CAACiB,eAAT,CAAyBb,QAAzB,EAAD,CALlB;MAMLc,eAAe,EAAEZ,MAAM,CAACN,QAAQ,CAACkB,eAAT,CAAyBd,QAAzB,EAAD,CANlB;MAOLe,YAAY,EAAEb,MAAM,CAACN,QAAQ,CAACmB,YAAT,CAAsBf,QAAtB,EAAD,CAPf;MAQLgB,UAAU,EAAEd,MAAM,CAACN,QAAQ,CAACoB,UAAT,CAAoBhB,QAApB,EAAD,CARb;MASLiB,QAAQ,EAAEf,MAAM,CAACN,QAAQ,CAACqB,QAAT,CAAkBjB,QAAlB,EAAD;IATX,CAAP;EAWD;;EAED,OAAOb,iBAAiB,CAACK,IAAD,CAAxB;AACD,CAvBD"},"metadata":{},"sourceType":"script"}