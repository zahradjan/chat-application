{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nrequire('node-forge/lib/ed25519');\n\nvar forge = require('node-forge/lib/forge');\n\nexports.publicKeyLength = forge.pki.ed25519.constants.PUBLIC_KEY_BYTE_LENGTH;\nexports.privateKeyLength = forge.pki.ed25519.constants.PRIVATE_KEY_BYTE_LENGTH;\nexports.generateKey = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n  return _regeneratorRuntime().wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", forge.pki.ed25519.generateKeyPair());\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n})); // seed should be a 32 byte uint8array\n\nexports.generateKeyFromSeed = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(seed) {\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", forge.pki.ed25519.generateKeyPair({\n              seed: seed\n            }));\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexports.hashAndSign = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(key, msg) {\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            return _context3.abrupt(\"return\", forge.pki.ed25519.sign({\n              message: msg,\n              privateKey: key\n            }));\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function (_x2, _x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexports.hashAndVerify = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(key, sig, msg) {\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            return _context4.abrupt(\"return\", forge.pki.ed25519.verify({\n              signature: sig,\n              message: msg,\n              publicKey: key\n            }));\n\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function (_x4, _x5, _x6) {\n    return _ref4.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["require","forge","exports","publicKeyLength","pki","ed25519","constants","PUBLIC_KEY_BYTE_LENGTH","privateKeyLength","PRIVATE_KEY_BYTE_LENGTH","generateKey","generateKeyPair","generateKeyFromSeed","seed","hashAndSign","key","msg","sign","message","privateKey","hashAndVerify","sig","verify","signature","publicKey"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-crypto/src/keys/ed25519.js"],"sourcesContent":["'use strict'\n\nrequire('node-forge/lib/ed25519')\nconst forge = require('node-forge/lib/forge')\nexports.publicKeyLength = forge.pki.ed25519.constants.PUBLIC_KEY_BYTE_LENGTH\nexports.privateKeyLength = forge.pki.ed25519.constants.PRIVATE_KEY_BYTE_LENGTH\n\nexports.generateKey = async function () { // eslint-disable-line require-await\n  return forge.pki.ed25519.generateKeyPair()\n}\n\n// seed should be a 32 byte uint8array\nexports.generateKeyFromSeed = async function (seed) { // eslint-disable-line require-await\n  return forge.pki.ed25519.generateKeyPair({ seed })\n}\n\nexports.hashAndSign = async function (key, msg) { // eslint-disable-line require-await\n  return forge.pki.ed25519.sign({ message: msg, privateKey: key })\n  // return Uint8Array.from(nacl.sign.detached(msg, key))\n}\n\nexports.hashAndVerify = async function (key, sig, msg) { // eslint-disable-line require-await\n  return forge.pki.ed25519.verify({ signature: sig, message: msg, publicKey: key })\n}\n"],"mappings":"AAAA;;;;;;AAEAA,OAAO,CAAC,wBAAD,CAAP;;AACA,IAAMC,KAAK,GAAGD,OAAO,CAAC,sBAAD,CAArB;;AACAE,OAAO,CAACC,eAAR,GAA0BF,KAAK,CAACG,GAAN,CAAUC,OAAV,CAAkBC,SAAlB,CAA4BC,sBAAtD;AACAL,OAAO,CAACM,gBAAR,GAA2BP,KAAK,CAACG,GAAN,CAAUC,OAAV,CAAkBC,SAAlB,CAA4BG,uBAAvD;AAEAP,OAAO,CAACQ,WAAR,2EAAsB;EAAA;IAAA;MAAA;QAAA;UAAA,iCACbT,KAAK,CAACG,GAAN,CAAUC,OAAV,CAAkBM,eAAlB,EADa;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,CAAtB,G,CAIA;;AACAT,OAAO,CAACU,mBAAR;EAAA,uEAA8B,kBAAgBC,IAAhB;IAAA;MAAA;QAAA;UAAA;YAAA,kCACrBZ,KAAK,CAACG,GAAN,CAAUC,OAAV,CAAkBM,eAAlB,CAAkC;cAAEE,IAAI,EAAJA;YAAF,CAAlC,CADqB;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAA9B;;EAAA;IAAA;EAAA;AAAA;;AAIAX,OAAO,CAACY,WAAR;EAAA,uEAAsB,kBAAgBC,GAAhB,EAAqBC,GAArB;IAAA;MAAA;QAAA;UAAA;YAAA,kCACbf,KAAK,CAACG,GAAN,CAAUC,OAAV,CAAkBY,IAAlB,CAAuB;cAAEC,OAAO,EAAEF,GAAX;cAAgBG,UAAU,EAAEJ;YAA5B,CAAvB,CADa;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAtB;;EAAA;IAAA;EAAA;AAAA;;AAKAb,OAAO,CAACkB,aAAR;EAAA,uEAAwB,kBAAgBL,GAAhB,EAAqBM,GAArB,EAA0BL,GAA1B;IAAA;MAAA;QAAA;UAAA;YAAA,kCACff,KAAK,CAACG,GAAN,CAAUC,OAAV,CAAkBiB,MAAlB,CAAyB;cAAEC,SAAS,EAAEF,GAAb;cAAkBH,OAAO,EAAEF,GAA3B;cAAgCQ,SAAS,EAAET;YAA3C,CAAzB,CADe;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAxB;;EAAA;IAAA;EAAA;AAAA"},"metadata":{},"sourceType":"script"}