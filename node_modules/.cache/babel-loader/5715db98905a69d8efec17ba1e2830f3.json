{"ast":null,"code":"'use strict';\n\nconst abortable = require('abortable-iterator');\n\nconst log = require('debug')('libp2p:mplex:stream');\n\nconst pushable = require('it-pushable');\n\nconst BufferList = require('bl/BufferList');\n\nconst errCode = require('err-code');\n\nconst {\n  MAX_MSG_SIZE\n} = require('./restrict-size');\n\nconst {\n  InitiatorMessageTypes,\n  ReceiverMessageTypes\n} = require('./message-types');\n\nconst ERR_MPLEX_STREAM_RESET = 'ERR_MPLEX_STREAM_RESET';\nconst ERR_MPLEX_STREAM_ABORT = 'ERR_MPLEX_STREAM_ABORT';\n/**\n * @param {object} options\n * @param {number} options.id\n * @param {string} options.name\n * @param {function(*)} options.send - Called to send data through the stream\n * @param {function(Error)} [options.onEnd] - Called whenever the stream ends\n * @param {string} [options.type] - One of ['initiator','receiver']. Defaults to 'initiator'\n * @param {number} [options.maxMsgSize] - Max size of an mplex message in bytes. Writes > size are automatically split. Defaults to 1MB\n * @returns {*} A muxed stream\n */\n\nmodule.exports = _ref => {\n  let {\n    id,\n    name,\n    send,\n    onEnd = () => {},\n    type = 'initiator',\n    maxMsgSize = MAX_MSG_SIZE\n  } = _ref;\n  const abortController = new AbortController();\n  const resetController = new AbortController();\n  const Types = type === 'initiator' ? InitiatorMessageTypes : ReceiverMessageTypes;\n  const externalId = type === 'initiator' ? `i${id}` : `r${id}`;\n  name = String(name == null ? id : name);\n  let sourceEnded = false;\n  let sinkEnded = false;\n  let endErr;\n\n  const onSourceEnd = err => {\n    if (sourceEnded) return;\n    sourceEnded = true;\n    log('%s stream %s source end', type, name, err);\n    if (err && !endErr) endErr = err;\n\n    if (sinkEnded) {\n      stream.timeline.close = Date.now();\n      onEnd(endErr);\n    }\n  };\n\n  const onSinkEnd = err => {\n    if (sinkEnded) return;\n    sinkEnded = true;\n    log('%s stream %s sink end', type, name, err);\n    if (err && !endErr) endErr = err;\n\n    if (sourceEnded) {\n      stream.timeline.close = Date.now();\n      onEnd(endErr);\n    }\n  };\n\n  const stream = {\n    // Close for reading\n    close: () => stream.source.end(),\n    // Close for reading and writing (local error)\n    abort: err => {\n      log('%s stream %s abort', type, name, err); // End the source with the passed error\n\n      stream.source.end(err);\n      abortController.abort();\n      onSinkEnd(err);\n    },\n    // Close immediately for reading and writing (remote error)\n    reset: () => {\n      const err = errCode(new Error('stream reset'), ERR_MPLEX_STREAM_RESET);\n      resetController.abort();\n      stream.source.end(err);\n      onSinkEnd(err);\n    },\n    sink: async source => {\n      source = abortable(source, [{\n        signal: abortController.signal,\n        options: {\n          abortMessage: 'stream aborted',\n          abortCode: ERR_MPLEX_STREAM_ABORT\n        }\n      }, {\n        signal: resetController.signal,\n        options: {\n          abortMessage: 'stream reset',\n          abortCode: ERR_MPLEX_STREAM_RESET\n        }\n      }]);\n\n      if (type === 'initiator') {\n        // If initiator, open a new stream\n        send({\n          id,\n          type: Types.NEW_STREAM,\n          data: name\n        });\n      }\n\n      try {\n        for await (let data of source) {\n          while (data.length) {\n            if (data.length <= maxMsgSize) {\n              send({\n                id,\n                type: Types.MESSAGE,\n                data\n              });\n              break;\n            }\n\n            data = BufferList.isBufferList(data) ? data : new BufferList(data);\n            send({\n              id,\n              type: Types.MESSAGE,\n              data: data.shallowSlice(0, maxMsgSize)\n            });\n            data.consume(maxMsgSize);\n          }\n        }\n      } catch (err) {\n        // Send no more data if this stream was remotely reset\n        if (err.code === ERR_MPLEX_STREAM_RESET) {\n          log('%s stream %s reset', type, name);\n        } else {\n          log('%s stream %s error', type, name, err);\n          send({\n            id,\n            type: Types.RESET\n          });\n        }\n\n        stream.source.end(err);\n        return onSinkEnd(err);\n      }\n\n      send({\n        id,\n        type: Types.CLOSE\n      });\n      onSinkEnd();\n    },\n    source: pushable(onSourceEnd),\n    timeline: {\n      open: Date.now(),\n      close: null\n    },\n    id: externalId\n  };\n  return stream;\n};","map":{"version":3,"names":["abortable","require","log","pushable","BufferList","errCode","MAX_MSG_SIZE","InitiatorMessageTypes","ReceiverMessageTypes","ERR_MPLEX_STREAM_RESET","ERR_MPLEX_STREAM_ABORT","module","exports","id","name","send","onEnd","type","maxMsgSize","abortController","AbortController","resetController","Types","externalId","String","sourceEnded","sinkEnded","endErr","onSourceEnd","err","stream","timeline","close","Date","now","onSinkEnd","source","end","abort","reset","Error","sink","signal","options","abortMessage","abortCode","NEW_STREAM","data","length","MESSAGE","isBufferList","shallowSlice","consume","code","RESET","CLOSE","open"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-mplex/src/stream.js"],"sourcesContent":["'use strict'\n\nconst abortable = require('abortable-iterator')\nconst log = require('debug')('libp2p:mplex:stream')\nconst pushable = require('it-pushable')\nconst BufferList = require('bl/BufferList')\nconst errCode = require('err-code')\nconst { MAX_MSG_SIZE } = require('./restrict-size')\nconst { InitiatorMessageTypes, ReceiverMessageTypes } = require('./message-types')\n\nconst ERR_MPLEX_STREAM_RESET = 'ERR_MPLEX_STREAM_RESET'\nconst ERR_MPLEX_STREAM_ABORT = 'ERR_MPLEX_STREAM_ABORT'\n\n/**\n * @param {object} options\n * @param {number} options.id\n * @param {string} options.name\n * @param {function(*)} options.send - Called to send data through the stream\n * @param {function(Error)} [options.onEnd] - Called whenever the stream ends\n * @param {string} [options.type] - One of ['initiator','receiver']. Defaults to 'initiator'\n * @param {number} [options.maxMsgSize] - Max size of an mplex message in bytes. Writes > size are automatically split. Defaults to 1MB\n * @returns {*} A muxed stream\n */\nmodule.exports = ({ id, name, send, onEnd = () => {}, type = 'initiator', maxMsgSize = MAX_MSG_SIZE }) => {\n  const abortController = new AbortController()\n  const resetController = new AbortController()\n  const Types = type === 'initiator' ? InitiatorMessageTypes : ReceiverMessageTypes\n  const externalId = type === 'initiator' ? (`i${id}`) : `r${id}`\n\n  name = String(name == null ? id : name)\n\n  let sourceEnded = false\n  let sinkEnded = false\n  let endErr\n\n  const onSourceEnd = err => {\n    if (sourceEnded) return\n    sourceEnded = true\n    log('%s stream %s source end', type, name, err)\n    if (err && !endErr) endErr = err\n    if (sinkEnded) {\n      stream.timeline.close = Date.now()\n      onEnd(endErr)\n    }\n  }\n\n  const onSinkEnd = err => {\n    if (sinkEnded) return\n    sinkEnded = true\n    log('%s stream %s sink end', type, name, err)\n    if (err && !endErr) endErr = err\n    if (sourceEnded) {\n      stream.timeline.close = Date.now()\n      onEnd(endErr)\n    }\n  }\n\n  const stream = {\n    // Close for reading\n    close: () => stream.source.end(),\n    // Close for reading and writing (local error)\n    abort: err => {\n      log('%s stream %s abort', type, name, err)\n      // End the source with the passed error\n      stream.source.end(err)\n      abortController.abort()\n      onSinkEnd(err)\n    },\n    // Close immediately for reading and writing (remote error)\n    reset: () => {\n      const err = errCode(new Error('stream reset'), ERR_MPLEX_STREAM_RESET)\n      resetController.abort()\n      stream.source.end(err)\n      onSinkEnd(err)\n    },\n    sink: async source => {\n      source = abortable(source, [\n        { signal: abortController.signal, options: { abortMessage: 'stream aborted', abortCode: ERR_MPLEX_STREAM_ABORT } },\n        { signal: resetController.signal, options: { abortMessage: 'stream reset', abortCode: ERR_MPLEX_STREAM_RESET } }\n      ])\n\n      if (type === 'initiator') { // If initiator, open a new stream\n        send({ id, type: Types.NEW_STREAM, data: name })\n      }\n\n      try {\n        for await (let data of source) {\n          while (data.length) {\n            if (data.length <= maxMsgSize) {\n              send({ id, type: Types.MESSAGE, data })\n              break\n            }\n            data = BufferList.isBufferList(data) ? data : new BufferList(data)\n            send({ id, type: Types.MESSAGE, data: data.shallowSlice(0, maxMsgSize) })\n            data.consume(maxMsgSize)\n          }\n        }\n      } catch (err) {\n        // Send no more data if this stream was remotely reset\n        if (err.code === ERR_MPLEX_STREAM_RESET) {\n          log('%s stream %s reset', type, name)\n        } else {\n          log('%s stream %s error', type, name, err)\n          send({ id, type: Types.RESET })\n        }\n\n        stream.source.end(err)\n        return onSinkEnd(err)\n      }\n\n      send({ id, type: Types.CLOSE })\n      onSinkEnd()\n    },\n    source: pushable(onSourceEnd),\n    timeline: {\n      open: Date.now(),\n      close: null\n    },\n    id: externalId\n  }\n\n  return stream\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}