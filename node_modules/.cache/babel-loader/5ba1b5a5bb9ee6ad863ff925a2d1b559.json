{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar errcode = require('err-code');\n\nvar _require = require('it-pipe'),\n    pipe = _require.pipe;\n\nvar lp = require('it-length-prefixed');\n\nvar pTimeout = require('p-timeout');\n\nvar _require2 = require('streaming-iterables'),\n    consume = _require2.consume;\n\nvar first = require('it-first');\n\nvar MulticodecTopology = require('libp2p-interfaces/src/topology/multicodec-topology');\n\nvar rpc = require('./rpc');\n\nvar c = require('./constants');\n\nvar Message = require('./message');\n\nvar utils = require('./utils');\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream\n */\n\n/**\n * Handle network operations for the dht\n */\n\n\nvar Network = /*#__PURE__*/function () {\n  /**\n   * Create a new network\n   *\n   * @param {import('./index')} dht\n   */\n  function Network(dht) {\n    _classCallCheck(this, Network);\n\n    this.dht = dht;\n    this.readMessageTimeout = c.READ_MESSAGE_TIMEOUT;\n    this._log = utils.logger(this.dht.peerId, 'net');\n    this._rpc = rpc(this.dht);\n    this._onPeerConnected = this._onPeerConnected.bind(this);\n    this._running = false;\n  }\n  /**\n   * Start the network\n   */\n\n\n  _createClass(Network, [{\n    key: \"start\",\n    value: function start() {\n      if (this._running) {\n        return;\n      }\n\n      if (!this.dht.isStarted) {\n        throw errcode(new Error('Can not start network'), 'ERR_CANNOT_START_NETWORK');\n      }\n\n      this._running = true; // Only respond to queries when not in client mode\n\n      if (this.dht._clientMode === false) {\n        // Incoming streams\n        this.dht.registrar.handle(this.dht.protocol, this._rpc);\n      } // register protocol with topology\n\n\n      var topology = new MulticodecTopology({\n        multicodecs: [this.dht.protocol],\n        handlers: {\n          onConnect: this._onPeerConnected,\n          onDisconnect: function onDisconnect() {}\n        }\n      });\n      this._registrarId = this.dht.registrar.register(topology);\n    }\n    /**\n     * Stop all network activity\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (!this.dht.isStarted && !this.isStarted) {\n        return;\n      }\n\n      this._running = false; // unregister protocol and handlers\n\n      if (this._registrarId) {\n        this.dht.registrar.unregister(this._registrarId);\n      }\n    }\n    /**\n     * Is the network online?\n     *\n     * @type {boolean}\n     */\n\n  }, {\n    key: \"isStarted\",\n    get: function get() {\n      return this._running;\n    }\n    /**\n     * Are all network components there?\n     *\n     * @type {boolean}\n     */\n\n  }, {\n    key: \"isConnected\",\n    get: function get() {\n      // TODO add a way to check if switch has started or not\n      return this.dht.isStarted && this.isStarted;\n    }\n    /**\n     * Registrar notifies a connection successfully with dht protocol.\n     *\n     * @param {PeerId} peerId - remote peer id\n     */\n\n  }, {\n    key: \"_onPeerConnected\",\n    value: function () {\n      var _onPeerConnected2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(peerId) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.dht._add(peerId);\n\n              case 2:\n                this._log('added to the routing table: %s', peerId.toB58String());\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function _onPeerConnected(_x) {\n        return _onPeerConnected2.apply(this, arguments);\n      }\n\n      return _onPeerConnected;\n    }()\n    /**\n     * Send a request and record RTT for latency measurements.\n     *\n     * @async\n     * @param {PeerId} to - The peer that should receive a message\n     * @param {Message} msg - The message to send.\n     */\n\n  }, {\n    key: \"sendRequest\",\n    value: function () {\n      var _sendRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(to, msg) {\n        var id, conn, _yield$conn$newStream, stream;\n\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this.isConnected) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                throw errcode(new Error('Network is offline'), 'ERR_NETWORK_OFFLINE');\n\n              case 2:\n                id = to.toB58String();\n\n                this._log('sending to: %s', id);\n\n                conn = this.dht.registrar.connectionManager.get(to);\n\n                if (conn) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                _context2.next = 8;\n                return this.dht.dialer.connectToPeer(to);\n\n              case 8:\n                conn = _context2.sent;\n\n              case 9:\n                _context2.next = 11;\n                return conn.newStream(this.dht.protocol);\n\n              case 11:\n                _yield$conn$newStream = _context2.sent;\n                stream = _yield$conn$newStream.stream;\n                return _context2.abrupt(\"return\", this._writeReadMessage(stream, msg.serialize()));\n\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function sendRequest(_x2, _x3) {\n        return _sendRequest.apply(this, arguments);\n      }\n\n      return sendRequest;\n    }()\n    /**\n     * Sends a message without expecting an answer.\n     *\n     * @param {PeerId} to\n     * @param {Message} msg\n     */\n\n  }, {\n    key: \"sendMessage\",\n    value: function () {\n      var _sendMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(to, msg) {\n        var id, conn, _yield$conn$newStream2, stream;\n\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (this.isConnected) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                throw errcode(new Error('Network is offline'), 'ERR_NETWORK_OFFLINE');\n\n              case 2:\n                id = to.toB58String();\n\n                this._log('sending to: %s', id);\n\n                conn = this.dht.registrar.connectionManager.get(to);\n\n                if (conn) {\n                  _context3.next = 9;\n                  break;\n                }\n\n                _context3.next = 8;\n                return this.dht.dialer.connectToPeer(to);\n\n              case 8:\n                conn = _context3.sent;\n\n              case 9:\n                _context3.next = 11;\n                return conn.newStream(this.dht.protocol);\n\n              case 11:\n                _yield$conn$newStream2 = _context3.sent;\n                stream = _yield$conn$newStream2.stream;\n                return _context3.abrupt(\"return\", this._writeMessage(stream, msg.serialize()));\n\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function sendMessage(_x4, _x5) {\n        return _sendMessage.apply(this, arguments);\n      }\n\n      return sendMessage;\n    }()\n    /**\n     * Write a message and read its response.\n     * If no response is received after the specified timeout\n     * this will error out.\n     *\n     * @param {MuxedStream} stream - the stream to use\n     * @param {Uint8Array} msg - the message to send\n     */\n\n  }, {\n    key: \"_writeReadMessage\",\n    value: function () {\n      var _writeReadMessage2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(stream, msg) {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", pTimeout(writeReadMessage(stream, msg), this.readMessageTimeout));\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function _writeReadMessage(_x6, _x7) {\n        return _writeReadMessage2.apply(this, arguments);\n      }\n\n      return _writeReadMessage;\n    }()\n    /**\n     * Write a message to the given stream.\n     *\n     * @param {MuxedStream} stream - the stream to use\n     * @param {Uint8Array} msg - the message to send\n     */\n\n  }, {\n    key: \"_writeMessage\",\n    value: function _writeMessage(stream, msg) {\n      return pipe([msg], lp.encode(), stream, consume);\n    }\n  }]);\n\n  return Network;\n}();\n/**\n * @param {MuxedStream} stream\n * @param {Uint8Array} msg\n */\n\n\nfunction writeReadMessage(_x8, _x9) {\n  return _writeReadMessage3.apply(this, arguments);\n}\n\nfunction _writeReadMessage3() {\n  _writeReadMessage3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(stream, msg) {\n    var res;\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return pipe([msg], lp.encode(), stream, lp.decode(),\n            /*#__PURE__*/\n\n            /**\n             * @param {AsyncIterable<Uint8Array>} source\n             */\n            function () {\n              var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(source) {\n                var buf;\n                return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n                  while (1) {\n                    switch (_context5.prev = _context5.next) {\n                      case 0:\n                        _context5.next = 2;\n                        return first(source);\n\n                      case 2:\n                        buf = _context5.sent;\n\n                        if (!buf) {\n                          _context5.next = 5;\n                          break;\n                        }\n\n                        return _context5.abrupt(\"return\", buf.slice());\n\n                      case 5:\n                      case \"end\":\n                        return _context5.stop();\n                    }\n                  }\n                }, _callee5);\n              }));\n\n              return function (_x10) {\n                return _ref.apply(this, arguments);\n              };\n            }());\n\n          case 2:\n            res = _context6.sent;\n\n            if (!(res.length === 0)) {\n              _context6.next = 5;\n              break;\n            }\n\n            throw errcode(new Error('No message received'), 'ERR_NO_MESSAGE_RECEIVED');\n\n          case 5:\n            return _context6.abrupt(\"return\", Message.deserialize(res));\n\n          case 6:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _writeReadMessage3.apply(this, arguments);\n}\n\nmodule.exports = Network;","map":{"version":3,"names":["errcode","require","pipe","lp","pTimeout","consume","first","MulticodecTopology","rpc","c","Message","utils","Network","dht","readMessageTimeout","READ_MESSAGE_TIMEOUT","_log","logger","peerId","_rpc","_onPeerConnected","bind","_running","isStarted","Error","_clientMode","registrar","handle","protocol","topology","multicodecs","handlers","onConnect","onDisconnect","_registrarId","register","unregister","_add","toB58String","to","msg","isConnected","id","conn","connectionManager","get","dialer","connectToPeer","newStream","stream","_writeReadMessage","serialize","_writeMessage","writeReadMessage","encode","decode","source","buf","slice","res","length","deserialize","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-kad-dht/src/network.js"],"sourcesContent":["'use strict'\n\nconst errcode = require('err-code')\n\nconst { pipe } = require('it-pipe')\nconst lp = require('it-length-prefixed')\nconst pTimeout = require('p-timeout')\nconst { consume } = require('streaming-iterables')\nconst first = require('it-first')\n\nconst MulticodecTopology = require('libp2p-interfaces/src/topology/multicodec-topology')\n\nconst rpc = require('./rpc')\nconst c = require('./constants')\nconst Message = require('./message')\nconst utils = require('./utils')\n\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream\n */\n\n/**\n * Handle network operations for the dht\n */\nclass Network {\n  /**\n   * Create a new network\n   *\n   * @param {import('./index')} dht\n   */\n  constructor (dht) {\n    this.dht = dht\n    this.readMessageTimeout = c.READ_MESSAGE_TIMEOUT\n    this._log = utils.logger(this.dht.peerId, 'net')\n    this._rpc = rpc(this.dht)\n    this._onPeerConnected = this._onPeerConnected.bind(this)\n    this._running = false\n  }\n\n  /**\n   * Start the network\n   */\n  start () {\n    if (this._running) {\n      return\n    }\n\n    if (!this.dht.isStarted) {\n      throw errcode(new Error('Can not start network'), 'ERR_CANNOT_START_NETWORK')\n    }\n\n    this._running = true\n\n    // Only respond to queries when not in client mode\n    if (this.dht._clientMode === false) {\n      // Incoming streams\n      this.dht.registrar.handle(this.dht.protocol, this._rpc)\n    }\n\n    // register protocol with topology\n    const topology = new MulticodecTopology({\n      multicodecs: [this.dht.protocol],\n      handlers: {\n        onConnect: this._onPeerConnected,\n        onDisconnect: () => {}\n      }\n    })\n    this._registrarId = this.dht.registrar.register(topology)\n  }\n\n  /**\n   * Stop all network activity\n   */\n  stop () {\n    if (!this.dht.isStarted && !this.isStarted) {\n      return\n    }\n    this._running = false\n\n    // unregister protocol and handlers\n    if (this._registrarId) {\n      this.dht.registrar.unregister(this._registrarId)\n    }\n  }\n\n  /**\n   * Is the network online?\n   *\n   * @type {boolean}\n   */\n  get isStarted () {\n    return this._running\n  }\n\n  /**\n   * Are all network components there?\n   *\n   * @type {boolean}\n   */\n  get isConnected () {\n    // TODO add a way to check if switch has started or not\n    return this.dht.isStarted && this.isStarted\n  }\n\n  /**\n   * Registrar notifies a connection successfully with dht protocol.\n   *\n   * @param {PeerId} peerId - remote peer id\n   */\n  async _onPeerConnected (peerId) {\n    await this.dht._add(peerId)\n    this._log('added to the routing table: %s', peerId.toB58String())\n  }\n\n  /**\n   * Send a request and record RTT for latency measurements.\n   *\n   * @async\n   * @param {PeerId} to - The peer that should receive a message\n   * @param {Message} msg - The message to send.\n   */\n  async sendRequest (to, msg) {\n    // TODO: record latency\n    if (!this.isConnected) {\n      throw errcode(new Error('Network is offline'), 'ERR_NETWORK_OFFLINE')\n    }\n\n    const id = to.toB58String()\n    this._log('sending to: %s', id)\n\n    let conn = this.dht.registrar.connectionManager.get(to)\n    if (!conn) {\n      conn = await this.dht.dialer.connectToPeer(to)\n    }\n\n    const { stream } = await conn.newStream(this.dht.protocol)\n\n    return this._writeReadMessage(stream, msg.serialize())\n  }\n\n  /**\n   * Sends a message without expecting an answer.\n   *\n   * @param {PeerId} to\n   * @param {Message} msg\n   */\n  async sendMessage (to, msg) {\n    if (!this.isConnected) {\n      throw errcode(new Error('Network is offline'), 'ERR_NETWORK_OFFLINE')\n    }\n\n    const id = to.toB58String()\n    this._log('sending to: %s', id)\n\n    let conn = this.dht.registrar.connectionManager.get(to)\n    if (!conn) {\n      conn = await this.dht.dialer.connectToPeer(to)\n    }\n    const { stream } = await conn.newStream(this.dht.protocol)\n\n    return this._writeMessage(stream, msg.serialize())\n  }\n\n  /**\n   * Write a message and read its response.\n   * If no response is received after the specified timeout\n   * this will error out.\n   *\n   * @param {MuxedStream} stream - the stream to use\n   * @param {Uint8Array} msg - the message to send\n   */\n  async _writeReadMessage (stream, msg) { // eslint-disable-line require-await\n    return pTimeout(\n      writeReadMessage(stream, msg),\n      this.readMessageTimeout\n    )\n  }\n\n  /**\n   * Write a message to the given stream.\n   *\n   * @param {MuxedStream} stream - the stream to use\n   * @param {Uint8Array} msg - the message to send\n   */\n  _writeMessage (stream, msg) {\n    return pipe(\n      [msg],\n      lp.encode(),\n      stream,\n      consume\n    )\n  }\n}\n\n/**\n * @param {MuxedStream} stream\n * @param {Uint8Array} msg\n */\nasync function writeReadMessage (stream, msg) {\n  const res = await pipe(\n    [msg],\n    lp.encode(),\n    stream,\n    lp.decode(),\n    /**\n     * @param {AsyncIterable<Uint8Array>} source\n     */\n    async source => {\n      const buf = await first(source)\n\n      if (buf) {\n        return buf.slice()\n      }\n    }\n  )\n\n  if (res.length === 0) {\n    throw errcode(new Error('No message received'), 'ERR_NO_MESSAGE_RECEIVED')\n  }\n\n  return Message.deserialize(res)\n}\n\nmodule.exports = Network\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}