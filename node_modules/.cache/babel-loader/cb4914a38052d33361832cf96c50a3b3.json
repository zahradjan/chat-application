{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar ipns = require('ipns');\n\nvar crypto = require('libp2p-crypto');\n\nvar PeerId = require('peer-id');\n\nvar errcode = require('err-code');\n\nvar debug = require('debug');\n\nvar log = Object.assign(debug('ipfs:ipns:republisher'), {\n  error: debug('ipfs:ipns:republisher:error')\n});\n/**\n * @typedef {import('libp2p-crypto').PrivateKey} PrivateKey\n */\n\nvar minute = 60 * 1000;\nvar hour = 60 * minute;\nvar defaultBroadcastInterval = 4 * hour;\nvar defaultRecordLifetime = 24 * hour;\n\nvar IpnsRepublisher = /*#__PURE__*/function () {\n  /**\n   * @param {import('./publisher')} publisher\n   * @param {import('interface-datastore').Datastore} datastore\n   * @param {PeerId} peerId\n   * @param {import('libp2p/src/keychain')} keychain\n   * @param {object} options\n   * @param {string} options.pass\n   * @param {number} [options.initialBroadcastInterval]\n   * @param {number} [options.broadcastInterval]\n   */\n  function IpnsRepublisher(publisher, datastore, peerId, keychain) {\n    var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {\n      pass: ''\n    };\n\n    _classCallCheck(this, IpnsRepublisher);\n\n    this._publisher = publisher;\n    this._datastore = datastore;\n    this._peerId = peerId;\n    this._keychain = keychain;\n    this._options = options;\n    this._republishHandle = null;\n  }\n\n  _createClass(IpnsRepublisher, [{\n    key: \"start\",\n    value: function () {\n      var _start = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var _this = this;\n\n        var republishHandle, privKey, pass, firstRun;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!this._republishHandle) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                throw errcode(new Error('republisher is already running'), 'ERR_REPUBLISH_ALREADY_RUNNING');\n\n              case 2:\n                // TODO: this handler should be isolated in another module\n                republishHandle = {\n                  /** @type {null|(() => Promise<void>)} */\n                  _task: null,\n\n                  /** @type {null|Promise<void>} */\n                  _inflightTask: null,\n\n                  /** @type {null|NodeJS.Timeout} */\n                  _timeoutId: null,\n\n                  /**\n                   * @param {function(): number} period\n                   */\n                  runPeriodically: function runPeriodically(period) {\n                    republishHandle._timeoutId = setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n                      return _regeneratorRuntime().wrap(function _callee$(_context) {\n                        while (1) {\n                          switch (_context.prev = _context.next) {\n                            case 0:\n                              republishHandle._timeoutId = null;\n                              _context.prev = 1;\n                              // @ts-ignore - _task could be null\n                              republishHandle._inflightTask = republishHandle._task();\n                              _context.next = 5;\n                              return republishHandle._inflightTask;\n\n                            case 5:\n                              // Schedule next\n                              if (republishHandle._task) {\n                                republishHandle.runPeriodically(period);\n                              }\n\n                              _context.next = 11;\n                              break;\n\n                            case 8:\n                              _context.prev = 8;\n                              _context.t0 = _context[\"catch\"](1);\n                              log.error(_context.t0);\n\n                            case 11:\n                            case \"end\":\n                              return _context.stop();\n                          }\n                        }\n                      }, _callee, null, [[1, 8]]);\n                    })), period());\n                  },\n                  cancel: function () {\n                    var _cancel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n                      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                        while (1) {\n                          switch (_context2.prev = _context2.next) {\n                            case 0:\n                              // do not run again\n                              if (republishHandle._timeoutId != null) {\n                                clearTimeout(republishHandle._timeoutId);\n                              }\n\n                              republishHandle._task = null; // wait for the currently in flight task to complete\n\n                              _context2.next = 4;\n                              return republishHandle._inflightTask;\n\n                            case 4:\n                            case \"end\":\n                              return _context2.stop();\n                          }\n                        }\n                      }, _callee2);\n                    }));\n\n                    function cancel() {\n                      return _cancel.apply(this, arguments);\n                    }\n\n                    return cancel;\n                  }()\n                };\n                privKey = this._peerId.privKey;\n                pass = this._options.pass;\n                firstRun = true;\n\n                republishHandle._task = function () {\n                  return _this._republishEntries(privKey, pass);\n                };\n\n                republishHandle.runPeriodically(function () {\n                  if (firstRun) {\n                    firstRun = false;\n                    return _this._options.initialBroadcastInterval || minute;\n                  }\n\n                  return _this._options.broadcastInterval || defaultBroadcastInterval;\n                });\n                this._republishHandle = republishHandle;\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function start() {\n        return _start.apply(this, arguments);\n      }\n\n      return start;\n    }()\n  }, {\n    key: \"stop\",\n    value: function () {\n      var _stop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var republishHandle;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                republishHandle = this._republishHandle;\n\n                if (republishHandle) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                throw errcode(new Error('republisher is not running'), 'ERR_REPUBLISH_NOT_RUNNING');\n\n              case 3:\n                this._republishHandle = null;\n                _context4.next = 6;\n                return republishHandle.cancel();\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function stop() {\n        return _stop.apply(this, arguments);\n      }\n\n      return stop;\n    }()\n    /**\n     * @param {PrivateKey} privateKey\n     * @param {string} pass\n     */\n\n  }, {\n    key: \"_republishEntries\",\n    value: function () {\n      var _republishEntries2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(privateKey, pass) {\n        var errMsg, keys, _iterator, _step, key, pem, privKey;\n\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.prev = 0;\n                _context5.next = 3;\n                return this._republishEntry(privateKey);\n\n              case 3:\n                _context5.next = 10;\n                break;\n\n              case 5:\n                _context5.prev = 5;\n                _context5.t0 = _context5[\"catch\"](0);\n                errMsg = 'cannot republish entry for the node\\'s private key';\n                log.error(errMsg);\n                return _context5.abrupt(\"return\");\n\n              case 10:\n                if (!pass) {\n                  _context5.next = 45;\n                  break;\n                }\n\n                _context5.prev = 11;\n                _context5.next = 14;\n                return this._keychain.listKeys();\n\n              case 14:\n                keys = _context5.sent;\n                _iterator = _createForOfIteratorHelper(keys);\n                _context5.prev = 16;\n\n                _iterator.s();\n\n              case 18:\n                if ((_step = _iterator.n()).done) {\n                  _context5.next = 32;\n                  break;\n                }\n\n                key = _step.value;\n\n                if (!(key.name === 'self')) {\n                  _context5.next = 22;\n                  break;\n                }\n\n                return _context5.abrupt(\"continue\", 30);\n\n              case 22:\n                _context5.next = 24;\n                return this._keychain.exportKey(key.name, pass);\n\n              case 24:\n                pem = _context5.sent;\n                _context5.next = 27;\n                return crypto.keys.import(pem, pass);\n\n              case 27:\n                privKey = _context5.sent;\n                _context5.next = 30;\n                return this._republishEntry(privKey);\n\n              case 30:\n                _context5.next = 18;\n                break;\n\n              case 32:\n                _context5.next = 37;\n                break;\n\n              case 34:\n                _context5.prev = 34;\n                _context5.t1 = _context5[\"catch\"](16);\n\n                _iterator.e(_context5.t1);\n\n              case 37:\n                _context5.prev = 37;\n\n                _iterator.f();\n\n                return _context5.finish(37);\n\n              case 40:\n                _context5.next = 45;\n                break;\n\n              case 42:\n                _context5.prev = 42;\n                _context5.t2 = _context5[\"catch\"](11);\n                log.error(_context5.t2);\n\n              case 45:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[0, 5], [11, 42], [16, 34, 37, 40]]);\n      }));\n\n      function _republishEntries(_x, _x2) {\n        return _republishEntries2.apply(this, arguments);\n      }\n\n      return _republishEntries;\n    }()\n    /**\n     * @param {PrivateKey} privateKey\n     */\n\n  }, {\n    key: \"_republishEntry\",\n    value: function () {\n      var _republishEntry2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(privateKey) {\n        var peerId, value;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (!(!privateKey || !privateKey.bytes)) {\n                  _context6.next = 2;\n                  break;\n                }\n\n                throw errcode(new Error('invalid private key'), 'ERR_INVALID_PRIVATE_KEY');\n\n              case 2:\n                _context6.prev = 2;\n                _context6.next = 5;\n                return PeerId.createFromPrivKey(privateKey.bytes);\n\n              case 5:\n                peerId = _context6.sent;\n                _context6.next = 8;\n                return this._getPreviousValue(peerId);\n\n              case 8:\n                value = _context6.sent;\n                _context6.next = 11;\n                return this._publisher.publishWithEOL(privateKey, value, defaultRecordLifetime);\n\n              case 11:\n                _context6.next = 18;\n                break;\n\n              case 13:\n                _context6.prev = 13;\n                _context6.t0 = _context6[\"catch\"](2);\n\n                if (!(_context6.t0.code === 'ERR_NO_ENTRY_FOUND')) {\n                  _context6.next = 17;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\");\n\n              case 17:\n                throw _context6.t0;\n\n              case 18:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[2, 13]]);\n      }));\n\n      function _republishEntry(_x3) {\n        return _republishEntry2.apply(this, arguments);\n      }\n\n      return _republishEntry;\n    }()\n    /**\n     * @param {PeerId} peerId\n     */\n\n  }, {\n    key: \"_getPreviousValue\",\n    value: function () {\n      var _getPreviousValue2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(peerId) {\n        var dsVal, record;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (PeerId.isPeerId(peerId)) {\n                  _context7.next = 2;\n                  break;\n                }\n\n                throw errcode(new Error('invalid peer ID'), 'ERR_INVALID_PEER_ID');\n\n              case 2:\n                _context7.prev = 2;\n                _context7.next = 5;\n                return this._datastore.get(ipns.getLocalKey(peerId.id));\n\n              case 5:\n                dsVal = _context7.sent;\n\n                if (dsVal instanceof Uint8Array) {\n                  _context7.next = 8;\n                  break;\n                }\n\n                throw errcode(new Error(\"found ipns record that we couldn't process\"), 'ERR_INVALID_IPNS_RECORD');\n\n              case 8:\n                _context7.prev = 8;\n                record = ipns.unmarshal(dsVal);\n                return _context7.abrupt(\"return\", record.value);\n\n              case 13:\n                _context7.prev = 13;\n                _context7.t0 = _context7[\"catch\"](8);\n                log.error(_context7.t0);\n                throw errcode(new Error('found ipns record that we couldn\\'t convert to a value'), 'ERR_INVALID_IPNS_RECORD');\n\n              case 17:\n                _context7.next = 24;\n                break;\n\n              case 19:\n                _context7.prev = 19;\n                _context7.t1 = _context7[\"catch\"](2);\n\n                if (!(_context7.t1 && _context7.t1.notFound)) {\n                  _context7.next = 23;\n                  break;\n                }\n\n                throw errcode(new Error(\"no previous entry for record with id: \".concat(peerId.id)), 'ERR_NO_ENTRY_FOUND');\n\n              case 23:\n                throw _context7.t1;\n\n              case 24:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[2, 19], [8, 13]]);\n      }));\n\n      function _getPreviousValue(_x4) {\n        return _getPreviousValue2.apply(this, arguments);\n      }\n\n      return _getPreviousValue;\n    }()\n  }]);\n\n  return IpnsRepublisher;\n}();\n\nexports = module.exports = IpnsRepublisher;","map":{"version":3,"names":["ipns","require","crypto","PeerId","errcode","debug","log","Object","assign","error","minute","hour","defaultBroadcastInterval","defaultRecordLifetime","IpnsRepublisher","publisher","datastore","peerId","keychain","options","pass","_publisher","_datastore","_peerId","_keychain","_options","_republishHandle","Error","republishHandle","_task","_inflightTask","_timeoutId","runPeriodically","period","setTimeout","cancel","clearTimeout","privKey","firstRun","_republishEntries","initialBroadcastInterval","broadcastInterval","privateKey","_republishEntry","errMsg","listKeys","keys","key","name","exportKey","pem","import","bytes","createFromPrivKey","_getPreviousValue","value","publishWithEOL","code","isPeerId","get","getLocalKey","id","dsVal","Uint8Array","record","unmarshal","notFound","exports","module"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/ipns/republisher.js"],"sourcesContent":["'use strict'\n\nconst ipns = require('ipns')\nconst crypto = require('libp2p-crypto')\nconst PeerId = require('peer-id')\nconst errcode = require('err-code')\n\nconst debug = require('debug')\nconst log = Object.assign(debug('ipfs:ipns:republisher'), {\n  error: debug('ipfs:ipns:republisher:error')\n})\n\n/**\n * @typedef {import('libp2p-crypto').PrivateKey} PrivateKey\n */\n\nconst minute = 60 * 1000\nconst hour = 60 * minute\n\nconst defaultBroadcastInterval = 4 * hour\nconst defaultRecordLifetime = 24 * hour\n\nclass IpnsRepublisher {\n  /**\n   * @param {import('./publisher')} publisher\n   * @param {import('interface-datastore').Datastore} datastore\n   * @param {PeerId} peerId\n   * @param {import('libp2p/src/keychain')} keychain\n   * @param {object} options\n   * @param {string} options.pass\n   * @param {number} [options.initialBroadcastInterval]\n   * @param {number} [options.broadcastInterval]\n   */\n  constructor (publisher, datastore, peerId, keychain, options = { pass: '' }) {\n    this._publisher = publisher\n    this._datastore = datastore\n    this._peerId = peerId\n    this._keychain = keychain\n    this._options = options\n    this._republishHandle = null\n  }\n\n  async start () { // eslint-disable-line require-await\n    if (this._republishHandle) {\n      throw errcode(new Error('republisher is already running'), 'ERR_REPUBLISH_ALREADY_RUNNING')\n    }\n\n    // TODO: this handler should be isolated in another module\n    const republishHandle = {\n      /** @type {null|(() => Promise<void>)} */\n      _task: null,\n      /** @type {null|Promise<void>} */\n      _inflightTask: null,\n      /** @type {null|NodeJS.Timeout} */\n      _timeoutId: null,\n      /**\n       * @param {function(): number} period\n       */\n      runPeriodically: (period) => {\n        republishHandle._timeoutId = setTimeout(async () => {\n          republishHandle._timeoutId = null\n\n          try {\n            // @ts-ignore - _task could be null\n            republishHandle._inflightTask = republishHandle._task()\n            await republishHandle._inflightTask\n\n            // Schedule next\n            if (republishHandle._task) {\n              republishHandle.runPeriodically(period)\n            }\n          } catch (err) {\n            log.error(err)\n          }\n        }, period())\n      },\n      cancel: async () => {\n        // do not run again\n        if (republishHandle._timeoutId != null) {\n          clearTimeout(republishHandle._timeoutId)\n        }\n        republishHandle._task = null\n\n        // wait for the currently in flight task to complete\n        await republishHandle._inflightTask\n      }\n    }\n\n    const { privKey } = this._peerId\n    const { pass } = this._options\n    let firstRun = true\n\n    republishHandle._task = () => this._republishEntries(privKey, pass)\n\n    republishHandle.runPeriodically(() => {\n      if (firstRun) {\n        firstRun = false\n        return this._options.initialBroadcastInterval || minute\n      }\n\n      return this._options.broadcastInterval || defaultBroadcastInterval\n    })\n\n    this._republishHandle = republishHandle\n  }\n\n  async stop () {\n    const republishHandle = this._republishHandle\n\n    if (!republishHandle) {\n      throw errcode(new Error('republisher is not running'), 'ERR_REPUBLISH_NOT_RUNNING')\n    }\n\n    this._republishHandle = null\n\n    await republishHandle.cancel()\n  }\n\n  /**\n   * @param {PrivateKey} privateKey\n   * @param {string} pass\n   */\n  async _republishEntries (privateKey, pass) {\n    // TODO: Should use list of published entries.\n    // We can't currently *do* that because go uses this method for now.\n    try {\n      await this._republishEntry(privateKey)\n    } catch (err) {\n      const errMsg = 'cannot republish entry for the node\\'s private key'\n\n      log.error(errMsg)\n      return\n    }\n\n    // keychain needs pass to get the cryptographic keys\n    if (pass) {\n      try {\n        const keys = await this._keychain.listKeys()\n\n        for (const key of keys) {\n          if (key.name === 'self') {\n            continue\n          }\n          const pem = await this._keychain.exportKey(key.name, pass)\n          const privKey = await crypto.keys.import(pem, pass)\n\n          await this._republishEntry(privKey)\n        }\n      } catch (err) {\n        log.error(err)\n      }\n    }\n  }\n\n  /**\n   * @param {PrivateKey} privateKey\n   */\n  async _republishEntry (privateKey) {\n    if (!privateKey || !privateKey.bytes) {\n      throw errcode(new Error('invalid private key'), 'ERR_INVALID_PRIVATE_KEY')\n    }\n\n    try {\n      const peerId = await PeerId.createFromPrivKey(privateKey.bytes)\n      const value = await this._getPreviousValue(peerId)\n      await this._publisher.publishWithEOL(privateKey, value, defaultRecordLifetime)\n    } catch (err) {\n      if (err.code === 'ERR_NO_ENTRY_FOUND') {\n        return\n      }\n\n      throw err\n    }\n  }\n\n  /**\n   * @param {PeerId} peerId\n   */\n  async _getPreviousValue (peerId) {\n    if (!(PeerId.isPeerId(peerId))) {\n      throw errcode(new Error('invalid peer ID'), 'ERR_INVALID_PEER_ID')\n    }\n\n    try {\n      const dsVal = await this._datastore.get(ipns.getLocalKey(peerId.id))\n\n      if (!(dsVal instanceof Uint8Array)) {\n        throw errcode(new Error(\"found ipns record that we couldn't process\"), 'ERR_INVALID_IPNS_RECORD')\n      }\n\n      // unmarshal data\n      try {\n        const record = ipns.unmarshal(dsVal)\n\n        return record.value\n      } catch (err) {\n        log.error(err)\n        throw errcode(new Error('found ipns record that we couldn\\'t convert to a value'), 'ERR_INVALID_IPNS_RECORD')\n      }\n    } catch (err) {\n      // error handling\n      // no need to republish\n      if (err && err.notFound) {\n        throw errcode(new Error(`no previous entry for record with id: ${peerId.id}`), 'ERR_NO_ENTRY_FOUND')\n      }\n\n      throw err\n    }\n  }\n}\n\nexports = module.exports = IpnsRepublisher\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}