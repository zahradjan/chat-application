{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst log = Object.assign(debug('libp2p:circuit:stop'), {\n  error: debug('libp2p:circuit:stop:err')\n});\n\nconst {\n  CircuitRelay: CircuitPB\n} = require('../protocol');\n\nconst multicodec = require('../multicodec');\n\nconst StreamHandler = require('./stream-handler');\n\nconst {\n  validateAddrs\n} = require('./utils');\n/**\n * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection\n * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream\n * @typedef {import('../protocol').ICircuitRelay} ICircuitRelay\n */\n\n/**\n * Handles incoming STOP requests\n *\n * @private\n * @param {Object} options\n * @param {Connection} options.connection\n * @param {ICircuitRelay} options.request - The CircuitRelay protobuf request (unencoded)\n * @param {StreamHandler} options.streamHandler\n * @returns {Promise<MuxedStream>|void} Resolves a duplex iterable\n */\n\n\nmodule.exports.handleStop = function handleStop(_ref) {\n  let {\n    connection,\n    request,\n    streamHandler\n  } = _ref;\n\n  // Validate the STOP request has the required input\n  try {\n    validateAddrs(request, streamHandler);\n  } catch (err) {\n    return log.error('invalid stop request via peer %s', connection.remotePeer.toB58String(), err);\n  } // The request is valid\n\n\n  log('stop request is valid');\n  streamHandler.write({\n    type: CircuitPB.Type.STATUS,\n    code: CircuitPB.Status.SUCCESS\n  });\n  return streamHandler.rest();\n};\n/**\n * Creates a STOP request\n *\n * @private\n * @param {Object} options\n * @param {Connection} options.connection\n * @param {ICircuitRelay} options.request - The CircuitRelay protobuf request (unencoded)\n * @returns {Promise<MuxedStream|void>} Resolves a duplex iterable\n */\n\n\nmodule.exports.stop = async function stop(_ref2) {\n  let {\n    connection,\n    request\n  } = _ref2;\n  const {\n    stream\n  } = await connection.newStream([multicodec.relay]);\n  log('starting stop request to %s', connection.remotePeer.toB58String());\n  const streamHandler = new StreamHandler({\n    stream\n  });\n  streamHandler.write(request);\n  const response = await streamHandler.read();\n\n  if (!response) {\n    return streamHandler.close();\n  }\n\n  if (response.code === CircuitPB.Status.SUCCESS) {\n    log('stop request to %s was successful', connection.remotePeer.toB58String());\n    return streamHandler.rest();\n  }\n\n  log('stop request failed with code %d', response.code);\n  streamHandler.close();\n};","map":{"version":3,"names":["debug","require","log","Object","assign","error","CircuitRelay","CircuitPB","multicodec","StreamHandler","validateAddrs","module","exports","handleStop","connection","request","streamHandler","err","remotePeer","toB58String","write","type","Type","STATUS","code","Status","SUCCESS","rest","stop","stream","newStream","relay","response","read","close"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p/src/circuit/circuit/stop.js"],"sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = Object.assign(debug('libp2p:circuit:stop'), {\n  error: debug('libp2p:circuit:stop:err')\n})\n\nconst { CircuitRelay: CircuitPB } = require('../protocol')\nconst multicodec = require('../multicodec')\nconst StreamHandler = require('./stream-handler')\nconst { validateAddrs } = require('./utils')\n\n/**\n * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection\n * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream\n * @typedef {import('../protocol').ICircuitRelay} ICircuitRelay\n */\n\n/**\n * Handles incoming STOP requests\n *\n * @private\n * @param {Object} options\n * @param {Connection} options.connection\n * @param {ICircuitRelay} options.request - The CircuitRelay protobuf request (unencoded)\n * @param {StreamHandler} options.streamHandler\n * @returns {Promise<MuxedStream>|void} Resolves a duplex iterable\n */\nmodule.exports.handleStop = function handleStop ({\n  connection,\n  request,\n  streamHandler\n}) {\n  // Validate the STOP request has the required input\n  try {\n    validateAddrs(request, streamHandler)\n  } catch (err) {\n    return log.error('invalid stop request via peer %s', connection.remotePeer.toB58String(), err)\n  }\n\n  // The request is valid\n  log('stop request is valid')\n  streamHandler.write({\n    type: CircuitPB.Type.STATUS,\n    code: CircuitPB.Status.SUCCESS\n  })\n  return streamHandler.rest()\n}\n\n/**\n * Creates a STOP request\n *\n * @private\n * @param {Object} options\n * @param {Connection} options.connection\n * @param {ICircuitRelay} options.request - The CircuitRelay protobuf request (unencoded)\n * @returns {Promise<MuxedStream|void>} Resolves a duplex iterable\n */\nmodule.exports.stop = async function stop ({\n  connection,\n  request\n}) {\n  const { stream } = await connection.newStream([multicodec.relay])\n  log('starting stop request to %s', connection.remotePeer.toB58String())\n  const streamHandler = new StreamHandler({ stream })\n\n  streamHandler.write(request)\n  const response = await streamHandler.read()\n\n  if (!response) {\n    return streamHandler.close()\n  }\n\n  if (response.code === CircuitPB.Status.SUCCESS) {\n    log('stop request to %s was successful', connection.remotePeer.toB58String())\n    return streamHandler.rest()\n  }\n\n  log('stop request failed with code %d', response.code)\n  streamHandler.close()\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,GAAG,GAAGC,MAAM,CAACC,MAAP,CAAcJ,KAAK,CAAC,qBAAD,CAAnB,EAA4C;EACtDK,KAAK,EAAEL,KAAK,CAAC,yBAAD;AAD0C,CAA5C,CAAZ;;AAIA,MAAM;EAAEM,YAAY,EAAEC;AAAhB,IAA8BN,OAAO,CAAC,aAAD,CAA3C;;AACA,MAAMO,UAAU,GAAGP,OAAO,CAAC,eAAD,CAA1B;;AACA,MAAMQ,aAAa,GAAGR,OAAO,CAAC,kBAAD,CAA7B;;AACA,MAAM;EAAES;AAAF,IAAoBT,OAAO,CAAC,SAAD,CAAjC;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAU,MAAM,CAACC,OAAP,CAAeC,UAAf,GAA4B,SAASA,UAAT,OAIzB;EAAA,IAJ8C;IAC/CC,UAD+C;IAE/CC,OAF+C;IAG/CC;EAH+C,CAI9C;;EACD;EACA,IAAI;IACFN,aAAa,CAACK,OAAD,EAAUC,aAAV,CAAb;EACD,CAFD,CAEE,OAAOC,GAAP,EAAY;IACZ,OAAOf,GAAG,CAACG,KAAJ,CAAU,kCAAV,EAA8CS,UAAU,CAACI,UAAX,CAAsBC,WAAtB,EAA9C,EAAmFF,GAAnF,CAAP;EACD,CANA,CAQD;;;EACAf,GAAG,CAAC,uBAAD,CAAH;EACAc,aAAa,CAACI,KAAd,CAAoB;IAClBC,IAAI,EAAEd,SAAS,CAACe,IAAV,CAAeC,MADH;IAElBC,IAAI,EAAEjB,SAAS,CAACkB,MAAV,CAAiBC;EAFL,CAApB;EAIA,OAAOV,aAAa,CAACW,IAAd,EAAP;AACD,CAnBD;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAhB,MAAM,CAACC,OAAP,CAAegB,IAAf,GAAsB,eAAeA,IAAf,QAGnB;EAAA,IAHwC;IACzCd,UADyC;IAEzCC;EAFyC,CAGxC;EACD,MAAM;IAAEc;EAAF,IAAa,MAAMf,UAAU,CAACgB,SAAX,CAAqB,CAACtB,UAAU,CAACuB,KAAZ,CAArB,CAAzB;EACA7B,GAAG,CAAC,6BAAD,EAAgCY,UAAU,CAACI,UAAX,CAAsBC,WAAtB,EAAhC,CAAH;EACA,MAAMH,aAAa,GAAG,IAAIP,aAAJ,CAAkB;IAAEoB;EAAF,CAAlB,CAAtB;EAEAb,aAAa,CAACI,KAAd,CAAoBL,OAApB;EACA,MAAMiB,QAAQ,GAAG,MAAMhB,aAAa,CAACiB,IAAd,EAAvB;;EAEA,IAAI,CAACD,QAAL,EAAe;IACb,OAAOhB,aAAa,CAACkB,KAAd,EAAP;EACD;;EAED,IAAIF,QAAQ,CAACR,IAAT,KAAkBjB,SAAS,CAACkB,MAAV,CAAiBC,OAAvC,EAAgD;IAC9CxB,GAAG,CAAC,mCAAD,EAAsCY,UAAU,CAACI,UAAX,CAAsBC,WAAtB,EAAtC,CAAH;IACA,OAAOH,aAAa,CAACW,IAAd,EAAP;EACD;;EAEDzB,GAAG,CAAC,kCAAD,EAAqC8B,QAAQ,CAACR,IAA9C,CAAH;EACAR,aAAa,CAACkB,KAAd;AACD,CAtBD"},"metadata":{},"sourceType":"script"}