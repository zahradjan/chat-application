{"ast":null,"code":"'use strict';\n\nconst errCode = require('err-code');\n\nconst {\n  fromString: uint8ArrayFromString\n} = require('uint8arrays/from-string');\n\nconst browserStreamToIt = require('browser-readablestream-to-it');\n\nconst blobToIt = require('blob-to-it');\n\nconst itPeekable = require('it-peekable');\n\nconst all = require('it-all');\n\nconst map = require('it-map');\n\nconst {\n  isBytes,\n  isReadableStream,\n  isBlob\n} = require('./utils');\n/**\n * @param {import('./normalise-input').ToContent} input\n */\n\n\nasync function* toAsyncIterable(input) {\n  // Bytes | String\n  if (isBytes(input)) {\n    yield toBytes(input);\n    return;\n  }\n\n  if (typeof input === 'string' || input instanceof String) {\n    yield toBytes(input.toString());\n    return;\n  } // Blob\n\n\n  if (isBlob(input)) {\n    yield* blobToIt(input);\n    return;\n  } // Browser stream\n\n\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input);\n  } // (Async)Iterator<?>\n\n\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    /** @type {any} peekable */\n    const peekable = itPeekable(input);\n    /** @type {any} value */\n\n    const {\n      value,\n      done\n    } = await peekable.peek();\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      yield* [];\n      return;\n    }\n\n    peekable.push(value); // (Async)Iterable<Number>\n\n    if (Number.isInteger(value)) {\n      yield Uint8Array.from(await all(peekable));\n      return;\n    } // (Async)Iterable<Bytes|String>\n\n\n    if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n      yield* map(peekable, toBytes);\n      return;\n    }\n  }\n\n  throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT');\n}\n/**\n * @param {ArrayBuffer | ArrayBufferView | string | InstanceType<typeof window.String> | number[]} chunk\n */\n\n\nfunction toBytes(chunk) {\n  if (chunk instanceof Uint8Array) {\n    return chunk;\n  }\n\n  if (ArrayBuffer.isView(chunk)) {\n    return new Uint8Array(chunk.buffer, chunk.byteOffset, chunk.byteLength);\n  }\n\n  if (chunk instanceof ArrayBuffer) {\n    return new Uint8Array(chunk);\n  }\n\n  if (Array.isArray(chunk)) {\n    return Uint8Array.from(chunk);\n  }\n\n  return uint8ArrayFromString(chunk.toString());\n}\n\nmodule.exports = toAsyncIterable;","map":{"version":3,"names":["errCode","require","fromString","uint8ArrayFromString","browserStreamToIt","blobToIt","itPeekable","all","map","isBytes","isReadableStream","isBlob","toAsyncIterable","input","toBytes","String","toString","Symbol","iterator","asyncIterator","peekable","value","done","peek","push","Number","isInteger","Uint8Array","from","Error","chunk","ArrayBuffer","isView","buffer","byteOffset","byteLength","Array","isArray","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core-utils/src/files/normalise-input/normalise-content.js"],"sourcesContent":["'use strict'\n\nconst errCode = require('err-code')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\nconst browserStreamToIt = require('browser-readablestream-to-it')\nconst blobToIt = require('blob-to-it')\nconst itPeekable = require('it-peekable')\nconst all = require('it-all')\nconst map = require('it-map')\nconst {\n  isBytes,\n  isReadableStream,\n  isBlob\n} = require('./utils')\n\n/**\n * @param {import('./normalise-input').ToContent} input\n */\nasync function * toAsyncIterable (input) {\n  // Bytes | String\n  if (isBytes(input)) {\n    yield toBytes(input)\n    return\n  }\n\n  if (typeof input === 'string' || input instanceof String) {\n    yield toBytes(input.toString())\n    return\n  }\n\n  // Blob\n  if (isBlob(input)) {\n    yield * blobToIt(input)\n    return\n  }\n\n  // Browser stream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input)\n  }\n\n  // (Async)Iterator<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    /** @type {any} peekable */\n    const peekable = itPeekable(input)\n\n    /** @type {any} value */\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      yield * []\n      return\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    if (Number.isInteger(value)) {\n      yield Uint8Array.from((await all(peekable)))\n      return\n    }\n\n    // (Async)Iterable<Bytes|String>\n    if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n      yield * map(peekable, toBytes)\n      return\n    }\n  }\n\n  throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {ArrayBuffer | ArrayBufferView | string | InstanceType<typeof window.String> | number[]} chunk\n */\nfunction toBytes (chunk) {\n  if (chunk instanceof Uint8Array) {\n    return chunk\n  }\n\n  if (ArrayBuffer.isView(chunk)) {\n    return new Uint8Array(chunk.buffer, chunk.byteOffset, chunk.byteLength)\n  }\n\n  if (chunk instanceof ArrayBuffer) {\n    return new Uint8Array(chunk)\n  }\n\n  if (Array.isArray(chunk)) {\n    return Uint8Array.from(chunk)\n  }\n\n  return uint8ArrayFromString(chunk.toString())\n}\n\nmodule.exports = toAsyncIterable\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}