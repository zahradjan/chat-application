{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _assertThisInitialized = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\n\nvar _inherits = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar errcode = require('err-code');\n\nvar _require = require('events'),\n    EventEmitter = _require.EventEmitter;\n\nvar PeerId = require('peer-id');\n\nvar AddressBook = require('./address-book');\n\nvar KeyBook = require('./key-book');\n\nvar MetadataBook = require('./metadata-book');\n\nvar ProtoBook = require('./proto-book');\n\nvar _require2 = require('../errors'),\n    ERR_INVALID_PARAMETERS = _require2.codes.ERR_INVALID_PARAMETERS;\n/**\n * @typedef {import('./address-book').Address} Address\n */\n\n/**\n * @extends {EventEmitter}\n *\n * @fires PeerStore#peer Emitted when a new peer is added.\n * @fires PeerStore#change:protocols Emitted when a known peer supports a different set of protocols.\n * @fires PeerStore#change:multiaddrs Emitted when a known peer has a different set of multiaddrs.\n * @fires PeerStore#change:pubkey Emitted emitted when a peer's public key is known.\n * @fires PeerStore#change:metadata Emitted when the known metadata of a peer change.\n */\n\n\nvar PeerStore = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(PeerStore, _EventEmitter);\n\n  var _super = _createSuper(PeerStore);\n\n  /**\n   * Peer object\n   *\n   * @typedef {Object} Peer\n   * @property {PeerId} id peer's peer-id instance.\n   * @property {Address[]} addresses peer's addresses containing its multiaddrs and metadata.\n   * @property {string[]} protocols peer's supported protocols.\n   * @property {Map<string, Uint8Array>|undefined} metadata peer's metadata map.\n   */\n\n  /**\n   * Responsible for managing known peers, as well as their addresses, protocols and metadata.\n   *\n   * @param {object} options\n   * @param {PeerId} options.peerId\n   * @class\n   */\n  function PeerStore(_ref) {\n    var _this;\n\n    var peerId = _ref.peerId;\n\n    _classCallCheck(this, PeerStore);\n\n    _this = _super.call(this);\n    _this._peerId = peerId;\n    /**\n     * AddressBook containing a map of peerIdStr to Address.\n     */\n\n    _this.addressBook = new AddressBook(_assertThisInitialized(_this));\n    /**\n     * KeyBook containing a map of peerIdStr to their PeerId with public keys.\n     */\n\n    _this.keyBook = new KeyBook(_assertThisInitialized(_this));\n    /**\n     * MetadataBook containing a map of peerIdStr to their metadata Map.\n     */\n\n    _this.metadataBook = new MetadataBook(_assertThisInitialized(_this));\n    /**\n     * ProtoBook containing a map of peerIdStr to supported protocols.\n     */\n\n    _this.protoBook = new ProtoBook(_assertThisInitialized(_this));\n    return _this;\n  }\n  /**\n   * Start the PeerStore.\n   */\n\n\n  _createClass(PeerStore, [{\n    key: \"start\",\n    value: function start() {}\n    /**\n     * Stop the PeerStore.\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {}\n    /**\n     * Get all the stored information of every peer known.\n     *\n     * @returns {Map<string, Peer>}\n     */\n\n  }, {\n    key: \"peers\",\n    get: function get() {\n      var _this2 = this;\n\n      var storedPeers = new Set([].concat(_toConsumableArray(this.addressBook.data.keys()), _toConsumableArray(this.keyBook.data.keys()), _toConsumableArray(this.protoBook.data.keys()), _toConsumableArray(this.metadataBook.data.keys()))); // Remove self peer if present\n\n      this._peerId && storedPeers.delete(this._peerId.toB58String());\n      var peersData = new Map();\n      storedPeers.forEach(function (idStr) {\n        peersData.set(idStr, _this2.get(PeerId.createFromB58String(idStr)));\n      });\n      return peersData;\n    }\n    /**\n     * Delete the information of the given peer in every book.\n     *\n     * @param {PeerId} peerId\n     * @returns {boolean} true if found and removed\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(peerId) {\n      var addressesDeleted = this.addressBook.delete(peerId);\n      var keyDeleted = this.keyBook.delete(peerId);\n      var protocolsDeleted = this.protoBook.delete(peerId);\n      var metadataDeleted = this.metadataBook.delete(peerId);\n      return addressesDeleted || keyDeleted || protocolsDeleted || metadataDeleted;\n    }\n    /**\n     * Get the stored information of a given peer.\n     *\n     * @param {PeerId} peerId\n     * @returns {Peer|undefined}\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(peerId) {\n      if (!PeerId.isPeerId(peerId)) {\n        throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n      }\n\n      var id = this.keyBook.data.get(peerId.toB58String());\n      var addresses = this.addressBook.get(peerId);\n      var metadata = this.metadataBook.get(peerId);\n      var protocols = this.protoBook.get(peerId);\n\n      if (!id && !addresses && !metadata && !protocols) {\n        return undefined;\n      }\n\n      return {\n        id: id || peerId,\n        addresses: addresses || [],\n        protocols: protocols || [],\n        metadata: metadata\n      };\n    }\n  }]);\n\n  return PeerStore;\n}(EventEmitter);\n\nmodule.exports = PeerStore;","map":{"version":3,"names":["errcode","require","EventEmitter","PeerId","AddressBook","KeyBook","MetadataBook","ProtoBook","ERR_INVALID_PARAMETERS","codes","PeerStore","peerId","_peerId","addressBook","keyBook","metadataBook","protoBook","storedPeers","Set","data","keys","delete","toB58String","peersData","Map","forEach","idStr","set","get","createFromB58String","addressesDeleted","keyDeleted","protocolsDeleted","metadataDeleted","isPeerId","Error","id","addresses","metadata","protocols","undefined","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p/src/peer-store/index.js"],"sourcesContent":["'use strict'\n\nconst errcode = require('err-code')\n\nconst { EventEmitter } = require('events')\nconst PeerId = require('peer-id')\n\nconst AddressBook = require('./address-book')\nconst KeyBook = require('./key-book')\nconst MetadataBook = require('./metadata-book')\nconst ProtoBook = require('./proto-book')\n\nconst {\n  codes: { ERR_INVALID_PARAMETERS }\n} = require('../errors')\n\n/**\n * @typedef {import('./address-book').Address} Address\n */\n\n/**\n * @extends {EventEmitter}\n *\n * @fires PeerStore#peer Emitted when a new peer is added.\n * @fires PeerStore#change:protocols Emitted when a known peer supports a different set of protocols.\n * @fires PeerStore#change:multiaddrs Emitted when a known peer has a different set of multiaddrs.\n * @fires PeerStore#change:pubkey Emitted emitted when a peer's public key is known.\n * @fires PeerStore#change:metadata Emitted when the known metadata of a peer change.\n */\nclass PeerStore extends EventEmitter {\n  /**\n   * Peer object\n   *\n   * @typedef {Object} Peer\n   * @property {PeerId} id peer's peer-id instance.\n   * @property {Address[]} addresses peer's addresses containing its multiaddrs and metadata.\n   * @property {string[]} protocols peer's supported protocols.\n   * @property {Map<string, Uint8Array>|undefined} metadata peer's metadata map.\n   */\n\n  /**\n   * Responsible for managing known peers, as well as their addresses, protocols and metadata.\n   *\n   * @param {object} options\n   * @param {PeerId} options.peerId\n   * @class\n   */\n  constructor ({ peerId }) {\n    super()\n\n    this._peerId = peerId\n\n    /**\n     * AddressBook containing a map of peerIdStr to Address.\n     */\n    this.addressBook = new AddressBook(this)\n\n    /**\n     * KeyBook containing a map of peerIdStr to their PeerId with public keys.\n     */\n    this.keyBook = new KeyBook(this)\n\n    /**\n     * MetadataBook containing a map of peerIdStr to their metadata Map.\n     */\n    this.metadataBook = new MetadataBook(this)\n\n    /**\n     * ProtoBook containing a map of peerIdStr to supported protocols.\n     */\n    this.protoBook = new ProtoBook(this)\n  }\n\n  /**\n   * Start the PeerStore.\n   */\n  start () {}\n\n  /**\n   * Stop the PeerStore.\n   */\n  stop () {}\n\n  /**\n   * Get all the stored information of every peer known.\n   *\n   * @returns {Map<string, Peer>}\n   */\n  get peers () {\n    const storedPeers = new Set([\n      ...this.addressBook.data.keys(),\n      ...this.keyBook.data.keys(),\n      ...this.protoBook.data.keys(),\n      ...this.metadataBook.data.keys()\n    ])\n\n    // Remove self peer if present\n    this._peerId && storedPeers.delete(this._peerId.toB58String())\n\n    const peersData = new Map()\n    storedPeers.forEach((idStr) => {\n      peersData.set(idStr, this.get(PeerId.createFromB58String(idStr)))\n    })\n\n    return peersData\n  }\n\n  /**\n   * Delete the information of the given peer in every book.\n   *\n   * @param {PeerId} peerId\n   * @returns {boolean} true if found and removed\n   */\n  delete (peerId) {\n    const addressesDeleted = this.addressBook.delete(peerId)\n    const keyDeleted = this.keyBook.delete(peerId)\n    const protocolsDeleted = this.protoBook.delete(peerId)\n    const metadataDeleted = this.metadataBook.delete(peerId)\n\n    return addressesDeleted || keyDeleted || protocolsDeleted || metadataDeleted\n  }\n\n  /**\n   * Get the stored information of a given peer.\n   *\n   * @param {PeerId} peerId\n   * @returns {Peer|undefined}\n   */\n  get (peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    const id = this.keyBook.data.get(peerId.toB58String())\n    const addresses = this.addressBook.get(peerId)\n    const metadata = this.metadataBook.get(peerId)\n    const protocols = this.protoBook.get(peerId)\n\n    if (!id && !addresses && !metadata && !protocols) {\n      return undefined\n    }\n\n    return {\n      id: id || peerId,\n      addresses: addresses || [],\n      protocols: protocols || [],\n      metadata: metadata\n    }\n  }\n}\n\nmodule.exports = PeerStore\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}