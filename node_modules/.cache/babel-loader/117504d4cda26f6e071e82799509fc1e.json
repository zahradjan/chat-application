{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IWantTracer = void 0;\n\nconst constants_1 = require(\"./constants\");\n\nconst utils_1 = require(\"./utils\");\n\nconst pubsubErrors = require(\"libp2p-interfaces/src/pubsub/errors\");\n\nconst {\n  ERR_INVALID_SIGNATURE,\n  ERR_MISSING_SIGNATURE\n} = pubsubErrors.codes;\n/**\n * IWantTracer is an internal tracer that tracks IWANT requests in order to penalize\n * peers who don't follow up on IWANT requests after an IHAVE advertisement.\n * The tracking of promises is probabilistic to avoid using too much memory.\n *\n * Note: Do not confuse these 'promises' with JS Promise objects.\n * These 'promises' are merely expectations of a peer's behavior.\n */\n\nclass IWantTracer {\n  constructor(getMsgId) {\n    this.getMsgId = getMsgId;\n    this.promises = new Map();\n  }\n  /**\n   * Track a promise to deliver a message from a list of msgIDs we are requesting\n   * @param {string} p peer id\n   * @param {string[]} msgIds\n   * @returns {void}\n   */\n\n\n  addPromise(p, msgIds) {\n    // pick msgId randomly from the list\n    const ix = Math.floor(Math.random() * msgIds.length);\n    const msgId = msgIds[ix];\n    const msgIdStr = utils_1.messageIdToString(msgId);\n    let peers = this.promises.get(msgIdStr);\n\n    if (!peers) {\n      peers = new Map();\n      this.promises.set(msgIdStr, peers);\n    }\n\n    if (!peers.has(p)) {\n      peers.set(p, Date.now() + constants_1.GossipsubIWantFollowupTime);\n    }\n  }\n  /**\n   * Returns the number of broken promises for each peer who didn't follow up on an IWANT request.\n   * @returns {Map<string, number>}\n   */\n\n\n  getBrokenPromises() {\n    const now = Date.now();\n    const result = new Map();\n    this.promises.forEach((peers, msgId) => {\n      peers.forEach((expire, p) => {\n        // the promise has been broken\n        if (expire < now) {\n          // add 1 to result\n          result.set(p, (result.get(p) || 0) + 1); // delete from tracked promises\n\n          peers.delete(p);\n        }\n      }); // clean up empty promises for a msgId\n\n      if (!peers.size) {\n        this.promises.delete(msgId);\n      }\n    });\n    return result;\n  }\n  /**\n   * Someone delivered a message, stop tracking promises for it\n   * @param {InMessage} msg\n   * @returns {Promise<void>}\n   */\n\n\n  deliverMessage(msg) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const msgId = yield this.getMsgId(msg);\n      const msgIdStr = utils_1.messageIdToString(msgId);\n      this.promises.delete(msgIdStr);\n    });\n  }\n  /**\n   * A message got rejected, so we can stop tracking promises and let the score penalty apply from invalid message delivery,\n   * unless its an obviously invalid message.\n   * @param {InMessage} msg\n   * @param {string} reason\n   * @returns {Promise<void>}\n   */\n\n\n  rejectMessage(msg, reason) {\n    return __awaiter(this, void 0, void 0, function* () {\n      switch (reason) {\n        case ERR_INVALID_SIGNATURE:\n        case ERR_MISSING_SIGNATURE:\n          return;\n      }\n\n      const msgId = yield this.getMsgId(msg);\n      const msgIdStr = utils_1.messageIdToString(msgId);\n      this.promises.delete(msgIdStr);\n    });\n  }\n\n  clear() {\n    this.promises.clear();\n  }\n\n}\n\nexports.IWantTracer = IWantTracer;","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","IWantTracer","constants_1","require","utils_1","pubsubErrors","ERR_INVALID_SIGNATURE","ERR_MISSING_SIGNATURE","codes","constructor","getMsgId","promises","Map","addPromise","p","msgIds","ix","Math","floor","random","length","msgId","msgIdStr","messageIdToString","peers","get","set","has","Date","now","GossipsubIWantFollowupTime","getBrokenPromises","forEach","expire","delete","size","deliverMessage","msg","rejectMessage","reason","clear"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-gossipsub/src/tracer.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IWantTracer = void 0;\nconst constants_1 = require(\"./constants\");\nconst utils_1 = require(\"./utils\");\nconst pubsubErrors = require(\"libp2p-interfaces/src/pubsub/errors\");\nconst { ERR_INVALID_SIGNATURE, ERR_MISSING_SIGNATURE } = pubsubErrors.codes;\n/**\n * IWantTracer is an internal tracer that tracks IWANT requests in order to penalize\n * peers who don't follow up on IWANT requests after an IHAVE advertisement.\n * The tracking of promises is probabilistic to avoid using too much memory.\n *\n * Note: Do not confuse these 'promises' with JS Promise objects.\n * These 'promises' are merely expectations of a peer's behavior.\n */\nclass IWantTracer {\n    constructor(getMsgId) {\n        this.getMsgId = getMsgId;\n        this.promises = new Map();\n    }\n    /**\n     * Track a promise to deliver a message from a list of msgIDs we are requesting\n     * @param {string} p peer id\n     * @param {string[]} msgIds\n     * @returns {void}\n     */\n    addPromise(p, msgIds) {\n        // pick msgId randomly from the list\n        const ix = Math.floor(Math.random() * msgIds.length);\n        const msgId = msgIds[ix];\n        const msgIdStr = utils_1.messageIdToString(msgId);\n        let peers = this.promises.get(msgIdStr);\n        if (!peers) {\n            peers = new Map();\n            this.promises.set(msgIdStr, peers);\n        }\n        if (!peers.has(p)) {\n            peers.set(p, Date.now() + constants_1.GossipsubIWantFollowupTime);\n        }\n    }\n    /**\n     * Returns the number of broken promises for each peer who didn't follow up on an IWANT request.\n     * @returns {Map<string, number>}\n     */\n    getBrokenPromises() {\n        const now = Date.now();\n        const result = new Map();\n        this.promises.forEach((peers, msgId) => {\n            peers.forEach((expire, p) => {\n                // the promise has been broken\n                if (expire < now) {\n                    // add 1 to result\n                    result.set(p, (result.get(p) || 0) + 1);\n                    // delete from tracked promises\n                    peers.delete(p);\n                }\n            });\n            // clean up empty promises for a msgId\n            if (!peers.size) {\n                this.promises.delete(msgId);\n            }\n        });\n        return result;\n    }\n    /**\n     * Someone delivered a message, stop tracking promises for it\n     * @param {InMessage} msg\n     * @returns {Promise<void>}\n     */\n    deliverMessage(msg) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const msgId = yield this.getMsgId(msg);\n            const msgIdStr = utils_1.messageIdToString(msgId);\n            this.promises.delete(msgIdStr);\n        });\n    }\n    /**\n     * A message got rejected, so we can stop tracking promises and let the score penalty apply from invalid message delivery,\n     * unless its an obviously invalid message.\n     * @param {InMessage} msg\n     * @param {string} reason\n     * @returns {Promise<void>}\n     */\n    rejectMessage(msg, reason) {\n        return __awaiter(this, void 0, void 0, function* () {\n            switch (reason) {\n                case ERR_INVALID_SIGNATURE:\n                case ERR_MISSING_SIGNATURE:\n                    return;\n            }\n            const msgId = yield this.getMsgId(msg);\n            const msgIdStr = utils_1.messageIdToString(msgId);\n            this.promises.delete(msgIdStr);\n        });\n    }\n    clear() {\n        this.promises.clear();\n    }\n}\nexports.IWantTracer = IWantTracer;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}