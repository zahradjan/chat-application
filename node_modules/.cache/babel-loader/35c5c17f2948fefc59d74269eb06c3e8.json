{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar _toConsumableArray = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AbstractHandshake = exports.MIN_NONCE = void 0;\n\nvar buffer_1 = require(\"buffer\");\n\nvar x25519 = __importStar(require(\"@stablelib/x25519\"));\n\nvar SHA256 = __importStar(require(\"@stablelib/sha256\"));\n\nvar chacha20poly1305_1 = require(\"@stablelib/chacha20poly1305\");\n\nvar utils_1 = require(\"../utils\");\n\nvar logger_1 = require(\"../logger\");\n\nexports.MIN_NONCE = 0;\n\nvar AbstractHandshake = /*#__PURE__*/function () {\n  function AbstractHandshake() {\n    _classCallCheck(this, AbstractHandshake);\n  }\n\n  _createClass(AbstractHandshake, [{\n    key: \"encryptWithAd\",\n    value: function encryptWithAd(cs, ad, plaintext) {\n      var e = this.encrypt(cs.k, cs.n, ad, plaintext);\n      this.setNonce(cs, this.incrementNonce(cs.n));\n      return e;\n    }\n  }, {\n    key: \"decryptWithAd\",\n    value: function decryptWithAd(cs, ad, ciphertext) {\n      var _this$decrypt = this.decrypt(cs.k, cs.n, ad, ciphertext),\n          plaintext = _this$decrypt.plaintext,\n          valid = _this$decrypt.valid;\n\n      this.setNonce(cs, this.incrementNonce(cs.n));\n      return {\n        plaintext: plaintext,\n        valid: valid\n      };\n    } // Cipher state related\n\n  }, {\n    key: \"hasKey\",\n    value: function hasKey(cs) {\n      return !this.isEmptyKey(cs.k);\n    }\n  }, {\n    key: \"setNonce\",\n    value: function setNonce(cs, nonce) {\n      cs.n = nonce;\n    }\n  }, {\n    key: \"createEmptyKey\",\n    value: function createEmptyKey() {\n      return buffer_1.Buffer.alloc(32);\n    }\n  }, {\n    key: \"isEmptyKey\",\n    value: function isEmptyKey(k) {\n      var emptyKey = this.createEmptyKey();\n      return emptyKey.equals(k);\n    }\n  }, {\n    key: \"incrementNonce\",\n    value: function incrementNonce(n) {\n      return n + 1;\n    }\n  }, {\n    key: \"nonceToBytes\",\n    value: function nonceToBytes(n) {\n      var nonce = buffer_1.Buffer.alloc(12);\n      nonce.writeUInt32LE(n, 4);\n      return nonce;\n    }\n  }, {\n    key: \"encrypt\",\n    value: function encrypt(k, n, ad, plaintext) {\n      var nonce = this.nonceToBytes(n);\n      var ctx = new chacha20poly1305_1.ChaCha20Poly1305(k);\n      var encryptedMessage = ctx.seal(nonce, plaintext, ad);\n      return buffer_1.Buffer.from(encryptedMessage.buffer, encryptedMessage.byteOffset, encryptedMessage.length);\n    }\n  }, {\n    key: \"encryptAndHash\",\n    value: function encryptAndHash(ss, plaintext) {\n      var ciphertext;\n\n      if (this.hasKey(ss.cs)) {\n        ciphertext = this.encryptWithAd(ss.cs, ss.h, plaintext);\n      } else {\n        ciphertext = plaintext;\n      }\n\n      this.mixHash(ss, ciphertext);\n      return ciphertext;\n    }\n  }, {\n    key: \"decrypt\",\n    value: function decrypt(k, n, ad, ciphertext) {\n      var nonce = this.nonceToBytes(n);\n      var ctx = new chacha20poly1305_1.ChaCha20Poly1305(k);\n      var encryptedMessage = ctx.open(nonce, ciphertext, ad);\n\n      if (encryptedMessage) {\n        return {\n          plaintext: buffer_1.Buffer.from(encryptedMessage.buffer, encryptedMessage.byteOffset, encryptedMessage.length),\n          valid: true\n        };\n      } else {\n        return {\n          plaintext: buffer_1.Buffer.from(''),\n          valid: false\n        };\n      }\n    }\n  }, {\n    key: \"decryptAndHash\",\n    value: function decryptAndHash(ss, ciphertext) {\n      var plaintext;\n      var valid = true;\n\n      if (this.hasKey(ss.cs)) {\n        var _this$decryptWithAd = this.decryptWithAd(ss.cs, ss.h, ciphertext);\n\n        plaintext = _this$decryptWithAd.plaintext;\n        valid = _this$decryptWithAd.valid;\n      } else {\n        plaintext = ciphertext;\n      }\n\n      this.mixHash(ss, ciphertext);\n      return {\n        plaintext: plaintext,\n        valid: valid\n      };\n    }\n  }, {\n    key: \"dh\",\n    value: function dh(privateKey, publicKey) {\n      try {\n        var derivedU8 = x25519.sharedKey(privateKey, publicKey);\n        var derived = buffer_1.Buffer.from(derivedU8.buffer, derivedU8.byteOffset, derivedU8.length);\n        var result = buffer_1.Buffer.alloc(32);\n        derived.copy(result);\n        return result;\n      } catch (e) {\n        logger_1.logger(e.message);\n        return buffer_1.Buffer.alloc(32);\n      }\n    }\n  }, {\n    key: \"mixHash\",\n    value: function mixHash(ss, data) {\n      ss.h = this.getHash(ss.h, data);\n    }\n  }, {\n    key: \"getHash\",\n    value: function getHash(a, b) {\n      var hash = SHA256.hash(buffer_1.Buffer.from([].concat(_toConsumableArray(a), _toConsumableArray(b))));\n      return buffer_1.Buffer.from(hash.buffer, hash.byteOffset, hash.length);\n    }\n  }, {\n    key: \"mixKey\",\n    value: function mixKey(ss, ikm) {\n      var _utils_1$getHkdf = utils_1.getHkdf(ss.ck, ikm),\n          _utils_1$getHkdf2 = _slicedToArray(_utils_1$getHkdf, 2),\n          ck = _utils_1$getHkdf2[0],\n          tempK = _utils_1$getHkdf2[1];\n\n      ss.cs = this.initializeKey(tempK);\n      ss.ck = ck;\n    }\n  }, {\n    key: \"initializeKey\",\n    value: function initializeKey(k) {\n      var n = exports.MIN_NONCE;\n      return {\n        k: k,\n        n: n\n      };\n    } // Symmetric state related\n\n  }, {\n    key: \"initializeSymmetric\",\n    value: function initializeSymmetric(protocolName) {\n      var protocolNameBytes = buffer_1.Buffer.from(protocolName, 'utf-8');\n      var h = this.hashProtocolName(protocolNameBytes);\n      var ck = h;\n      var key = this.createEmptyKey();\n      var cs = this.initializeKey(key);\n      return {\n        cs: cs,\n        ck: ck,\n        h: h\n      };\n    }\n  }, {\n    key: \"hashProtocolName\",\n    value: function hashProtocolName(protocolName) {\n      if (protocolName.length <= 32) {\n        var h = buffer_1.Buffer.alloc(32);\n        protocolName.copy(h);\n        return h;\n      } else {\n        return this.getHash(protocolName, buffer_1.Buffer.alloc(0));\n      }\n    }\n  }, {\n    key: \"split\",\n    value: function split(ss) {\n      var _utils_1$getHkdf3 = utils_1.getHkdf(ss.ck, buffer_1.Buffer.alloc(0)),\n          _utils_1$getHkdf4 = _slicedToArray(_utils_1$getHkdf3, 2),\n          tempk1 = _utils_1$getHkdf4[0],\n          tempk2 = _utils_1$getHkdf4[1];\n\n      var cs1 = this.initializeKey(tempk1);\n      var cs2 = this.initializeKey(tempk2);\n      return {\n        cs1: cs1,\n        cs2: cs2\n      };\n    }\n  }, {\n    key: \"writeMessageRegular\",\n    value: function writeMessageRegular(cs, payload) {\n      var ciphertext = this.encryptWithAd(cs, buffer_1.Buffer.alloc(0), payload);\n      var ne = this.createEmptyKey();\n      var ns = buffer_1.Buffer.alloc(0);\n      return {\n        ne: ne,\n        ns: ns,\n        ciphertext: ciphertext\n      };\n    }\n  }, {\n    key: \"readMessageRegular\",\n    value: function readMessageRegular(cs, message) {\n      return this.decryptWithAd(cs, buffer_1.Buffer.alloc(0), message.ciphertext);\n    }\n  }]);\n\n  return AbstractHandshake;\n}();\n\nexports.AbstractHandshake = AbstractHandshake;","map":{"version":3,"mappings":"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","names":["exports","AbstractHandshake","cs","ad","plaintext","e","encrypt","k","n","setNonce","incrementNonce","ciphertext","decrypt","valid","isEmptyKey","nonce","buffer_1","alloc","emptyKey","createEmptyKey","equals","writeUInt32LE","nonceToBytes","ctx","chacha20poly1305_1","encryptedMessage","seal","from","buffer","byteOffset","length","ss","hasKey","encryptWithAd","h","mixHash","open","decryptWithAd","privateKey","publicKey","derivedU8","x25519","sharedKey","derived","result","copy","logger_1","message","data","getHash","a","b","hash","SHA256","ikm","utils_1","ck","tempK","initializeKey","protocolName","protocolNameBytes","hashProtocolName","key","tempk1","tempk2","cs1","cs2","payload","ne","ns"],"sourceRoot":"","sources":["../../../src/handshakes/abstract-handshake.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}