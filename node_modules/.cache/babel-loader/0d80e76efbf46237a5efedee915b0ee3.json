{"ast":null,"code":"'use strict';\n\nconst Block = require('multiformats/block');\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst dagPb = require('@ipld/dag-pb');\n\nconst dagCbor = require('@ipld/dag-cbor');\n\nconst {\n  sha256: hasher\n} = require('multiformats/hashes/sha2');\n\nconst mhtype = 'sha2-256';\n\nconst {\n  base58btc\n} = require('multiformats/bases/base58');\n\nconst defaultBase = base58btc;\n\nconst unsupportedCodecError = () => new Error('unsupported codec');\n\nconst cidifyString = str => {\n  if (!str) {\n    return str;\n  }\n\n  if (Array.isArray(str)) {\n    return str.map(cidifyString);\n  }\n\n  return CID.parse(str);\n};\n\nconst stringifyCid = function (cid) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!cid || typeof cid === 'string') {\n    return cid;\n  }\n\n  if (Array.isArray(cid)) {\n    return cid.map(stringifyCid);\n  }\n\n  if (cid['/']) {\n    return cid['/'];\n  }\n\n  const base = options.base || defaultBase;\n  return cid.toString(base);\n};\n\nconst codecCodes = {\n  [dagPb.code]: dagPb,\n  [dagCbor.code]: dagCbor\n};\nconst codecMap = {\n  // staying backward compatible\n  // old writeObj function was never raw codec; defaulted to cbor via ipfs.dag\n  raw: dagCbor,\n  'dag-pb': dagPb,\n  'dag-cbor': dagCbor\n};\n\nasync function read(ipfs, cid) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  cid = cidifyString(stringifyCid(cid));\n  const codec = codecCodes[cid.code];\n  if (!codec) throw unsupportedCodecError();\n  const bytes = await ipfs.block.get(cid, {\n    timeout: options.timeout\n  });\n  const block = await Block.decode({\n    bytes,\n    codec,\n    hasher\n  });\n\n  if (block.cid.code === dagPb.code) {\n    return JSON.parse(new TextDecoder().decode(block.value.Data));\n  }\n\n  if (block.cid.code === dagCbor.code) {\n    const value = block.value;\n    const links = options.links || [];\n    links.forEach(prop => {\n      if (value[prop]) {\n        value[prop] = stringifyCid(value[prop], options);\n      }\n    });\n    return value;\n  }\n}\n\nasync function write(ipfs, format, value) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  if (options.format === 'dag-pb') format = options.format;\n  const codec = codecMap[format];\n  if (!codec) throw unsupportedCodecError();\n\n  if (codec.code === dagPb.code) {\n    value = typeof value === 'string' ? value : JSON.stringify(value);\n    value = {\n      Data: new TextEncoder().encode(value),\n      Links: []\n    };\n  }\n\n  if (codec.code === dagCbor.code) {\n    const links = options.links || [];\n    links.forEach(prop => {\n      if (value[prop]) {\n        value[prop] = cidifyString(value[prop]);\n      }\n    });\n  }\n\n  const block = await Block.encode({\n    value,\n    codec,\n    hasher\n  });\n  await ipfs.block.put(block.bytes, {\n    cid: block.cid.bytes,\n    version: block.cid.version,\n    format,\n    mhtype,\n    pin: options.pin,\n    timeout: options.timeout\n  });\n  const cid = codec.code === dagPb.code ? block.cid.toV0() : block.cid;\n  return cid.toString(options.base || defaultBase);\n}\n\nmodule.exports = {\n  read,\n  write\n};","map":{"version":3,"names":["Block","require","CID","dagPb","dagCbor","sha256","hasher","mhtype","base58btc","defaultBase","unsupportedCodecError","Error","cidifyString","str","Array","isArray","map","parse","stringifyCid","cid","options","base","toString","codecCodes","code","codecMap","raw","read","ipfs","codec","bytes","block","get","timeout","decode","JSON","TextDecoder","value","Data","links","forEach","prop","write","format","stringify","TextEncoder","encode","Links","put","version","pin","toV0","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/orbit-db-io/index.js"],"sourcesContent":["'use strict'\nconst Block = require('multiformats/block')\nconst { CID } = require('multiformats/cid')\nconst dagPb = require('@ipld/dag-pb')\nconst dagCbor = require('@ipld/dag-cbor')\nconst { sha256: hasher } = require('multiformats/hashes/sha2')\nconst mhtype = 'sha2-256'\nconst { base58btc } = require('multiformats/bases/base58')\nconst defaultBase = base58btc\nconst unsupportedCodecError = () => new Error('unsupported codec')\n\nconst cidifyString = (str) => {\n  if (!str) {\n    return str\n  }\n\n  if (Array.isArray(str)) {\n    return str.map(cidifyString)\n  }\n\n  return CID.parse(str)\n}\n\nconst stringifyCid = (cid, options = {}) => {\n  if (!cid || typeof cid === 'string') {\n    return cid\n  }\n\n  if (Array.isArray(cid)) {\n    return cid.map(stringifyCid)\n  }\n\n  if (cid['/']) {\n    return cid['/']\n  }\n\n  const base = options.base || defaultBase\n  return cid.toString(base)\n}\n\nconst codecCodes = {\n  [dagPb.code]: dagPb,\n  [dagCbor.code]: dagCbor\n}\nconst codecMap = {\n  // staying backward compatible\n  // old writeObj function was never raw codec; defaulted to cbor via ipfs.dag\n  raw: dagCbor,\n  'dag-pb': dagPb,\n  'dag-cbor': dagCbor\n}\n\nasync function read (ipfs, cid, options = {}) {\n  cid = cidifyString(stringifyCid(cid))\n\n  const codec = codecCodes[cid.code]\n  if (!codec) throw unsupportedCodecError()\n\n  const bytes = await ipfs.block.get(cid, { timeout: options.timeout })\n  const block = await Block.decode({ bytes, codec, hasher })\n\n  if (block.cid.code === dagPb.code) {\n    return JSON.parse(new TextDecoder().decode(block.value.Data))\n  }\n  if (block.cid.code === dagCbor.code) {\n    const value = block.value\n    const links = options.links || []\n    links.forEach((prop) => {\n      if (value[prop]) {\n        value[prop] = stringifyCid(value[prop], options)\n      }\n    })\n    return value\n  }\n}\n\nasync function write (ipfs, format, value, options = {}) {\n  if (options.format === 'dag-pb') format = options.format\n  const codec = codecMap[format]\n  if (!codec) throw unsupportedCodecError()\n\n  if (codec.code === dagPb.code) {\n    value = typeof value === 'string' ? value : JSON.stringify(value)\n    value = { Data: new TextEncoder().encode(value), Links: [] }\n  }\n  if (codec.code === dagCbor.code) {\n    const links = options.links || []\n    links.forEach((prop) => {\n      if (value[prop]) {\n        value[prop] = cidifyString(value[prop])\n      }\n    })\n  }\n\n  const block = await Block.encode({ value, codec, hasher })\n  await ipfs.block.put(block.bytes, {\n    cid: block.cid.bytes,\n    version: block.cid.version,\n    format,\n    mhtype,\n    pin: options.pin,\n    timeout: options.timeout\n  })\n\n  const cid = codec.code === dagPb.code\n    ? block.cid.toV0()\n    : block.cid\n  return cid.toString(options.base || defaultBase)\n}\n\nmodule.exports = {\n  read,\n  write\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}