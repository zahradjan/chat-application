{"ast":null,"code":"'use strict';\n\nconst {\n  Key\n} = require('interface-datastore');\n\nconst MFS_ROOT_KEY = new Key('/local/filesroot');\n/**\n * @param {import('../../src/types').Backends} backends\n * @param {import('../../src/types').MigrationProgressCallback} onProgress\n */\n\nasync function storeMfsRootInDatastore(backends) {\n  let onProgress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};\n  onProgress(100, 'Migrating MFS root to repo datastore');\n  await backends.root.open();\n  await backends.datastore.open();\n\n  if (await backends.root.has(MFS_ROOT_KEY)) {\n    const root = await backends.root.get(MFS_ROOT_KEY);\n    await backends.datastore.put(MFS_ROOT_KEY, root);\n    await backends.root.delete(MFS_ROOT_KEY);\n  }\n\n  await backends.datastore.close();\n  await backends.root.close();\n  onProgress(100, 'Stored MFS root in repo datastore');\n}\n/**\n * @param {import('../../src/types').Backends} backends\n * @param {import('../../src/types').MigrationProgressCallback} onProgress\n */\n\n\nasync function storeMfsRootInRoot(backends) {\n  let onProgress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};\n  onProgress(100, 'Migrating MFS root to repo root datastore');\n  await backends.root.open();\n  await backends.datastore.open();\n\n  if (await backends.datastore.has(MFS_ROOT_KEY)) {\n    const root = await backends.datastore.get(MFS_ROOT_KEY);\n    await backends.root.put(MFS_ROOT_KEY, root);\n    await backends.datastore.delete(MFS_ROOT_KEY);\n  }\n\n  await backends.datastore.close();\n  await backends.root.close();\n  onProgress(100, 'Stored MFS root in repo root datastore');\n}\n/** @type {import('../../src/types').Migration} */\n\n\nmodule.exports = {\n  version: 11,\n  description: 'Store mfs root in the datastore',\n  migrate: storeMfsRootInDatastore,\n  revert: storeMfsRootInRoot\n};","map":{"version":3,"names":["Key","require","MFS_ROOT_KEY","storeMfsRootInDatastore","backends","onProgress","root","open","datastore","has","get","put","delete","close","storeMfsRootInRoot","module","exports","version","description","migrate","revert"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-repo-migrations/migrations/migration-11/index.js"],"sourcesContent":["'use strict'\n\nconst { Key } = require('interface-datastore')\n\nconst MFS_ROOT_KEY = new Key('/local/filesroot')\n\n/**\n * @param {import('../../src/types').Backends} backends\n * @param {import('../../src/types').MigrationProgressCallback} onProgress\n */\nasync function storeMfsRootInDatastore (backends, onProgress = () => {}) {\n  onProgress(100, 'Migrating MFS root to repo datastore')\n\n  await backends.root.open()\n  await backends.datastore.open()\n\n  if (await backends.root.has(MFS_ROOT_KEY)) {\n    const root = await backends.root.get(MFS_ROOT_KEY)\n    await backends.datastore.put(MFS_ROOT_KEY, root)\n    await backends.root.delete(MFS_ROOT_KEY)\n  }\n\n  await backends.datastore.close()\n  await backends.root.close()\n\n  onProgress(100, 'Stored MFS root in repo datastore')\n}\n\n/**\n * @param {import('../../src/types').Backends} backends\n * @param {import('../../src/types').MigrationProgressCallback} onProgress\n */\nasync function storeMfsRootInRoot (backends, onProgress = () => {}) {\n  onProgress(100, 'Migrating MFS root to repo root datastore')\n\n  await backends.root.open()\n  await backends.datastore.open()\n\n  if (await backends.datastore.has(MFS_ROOT_KEY)) {\n    const root = await backends.datastore.get(MFS_ROOT_KEY)\n    await backends.root.put(MFS_ROOT_KEY, root)\n    await backends.datastore.delete(MFS_ROOT_KEY)\n  }\n\n  await backends.datastore.close()\n  await backends.root.close()\n\n  onProgress(100, 'Stored MFS root in repo root datastore')\n}\n\n/** @type {import('../../src/types').Migration} */\nmodule.exports = {\n  version: 11,\n  description: 'Store mfs root in the datastore',\n  migrate: storeMfsRootInDatastore,\n  revert: storeMfsRootInRoot\n}\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA;AAAF,IAAUC,OAAO,CAAC,qBAAD,CAAvB;;AAEA,MAAMC,YAAY,GAAG,IAAIF,GAAJ,CAAQ,kBAAR,CAArB;AAEA;AACA;AACA;AACA;;AACA,eAAeG,uBAAf,CAAwCC,QAAxC,EAAyE;EAAA,IAAvBC,UAAuB,uEAAV,MAAM,CAAE,CAAE;EACvEA,UAAU,CAAC,GAAD,EAAM,sCAAN,CAAV;EAEA,MAAMD,QAAQ,CAACE,IAAT,CAAcC,IAAd,EAAN;EACA,MAAMH,QAAQ,CAACI,SAAT,CAAmBD,IAAnB,EAAN;;EAEA,IAAI,MAAMH,QAAQ,CAACE,IAAT,CAAcG,GAAd,CAAkBP,YAAlB,CAAV,EAA2C;IACzC,MAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAT,CAAcI,GAAd,CAAkBR,YAAlB,CAAnB;IACA,MAAME,QAAQ,CAACI,SAAT,CAAmBG,GAAnB,CAAuBT,YAAvB,EAAqCI,IAArC,CAAN;IACA,MAAMF,QAAQ,CAACE,IAAT,CAAcM,MAAd,CAAqBV,YAArB,CAAN;EACD;;EAED,MAAME,QAAQ,CAACI,SAAT,CAAmBK,KAAnB,EAAN;EACA,MAAMT,QAAQ,CAACE,IAAT,CAAcO,KAAd,EAAN;EAEAR,UAAU,CAAC,GAAD,EAAM,mCAAN,CAAV;AACD;AAED;AACA;AACA;AACA;;;AACA,eAAeS,kBAAf,CAAmCV,QAAnC,EAAoE;EAAA,IAAvBC,UAAuB,uEAAV,MAAM,CAAE,CAAE;EAClEA,UAAU,CAAC,GAAD,EAAM,2CAAN,CAAV;EAEA,MAAMD,QAAQ,CAACE,IAAT,CAAcC,IAAd,EAAN;EACA,MAAMH,QAAQ,CAACI,SAAT,CAAmBD,IAAnB,EAAN;;EAEA,IAAI,MAAMH,QAAQ,CAACI,SAAT,CAAmBC,GAAnB,CAAuBP,YAAvB,CAAV,EAAgD;IAC9C,MAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACI,SAAT,CAAmBE,GAAnB,CAAuBR,YAAvB,CAAnB;IACA,MAAME,QAAQ,CAACE,IAAT,CAAcK,GAAd,CAAkBT,YAAlB,EAAgCI,IAAhC,CAAN;IACA,MAAMF,QAAQ,CAACI,SAAT,CAAmBI,MAAnB,CAA0BV,YAA1B,CAAN;EACD;;EAED,MAAME,QAAQ,CAACI,SAAT,CAAmBK,KAAnB,EAAN;EACA,MAAMT,QAAQ,CAACE,IAAT,CAAcO,KAAd,EAAN;EAEAR,UAAU,CAAC,GAAD,EAAM,wCAAN,CAAV;AACD;AAED;;;AACAU,MAAM,CAACC,OAAP,GAAiB;EACfC,OAAO,EAAE,EADM;EAEfC,WAAW,EAAE,iCAFE;EAGfC,OAAO,EAAEhB,uBAHM;EAIfiB,MAAM,EAAEN;AAJO,CAAjB"},"metadata":{},"sourceType":"script"}