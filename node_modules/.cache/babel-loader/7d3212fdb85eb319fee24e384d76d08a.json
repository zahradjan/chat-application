{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst log = debug('dns-over-http-resolver');\nlog.error = debug('dns-over-http-resolver:error');\n\nconst Receptacle = require('receptacle');\n\nconst utils = require('./utils');\n/**\n * DNS over HTTP resolver.\n * Uses a list of servers to resolve DNS records with HTTP requests.\n */\n\n\nclass Resolver {\n  /**\n   * @class\n   * @param {object} [properties]\n   * @param {number} [properties.maxCache = 100] - maximum number of cached dns records.\n   */\n  constructor() {\n    let {\n      maxCache = 100\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this._cache = new Receptacle({\n      max: maxCache\n    });\n    this._servers = ['https://cloudflare-dns.com/dns-query', 'https://dns.google/resolve'];\n  }\n  /**\n   * Get an array of the IP addresses currently configured for DNS resolution.\n   * These addresses are formatted according to RFC 5952. It can include a custom port.\n   *\n   * @returns {Array<string>}\n   */\n\n\n  getServers() {\n    return this._servers;\n  }\n  /**\n   * Get a shuffled array of the IP addresses currently configured for DNS resolution.\n   * These addresses are formatted according to RFC 5952. It can include a custom port.\n   *\n   * @returns {Array<string>}\n   */\n\n\n  _getShuffledServers() {\n    const newServers = [].concat(this._servers);\n\n    for (let i = newServers.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * i);\n      const temp = newServers[i];\n      newServers[i] = newServers[j];\n      newServers[j] = temp;\n    }\n\n    return newServers;\n  }\n  /**\n   * Sets the IP address and port of servers to be used when performing DNS resolution.\n   *\n   * @param {Array<string>} servers - array of RFC 5952 formatted addresses.\n   */\n\n\n  setServers(servers) {\n    this._servers = servers;\n  }\n  /**\n   * Uses the DNS protocol to resolve the given host name into the appropriate DNS record.\n   *\n   * @param {string} hostname - host name to resolve.\n   * @param {string} [rrType = 'A'] - resource record type.\n   * @returns {Promise<*>}\n   */\n\n\n  resolve(hostname) {\n    let rrType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'A';\n\n    switch (rrType) {\n      case 'A':\n        return this.resolve4(hostname);\n\n      case 'AAAA':\n        return this.resolve6(hostname);\n\n      case 'TXT':\n        return this.resolveTxt(hostname);\n\n      default:\n        throw new Error(`${rrType} is not supported`);\n    }\n  }\n  /**\n   * Uses the DNS protocol to resolve the given host name into IPv4 addresses.\n   *\n   * @param {string} hostname - host name to resolve.\n   * @returns {Promise<Array<string>>}\n   */\n\n\n  async resolve4(hostname) {\n    const recordType = 'A';\n\n    const cached = this._cache.get(utils.getCacheKey(hostname, recordType));\n\n    if (cached) {\n      return cached;\n    }\n\n    for (const server of this._getShuffledServers()) {\n      try {\n        const response = await utils.fetch(utils.buildResource({\n          serverResolver: server,\n          hostname,\n          recordType\n        }));\n        const d = await response.json();\n        const data = d.Answer.map(a => a.data);\n        const ttl = Math.min(d.Answer.map(a => a.TTL));\n\n        this._cache.set(utils.getCacheKey(hostname, recordType), data, {\n          ttl\n        });\n\n        return data;\n      } catch (err) {\n        log.error(`${server} could not resolve ${hostname} record ${recordType}`);\n      }\n    }\n\n    throw new Error(`Could not resolve ${hostname} record ${recordType}`);\n  }\n  /**\n   * Uses the DNS protocol to resolve the given host name into IPv6 addresses.\n   *\n   * @param {string} hostname - host name to resolve.\n   * @returns {Promise<Array<string>>}\n   */\n\n\n  async resolve6(hostname) {\n    const recordType = 'AAAA';\n\n    const cached = this._cache.get(utils.getCacheKey(hostname, recordType));\n\n    if (cached) {\n      return cached;\n    }\n\n    for (const server of this._getShuffledServers()) {\n      try {\n        const response = await utils.fetch(utils.buildResource({\n          serverResolver: server,\n          hostname,\n          recordType\n        }));\n        const d = await response.json();\n        const data = d.Answer.map(a => a.data);\n        const ttl = Math.min(d.Answer.map(a => a.TTL));\n\n        this._cache.set(utils.getCacheKey(hostname, recordType), data, {\n          ttl\n        });\n\n        return data;\n      } catch (err) {\n        log.error(`${server} could not resolve ${hostname} record ${recordType}`);\n      }\n    }\n\n    throw new Error(`Could not resolve ${hostname} record ${recordType}`);\n  }\n  /**\n   * Uses the DNS protocol to resolve the given host name into a Text record.\n   *\n   * @param {string} hostname - host name to resolve.\n   * @returns {Promise<Array<Array<string>>>}\n   */\n\n\n  async resolveTxt(hostname) {\n    const recordType = 'TXT';\n\n    const cached = this._cache.get(utils.getCacheKey(hostname, recordType));\n\n    if (cached) {\n      return cached;\n    }\n\n    for (const server of this._getShuffledServers()) {\n      try {\n        const response = await utils.fetch(utils.buildResource({\n          serverResolver: server,\n          hostname,\n          recordType\n        }));\n        const d = await response.json();\n        const data = d.Answer.map(a => [a.data.replace(/['\"]+/g, '')]);\n        const ttl = Math.min(d.Answer.map(a => a.TTL));\n\n        this._cache.set(utils.getCacheKey(hostname, recordType), data, {\n          ttl\n        });\n\n        return data;\n      } catch (err) {\n        log.error(`${server} could not resolve ${hostname} record ${recordType}`);\n      }\n    }\n\n    throw new Error(`Could not resolve ${hostname} record ${recordType}`);\n  }\n\n}\n\nResolver.Resolver = Resolver;\nmodule.exports = Resolver;","map":{"version":3,"names":["debug","require","log","error","Receptacle","utils","Resolver","constructor","maxCache","_cache","max","_servers","getServers","_getShuffledServers","newServers","concat","i","length","j","Math","floor","random","temp","setServers","servers","resolve","hostname","rrType","resolve4","resolve6","resolveTxt","Error","recordType","cached","get","getCacheKey","server","response","fetch","buildResource","serverResolver","d","json","data","Answer","map","a","ttl","min","TTL","set","err","replace","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/dns-over-http-resolver/src/index.js"],"sourcesContent":["'use strict'\nconst debug = require('debug')\nconst log = debug('dns-over-http-resolver')\nlog.error = debug('dns-over-http-resolver:error')\n\nconst Receptacle = require('receptacle')\n\nconst utils = require('./utils')\n\n/**\n * DNS over HTTP resolver.\n * Uses a list of servers to resolve DNS records with HTTP requests.\n */\nclass Resolver {\n  /**\n   * @class\n   * @param {object} [properties]\n   * @param {number} [properties.maxCache = 100] - maximum number of cached dns records.\n   */\n  constructor ({ maxCache = 100 } = {}) {\n    this._cache = new Receptacle({ max: maxCache })\n    this._servers = [\n      'https://cloudflare-dns.com/dns-query',\n      'https://dns.google/resolve'\n    ]\n  }\n\n  /**\n   * Get an array of the IP addresses currently configured for DNS resolution.\n   * These addresses are formatted according to RFC 5952. It can include a custom port.\n   *\n   * @returns {Array<string>}\n   */\n  getServers () {\n    return this._servers\n  }\n\n  /**\n   * Get a shuffled array of the IP addresses currently configured for DNS resolution.\n   * These addresses are formatted according to RFC 5952. It can include a custom port.\n   *\n   * @returns {Array<string>}\n   */\n  _getShuffledServers () {\n    const newServers = [].concat(this._servers)\n\n    for (let i = newServers.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * i)\n      const temp = newServers[i]\n      newServers[i] = newServers[j]\n      newServers[j] = temp\n    }\n\n    return newServers\n  }\n\n  /**\n   * Sets the IP address and port of servers to be used when performing DNS resolution.\n   *\n   * @param {Array<string>} servers - array of RFC 5952 formatted addresses.\n   */\n  setServers (servers) {\n    this._servers = servers\n  }\n\n  /**\n   * Uses the DNS protocol to resolve the given host name into the appropriate DNS record.\n   *\n   * @param {string} hostname - host name to resolve.\n   * @param {string} [rrType = 'A'] - resource record type.\n   * @returns {Promise<*>}\n   */\n  resolve (hostname, rrType = 'A') {\n    switch (rrType) {\n      case 'A':\n        return this.resolve4(hostname)\n      case 'AAAA':\n        return this.resolve6(hostname)\n      case 'TXT':\n        return this.resolveTxt(hostname)\n      default:\n        throw new Error(`${rrType} is not supported`)\n    }\n  }\n\n  /**\n   * Uses the DNS protocol to resolve the given host name into IPv4 addresses.\n   *\n   * @param {string} hostname - host name to resolve.\n   * @returns {Promise<Array<string>>}\n   */\n  async resolve4 (hostname) {\n    const recordType = 'A'\n    const cached = this._cache.get(utils.getCacheKey(hostname, recordType))\n    if (cached) {\n      return cached\n    }\n\n    for (const server of this._getShuffledServers()) {\n      try {\n        const response = await utils.fetch(utils.buildResource({\n          serverResolver: server,\n          hostname,\n          recordType\n        }))\n\n        const d = await response.json()\n        const data = d.Answer.map(a => a.data)\n        const ttl = Math.min(d.Answer.map(a => a.TTL))\n\n        this._cache.set(utils.getCacheKey(hostname, recordType), data, { ttl })\n\n        return data\n      } catch (err) {\n        log.error(`${server} could not resolve ${hostname} record ${recordType}`)\n      }\n    }\n\n    throw new Error(`Could not resolve ${hostname} record ${recordType}`)\n  }\n\n  /**\n   * Uses the DNS protocol to resolve the given host name into IPv6 addresses.\n   *\n   * @param {string} hostname - host name to resolve.\n   * @returns {Promise<Array<string>>}\n   */\n  async resolve6 (hostname) {\n    const recordType = 'AAAA'\n    const cached = this._cache.get(utils.getCacheKey(hostname, recordType))\n    if (cached) {\n      return cached\n    }\n\n    for (const server of this._getShuffledServers()) {\n      try {\n        const response = await utils.fetch(utils.buildResource({\n          serverResolver: server,\n          hostname,\n          recordType\n        }))\n\n        const d = await response.json()\n        const data = d.Answer.map(a => a.data)\n        const ttl = Math.min(d.Answer.map(a => a.TTL))\n\n        this._cache.set(utils.getCacheKey(hostname, recordType), data, { ttl })\n\n        return data\n      } catch (err) {\n        log.error(`${server} could not resolve ${hostname} record ${recordType}`)\n      }\n    }\n\n    throw new Error(`Could not resolve ${hostname} record ${recordType}`)\n  }\n\n  /**\n   * Uses the DNS protocol to resolve the given host name into a Text record.\n   *\n   * @param {string} hostname - host name to resolve.\n   * @returns {Promise<Array<Array<string>>>}\n   */\n  async resolveTxt (hostname) {\n    const recordType = 'TXT'\n    const cached = this._cache.get(utils.getCacheKey(hostname, recordType))\n    if (cached) {\n      return cached\n    }\n\n    for (const server of this._getShuffledServers()) {\n      try {\n        const response = await utils.fetch(utils.buildResource({\n          serverResolver: server,\n          hostname,\n          recordType\n        }))\n\n        const d = await response.json()\n        const data = d.Answer.map(a => [a.data.replace(/['\"]+/g, '')])\n        const ttl = Math.min(d.Answer.map(a => a.TTL))\n\n        this._cache.set(utils.getCacheKey(hostname, recordType), data, { ttl })\n\n        return data\n      } catch (err) {\n        log.error(`${server} could not resolve ${hostname} record ${recordType}`)\n      }\n    }\n\n    throw new Error(`Could not resolve ${hostname} record ${recordType}`)\n  }\n}\n\nResolver.Resolver = Resolver\nmodule.exports = Resolver\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}