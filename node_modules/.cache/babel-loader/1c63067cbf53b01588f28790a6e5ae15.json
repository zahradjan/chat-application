{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst log = Object.assign(debug('libp2p-pubsub:peer-streams'), {\n  error: debug('libp2p-pubsub:peer-streams:err')\n});\n\nconst {\n  EventEmitter\n} = require('events');\n\nconst lp = require('it-length-prefixed');\n\nconst pushable = require('it-pushable');\n\nconst {\n  pipe\n} = require('it-pipe');\n\nconst {\n  source: abortable\n} = require('abortable-iterator');\n\nconst AbortController = require('abort-controller').default;\n/**\n * @typedef {import('../stream-muxer/types').MuxedStream} MuxedStream\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('it-pushable').Pushable<Uint8Array>} PushableStream\n */\n\n/**\n * Thin wrapper around a peer's inbound / outbound pubsub streams\n */\n\n\nclass PeerStreams extends EventEmitter {\n  /**\n   * @param {object} properties - properties of the PeerStreams.\n   * @param {PeerId} properties.id\n   * @param {string} properties.protocol\n   */\n  constructor(_ref) {\n    let {\n      id,\n      protocol\n    } = _ref;\n    super();\n    /**\n     * @type {import('peer-id')}\n     */\n\n    this.id = id;\n    /**\n     * Established protocol\n     *\n     * @type {string}\n     */\n\n    this.protocol = protocol;\n    /**\n     * The raw outbound stream, as retrieved from conn.newStream\n     *\n     * @private\n     * @type {null|MuxedStream}\n     */\n\n    this._rawOutboundStream = null;\n    /**\n     * The raw inbound stream, as retrieved from the callback from libp2p.handle\n     *\n     * @private\n     * @type {null|MuxedStream}\n     */\n\n    this._rawInboundStream = null;\n    /**\n     * An AbortController for controlled shutdown of the inbound stream\n     *\n     * @private\n     * @type {AbortController}\n     */\n\n    this._inboundAbortController = new AbortController();\n    /**\n     * Write stream -- its preferable to use the write method\n     *\n     * @type {null|PushableStream}\n     */\n\n    this.outboundStream = null;\n    /**\n     * Read stream\n     *\n     * @type {null| AsyncIterable<Uint8Array>}\n     */\n\n    this.inboundStream = null;\n  }\n  /**\n   * Do we have a connection to read from?\n   *\n   * @type {boolean}\n   */\n\n\n  get isReadable() {\n    return Boolean(this.inboundStream);\n  }\n  /**\n   * Do we have a connection to write on?\n   *\n   * @type {boolean}\n   */\n\n\n  get isWritable() {\n    return Boolean(this.outboundStream);\n  }\n  /**\n   * Send a message to this peer.\n   * Throws if there is no `stream` to write to available.\n   *\n   * @param {Uint8Array} data\n   * @returns {void}\n   */\n\n\n  write(data) {\n    if (!this.outboundStream) {\n      const id = this.id.toB58String();\n      throw new Error('No writable connection to ' + id);\n    }\n\n    this.outboundStream.push(data);\n  }\n  /**\n   * Attach a raw inbound stream and setup a read stream\n   *\n   * @param {MuxedStream} stream\n   * @returns {AsyncIterable<Uint8Array>}\n   */\n\n\n  attachInboundStream(stream) {\n    // Create and attach a new inbound stream\n    // The inbound stream is:\n    // - abortable, set to only return on abort, rather than throw\n    // - transformed with length-prefix transform\n    this._rawInboundStream = stream;\n    this.inboundStream = abortable(pipe(this._rawInboundStream, lp.decode()), this._inboundAbortController.signal, {\n      returnOnAbort: true\n    });\n    this.emit('stream:inbound');\n    return this.inboundStream;\n  }\n  /**\n   * Attach a raw outbound stream and setup a write stream\n   *\n   * @param {MuxedStream} stream\n   * @returns {Promise<void>}\n   */\n\n\n  async attachOutboundStream(stream) {\n    // If an outbound stream already exists, gently close it\n    const _prevStream = this.outboundStream;\n\n    if (this.outboundStream) {\n      // End the stream without emitting a close event\n      await this.outboundStream.end();\n    }\n\n    this._rawOutboundStream = stream;\n    this.outboundStream = pushable({\n      onEnd: shouldEmit => {\n        // close writable side of the stream\n        this._rawOutboundStream && this._rawOutboundStream.reset && this._rawOutboundStream.reset();\n        this._rawOutboundStream = null;\n        this.outboundStream = null;\n\n        if (shouldEmit) {\n          this.emit('close');\n        }\n      }\n    });\n    pipe(this.outboundStream, lp.encode(), this._rawOutboundStream).catch(\n    /** @param {Error} err */\n    err => {\n      log.error(err);\n    }); // Only emit if the connection is new\n\n    if (!_prevStream) {\n      this.emit('stream:outbound');\n    }\n  }\n  /**\n   * Closes the open connection to peer\n   *\n   * @returns {void}\n   */\n\n\n  close() {\n    // End the outbound stream\n    if (this.outboundStream) {\n      this.outboundStream.end();\n    } // End the inbound stream\n\n\n    if (this.inboundStream) {\n      this._inboundAbortController.abort();\n    }\n\n    this._rawOutboundStream = null;\n    this.outboundStream = null;\n    this._rawInboundStream = null;\n    this.inboundStream = null;\n    this.emit('close');\n  }\n\n}\n\nmodule.exports = PeerStreams;","map":{"version":3,"names":["debug","require","log","Object","assign","error","EventEmitter","lp","pushable","pipe","source","abortable","AbortController","default","PeerStreams","constructor","id","protocol","_rawOutboundStream","_rawInboundStream","_inboundAbortController","outboundStream","inboundStream","isReadable","Boolean","isWritable","write","data","toB58String","Error","push","attachInboundStream","stream","decode","signal","returnOnAbort","emit","attachOutboundStream","_prevStream","end","onEnd","shouldEmit","reset","encode","catch","err","close","abort","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-interfaces/src/pubsub/peer-streams.js"],"sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = Object.assign(debug('libp2p-pubsub:peer-streams'), {\n  error: debug('libp2p-pubsub:peer-streams:err')\n})\nconst { EventEmitter } = require('events')\n\nconst lp = require('it-length-prefixed')\nconst pushable = require('it-pushable')\nconst { pipe } = require('it-pipe')\nconst { source: abortable } = require('abortable-iterator')\nconst AbortController = require('abort-controller').default\n\n/**\n * @typedef {import('../stream-muxer/types').MuxedStream} MuxedStream\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('it-pushable').Pushable<Uint8Array>} PushableStream\n */\n\n/**\n * Thin wrapper around a peer's inbound / outbound pubsub streams\n */\nclass PeerStreams extends EventEmitter {\n  /**\n   * @param {object} properties - properties of the PeerStreams.\n   * @param {PeerId} properties.id\n   * @param {string} properties.protocol\n   */\n  constructor ({ id, protocol }) {\n    super()\n\n    /**\n     * @type {import('peer-id')}\n     */\n    this.id = id\n    /**\n     * Established protocol\n     *\n     * @type {string}\n     */\n    this.protocol = protocol\n    /**\n     * The raw outbound stream, as retrieved from conn.newStream\n     *\n     * @private\n     * @type {null|MuxedStream}\n     */\n    this._rawOutboundStream = null\n    /**\n     * The raw inbound stream, as retrieved from the callback from libp2p.handle\n     *\n     * @private\n     * @type {null|MuxedStream}\n     */\n    this._rawInboundStream = null\n    /**\n     * An AbortController for controlled shutdown of the inbound stream\n     *\n     * @private\n     * @type {AbortController}\n     */\n    this._inboundAbortController = new AbortController()\n    /**\n     * Write stream -- its preferable to use the write method\n     *\n     * @type {null|PushableStream}\n     */\n    this.outboundStream = null\n    /**\n     * Read stream\n     *\n     * @type {null| AsyncIterable<Uint8Array>}\n     */\n    this.inboundStream = null\n  }\n\n  /**\n   * Do we have a connection to read from?\n   *\n   * @type {boolean}\n   */\n  get isReadable () {\n    return Boolean(this.inboundStream)\n  }\n\n  /**\n   * Do we have a connection to write on?\n   *\n   * @type {boolean}\n   */\n  get isWritable () {\n    return Boolean(this.outboundStream)\n  }\n\n  /**\n   * Send a message to this peer.\n   * Throws if there is no `stream` to write to available.\n   *\n   * @param {Uint8Array} data\n   * @returns {void}\n   */\n  write (data) {\n    if (!this.outboundStream) {\n      const id = this.id.toB58String()\n      throw new Error('No writable connection to ' + id)\n    }\n\n    this.outboundStream.push(data)\n  }\n\n  /**\n   * Attach a raw inbound stream and setup a read stream\n   *\n   * @param {MuxedStream} stream\n   * @returns {AsyncIterable<Uint8Array>}\n   */\n  attachInboundStream (stream) {\n    // Create and attach a new inbound stream\n    // The inbound stream is:\n    // - abortable, set to only return on abort, rather than throw\n    // - transformed with length-prefix transform\n    this._rawInboundStream = stream\n    this.inboundStream = abortable(\n      pipe(\n        this._rawInboundStream,\n        lp.decode()\n      ),\n      this._inboundAbortController.signal,\n      { returnOnAbort: true }\n    )\n\n    this.emit('stream:inbound')\n    return this.inboundStream\n  }\n\n  /**\n   * Attach a raw outbound stream and setup a write stream\n   *\n   * @param {MuxedStream} stream\n   * @returns {Promise<void>}\n   */\n  async attachOutboundStream (stream) {\n    // If an outbound stream already exists, gently close it\n    const _prevStream = this.outboundStream\n    if (this.outboundStream) {\n      // End the stream without emitting a close event\n      await this.outboundStream.end()\n    }\n\n    this._rawOutboundStream = stream\n    this.outboundStream = pushable({\n      onEnd: (shouldEmit) => {\n        // close writable side of the stream\n        this._rawOutboundStream && this._rawOutboundStream.reset && this._rawOutboundStream.reset()\n        this._rawOutboundStream = null\n        this.outboundStream = null\n        if (shouldEmit) {\n          this.emit('close')\n        }\n      }\n    })\n\n    pipe(\n      this.outboundStream,\n      lp.encode(),\n      this._rawOutboundStream\n    ).catch(/** @param {Error} err */ err => {\n      log.error(err)\n    })\n\n    // Only emit if the connection is new\n    if (!_prevStream) {\n      this.emit('stream:outbound')\n    }\n  }\n\n  /**\n   * Closes the open connection to peer\n   *\n   * @returns {void}\n   */\n  close () {\n    // End the outbound stream\n    if (this.outboundStream) {\n      this.outboundStream.end()\n    }\n    // End the inbound stream\n    if (this.inboundStream) {\n      this._inboundAbortController.abort()\n    }\n\n    this._rawOutboundStream = null\n    this.outboundStream = null\n    this._rawInboundStream = null\n    this.inboundStream = null\n    this.emit('close')\n  }\n}\n\nmodule.exports = PeerStreams\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}