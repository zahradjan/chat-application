{"ast":null,"code":"var _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar path = require('path');\n\nvar io = require('orbit-db-io'); // Creates a DB manifest file and saves it in IPFS\n\n\nvar createDBManifest = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(ipfs, name, type, accessControllerAddress, options) {\n    var manifest;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            manifest = Object.assign({\n              name: name,\n              type: type,\n              accessController: (path.posix || path).join('/ipfs', accessControllerAddress)\n            }, // meta field is only added to manifest if options.meta is defined\n            options.meta !== undefined ? {\n              meta: options.meta\n            } : {});\n            return _context.abrupt(\"return\", io.write(ipfs, options.format || 'dag-cbor', manifest, options));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function createDBManifest(_x, _x2, _x3, _x4, _x5) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = createDBManifest;","map":{"version":3,"names":["path","require","io","createDBManifest","ipfs","name","type","accessControllerAddress","options","manifest","Object","assign","accessController","posix","join","meta","undefined","write","format","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/orbit-db/src/db-manifest.js"],"sourcesContent":["const path = require('path')\nconst io = require('orbit-db-io')\n\n// Creates a DB manifest file and saves it in IPFS\nconst createDBManifest = async (ipfs, name, type, accessControllerAddress, options) => {\n  const manifest = Object.assign({\n    name: name,\n    type: type,\n    accessController: (path.posix || path).join('/ipfs', accessControllerAddress)\n  },\n  // meta field is only added to manifest if options.meta is defined\n  options.meta !== undefined ? { meta: options.meta } : {}\n  )\n\n  return io.write(ipfs, options.format || 'dag-cbor', manifest, options)\n}\n\nmodule.exports = createDBManifest\n"],"mappings":";;;;AAAA,IAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMC,EAAE,GAAGD,OAAO,CAAC,aAAD,CAAlB,C,CAEA;;;AACA,IAAME,gBAAgB;EAAA,sEAAG,iBAAOC,IAAP,EAAaC,IAAb,EAAmBC,IAAnB,EAAyBC,uBAAzB,EAAkDC,OAAlD;IAAA;IAAA;MAAA;QAAA;UAAA;YACjBC,QADiB,GACNC,MAAM,CAACC,MAAP,CAAc;cAC7BN,IAAI,EAAEA,IADuB;cAE7BC,IAAI,EAAEA,IAFuB;cAG7BM,gBAAgB,EAAE,CAACZ,IAAI,CAACa,KAAL,IAAcb,IAAf,EAAqBc,IAArB,CAA0B,OAA1B,EAAmCP,uBAAnC;YAHW,CAAd,EAKjB;YACAC,OAAO,CAACO,IAAR,KAAiBC,SAAjB,GAA6B;cAAED,IAAI,EAAEP,OAAO,CAACO;YAAhB,CAA7B,GAAsD,EANrC,CADM;YAAA,iCAUhBb,EAAE,CAACe,KAAH,CAASb,IAAT,EAAeI,OAAO,CAACU,MAAR,IAAkB,UAAjC,EAA6CT,QAA7C,EAAuDD,OAAvD,CAVgB;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAH;;EAAA,gBAAhBL,gBAAgB;IAAA;EAAA;AAAA,GAAtB;;AAaAgB,MAAM,CAACC,OAAP,GAAiBjB,gBAAjB"},"metadata":{},"sourceType":"script"}