{"ast":null,"code":"var EventEmitter = require('events').EventEmitter;\n\nvar _require = require('nanoid'),\n    nanoid = _require.nanoid;\n\nvar _require2 = require('./constants'),\n    WORKER_REQUEST_READ_LOCK = _require2.WORKER_REQUEST_READ_LOCK,\n    WORKER_RELEASE_READ_LOCK = _require2.WORKER_RELEASE_READ_LOCK,\n    MASTER_GRANT_READ_LOCK = _require2.MASTER_GRANT_READ_LOCK,\n    WORKER_REQUEST_WRITE_LOCK = _require2.WORKER_REQUEST_WRITE_LOCK,\n    WORKER_RELEASE_WRITE_LOCK = _require2.WORKER_RELEASE_WRITE_LOCK,\n    MASTER_GRANT_WRITE_LOCK = _require2.MASTER_GRANT_WRITE_LOCK;\n\nvar cluster;\n\nvar handleWorkerLockRequest = function handleWorkerLockRequest(emitter, masterEvent, requestType, releaseType, grantType) {\n  return function (worker, requestEvent) {\n    if (requestEvent && requestEvent.type === requestType) {\n      emitter.emit(masterEvent, requestEvent.name, function () {\n        // grant lock to worker\n        worker.send({\n          type: grantType,\n          name: requestEvent.name,\n          identifier: requestEvent.identifier\n        }); // wait for worker to finish\n\n        return new Promise(function (resolve) {\n          var releaseEventListener = function releaseEventListener(releaseEvent) {\n            if (releaseEvent && releaseEvent.type === releaseType && releaseEvent.identifier === requestEvent.identifier) {\n              worker.removeListener('message', releaseEventListener);\n              resolve();\n            }\n          };\n\n          worker.on('message', releaseEventListener);\n        });\n      });\n    }\n  };\n};\n\nvar makeWorkerLockRequest = function makeWorkerLockRequest(name, requestType, grantType, releaseType) {\n  return function () {\n    var id = nanoid();\n    process.send({\n      type: requestType,\n      identifier: id,\n      name: name\n    });\n    return new Promise(function (resolve) {\n      var listener = function listener(event) {\n        if (event && event.type === grantType && event.identifier === id) {\n          process.removeListener('message', listener); // grant lock\n\n          resolve(function () {\n            // release lock\n            process.send({\n              type: releaseType,\n              identifier: id,\n              name: name\n            });\n          });\n        }\n      };\n\n      process.on('message', listener);\n    });\n  };\n};\n\nmodule.exports = function (options) {\n  try {\n    cluster = require('cluster');\n\n    if (!Object.keys(cluster).length) {\n      return;\n    }\n  } catch (_) {\n    return;\n  }\n\n  if (cluster.isMaster || options.singleProcess) {\n    var emitter = new EventEmitter();\n    cluster.on('message', handleWorkerLockRequest(emitter, 'requestReadLock', WORKER_REQUEST_READ_LOCK, WORKER_RELEASE_READ_LOCK, MASTER_GRANT_READ_LOCK));\n    cluster.on('message', handleWorkerLockRequest(emitter, 'requestWriteLock', WORKER_REQUEST_WRITE_LOCK, WORKER_RELEASE_WRITE_LOCK, MASTER_GRANT_WRITE_LOCK));\n    return emitter;\n  }\n\n  return {\n    isWorker: true,\n    readLock: function readLock(name) {\n      return makeWorkerLockRequest(name, WORKER_REQUEST_READ_LOCK, MASTER_GRANT_READ_LOCK, WORKER_RELEASE_READ_LOCK);\n    },\n    writeLock: function writeLock(name) {\n      return makeWorkerLockRequest(name, WORKER_REQUEST_WRITE_LOCK, MASTER_GRANT_WRITE_LOCK, WORKER_RELEASE_WRITE_LOCK);\n    }\n  };\n};","map":{"version":3,"names":["EventEmitter","require","nanoid","WORKER_REQUEST_READ_LOCK","WORKER_RELEASE_READ_LOCK","MASTER_GRANT_READ_LOCK","WORKER_REQUEST_WRITE_LOCK","WORKER_RELEASE_WRITE_LOCK","MASTER_GRANT_WRITE_LOCK","cluster","handleWorkerLockRequest","emitter","masterEvent","requestType","releaseType","grantType","worker","requestEvent","type","emit","name","send","identifier","Promise","resolve","releaseEventListener","releaseEvent","removeListener","on","makeWorkerLockRequest","id","process","listener","event","module","exports","options","Object","keys","length","_","isMaster","singleProcess","isWorker","readLock","writeLock"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/mortice/lib/node.js"],"sourcesContent":["const EventEmitter = require('events').EventEmitter\nconst { nanoid } = require('nanoid')\nconst {\n  WORKER_REQUEST_READ_LOCK,\n  WORKER_RELEASE_READ_LOCK,\n  MASTER_GRANT_READ_LOCK,\n  WORKER_REQUEST_WRITE_LOCK,\n  WORKER_RELEASE_WRITE_LOCK,\n  MASTER_GRANT_WRITE_LOCK\n} = require('./constants')\nlet cluster\n\nconst handleWorkerLockRequest = (emitter, masterEvent, requestType, releaseType, grantType) => {\n  return (worker, requestEvent) => {\n    if (requestEvent && requestEvent.type === requestType) {\n      emitter.emit(masterEvent, requestEvent.name, () => {\n        // grant lock to worker\n        worker.send({\n          type: grantType,\n          name: requestEvent.name,\n          identifier: requestEvent.identifier\n        })\n\n        // wait for worker to finish\n        return new Promise((resolve) => {\n          const releaseEventListener = (releaseEvent) => {\n            if (releaseEvent && releaseEvent.type === releaseType && releaseEvent.identifier === requestEvent.identifier) {\n              worker.removeListener('message', releaseEventListener)\n              resolve()\n            }\n          }\n\n          worker.on('message', releaseEventListener)\n        })\n      })\n    }\n  }\n}\n\nconst makeWorkerLockRequest = (name, requestType, grantType, releaseType) => {\n  return () => {\n    const id = nanoid()\n\n    process.send({\n      type: requestType,\n      identifier: id,\n      name\n    })\n\n    return new Promise((resolve) => {\n      const listener = (event) => {\n        if (event && event.type === grantType && event.identifier === id) {\n          process.removeListener('message', listener)\n\n          // grant lock\n          resolve(() => {\n            // release lock\n            process.send({\n              type: releaseType,\n              identifier: id,\n              name\n            })\n          })\n        }\n      }\n\n      process.on('message', listener)\n    })\n  }\n}\n\nmodule.exports = (options) => {\n  try {\n    cluster = require('cluster')\n\n    if (!Object.keys(cluster).length) {\n      return\n    }\n  } catch (_) {\n    return\n  }\n\n  if (cluster.isMaster || options.singleProcess) {\n    const emitter = new EventEmitter()\n\n    cluster.on('message', handleWorkerLockRequest(emitter, 'requestReadLock', WORKER_REQUEST_READ_LOCK, WORKER_RELEASE_READ_LOCK, MASTER_GRANT_READ_LOCK))\n    cluster.on('message', handleWorkerLockRequest(emitter, 'requestWriteLock', WORKER_REQUEST_WRITE_LOCK, WORKER_RELEASE_WRITE_LOCK, MASTER_GRANT_WRITE_LOCK))\n\n    return emitter\n  }\n\n  return {\n    isWorker: true,\n    readLock: (name) => makeWorkerLockRequest(name, WORKER_REQUEST_READ_LOCK, MASTER_GRANT_READ_LOCK, WORKER_RELEASE_READ_LOCK),\n    writeLock: (name) => makeWorkerLockRequest(name, WORKER_REQUEST_WRITE_LOCK, MASTER_GRANT_WRITE_LOCK, WORKER_RELEASE_WRITE_LOCK)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}