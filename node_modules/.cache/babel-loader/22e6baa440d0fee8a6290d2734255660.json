{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar keysPBM = require('./keys');\n\nrequire('node-forge/lib/asn1');\n\nrequire('node-forge/lib/pbe');\n\nvar forge = require('node-forge/lib/forge');\n\nvar errcode = require('err-code');\n\nvar _require = require('uint8arrays/from-string'),\n    uint8ArrayFromString = _require.fromString;\n\nvar importer = require('./importer');\n\nvar supportedKeys = {\n  rsa: require('./rsa-class'),\n  ed25519: require('./ed25519-class'),\n  secp256k1: require('./secp256k1-class')(keysPBM, require('../random-bytes'))\n};\nvar ErrMissingSecp256K1 = {\n  message: 'secp256k1 support requires libp2p-crypto-secp256k1 package',\n  code: 'ERR_MISSING_PACKAGE'\n};\n\nfunction typeToKey(type) {\n  var key = supportedKeys[type.toLowerCase()];\n\n  if (!key) {\n    var supported = Object.keys(supportedKeys).join(' / ');\n    throw errcode(new Error(\"invalid or unsupported key type \".concat(type, \". Must be \").concat(supported)), 'ERR_UNSUPPORTED_KEY_TYPE');\n  }\n\n  return key;\n} // Generates a keypair of the given type and bitsize\n\n\nvar generateKeyPair = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(type, bits) {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", typeToKey(type).generateKeyPair(bits));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function generateKeyPair(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}(); // Generates a keypair of the given type and bitsize\n// seed is a 32 byte uint8array\n\n\nvar generateKeyPairFromSeed = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(type, seed, bits) {\n    var key;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            // eslint-disable-line require-await\n            key = typeToKey(type);\n\n            if (!(type.toLowerCase() !== 'ed25519')) {\n              _context2.next = 3;\n              break;\n            }\n\n            throw errcode(new Error('Seed key derivation is unimplemented for RSA or secp256k1'), 'ERR_UNSUPPORTED_KEY_DERIVATION_TYPE');\n\n          case 3:\n            return _context2.abrupt(\"return\", key.generateKeyPairFromSeed(seed, bits));\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function generateKeyPairFromSeed(_x3, _x4, _x5) {\n    return _ref2.apply(this, arguments);\n  };\n}(); // Converts a protobuf serialized public key into its\n// representative object\n\n\nvar unmarshalPublicKey = function unmarshalPublicKey(buf) {\n  var decoded = keysPBM.PublicKey.decode(buf);\n  var data = decoded.Data;\n\n  switch (decoded.Type) {\n    case keysPBM.KeyType.RSA:\n      return supportedKeys.rsa.unmarshalRsaPublicKey(data);\n\n    case keysPBM.KeyType.Ed25519:\n      return supportedKeys.ed25519.unmarshalEd25519PublicKey(data);\n\n    case keysPBM.KeyType.Secp256k1:\n      if (supportedKeys.secp256k1) {\n        return supportedKeys.secp256k1.unmarshalSecp256k1PublicKey(data);\n      } else {\n        throw errcode(new Error(ErrMissingSecp256K1.message), ErrMissingSecp256K1.code);\n      }\n\n    default:\n      typeToKey(decoded.Type);\n    // throws because type is not supported\n  }\n}; // Converts a public key object into a protobuf serialized public key\n\n\nvar marshalPublicKey = function marshalPublicKey(key, type) {\n  type = (type || 'rsa').toLowerCase();\n  typeToKey(type); // check type\n\n  return key.bytes;\n}; // Converts a protobuf serialized private key into its\n// representative object\n\n\nvar unmarshalPrivateKey = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(buf) {\n    var decoded, data;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            // eslint-disable-line require-await\n            decoded = keysPBM.PrivateKey.decode(buf);\n            data = decoded.Data;\n            _context3.t0 = decoded.Type;\n            _context3.next = _context3.t0 === keysPBM.KeyType.RSA ? 5 : _context3.t0 === keysPBM.KeyType.Ed25519 ? 6 : _context3.t0 === keysPBM.KeyType.Secp256k1 ? 7 : 12;\n            break;\n\n          case 5:\n            return _context3.abrupt(\"return\", supportedKeys.rsa.unmarshalRsaPrivateKey(data));\n\n          case 6:\n            return _context3.abrupt(\"return\", supportedKeys.ed25519.unmarshalEd25519PrivateKey(data));\n\n          case 7:\n            if (!supportedKeys.secp256k1) {\n              _context3.next = 11;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", supportedKeys.secp256k1.unmarshalSecp256k1PrivateKey(data));\n\n          case 11:\n            throw errcode(new Error(ErrMissingSecp256K1.message), ErrMissingSecp256K1.code);\n\n          case 12:\n            typeToKey(decoded.Type);\n\n          case 13:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function unmarshalPrivateKey(_x6) {\n    return _ref3.apply(this, arguments);\n  };\n}(); // Converts a private key object into a protobuf serialized private key\n\n\nvar marshalPrivateKey = function marshalPrivateKey(key, type) {\n  type = (type || 'rsa').toLowerCase();\n  typeToKey(type); // check type\n\n  return key.bytes;\n};\n/**\n *\n * @param {string} encryptedKey\n * @param {string} password\n */\n\n\nvar importKey = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(encryptedKey, password) {\n    var _key, key, der;\n\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            _context4.next = 3;\n            return importer.import(encryptedKey, password);\n\n          case 3:\n            _key = _context4.sent;\n            return _context4.abrupt(\"return\", unmarshalPrivateKey(_key));\n\n          case 7:\n            _context4.prev = 7;\n            _context4.t0 = _context4[\"catch\"](0);\n\n          case 9:\n            // Only rsa supports pem right now\n            key = forge.pki.decryptRsaPrivateKey(encryptedKey, password);\n\n            if (!(key === null)) {\n              _context4.next = 12;\n              break;\n            }\n\n            throw errcode(new Error('Cannot read the key, most likely the password is wrong or not a RSA key'), 'ERR_CANNOT_DECRYPT_PEM');\n\n          case 12:\n            der = forge.asn1.toDer(forge.pki.privateKeyToAsn1(key));\n            der = uint8ArrayFromString(der.getBytes(), 'ascii');\n            return _context4.abrupt(\"return\", supportedKeys.rsa.unmarshalRsaPrivateKey(der));\n\n          case 15:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[0, 7]]);\n  }));\n\n  return function importKey(_x7, _x8) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nmodule.exports = {\n  supportedKeys: supportedKeys,\n  keysPBM: keysPBM,\n  keyStretcher: require('./key-stretcher'),\n  generateEphemeralKeyPair: require('./ephemeral-keys'),\n  generateKeyPair: generateKeyPair,\n  generateKeyPairFromSeed: generateKeyPairFromSeed,\n  unmarshalPublicKey: unmarshalPublicKey,\n  marshalPublicKey: marshalPublicKey,\n  unmarshalPrivateKey: unmarshalPrivateKey,\n  marshalPrivateKey: marshalPrivateKey,\n  import: importKey\n};","map":{"version":3,"names":["keysPBM","require","forge","errcode","uint8ArrayFromString","fromString","importer","supportedKeys","rsa","ed25519","secp256k1","ErrMissingSecp256K1","message","code","typeToKey","type","key","toLowerCase","supported","Object","keys","join","Error","generateKeyPair","bits","generateKeyPairFromSeed","seed","unmarshalPublicKey","buf","decoded","PublicKey","decode","data","Data","Type","KeyType","RSA","unmarshalRsaPublicKey","Ed25519","unmarshalEd25519PublicKey","Secp256k1","unmarshalSecp256k1PublicKey","marshalPublicKey","bytes","unmarshalPrivateKey","PrivateKey","unmarshalRsaPrivateKey","unmarshalEd25519PrivateKey","unmarshalSecp256k1PrivateKey","marshalPrivateKey","importKey","encryptedKey","password","import","pki","decryptRsaPrivateKey","der","asn1","toDer","privateKeyToAsn1","getBytes","module","exports","keyStretcher","generateEphemeralKeyPair"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-delegated-content-routing/node_modules/libp2p-crypto/src/keys/index.js"],"sourcesContent":["'use strict'\n\nconst keysPBM = require('./keys')\nrequire('node-forge/lib/asn1')\nrequire('node-forge/lib/pbe')\nconst forge = require('node-forge/lib/forge')\nconst errcode = require('err-code')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\n\nconst importer = require('./importer')\n\nconst supportedKeys = {\n  rsa: require('./rsa-class'),\n  ed25519: require('./ed25519-class'),\n  secp256k1: require('./secp256k1-class')(keysPBM, require('../random-bytes'))\n}\n\nconst ErrMissingSecp256K1 = {\n  message: 'secp256k1 support requires libp2p-crypto-secp256k1 package',\n  code: 'ERR_MISSING_PACKAGE'\n}\n\nfunction typeToKey (type) {\n  const key = supportedKeys[type.toLowerCase()]\n  if (!key) {\n    const supported = Object.keys(supportedKeys).join(' / ')\n    throw errcode(new Error(`invalid or unsupported key type ${type}. Must be ${supported}`), 'ERR_UNSUPPORTED_KEY_TYPE')\n  }\n  return key\n}\n\n// Generates a keypair of the given type and bitsize\nconst generateKeyPair = async (type, bits) => { // eslint-disable-line require-await\n  return typeToKey(type).generateKeyPair(bits)\n}\n\n// Generates a keypair of the given type and bitsize\n// seed is a 32 byte uint8array\nconst generateKeyPairFromSeed = async (type, seed, bits) => { // eslint-disable-line require-await\n  const key = typeToKey(type)\n  if (type.toLowerCase() !== 'ed25519') {\n    throw errcode(new Error('Seed key derivation is unimplemented for RSA or secp256k1'), 'ERR_UNSUPPORTED_KEY_DERIVATION_TYPE')\n  }\n  return key.generateKeyPairFromSeed(seed, bits)\n}\n\n// Converts a protobuf serialized public key into its\n// representative object\nconst unmarshalPublicKey = (buf) => {\n  const decoded = keysPBM.PublicKey.decode(buf)\n  const data = decoded.Data\n\n  switch (decoded.Type) {\n    case keysPBM.KeyType.RSA:\n      return supportedKeys.rsa.unmarshalRsaPublicKey(data)\n    case keysPBM.KeyType.Ed25519:\n      return supportedKeys.ed25519.unmarshalEd25519PublicKey(data)\n    case keysPBM.KeyType.Secp256k1:\n      if (supportedKeys.secp256k1) {\n        return supportedKeys.secp256k1.unmarshalSecp256k1PublicKey(data)\n      } else {\n        throw errcode(new Error(ErrMissingSecp256K1.message), ErrMissingSecp256K1.code)\n      }\n    default:\n      typeToKey(decoded.Type) // throws because type is not supported\n  }\n}\n\n// Converts a public key object into a protobuf serialized public key\nconst marshalPublicKey = (key, type) => {\n  type = (type || 'rsa').toLowerCase()\n  typeToKey(type) // check type\n  return key.bytes\n}\n\n// Converts a protobuf serialized private key into its\n// representative object\nconst unmarshalPrivateKey = async (buf) => { // eslint-disable-line require-await\n  const decoded = keysPBM.PrivateKey.decode(buf)\n  const data = decoded.Data\n\n  switch (decoded.Type) {\n    case keysPBM.KeyType.RSA:\n      return supportedKeys.rsa.unmarshalRsaPrivateKey(data)\n    case keysPBM.KeyType.Ed25519:\n      return supportedKeys.ed25519.unmarshalEd25519PrivateKey(data)\n    case keysPBM.KeyType.Secp256k1:\n      if (supportedKeys.secp256k1) {\n        return supportedKeys.secp256k1.unmarshalSecp256k1PrivateKey(data)\n      } else {\n        throw errcode(new Error(ErrMissingSecp256K1.message), ErrMissingSecp256K1.code)\n      }\n    default:\n      typeToKey(decoded.Type) // throws because type is not supported\n  }\n}\n\n// Converts a private key object into a protobuf serialized private key\nconst marshalPrivateKey = (key, type) => {\n  type = (type || 'rsa').toLowerCase()\n  typeToKey(type) // check type\n  return key.bytes\n}\n\n/**\n *\n * @param {string} encryptedKey\n * @param {string} password\n */\nconst importKey = async (encryptedKey, password) => { // eslint-disable-line require-await\n  try {\n    const key = await importer.import(encryptedKey, password)\n    return unmarshalPrivateKey(key)\n  } catch (_) {\n    // Ignore and try the old pem decrypt\n  }\n\n  // Only rsa supports pem right now\n  const key = forge.pki.decryptRsaPrivateKey(encryptedKey, password)\n  if (key === null) {\n    throw errcode(new Error('Cannot read the key, most likely the password is wrong or not a RSA key'), 'ERR_CANNOT_DECRYPT_PEM')\n  }\n  let der = forge.asn1.toDer(forge.pki.privateKeyToAsn1(key))\n  der = uint8ArrayFromString(der.getBytes(), 'ascii')\n  return supportedKeys.rsa.unmarshalRsaPrivateKey(der)\n}\n\nmodule.exports = {\n  supportedKeys,\n  keysPBM,\n  keyStretcher: require('./key-stretcher'),\n  generateEphemeralKeyPair: require('./ephemeral-keys'),\n  generateKeyPair,\n  generateKeyPairFromSeed,\n  unmarshalPublicKey,\n  marshalPublicKey,\n  unmarshalPrivateKey,\n  marshalPrivateKey,\n  import: importKey\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}