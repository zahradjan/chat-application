{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('../../types').Preload} config.preload\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\n\n\nmodule.exports = function (_ref) {\n  var preload = _ref.preload,\n      repo = _ref.repo;\n\n  /**\n   * @type {import('ipfs-core-types/src/block').API[\"get\"]}\n   */\n  function get(_x) {\n    return _get.apply(this, arguments);\n  }\n\n  function _get() {\n    _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(cid) {\n      var options,\n          _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n\n              // eslint-disable-line require-await\n              if (options.preload !== false) {\n                preload(cid);\n              }\n\n              return _context.abrupt(\"return\", repo.blocks.get(cid, options));\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _get.apply(this, arguments);\n  }\n\n  return withTimeoutOption(get);\n};","map":{"version":3,"names":["withTimeoutOption","require","module","exports","preload","repo","get","cid","options","blocks"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/block/get.js"],"sourcesContent":["'use strict'\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @param {Object} config\n * @param {import('../../types').Preload} config.preload\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nmodule.exports = ({ preload, repo }) => {\n  /**\n   * @type {import('ipfs-core-types/src/block').API[\"get\"]}\n   */\n  async function get (cid, options = {}) { // eslint-disable-line require-await\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    return repo.blocks.get(cid, options)\n  }\n\n  return withTimeoutOption(get)\n}\n"],"mappings":"AAAA;;;;;;AAEA,IAAMA,iBAAiB,GAAGC,OAAO,CAAC,yCAAD,CAAjC;AAEA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,gBAAuB;EAAA,IAApBC,OAAoB,QAApBA,OAAoB;EAAA,IAAXC,IAAW,QAAXA,IAAW;;EACtC;AACF;AACA;EAHwC,SAIvBC,GAJuB;IAAA;EAAA;;EAAA;IAAA,kEAItC,iBAAoBC,GAApB;MAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAyBC,OAAzB,2DAAmC,EAAnC;;cAAyC;cACvC,IAAIA,OAAO,CAACJ,OAAR,KAAoB,KAAxB,EAA+B;gBAC7BA,OAAO,CAACG,GAAD,CAAP;cACD;;cAHH,iCAKSF,IAAI,CAACI,MAAL,CAAYH,GAAZ,CAAgBC,GAAhB,EAAqBC,OAArB,CALT;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAJsC;IAAA;EAAA;;EAYtC,OAAOR,iBAAiB,CAACM,GAAD,CAAxB;AACD,CAbD"},"metadata":{},"sourceType":"script"}