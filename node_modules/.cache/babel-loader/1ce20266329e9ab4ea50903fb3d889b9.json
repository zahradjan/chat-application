{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _objectSpread = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _asyncIterator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar _require = require('multiaddr'),\n    Multiaddr = _require.Multiaddr;\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nvar _require2 = require('./response-types'),\n    FinalPeer = _require2.FinalPeer;\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {DHTAPI[\"findPeer\"]}\n   */\n  function findPeer(_x) {\n    return _findPeer.apply(this, arguments);\n  }\n\n  function _findPeer() {\n    _findPeer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(peerId) {\n      var options,\n          res,\n          _iteratorAbruptCompletion,\n          _didIteratorError,\n          _iteratorError,\n          _iterator,\n          _step,\n          data,\n          _data$Responses$,\n          ID,\n          Addrs,\n          _args = arguments;\n\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _context.next = 3;\n              return api.post('dht/findpeer', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: peerId\n                }, options)),\n                headers: options.headers\n              });\n\n            case 3:\n              res = _context.sent;\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 6;\n              _iterator = _asyncIterator(res.ndjson());\n\n            case 8:\n              _context.next = 10;\n              return _iterator.next();\n\n            case 10:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 18;\n                break;\n              }\n\n              data = _step.value;\n\n              if (!(data.Type === FinalPeer && data.Responses)) {\n                _context.next = 15;\n                break;\n              }\n\n              _data$Responses$ = data.Responses[0], ID = _data$Responses$.ID, Addrs = _data$Responses$.Addrs;\n              return _context.abrupt(\"return\", {\n                id: ID,\n                addrs: (Addrs || []).map(function (\n                /** @type {string} **/\n                a) {\n                  return new Multiaddr(a);\n                })\n              });\n\n            case 15:\n              _iteratorAbruptCompletion = false;\n              _context.next = 8;\n              break;\n\n            case 18:\n              _context.next = 24;\n              break;\n\n            case 20:\n              _context.prev = 20;\n              _context.t0 = _context[\"catch\"](6);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n\n            case 24:\n              _context.prev = 24;\n              _context.prev = 25;\n\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 29;\n                break;\n              }\n\n              _context.next = 29;\n              return _iterator.return();\n\n            case 29:\n              _context.prev = 29;\n\n              if (!_didIteratorError) {\n                _context.next = 32;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 32:\n              return _context.finish(29);\n\n            case 33:\n              return _context.finish(24);\n\n            case 34:\n              throw new Error('not found');\n\n            case 35:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[6, 20, 24, 34], [25,, 29, 33]]);\n    }));\n    return _findPeer.apply(this, arguments);\n  }\n\n  return findPeer;\n});","map":{"version":3,"names":["require","Multiaddr","configure","toUrlSearchParams","FinalPeer","module","exports","api","findPeer","peerId","options","post","signal","searchParams","arg","headers","res","ndjson","data","Type","Responses","ID","Addrs","id","addrs","map","a","Error"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-http-client/src/dht/find-peer.js"],"sourcesContent":["'use strict'\n\nconst { Multiaddr } = require('multiaddr')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst { FinalPeer } = require('./response-types')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nmodule.exports = configure(api => {\n  /**\n   * @type {DHTAPI[\"findPeer\"]}\n   */\n  async function findPeer (peerId, options = {}) {\n    const res = await api.post('dht/findpeer', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: peerId,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const data of res.ndjson()) {\n      if (data.Type === FinalPeer && data.Responses) {\n        const { ID, Addrs } = data.Responses[0]\n        return {\n          id: ID,\n          addrs: (Addrs || []).map((/** @type {string} **/ a) => new Multiaddr(a))\n        }\n      }\n    }\n\n    throw new Error('not found')\n  }\n\n  return findPeer\n})\n"],"mappings":"AAAA;;;;;;;;;;AAEA,eAAsBA,OAAO,CAAC,WAAD,CAA7B;AAAA,IAAQC,SAAR,YAAQA,SAAR;;AACA,IAAMC,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,IAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;;AACA,gBAAsBA,OAAO,CAAC,kBAAD,CAA7B;AAAA,IAAQI,SAAR,aAAQA,SAAR;AAEA;AACA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAAC,UAAAK,GAAG,EAAI;EAChC;AACF;AACA;EAHkC,SAIjBC,QAJiB;IAAA;EAAA;;EAAA;IAAA,uEAIhC,iBAAyBC,MAAzB;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;;MAAA;QAAA;UAAA;YAAA;cAAiCC,OAAjC,2DAA2C,EAA3C;cAAA;cAAA,OACoBH,GAAG,CAACI,IAAJ,CAAS,cAAT,EAAyB;gBACzCC,MAAM,EAAEF,OAAO,CAACE,MADyB;gBAEzCC,YAAY,EAAEV,iBAAiB;kBAC7BW,GAAG,EAAEL;gBADwB,GAE1BC,OAF0B,EAFU;gBAMzCK,OAAO,EAAEL,OAAO,CAACK;cANwB,CAAzB,CADpB;;YAAA;cACQC,GADR;cAAA;cAAA;cAAA;cAAA,2BAU2BA,GAAG,CAACC,MAAJ,EAV3B;;YAAA;cAAA;cAAA;;YAAA;cAAA;gBAAA;gBAAA;cAAA;;cAUmBC,IAVnB;;cAAA,MAWQA,IAAI,CAACC,IAAL,KAAcf,SAAd,IAA2Bc,IAAI,CAACE,SAXxC;gBAAA;gBAAA;cAAA;;cAAA,mBAY4BF,IAAI,CAACE,SAAL,CAAe,CAAf,CAZ5B,EAYcC,EAZd,oBAYcA,EAZd,EAYkBC,KAZlB,oBAYkBA,KAZlB;cAAA,iCAaa;gBACLC,EAAE,EAAEF,EADC;gBAELG,KAAK,EAAE,CAACF,KAAK,IAAI,EAAV,EAAcG,GAAd,CAAkB;gBAAC;gBAAuBC,CAAxB;kBAAA,OAA8B,IAAIzB,SAAJ,CAAcyB,CAAd,CAA9B;gBAAA,CAAlB;cAFF,CAbb;;YAAA;cAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;;cAAA;gBAAA;gBAAA;cAAA;;cAAA;cAAA;;YAAA;cAAA;;cAAA;gBAAA;gBAAA;cAAA;;cAAA;;YAAA;cAAA;;YAAA;cAAA;;YAAA;cAAA,MAoBQ,IAAIC,KAAJ,CAAU,WAAV,CApBR;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAJgC;IAAA;EAAA;;EA2BhC,OAAOnB,QAAP;AACD,CA5ByB,CAA1B"},"metadata":{},"sourceType":"script"}