{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar _require2 = require('multiformats/hashes/sha2'),\n    sha256 = _require2.sha256;\n/**\n * Convert a namespace string into a cid.\n *\n * @param {string} namespace\n * @returns {Promise<CID>}\n */\n\n\nmodule.exports.namespaceToCid = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(namespace) {\n    var bytes, hash;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            bytes = new TextEncoder().encode(namespace);\n            _context.next = 3;\n            return sha256.digest(bytes);\n\n          case 3:\n            hash = _context.sent;\n            return _context.abrupt(\"return\", CID.createV0(hash));\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["require","CID","sha256","module","exports","namespaceToCid","namespace","bytes","TextEncoder","encode","digest","hash","createV0"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p/src/circuit/utils.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst { sha256 } = require('multiformats/hashes/sha2')\n\n/**\n * Convert a namespace string into a cid.\n *\n * @param {string} namespace\n * @returns {Promise<CID>}\n */\nmodule.exports.namespaceToCid = async (namespace) => {\n  const bytes = new TextEncoder().encode(namespace)\n  const hash = await sha256.digest(bytes)\n\n  return CID.createV0(hash)\n}\n"],"mappings":"AAAA;;;;;;AAEA,eAAgBA,OAAO,CAAC,kBAAD,CAAvB;AAAA,IAAQC,GAAR,YAAQA,GAAR;;AACA,gBAAmBD,OAAO,CAAC,0BAAD,CAA1B;AAAA,IAAQE,MAAR,aAAQA,MAAR;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,CAAeC,cAAf;EAAA,sEAAgC,iBAAOC,SAAP;IAAA;IAAA;MAAA;QAAA;UAAA;YACxBC,KADwB,GAChB,IAAIC,WAAJ,GAAkBC,MAAlB,CAAyBH,SAAzB,CADgB;YAAA;YAAA,OAEXJ,MAAM,CAACQ,MAAP,CAAcH,KAAd,CAFW;;UAAA;YAExBI,IAFwB;YAAA,iCAIvBV,GAAG,CAACW,QAAJ,CAAaD,IAAb,CAJuB;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAhC;;EAAA;IAAA;EAAA;AAAA"},"metadata":{},"sourceType":"script"}