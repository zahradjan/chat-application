{"ast":null,"code":"/*! noble-ed25519 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport nodeCrypto from 'crypto';\n\nconst _0n = BigInt(0);\n\nconst _1n = BigInt(1);\n\nconst _2n = BigInt(2);\n\nconst _255n = BigInt(255);\n\nconst CURVE_ORDER = _2n ** BigInt(252) + BigInt('27742317777372353535851937790883648493');\nconst CURVE = {\n  a: BigInt(-1),\n  d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n  P: _2n ** _255n - BigInt(19),\n  l: CURVE_ORDER,\n  n: CURVE_ORDER,\n  h: BigInt(8),\n  Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n  Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960')\n};\nexport { CURVE };\n\nconst MAX_256B = _2n ** BigInt(256);\n\nconst SQRT_M1 = BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\nconst SQRT_D = BigInt('6853475219497561581579357271197624642482790079785650197046958215289687604742');\nconst SQRT_AD_MINUS_ONE = BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\nconst INVSQRT_A_MINUS_D = BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\nconst ONE_MINUS_D_SQ = BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\nconst D_MINUS_ONE_SQ = BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\n\nclass ExtendedPoint {\n  constructor(x, y, z, t) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.t = t;\n  }\n\n  static fromAffine(p) {\n    if (!(p instanceof Point)) {\n      throw new TypeError('ExtendedPoint#fromAffine: expected Point');\n    }\n\n    if (p.equals(Point.ZERO)) return ExtendedPoint.ZERO;\n    return new ExtendedPoint(p.x, p.y, _1n, mod(p.x * p.y));\n  }\n\n  static toAffineBatch(points) {\n    const toInv = invertBatch(points.map(p => p.z));\n    return points.map((p, i) => p.toAffine(toInv[i]));\n  }\n\n  static normalizeZ(points) {\n    return this.toAffineBatch(points).map(this.fromAffine);\n  }\n\n  equals(other) {\n    assertExtPoint(other);\n    const {\n      x: X1,\n      y: Y1,\n      z: Z1\n    } = this;\n    const {\n      x: X2,\n      y: Y2,\n      z: Z2\n    } = other;\n    const X1Z2 = mod(X1 * Z2);\n    const X2Z1 = mod(X2 * Z1);\n    const Y1Z2 = mod(Y1 * Z2);\n    const Y2Z1 = mod(Y2 * Z1);\n    return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n  }\n\n  negate() {\n    return new ExtendedPoint(mod(-this.x), this.y, this.z, mod(-this.t));\n  }\n\n  double() {\n    const {\n      x: X1,\n      y: Y1,\n      z: Z1\n    } = this;\n    const {\n      a\n    } = CURVE;\n    const A = mod(X1 ** _2n);\n    const B = mod(Y1 ** _2n);\n    const C = mod(_2n * mod(Z1 ** _2n));\n    const D = mod(a * A);\n    const E = mod(mod((X1 + Y1) ** _2n) - A - B);\n    const G = D + B;\n    const F = G - C;\n    const H = D - B;\n    const X3 = mod(E * F);\n    const Y3 = mod(G * H);\n    const T3 = mod(E * H);\n    const Z3 = mod(F * G);\n    return new ExtendedPoint(X3, Y3, Z3, T3);\n  }\n\n  add(other) {\n    assertExtPoint(other);\n    const {\n      x: X1,\n      y: Y1,\n      z: Z1,\n      t: T1\n    } = this;\n    const {\n      x: X2,\n      y: Y2,\n      z: Z2,\n      t: T2\n    } = other;\n    const A = mod((Y1 - X1) * (Y2 + X2));\n    const B = mod((Y1 + X1) * (Y2 - X2));\n    const F = mod(B - A);\n    if (F === _0n) return this.double();\n    const C = mod(Z1 * _2n * T2);\n    const D = mod(T1 * _2n * Z2);\n    const E = D + C;\n    const G = B + A;\n    const H = D - C;\n    const X3 = mod(E * F);\n    const Y3 = mod(G * H);\n    const T3 = mod(E * H);\n    const Z3 = mod(F * G);\n    return new ExtendedPoint(X3, Y3, Z3, T3);\n  }\n\n  subtract(other) {\n    return this.add(other.negate());\n  }\n\n  precomputeWindow(W) {\n    const windows = 1 + 256 / W;\n    const points = [];\n    let p = this;\n    let base = p;\n\n    for (let window = 0; window < windows; window++) {\n      base = p;\n      points.push(base);\n\n      for (let i = 1; i < 2 ** (W - 1); i++) {\n        base = base.add(p);\n        points.push(base);\n      }\n\n      p = base.double();\n    }\n\n    return points;\n  }\n\n  wNAF(n, affinePoint) {\n    if (!affinePoint && this.equals(ExtendedPoint.BASE)) affinePoint = Point.BASE;\n    const W = affinePoint && affinePoint._WINDOW_SIZE || 1;\n\n    if (256 % W) {\n      throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n    }\n\n    let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n\n    if (!precomputes) {\n      precomputes = this.precomputeWindow(W);\n\n      if (affinePoint && W !== 1) {\n        precomputes = ExtendedPoint.normalizeZ(precomputes);\n        pointPrecomputes.set(affinePoint, precomputes);\n      }\n    }\n\n    let p = ExtendedPoint.ZERO;\n    let f = ExtendedPoint.ZERO;\n    const windows = 1 + 256 / W;\n    const windowSize = 2 ** (W - 1);\n    const mask = BigInt(2 ** W - 1);\n    const maxNumber = 2 ** W;\n    const shiftBy = BigInt(W);\n\n    for (let window = 0; window < windows; window++) {\n      const offset = window * windowSize;\n      let wbits = Number(n & mask);\n      n >>= shiftBy;\n\n      if (wbits > windowSize) {\n        wbits -= maxNumber;\n        n += _1n;\n      }\n\n      if (wbits === 0) {\n        let pr = precomputes[offset];\n        if (window % 2) pr = pr.negate();\n        f = f.add(pr);\n      } else {\n        let cached = precomputes[offset + Math.abs(wbits) - 1];\n        if (wbits < 0) cached = cached.negate();\n        p = p.add(cached);\n      }\n    }\n\n    return ExtendedPoint.normalizeZ([p, f])[0];\n  }\n\n  multiply(scalar, affinePoint) {\n    return this.wNAF(normalizeScalar(scalar, CURVE.l), affinePoint);\n  }\n\n  multiplyUnsafe(scalar) {\n    let n = normalizeScalar(scalar, CURVE.l, false);\n    const G = ExtendedPoint.BASE;\n    const P0 = ExtendedPoint.ZERO;\n    if (n === _0n) return P0;\n    if (this.equals(P0) || n === _1n) return this;\n    if (this.equals(G)) return this.wNAF(n);\n    let p = P0;\n    let d = this;\n\n    while (n > _0n) {\n      if (n & _1n) p = p.add(d);\n      d = d.double();\n      n >>= _1n;\n    }\n\n    return p;\n  }\n\n  isSmallOrder() {\n    return this.multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n  }\n\n  isTorsionFree() {\n    return this.multiplyUnsafe(CURVE.l).equals(ExtendedPoint.ZERO);\n  }\n\n  toAffine() {\n    let invZ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : invert(this.z);\n    const {\n      x,\n      y,\n      z\n    } = this;\n    const ax = mod(x * invZ);\n    const ay = mod(y * invZ);\n    const zz = mod(z * invZ);\n    if (zz !== _1n) throw new Error('invZ was invalid');\n    return new Point(ax, ay);\n  }\n\n  fromRistrettoBytes() {\n    legacyRist();\n  }\n\n  toRistrettoBytes() {\n    legacyRist();\n  }\n\n  fromRistrettoHash() {\n    legacyRist();\n  }\n\n}\n\nExtendedPoint.BASE = new ExtendedPoint(CURVE.Gx, CURVE.Gy, _1n, mod(CURVE.Gx * CURVE.Gy));\nExtendedPoint.ZERO = new ExtendedPoint(_0n, _1n, _1n, _0n);\n\nfunction assertExtPoint(other) {\n  if (!(other instanceof ExtendedPoint)) throw new TypeError('ExtendedPoint expected');\n}\n\nfunction assertRstPoint(other) {\n  if (!(other instanceof RistrettoPoint)) throw new TypeError('RistrettoPoint expected');\n}\n\nfunction legacyRist() {\n  throw new Error('Legacy method: switch to RistrettoPoint');\n}\n\nclass RistrettoPoint {\n  constructor(ep) {\n    this.ep = ep;\n  }\n\n  static calcElligatorRistrettoMap(r0) {\n    const {\n      d\n    } = CURVE;\n    const r = mod(SQRT_M1 * r0 * r0);\n    const Ns = mod((r + _1n) * ONE_MINUS_D_SQ);\n    let c = BigInt(-1);\n    const D = mod((c - d * r) * mod(r + d));\n    let {\n      isValid: Ns_D_is_sq,\n      value: s\n    } = uvRatio(Ns, D);\n    let s_ = mod(s * r0);\n    if (!edIsNegative(s_)) s_ = mod(-s_);\n    if (!Ns_D_is_sq) s = s_;\n    if (!Ns_D_is_sq) c = r;\n    const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D);\n    const s2 = s * s;\n    const W0 = mod((s + s) * D);\n    const W1 = mod(Nt * SQRT_AD_MINUS_ONE);\n    const W2 = mod(_1n - s2);\n    const W3 = mod(_1n + s2);\n    return new ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n  }\n\n  static hashToCurve(hex) {\n    hex = ensureBytes(hex, 64);\n    const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n    const R1 = this.calcElligatorRistrettoMap(r1);\n    const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n    const R2 = this.calcElligatorRistrettoMap(r2);\n    return new RistrettoPoint(R1.add(R2));\n  }\n\n  static fromHex(hex) {\n    hex = ensureBytes(hex, 32);\n    const {\n      a,\n      d\n    } = CURVE;\n    const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n    const s = bytes255ToNumberLE(hex);\n    if (!equalBytes(numberTo32BytesLE(s), hex) || edIsNegative(s)) throw new Error(emsg);\n    const s2 = mod(s * s);\n    const u1 = mod(_1n + a * s2);\n    const u2 = mod(_1n - a * s2);\n    const u1_2 = mod(u1 * u1);\n    const u2_2 = mod(u2 * u2);\n    const v = mod(a * d * u1_2 - u2_2);\n    const {\n      isValid,\n      value: I\n    } = invertSqrt(mod(v * u2_2));\n    const Dx = mod(I * u2);\n    const Dy = mod(I * Dx * v);\n    let x = mod((s + s) * Dx);\n    if (edIsNegative(x)) x = mod(-x);\n    const y = mod(u1 * Dy);\n    const t = mod(x * y);\n    if (!isValid || edIsNegative(t) || y === _0n) throw new Error(emsg);\n    return new RistrettoPoint(new ExtendedPoint(x, y, _1n, t));\n  }\n\n  toRawBytes() {\n    let {\n      x,\n      y,\n      z,\n      t\n    } = this.ep;\n    const u1 = mod(mod(z + y) * mod(z - y));\n    const u2 = mod(x * y);\n    const {\n      value: invsqrt\n    } = invertSqrt(mod(u1 * u2 ** _2n));\n    const D1 = mod(invsqrt * u1);\n    const D2 = mod(invsqrt * u2);\n    const zInv = mod(D1 * D2 * t);\n    let D;\n\n    if (edIsNegative(t * zInv)) {\n      let _x = mod(y * SQRT_M1);\n\n      let _y = mod(x * SQRT_M1);\n\n      x = _x;\n      y = _y;\n      D = mod(D1 * INVSQRT_A_MINUS_D);\n    } else {\n      D = D2;\n    }\n\n    if (edIsNegative(x * zInv)) y = mod(-y);\n    let s = mod((z - y) * D);\n    if (edIsNegative(s)) s = mod(-s);\n    return numberTo32BytesLE(s);\n  }\n\n  toHex() {\n    return bytesToHex(this.toRawBytes());\n  }\n\n  toString() {\n    return this.toHex();\n  }\n\n  equals(other) {\n    assertRstPoint(other);\n    const a = this.ep;\n    const b = other.ep;\n    const one = mod(a.x * b.y) === mod(a.y * b.x);\n    const two = mod(a.y * b.y) === mod(a.x * b.x);\n    return one || two;\n  }\n\n  add(other) {\n    assertRstPoint(other);\n    return new RistrettoPoint(this.ep.add(other.ep));\n  }\n\n  subtract(other) {\n    assertRstPoint(other);\n    return new RistrettoPoint(this.ep.subtract(other.ep));\n  }\n\n  multiply(scalar) {\n    return new RistrettoPoint(this.ep.multiply(scalar));\n  }\n\n  multiplyUnsafe(scalar) {\n    return new RistrettoPoint(this.ep.multiplyUnsafe(scalar));\n  }\n\n}\n\nRistrettoPoint.BASE = new RistrettoPoint(ExtendedPoint.BASE);\nRistrettoPoint.ZERO = new RistrettoPoint(ExtendedPoint.ZERO);\nconst pointPrecomputes = new WeakMap();\n\nclass Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  _setWindowSize(windowSize) {\n    this._WINDOW_SIZE = windowSize;\n    pointPrecomputes.delete(this);\n  }\n\n  static fromHex(hex) {\n    let strict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const {\n      d,\n      P\n    } = CURVE;\n    hex = ensureBytes(hex, 32);\n    const normed = hex.slice();\n    normed[31] = hex[31] & ~0x80;\n    const y = bytesToNumberLE(normed);\n    if (strict && y >= P) throw new Error('Expected 0 < hex < P');\n    if (!strict && y >= MAX_256B) throw new Error('Expected 0 < hex < 2**256');\n    const y2 = mod(y * y);\n    const u = mod(y2 - _1n);\n    const v = mod(d * y2 + _1n);\n    let {\n      isValid,\n      value: x\n    } = uvRatio(u, v);\n    if (!isValid) throw new Error('Point.fromHex: invalid y coordinate');\n    const isXOdd = (x & _1n) === _1n;\n    const isLastByteOdd = (hex[31] & 0x80) !== 0;\n\n    if (isLastByteOdd !== isXOdd) {\n      x = mod(-x);\n    }\n\n    return new Point(x, y);\n  }\n\n  static async fromPrivateKey(privateKey) {\n    return (await getExtendedPublicKey(privateKey)).point;\n  }\n\n  toRawBytes() {\n    const bytes = numberTo32BytesLE(this.y);\n    bytes[31] |= this.x & _1n ? 0x80 : 0;\n    return bytes;\n  }\n\n  toHex() {\n    return bytesToHex(this.toRawBytes());\n  }\n\n  toX25519() {\n    const {\n      y\n    } = this;\n    const u = mod((_1n + y) * invert(_1n - y));\n    return numberTo32BytesLE(u);\n  }\n\n  isTorsionFree() {\n    return ExtendedPoint.fromAffine(this).isTorsionFree();\n  }\n\n  equals(other) {\n    return this.x === other.x && this.y === other.y;\n  }\n\n  negate() {\n    return new Point(mod(-this.x), this.y);\n  }\n\n  add(other) {\n    return ExtendedPoint.fromAffine(this).add(ExtendedPoint.fromAffine(other)).toAffine();\n  }\n\n  subtract(other) {\n    return this.add(other.negate());\n  }\n\n  multiply(scalar) {\n    return ExtendedPoint.fromAffine(this).multiply(scalar, this).toAffine();\n  }\n\n}\n\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _1n);\n\nclass Signature {\n  constructor(r, s) {\n    this.r = r;\n    this.s = s;\n    this.assertValidity();\n  }\n\n  static fromHex(hex) {\n    const bytes = ensureBytes(hex, 64);\n    const r = Point.fromHex(bytes.slice(0, 32), false);\n    const s = bytesToNumberLE(bytes.slice(32, 64));\n    return new Signature(r, s);\n  }\n\n  assertValidity() {\n    const {\n      r,\n      s\n    } = this;\n    if (!(r instanceof Point)) throw new Error('Expected Point instance');\n    normalizeScalar(s, CURVE.l, false);\n    return this;\n  }\n\n  toRawBytes() {\n    const u8 = new Uint8Array(64);\n    u8.set(this.r.toRawBytes());\n    u8.set(numberTo32BytesLE(this.s), 32);\n    return u8;\n  }\n\n  toHex() {\n    return bytesToHex(this.toRawBytes());\n  }\n\n}\n\nexport { ExtendedPoint, RistrettoPoint, Point, Signature };\n\nfunction concatBytes() {\n  for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {\n    arrays[_key] = arguments[_key];\n  }\n\n  if (!arrays.every(a => a instanceof Uint8Array)) throw new Error('Expected Uint8Array list');\n  if (arrays.length === 1) return arrays[0];\n  const length = arrays.reduce((a, arr) => a + arr.length, 0);\n  const result = new Uint8Array(length);\n\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const arr = arrays[i];\n    result.set(arr, pad);\n    pad += arr.length;\n  }\n\n  return result;\n}\n\nconst hexes = Array.from({\n  length: 256\n}, (v, i) => i.toString(16).padStart(2, '0'));\n\nfunction bytesToHex(uint8a) {\n  if (!(uint8a instanceof Uint8Array)) throw new Error('Uint8Array expected');\n  let hex = '';\n\n  for (let i = 0; i < uint8a.length; i++) {\n    hex += hexes[uint8a[i]];\n  }\n\n  return hex;\n}\n\nfunction hexToBytes(hex) {\n  if (typeof hex !== 'string') {\n    throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n  }\n\n  if (hex.length % 2) throw new Error('hexToBytes: received invalid unpadded hex');\n  const array = new Uint8Array(hex.length / 2);\n\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n\n  return array;\n}\n\nfunction numberTo32BytesBE(num) {\n  const length = 32;\n  const hex = num.toString(16).padStart(length * 2, '0');\n  return hexToBytes(hex);\n}\n\nfunction numberTo32BytesLE(num) {\n  return numberTo32BytesBE(num).reverse();\n}\n\nfunction edIsNegative(num) {\n  return (mod(num) & _1n) === _1n;\n}\n\nfunction bytesToNumberLE(uint8a) {\n  if (!(uint8a instanceof Uint8Array)) throw new Error('Expected Uint8Array');\n  return BigInt('0x' + bytesToHex(Uint8Array.from(uint8a).reverse()));\n}\n\nfunction bytes255ToNumberLE(bytes) {\n  return mod(bytesToNumberLE(bytes) & _2n ** _255n - _1n);\n}\n\nfunction mod(a) {\n  let b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CURVE.P;\n  const res = a % b;\n  return res >= _0n ? res : b + res;\n}\n\nfunction invert(number) {\n  let modulo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CURVE.P;\n\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n  }\n\n  let a = mod(number, modulo);\n  let b = modulo;\n  let x = _0n,\n      y = _1n,\n      u = _1n,\n      v = _0n;\n\n  while (a !== _0n) {\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\nfunction invertBatch(nums) {\n  let p = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CURVE.P;\n  const tmp = new Array(nums.length);\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (num === _0n) return acc;\n    tmp[i] = acc;\n    return mod(acc * num, p);\n  }, _1n);\n  const inverted = invert(lastMultiplied, p);\n  nums.reduceRight((acc, num, i) => {\n    if (num === _0n) return acc;\n    tmp[i] = mod(acc * tmp[i], p);\n    return mod(acc * num, p);\n  }, inverted);\n  return tmp;\n}\n\nfunction pow2(x, power) {\n  const {\n    P\n  } = CURVE;\n  let res = x;\n\n  while (power-- > _0n) {\n    res *= res;\n    res %= P;\n  }\n\n  return res;\n}\n\nfunction pow_2_252_3(x) {\n  const {\n    P\n  } = CURVE;\n\n  const _5n = BigInt(5);\n\n  const _10n = BigInt(10);\n\n  const _20n = BigInt(20);\n\n  const _40n = BigInt(40);\n\n  const _80n = BigInt(80);\n\n  const x2 = x * x % P;\n  const b2 = x2 * x % P;\n  const b4 = pow2(b2, _2n) * b2 % P;\n  const b5 = pow2(b4, _1n) * x % P;\n  const b10 = pow2(b5, _5n) * b5 % P;\n  const b20 = pow2(b10, _10n) * b10 % P;\n  const b40 = pow2(b20, _20n) * b20 % P;\n  const b80 = pow2(b40, _40n) * b40 % P;\n  const b160 = pow2(b80, _80n) * b80 % P;\n  const b240 = pow2(b160, _80n) * b80 % P;\n  const b250 = pow2(b240, _10n) * b10 % P;\n  const pow_p_5_8 = pow2(b250, _2n) * x % P;\n  return {\n    pow_p_5_8,\n    b2\n  };\n}\n\nfunction uvRatio(u, v) {\n  const v3 = mod(v * v * v);\n  const v7 = mod(v3 * v3 * v);\n  const pow = pow_2_252_3(u * v7).pow_p_5_8;\n  let x = mod(u * v3 * pow);\n  const vx2 = mod(v * x * x);\n  const root1 = x;\n  const root2 = mod(x * SQRT_M1);\n  const useRoot1 = vx2 === u;\n  const useRoot2 = vx2 === mod(-u);\n  const noRoot = vx2 === mod(-u * SQRT_M1);\n  if (useRoot1) x = root1;\n  if (useRoot2 || noRoot) x = root2;\n  if (edIsNegative(x)) x = mod(-x);\n  return {\n    isValid: useRoot1 || useRoot2,\n    value: x\n  };\n}\n\nfunction invertSqrt(number) {\n  return uvRatio(_1n, number);\n}\n\nasync function sha512ModqLE() {\n  const hash = await utils.sha512(concatBytes(...arguments));\n  const value = bytesToNumberLE(hash);\n  return mod(value, CURVE.l);\n}\n\nfunction equalBytes(b1, b2) {\n  if (b1.length !== b2.length) {\n    return false;\n  }\n\n  for (let i = 0; i < b1.length; i++) {\n    if (b1[i] !== b2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction ensureBytes(hex, expectedLength) {\n  const bytes = hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n  if (typeof expectedLength === 'number' && bytes.length !== expectedLength) throw new Error(`Expected ${expectedLength} bytes`);\n  return bytes;\n}\n\nfunction normalizeScalar(num, max) {\n  let strict = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  if (!max) throw new TypeError('Specify max value');\n  if (typeof num === 'number' && Number.isSafeInteger(num)) num = BigInt(num);\n\n  if (typeof num === 'bigint' && num < max) {\n    if (strict) {\n      if (_0n < num) return num;\n    } else {\n      if (_0n <= num) return num;\n    }\n  }\n\n  throw new TypeError('Expected valid scalar: 0 < scalar < max');\n}\n\nfunction adjustBytes25519(bytes) {\n  bytes[0] &= 248;\n  bytes[31] &= 127;\n  bytes[31] |= 64;\n  return bytes;\n}\n\nfunction decodeScalar25519(n) {\n  return bytesToNumberLE(adjustBytes25519(ensureBytes(n, 32)));\n}\n\nasync function getExtendedPublicKey(key) {\n  key = typeof key === 'bigint' || typeof key === 'number' ? numberTo32BytesBE(normalizeScalar(key, MAX_256B)) : ensureBytes(key);\n  if (key.length !== 32) throw new Error(`Expected 32 bytes`);\n  const hashed = await utils.sha512(key);\n  const head = adjustBytes25519(hashed.slice(0, 32));\n  const prefix = hashed.slice(32, 64);\n  const scalar = mod(bytesToNumberLE(head), CURVE.l);\n  const point = Point.BASE.multiply(scalar);\n  const pointBytes = point.toRawBytes();\n  return {\n    head,\n    prefix,\n    scalar,\n    point,\n    pointBytes\n  };\n}\n\nexport async function getPublicKey(privateKey) {\n  return (await getExtendedPublicKey(privateKey)).pointBytes;\n}\nexport async function sign(message, privateKey) {\n  message = ensureBytes(message);\n  const {\n    prefix,\n    scalar,\n    pointBytes\n  } = await getExtendedPublicKey(privateKey);\n  const r = await sha512ModqLE(prefix, message);\n  const R = Point.BASE.multiply(r);\n  const k = await sha512ModqLE(R.toRawBytes(), pointBytes, message);\n  const s = mod(r + k * scalar, CURVE.l);\n  return new Signature(R, s).toRawBytes();\n}\nexport async function verify(sig, message, publicKey) {\n  message = ensureBytes(message);\n  if (!(publicKey instanceof Point)) publicKey = Point.fromHex(publicKey, false);\n  const {\n    r,\n    s\n  } = sig instanceof Signature ? sig.assertValidity() : Signature.fromHex(sig);\n  const SB = ExtendedPoint.BASE.multiplyUnsafe(s);\n  const k = await sha512ModqLE(r.toRawBytes(), publicKey.toRawBytes(), message);\n  const kA = ExtendedPoint.fromAffine(publicKey).multiplyUnsafe(k);\n  const RkA = ExtendedPoint.fromAffine(r).add(kA);\n  return RkA.subtract(SB).multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n}\nexport async function getSharedSecret(privateKey, publicKey) {\n  const {\n    head\n  } = await getExtendedPublicKey(privateKey);\n  const u = Point.fromHex(publicKey).toX25519();\n  return curve25519.scalarMult(head, u);\n}\n\nPoint.BASE._setWindowSize(8);\n\nfunction cswap(swap, x_2, x_3) {\n  const dummy = mod(swap * (x_2 - x_3));\n  x_2 = mod(x_2 - dummy);\n  x_3 = mod(x_3 + dummy);\n  return [x_2, x_3];\n}\n\nfunction montgomeryLadder(pointU, scalar) {\n  const {\n    P\n  } = CURVE;\n  const u = normalizeScalar(pointU, P);\n  const k = normalizeScalar(scalar, P);\n  const a24 = BigInt(121665);\n  const x_1 = u;\n  let x_2 = _1n;\n  let z_2 = _0n;\n  let x_3 = u;\n  let z_3 = _1n;\n  let swap = _0n;\n  let sw;\n\n  for (let t = BigInt(255 - 1); t >= _0n; t--) {\n    const k_t = k >> t & _1n;\n    swap ^= k_t;\n    sw = cswap(swap, x_2, x_3);\n    x_2 = sw[0];\n    x_3 = sw[1];\n    sw = cswap(swap, z_2, z_3);\n    z_2 = sw[0];\n    z_3 = sw[1];\n    swap = k_t;\n    const A = x_2 + z_2;\n    const AA = mod(A * A);\n    const B = x_2 - z_2;\n    const BB = mod(B * B);\n    const E = AA - BB;\n    const C = x_3 + z_3;\n    const D = x_3 - z_3;\n    const DA = mod(D * A);\n    const CB = mod(C * B);\n    x_3 = mod((DA + CB) ** _2n);\n    z_3 = mod(x_1 * (DA - CB) ** _2n);\n    x_2 = mod(AA * BB);\n    z_2 = mod(E * (AA + mod(a24 * E)));\n  }\n\n  sw = cswap(swap, x_2, x_3);\n  x_2 = sw[0];\n  x_3 = sw[1];\n  sw = cswap(swap, z_2, z_3);\n  z_2 = sw[0];\n  z_3 = sw[1];\n  const {\n    pow_p_5_8,\n    b2\n  } = pow_2_252_3(z_2);\n  const xp2 = mod(pow2(pow_p_5_8, BigInt(3)) * b2);\n  return mod(x_2 * xp2);\n}\n\nfunction encodeUCoordinate(u) {\n  return numberTo32BytesLE(mod(u, CURVE.P));\n}\n\nfunction decodeUCoordinate(uEnc) {\n  const u = ensureBytes(uEnc, 32);\n  u[31] &= 127;\n  return bytesToNumberLE(u);\n}\n\nexport const curve25519 = {\n  BASE_POINT_U: '0900000000000000000000000000000000000000000000000000000000000000',\n\n  scalarMult(privateKey, publicKey) {\n    const u = decodeUCoordinate(publicKey);\n    const p = decodeScalar25519(privateKey);\n    const pu = montgomeryLadder(u, p);\n    if (pu === _0n) throw new Error('Invalid private or public key received');\n    return encodeUCoordinate(pu);\n  },\n\n  scalarMultBase(privateKey) {\n    return curve25519.scalarMult(privateKey, curve25519.BASE_POINT_U);\n  }\n\n};\nconst crypto = {\n  node: nodeCrypto,\n  web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined\n};\nexport const utils = {\n  TORSION_SUBGROUP: ['0100000000000000000000000000000000000000000000000000000000000000', 'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a', '0000000000000000000000000000000000000000000000000000000000000080', '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05', 'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f', '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85', '0000000000000000000000000000000000000000000000000000000000000000', 'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa'],\n  bytesToHex,\n  getExtendedPublicKey,\n  mod,\n  invert,\n  hashToPrivateScalar: hash => {\n    hash = ensureBytes(hash);\n    if (hash.length < 40 || hash.length > 1024) throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n    const num = mod(bytesToNumberLE(hash), CURVE.l);\n    if (num === _0n || num === _1n) throw new Error('Invalid private key');\n    return num;\n  },\n  randomBytes: function () {\n    let bytesLength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 32;\n\n    if (crypto.web) {\n      return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n    } else if (crypto.node) {\n      const {\n        randomBytes\n      } = crypto.node;\n      return new Uint8Array(randomBytes(bytesLength).buffer);\n    } else {\n      throw new Error(\"The environment doesn't have randomBytes function\");\n    }\n  },\n  randomPrivateKey: () => {\n    return utils.randomBytes(32);\n  },\n  sha512: async message => {\n    if (crypto.web) {\n      const buffer = await crypto.web.subtle.digest('SHA-512', message.buffer);\n      return new Uint8Array(buffer);\n    } else if (crypto.node) {\n      return Uint8Array.from(crypto.node.createHash('sha512').update(message).digest());\n    } else {\n      throw new Error(\"The environment doesn't have sha512 function\");\n    }\n  },\n\n  precompute() {\n    let windowSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;\n    let point = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Point.BASE;\n    const cached = point.equals(Point.BASE) ? point : new Point(point.x, point.y);\n\n    cached._setWindowSize(windowSize);\n\n    cached.multiply(_2n);\n    return cached;\n  }\n\n};","map":{"version":3,"names":["nodeCrypto","_0n","BigInt","_1n","_2n","_255n","CURVE_ORDER","CURVE","a","d","P","l","n","h","Gx","Gy","MAX_256B","SQRT_M1","SQRT_D","SQRT_AD_MINUS_ONE","INVSQRT_A_MINUS_D","ONE_MINUS_D_SQ","D_MINUS_ONE_SQ","ExtendedPoint","constructor","x","y","z","t","fromAffine","p","Point","TypeError","equals","ZERO","mod","toAffineBatch","points","toInv","invertBatch","map","i","toAffine","normalizeZ","other","assertExtPoint","X1","Y1","Z1","X2","Y2","Z2","X1Z2","X2Z1","Y1Z2","Y2Z1","negate","double","A","B","C","D","E","G","F","H","X3","Y3","T3","Z3","add","T1","T2","subtract","precomputeWindow","W","windows","base","window","push","wNAF","affinePoint","BASE","_WINDOW_SIZE","Error","precomputes","pointPrecomputes","get","set","f","windowSize","mask","maxNumber","shiftBy","offset","wbits","Number","pr","cached","Math","abs","multiply","scalar","normalizeScalar","multiplyUnsafe","P0","isSmallOrder","isTorsionFree","invZ","invert","ax","ay","zz","fromRistrettoBytes","legacyRist","toRistrettoBytes","fromRistrettoHash","assertRstPoint","RistrettoPoint","ep","calcElligatorRistrettoMap","r0","r","Ns","c","isValid","Ns_D_is_sq","value","s","uvRatio","s_","edIsNegative","Nt","s2","W0","W1","W2","W3","hashToCurve","hex","ensureBytes","r1","bytes255ToNumberLE","slice","R1","r2","R2","fromHex","emsg","equalBytes","numberTo32BytesLE","u1","u2","u1_2","u2_2","v","I","invertSqrt","Dx","Dy","toRawBytes","invsqrt","D1","D2","zInv","_x","_y","toHex","bytesToHex","toString","b","one","two","WeakMap","_setWindowSize","delete","strict","normed","bytesToNumberLE","y2","u","isXOdd","isLastByteOdd","fromPrivateKey","privateKey","getExtendedPublicKey","point","bytes","toX25519","Signature","assertValidity","u8","Uint8Array","concatBytes","arrays","every","length","reduce","arr","result","pad","hexes","Array","from","padStart","uint8a","hexToBytes","array","j","hexByte","byte","parseInt","isNaN","numberTo32BytesBE","num","reverse","res","number","modulo","q","m","gcd","nums","tmp","lastMultiplied","acc","inverted","reduceRight","pow2","power","pow_2_252_3","_5n","_10n","_20n","_40n","_80n","x2","b2","b4","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","v3","v7","pow","vx2","root1","root2","useRoot1","useRoot2","noRoot","sha512ModqLE","hash","utils","sha512","b1","expectedLength","max","isSafeInteger","adjustBytes25519","decodeScalar25519","key","hashed","head","prefix","pointBytes","getPublicKey","sign","message","R","k","verify","sig","publicKey","SB","kA","RkA","getSharedSecret","curve25519","scalarMult","cswap","swap","x_2","x_3","dummy","montgomeryLadder","pointU","a24","x_1","z_2","z_3","sw","k_t","AA","BB","DA","CB","xp2","encodeUCoordinate","decodeUCoordinate","uEnc","BASE_POINT_U","pu","scalarMultBase","crypto","node","web","self","undefined","TORSION_SUBGROUP","hashToPrivateScalar","randomBytes","bytesLength","getRandomValues","buffer","randomPrivateKey","subtle","digest","createHash","update","precompute"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/@noble/ed25519/lib/esm/index.js"],"sourcesContent":["/*! noble-ed25519 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _255n = BigInt(255);\nconst CURVE_ORDER = _2n ** BigInt(252) + BigInt('27742317777372353535851937790883648493');\nconst CURVE = {\n    a: BigInt(-1),\n    d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n    P: _2n ** _255n - BigInt(19),\n    l: CURVE_ORDER,\n    n: CURVE_ORDER,\n    h: BigInt(8),\n    Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n    Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n};\nexport { CURVE };\nconst MAX_256B = _2n ** BigInt(256);\nconst SQRT_M1 = BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\nconst SQRT_D = BigInt('6853475219497561581579357271197624642482790079785650197046958215289687604742');\nconst SQRT_AD_MINUS_ONE = BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\nconst INVSQRT_A_MINUS_D = BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\nconst ONE_MINUS_D_SQ = BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\nconst D_MINUS_ONE_SQ = BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\nclass ExtendedPoint {\n    constructor(x, y, z, t) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.t = t;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('ExtendedPoint#fromAffine: expected Point');\n        }\n        if (p.equals(Point.ZERO))\n            return ExtendedPoint.ZERO;\n        return new ExtendedPoint(p.x, p.y, _1n, mod(p.x * p.y));\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return this.toAffineBatch(points).map(this.fromAffine);\n    }\n    equals(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const X1Z2 = mod(X1 * Z2);\n        const X2Z1 = mod(X2 * Z1);\n        const Y1Z2 = mod(Y1 * Z2);\n        const Y2Z1 = mod(Y2 * Z1);\n        return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n    negate() {\n        return new ExtendedPoint(mod(-this.x), this.y, this.z, mod(-this.t));\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { a } = CURVE;\n        const A = mod(X1 ** _2n);\n        const B = mod(Y1 ** _2n);\n        const C = mod(_2n * mod(Z1 ** _2n));\n        const D = mod(a * A);\n        const E = mod(mod((X1 + Y1) ** _2n) - A - B);\n        const G = D + B;\n        const F = G - C;\n        const H = D - B;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    add(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1, t: T1 } = this;\n        const { x: X2, y: Y2, z: Z2, t: T2 } = other;\n        const A = mod((Y1 - X1) * (Y2 + X2));\n        const B = mod((Y1 + X1) * (Y2 - X2));\n        const F = mod(B - A);\n        if (F === _0n)\n            return this.double();\n        const C = mod(Z1 * _2n * T2);\n        const D = mod(T1 * _2n * Z2);\n        const E = D + C;\n        const G = B + A;\n        const H = D - C;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    precomputeWindow(W) {\n        const windows = 1 + 256 / W;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(ExtendedPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = ExtendedPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = ExtendedPoint.ZERO;\n        let f = ExtendedPoint.ZERO;\n        const windows = 1 + 256 / W;\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            if (wbits === 0) {\n                let pr = precomputes[offset];\n                if (window % 2)\n                    pr = pr.negate();\n                f = f.add(pr);\n            }\n            else {\n                let cached = precomputes[offset + Math.abs(wbits) - 1];\n                if (wbits < 0)\n                    cached = cached.negate();\n                p = p.add(cached);\n            }\n        }\n        return ExtendedPoint.normalizeZ([p, f])[0];\n    }\n    multiply(scalar, affinePoint) {\n        return this.wNAF(normalizeScalar(scalar, CURVE.l), affinePoint);\n    }\n    multiplyUnsafe(scalar) {\n        let n = normalizeScalar(scalar, CURVE.l, false);\n        const G = ExtendedPoint.BASE;\n        const P0 = ExtendedPoint.ZERO;\n        if (n === _0n)\n            return P0;\n        if (this.equals(P0) || n === _1n)\n            return this;\n        if (this.equals(G))\n            return this.wNAF(n);\n        let p = P0;\n        let d = this;\n        while (n > _0n) {\n            if (n & _1n)\n                p = p.add(d);\n            d = d.double();\n            n >>= _1n;\n        }\n        return p;\n    }\n    isSmallOrder() {\n        return this.multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n    }\n    isTorsionFree() {\n        return this.multiplyUnsafe(CURVE.l).equals(ExtendedPoint.ZERO);\n    }\n    toAffine(invZ = invert(this.z)) {\n        const { x, y, z } = this;\n        const ax = mod(x * invZ);\n        const ay = mod(y * invZ);\n        const zz = mod(z * invZ);\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n    fromRistrettoBytes() {\n        legacyRist();\n    }\n    toRistrettoBytes() {\n        legacyRist();\n    }\n    fromRistrettoHash() {\n        legacyRist();\n    }\n}\nExtendedPoint.BASE = new ExtendedPoint(CURVE.Gx, CURVE.Gy, _1n, mod(CURVE.Gx * CURVE.Gy));\nExtendedPoint.ZERO = new ExtendedPoint(_0n, _1n, _1n, _0n);\nfunction assertExtPoint(other) {\n    if (!(other instanceof ExtendedPoint))\n        throw new TypeError('ExtendedPoint expected');\n}\nfunction assertRstPoint(other) {\n    if (!(other instanceof RistrettoPoint))\n        throw new TypeError('RistrettoPoint expected');\n}\nfunction legacyRist() {\n    throw new Error('Legacy method: switch to RistrettoPoint');\n}\nclass RistrettoPoint {\n    constructor(ep) {\n        this.ep = ep;\n    }\n    static calcElligatorRistrettoMap(r0) {\n        const { d } = CURVE;\n        const r = mod(SQRT_M1 * r0 * r0);\n        const Ns = mod((r + _1n) * ONE_MINUS_D_SQ);\n        let c = BigInt(-1);\n        const D = mod((c - d * r) * mod(r + d));\n        let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D);\n        let s_ = mod(s * r0);\n        if (!edIsNegative(s_))\n            s_ = mod(-s_);\n        if (!Ns_D_is_sq)\n            s = s_;\n        if (!Ns_D_is_sq)\n            c = r;\n        const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D);\n        const s2 = s * s;\n        const W0 = mod((s + s) * D);\n        const W1 = mod(Nt * SQRT_AD_MINUS_ONE);\n        const W2 = mod(_1n - s2);\n        const W3 = mod(_1n + s2);\n        return new ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n    }\n    static hashToCurve(hex) {\n        hex = ensureBytes(hex, 64);\n        const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n        const R1 = this.calcElligatorRistrettoMap(r1);\n        const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n        const R2 = this.calcElligatorRistrettoMap(r2);\n        return new RistrettoPoint(R1.add(R2));\n    }\n    static fromHex(hex) {\n        hex = ensureBytes(hex, 32);\n        const { a, d } = CURVE;\n        const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n        const s = bytes255ToNumberLE(hex);\n        if (!equalBytes(numberTo32BytesLE(s), hex) || edIsNegative(s))\n            throw new Error(emsg);\n        const s2 = mod(s * s);\n        const u1 = mod(_1n + a * s2);\n        const u2 = mod(_1n - a * s2);\n        const u1_2 = mod(u1 * u1);\n        const u2_2 = mod(u2 * u2);\n        const v = mod(a * d * u1_2 - u2_2);\n        const { isValid, value: I } = invertSqrt(mod(v * u2_2));\n        const Dx = mod(I * u2);\n        const Dy = mod(I * Dx * v);\n        let x = mod((s + s) * Dx);\n        if (edIsNegative(x))\n            x = mod(-x);\n        const y = mod(u1 * Dy);\n        const t = mod(x * y);\n        if (!isValid || edIsNegative(t) || y === _0n)\n            throw new Error(emsg);\n        return new RistrettoPoint(new ExtendedPoint(x, y, _1n, t));\n    }\n    toRawBytes() {\n        let { x, y, z, t } = this.ep;\n        const u1 = mod(mod(z + y) * mod(z - y));\n        const u2 = mod(x * y);\n        const { value: invsqrt } = invertSqrt(mod(u1 * u2 ** _2n));\n        const D1 = mod(invsqrt * u1);\n        const D2 = mod(invsqrt * u2);\n        const zInv = mod(D1 * D2 * t);\n        let D;\n        if (edIsNegative(t * zInv)) {\n            let _x = mod(y * SQRT_M1);\n            let _y = mod(x * SQRT_M1);\n            x = _x;\n            y = _y;\n            D = mod(D1 * INVSQRT_A_MINUS_D);\n        }\n        else {\n            D = D2;\n        }\n        if (edIsNegative(x * zInv))\n            y = mod(-y);\n        let s = mod((z - y) * D);\n        if (edIsNegative(s))\n            s = mod(-s);\n        return numberTo32BytesLE(s);\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toString() {\n        return this.toHex();\n    }\n    equals(other) {\n        assertRstPoint(other);\n        const a = this.ep;\n        const b = other.ep;\n        const one = mod(a.x * b.y) === mod(a.y * b.x);\n        const two = mod(a.y * b.y) === mod(a.x * b.x);\n        return one || two;\n    }\n    add(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.add(other.ep));\n    }\n    subtract(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.subtract(other.ep));\n    }\n    multiply(scalar) {\n        return new RistrettoPoint(this.ep.multiply(scalar));\n    }\n    multiplyUnsafe(scalar) {\n        return new RistrettoPoint(this.ep.multiplyUnsafe(scalar));\n    }\n}\nRistrettoPoint.BASE = new RistrettoPoint(ExtendedPoint.BASE);\nRistrettoPoint.ZERO = new RistrettoPoint(ExtendedPoint.ZERO);\nconst pointPrecomputes = new WeakMap();\nclass Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    static fromHex(hex, strict = true) {\n        const { d, P } = CURVE;\n        hex = ensureBytes(hex, 32);\n        const normed = hex.slice();\n        normed[31] = hex[31] & ~0x80;\n        const y = bytesToNumberLE(normed);\n        if (strict && y >= P)\n            throw new Error('Expected 0 < hex < P');\n        if (!strict && y >= MAX_256B)\n            throw new Error('Expected 0 < hex < 2**256');\n        const y2 = mod(y * y);\n        const u = mod(y2 - _1n);\n        const v = mod(d * y2 + _1n);\n        let { isValid, value: x } = uvRatio(u, v);\n        if (!isValid)\n            throw new Error('Point.fromHex: invalid y coordinate');\n        const isXOdd = (x & _1n) === _1n;\n        const isLastByteOdd = (hex[31] & 0x80) !== 0;\n        if (isLastByteOdd !== isXOdd) {\n            x = mod(-x);\n        }\n        return new Point(x, y);\n    }\n    static async fromPrivateKey(privateKey) {\n        return (await getExtendedPublicKey(privateKey)).point;\n    }\n    toRawBytes() {\n        const bytes = numberTo32BytesLE(this.y);\n        bytes[31] |= this.x & _1n ? 0x80 : 0;\n        return bytes;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toX25519() {\n        const { y } = this;\n        const u = mod((_1n + y) * invert(_1n - y));\n        return numberTo32BytesLE(u);\n    }\n    isTorsionFree() {\n        return ExtendedPoint.fromAffine(this).isTorsionFree();\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(mod(-this.x), this.y);\n    }\n    add(other) {\n        return ExtendedPoint.fromAffine(this).add(ExtendedPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return ExtendedPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _1n);\nclass Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex, 64);\n        const r = Point.fromHex(bytes.slice(0, 32), false);\n        const s = bytesToNumberLE(bytes.slice(32, 64));\n        return new Signature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!(r instanceof Point))\n            throw new Error('Expected Point instance');\n        normalizeScalar(s, CURVE.l, false);\n        return this;\n    }\n    toRawBytes() {\n        const u8 = new Uint8Array(64);\n        u8.set(this.r.toRawBytes());\n        u8.set(numberTo32BytesLE(this.s), 32);\n        return u8;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n}\nexport { ExtendedPoint, RistrettoPoint, Point, Signature };\nfunction concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array list');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction numberTo32BytesBE(num) {\n    const length = 32;\n    const hex = num.toString(16).padStart(length * 2, '0');\n    return hexToBytes(hex);\n}\nfunction numberTo32BytesLE(num) {\n    return numberTo32BytesBE(num).reverse();\n}\nfunction edIsNegative(num) {\n    return (mod(num) & _1n) === _1n;\n}\nfunction bytesToNumberLE(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    return BigInt('0x' + bytesToHex(Uint8Array.from(uint8a).reverse()));\n}\nfunction bytes255ToNumberLE(bytes) {\n    return mod(bytesToNumberLE(bytes) & (_2n ** _255n - _1n));\n}\nfunction mod(a, b = CURVE.P) {\n    const res = a % b;\n    return res >= _0n ? res : b + res;\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const tmp = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = mod(acc * tmp[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return tmp;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction pow_2_252_3(x) {\n    const { P } = CURVE;\n    const _5n = BigInt(5);\n    const _10n = BigInt(10);\n    const _20n = BigInt(20);\n    const _40n = BigInt(40);\n    const _80n = BigInt(80);\n    const x2 = (x * x) % P;\n    const b2 = (x2 * x) % P;\n    const b4 = (pow2(b2, _2n) * b2) % P;\n    const b5 = (pow2(b4, _1n) * x) % P;\n    const b10 = (pow2(b5, _5n) * b5) % P;\n    const b20 = (pow2(b10, _10n) * b10) % P;\n    const b40 = (pow2(b20, _20n) * b20) % P;\n    const b80 = (pow2(b40, _40n) * b40) % P;\n    const b160 = (pow2(b80, _80n) * b80) % P;\n    const b240 = (pow2(b160, _80n) * b80) % P;\n    const b250 = (pow2(b240, _10n) * b10) % P;\n    const pow_p_5_8 = (pow2(b250, _2n) * x) % P;\n    return { pow_p_5_8, b2 };\n}\nfunction uvRatio(u, v) {\n    const v3 = mod(v * v * v);\n    const v7 = mod(v3 * v3 * v);\n    const pow = pow_2_252_3(u * v7).pow_p_5_8;\n    let x = mod(u * v3 * pow);\n    const vx2 = mod(v * x * x);\n    const root1 = x;\n    const root2 = mod(x * SQRT_M1);\n    const useRoot1 = vx2 === u;\n    const useRoot2 = vx2 === mod(-u);\n    const noRoot = vx2 === mod(-u * SQRT_M1);\n    if (useRoot1)\n        x = root1;\n    if (useRoot2 || noRoot)\n        x = root2;\n    if (edIsNegative(x))\n        x = mod(-x);\n    return { isValid: useRoot1 || useRoot2, value: x };\n}\nfunction invertSqrt(number) {\n    return uvRatio(_1n, number);\n}\nasync function sha512ModqLE(...args) {\n    const hash = await utils.sha512(concatBytes(...args));\n    const value = bytesToNumberLE(hash);\n    return mod(value, CURVE.l);\n}\nfunction equalBytes(b1, b2) {\n    if (b1.length !== b2.length) {\n        return false;\n    }\n    for (let i = 0; i < b1.length; i++) {\n        if (b1[i] !== b2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction ensureBytes(hex, expectedLength) {\n    const bytes = hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n    if (typeof expectedLength === 'number' && bytes.length !== expectedLength)\n        throw new Error(`Expected ${expectedLength} bytes`);\n    return bytes;\n}\nfunction normalizeScalar(num, max, strict = true) {\n    if (!max)\n        throw new TypeError('Specify max value');\n    if (typeof num === 'number' && Number.isSafeInteger(num))\n        num = BigInt(num);\n    if (typeof num === 'bigint' && num < max) {\n        if (strict) {\n            if (_0n < num)\n                return num;\n        }\n        else {\n            if (_0n <= num)\n                return num;\n        }\n    }\n    throw new TypeError('Expected valid scalar: 0 < scalar < max');\n}\nfunction adjustBytes25519(bytes) {\n    bytes[0] &= 248;\n    bytes[31] &= 127;\n    bytes[31] |= 64;\n    return bytes;\n}\nfunction decodeScalar25519(n) {\n    return bytesToNumberLE(adjustBytes25519(ensureBytes(n, 32)));\n}\nasync function getExtendedPublicKey(key) {\n    key =\n        typeof key === 'bigint' || typeof key === 'number'\n            ? numberTo32BytesBE(normalizeScalar(key, MAX_256B))\n            : ensureBytes(key);\n    if (key.length !== 32)\n        throw new Error(`Expected 32 bytes`);\n    const hashed = await utils.sha512(key);\n    const head = adjustBytes25519(hashed.slice(0, 32));\n    const prefix = hashed.slice(32, 64);\n    const scalar = mod(bytesToNumberLE(head), CURVE.l);\n    const point = Point.BASE.multiply(scalar);\n    const pointBytes = point.toRawBytes();\n    return { head, prefix, scalar, point, pointBytes };\n}\nexport async function getPublicKey(privateKey) {\n    return (await getExtendedPublicKey(privateKey)).pointBytes;\n}\nexport async function sign(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = await getExtendedPublicKey(privateKey);\n    const r = await sha512ModqLE(prefix, message);\n    const R = Point.BASE.multiply(r);\n    const k = await sha512ModqLE(R.toRawBytes(), pointBytes, message);\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n}\nexport async function verify(sig, message, publicKey) {\n    message = ensureBytes(message);\n    if (!(publicKey instanceof Point))\n        publicKey = Point.fromHex(publicKey, false);\n    const { r, s } = sig instanceof Signature ? sig.assertValidity() : Signature.fromHex(sig);\n    const SB = ExtendedPoint.BASE.multiplyUnsafe(s);\n    const k = await sha512ModqLE(r.toRawBytes(), publicKey.toRawBytes(), message);\n    const kA = ExtendedPoint.fromAffine(publicKey).multiplyUnsafe(k);\n    const RkA = ExtendedPoint.fromAffine(r).add(kA);\n    return RkA.subtract(SB).multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n}\nexport async function getSharedSecret(privateKey, publicKey) {\n    const { head } = await getExtendedPublicKey(privateKey);\n    const u = Point.fromHex(publicKey).toX25519();\n    return curve25519.scalarMult(head, u);\n}\nPoint.BASE._setWindowSize(8);\nfunction cswap(swap, x_2, x_3) {\n    const dummy = mod(swap * (x_2 - x_3));\n    x_2 = mod(x_2 - dummy);\n    x_3 = mod(x_3 + dummy);\n    return [x_2, x_3];\n}\nfunction montgomeryLadder(pointU, scalar) {\n    const { P } = CURVE;\n    const u = normalizeScalar(pointU, P);\n    const k = normalizeScalar(scalar, P);\n    const a24 = BigInt(121665);\n    const x_1 = u;\n    let x_2 = _1n;\n    let z_2 = _0n;\n    let x_3 = u;\n    let z_3 = _1n;\n    let swap = _0n;\n    let sw;\n    for (let t = BigInt(255 - 1); t >= _0n; t--) {\n        const k_t = (k >> t) & _1n;\n        swap ^= k_t;\n        sw = cswap(swap, x_2, x_3);\n        x_2 = sw[0];\n        x_3 = sw[1];\n        sw = cswap(swap, z_2, z_3);\n        z_2 = sw[0];\n        z_3 = sw[1];\n        swap = k_t;\n        const A = x_2 + z_2;\n        const AA = mod(A * A);\n        const B = x_2 - z_2;\n        const BB = mod(B * B);\n        const E = AA - BB;\n        const C = x_3 + z_3;\n        const D = x_3 - z_3;\n        const DA = mod(D * A);\n        const CB = mod(C * B);\n        x_3 = mod((DA + CB) ** _2n);\n        z_3 = mod(x_1 * (DA - CB) ** _2n);\n        x_2 = mod(AA * BB);\n        z_2 = mod(E * (AA + mod(a24 * E)));\n    }\n    sw = cswap(swap, x_2, x_3);\n    x_2 = sw[0];\n    x_3 = sw[1];\n    sw = cswap(swap, z_2, z_3);\n    z_2 = sw[0];\n    z_3 = sw[1];\n    const { pow_p_5_8, b2 } = pow_2_252_3(z_2);\n    const xp2 = mod(pow2(pow_p_5_8, BigInt(3)) * b2);\n    return mod(x_2 * xp2);\n}\nfunction encodeUCoordinate(u) {\n    return numberTo32BytesLE(mod(u, CURVE.P));\n}\nfunction decodeUCoordinate(uEnc) {\n    const u = ensureBytes(uEnc, 32);\n    u[31] &= 127;\n    return bytesToNumberLE(u);\n}\nexport const curve25519 = {\n    BASE_POINT_U: '0900000000000000000000000000000000000000000000000000000000000000',\n    scalarMult(privateKey, publicKey) {\n        const u = decodeUCoordinate(publicKey);\n        const p = decodeScalar25519(privateKey);\n        const pu = montgomeryLadder(u, p);\n        if (pu === _0n)\n            throw new Error('Invalid private or public key received');\n        return encodeUCoordinate(pu);\n    },\n    scalarMultBase(privateKey) {\n        return curve25519.scalarMult(privateKey, curve25519.BASE_POINT_U);\n    },\n};\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nexport const utils = {\n    TORSION_SUBGROUP: [\n        '0100000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n        '0000000000000000000000000000000000000000000000000000000000000080',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n        'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n        '0000000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n    ],\n    bytesToHex,\n    getExtendedPublicKey,\n    mod,\n    invert,\n    hashToPrivateScalar: (hash) => {\n        hash = ensureBytes(hash);\n        if (hash.length < 40 || hash.length > 1024)\n            throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n        const num = mod(bytesToNumberLE(hash), CURVE.l);\n        if (num === _0n || num === _1n)\n            throw new Error('Invalid private key');\n        return num;\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return new Uint8Array(randomBytes(bytesLength).buffer);\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => {\n        return utils.randomBytes(32);\n    },\n    sha512: async (message) => {\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-512', message.buffer);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            return Uint8Array.from(crypto.node.createHash('sha512').update(message).digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha512 function\");\n        }\n    },\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point.equals(Point.BASE) ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_2n);\n        return cached;\n    },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}