{"ast":null,"code":"'use strict';\n\nconst cp = require('./cp');\n\nconst rm = require('./rm');\n\nconst mergeOptions = require('merge-options').bind({\n  ignoreUndefined: true\n});\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @typedef {import('multiformats/cid').CIDVersion} CIDVersion\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} parents\n * @property {boolean} flush\n * @property {CIDVersion} cidVersion\n * @property {string} hashAlg\n * @property {number} shardSplitThreshold\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\n\n\nconst defaultOptions = {\n  parents: false,\n  flush: true,\n  cidVersion: 0,\n  hashAlg: 'sha2-256',\n  shardSplitThreshold: 1000\n};\n/**\n * @param {MfsContext} context\n */\n\nmodule.exports = context => {\n  /**\n   * @type {import('ipfs-core-types/src/files').API[\"mv\"]}\n   */\n  async function mfsMv(from, to) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    /** @type {DefaultOptions} */\n    const opts = mergeOptions(defaultOptions, options);\n    await cp(context)(from, to, opts);\n    await rm(context)(from, { ...opts,\n      recursive: true\n    });\n  }\n\n  return withTimeoutOption(mfsMv);\n};","map":{"version":3,"names":["cp","require","rm","mergeOptions","bind","ignoreUndefined","withTimeoutOption","defaultOptions","parents","flush","cidVersion","hashAlg","shardSplitThreshold","module","exports","context","mfsMv","from","to","options","opts","recursive"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/files/mv.js"],"sourcesContent":["'use strict'\n\nconst cp = require('./cp')\nconst rm = require('./rm')\nconst mergeOptions = require('merge-options').bind({ ignoreUndefined: true })\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @typedef {import('multiformats/cid').CIDVersion} CIDVersion\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} parents\n * @property {boolean} flush\n * @property {CIDVersion} cidVersion\n * @property {string} hashAlg\n * @property {number} shardSplitThreshold\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  parents: false,\n  flush: true,\n  cidVersion: 0,\n  hashAlg: 'sha2-256',\n  shardSplitThreshold: 1000\n}\n\n/**\n * @param {MfsContext} context\n */\nmodule.exports = (context) => {\n  /**\n   * @type {import('ipfs-core-types/src/files').API[\"mv\"]}\n   */\n  async function mfsMv (from, to, options = {}) {\n    /** @type {DefaultOptions} */\n    const opts = mergeOptions(defaultOptions, options)\n\n    await cp(context)(from, to, opts)\n    await rm(context)(from, {\n      ...opts,\n      recursive: true\n    })\n  }\n\n  return withTimeoutOption(mfsMv)\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,MAAD,CAAlB;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,eAAD,CAAP,CAAyBG,IAAzB,CAA8B;EAAEC,eAAe,EAAE;AAAnB,CAA9B,CAArB;;AACA,MAAMC,iBAAiB,GAAGL,OAAO,CAAC,yCAAD,CAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AACA,MAAMM,cAAc,GAAG;EACrBC,OAAO,EAAE,KADY;EAErBC,KAAK,EAAE,IAFc;EAGrBC,UAAU,EAAE,CAHS;EAIrBC,OAAO,EAAE,UAJY;EAKrBC,mBAAmB,EAAE;AALA,CAAvB;AAQA;AACA;AACA;;AACAC,MAAM,CAACC,OAAP,GAAkBC,OAAD,IAAa;EAC5B;AACF;AACA;EACE,eAAeC,KAAf,CAAsBC,IAAtB,EAA4BC,EAA5B,EAA8C;IAAA,IAAdC,OAAc,uEAAJ,EAAI;;IAC5C;IACA,MAAMC,IAAI,GAAGjB,YAAY,CAACI,cAAD,EAAiBY,OAAjB,CAAzB;IAEA,MAAMnB,EAAE,CAACe,OAAD,CAAF,CAAYE,IAAZ,EAAkBC,EAAlB,EAAsBE,IAAtB,CAAN;IACA,MAAMlB,EAAE,CAACa,OAAD,CAAF,CAAYE,IAAZ,EAAkB,EACtB,GAAGG,IADmB;MAEtBC,SAAS,EAAE;IAFW,CAAlB,CAAN;EAID;;EAED,OAAOf,iBAAiB,CAACU,KAAD,CAAxB;AACD,CAhBD"},"metadata":{},"sourceType":"script"}