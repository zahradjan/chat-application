{"ast":null,"code":"// @ts-nocheck\n\n/* global document */\n\n/**\n * This code is based on `latency-monitor` (https://github.com/mlucool/latency-monitor) by `mlucool` (https://github.com/mlucool), available under Apache License 2.0 (https://github.com/mlucool/latency-monitor/blob/master/LICENSE)\n */\n'use strict';\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _possibleConstructorReturn = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/possibleConstructorReturn.js\").default;\n\nvar _inherits = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar _require = require('events'),\n    EventEmitter = _require.EventEmitter;\n\nvar debug = require('debug')('latency-monitor:VisibilityChangeEmitter');\n/**\n * Listen to page visibility change events (i.e. when the page is focused / blurred) by an event emitter.\n *\n * Warning: This does not work on all browsers, but should work on all modern browsers\n *\n * @example\n *\n *     const myVisibilityEmitter = new VisibilityChangeEmitter();\n *\n *     myVisibilityEmitter.on('visibilityChange', (pageInFocus) => {\n *        if ( pageInFocus ){\n *            // Page is in focus\n *            console.log('In focus');\n *        }\n *        else {\n *            // Page is blurred\n *            console.log('Out of focus');\n *        }\n *     });\n *     // To access the visibility state directly, call:\n *     console.log('Am I focused now? ' + myVisibilityEmitter.isVisible());\n */\n\n\nvar VisibilityChangeEmitter = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(VisibilityChangeEmitter, _EventEmitter);\n\n  var _super = _createSuper(VisibilityChangeEmitter);\n\n  /**\n   * Creates a VisibilityChangeEmitter\n   *\n   * @class\n   */\n  function VisibilityChangeEmitter() {\n    var _this;\n\n    _classCallCheck(this, VisibilityChangeEmitter);\n\n    _this = _super.call(this);\n\n    if (typeof document === 'undefined') {\n      debug('This is not a browser, no \"document\" found. Stopping.');\n      return _possibleConstructorReturn(_this);\n    }\n\n    _this._initializeVisibilityVarNames();\n\n    _this._addVisibilityChangeListener();\n\n    return _this;\n  }\n  /**\n   * document.hidden and document.visibilityChange are the two variables we need to check for;\n   * Since these variables are named differently in different browsers, this function sets\n   * the appropriate name based on the browser being used. Once executed, tha actual names of\n   * document.hidden and document.visibilityChange are found in this._hidden and this._visibilityChange\n   * respectively\n   *\n   * @private\n   */\n\n\n  _createClass(VisibilityChangeEmitter, [{\n    key: \"_initializeVisibilityVarNames\",\n    value: function _initializeVisibilityVarNames() {\n      var hidden;\n      var visibilityChange;\n\n      if (typeof document.hidden !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        hidden = 'hidden';\n        visibilityChange = 'visibilitychange';\n      } else if (typeof document.mozHidden !== 'undefined') {\n        hidden = 'mozHidden';\n        visibilityChange = 'mozvisibilitychange';\n      } else if (typeof document.msHidden !== 'undefined') {\n        hidden = 'msHidden';\n        visibilityChange = 'msvisibilitychange';\n      } else if (typeof document.webkitHidden !== 'undefined') {\n        hidden = 'webkitHidden';\n        visibilityChange = 'webkitvisibilitychange';\n      }\n\n      this._hidden = hidden;\n      this._visibilityChange = visibilityChange;\n    }\n    /**\n     * Adds an event listener on the document that listens to changes in document.visibilityChange\n     * (or whatever name by which the visibilityChange variable is known in the browser)\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_addVisibilityChangeListener\",\n    value: function _addVisibilityChangeListener() {\n      if (typeof document.addEventListener === 'undefined' || typeof document[this._hidden] === 'undefined') {\n        debug('Checking page visibility requires a browser that supports the Page Visibility API.');\n      } else {\n        // Handle page visibility change\n        document.addEventListener(this._visibilityChange, this._handleVisibilityChange.bind(this), false);\n      }\n    }\n    /**\n     * The function returns ```true``` if the page is visible or ```false``` if the page is not visible and\n     * ```undefined``` if the page visibility API is not supported by the browser.\n     *\n     * @returns {boolean | void} whether the page is now visible or not (undefined is unknown)\n     */\n\n  }, {\n    key: \"isVisible\",\n    value: function isVisible() {\n      if (this._hidden === undefined || document[this._hidden] === undefined) {\n        return undefined;\n      }\n\n      return !document[this._hidden];\n    }\n    /**\n     * The function that is called when document.visibilityChange has changed\n     * It emits an event called visibilityChange and sends the value of document.hidden as a\n     * parameter\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_handleVisibilityChange\",\n    value: function _handleVisibilityChange() {\n      var visible = !document[this._hidden];\n      debug(visible ? 'Page Visible' : 'Page Hidden'); // Emit the event\n\n      this.emit('visibilityChange', visible);\n    }\n  }]);\n\n  return VisibilityChangeEmitter;\n}(EventEmitter);\n\nmodule.exports = VisibilityChangeEmitter;","map":{"version":3,"names":["require","EventEmitter","debug","VisibilityChangeEmitter","document","_initializeVisibilityVarNames","_addVisibilityChangeListener","hidden","visibilityChange","mozHidden","msHidden","webkitHidden","_hidden","_visibilityChange","addEventListener","_handleVisibilityChange","bind","undefined","visible","emit","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p/src/connection-manager/visibility-change-emitter.js"],"sourcesContent":["// @ts-nocheck\n/* global document */\n\n/**\n * This code is based on `latency-monitor` (https://github.com/mlucool/latency-monitor) by `mlucool` (https://github.com/mlucool), available under Apache License 2.0 (https://github.com/mlucool/latency-monitor/blob/master/LICENSE)\n */\n'use strict'\n\nconst { EventEmitter } = require('events')\n\nconst debug = require('debug')('latency-monitor:VisibilityChangeEmitter')\n\n/**\n * Listen to page visibility change events (i.e. when the page is focused / blurred) by an event emitter.\n *\n * Warning: This does not work on all browsers, but should work on all modern browsers\n *\n * @example\n *\n *     const myVisibilityEmitter = new VisibilityChangeEmitter();\n *\n *     myVisibilityEmitter.on('visibilityChange', (pageInFocus) => {\n *        if ( pageInFocus ){\n *            // Page is in focus\n *            console.log('In focus');\n *        }\n *        else {\n *            // Page is blurred\n *            console.log('Out of focus');\n *        }\n *     });\n *     // To access the visibility state directly, call:\n *     console.log('Am I focused now? ' + myVisibilityEmitter.isVisible());\n */\nclass VisibilityChangeEmitter extends EventEmitter {\n  /**\n   * Creates a VisibilityChangeEmitter\n   *\n   * @class\n   */\n  constructor () {\n    super()\n    if (typeof document === 'undefined') {\n      debug('This is not a browser, no \"document\" found. Stopping.')\n      return\n    }\n    this._initializeVisibilityVarNames()\n    this._addVisibilityChangeListener()\n  }\n\n  /**\n   * document.hidden and document.visibilityChange are the two variables we need to check for;\n   * Since these variables are named differently in different browsers, this function sets\n   * the appropriate name based on the browser being used. Once executed, tha actual names of\n   * document.hidden and document.visibilityChange are found in this._hidden and this._visibilityChange\n   * respectively\n   *\n   * @private\n   */\n  _initializeVisibilityVarNames () {\n    let hidden\n    let visibilityChange\n    if (typeof document.hidden !== 'undefined') { // Opera 12.10 and Firefox 18 and later support\n      hidden = 'hidden'\n      visibilityChange = 'visibilitychange'\n    } else if (typeof document.mozHidden !== 'undefined') {\n      hidden = 'mozHidden'\n      visibilityChange = 'mozvisibilitychange'\n    } else if (typeof document.msHidden !== 'undefined') {\n      hidden = 'msHidden'\n      visibilityChange = 'msvisibilitychange'\n    } else if (typeof document.webkitHidden !== 'undefined') {\n      hidden = 'webkitHidden'\n      visibilityChange = 'webkitvisibilitychange'\n    }\n    this._hidden = hidden\n    this._visibilityChange = visibilityChange\n  }\n\n  /**\n   * Adds an event listener on the document that listens to changes in document.visibilityChange\n   * (or whatever name by which the visibilityChange variable is known in the browser)\n   *\n   * @private\n   */\n  _addVisibilityChangeListener () {\n    if (typeof document.addEventListener === 'undefined' ||\n            typeof document[this._hidden] === 'undefined') {\n      debug('Checking page visibility requires a browser that supports the Page Visibility API.')\n    } else {\n      // Handle page visibility change\n      document.addEventListener(this._visibilityChange, this._handleVisibilityChange.bind(this), false)\n    }\n  }\n\n  /**\n   * The function returns ```true``` if the page is visible or ```false``` if the page is not visible and\n   * ```undefined``` if the page visibility API is not supported by the browser.\n   *\n   * @returns {boolean | void} whether the page is now visible or not (undefined is unknown)\n   */\n  isVisible () {\n    if (this._hidden === undefined || document[this._hidden] === undefined) {\n      return undefined\n    }\n\n    return !document[this._hidden]\n  }\n\n  /**\n   * The function that is called when document.visibilityChange has changed\n   * It emits an event called visibilityChange and sends the value of document.hidden as a\n   * parameter\n   *\n   * @private\n   */\n  _handleVisibilityChange () {\n    const visible = !document[this._hidden]\n    debug(visible ? 'Page Visible' : 'Page Hidden')\n    // Emit the event\n    this.emit('visibilityChange', visible)\n  }\n}\n\nmodule.exports = VisibilityChangeEmitter\n"],"mappings":"AAAA;;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;AAEA,eAAyBA,OAAO,CAAC,QAAD,CAAhC;AAAA,IAAQC,YAAR,YAAQA,YAAR;;AAEA,IAAMC,KAAK,GAAGF,OAAO,CAAC,OAAD,CAAP,CAAiB,yCAAjB,CAAd;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACMG,uB;;;;;EACJ;AACF;AACA;AACA;AACA;EACE,mCAAe;IAAA;;IAAA;;IACb;;IACA,IAAI,OAAOC,QAAP,KAAoB,WAAxB,EAAqC;MACnCF,KAAK,CAAC,uDAAD,CAAL;MACA;IACD;;IACD,MAAKG,6BAAL;;IACA,MAAKC,4BAAL;;IAPa;EAQd;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;WACE,yCAAiC;MAC/B,IAAIC,MAAJ;MACA,IAAIC,gBAAJ;;MACA,IAAI,OAAOJ,QAAQ,CAACG,MAAhB,KAA2B,WAA/B,EAA4C;QAAE;QAC5CA,MAAM,GAAG,QAAT;QACAC,gBAAgB,GAAG,kBAAnB;MACD,CAHD,MAGO,IAAI,OAAOJ,QAAQ,CAACK,SAAhB,KAA8B,WAAlC,EAA+C;QACpDF,MAAM,GAAG,WAAT;QACAC,gBAAgB,GAAG,qBAAnB;MACD,CAHM,MAGA,IAAI,OAAOJ,QAAQ,CAACM,QAAhB,KAA6B,WAAjC,EAA8C;QACnDH,MAAM,GAAG,UAAT;QACAC,gBAAgB,GAAG,oBAAnB;MACD,CAHM,MAGA,IAAI,OAAOJ,QAAQ,CAACO,YAAhB,KAAiC,WAArC,EAAkD;QACvDJ,MAAM,GAAG,cAAT;QACAC,gBAAgB,GAAG,wBAAnB;MACD;;MACD,KAAKI,OAAL,GAAeL,MAAf;MACA,KAAKM,iBAAL,GAAyBL,gBAAzB;IACD;IAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,wCAAgC;MAC9B,IAAI,OAAOJ,QAAQ,CAACU,gBAAhB,KAAqC,WAArC,IACI,OAAOV,QAAQ,CAAC,KAAKQ,OAAN,CAAf,KAAkC,WAD1C,EACuD;QACrDV,KAAK,CAAC,oFAAD,CAAL;MACD,CAHD,MAGO;QACL;QACAE,QAAQ,CAACU,gBAAT,CAA0B,KAAKD,iBAA/B,EAAkD,KAAKE,uBAAL,CAA6BC,IAA7B,CAAkC,IAAlC,CAAlD,EAA2F,KAA3F;MACD;IACF;IAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,qBAAa;MACX,IAAI,KAAKJ,OAAL,KAAiBK,SAAjB,IAA8Bb,QAAQ,CAAC,KAAKQ,OAAN,CAAR,KAA2BK,SAA7D,EAAwE;QACtE,OAAOA,SAAP;MACD;;MAED,OAAO,CAACb,QAAQ,CAAC,KAAKQ,OAAN,CAAhB;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;WACE,mCAA2B;MACzB,IAAMM,OAAO,GAAG,CAACd,QAAQ,CAAC,KAAKQ,OAAN,CAAzB;MACAV,KAAK,CAACgB,OAAO,GAAG,cAAH,GAAoB,aAA5B,CAAL,CAFyB,CAGzB;;MACA,KAAKC,IAAL,CAAU,kBAAV,EAA8BD,OAA9B;IACD;;;;EAvFmCjB,Y;;AA0FtCmB,MAAM,CAACC,OAAP,GAAiBlB,uBAAjB"},"metadata":{},"sourceType":"script"}