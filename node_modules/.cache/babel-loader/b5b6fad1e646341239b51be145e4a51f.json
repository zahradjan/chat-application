{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _objectSpread = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _wrapAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nvar _awaitAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _asyncGeneratorDelegate = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate.js\").default;\n\nvar _asyncIterator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar configure = require('./lib/configure');\n\nvar toUrlSearchParams = require('./lib/to-url-search-params');\n\nvar stat = require('./files/stat');\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n\nmodule.exports = configure(function (api, opts) {\n  /**\n   * @type {RootAPI[\"ls\"]}\n   */\n  function ls(_x) {\n    return _ls.apply(this, arguments);\n  }\n\n  function _ls() {\n    _ls = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(path) {\n      var options,\n          pathStr,\n          mapLink,\n          _mapLink,\n          res,\n          _iteratorAbruptCompletion,\n          _didIteratorError,\n          _iteratorError,\n          _iterator,\n          _step,\n          result,\n          links,\n          _args2 = arguments;\n\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _mapLink = function _mapLink3() {\n                _mapLink = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(link) {\n                  var hash, ipfsPath, stats, entry;\n                  return _regeneratorRuntime().wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          hash = link.Hash;\n\n                          if (!hash.includes('/')) {\n                            _context.next = 9;\n                            break;\n                          }\n\n                          // the hash is a path, but we need the CID\n                          ipfsPath = hash.startsWith('/ipfs/') ? hash : \"/ipfs/\".concat(hash);\n                          _context.next = 5;\n                          return stat(opts)(ipfsPath);\n\n                        case 5:\n                          stats = _context.sent;\n                          hash = stats.cid;\n                          _context.next = 10;\n                          break;\n\n                        case 9:\n                          hash = CID.parse(hash);\n\n                        case 10:\n                          /** @type {import('ipfs-core-types/src/root').IPFSEntry} */\n                          entry = {\n                            name: link.Name,\n                            path: pathStr + (link.Name ? \"/\".concat(link.Name) : ''),\n                            size: link.Size,\n                            cid: hash,\n                            type: typeOf(link)\n                          };\n\n                          if (link.Mode) {\n                            entry.mode = parseInt(link.Mode, 8);\n                          }\n\n                          if (link.Mtime !== undefined && link.Mtime !== null) {\n                            entry.mtime = {\n                              secs: link.Mtime\n                            };\n\n                            if (link.MtimeNsecs !== undefined && link.MtimeNsecs !== null) {\n                              entry.mtime.nsecs = link.MtimeNsecs;\n                            }\n                          }\n\n                          return _context.abrupt(\"return\", entry);\n\n                        case 14:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n                return _mapLink.apply(this, arguments);\n              };\n\n              mapLink = function _mapLink2(_x2) {\n                return _mapLink.apply(this, arguments);\n              };\n\n              options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n              pathStr = \"\".concat(path instanceof Uint8Array ? CID.decode(path) : path);\n              /**\n               * @param {*} link\n               */\n\n              _context2.next = 6;\n              return _awaitAsyncGenerator(api.post('ls', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: pathStr\n                }, options)),\n                headers: options.headers\n              }));\n\n            case 6:\n              res = _context2.sent;\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context2.prev = 9;\n              _iterator = _asyncIterator(res.ndjson());\n\n            case 11:\n              _context2.next = 13;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 13:\n              if (!(_iteratorAbruptCompletion = !(_step = _context2.sent).done)) {\n                _context2.next = 32;\n                break;\n              }\n\n              result = _step.value;\n              result = result.Objects;\n\n              if (result) {\n                _context2.next = 18;\n                break;\n              }\n\n              throw new Error('expected .Objects in results');\n\n            case 18:\n              result = result[0];\n\n              if (result) {\n                _context2.next = 21;\n                break;\n              }\n\n              throw new Error('expected one array in results.Objects');\n\n            case 21:\n              links = result.Links;\n\n              if (Array.isArray(links)) {\n                _context2.next = 24;\n                break;\n              }\n\n              throw new Error('expected one array in results.Objects[0].Links');\n\n            case 24:\n              if (links.length) {\n                _context2.next = 28;\n                break;\n              }\n\n              _context2.next = 27;\n              return mapLink(result);\n\n            case 27:\n              return _context2.abrupt(\"return\");\n\n            case 28:\n              return _context2.delegateYield(_asyncGeneratorDelegate(_asyncIterator(links.map(mapLink)), _awaitAsyncGenerator), \"t0\", 29);\n\n            case 29:\n              _iteratorAbruptCompletion = false;\n              _context2.next = 11;\n              break;\n\n            case 32:\n              _context2.next = 38;\n              break;\n\n            case 34:\n              _context2.prev = 34;\n              _context2.t1 = _context2[\"catch\"](9);\n              _didIteratorError = true;\n              _iteratorError = _context2.t1;\n\n            case 38:\n              _context2.prev = 38;\n              _context2.prev = 39;\n\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context2.next = 43;\n                break;\n              }\n\n              _context2.next = 43;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 43:\n              _context2.prev = 43;\n\n              if (!_didIteratorError) {\n                _context2.next = 46;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 46:\n              return _context2.finish(43);\n\n            case 47:\n              return _context2.finish(38);\n\n            case 48:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[9, 34, 38, 48], [39,, 43, 47]]);\n    }));\n    return _ls.apply(this, arguments);\n  }\n\n  return ls;\n});\n/**\n * @param {any} link\n */\n\nfunction typeOf(link) {\n  switch (link.Type) {\n    case 1:\n    case 5:\n      return 'dir';\n\n    case 2:\n      return 'file';\n\n    default:\n      return 'file';\n  }\n}","map":{"version":3,"names":["require","CID","configure","toUrlSearchParams","stat","module","exports","api","opts","ls","path","mapLink","link","hash","Hash","includes","ipfsPath","startsWith","stats","cid","parse","entry","name","Name","pathStr","size","Size","type","typeOf","Mode","mode","parseInt","Mtime","undefined","mtime","secs","MtimeNsecs","nsecs","options","Uint8Array","decode","post","signal","searchParams","arg","headers","res","ndjson","result","Objects","Error","links","Links","Array","isArray","length","map","Type"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-http-client/src/ls.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst configure = require('./lib/configure')\nconst toUrlSearchParams = require('./lib/to-url-search-params')\nconst stat = require('./files/stat')\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nmodule.exports = configure((api, opts) => {\n  /**\n   * @type {RootAPI[\"ls\"]}\n   */\n  async function * ls (path, options = {}) {\n    const pathStr = `${path instanceof Uint8Array ? CID.decode(path) : path}`\n\n    /**\n     * @param {*} link\n     */\n    async function mapLink (link) {\n      let hash = link.Hash\n\n      if (hash.includes('/')) {\n        // the hash is a path, but we need the CID\n        const ipfsPath = hash.startsWith('/ipfs/') ? hash : `/ipfs/${hash}`\n        const stats = await stat(opts)(ipfsPath)\n\n        hash = stats.cid\n      } else {\n        hash = CID.parse(hash)\n      }\n\n      /** @type {import('ipfs-core-types/src/root').IPFSEntry} */\n      const entry = {\n        name: link.Name,\n        path: pathStr + (link.Name ? `/${link.Name}` : ''),\n        size: link.Size,\n        cid: hash,\n        type: typeOf(link)\n      }\n\n      if (link.Mode) {\n        entry.mode = parseInt(link.Mode, 8)\n      }\n\n      if (link.Mtime !== undefined && link.Mtime !== null) {\n        entry.mtime = {\n          secs: link.Mtime\n        }\n\n        if (link.MtimeNsecs !== undefined && link.MtimeNsecs !== null) {\n          entry.mtime.nsecs = link.MtimeNsecs\n        }\n      }\n\n      return entry\n    }\n\n    const res = await api.post('ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: pathStr,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (let result of res.ndjson()) {\n      result = result.Objects\n\n      if (!result) {\n        throw new Error('expected .Objects in results')\n      }\n\n      result = result[0]\n      if (!result) {\n        throw new Error('expected one array in results.Objects')\n      }\n\n      const links = result.Links\n      if (!Array.isArray(links)) {\n        throw new Error('expected one array in results.Objects[0].Links')\n      }\n\n      if (!links.length) {\n        // no links, this is a file, yield a single result\n        yield mapLink(result)\n\n        return\n      }\n\n      yield * links.map(mapLink)\n    }\n  }\n  return ls\n})\n\n/**\n * @param {any} link\n */\nfunction typeOf (link) {\n  switch (link.Type) {\n    case 1:\n    case 5:\n      return 'dir'\n    case 2:\n      return 'file'\n    default:\n      return 'file'\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}