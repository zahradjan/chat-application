{"ast":null,"code":"'use strict'; // @ts-ignore node-forge types not exported\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nrequire('node-forge/lib/pkcs7'); // @ts-ignore node-forge types not exported\n\n\nrequire('node-forge/lib/pbe'); // @ts-ignore node-forge types not exported\n\n\nvar forge = require('node-forge/lib/forge');\n\nvar _require = require('./util'),\n    certificateForKey = _require.certificateForKey,\n    findAsync = _require.findAsync;\n\nvar errcode = require('err-code');\n\nvar _require2 = require('uint8arrays/from-string'),\n    uint8ArrayFromString = _require2.fromString;\n\nvar _require3 = require('uint8arrays/to-string'),\n    uint8ArrayToString = _require3.toString;\n\nvar privates = new WeakMap();\n/**\n * Cryptographic Message Syntax (aka PKCS #7)\n *\n * CMS describes an encapsulation syntax for data protection. It\n * is used to digitally sign, digest, authenticate, or encrypt\n * arbitrary message content.\n *\n * See RFC 5652 for all the details.\n */\n\nvar CMS = /*#__PURE__*/function () {\n  /**\n   * Creates a new instance with a keychain\n   *\n   * @param {import('./index')} keychain - the available keys\n   * @param {string} dek\n   */\n  function CMS(keychain, dek) {\n    _classCallCheck(this, CMS);\n\n    if (!keychain) {\n      throw errcode(new Error('keychain is required'), 'ERR_KEYCHAIN_REQUIRED');\n    }\n\n    this.keychain = keychain;\n    privates.set(this, {\n      dek: dek\n    });\n  }\n  /**\n   * Creates some protected data.\n   *\n   * The output Uint8Array contains the PKCS #7 message in DER.\n   *\n   * @param {string} name - The local key name.\n   * @param {Uint8Array} plain - The data to encrypt.\n   * @returns {Promise<Uint8Array>}\n   */\n\n\n  _createClass(CMS, [{\n    key: \"encrypt\",\n    value: function () {\n      var _encrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(name, plain) {\n        var key, pem, dek, privateKey, certificate, p7, der;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (plain instanceof Uint8Array) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw errcode(new Error('Plain data must be a Uint8Array'), 'ERR_INVALID_PARAMS');\n\n              case 2:\n                _context.next = 4;\n                return this.keychain.findKeyByName(name);\n\n              case 4:\n                key = _context.sent;\n                _context.next = 7;\n                return this.keychain._getPrivateKey(name);\n\n              case 7:\n                pem = _context.sent;\n\n                /** @type {string} */\n                dek = privates.get(this).dek;\n                privateKey = forge.pki.decryptRsaPrivateKey(pem, dek);\n                _context.next = 12;\n                return certificateForKey(key, privateKey);\n\n              case 12:\n                certificate = _context.sent;\n                // create a p7 enveloped message\n                p7 = forge.pkcs7.createEnvelopedData();\n                p7.addRecipient(certificate);\n                p7.content = forge.util.createBuffer(plain);\n                p7.encrypt(); // convert message to DER\n\n                der = forge.asn1.toDer(p7.toAsn1()).getBytes();\n                return _context.abrupt(\"return\", uint8ArrayFromString(der, 'ascii'));\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function encrypt(_x, _x2) {\n        return _encrypt.apply(this, arguments);\n      }\n\n      return encrypt;\n    }()\n    /**\n     * Reads some protected data.\n     *\n     * The keychain must contain one of the keys used to encrypt the data.  If none of the keys\n     * exists, an Error is returned with the property 'missingKeys'.  It is array of key ids.\n     *\n     * @param {Uint8Array} cmsData - The CMS encrypted data to decrypt.\n     * @returns {Promise<Uint8Array>}\n     */\n\n  }, {\n    key: \"decrypt\",\n    value: function () {\n      var _decrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(cmsData) {\n        var _this = this;\n\n        var cms, buf, obj, recipients, r, missingKeys, key, pem, dek, privateKey;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (cmsData instanceof Uint8Array) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                throw errcode(new Error('CMS data is required'), 'ERR_INVALID_PARAMS');\n\n              case 2:\n                _context3.prev = 2;\n                buf = forge.util.createBuffer(uint8ArrayToString(cmsData, 'ascii'));\n                obj = forge.asn1.fromDer(buf); // @ts-ignore not defined\n\n                cms = forge.pkcs7.messageFromAsn1(obj);\n                _context3.next = 11;\n                break;\n\n              case 8:\n                _context3.prev = 8;\n                _context3.t0 = _context3[\"catch\"](2);\n                throw errcode(new Error('Invalid CMS: ' + _context3.t0.message), 'ERR_INVALID_CMS');\n\n              case 11:\n                // Find a recipient whose key we hold. We only deal with recipient certs\n                // issued by ipfs (O=ipfs).\n                recipients = cms.recipients // @ts-ignore cms types not defined\n                .filter(function (r) {\n                  return r.issuer.find(function (a) {\n                    return a.shortName === 'O' && a.value === 'ipfs';\n                  });\n                }) // @ts-ignore cms types not defined\n                .filter(function (r) {\n                  return r.issuer.find(function (a) {\n                    return a.shortName === 'CN';\n                  });\n                }) // @ts-ignore cms types not defined\n                .map(function (r) {\n                  return {\n                    recipient: r,\n                    // @ts-ignore cms types not defined\n                    keyId: r.issuer.find(function (a) {\n                      return a.shortName === 'CN';\n                    }).value\n                  };\n                });\n                _context3.next = 14;\n                return findAsync(recipients, /*#__PURE__*/function () {\n                  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(recipient) {\n                    var _key;\n\n                    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            _context2.prev = 0;\n                            _context2.next = 3;\n                            return _this.keychain.findKeyById(recipient.keyId);\n\n                          case 3:\n                            _key = _context2.sent;\n\n                            if (!_key) {\n                              _context2.next = 6;\n                              break;\n                            }\n\n                            return _context2.abrupt(\"return\", true);\n\n                          case 6:\n                            _context2.next = 11;\n                            break;\n\n                          case 8:\n                            _context2.prev = 8;\n                            _context2.t0 = _context2[\"catch\"](0);\n                            return _context2.abrupt(\"return\", false);\n\n                          case 11:\n                            return _context2.abrupt(\"return\", false);\n\n                          case 12:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2, null, [[0, 8]]);\n                  }));\n\n                  return function (_x4) {\n                    return _ref.apply(this, arguments);\n                  };\n                }());\n\n              case 14:\n                r = _context3.sent;\n\n                if (r) {\n                  _context3.next = 18;\n                  break;\n                }\n\n                // @ts-ignore cms types not defined\n                missingKeys = recipients.map(function (r) {\n                  return r.keyId;\n                });\n                throw errcode(new Error('Decryption needs one of the key(s): ' + missingKeys.join(', ')), 'ERR_MISSING_KEYS', {\n                  missingKeys: missingKeys\n                });\n\n              case 18:\n                _context3.next = 20;\n                return this.keychain.findKeyById(r.keyId);\n\n              case 20:\n                key = _context3.sent;\n\n                if (key) {\n                  _context3.next = 23;\n                  break;\n                }\n\n                throw errcode(new Error('No key available to decrypto'), 'ERR_NO_KEY');\n\n              case 23:\n                _context3.next = 25;\n                return this.keychain._getPrivateKey(key.name);\n\n              case 25:\n                pem = _context3.sent;\n                dek = privates.get(this).dek;\n                privateKey = forge.pki.decryptRsaPrivateKey(pem, dek);\n                cms.decrypt(r.recipient, privateKey);\n                return _context3.abrupt(\"return\", uint8ArrayFromString(cms.content.getBytes(), 'ascii'));\n\n              case 30:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[2, 8]]);\n      }));\n\n      function decrypt(_x3) {\n        return _decrypt.apply(this, arguments);\n      }\n\n      return decrypt;\n    }()\n  }]);\n\n  return CMS;\n}();\n\nmodule.exports = CMS;","map":{"version":3,"names":["require","forge","certificateForKey","findAsync","errcode","uint8ArrayFromString","fromString","uint8ArrayToString","toString","privates","WeakMap","CMS","keychain","dek","Error","set","name","plain","Uint8Array","findKeyByName","key","_getPrivateKey","pem","get","privateKey","pki","decryptRsaPrivateKey","certificate","p7","pkcs7","createEnvelopedData","addRecipient","content","util","createBuffer","encrypt","der","asn1","toDer","toAsn1","getBytes","cmsData","buf","obj","fromDer","cms","messageFromAsn1","message","recipients","filter","r","issuer","find","a","shortName","value","map","recipient","keyId","findKeyById","missingKeys","join","decrypt","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p/src/keychain/cms.js"],"sourcesContent":["'use strict'\n\n// @ts-ignore node-forge types not exported\nrequire('node-forge/lib/pkcs7')\n// @ts-ignore node-forge types not exported\nrequire('node-forge/lib/pbe')\n// @ts-ignore node-forge types not exported\nconst forge = require('node-forge/lib/forge')\nconst { certificateForKey, findAsync } = require('./util')\nconst errcode = require('err-code')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\n\nconst privates = new WeakMap()\n\n/**\n * Cryptographic Message Syntax (aka PKCS #7)\n *\n * CMS describes an encapsulation syntax for data protection. It\n * is used to digitally sign, digest, authenticate, or encrypt\n * arbitrary message content.\n *\n * See RFC 5652 for all the details.\n */\nclass CMS {\n  /**\n   * Creates a new instance with a keychain\n   *\n   * @param {import('./index')} keychain - the available keys\n   * @param {string} dek\n   */\n  constructor (keychain, dek) {\n    if (!keychain) {\n      throw errcode(new Error('keychain is required'), 'ERR_KEYCHAIN_REQUIRED')\n    }\n\n    this.keychain = keychain\n    privates.set(this, { dek })\n  }\n\n  /**\n   * Creates some protected data.\n   *\n   * The output Uint8Array contains the PKCS #7 message in DER.\n   *\n   * @param {string} name - The local key name.\n   * @param {Uint8Array} plain - The data to encrypt.\n   * @returns {Promise<Uint8Array>}\n   */\n  async encrypt (name, plain) {\n    if (!(plain instanceof Uint8Array)) {\n      throw errcode(new Error('Plain data must be a Uint8Array'), 'ERR_INVALID_PARAMS')\n    }\n\n    const key = await this.keychain.findKeyByName(name)\n    const pem = await this.keychain._getPrivateKey(name)\n    /** @type {string} */\n    const dek = privates.get(this).dek\n    const privateKey = forge.pki.decryptRsaPrivateKey(pem, dek)\n    const certificate = await certificateForKey(key, privateKey)\n\n    // create a p7 enveloped message\n    const p7 = forge.pkcs7.createEnvelopedData()\n    p7.addRecipient(certificate)\n    p7.content = forge.util.createBuffer(plain)\n    p7.encrypt()\n\n    // convert message to DER\n    const der = forge.asn1.toDer(p7.toAsn1()).getBytes()\n    return uint8ArrayFromString(der, 'ascii')\n  }\n\n  /**\n   * Reads some protected data.\n   *\n   * The keychain must contain one of the keys used to encrypt the data.  If none of the keys\n   * exists, an Error is returned with the property 'missingKeys'.  It is array of key ids.\n   *\n   * @param {Uint8Array} cmsData - The CMS encrypted data to decrypt.\n   * @returns {Promise<Uint8Array>}\n   */\n  async decrypt (cmsData) {\n    if (!(cmsData instanceof Uint8Array)) {\n      throw errcode(new Error('CMS data is required'), 'ERR_INVALID_PARAMS')\n    }\n\n    let cms\n    try {\n      const buf = forge.util.createBuffer(uint8ArrayToString(cmsData, 'ascii'))\n      const obj = forge.asn1.fromDer(buf)\n      // @ts-ignore not defined\n      cms = forge.pkcs7.messageFromAsn1(obj)\n    } catch (err) {\n      throw errcode(new Error('Invalid CMS: ' + err.message), 'ERR_INVALID_CMS')\n    }\n\n    // Find a recipient whose key we hold. We only deal with recipient certs\n    // issued by ipfs (O=ipfs).\n    const recipients = cms.recipients\n      // @ts-ignore cms types not defined\n      .filter(r => r.issuer.find(a => a.shortName === 'O' && a.value === 'ipfs'))\n      // @ts-ignore cms types not defined\n      .filter(r => r.issuer.find(a => a.shortName === 'CN'))\n      // @ts-ignore cms types not defined\n      .map(r => {\n        return {\n          recipient: r,\n          // @ts-ignore cms types not defined\n          keyId: r.issuer.find(a => a.shortName === 'CN').value\n        }\n      })\n\n    const r = await findAsync(recipients, async (recipient) => {\n      try {\n        const key = await this.keychain.findKeyById(recipient.keyId)\n        if (key) return true\n      } catch (err) {\n        return false\n      }\n      return false\n    })\n\n    if (!r) {\n      // @ts-ignore cms types not defined\n      const missingKeys = recipients.map(r => r.keyId)\n      throw errcode(new Error('Decryption needs one of the key(s): ' + missingKeys.join(', ')), 'ERR_MISSING_KEYS', {\n        missingKeys\n      })\n    }\n\n    const key = await this.keychain.findKeyById(r.keyId)\n\n    if (!key) {\n      throw errcode(new Error('No key available to decrypto'), 'ERR_NO_KEY')\n    }\n\n    const pem = await this.keychain._getPrivateKey(key.name)\n    const dek = privates.get(this).dek\n    const privateKey = forge.pki.decryptRsaPrivateKey(pem, dek)\n    cms.decrypt(r.recipient, privateKey)\n    return uint8ArrayFromString(cms.content.getBytes(), 'ascii')\n  }\n}\n\nmodule.exports = CMS\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}