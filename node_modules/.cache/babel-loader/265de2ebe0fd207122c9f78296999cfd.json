{"ast":null,"code":"'use strict';\n\nconst {\n  nanoid\n} = require('nanoid');\n\nconst {\n  toString: uint8ArrayToString\n} = require('uint8arrays/to-string');\n\nconst {\n  fromString: uint8ArrayFromString\n} = require('uint8arrays/from-string');\n\nconst pathSepS = '/';\nconst pathSepB = new TextEncoder().encode(pathSepS);\nconst pathSep = pathSepB[0];\n/**\n * A Key represents the unique identifier of an object.\n * Our Key scheme is inspired by file systems and Google App Engine key model.\n * Keys are meant to be unique across a system. Keys are hierarchical,\n * incorporating more and more specific namespaces. Thus keys can be deemed\n * 'children' or 'ancestors' of other keys:\n * - `new Key('/Comedy')`\n * - `new Key('/Comedy/MontyPython')`\n * Also, every namespace can be parametrized to embed relevant object\n * information. For example, the Key `name` (most specific namespace) could\n * include the object type:\n * - `new Key('/Comedy/MontyPython/Actor:JohnCleese')`\n * - `new Key('/Comedy/MontyPython/Sketch:CheeseShop')`\n * - `new Key('/Comedy/MontyPython/Sketch:CheeseShop/Character:Mousebender')`\n *\n */\n\nclass Key {\n  /**\n   * @param {string | Uint8Array} s\n   * @param {boolean} [clean]\n   */\n  constructor(s, clean) {\n    if (typeof s === 'string') {\n      this._buf = uint8ArrayFromString(s);\n    } else if (s instanceof Uint8Array) {\n      this._buf = s;\n    } else {\n      throw new Error('Invalid key, should be String of Uint8Array');\n    }\n\n    if (clean == null) {\n      clean = true;\n    }\n\n    if (clean) {\n      this.clean();\n    }\n\n    if (this._buf.byteLength === 0 || this._buf[0] !== pathSep) {\n      throw new Error('Invalid key');\n    }\n  }\n  /**\n   * Convert to the string representation\n   *\n   * @param {import('uint8arrays/to-string').SupportedEncodings} [encoding='utf8'] - The encoding to use.\n   * @returns {string}\n   */\n\n\n  toString() {\n    let encoding = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'utf8';\n    return uint8ArrayToString(this._buf, encoding);\n  }\n  /**\n   * Return the Uint8Array representation of the key\n   *\n   * @returns {Uint8Array}\n   */\n\n\n  uint8Array() {\n    return this._buf;\n  }\n  /**\n   * Return string representation of the key\n   *\n   * @returns {string}\n   */\n\n\n  get [Symbol.toStringTag]() {\n    return `Key(${this.toString()})`;\n  }\n  /**\n   * Constructs a key out of a namespace array.\n   *\n   * @param {Array<string>} list - The array of namespaces\n   * @returns {Key}\n   *\n   * @example\n   * ```js\n   * Key.withNamespaces(['one', 'two'])\n   * // => Key('/one/two')\n   * ```\n   */\n\n\n  static withNamespaces(list) {\n    return new Key(list.join(pathSepS));\n  }\n  /**\n   * Returns a randomly (uuid) generated key.\n   *\n   * @returns {Key}\n   *\n   * @example\n   * ```js\n   * Key.random()\n   * // => Key('/f98719ea086343f7b71f32ea9d9d521d')\n   * ```\n   */\n\n\n  static random() {\n    return new Key(nanoid().replace(/-/g, ''));\n  }\n  /**\n   * @param {*} other\n   */\n\n\n  static asKey(other) {\n    if (other instanceof Uint8Array || typeof other === 'string') {\n      // we can create a key from this\n      return new Key(other);\n    }\n\n    if (other.uint8Array) {\n      // this is an older version or may have crossed the esm/cjs boundary\n      return new Key(other.uint8Array());\n    }\n\n    return null;\n  }\n  /**\n   * Cleanup the current key\n   *\n   * @returns {void}\n   */\n\n\n  clean() {\n    if (!this._buf || this._buf.byteLength === 0) {\n      this._buf = pathSepB;\n    }\n\n    if (this._buf[0] !== pathSep) {\n      const bytes = new Uint8Array(this._buf.byteLength + 1);\n      bytes.fill(pathSep, 0, 1);\n      bytes.set(this._buf, 1);\n      this._buf = bytes;\n    } // normalize does not remove trailing slashes\n\n\n    while (this._buf.byteLength > 1 && this._buf[this._buf.byteLength - 1] === pathSep) {\n      this._buf = this._buf.subarray(0, -1);\n    }\n  }\n  /**\n   * Check if the given key is sorted lower than ourself.\n   *\n   * @param {Key} key - The other Key to check against\n   * @returns {boolean}\n   */\n\n\n  less(key) {\n    const list1 = this.list();\n    const list2 = key.list();\n\n    for (let i = 0; i < list1.length; i++) {\n      if (list2.length < i + 1) {\n        return false;\n      }\n\n      const c1 = list1[i];\n      const c2 = list2[i];\n\n      if (c1 < c2) {\n        return true;\n      } else if (c1 > c2) {\n        return false;\n      }\n    }\n\n    return list1.length < list2.length;\n  }\n  /**\n   * Returns the key with all parts in reversed order.\n   *\n   * @returns {Key}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython/Actor:JohnCleese').reverse()\n   * // => Key('/Actor:JohnCleese/MontyPython/Comedy')\n   * ```\n   */\n\n\n  reverse() {\n    return Key.withNamespaces(this.list().slice().reverse());\n  }\n  /**\n   * Returns the `namespaces` making up this Key.\n   *\n   * @returns {Array<string>}\n   */\n\n\n  namespaces() {\n    return this.list();\n  }\n  /** Returns the \"base\" namespace of this key.\n   *\n   * @returns {string}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython/Actor:JohnCleese').baseNamespace()\n   * // => 'Actor:JohnCleese'\n   * ```\n   */\n\n\n  baseNamespace() {\n    const ns = this.namespaces();\n    return ns[ns.length - 1];\n  }\n  /**\n   * Returns the `list` representation of this key.\n   *\n   * @returns {Array<string>}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython/Actor:JohnCleese').list()\n   * // => ['Comedy', 'MontyPythong', 'Actor:JohnCleese']\n   * ```\n   */\n\n\n  list() {\n    return this.toString().split(pathSepS).slice(1);\n  }\n  /**\n   * Returns the \"type\" of this key (value of last namespace).\n   *\n   * @returns {string}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython/Actor:JohnCleese').type()\n   * // => 'Actor'\n   * ```\n   */\n\n\n  type() {\n    return namespaceType(this.baseNamespace());\n  }\n  /**\n   * Returns the \"name\" of this key (field of last namespace).\n   *\n   * @returns {string}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython/Actor:JohnCleese').name()\n   * // => 'JohnCleese'\n   * ```\n   */\n\n\n  name() {\n    return namespaceValue(this.baseNamespace());\n  }\n  /**\n   * Returns an \"instance\" of this type key (appends value to namespace).\n   *\n   * @param {string} s - The string to append.\n   * @returns {Key}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython/Actor').instance('JohnClesse')\n   * // => Key('/Comedy/MontyPython/Actor:JohnCleese')\n   * ```\n   */\n\n\n  instance(s) {\n    return new Key(this.toString() + ':' + s);\n  }\n  /**\n   * Returns the \"path\" of this key (parent + type).\n   *\n   * @returns {Key}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython/Actor:JohnCleese').path()\n   * // => Key('/Comedy/MontyPython/Actor')\n   * ```\n   */\n\n\n  path() {\n    let p = this.parent().toString();\n\n    if (!p.endsWith(pathSepS)) {\n      p += pathSepS;\n    }\n\n    p += this.type();\n    return new Key(p);\n  }\n  /**\n   * Returns the `parent` Key of this Key.\n   *\n   * @returns {Key}\n   *\n   * @example\n   * ```js\n   * new Key(\"/Comedy/MontyPython/Actor:JohnCleese\").parent()\n   * // => Key(\"/Comedy/MontyPython\")\n   * ```\n   */\n\n\n  parent() {\n    const list = this.list();\n\n    if (list.length === 1) {\n      return new Key(pathSepS);\n    }\n\n    return new Key(list.slice(0, -1).join(pathSepS));\n  }\n  /**\n   * Returns the `child` Key of this Key.\n   *\n   * @param {Key} key - The child Key to add\n   * @returns {Key}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython').child(new Key('Actor:JohnCleese'))\n   * // => Key('/Comedy/MontyPython/Actor:JohnCleese')\n   * ```\n   */\n\n\n  child(key) {\n    if (this.toString() === pathSepS) {\n      return key;\n    } else if (key.toString() === pathSepS) {\n      return this;\n    }\n\n    return new Key(this.toString() + key.toString(), false);\n  }\n  /**\n   * Returns whether this key is a prefix of `other`\n   *\n   * @param {Key} other - The other key to test against\n   * @returns {boolean}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy').isAncestorOf('/Comedy/MontyPython')\n   * // => true\n   * ```\n   */\n\n\n  isAncestorOf(other) {\n    if (other.toString() === this.toString()) {\n      return false;\n    }\n\n    return other.toString().startsWith(this.toString());\n  }\n  /**\n   * Returns whether this key is a contains another as prefix.\n   *\n   * @param {Key} other - The other Key to test against\n   * @returns {boolean}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython').isDecendantOf('/Comedy')\n   * // => true\n   * ```\n   */\n\n\n  isDecendantOf(other) {\n    if (other.toString() === this.toString()) {\n      return false;\n    }\n\n    return this.toString().startsWith(other.toString());\n  }\n  /**\n   * Checks if this key has only one namespace.\n   *\n   * @returns {boolean}\n   *\n   */\n\n\n  isTopLevel() {\n    return this.list().length === 1;\n  }\n  /**\n   * Concats one or more Keys into one new Key.\n   *\n   * @param {Array<Key>} keys - The array of keys to concatenate\n   * @returns {Key}\n   */\n\n\n  concat() {\n    for (var _len = arguments.length, keys = new Array(_len), _key = 0; _key < _len; _key++) {\n      keys[_key] = arguments[_key];\n    }\n\n    return Key.withNamespaces([...this.namespaces(), ...flatten(keys.map(key => key.namespaces()))]);\n  }\n\n}\n/**\n * The first component of a namespace. `foo` in `foo:bar`\n *\n * @param {string} ns\n * @returns {string}\n */\n\n\nfunction namespaceType(ns) {\n  const parts = ns.split(':');\n\n  if (parts.length < 2) {\n    return '';\n  }\n\n  return parts.slice(0, -1).join(':');\n}\n/**\n * The last component of a namespace, `baz` in `foo:bar:baz`.\n *\n * @param {string} ns\n * @returns {string}\n */\n\n\nfunction namespaceValue(ns) {\n  const parts = ns.split(':');\n  return parts[parts.length - 1];\n}\n/**\n * Flatten array of arrays (only one level)\n *\n * @template T\n * @param {Array<T|T[]>} arr\n * @returns {T[]}\n */\n\n\nfunction flatten(arr) {\n  return (\n    /** @type {T[]} */\n    [].concat(...arr)\n  );\n}\n\nmodule.exports = Key;","map":{"version":3,"names":["nanoid","require","toString","uint8ArrayToString","fromString","uint8ArrayFromString","pathSepS","pathSepB","TextEncoder","encode","pathSep","Key","constructor","s","clean","_buf","Uint8Array","Error","byteLength","encoding","uint8Array","Symbol","toStringTag","withNamespaces","list","join","random","replace","asKey","other","bytes","fill","set","subarray","less","key","list1","list2","i","length","c1","c2","reverse","slice","namespaces","baseNamespace","ns","split","type","namespaceType","name","namespaceValue","instance","path","p","parent","endsWith","child","isAncestorOf","startsWith","isDecendantOf","isTopLevel","concat","keys","flatten","map","parts","arr","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/interface-datastore/src/key.js"],"sourcesContent":["'use strict'\n\nconst { nanoid } = require('nanoid')\n\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\n\nconst pathSepS = '/'\nconst pathSepB = new TextEncoder().encode(pathSepS)\nconst pathSep = pathSepB[0]\n\n/**\n * A Key represents the unique identifier of an object.\n * Our Key scheme is inspired by file systems and Google App Engine key model.\n * Keys are meant to be unique across a system. Keys are hierarchical,\n * incorporating more and more specific namespaces. Thus keys can be deemed\n * 'children' or 'ancestors' of other keys:\n * - `new Key('/Comedy')`\n * - `new Key('/Comedy/MontyPython')`\n * Also, every namespace can be parametrized to embed relevant object\n * information. For example, the Key `name` (most specific namespace) could\n * include the object type:\n * - `new Key('/Comedy/MontyPython/Actor:JohnCleese')`\n * - `new Key('/Comedy/MontyPython/Sketch:CheeseShop')`\n * - `new Key('/Comedy/MontyPython/Sketch:CheeseShop/Character:Mousebender')`\n *\n */\nclass Key {\n  /**\n   * @param {string | Uint8Array} s\n   * @param {boolean} [clean]\n   */\n  constructor (s, clean) {\n    if (typeof s === 'string') {\n      this._buf = uint8ArrayFromString(s)\n    } else if (s instanceof Uint8Array) {\n      this._buf = s\n    } else {\n      throw new Error('Invalid key, should be String of Uint8Array')\n    }\n\n    if (clean == null) {\n      clean = true\n    }\n\n    if (clean) {\n      this.clean()\n    }\n\n    if (this._buf.byteLength === 0 || this._buf[0] !== pathSep) {\n      throw new Error('Invalid key')\n    }\n  }\n\n  /**\n   * Convert to the string representation\n   *\n   * @param {import('uint8arrays/to-string').SupportedEncodings} [encoding='utf8'] - The encoding to use.\n   * @returns {string}\n   */\n  toString (encoding = 'utf8') {\n    return uint8ArrayToString(this._buf, encoding)\n  }\n\n  /**\n   * Return the Uint8Array representation of the key\n   *\n   * @returns {Uint8Array}\n   */\n  uint8Array () {\n    return this._buf\n  }\n\n  /**\n   * Return string representation of the key\n   *\n   * @returns {string}\n   */\n  get [Symbol.toStringTag] () {\n    return `Key(${this.toString()})`\n  }\n\n  /**\n   * Constructs a key out of a namespace array.\n   *\n   * @param {Array<string>} list - The array of namespaces\n   * @returns {Key}\n   *\n   * @example\n   * ```js\n   * Key.withNamespaces(['one', 'two'])\n   * // => Key('/one/two')\n   * ```\n   */\n  static withNamespaces (list) {\n    return new Key(list.join(pathSepS))\n  }\n\n  /**\n   * Returns a randomly (uuid) generated key.\n   *\n   * @returns {Key}\n   *\n   * @example\n   * ```js\n   * Key.random()\n   * // => Key('/f98719ea086343f7b71f32ea9d9d521d')\n   * ```\n   */\n  static random () {\n    return new Key(nanoid().replace(/-/g, ''))\n  }\n\n  /**\n   * @param {*} other\n   */\n  static asKey (other) {\n    if (other instanceof Uint8Array || typeof other === 'string') {\n      // we can create a key from this\n      return new Key(other)\n    }\n\n    if (other.uint8Array) {\n      // this is an older version or may have crossed the esm/cjs boundary\n      return new Key(other.uint8Array())\n    }\n\n    return null\n  }\n\n  /**\n   * Cleanup the current key\n   *\n   * @returns {void}\n   */\n  clean () {\n    if (!this._buf || this._buf.byteLength === 0) {\n      this._buf = pathSepB\n    }\n\n    if (this._buf[0] !== pathSep) {\n      const bytes = new Uint8Array(this._buf.byteLength + 1)\n      bytes.fill(pathSep, 0, 1)\n      bytes.set(this._buf, 1)\n      this._buf = bytes\n    }\n\n    // normalize does not remove trailing slashes\n    while (this._buf.byteLength > 1 && this._buf[this._buf.byteLength - 1] === pathSep) {\n      this._buf = this._buf.subarray(0, -1)\n    }\n  }\n\n  /**\n   * Check if the given key is sorted lower than ourself.\n   *\n   * @param {Key} key - The other Key to check against\n   * @returns {boolean}\n   */\n  less (key) {\n    const list1 = this.list()\n    const list2 = key.list()\n\n    for (let i = 0; i < list1.length; i++) {\n      if (list2.length < i + 1) {\n        return false\n      }\n\n      const c1 = list1[i]\n      const c2 = list2[i]\n\n      if (c1 < c2) {\n        return true\n      } else if (c1 > c2) {\n        return false\n      }\n    }\n\n    return list1.length < list2.length\n  }\n\n  /**\n   * Returns the key with all parts in reversed order.\n   *\n   * @returns {Key}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython/Actor:JohnCleese').reverse()\n   * // => Key('/Actor:JohnCleese/MontyPython/Comedy')\n   * ```\n   */\n  reverse () {\n    return Key.withNamespaces(this.list().slice().reverse())\n  }\n\n  /**\n   * Returns the `namespaces` making up this Key.\n   *\n   * @returns {Array<string>}\n   */\n  namespaces () {\n    return this.list()\n  }\n\n  /** Returns the \"base\" namespace of this key.\n   *\n   * @returns {string}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython/Actor:JohnCleese').baseNamespace()\n   * // => 'Actor:JohnCleese'\n   * ```\n   */\n  baseNamespace () {\n    const ns = this.namespaces()\n    return ns[ns.length - 1]\n  }\n\n  /**\n   * Returns the `list` representation of this key.\n   *\n   * @returns {Array<string>}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython/Actor:JohnCleese').list()\n   * // => ['Comedy', 'MontyPythong', 'Actor:JohnCleese']\n   * ```\n   */\n  list () {\n    return this.toString().split(pathSepS).slice(1)\n  }\n\n  /**\n   * Returns the \"type\" of this key (value of last namespace).\n   *\n   * @returns {string}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython/Actor:JohnCleese').type()\n   * // => 'Actor'\n   * ```\n   */\n  type () {\n    return namespaceType(this.baseNamespace())\n  }\n\n  /**\n   * Returns the \"name\" of this key (field of last namespace).\n   *\n   * @returns {string}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython/Actor:JohnCleese').name()\n   * // => 'JohnCleese'\n   * ```\n   */\n  name () {\n    return namespaceValue(this.baseNamespace())\n  }\n\n  /**\n   * Returns an \"instance\" of this type key (appends value to namespace).\n   *\n   * @param {string} s - The string to append.\n   * @returns {Key}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython/Actor').instance('JohnClesse')\n   * // => Key('/Comedy/MontyPython/Actor:JohnCleese')\n   * ```\n   */\n  instance (s) {\n    return new Key(this.toString() + ':' + s)\n  }\n\n  /**\n   * Returns the \"path\" of this key (parent + type).\n   *\n   * @returns {Key}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython/Actor:JohnCleese').path()\n   * // => Key('/Comedy/MontyPython/Actor')\n   * ```\n   */\n  path () {\n    let p = this.parent().toString()\n    if (!p.endsWith(pathSepS)) {\n      p += pathSepS\n    }\n    p += this.type()\n    return new Key(p)\n  }\n\n  /**\n   * Returns the `parent` Key of this Key.\n   *\n   * @returns {Key}\n   *\n   * @example\n   * ```js\n   * new Key(\"/Comedy/MontyPython/Actor:JohnCleese\").parent()\n   * // => Key(\"/Comedy/MontyPython\")\n   * ```\n   */\n  parent () {\n    const list = this.list()\n    if (list.length === 1) {\n      return new Key(pathSepS)\n    }\n\n    return new Key(list.slice(0, -1).join(pathSepS))\n  }\n\n  /**\n   * Returns the `child` Key of this Key.\n   *\n   * @param {Key} key - The child Key to add\n   * @returns {Key}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython').child(new Key('Actor:JohnCleese'))\n   * // => Key('/Comedy/MontyPython/Actor:JohnCleese')\n   * ```\n   */\n  child (key) {\n    if (this.toString() === pathSepS) {\n      return key\n    } else if (key.toString() === pathSepS) {\n      return this\n    }\n\n    return new Key(this.toString() + key.toString(), false)\n  }\n\n  /**\n   * Returns whether this key is a prefix of `other`\n   *\n   * @param {Key} other - The other key to test against\n   * @returns {boolean}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy').isAncestorOf('/Comedy/MontyPython')\n   * // => true\n   * ```\n   */\n  isAncestorOf (other) {\n    if (other.toString() === this.toString()) {\n      return false\n    }\n\n    return other.toString().startsWith(this.toString())\n  }\n\n  /**\n   * Returns whether this key is a contains another as prefix.\n   *\n   * @param {Key} other - The other Key to test against\n   * @returns {boolean}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython').isDecendantOf('/Comedy')\n   * // => true\n   * ```\n   */\n  isDecendantOf (other) {\n    if (other.toString() === this.toString()) {\n      return false\n    }\n\n    return this.toString().startsWith(other.toString())\n  }\n\n  /**\n   * Checks if this key has only one namespace.\n   *\n   * @returns {boolean}\n   *\n   */\n  isTopLevel () {\n    return this.list().length === 1\n  }\n\n  /**\n   * Concats one or more Keys into one new Key.\n   *\n   * @param {Array<Key>} keys - The array of keys to concatenate\n   * @returns {Key}\n   */\n  concat (...keys) {\n    return Key.withNamespaces([...this.namespaces(), ...flatten(keys.map(key => key.namespaces()))])\n  }\n}\n\n/**\n * The first component of a namespace. `foo` in `foo:bar`\n *\n * @param {string} ns\n * @returns {string}\n */\nfunction namespaceType (ns) {\n  const parts = ns.split(':')\n  if (parts.length < 2) {\n    return ''\n  }\n  return parts.slice(0, -1).join(':')\n}\n\n/**\n * The last component of a namespace, `baz` in `foo:bar:baz`.\n *\n * @param {string} ns\n * @returns {string}\n */\nfunction namespaceValue (ns) {\n  const parts = ns.split(':')\n  return parts[parts.length - 1]\n}\n\n/**\n * Flatten array of arrays (only one level)\n *\n * @template T\n * @param {Array<T|T[]>} arr\n * @returns {T[]}\n */\nfunction flatten (arr) {\n  return /** @type {T[]} */([]).concat(...arr)\n}\n\nmodule.exports = Key\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}