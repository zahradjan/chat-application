{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('../../types').NetworkService} config.network\n */\n\n\nmodule.exports = function (_ref) {\n  var network = _ref.network;\n\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API[\"connect\"]}\n   */\n  function connect(_x) {\n    return _connect.apply(this, arguments);\n  }\n\n  function _connect() {\n    _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(addr) {\n      var options,\n          _yield$network$use,\n          libp2p,\n          _args = arguments;\n\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _context.next = 3;\n              return network.use(options);\n\n            case 3:\n              _yield$network$use = _context.sent;\n              libp2p = _yield$network$use.libp2p;\n              _context.next = 7;\n              return libp2p.dial(addr, options);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _connect.apply(this, arguments);\n  }\n\n  return withTimeoutOption(connect);\n};","map":{"version":3,"names":["withTimeoutOption","require","module","exports","network","connect","addr","options","use","libp2p","dial"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/swarm/connect.js"],"sourcesContent":["'use strict'\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @param {Object} config\n * @param {import('../../types').NetworkService} config.network\n */\nmodule.exports = ({ network }) => {\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API[\"connect\"]}\n   */\n  async function connect (addr, options = {}) {\n    const { libp2p } = await network.use(options)\n    await libp2p.dial(addr, options)\n  }\n\n  return withTimeoutOption(connect)\n}\n"],"mappings":"AAAA;;;;;;AAEA,IAAMA,iBAAiB,GAAGC,OAAO,CAAC,yCAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,gBAAiB;EAAA,IAAdC,OAAc,QAAdA,OAAc;;EAChC;AACF;AACA;EAHkC,SAIjBC,OAJiB;IAAA;EAAA;;EAAA;IAAA,sEAIhC,iBAAwBC,IAAxB;MAAA;MAAA;MAAA;MAAA;;MAAA;QAAA;UAAA;YAAA;cAA8BC,OAA9B,2DAAwC,EAAxC;cAAA;cAAA,OAC2BH,OAAO,CAACI,GAAR,CAAYD,OAAZ,CAD3B;;YAAA;cAAA;cACUE,MADV,sBACUA,MADV;cAAA;cAAA,OAEQA,MAAM,CAACC,IAAP,CAAYJ,IAAZ,EAAkBC,OAAlB,CAFR;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAJgC;IAAA;EAAA;;EAShC,OAAOP,iBAAiB,CAACK,OAAD,CAAxB;AACD,CAVD"},"metadata":{},"sourceType":"script"}