{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @typedef {import('multiformats/cid').CIDVersion} CIDVersion\n */\n\n/**\n * @param {Object} config\n * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n * @param {import('ipfs-core-utils/src/multihashes')} config.hashers\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n *\n */\n\n\nmodule.exports = function (_ref) {\n  var codecs = _ref.codecs,\n      hashers = _ref.hashers,\n      repo = _ref.repo,\n      preload = _ref.preload;\n\n  /**\n   * @type {import('ipfs-core-types/src/block').API[\"put\"]}\n   */\n  function put(_x) {\n    return _put.apply(this, arguments);\n  }\n\n  function _put() {\n    _put = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(block) {\n      var options,\n          release,\n          cidVersion,\n          codecName,\n          hasher,\n          hash,\n          codec,\n          cid,\n          _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n\n              if (!options.pin) {\n                _context.next = 7;\n                break;\n              }\n\n              _context.next = 4;\n              return repo.gcLock.readLock();\n\n            case 4:\n              _context.t0 = _context.sent;\n              _context.next = 8;\n              break;\n\n            case 7:\n              _context.t0 = null;\n\n            case 8:\n              release = _context.t0;\n              _context.prev = 9;\n              cidVersion = options.version != null ? options.version : 0;\n              codecName = options.format || (cidVersion === 0 ? 'dag-pb' : 'raw');\n              _context.next = 14;\n              return hashers.getHasher(options.mhtype || 'sha2-256');\n\n            case 14:\n              hasher = _context.sent;\n              _context.next = 17;\n              return hasher.digest(block);\n\n            case 17:\n              hash = _context.sent;\n              _context.next = 20;\n              return codecs.getCodec(codecName);\n\n            case 20:\n              codec = _context.sent;\n              cid = CID.create(cidVersion, codec.code, hash);\n              _context.next = 24;\n              return repo.blocks.put(cid, block, {\n                signal: options.signal\n              });\n\n            case 24:\n              if (options.preload !== false) {\n                preload(cid);\n              }\n\n              if (!(options.pin === true)) {\n                _context.next = 28;\n                break;\n              }\n\n              _context.next = 28;\n              return repo.pins.pinRecursively(cid, {\n                signal: options.signal\n              });\n\n            case 28:\n              return _context.abrupt(\"return\", cid);\n\n            case 29:\n              _context.prev = 29;\n\n              if (release) {\n                release();\n              }\n\n              return _context.finish(29);\n\n            case 32:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[9,, 29, 32]]);\n    }));\n    return _put.apply(this, arguments);\n  }\n\n  return withTimeoutOption(put);\n};","map":{"version":3,"names":["require","CID","withTimeoutOption","module","exports","codecs","hashers","repo","preload","put","block","options","pin","gcLock","readLock","release","cidVersion","version","codecName","format","getHasher","mhtype","hasher","digest","hash","getCodec","codec","cid","create","code","blocks","signal","pins","pinRecursively"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/block/put.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @typedef {import('multiformats/cid').CIDVersion} CIDVersion\n */\n\n/**\n * @param {Object} config\n * @param {import('ipfs-core-utils/src/multicodecs')} config.codecs\n * @param {import('ipfs-core-utils/src/multihashes')} config.hashers\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n *\n */\nmodule.exports = ({ codecs, hashers, repo, preload }) => {\n  /**\n   * @type {import('ipfs-core-types/src/block').API[\"put\"]}\n   */\n  async function put (block, options = {}) {\n    const release = options.pin ? await repo.gcLock.readLock() : null\n\n    try {\n      const cidVersion = options.version != null ? options.version : 0\n      const codecName = options.format || (cidVersion === 0 ? 'dag-pb' : 'raw')\n\n      const hasher = await hashers.getHasher(options.mhtype || 'sha2-256')\n      const hash = await hasher.digest(block)\n      const codec = await codecs.getCodec(codecName)\n      const cid = CID.create(cidVersion, codec.code, hash)\n\n      await repo.blocks.put(cid, block, {\n        signal: options.signal\n      })\n\n      if (options.preload !== false) {\n        preload(cid)\n      }\n\n      if (options.pin === true) {\n        await repo.pins.pinRecursively(cid, {\n          signal: options.signal\n        })\n      }\n\n      return cid\n    } finally {\n      if (release) {\n        release()\n      }\n    }\n  }\n\n  return withTimeoutOption(put)\n}\n"],"mappings":"AAAA;;;;;;AAEA,eAAgBA,OAAO,CAAC,kBAAD,CAAvB;AAAA,IAAQC,GAAR,YAAQA,GAAR;;AACA,IAAMC,iBAAiB,GAAGF,OAAO,CAAC,yCAAD,CAAjC;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAG,MAAM,CAACC,OAAP,GAAiB,gBAAwC;EAAA,IAArCC,MAAqC,QAArCA,MAAqC;EAAA,IAA7BC,OAA6B,QAA7BA,OAA6B;EAAA,IAApBC,IAAoB,QAApBA,IAAoB;EAAA,IAAdC,OAAc,QAAdA,OAAc;;EACvD;AACF;AACA;EAHyD,SAIxCC,GAJwC;IAAA;EAAA;;EAAA;IAAA,kEAIvD,iBAAoBC,KAApB;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAA2BC,OAA3B,2DAAqC,EAArC;;cAAA,KACkBA,OAAO,CAACC,GAD1B;gBAAA;gBAAA;cAAA;;cAAA;cAAA,OACsCL,IAAI,CAACM,MAAL,CAAYC,QAAZ,EADtC;;YAAA;cAAA;cAAA;cAAA;;YAAA;cAAA,cAC+D,IAD/D;;YAAA;cACQC,OADR;cAAA;cAIUC,UAJV,GAIuBL,OAAO,CAACM,OAAR,IAAmB,IAAnB,GAA0BN,OAAO,CAACM,OAAlC,GAA4C,CAJnE;cAKUC,SALV,GAKsBP,OAAO,CAACQ,MAAR,KAAmBH,UAAU,KAAK,CAAf,GAAmB,QAAnB,GAA8B,KAAjD,CALtB;cAAA;cAAA,OAOyBV,OAAO,CAACc,SAAR,CAAkBT,OAAO,CAACU,MAAR,IAAkB,UAApC,CAPzB;;YAAA;cAOUC,MAPV;cAAA;cAAA,OAQuBA,MAAM,CAACC,MAAP,CAAcb,KAAd,CARvB;;YAAA;cAQUc,IARV;cAAA;cAAA,OASwBnB,MAAM,CAACoB,QAAP,CAAgBP,SAAhB,CATxB;;YAAA;cASUQ,KATV;cAUUC,GAVV,GAUgB1B,GAAG,CAAC2B,MAAJ,CAAWZ,UAAX,EAAuBU,KAAK,CAACG,IAA7B,EAAmCL,IAAnC,CAVhB;cAAA;cAAA,OAYUjB,IAAI,CAACuB,MAAL,CAAYrB,GAAZ,CAAgBkB,GAAhB,EAAqBjB,KAArB,EAA4B;gBAChCqB,MAAM,EAAEpB,OAAO,CAACoB;cADgB,CAA5B,CAZV;;YAAA;cAgBI,IAAIpB,OAAO,CAACH,OAAR,KAAoB,KAAxB,EAA+B;gBAC7BA,OAAO,CAACmB,GAAD,CAAP;cACD;;cAlBL,MAoBQhB,OAAO,CAACC,GAAR,KAAgB,IApBxB;gBAAA;gBAAA;cAAA;;cAAA;cAAA,OAqBYL,IAAI,CAACyB,IAAL,CAAUC,cAAV,CAAyBN,GAAzB,EAA8B;gBAClCI,MAAM,EAAEpB,OAAO,CAACoB;cADkB,CAA9B,CArBZ;;YAAA;cAAA,iCA0BWJ,GA1BX;;YAAA;cAAA;;cA4BI,IAAIZ,OAAJ,EAAa;gBACXA,OAAO;cACR;;cA9BL;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAJuD;IAAA;EAAA;;EAsCvD,OAAOb,iBAAiB,CAACO,GAAD,CAAxB;AACD,CAvCD"},"metadata":{},"sourceType":"script"}