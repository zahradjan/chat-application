{"ast":null,"code":"'use strict';\n\nconst defaultConfig = require('../../runtime/config-nodejs.js');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst {\n  Multiaddr\n} = require('multiaddr');\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\n\n\nmodule.exports = _ref => {\n  let {\n    repo\n  } = _ref;\n\n  /**\n   * @type {import('ipfs-core-types/src/bootstrap').API[\"reset\"]}\n   */\n  async function reset() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    /** @type {import('ipfs-core-types/src/config').Config} */\n    // @ts-ignore repo returns type unknown\n    const config = await repo.config.getAll(options);\n    config.Bootstrap = defaultConfig().Bootstrap;\n    await repo.config.replace(config);\n    return {\n      Peers: defaultConfig().Bootstrap.map(ma => new Multiaddr(ma))\n    };\n  }\n\n  return withTimeoutOption(reset);\n};","map":{"version":3,"names":["defaultConfig","require","withTimeoutOption","Multiaddr","module","exports","repo","reset","options","config","getAll","Bootstrap","replace","Peers","map","ma"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/bootstrap/reset.js"],"sourcesContent":["'use strict'\n\nconst defaultConfig = require('../../runtime/config-nodejs.js')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst { Multiaddr } = require('multiaddr')\n\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nmodule.exports = ({ repo }) => {\n  /**\n   * @type {import('ipfs-core-types/src/bootstrap').API[\"reset\"]}\n   */\n  async function reset (options = {}) {\n    /** @type {import('ipfs-core-types/src/config').Config} */\n    // @ts-ignore repo returns type unknown\n    const config = await repo.config.getAll(options)\n    config.Bootstrap = defaultConfig().Bootstrap\n\n    await repo.config.replace(config)\n\n    return {\n      Peers: defaultConfig().Bootstrap.map(ma => new Multiaddr(ma))\n    }\n  }\n\n  return withTimeoutOption(reset)\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,aAAa,GAAGC,OAAO,CAAC,gCAAD,CAA7B;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,yCAAD,CAAjC;;AACA,MAAM;EAAEE;AAAF,IAAgBF,OAAO,CAAC,WAAD,CAA7B;AAEA;AACA;AACA;AACA;;;AACAG,MAAM,CAACC,OAAP,GAAiB,QAAc;EAAA,IAAb;IAAEC;EAAF,CAAa;;EAC7B;AACF;AACA;EACE,eAAeC,KAAf,GAAoC;IAAA,IAAdC,OAAc,uEAAJ,EAAI;;IAClC;IACA;IACA,MAAMC,MAAM,GAAG,MAAMH,IAAI,CAACG,MAAL,CAAYC,MAAZ,CAAmBF,OAAnB,CAArB;IACAC,MAAM,CAACE,SAAP,GAAmBX,aAAa,GAAGW,SAAnC;IAEA,MAAML,IAAI,CAACG,MAAL,CAAYG,OAAZ,CAAoBH,MAApB,CAAN;IAEA,OAAO;MACLI,KAAK,EAAEb,aAAa,GAAGW,SAAhB,CAA0BG,GAA1B,CAA8BC,EAAE,IAAI,IAAIZ,SAAJ,CAAcY,EAAd,CAApC;IADF,CAAP;EAGD;;EAED,OAAOb,iBAAiB,CAACK,KAAD,CAAxB;AACD,CAlBD"},"metadata":{},"sourceType":"script"}