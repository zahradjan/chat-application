{"ast":null,"code":"'use strict';\n/**\n * @typedef {Object} FixedChunkerOptions\n * @property {'fixed'} chunker\n * @property {number} [maxChunkSize]\n *\n * @typedef {Object} RabinChunkerOptions\n * @property {'rabin'} chunker\n * @property {number} avgChunkSize\n * @property {number} [minChunkSize]\n * @property {number} [maxChunkSize]\n *\n * @typedef {FixedChunkerOptions|RabinChunkerOptions} ChunkerOptions\n *\n * Parses chunker string into options used by DAGBuilder in ipfs-unixfs-engine\n *\n *\n * @param  {string} [chunker] - Chunker algorithm supported formats:\n * \"size-{size}\"\n * \"rabin\"\n * \"rabin-{avg}\"\n * \"rabin-{min}-{avg}-{max}\"\n *\n * @returns {ChunkerOptions}   Chunker options for DAGBuilder\n */\n\nvar _objectSpread = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar parseChunkerString = function parseChunkerString(chunker) {\n  if (!chunker) {\n    return {\n      chunker: 'fixed'\n    };\n  } else if (chunker.startsWith('size-')) {\n    var sizeStr = chunker.split('-')[1];\n    var size = parseInt(sizeStr);\n\n    if (isNaN(size)) {\n      throw new Error('Chunker parameter size must be an integer');\n    }\n\n    return {\n      chunker: 'fixed',\n      maxChunkSize: size\n    };\n  } else if (chunker.startsWith('rabin')) {\n    return _objectSpread({\n      chunker: 'rabin'\n    }, parseRabinString(chunker));\n  } else {\n    throw new Error(\"Unrecognized chunker option: \".concat(chunker));\n  }\n};\n/**\n * @typedef {Object} RabinChunkerSettings\n * @property {number} avgChunkSize\n * @property {number} [minChunkSize]\n * @property {number} [maxChunkSize]\n *\n * Parses rabin chunker string\n *\n * @param  {string}   chunker - Chunker algorithm supported formats:\n * \"rabin\"\n * \"rabin-{avg}\"\n * \"rabin-{min}-{avg}-{max}\"\n *\n * @returns {RabinChunkerSettings}   rabin chunker options\n */\n\n\nvar parseRabinString = function parseRabinString(chunker) {\n  var options = {};\n  var parts = chunker.split('-');\n\n  switch (parts.length) {\n    case 1:\n      options.avgChunkSize = 262144;\n      break;\n\n    case 2:\n      options.avgChunkSize = parseChunkSize(parts[1], 'avg');\n      break;\n\n    case 4:\n      options.minChunkSize = parseChunkSize(parts[1], 'min');\n      options.avgChunkSize = parseChunkSize(parts[2], 'avg');\n      options.maxChunkSize = parseChunkSize(parts[3], 'max');\n      break;\n\n    default:\n      throw new Error('Incorrect chunker format (expected \"rabin\" \"rabin-[avg]\" or \"rabin-[min]-[avg]-[max]\"');\n  }\n\n  return options;\n};\n/**\n *\n * @param {string} str\n * @param {string} name\n * @returns {number}\n */\n\n\nvar parseChunkSize = function parseChunkSize(str, name) {\n  var size = parseInt(str);\n\n  if (isNaN(size)) {\n    throw new Error(\"Chunker parameter \".concat(name, \" must be an integer\"));\n  }\n\n  return size;\n};\n\nmodule.exports = {\n  parseChunkSize: parseChunkSize,\n  parseRabinString: parseRabinString,\n  parseChunkerString: parseChunkerString\n};","map":{"version":3,"names":["parseChunkerString","chunker","startsWith","sizeStr","split","size","parseInt","isNaN","Error","maxChunkSize","parseRabinString","options","parts","length","avgChunkSize","parseChunkSize","minChunkSize","str","name","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/add-all/utils.js"],"sourcesContent":["'use strict'\n\n/**\n * @typedef {Object} FixedChunkerOptions\n * @property {'fixed'} chunker\n * @property {number} [maxChunkSize]\n *\n * @typedef {Object} RabinChunkerOptions\n * @property {'rabin'} chunker\n * @property {number} avgChunkSize\n * @property {number} [minChunkSize]\n * @property {number} [maxChunkSize]\n *\n * @typedef {FixedChunkerOptions|RabinChunkerOptions} ChunkerOptions\n *\n * Parses chunker string into options used by DAGBuilder in ipfs-unixfs-engine\n *\n *\n * @param  {string} [chunker] - Chunker algorithm supported formats:\n * \"size-{size}\"\n * \"rabin\"\n * \"rabin-{avg}\"\n * \"rabin-{min}-{avg}-{max}\"\n *\n * @returns {ChunkerOptions}   Chunker options for DAGBuilder\n */\nconst parseChunkerString = (chunker) => {\n  if (!chunker) {\n    return {\n      chunker: 'fixed'\n    }\n  } else if (chunker.startsWith('size-')) {\n    const sizeStr = chunker.split('-')[1]\n    const size = parseInt(sizeStr)\n    if (isNaN(size)) {\n      throw new Error('Chunker parameter size must be an integer')\n    }\n    return {\n      chunker: 'fixed',\n      maxChunkSize: size\n    }\n  } else if (chunker.startsWith('rabin')) {\n    return {\n      chunker: 'rabin',\n      ...parseRabinString(chunker)\n    }\n  } else {\n    throw new Error(`Unrecognized chunker option: ${chunker}`)\n  }\n}\n\n/**\n * @typedef {Object} RabinChunkerSettings\n * @property {number} avgChunkSize\n * @property {number} [minChunkSize]\n * @property {number} [maxChunkSize]\n *\n * Parses rabin chunker string\n *\n * @param  {string}   chunker - Chunker algorithm supported formats:\n * \"rabin\"\n * \"rabin-{avg}\"\n * \"rabin-{min}-{avg}-{max}\"\n *\n * @returns {RabinChunkerSettings}   rabin chunker options\n */\nconst parseRabinString = (chunker) => {\n  const options = {}\n  const parts = chunker.split('-')\n  switch (parts.length) {\n    case 1:\n      options.avgChunkSize = 262144\n      break\n    case 2:\n      options.avgChunkSize = parseChunkSize(parts[1], 'avg')\n      break\n    case 4:\n      options.minChunkSize = parseChunkSize(parts[1], 'min')\n      options.avgChunkSize = parseChunkSize(parts[2], 'avg')\n      options.maxChunkSize = parseChunkSize(parts[3], 'max')\n      break\n    default:\n      throw new Error('Incorrect chunker format (expected \"rabin\" \"rabin-[avg]\" or \"rabin-[min]-[avg]-[max]\"')\n  }\n\n  return options\n}\n\n/**\n *\n * @param {string} str\n * @param {string} name\n * @returns {number}\n */\nconst parseChunkSize = (str, name) => {\n  const size = parseInt(str)\n  if (isNaN(size)) {\n    throw new Error(`Chunker parameter ${name} must be an integer`)\n  }\n\n  return size\n}\n\nmodule.exports = {\n  parseChunkSize,\n  parseRabinString,\n  parseChunkerString\n}\n"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,IAAMA,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,OAAD,EAAa;EACtC,IAAI,CAACA,OAAL,EAAc;IACZ,OAAO;MACLA,OAAO,EAAE;IADJ,CAAP;EAGD,CAJD,MAIO,IAAIA,OAAO,CAACC,UAAR,CAAmB,OAAnB,CAAJ,EAAiC;IACtC,IAAMC,OAAO,GAAGF,OAAO,CAACG,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAAhB;IACA,IAAMC,IAAI,GAAGC,QAAQ,CAACH,OAAD,CAArB;;IACA,IAAII,KAAK,CAACF,IAAD,CAAT,EAAiB;MACf,MAAM,IAAIG,KAAJ,CAAU,2CAAV,CAAN;IACD;;IACD,OAAO;MACLP,OAAO,EAAE,OADJ;MAELQ,YAAY,EAAEJ;IAFT,CAAP;EAID,CAVM,MAUA,IAAIJ,OAAO,CAACC,UAAR,CAAmB,OAAnB,CAAJ,EAAiC;IACtC;MACED,OAAO,EAAE;IADX,GAEKS,gBAAgB,CAACT,OAAD,CAFrB;EAID,CALM,MAKA;IACL,MAAM,IAAIO,KAAJ,wCAA0CP,OAA1C,EAAN;EACD;AACF,CAvBD;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMS,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACT,OAAD,EAAa;EACpC,IAAMU,OAAO,GAAG,EAAhB;EACA,IAAMC,KAAK,GAAGX,OAAO,CAACG,KAAR,CAAc,GAAd,CAAd;;EACA,QAAQQ,KAAK,CAACC,MAAd;IACE,KAAK,CAAL;MACEF,OAAO,CAACG,YAAR,GAAuB,MAAvB;MACA;;IACF,KAAK,CAAL;MACEH,OAAO,CAACG,YAAR,GAAuBC,cAAc,CAACH,KAAK,CAAC,CAAD,CAAN,EAAW,KAAX,CAArC;MACA;;IACF,KAAK,CAAL;MACED,OAAO,CAACK,YAAR,GAAuBD,cAAc,CAACH,KAAK,CAAC,CAAD,CAAN,EAAW,KAAX,CAArC;MACAD,OAAO,CAACG,YAAR,GAAuBC,cAAc,CAACH,KAAK,CAAC,CAAD,CAAN,EAAW,KAAX,CAArC;MACAD,OAAO,CAACF,YAAR,GAAuBM,cAAc,CAACH,KAAK,CAAC,CAAD,CAAN,EAAW,KAAX,CAArC;MACA;;IACF;MACE,MAAM,IAAIJ,KAAJ,CAAU,uFAAV,CAAN;EAbJ;;EAgBA,OAAOG,OAAP;AACD,CApBD;AAsBA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMI,cAAc,GAAG,SAAjBA,cAAiB,CAACE,GAAD,EAAMC,IAAN,EAAe;EACpC,IAAMb,IAAI,GAAGC,QAAQ,CAACW,GAAD,CAArB;;EACA,IAAIV,KAAK,CAACF,IAAD,CAAT,EAAiB;IACf,MAAM,IAAIG,KAAJ,6BAA+BU,IAA/B,yBAAN;EACD;;EAED,OAAOb,IAAP;AACD,CAPD;;AASAc,MAAM,CAACC,OAAP,GAAiB;EACfL,cAAc,EAAdA,cADe;EAEfL,gBAAgB,EAAhBA,gBAFe;EAGfV,kBAAkB,EAAlBA;AAHe,CAAjB"},"metadata":{},"sourceType":"script"}