{"ast":null,"code":"'use strict';\n\nconst mergeOptions = require('merge-options').bind({\n  ignoreUndefined: true\n});\n\nconst toMfsPath = require('./utils/to-mfs-path');\n\nconst log = require('debug')('ipfs:mfs:touch');\n\nconst errCode = require('err-code');\n\nconst {\n  UnixFS\n} = require('ipfs-unixfs');\n\nconst toTrail = require('./utils/to-trail');\n\nconst addLink = require('./utils/add-link');\n\nconst updateTree = require('./utils/update-tree');\n\nconst updateMfsRoot = require('./utils/update-mfs-root');\n\nconst dagPb = require('@ipld/dag-pb');\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @typedef {import('multiformats/cid').CIDVersion} CIDVersion\n * @typedef {import('ipfs-unixfs').MtimeLike} MtimeLike\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} flush\n * @property {number} shardSplitThreshold\n * @property {CIDVersion} cidVersion\n * @property {string} hashAlg\n * @property {MtimeLike} [mtime]\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\n\n\nconst defaultOptions = {\n  flush: true,\n  shardSplitThreshold: 1000,\n  cidVersion: 0,\n  hashAlg: 'sha2-256'\n};\n/**\n * @param {MfsContext} context\n */\n\nmodule.exports = context => {\n  /**\n   * @type {import('ipfs-core-types/src/files').API[\"touch\"]}\n   */\n  async function mfsTouch(path) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    /** @type {DefaultOptions} */\n    const settings = mergeOptions(defaultOptions, options);\n    settings.mtime = settings.mtime || new Date();\n    log(`Touching ${path} mtime: ${settings.mtime}`);\n    const {\n      cid,\n      mfsDirectory,\n      name,\n      exists\n    } = await toMfsPath(context, path, settings);\n    const hashAlg = options.hashAlg || defaultOptions.hashAlg;\n    const hasher = await context.hashers.getHasher(hashAlg);\n    let updatedBlock;\n    let updatedCid;\n    let cidVersion = settings.cidVersion;\n\n    if (!exists) {\n      const metadata = new UnixFS({\n        type: 'file',\n        // @ts-ignore TODO: restore hrtime support to ipfs-unixfs constructor - it's in the code, just not the signature\n        mtime: settings.mtime\n      });\n      updatedBlock = dagPb.encode({\n        Data: metadata.marshal(),\n        Links: []\n      });\n      const hash = await hasher.digest(updatedBlock);\n      updatedCid = CID.create(settings.cidVersion, dagPb.code, hash);\n\n      if (settings.flush) {\n        await context.repo.blocks.put(updatedCid, updatedBlock);\n      }\n    } else {\n      if (cid.code !== dagPb.code) {\n        throw errCode(new Error(`${path} was not a UnixFS node`), 'ERR_NOT_UNIXFS');\n      }\n\n      cidVersion = cid.version;\n      const block = await context.repo.blocks.get(cid);\n      const node = dagPb.decode(block);\n\n      if (!node.Data) {\n        throw errCode(new Error(`${path} had no data`), 'ERR_INVALID_NODE');\n      }\n\n      const metadata = UnixFS.unmarshal(node.Data); // @ts-ignore TODO: restore setting all date types as mtime - it's in the code, just not the signature\n\n      metadata.mtime = settings.mtime;\n      updatedBlock = dagPb.encode({\n        Data: metadata.marshal(),\n        Links: node.Links\n      });\n      const hash = await hasher.digest(updatedBlock);\n      updatedCid = CID.create(settings.cidVersion, dagPb.code, hash);\n\n      if (settings.flush) {\n        await context.repo.blocks.put(updatedCid, updatedBlock);\n      }\n    }\n\n    const trail = await toTrail(context, mfsDirectory);\n    const parent = trail[trail.length - 1];\n    const parentCid = parent.cid;\n    const parentBlock = await context.repo.blocks.get(parentCid);\n    const parentNode = dagPb.decode(parentBlock);\n    const result = await addLink(context, {\n      parent: parentNode,\n      name: name,\n      cid: updatedCid,\n      size: updatedBlock.length,\n      flush: settings.flush,\n      shardSplitThreshold: settings.shardSplitThreshold,\n      hashAlg: settings.hashAlg,\n      cidVersion\n    });\n    parent.cid = result.cid; // update the tree with the new child\n\n    const newRootCid = await updateTree(context, trail, settings); // Update the MFS record with the new CID for the root of the tree\n\n    await updateMfsRoot(context, newRootCid, settings);\n  }\n\n  return withTimeoutOption(mfsTouch);\n};","map":{"version":3,"names":["mergeOptions","require","bind","ignoreUndefined","toMfsPath","log","errCode","UnixFS","toTrail","addLink","updateTree","updateMfsRoot","dagPb","CID","withTimeoutOption","defaultOptions","flush","shardSplitThreshold","cidVersion","hashAlg","module","exports","context","mfsTouch","path","options","settings","mtime","Date","cid","mfsDirectory","name","exists","hasher","hashers","getHasher","updatedBlock","updatedCid","metadata","type","encode","Data","marshal","Links","hash","digest","create","code","repo","blocks","put","Error","version","block","get","node","decode","unmarshal","trail","parent","length","parentCid","parentBlock","parentNode","result","size","newRootCid"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/files/touch.js"],"sourcesContent":["'use strict'\n\nconst mergeOptions = require('merge-options').bind({ ignoreUndefined: true })\nconst toMfsPath = require('./utils/to-mfs-path')\nconst log = require('debug')('ipfs:mfs:touch')\nconst errCode = require('err-code')\nconst { UnixFS } = require('ipfs-unixfs')\nconst toTrail = require('./utils/to-trail')\nconst addLink = require('./utils/add-link')\nconst updateTree = require('./utils/update-tree')\nconst updateMfsRoot = require('./utils/update-mfs-root')\nconst dagPb = require('@ipld/dag-pb')\nconst { CID } = require('multiformats/cid')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @typedef {import('multiformats/cid').CIDVersion} CIDVersion\n * @typedef {import('ipfs-unixfs').MtimeLike} MtimeLike\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} flush\n * @property {number} shardSplitThreshold\n * @property {CIDVersion} cidVersion\n * @property {string} hashAlg\n * @property {MtimeLike} [mtime]\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  flush: true,\n  shardSplitThreshold: 1000,\n  cidVersion: 0,\n  hashAlg: 'sha2-256'\n}\n\n/**\n * @param {MfsContext} context\n */\nmodule.exports = (context) => {\n  /**\n   * @type {import('ipfs-core-types/src/files').API[\"touch\"]}\n   */\n  async function mfsTouch (path, options = {}) {\n    /** @type {DefaultOptions} */\n    const settings = mergeOptions(defaultOptions, options)\n    settings.mtime = settings.mtime || new Date()\n\n    log(`Touching ${path} mtime: ${settings.mtime}`)\n\n    const {\n      cid,\n      mfsDirectory,\n      name,\n      exists\n    } = await toMfsPath(context, path, settings)\n\n    const hashAlg = options.hashAlg || defaultOptions.hashAlg\n    const hasher = await context.hashers.getHasher(hashAlg)\n\n    let updatedBlock\n    let updatedCid\n\n    let cidVersion = settings.cidVersion\n\n    if (!exists) {\n      const metadata = new UnixFS({\n        type: 'file',\n        // @ts-ignore TODO: restore hrtime support to ipfs-unixfs constructor - it's in the code, just not the signature\n        mtime: settings.mtime\n      })\n      updatedBlock = dagPb.encode({ Data: metadata.marshal(), Links: [] })\n\n      const hash = await hasher.digest(updatedBlock)\n\n      updatedCid = CID.create(settings.cidVersion, dagPb.code, hash)\n\n      if (settings.flush) {\n        await context.repo.blocks.put(updatedCid, updatedBlock)\n      }\n    } else {\n      if (cid.code !== dagPb.code) {\n        throw errCode(new Error(`${path} was not a UnixFS node`), 'ERR_NOT_UNIXFS')\n      }\n\n      cidVersion = cid.version\n\n      const block = await context.repo.blocks.get(cid)\n      const node = dagPb.decode(block)\n\n      if (!node.Data) {\n        throw errCode(new Error(`${path} had no data`), 'ERR_INVALID_NODE')\n      }\n\n      const metadata = UnixFS.unmarshal(node.Data)\n\n      // @ts-ignore TODO: restore setting all date types as mtime - it's in the code, just not the signature\n      metadata.mtime = settings.mtime\n\n      updatedBlock = dagPb.encode({\n        Data: metadata.marshal(),\n        Links: node.Links\n      })\n\n      const hash = await hasher.digest(updatedBlock)\n      updatedCid = CID.create(settings.cidVersion, dagPb.code, hash)\n\n      if (settings.flush) {\n        await context.repo.blocks.put(updatedCid, updatedBlock)\n      }\n    }\n\n    const trail = await toTrail(context, mfsDirectory)\n    const parent = trail[trail.length - 1]\n    const parentCid = parent.cid\n    const parentBlock = await context.repo.blocks.get(parentCid)\n    const parentNode = dagPb.decode(parentBlock)\n\n    const result = await addLink(context, {\n      parent: parentNode,\n      name: name,\n      cid: updatedCid,\n      size: updatedBlock.length,\n      flush: settings.flush,\n      shardSplitThreshold: settings.shardSplitThreshold,\n      hashAlg: settings.hashAlg,\n      cidVersion\n    })\n\n    parent.cid = result.cid\n\n    // update the tree with the new child\n    const newRootCid = await updateTree(context, trail, settings)\n\n    // Update the MFS record with the new CID for the root of the tree\n    await updateMfsRoot(context, newRootCid, settings)\n  }\n\n  return withTimeoutOption(mfsTouch)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}