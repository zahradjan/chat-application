{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Logger = void 0;\n\nconst encode_1 = require(\"./encode\");\n/**\n * An object with optional context state that logs to a stream\n */\n\n\nclass Logger {\n  context;\n  timers = {};\n  stream;\n\n  constructor() {\n    let {\n      stream,\n      context\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.stream = stream || process.stdout;\n    this.context = context || {};\n  }\n\n  static log(data) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const stream = opts.stream || process.stdout;\n    const encodedData = (0, encode_1.encode)(data);\n    stream.write(`${encodedData}\\n`);\n  }\n  /**\n   * Append new data to the logger's context.\n   */\n\n\n  appendContext(newContext) {\n    this.context = this.mergeContext(newContext);\n  }\n  /**\n   * Log a message to the logger's stream.\n   */\n\n\n  log() {\n    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const timersObj = this.getTimersState();\n    const encodedData = (0, encode_1.encode)(this.mergeContext(timersObj, data));\n    this.stream.write(`${encodedData}\\n`);\n  }\n  /**\n   * Log an error to the logger's stream.\n   *\n   * This will log separate lines for each line of the error's stack, and each\n   * line will include a pseudorandom error ID to make reading logs easier.\n   *\n   * Note that this creates a new logger and immediately logs to this logger's\n   * stream. Running timers, etc. are not included.\n   */\n\n\n  logError(error) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const context = this.merge(this.context, data);\n    const logger = new Logger({\n      stream: this.stream,\n      context\n    });\n    const errorId = this.pseudorandomId();\n    const errorContext = {\n      error_id: errorId\n    };\n    const errorStack = error.stack ? error.stack.split('\\n') : [];\n    const headerLine = this.merge(errorContext, {\n      name: error.name,\n      message: error.message\n    });\n    const stackLines = errorStack.map(stackLine => {\n      return this.merge(errorContext, {\n        stackLine\n      });\n    });\n    const lines = [headerLine, ...stackLines];\n    lines.forEach(logger.log.bind(logger));\n  }\n  /**\n   * Add a new timer to the logger.\n   *\n   * Timers are logged when `.log` is called.\n   */\n\n\n  time(label) {\n    this.timers[label] = Date.now();\n  }\n\n  getTimersState() {\n    const now = Date.now();\n    const timers = {};\n\n    for (const key in this.timers) {\n      timers[key] = now - this.timers[key];\n    }\n\n    return timers;\n  }\n\n  merge() {\n    for (var _len = arguments.length, data = new Array(_len), _key = 0; _key < _len; _key++) {\n      data[_key] = arguments[_key];\n    }\n\n    return Object.assign({}, ...data);\n  }\n\n  mergeContext() {\n    for (var _len2 = arguments.length, data = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      data[_key2] = arguments[_key2];\n    }\n\n    return Object.assign({}, this.context, ...data);\n  }\n\n  pseudorandomId() {\n    return Math.floor(Math.random() * 1000000000);\n  }\n\n}\n\nexports.Logger = Logger;","map":{"version":3,"mappings":"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","names":["Logger","context","timers","stream","constructor","process","stdout","log","data","opts","encodedData","write","appendContext","newContext","mergeContext","timersObj","getTimersState","logError","error","merge","logger","errorId","pseudorandomId","errorContext","error_id","errorStack","stack","split","headerLine","name","message","stackLines","map","stackLine","lines","forEach","bind","time","label","Date","now","key","Object","assign","Math","floor","random","exports"],"sourceRoot":"","sources":["../lib/logger.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}