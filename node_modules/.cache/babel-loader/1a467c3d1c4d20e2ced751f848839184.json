{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar bs58 = require('bs58');\n\nvar multihashing = require('multihashing-async');\n\nmodule.exports = function (keysProtobuf, randomBytes, crypto) {\n  crypto = crypto || require('./crypto')(randomBytes);\n\n  var Secp256k1PublicKey = /*#__PURE__*/function () {\n    function Secp256k1PublicKey(key) {\n      _classCallCheck(this, Secp256k1PublicKey);\n\n      crypto.validatePublicKey(key);\n      this._key = key;\n    }\n\n    _createClass(Secp256k1PublicKey, [{\n      key: \"verify\",\n      value: function verify(data, sig, callback) {\n        ensure(callback);\n        crypto.hashAndVerify(this._key, sig, data, callback);\n      }\n    }, {\n      key: \"marshal\",\n      value: function marshal() {\n        return crypto.compressPublicKey(this._key);\n      }\n    }, {\n      key: \"bytes\",\n      get: function get() {\n        return keysProtobuf.PublicKey.encode({\n          Type: keysProtobuf.KeyType.Secp256k1,\n          Data: this.marshal()\n        });\n      }\n    }, {\n      key: \"equals\",\n      value: function equals(key) {\n        return this.bytes.equals(key.bytes);\n      }\n    }, {\n      key: \"hash\",\n      value: function hash(callback) {\n        ensure(callback);\n        multihashing(this.bytes, 'sha2-256', callback);\n      }\n    }]);\n\n    return Secp256k1PublicKey;\n  }();\n\n  var Secp256k1PrivateKey = /*#__PURE__*/function () {\n    function Secp256k1PrivateKey(key, publicKey) {\n      _classCallCheck(this, Secp256k1PrivateKey);\n\n      this._key = key;\n      this._publicKey = publicKey || crypto.computePublicKey(key);\n      crypto.validatePrivateKey(this._key);\n      crypto.validatePublicKey(this._publicKey);\n    }\n\n    _createClass(Secp256k1PrivateKey, [{\n      key: \"sign\",\n      value: function sign(message, callback) {\n        ensure(callback);\n        crypto.hashAndSign(this._key, message, callback);\n      }\n    }, {\n      key: \"public\",\n      get: function get() {\n        return new Secp256k1PublicKey(this._publicKey);\n      }\n    }, {\n      key: \"marshal\",\n      value: function marshal() {\n        return this._key;\n      }\n    }, {\n      key: \"bytes\",\n      get: function get() {\n        return keysProtobuf.PrivateKey.encode({\n          Type: keysProtobuf.KeyType.Secp256k1,\n          Data: this.marshal()\n        });\n      }\n    }, {\n      key: \"equals\",\n      value: function equals(key) {\n        return this.bytes.equals(key.bytes);\n      }\n    }, {\n      key: \"hash\",\n      value: function hash(callback) {\n        ensure(callback);\n        multihashing(this.bytes, 'sha2-256', callback);\n      }\n      /**\n       * Gets the ID of the key.\n       *\n       * The key id is the base58 encoding of the SHA-256 multihash of its public key.\n       * The public key is a protobuf encoding containing a type and the DER encoding\n       * of the PKCS SubjectPublicKeyInfo.\n       *\n       * @param {function(Error, id)} callback\n       * @returns {undefined}\n       */\n\n    }, {\n      key: \"id\",\n      value: function id(callback) {\n        this.public.hash(function (err, hash) {\n          if (err) {\n            return callback(err);\n          }\n\n          callback(null, bs58.encode(hash));\n        });\n      }\n    }]);\n\n    return Secp256k1PrivateKey;\n  }();\n\n  function unmarshalSecp256k1PrivateKey(bytes, callback) {\n    callback(null, new Secp256k1PrivateKey(bytes));\n  }\n\n  function unmarshalSecp256k1PublicKey(bytes) {\n    return new Secp256k1PublicKey(bytes);\n  }\n\n  function generateKeyPair(_bits, callback) {\n    if (callback === undefined && typeof _bits === 'function') {\n      callback = _bits;\n    }\n\n    ensure(callback);\n    crypto.generateKey(function (err, privateKeyBytes) {\n      if (err) {\n        return callback(err);\n      }\n\n      var privkey;\n\n      try {\n        privkey = new Secp256k1PrivateKey(privateKeyBytes);\n      } catch (err) {\n        return callback(err);\n      }\n\n      callback(null, privkey);\n    });\n  }\n\n  function ensure(callback) {\n    if (typeof callback !== 'function') {\n      throw new Error('callback is required');\n    }\n  }\n\n  return {\n    Secp256k1PublicKey: Secp256k1PublicKey,\n    Secp256k1PrivateKey: Secp256k1PrivateKey,\n    unmarshalSecp256k1PrivateKey: unmarshalSecp256k1PrivateKey,\n    unmarshalSecp256k1PublicKey: unmarshalSecp256k1PublicKey,\n    generateKeyPair: generateKeyPair\n  };\n};","map":{"version":3,"names":["bs58","require","multihashing","module","exports","keysProtobuf","randomBytes","crypto","Secp256k1PublicKey","key","validatePublicKey","_key","data","sig","callback","ensure","hashAndVerify","compressPublicKey","PublicKey","encode","Type","KeyType","Secp256k1","Data","marshal","bytes","equals","Secp256k1PrivateKey","publicKey","_publicKey","computePublicKey","validatePrivateKey","message","hashAndSign","PrivateKey","public","hash","err","unmarshalSecp256k1PrivateKey","unmarshalSecp256k1PublicKey","generateKeyPair","_bits","undefined","generateKey","privateKeyBytes","privkey","Error"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-crypto-secp256k1/src/index.js"],"sourcesContent":["'use strict'\n\nconst bs58 = require('bs58')\nconst multihashing = require('multihashing-async')\n\nmodule.exports = (keysProtobuf, randomBytes, crypto) => {\n  crypto = crypto || require('./crypto')(randomBytes)\n\n  class Secp256k1PublicKey {\n    constructor (key) {\n      crypto.validatePublicKey(key)\n      this._key = key\n    }\n\n    verify (data, sig, callback) {\n      ensure(callback)\n      crypto.hashAndVerify(this._key, sig, data, callback)\n    }\n\n    marshal () {\n      return crypto.compressPublicKey(this._key)\n    }\n\n    get bytes () {\n      return keysProtobuf.PublicKey.encode({\n        Type: keysProtobuf.KeyType.Secp256k1,\n        Data: this.marshal()\n      })\n    }\n\n    equals (key) {\n      return this.bytes.equals(key.bytes)\n    }\n\n    hash (callback) {\n      ensure(callback)\n      multihashing(this.bytes, 'sha2-256', callback)\n    }\n  }\n\n  class Secp256k1PrivateKey {\n    constructor (key, publicKey) {\n      this._key = key\n      this._publicKey = publicKey || crypto.computePublicKey(key)\n      crypto.validatePrivateKey(this._key)\n      crypto.validatePublicKey(this._publicKey)\n    }\n\n    sign (message, callback) {\n      ensure(callback)\n      crypto.hashAndSign(this._key, message, callback)\n    }\n\n    get public () {\n      return new Secp256k1PublicKey(this._publicKey)\n    }\n\n    marshal () {\n      return this._key\n    }\n\n    get bytes () {\n      return keysProtobuf.PrivateKey.encode({\n        Type: keysProtobuf.KeyType.Secp256k1,\n        Data: this.marshal()\n      })\n    }\n\n    equals (key) {\n      return this.bytes.equals(key.bytes)\n    }\n\n    hash (callback) {\n      ensure(callback)\n      multihashing(this.bytes, 'sha2-256', callback)\n    }\n\n    /**\n     * Gets the ID of the key.\n     *\n     * The key id is the base58 encoding of the SHA-256 multihash of its public key.\n     * The public key is a protobuf encoding containing a type and the DER encoding\n     * of the PKCS SubjectPublicKeyInfo.\n     *\n     * @param {function(Error, id)} callback\n     * @returns {undefined}\n     */\n    id (callback) {\n      this.public.hash((err, hash) => {\n        if (err) {\n          return callback(err)\n        }\n        callback(null, bs58.encode(hash))\n      })\n    }\n  }\n\n  function unmarshalSecp256k1PrivateKey (bytes, callback) {\n    callback(null, new Secp256k1PrivateKey(bytes))\n  }\n\n  function unmarshalSecp256k1PublicKey (bytes) {\n    return new Secp256k1PublicKey(bytes)\n  }\n\n  function generateKeyPair (_bits, callback) {\n    if (callback === undefined && typeof _bits === 'function') {\n      callback = _bits\n    }\n\n    ensure(callback)\n\n    crypto.generateKey((err, privateKeyBytes) => {\n      if (err) { return callback(err) }\n\n      let privkey\n      try {\n        privkey = new Secp256k1PrivateKey(privateKeyBytes)\n      } catch (err) { return callback(err) }\n\n      callback(null, privkey)\n    })\n  }\n\n  function ensure (callback) {\n    if (typeof callback !== 'function') {\n      throw new Error('callback is required')\n    }\n  }\n\n  return {\n    Secp256k1PublicKey,\n    Secp256k1PrivateKey,\n    unmarshalSecp256k1PrivateKey,\n    unmarshalSecp256k1PublicKey,\n    generateKeyPair\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}