{"ast":null,"code":"'use strict';\n\nconst ipns = require('ipns');\n\nconst crypto = require('libp2p-crypto');\n\nconst PeerId = require('peer-id');\n\nconst errcode = require('err-code');\n\nconst debug = require('debug');\n\nconst log = Object.assign(debug('ipfs:ipns:republisher'), {\n  error: debug('ipfs:ipns:republisher:error')\n});\n/**\n * @typedef {import('libp2p-crypto').PrivateKey} PrivateKey\n */\n\nconst minute = 60 * 1000;\nconst hour = 60 * minute;\nconst defaultBroadcastInterval = 4 * hour;\nconst defaultRecordLifetime = 24 * hour;\n\nclass IpnsRepublisher {\n  /**\n   * @param {import('./publisher')} publisher\n   * @param {import('interface-datastore').Datastore} datastore\n   * @param {PeerId} peerId\n   * @param {import('libp2p/src/keychain')} keychain\n   * @param {object} options\n   * @param {string} options.pass\n   * @param {number} [options.initialBroadcastInterval]\n   * @param {number} [options.broadcastInterval]\n   */\n  constructor(publisher, datastore, peerId, keychain) {\n    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {\n      pass: ''\n    };\n    this._publisher = publisher;\n    this._datastore = datastore;\n    this._peerId = peerId;\n    this._keychain = keychain;\n    this._options = options;\n    this._republishHandle = null;\n  }\n\n  async start() {\n    // eslint-disable-line require-await\n    if (this._republishHandle) {\n      throw errcode(new Error('republisher is already running'), 'ERR_REPUBLISH_ALREADY_RUNNING');\n    } // TODO: this handler should be isolated in another module\n\n\n    const republishHandle = {\n      /** @type {null|(() => Promise<void>)} */\n      _task: null,\n\n      /** @type {null|Promise<void>} */\n      _inflightTask: null,\n\n      /** @type {null|NodeJS.Timeout} */\n      _timeoutId: null,\n\n      /**\n       * @param {function(): number} period\n       */\n      runPeriodically: period => {\n        republishHandle._timeoutId = setTimeout(async () => {\n          republishHandle._timeoutId = null;\n\n          try {\n            // @ts-ignore - _task could be null\n            republishHandle._inflightTask = republishHandle._task();\n            await republishHandle._inflightTask; // Schedule next\n\n            if (republishHandle._task) {\n              republishHandle.runPeriodically(period);\n            }\n          } catch (err) {\n            log.error(err);\n          }\n        }, period());\n      },\n      cancel: async () => {\n        // do not run again\n        if (republishHandle._timeoutId != null) {\n          clearTimeout(republishHandle._timeoutId);\n        }\n\n        republishHandle._task = null; // wait for the currently in flight task to complete\n\n        await republishHandle._inflightTask;\n      }\n    };\n    const {\n      privKey\n    } = this._peerId;\n    const {\n      pass\n    } = this._options;\n    let firstRun = true;\n\n    republishHandle._task = () => this._republishEntries(privKey, pass);\n\n    republishHandle.runPeriodically(() => {\n      if (firstRun) {\n        firstRun = false;\n        return this._options.initialBroadcastInterval || minute;\n      }\n\n      return this._options.broadcastInterval || defaultBroadcastInterval;\n    });\n    this._republishHandle = republishHandle;\n  }\n\n  async stop() {\n    const republishHandle = this._republishHandle;\n\n    if (!republishHandle) {\n      throw errcode(new Error('republisher is not running'), 'ERR_REPUBLISH_NOT_RUNNING');\n    }\n\n    this._republishHandle = null;\n    await republishHandle.cancel();\n  }\n  /**\n   * @param {PrivateKey} privateKey\n   * @param {string} pass\n   */\n\n\n  async _republishEntries(privateKey, pass) {\n    // TODO: Should use list of published entries.\n    // We can't currently *do* that because go uses this method for now.\n    try {\n      await this._republishEntry(privateKey);\n    } catch (err) {\n      const errMsg = 'cannot republish entry for the node\\'s private key';\n      log.error(errMsg);\n      return;\n    } // keychain needs pass to get the cryptographic keys\n\n\n    if (pass) {\n      try {\n        const keys = await this._keychain.listKeys();\n\n        for (const key of keys) {\n          if (key.name === 'self') {\n            continue;\n          }\n\n          const pem = await this._keychain.exportKey(key.name, pass);\n          const privKey = await crypto.keys.import(pem, pass);\n          await this._republishEntry(privKey);\n        }\n      } catch (err) {\n        log.error(err);\n      }\n    }\n  }\n  /**\n   * @param {PrivateKey} privateKey\n   */\n\n\n  async _republishEntry(privateKey) {\n    if (!privateKey || !privateKey.bytes) {\n      throw errcode(new Error('invalid private key'), 'ERR_INVALID_PRIVATE_KEY');\n    }\n\n    try {\n      const peerId = await PeerId.createFromPrivKey(privateKey.bytes);\n      const value = await this._getPreviousValue(peerId);\n      await this._publisher.publishWithEOL(privateKey, value, defaultRecordLifetime);\n    } catch (err) {\n      if (err.code === 'ERR_NO_ENTRY_FOUND') {\n        return;\n      }\n\n      throw err;\n    }\n  }\n  /**\n   * @param {PeerId} peerId\n   */\n\n\n  async _getPreviousValue(peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('invalid peer ID'), 'ERR_INVALID_PEER_ID');\n    }\n\n    try {\n      const dsVal = await this._datastore.get(ipns.getLocalKey(peerId.id));\n\n      if (!(dsVal instanceof Uint8Array)) {\n        throw errcode(new Error(\"found ipns record that we couldn't process\"), 'ERR_INVALID_IPNS_RECORD');\n      } // unmarshal data\n\n\n      try {\n        const record = ipns.unmarshal(dsVal);\n        return record.value;\n      } catch (err) {\n        log.error(err);\n        throw errcode(new Error('found ipns record that we couldn\\'t convert to a value'), 'ERR_INVALID_IPNS_RECORD');\n      }\n    } catch (err) {\n      // error handling\n      // no need to republish\n      if (err && err.notFound) {\n        throw errcode(new Error(`no previous entry for record with id: ${peerId.id}`), 'ERR_NO_ENTRY_FOUND');\n      }\n\n      throw err;\n    }\n  }\n\n}\n\nexports = module.exports = IpnsRepublisher;","map":{"version":3,"names":["ipns","require","crypto","PeerId","errcode","debug","log","Object","assign","error","minute","hour","defaultBroadcastInterval","defaultRecordLifetime","IpnsRepublisher","constructor","publisher","datastore","peerId","keychain","options","pass","_publisher","_datastore","_peerId","_keychain","_options","_republishHandle","start","Error","republishHandle","_task","_inflightTask","_timeoutId","runPeriodically","period","setTimeout","err","cancel","clearTimeout","privKey","firstRun","_republishEntries","initialBroadcastInterval","broadcastInterval","stop","privateKey","_republishEntry","errMsg","keys","listKeys","key","name","pem","exportKey","import","bytes","createFromPrivKey","value","_getPreviousValue","publishWithEOL","code","isPeerId","dsVal","get","getLocalKey","id","Uint8Array","record","unmarshal","notFound","exports","module"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/ipns/republisher.js"],"sourcesContent":["'use strict'\n\nconst ipns = require('ipns')\nconst crypto = require('libp2p-crypto')\nconst PeerId = require('peer-id')\nconst errcode = require('err-code')\n\nconst debug = require('debug')\nconst log = Object.assign(debug('ipfs:ipns:republisher'), {\n  error: debug('ipfs:ipns:republisher:error')\n})\n\n/**\n * @typedef {import('libp2p-crypto').PrivateKey} PrivateKey\n */\n\nconst minute = 60 * 1000\nconst hour = 60 * minute\n\nconst defaultBroadcastInterval = 4 * hour\nconst defaultRecordLifetime = 24 * hour\n\nclass IpnsRepublisher {\n  /**\n   * @param {import('./publisher')} publisher\n   * @param {import('interface-datastore').Datastore} datastore\n   * @param {PeerId} peerId\n   * @param {import('libp2p/src/keychain')} keychain\n   * @param {object} options\n   * @param {string} options.pass\n   * @param {number} [options.initialBroadcastInterval]\n   * @param {number} [options.broadcastInterval]\n   */\n  constructor (publisher, datastore, peerId, keychain, options = { pass: '' }) {\n    this._publisher = publisher\n    this._datastore = datastore\n    this._peerId = peerId\n    this._keychain = keychain\n    this._options = options\n    this._republishHandle = null\n  }\n\n  async start () { // eslint-disable-line require-await\n    if (this._republishHandle) {\n      throw errcode(new Error('republisher is already running'), 'ERR_REPUBLISH_ALREADY_RUNNING')\n    }\n\n    // TODO: this handler should be isolated in another module\n    const republishHandle = {\n      /** @type {null|(() => Promise<void>)} */\n      _task: null,\n      /** @type {null|Promise<void>} */\n      _inflightTask: null,\n      /** @type {null|NodeJS.Timeout} */\n      _timeoutId: null,\n      /**\n       * @param {function(): number} period\n       */\n      runPeriodically: (period) => {\n        republishHandle._timeoutId = setTimeout(async () => {\n          republishHandle._timeoutId = null\n\n          try {\n            // @ts-ignore - _task could be null\n            republishHandle._inflightTask = republishHandle._task()\n            await republishHandle._inflightTask\n\n            // Schedule next\n            if (republishHandle._task) {\n              republishHandle.runPeriodically(period)\n            }\n          } catch (err) {\n            log.error(err)\n          }\n        }, period())\n      },\n      cancel: async () => {\n        // do not run again\n        if (republishHandle._timeoutId != null) {\n          clearTimeout(republishHandle._timeoutId)\n        }\n        republishHandle._task = null\n\n        // wait for the currently in flight task to complete\n        await republishHandle._inflightTask\n      }\n    }\n\n    const { privKey } = this._peerId\n    const { pass } = this._options\n    let firstRun = true\n\n    republishHandle._task = () => this._republishEntries(privKey, pass)\n\n    republishHandle.runPeriodically(() => {\n      if (firstRun) {\n        firstRun = false\n        return this._options.initialBroadcastInterval || minute\n      }\n\n      return this._options.broadcastInterval || defaultBroadcastInterval\n    })\n\n    this._republishHandle = republishHandle\n  }\n\n  async stop () {\n    const republishHandle = this._republishHandle\n\n    if (!republishHandle) {\n      throw errcode(new Error('republisher is not running'), 'ERR_REPUBLISH_NOT_RUNNING')\n    }\n\n    this._republishHandle = null\n\n    await republishHandle.cancel()\n  }\n\n  /**\n   * @param {PrivateKey} privateKey\n   * @param {string} pass\n   */\n  async _republishEntries (privateKey, pass) {\n    // TODO: Should use list of published entries.\n    // We can't currently *do* that because go uses this method for now.\n    try {\n      await this._republishEntry(privateKey)\n    } catch (err) {\n      const errMsg = 'cannot republish entry for the node\\'s private key'\n\n      log.error(errMsg)\n      return\n    }\n\n    // keychain needs pass to get the cryptographic keys\n    if (pass) {\n      try {\n        const keys = await this._keychain.listKeys()\n\n        for (const key of keys) {\n          if (key.name === 'self') {\n            continue\n          }\n          const pem = await this._keychain.exportKey(key.name, pass)\n          const privKey = await crypto.keys.import(pem, pass)\n\n          await this._republishEntry(privKey)\n        }\n      } catch (err) {\n        log.error(err)\n      }\n    }\n  }\n\n  /**\n   * @param {PrivateKey} privateKey\n   */\n  async _republishEntry (privateKey) {\n    if (!privateKey || !privateKey.bytes) {\n      throw errcode(new Error('invalid private key'), 'ERR_INVALID_PRIVATE_KEY')\n    }\n\n    try {\n      const peerId = await PeerId.createFromPrivKey(privateKey.bytes)\n      const value = await this._getPreviousValue(peerId)\n      await this._publisher.publishWithEOL(privateKey, value, defaultRecordLifetime)\n    } catch (err) {\n      if (err.code === 'ERR_NO_ENTRY_FOUND') {\n        return\n      }\n\n      throw err\n    }\n  }\n\n  /**\n   * @param {PeerId} peerId\n   */\n  async _getPreviousValue (peerId) {\n    if (!(PeerId.isPeerId(peerId))) {\n      throw errcode(new Error('invalid peer ID'), 'ERR_INVALID_PEER_ID')\n    }\n\n    try {\n      const dsVal = await this._datastore.get(ipns.getLocalKey(peerId.id))\n\n      if (!(dsVal instanceof Uint8Array)) {\n        throw errcode(new Error(\"found ipns record that we couldn't process\"), 'ERR_INVALID_IPNS_RECORD')\n      }\n\n      // unmarshal data\n      try {\n        const record = ipns.unmarshal(dsVal)\n\n        return record.value\n      } catch (err) {\n        log.error(err)\n        throw errcode(new Error('found ipns record that we couldn\\'t convert to a value'), 'ERR_INVALID_IPNS_RECORD')\n      }\n    } catch (err) {\n      // error handling\n      // no need to republish\n      if (err && err.notFound) {\n        throw errcode(new Error(`no previous entry for record with id: ${peerId.id}`), 'ERR_NO_ENTRY_FOUND')\n      }\n\n      throw err\n    }\n  }\n}\n\nexports = module.exports = IpnsRepublisher\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}