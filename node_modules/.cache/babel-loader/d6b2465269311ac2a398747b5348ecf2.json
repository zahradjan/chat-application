{"ast":null,"code":"'use strict';\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('../../types').NetworkService} config.network\n */\n\n\nmodule.exports = _ref => {\n  let {\n    network\n  } = _ref;\n\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API[\"connect\"]}\n   */\n  async function connect(addr) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      libp2p\n    } = await network.use(options);\n    await libp2p.dial(addr, options);\n  }\n\n  return withTimeoutOption(connect);\n};","map":{"version":3,"names":["withTimeoutOption","require","module","exports","network","connect","addr","options","libp2p","use","dial"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/swarm/connect.js"],"sourcesContent":["'use strict'\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @param {Object} config\n * @param {import('../../types').NetworkService} config.network\n */\nmodule.exports = ({ network }) => {\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API[\"connect\"]}\n   */\n  async function connect (addr, options = {}) {\n    const { libp2p } = await network.use(options)\n    await libp2p.dial(addr, options)\n  }\n\n  return withTimeoutOption(connect)\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,yCAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,QAAiB;EAAA,IAAhB;IAAEC;EAAF,CAAgB;;EAChC;AACF;AACA;EACE,eAAeC,OAAf,CAAwBC,IAAxB,EAA4C;IAAA,IAAdC,OAAc,uEAAJ,EAAI;IAC1C,MAAM;MAAEC;IAAF,IAAa,MAAMJ,OAAO,CAACK,GAAR,CAAYF,OAAZ,CAAzB;IACA,MAAMC,MAAM,CAACE,IAAP,CAAYJ,IAAZ,EAAkBC,OAAlB,CAAN;EACD;;EAED,OAAOP,iBAAiB,CAACK,OAAD,CAAxB;AACD,CAVD"},"metadata":{},"sourceType":"script"}