{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar log = require('debug')('ipfs:mfs:utils:update-mfs-root');\n\nvar _require = require('../../../utils'),\n    MFS_ROOT_KEY = _require.MFS_ROOT_KEY;\n\nvar errCode = require('err-code');\n/**\n * @typedef {import('../').MfsContext} MfsContext\n */\n\n/**\n * @param {MfsContext} context\n * @param {import('multiformats/cid').CID} cid\n * @param {import('ipfs-core-types/src/utils').AbortOptions} options\n */\n\n\nvar updateMfsRoot = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(context, cid, options) {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(options && options.signal && options.signal.aborted)) {\n              _context.next = 2;\n              break;\n            }\n\n            throw errCode(new Error('Request aborted'), 'ERR_ABORTED', {\n              name: 'Aborted'\n            });\n\n          case 2:\n            log(\"New MFS root will be \".concat(cid));\n            _context.next = 5;\n            return context.repo.datastore.put(MFS_ROOT_KEY, cid.bytes);\n\n          case 5:\n            return _context.abrupt(\"return\", cid);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function updateMfsRoot(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = updateMfsRoot;","map":{"version":3,"names":["log","require","MFS_ROOT_KEY","errCode","updateMfsRoot","context","cid","options","signal","aborted","Error","name","repo","datastore","put","bytes","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/files/utils/update-mfs-root.js"],"sourcesContent":["'use strict'\n\nconst log = require('debug')('ipfs:mfs:utils:update-mfs-root')\nconst {\n  MFS_ROOT_KEY\n} = require('../../../utils')\nconst errCode = require('err-code')\n\n/**\n * @typedef {import('../').MfsContext} MfsContext\n */\n\n/**\n * @param {MfsContext} context\n * @param {import('multiformats/cid').CID} cid\n * @param {import('ipfs-core-types/src/utils').AbortOptions} options\n */\nconst updateMfsRoot = async (context, cid, options) => {\n  if (options && options.signal && options.signal.aborted) {\n    throw errCode(new Error('Request aborted'), 'ERR_ABORTED', { name: 'Aborted' })\n  }\n\n  log(`New MFS root will be ${cid}`)\n\n  await context.repo.datastore.put(MFS_ROOT_KEY, cid.bytes)\n\n  return cid\n}\n\nmodule.exports = updateMfsRoot\n"],"mappings":"AAAA;;;;;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,gCAAjB,CAAZ;;AACA,eAEIA,OAAO,CAAC,gBAAD,CAFX;AAAA,IACEC,YADF,YACEA,YADF;;AAGA,IAAMC,OAAO,GAAGF,OAAO,CAAC,UAAD,CAAvB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AACA,IAAMG,aAAa;EAAA,sEAAG,iBAAOC,OAAP,EAAgBC,GAAhB,EAAqBC,OAArB;IAAA;MAAA;QAAA;UAAA;YAAA,MAChBA,OAAO,IAAIA,OAAO,CAACC,MAAnB,IAA6BD,OAAO,CAACC,MAAR,CAAeC,OAD5B;cAAA;cAAA;YAAA;;YAAA,MAEZN,OAAO,CAAC,IAAIO,KAAJ,CAAU,iBAAV,CAAD,EAA+B,aAA/B,EAA8C;cAAEC,IAAI,EAAE;YAAR,CAA9C,CAFK;;UAAA;YAKpBX,GAAG,gCAAyBM,GAAzB,EAAH;YALoB;YAAA,OAOdD,OAAO,CAACO,IAAR,CAAaC,SAAb,CAAuBC,GAAvB,CAA2BZ,YAA3B,EAAyCI,GAAG,CAACS,KAA7C,CAPc;;UAAA;YAAA,iCASbT,GATa;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAH;;EAAA,gBAAbF,aAAa;IAAA;EAAA;AAAA,GAAnB;;AAYAY,MAAM,CAACC,OAAP,GAAiBb,aAAjB"},"metadata":{},"sourceType":"script"}