{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _get = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/get.js\").default;\n\nvar _getPrototypeOf = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\n\nvar _inherits = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar Key = require('interface-datastore').Key;\n\nvar KeytransformDatastore = require('./keytransform');\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-datastore').Query} Query\n * @typedef {import('interface-datastore').KeyQuery} KeyQuery\n * @typedef {import('interface-datastore').Options} Options\n * @typedef {import('interface-datastore').Batch} Batch\n * @typedef {import('./types').KeyTransform} KeyTransform\n */\n\n/**\n * Wraps a given datastore into a keytransform which\n * makes a given prefix transparent.\n *\n * For example, if the prefix is `new Key(/hello)` a call\n * to `store.put(new Key('/world'), mydata)` would store the data under\n * `/hello/world`.\n *\n */\n\n\nvar NamespaceDatastore = /*#__PURE__*/function (_KeytransformDatastor) {\n  _inherits(NamespaceDatastore, _KeytransformDatastor);\n\n  var _super = _createSuper(NamespaceDatastore);\n\n  /**\n   * @param {Datastore} child\n   * @param {Key} prefix\n   */\n  function NamespaceDatastore(child, prefix) {\n    var _this;\n\n    _classCallCheck(this, NamespaceDatastore);\n\n    _this = _super.call(this, child, {\n      convert: function convert(key) {\n        return prefix.child(key);\n      },\n      invert: function invert(key) {\n        if (prefix.toString() === '/') {\n          return key;\n        }\n\n        if (!prefix.isAncestorOf(key)) {\n          throw new Error(\"Expected prefix: (\".concat(prefix.toString(), \") in key: \").concat(key.toString()));\n        }\n\n        return new Key(key.toString().slice(prefix.toString().length), false);\n      }\n    });\n    _this.prefix = prefix;\n    return _this;\n  }\n  /**\n   * @param {Query} q\n   * @param {Options} [options]\n   */\n\n\n  _createClass(NamespaceDatastore, [{\n    key: \"query\",\n    value: function query(q, options) {\n      if (q.prefix && this.prefix.toString() !== '/') {\n        return _get(_getPrototypeOf(NamespaceDatastore.prototype), \"query\", this).call(this, Object.assign({}, q, {\n          prefix: this.prefix.child(new Key(q.prefix)).toString()\n        }));\n      }\n\n      return _get(_getPrototypeOf(NamespaceDatastore.prototype), \"query\", this).call(this, q, options);\n    }\n    /**\n     * @param {KeyQuery} q\n     * @param {Options} [options]\n     */\n\n  }, {\n    key: \"queryKeys\",\n    value: function queryKeys(q, options) {\n      if (q.prefix && this.prefix.toString() !== '/') {\n        return _get(_getPrototypeOf(NamespaceDatastore.prototype), \"queryKeys\", this).call(this, Object.assign({}, q, {\n          prefix: this.prefix.child(new Key(q.prefix)).toString()\n        }));\n      }\n\n      return _get(_getPrototypeOf(NamespaceDatastore.prototype), \"queryKeys\", this).call(this, q, options);\n    }\n  }]);\n\n  return NamespaceDatastore;\n}(KeytransformDatastore);\n\nmodule.exports = NamespaceDatastore;","map":{"version":3,"names":["Key","require","KeytransformDatastore","NamespaceDatastore","child","prefix","convert","key","invert","toString","isAncestorOf","Error","slice","length","q","options","Object","assign","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/datastore-core/src/namespace.js"],"sourcesContent":["'use strict'\n\nconst Key = require('interface-datastore').Key\nconst KeytransformDatastore = require('./keytransform')\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-datastore').Query} Query\n * @typedef {import('interface-datastore').KeyQuery} KeyQuery\n * @typedef {import('interface-datastore').Options} Options\n * @typedef {import('interface-datastore').Batch} Batch\n * @typedef {import('./types').KeyTransform} KeyTransform\n */\n\n/**\n * Wraps a given datastore into a keytransform which\n * makes a given prefix transparent.\n *\n * For example, if the prefix is `new Key(/hello)` a call\n * to `store.put(new Key('/world'), mydata)` would store the data under\n * `/hello/world`.\n *\n */\nclass NamespaceDatastore extends KeytransformDatastore {\n  /**\n   * @param {Datastore} child\n   * @param {Key} prefix\n   */\n  constructor (child, prefix) {\n    super(child, {\n      convert (key) {\n        return prefix.child(key)\n      },\n      invert (key) {\n        if (prefix.toString() === '/') {\n          return key\n        }\n\n        if (!prefix.isAncestorOf(key)) {\n          throw new Error(`Expected prefix: (${prefix.toString()}) in key: ${key.toString()}`)\n        }\n\n        return new Key(key.toString().slice(prefix.toString().length), false)\n      }\n    })\n\n    this.prefix = prefix\n  }\n\n  /**\n   * @param {Query} q\n   * @param {Options} [options]\n   */\n  query (q, options) {\n    if (q.prefix && this.prefix.toString() !== '/') {\n      return super.query(Object.assign({}, q, {\n        prefix: this.prefix.child(new Key(q.prefix)).toString()\n      }))\n    }\n    return super.query(q, options)\n  }\n\n  /**\n   * @param {KeyQuery} q\n   * @param {Options} [options]\n   */\n  queryKeys (q, options) {\n    if (q.prefix && this.prefix.toString() !== '/') {\n      return super.queryKeys(Object.assign({}, q, {\n        prefix: this.prefix.child(new Key(q.prefix)).toString()\n      }))\n    }\n    return super.queryKeys(q, options)\n  }\n}\n\nmodule.exports = NamespaceDatastore\n"],"mappings":"AAAA;;;;;;;;;;;;;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,qBAAD,CAAP,CAA+BD,GAA3C;;AACA,IAAME,qBAAqB,GAAGD,OAAO,CAAC,gBAAD,CAArC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACME,kB;;;;;EACJ;AACF;AACA;AACA;EACE,4BAAaC,KAAb,EAAoBC,MAApB,EAA4B;IAAA;;IAAA;;IAC1B,0BAAMD,KAAN,EAAa;MACXE,OADW,mBACFC,GADE,EACG;QACZ,OAAOF,MAAM,CAACD,KAAP,CAAaG,GAAb,CAAP;MACD,CAHU;MAIXC,MAJW,kBAIHD,GAJG,EAIE;QACX,IAAIF,MAAM,CAACI,QAAP,OAAsB,GAA1B,EAA+B;UAC7B,OAAOF,GAAP;QACD;;QAED,IAAI,CAACF,MAAM,CAACK,YAAP,CAAoBH,GAApB,CAAL,EAA+B;UAC7B,MAAM,IAAII,KAAJ,6BAA+BN,MAAM,CAACI,QAAP,EAA/B,uBAA6DF,GAAG,CAACE,QAAJ,EAA7D,EAAN;QACD;;QAED,OAAO,IAAIT,GAAJ,CAAQO,GAAG,CAACE,QAAJ,GAAeG,KAAf,CAAqBP,MAAM,CAACI,QAAP,GAAkBI,MAAvC,CAAR,EAAwD,KAAxD,CAAP;MACD;IAdU,CAAb;IAiBA,MAAKR,MAAL,GAAcA,MAAd;IAlB0B;EAmB3B;EAED;AACF;AACA;AACA;;;;;WACE,eAAOS,CAAP,EAAUC,OAAV,EAAmB;MACjB,IAAID,CAAC,CAACT,MAAF,IAAY,KAAKA,MAAL,CAAYI,QAAZ,OAA2B,GAA3C,EAAgD;QAC9C,qFAAmBO,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,CAAlB,EAAqB;UACtCT,MAAM,EAAE,KAAKA,MAAL,CAAYD,KAAZ,CAAkB,IAAIJ,GAAJ,CAAQc,CAAC,CAACT,MAAV,CAAlB,EAAqCI,QAArC;QAD8B,CAArB,CAAnB;MAGD;;MACD,qFAAmBK,CAAnB,EAAsBC,OAAtB;IACD;IAED;AACF;AACA;AACA;;;;WACE,mBAAWD,CAAX,EAAcC,OAAd,EAAuB;MACrB,IAAID,CAAC,CAACT,MAAF,IAAY,KAAKA,MAAL,CAAYI,QAAZ,OAA2B,GAA3C,EAAgD;QAC9C,yFAAuBO,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,CAAlB,EAAqB;UAC1CT,MAAM,EAAE,KAAKA,MAAL,CAAYD,KAAZ,CAAkB,IAAIJ,GAAJ,CAAQc,CAAC,CAACT,MAAV,CAAlB,EAAqCI,QAArC;QADkC,CAArB,CAAvB;MAGD;;MACD,yFAAuBK,CAAvB,EAA0BC,OAA1B;IACD;;;;EAlD8Bb,qB;;AAqDjCgB,MAAM,CAACC,OAAP,GAAiBhB,kBAAjB"},"metadata":{},"sourceType":"script"}