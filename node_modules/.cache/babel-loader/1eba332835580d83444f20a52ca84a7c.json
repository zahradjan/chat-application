{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nvar _require = require('multiaddr'),\n    Multiaddr = _require.Multiaddr;\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\n\n\nmodule.exports = function (_ref) {\n  var repo = _ref.repo;\n\n  /**\n   * @type {import('ipfs-core-types/src/bootstrap').API[\"clear\"]}\n   */\n  function clear() {\n    return _clear.apply(this, arguments);\n  }\n\n  function _clear() {\n    _clear = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var options,\n          config,\n          removed,\n          _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              _context.next = 3;\n              return repo.config.getAll(options);\n\n            case 3:\n              config = _context.sent;\n              removed = config.Bootstrap || [];\n              config.Bootstrap = [];\n              _context.next = 8;\n              return repo.config.replace(config);\n\n            case 8:\n              return _context.abrupt(\"return\", {\n                Peers: removed.map(function (ma) {\n                  return new Multiaddr(ma);\n                })\n              });\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _clear.apply(this, arguments);\n  }\n\n  return withTimeoutOption(clear);\n};","map":{"version":3,"names":["withTimeoutOption","require","Multiaddr","module","exports","repo","clear","options","config","getAll","removed","Bootstrap","replace","Peers","map","ma"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/bootstrap/clear.js"],"sourcesContent":["'use strict'\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst { Multiaddr } = require('multiaddr')\n\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nmodule.exports = ({ repo }) => {\n  /**\n   * @type {import('ipfs-core-types/src/bootstrap').API[\"clear\"]}\n   */\n  async function clear (options = {}) {\n    /** @type {import('ipfs-core-types/src/config').Config} */\n    // @ts-ignore repo returns type unknown\n    const config = await repo.config.getAll(options)\n    const removed = config.Bootstrap || []\n    config.Bootstrap = []\n\n    await repo.config.replace(config)\n\n    return { Peers: removed.map(ma => new Multiaddr(ma)) }\n  }\n\n  return withTimeoutOption(clear)\n}\n"],"mappings":"AAAA;;;;;;AAEA,IAAMA,iBAAiB,GAAGC,OAAO,CAAC,yCAAD,CAAjC;;AACA,eAAsBA,OAAO,CAAC,WAAD,CAA7B;AAAA,IAAQC,SAAR,YAAQA,SAAR;AAEA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,gBAAc;EAAA,IAAXC,IAAW,QAAXA,IAAW;;EAC7B;AACF;AACA;EAH+B,SAIdC,KAJc;IAAA;EAAA;;EAAA;IAAA,oEAI7B;MAAA;MAAA;MAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAsBC,OAAtB,2DAAgC,EAAhC;cAAA;cAAA,OAGuBF,IAAI,CAACG,MAAL,CAAYC,MAAZ,CAAmBF,OAAnB,CAHvB;;YAAA;cAGQC,MAHR;cAIQE,OAJR,GAIkBF,MAAM,CAACG,SAAP,IAAoB,EAJtC;cAKEH,MAAM,CAACG,SAAP,GAAmB,EAAnB;cALF;cAAA,OAOQN,IAAI,CAACG,MAAL,CAAYI,OAAZ,CAAoBJ,MAApB,CAPR;;YAAA;cAAA,iCASS;gBAAEK,KAAK,EAAEH,OAAO,CAACI,GAAR,CAAY,UAAAC,EAAE;kBAAA,OAAI,IAAIb,SAAJ,CAAca,EAAd,CAAJ;gBAAA,CAAd;cAAT,CATT;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAJ6B;IAAA;EAAA;;EAgB7B,OAAOf,iBAAiB,CAACM,KAAD,CAAxB;AACD,CAjBD"},"metadata":{},"sourceType":"script"}