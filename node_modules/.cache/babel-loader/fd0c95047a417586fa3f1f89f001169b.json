{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _inherits = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar _awaitAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _wrapAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nvar _asyncIterator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar _require = require('interface-datastore'),\n    Adapter = _require.Adapter,\n    Errors = _require.Errors;\n\nvar log = require('debug')('datastore:core:tiered');\n\nvar pushable = require('it-pushable');\n\nvar drain = require('it-drain');\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-datastore').Options} Options\n * @typedef {import('interface-datastore').Batch} Batch\n * @typedef {import('interface-datastore').Query} Query\n * @typedef {import('interface-datastore').KeyQuery} KeyQuery\n * @typedef {import('interface-datastore').Key} Key\n * @typedef {import('interface-datastore').Pair} Pair\n */\n\n/**\n * @template TEntry\n * @typedef {import('interface-store').AwaitIterable<TEntry>} AwaitIterable\n */\n\n/**\n * A datastore that can combine multiple stores. Puts and deletes\n * will write through to all datastores. Has and get will\n * try each store sequentially. Query will always try the\n * last one first.\n *\n */\n\n\nvar TieredDatastore = /*#__PURE__*/function (_Adapter) {\n  _inherits(TieredDatastore, _Adapter);\n\n  var _super = _createSuper(TieredDatastore);\n\n  /**\n   * @param {Datastore[]} stores\n   */\n  function TieredDatastore(stores) {\n    var _this3;\n\n    _classCallCheck(this, TieredDatastore);\n\n    _this3 = _super.call(this);\n    _this3.stores = stores.slice();\n    return _this3;\n  }\n\n  _createClass(TieredDatastore, [{\n    key: \"open\",\n    value: function () {\n      var _open = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return Promise.all(this.stores.map(function (store) {\n                  return store.open();\n                }));\n\n              case 3:\n                _context.next = 8;\n                break;\n\n              case 5:\n                _context.prev = 5;\n                _context.t0 = _context[\"catch\"](0);\n                throw Errors.dbOpenFailedError();\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 5]]);\n      }));\n\n      function open() {\n        return _open.apply(this, arguments);\n      }\n\n      return open;\n    }()\n    /**\n     * @param {Key} key\n     * @param {Uint8Array} value\n     */\n\n  }, {\n    key: \"put\",\n    value: function () {\n      var _put = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(key, value) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return Promise.all(this.stores.map(function (store) {\n                  return store.put(key, value);\n                }));\n\n              case 3:\n                _context2.next = 8;\n                break;\n\n              case 5:\n                _context2.prev = 5;\n                _context2.t0 = _context2[\"catch\"](0);\n                throw Errors.dbWriteFailedError();\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 5]]);\n      }));\n\n      function put(_x, _x2) {\n        return _put.apply(this, arguments);\n      }\n\n      return put;\n    }()\n    /**\n     * @param {Key} key\n     * @param {Options} [options]\n     */\n\n  }, {\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(key, options) {\n        var _iterator3, _step3, store, res;\n\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _iterator3 = _createForOfIteratorHelper(this.stores);\n                _context3.prev = 1;\n\n                _iterator3.s();\n\n              case 3:\n                if ((_step3 = _iterator3.n()).done) {\n                  _context3.next = 18;\n                  break;\n                }\n\n                store = _step3.value;\n                _context3.prev = 5;\n                _context3.next = 8;\n                return store.get(key, options);\n\n              case 8:\n                res = _context3.sent;\n\n                if (!res) {\n                  _context3.next = 11;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", res);\n\n              case 11:\n                _context3.next = 16;\n                break;\n\n              case 13:\n                _context3.prev = 13;\n                _context3.t0 = _context3[\"catch\"](5);\n                log(_context3.t0);\n\n              case 16:\n                _context3.next = 3;\n                break;\n\n              case 18:\n                _context3.next = 23;\n                break;\n\n              case 20:\n                _context3.prev = 20;\n                _context3.t1 = _context3[\"catch\"](1);\n\n                _iterator3.e(_context3.t1);\n\n              case 23:\n                _context3.prev = 23;\n\n                _iterator3.f();\n\n                return _context3.finish(23);\n\n              case 26:\n                throw Errors.notFoundError();\n\n              case 27:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[1, 20, 23, 26], [5, 13]]);\n      }));\n\n      function get(_x3, _x4) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }()\n    /**\n     * @param {Key} key\n     * @param {Options} [options]\n     */\n\n  }, {\n    key: \"has\",\n    value: function () {\n      var _has = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(key, options) {\n        var _iterator4, _step4, s;\n\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _iterator4 = _createForOfIteratorHelper(this.stores);\n                _context4.prev = 1;\n\n                _iterator4.s();\n\n              case 3:\n                if ((_step4 = _iterator4.n()).done) {\n                  _context4.next = 11;\n                  break;\n                }\n\n                s = _step4.value;\n                _context4.next = 7;\n                return s.has(key, options);\n\n              case 7:\n                if (!_context4.sent) {\n                  _context4.next = 9;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", true);\n\n              case 9:\n                _context4.next = 3;\n                break;\n\n              case 11:\n                _context4.next = 16;\n                break;\n\n              case 13:\n                _context4.prev = 13;\n                _context4.t0 = _context4[\"catch\"](1);\n\n                _iterator4.e(_context4.t0);\n\n              case 16:\n                _context4.prev = 16;\n\n                _iterator4.f();\n\n                return _context4.finish(16);\n\n              case 19:\n                return _context4.abrupt(\"return\", false);\n\n              case 20:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[1, 13, 16, 19]]);\n      }));\n\n      function has(_x5, _x6) {\n        return _has.apply(this, arguments);\n      }\n\n      return has;\n    }()\n    /**\n     * @param {Key} key\n     * @param {Options} [options]\n     */\n\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(key, options) {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.prev = 0;\n                _context5.next = 3;\n                return Promise.all(this.stores.map(function (store) {\n                  return store.delete(key, options);\n                }));\n\n              case 3:\n                _context5.next = 8;\n                break;\n\n              case 5:\n                _context5.prev = 5;\n                _context5.t0 = _context5[\"catch\"](0);\n                throw Errors.dbDeleteFailedError();\n\n              case 8:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[0, 5]]);\n      }));\n\n      function _delete(_x7, _x8) {\n        return _delete2.apply(this, arguments);\n      }\n\n      return _delete;\n    }()\n    /**\n     * @param {AwaitIterable<Pair>} source\n     * @param {Options} [options]\n     * @returns {AsyncIterable<Pair>}\n     */\n\n  }, {\n    key: \"putMany\",\n    value: function putMany(source) {\n      var _this = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var error, pushables, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _loop, _iterator, _step;\n\n        return _regeneratorRuntime().wrap(function _callee6$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                pushables = _this.stores.map(function (store) {\n                  var source = pushable();\n                  drain(store.putMany(source, options)).catch(function (err) {\n                    // store threw while putting, make sure we bubble the error up\n                    error = err;\n                  });\n                  return source;\n                });\n                _context7.prev = 1;\n                _iteratorAbruptCompletion = false;\n                _didIteratorError = false;\n                _context7.prev = 4;\n                _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n                  var pair;\n                  return _regeneratorRuntime().wrap(function _loop$(_context6) {\n                    while (1) {\n                      switch (_context6.prev = _context6.next) {\n                        case 0:\n                          pair = _step.value;\n\n                          if (!error) {\n                            _context6.next = 3;\n                            break;\n                          }\n\n                          throw error;\n\n                        case 3:\n                          pushables.forEach(function (p) {\n                            return p.push(pair);\n                          });\n                          _context6.next = 6;\n                          return pair;\n\n                        case 6:\n                        case \"end\":\n                          return _context6.stop();\n                      }\n                    }\n                  }, _loop);\n                });\n                _iterator = _asyncIterator(source);\n\n              case 7:\n                _context7.next = 9;\n                return _awaitAsyncGenerator(_iterator.next());\n\n              case 9:\n                if (!(_iteratorAbruptCompletion = !(_step = _context7.sent).done)) {\n                  _context7.next = 14;\n                  break;\n                }\n\n                return _context7.delegateYield(_loop(), \"t0\", 11);\n\n              case 11:\n                _iteratorAbruptCompletion = false;\n                _context7.next = 7;\n                break;\n\n              case 14:\n                _context7.next = 20;\n                break;\n\n              case 16:\n                _context7.prev = 16;\n                _context7.t1 = _context7[\"catch\"](4);\n                _didIteratorError = true;\n                _iteratorError = _context7.t1;\n\n              case 20:\n                _context7.prev = 20;\n                _context7.prev = 21;\n\n                if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                  _context7.next = 25;\n                  break;\n                }\n\n                _context7.next = 25;\n                return _awaitAsyncGenerator(_iterator.return());\n\n              case 25:\n                _context7.prev = 25;\n\n                if (!_didIteratorError) {\n                  _context7.next = 28;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 28:\n                return _context7.finish(25);\n\n              case 29:\n                return _context7.finish(20);\n\n              case 30:\n                _context7.prev = 30;\n                pushables.forEach(function (p) {\n                  return p.end();\n                });\n                return _context7.finish(30);\n\n              case 33:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee6, null, [[1,, 30, 33], [4, 16, 20, 30], [21,, 25, 29]]);\n      }))();\n    }\n    /**\n     * @param {AwaitIterable<Key>} source\n     * @param {Options} [options]\n     * @returns {AsyncIterable<Key>}\n     */\n\n  }, {\n    key: \"deleteMany\",\n    value: function deleteMany(source) {\n      var _this2 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var error, pushables, _iteratorAbruptCompletion2, _didIteratorError2, _iteratorError2, _loop2, _iterator2, _step2;\n\n        return _regeneratorRuntime().wrap(function _callee7$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                pushables = _this2.stores.map(function (store) {\n                  var source = pushable();\n                  drain(store.deleteMany(source, options)).catch(function (err) {\n                    // store threw while deleting, make sure we bubble the error up\n                    error = err;\n                  });\n                  return source;\n                });\n                _context9.prev = 1;\n                _iteratorAbruptCompletion2 = false;\n                _didIteratorError2 = false;\n                _context9.prev = 4;\n                _loop2 = /*#__PURE__*/_regeneratorRuntime().mark(function _loop2() {\n                  var key;\n                  return _regeneratorRuntime().wrap(function _loop2$(_context8) {\n                    while (1) {\n                      switch (_context8.prev = _context8.next) {\n                        case 0:\n                          key = _step2.value;\n\n                          if (!error) {\n                            _context8.next = 3;\n                            break;\n                          }\n\n                          throw error;\n\n                        case 3:\n                          pushables.forEach(function (p) {\n                            return p.push(key);\n                          });\n                          _context8.next = 6;\n                          return key;\n\n                        case 6:\n                        case \"end\":\n                          return _context8.stop();\n                      }\n                    }\n                  }, _loop2);\n                });\n                _iterator2 = _asyncIterator(source);\n\n              case 7:\n                _context9.next = 9;\n                return _awaitAsyncGenerator(_iterator2.next());\n\n              case 9:\n                if (!(_iteratorAbruptCompletion2 = !(_step2 = _context9.sent).done)) {\n                  _context9.next = 14;\n                  break;\n                }\n\n                return _context9.delegateYield(_loop2(), \"t0\", 11);\n\n              case 11:\n                _iteratorAbruptCompletion2 = false;\n                _context9.next = 7;\n                break;\n\n              case 14:\n                _context9.next = 20;\n                break;\n\n              case 16:\n                _context9.prev = 16;\n                _context9.t1 = _context9[\"catch\"](4);\n                _didIteratorError2 = true;\n                _iteratorError2 = _context9.t1;\n\n              case 20:\n                _context9.prev = 20;\n                _context9.prev = 21;\n\n                if (!(_iteratorAbruptCompletion2 && _iterator2.return != null)) {\n                  _context9.next = 25;\n                  break;\n                }\n\n                _context9.next = 25;\n                return _awaitAsyncGenerator(_iterator2.return());\n\n              case 25:\n                _context9.prev = 25;\n\n                if (!_didIteratorError2) {\n                  _context9.next = 28;\n                  break;\n                }\n\n                throw _iteratorError2;\n\n              case 28:\n                return _context9.finish(25);\n\n              case 29:\n                return _context9.finish(20);\n\n              case 30:\n                _context9.prev = 30;\n                pushables.forEach(function (p) {\n                  return p.end();\n                });\n                return _context9.finish(30);\n\n              case 33:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee7, null, [[1,, 30, 33], [4, 16, 20, 30], [21,, 25, 29]]);\n      }))();\n    }\n  }, {\n    key: \"close\",\n    value: function () {\n      var _close = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        return _regeneratorRuntime().wrap(function _callee8$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return Promise.all(this.stores.map(function (store) {\n                  return store.close();\n                }));\n\n              case 2:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function close() {\n        return _close.apply(this, arguments);\n      }\n\n      return close;\n    }()\n    /**\n     * @returns {Batch}\n     */\n\n  }, {\n    key: \"batch\",\n    value: function batch() {\n      var batches = this.stores.map(function (store) {\n        return store.batch();\n      });\n      return {\n        put: function put(key, value) {\n          batches.forEach(function (b) {\n            return b.put(key, value);\n          });\n        },\n        delete: function _delete(key) {\n          batches.forEach(function (b) {\n            return b.delete(key);\n          });\n        },\n        commit: function () {\n          var _commit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(options) {\n            var _iterator5, _step5, batch;\n\n            return _regeneratorRuntime().wrap(function _callee9$(_context11) {\n              while (1) {\n                switch (_context11.prev = _context11.next) {\n                  case 0:\n                    _iterator5 = _createForOfIteratorHelper(batches);\n                    _context11.prev = 1;\n\n                    _iterator5.s();\n\n                  case 3:\n                    if ((_step5 = _iterator5.n()).done) {\n                      _context11.next = 9;\n                      break;\n                    }\n\n                    batch = _step5.value;\n                    _context11.next = 7;\n                    return batch.commit(options);\n\n                  case 7:\n                    _context11.next = 3;\n                    break;\n\n                  case 9:\n                    _context11.next = 14;\n                    break;\n\n                  case 11:\n                    _context11.prev = 11;\n                    _context11.t0 = _context11[\"catch\"](1);\n\n                    _iterator5.e(_context11.t0);\n\n                  case 14:\n                    _context11.prev = 14;\n\n                    _iterator5.f();\n\n                    return _context11.finish(14);\n\n                  case 17:\n                  case \"end\":\n                    return _context11.stop();\n                }\n              }\n            }, _callee9, null, [[1, 11, 14, 17]]);\n          }));\n\n          function commit(_x9) {\n            return _commit.apply(this, arguments);\n          }\n\n          return commit;\n        }()\n      };\n    }\n    /**\n     * @param {Query} q\n     * @param {Options} [options]\n     */\n\n  }, {\n    key: \"query\",\n    value: function query(q, options) {\n      return this.stores[this.stores.length - 1].query(q, options);\n    }\n    /**\n     * @param {KeyQuery} q\n     * @param {Options} [options]\n     */\n\n  }, {\n    key: \"queryKeys\",\n    value: function queryKeys(q, options) {\n      return this.stores[this.stores.length - 1].queryKeys(q, options);\n    }\n  }]);\n\n  return TieredDatastore;\n}(Adapter);\n\nmodule.exports = TieredDatastore;","map":{"version":3,"names":["require","Adapter","Errors","log","pushable","drain","TieredDatastore","stores","slice","Promise","all","map","store","open","dbOpenFailedError","key","value","put","dbWriteFailedError","options","get","res","notFoundError","s","has","delete","dbDeleteFailedError","source","pushables","putMany","catch","err","error","pair","forEach","p","push","end","deleteMany","close","batches","batch","b","commit","q","length","query","queryKeys","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/datastore-core/src/tiered.js"],"sourcesContent":["'use strict'\n\nconst { Adapter, Errors } = require('interface-datastore')\nconst log = require('debug')('datastore:core:tiered')\nconst pushable = require('it-pushable')\nconst drain = require('it-drain')\n\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-datastore').Options} Options\n * @typedef {import('interface-datastore').Batch} Batch\n * @typedef {import('interface-datastore').Query} Query\n * @typedef {import('interface-datastore').KeyQuery} KeyQuery\n * @typedef {import('interface-datastore').Key} Key\n * @typedef {import('interface-datastore').Pair} Pair\n */\n\n/**\n * @template TEntry\n * @typedef {import('interface-store').AwaitIterable<TEntry>} AwaitIterable\n */\n\n/**\n * A datastore that can combine multiple stores. Puts and deletes\n * will write through to all datastores. Has and get will\n * try each store sequentially. Query will always try the\n * last one first.\n *\n */\nclass TieredDatastore extends Adapter {\n  /**\n   * @param {Datastore[]} stores\n   */\n  constructor (stores) {\n    super()\n\n    this.stores = stores.slice()\n  }\n\n  async open () {\n    try {\n      await Promise.all(this.stores.map((store) => store.open()))\n    } catch (err) {\n      throw Errors.dbOpenFailedError()\n    }\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Uint8Array} value\n   */\n  async put (key, value) {\n    try {\n      await Promise.all(this.stores.map(store => store.put(key, value)))\n    } catch (err) {\n      throw Errors.dbWriteFailedError()\n    }\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n  async get (key, options) {\n    for (const store of this.stores) {\n      try {\n        const res = await store.get(key, options)\n        if (res) return res\n      } catch (err) {\n        log(err)\n      }\n    }\n    throw Errors.notFoundError()\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n  async has (key, options) {\n    for (const s of this.stores) {\n      if (await s.has(key, options)) {\n        return true\n      }\n    }\n\n    return false\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n  async delete (key, options) {\n    try {\n      await Promise.all(this.stores.map(store => store.delete(key, options)))\n    } catch (err) {\n      throw Errors.dbDeleteFailedError()\n    }\n  }\n\n  /**\n   * @param {AwaitIterable<Pair>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Pair>}\n   */\n  async * putMany (source, options = {}) {\n    let error\n    const pushables = this.stores.map(store => {\n      const source = pushable()\n\n      drain(store.putMany(source, options))\n        .catch(err => {\n          // store threw while putting, make sure we bubble the error up\n          error = err\n        })\n\n      return source\n    })\n\n    try {\n      for await (const pair of source) {\n        if (error) {\n          throw error\n        }\n\n        pushables.forEach(p => p.push(pair))\n\n        yield pair\n      }\n    } finally {\n      pushables.forEach(p => p.end())\n    }\n  }\n\n  /**\n   * @param {AwaitIterable<Key>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Key>}\n   */\n  async * deleteMany (source, options = {}) {\n    let error\n    const pushables = this.stores.map(store => {\n      const source = pushable()\n\n      drain(store.deleteMany(source, options))\n        .catch(err => {\n          // store threw while deleting, make sure we bubble the error up\n          error = err\n        })\n\n      return source\n    })\n\n    try {\n      for await (const key of source) {\n        if (error) {\n          throw error\n        }\n\n        pushables.forEach(p => p.push(key))\n\n        yield key\n      }\n    } finally {\n      pushables.forEach(p => p.end())\n    }\n  }\n\n  async close () {\n    await Promise.all(this.stores.map(store => store.close()))\n  }\n\n  /**\n   * @returns {Batch}\n   */\n  batch () {\n    const batches = this.stores.map(store => store.batch())\n\n    return {\n      put: (key, value) => {\n        batches.forEach(b => b.put(key, value))\n      },\n      delete: (key) => {\n        batches.forEach(b => b.delete(key))\n      },\n      commit: async (options) => {\n        for (const batch of batches) {\n          await batch.commit(options)\n        }\n      }\n    }\n  }\n\n  /**\n   * @param {Query} q\n   * @param {Options} [options]\n   */\n  query (q, options) {\n    return this.stores[this.stores.length - 1].query(q, options)\n  }\n\n  /**\n   * @param {KeyQuery} q\n   * @param {Options} [options]\n   */\n  queryKeys (q, options) {\n    return this.stores[this.stores.length - 1].queryKeys(q, options)\n  }\n}\n\nmodule.exports = TieredDatastore\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}