{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar Key = require('interface-datastore').Key;\n\nvar sortKeys = require('sort-keys');\n\nvar _require = require('uint8arrays/to-string'),\n    uint8ArrayToString = _require.toString;\n\nvar _require2 = require('uint8arrays/from-string'),\n    uint8ArrayFromString = _require2.fromString;\n\nvar specKey = new Key('datastore_spec');\n/**\n *\n * @param {import('interface-datastore').Datastore} store\n */\n\nmodule.exports = function (store) {\n  return {\n    /**\n     * Check if a datastore spec file exists.\n     *\n     */\n    exists: function exists() {\n      return store.has(specKey);\n    },\n\n    /**\n     * Get the current datastore spec.\n     *\n     * @returns {Promise<Uint8Array>}\n     */\n    get: function get() {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var buf;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return store.get(specKey);\n\n              case 2:\n                buf = _context.sent;\n                return _context.abrupt(\"return\", JSON.parse(uint8ArrayToString(buf)));\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n\n    /**\n     * Set the datastore spec of the repo, writing it to the underlying store.\n     * TODO unclear on what the type should be or if it's required\n     *\n     * @param {any} spec\n     * @returns {Promise<void>}\n     */\n    set: function set(spec) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", store.put(specKey, uint8ArrayFromString(JSON.stringify(sortKeys(spec, {\n                  deep: true\n                })))));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    }\n  };\n};","map":{"version":3,"names":["Key","require","sortKeys","uint8ArrayToString","toString","uint8ArrayFromString","fromString","specKey","module","exports","store","exists","has","get","buf","JSON","parse","set","spec","put","stringify","deep"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-repo/src/spec.js"],"sourcesContent":["'use strict'\n\nconst Key = require('interface-datastore').Key\nconst sortKeys = require('sort-keys')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\n\nconst specKey = new Key('datastore_spec')\n\n/**\n *\n * @param {import('interface-datastore').Datastore} store\n */\nmodule.exports = (store) => {\n  return {\n    /**\n     * Check if a datastore spec file exists.\n     *\n     */\n    exists () {\n      return store.has(specKey)\n    },\n    /**\n     * Get the current datastore spec.\n     *\n     * @returns {Promise<Uint8Array>}\n     */\n    async get () {\n      const buf = await store.get(specKey)\n      return JSON.parse(uint8ArrayToString(buf))\n    },\n    /**\n     * Set the datastore spec of the repo, writing it to the underlying store.\n     * TODO unclear on what the type should be or if it's required\n     *\n     * @param {any} spec\n     * @returns {Promise<void>}\n     */\n    async set (spec) {\n      return store.put(specKey, uint8ArrayFromString(JSON.stringify(sortKeys(spec, { deep: true }))))\n    }\n  }\n}\n"],"mappings":"AAAA;;;;;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,qBAAD,CAAP,CAA+BD,GAA3C;;AACA,IAAME,QAAQ,GAAGD,OAAO,CAAC,WAAD,CAAxB;;AACA,eAAyCA,OAAO,CAAC,uBAAD,CAAhD;AAAA,IAAkBE,kBAAlB,YAAQC,QAAR;;AACA,gBAA6CH,OAAO,CAAC,yBAAD,CAApD;AAAA,IAAoBI,oBAApB,aAAQC,UAAR;;AAEA,IAAMC,OAAO,GAAG,IAAIP,GAAJ,CAAQ,gBAAR,CAAhB;AAEA;AACA;AACA;AACA;;AACAQ,MAAM,CAACC,OAAP,GAAiB,UAACC,KAAD,EAAW;EAC1B,OAAO;IACL;AACJ;AACA;AACA;IACIC,MALK,oBAKK;MACR,OAAOD,KAAK,CAACE,GAAN,CAAUL,OAAV,CAAP;IACD,CAPI;;IAQL;AACJ;AACA;AACA;AACA;IACUM,GAbD,iBAaQ;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACOH,KAAK,CAACG,GAAN,CAAUN,OAAV,CADP;;cAAA;gBACLO,GADK;gBAAA,iCAEJC,IAAI,CAACC,KAAL,CAAWb,kBAAkB,CAACW,GAAD,CAA7B,CAFI;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAGZ,CAhBI;;IAiBL;AACJ;AACA;AACA;AACA;AACA;AACA;IACUG,GAxBD,eAwBMC,IAxBN,EAwBY;MAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,kCACRR,KAAK,CAACS,GAAN,CAAUZ,OAAV,EAAmBF,oBAAoB,CAACU,IAAI,CAACK,SAAL,CAAelB,QAAQ,CAACgB,IAAD,EAAO;kBAAEG,IAAI,EAAE;gBAAR,CAAP,CAAvB,CAAD,CAAvC,CADQ;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAEhB;EA1BI,CAAP;AA4BD,CA7BD"},"metadata":{},"sourceType":"script"}