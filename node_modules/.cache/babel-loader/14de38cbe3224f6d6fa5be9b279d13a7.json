{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _wrapAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\n\nvar _awaitAsyncGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\n\nvar _asyncIterator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar _asyncGeneratorDelegate = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate.js\").default;\n\nvar PeerId = require('peer-id');\n\nvar errCode = require('err-code');\n\nvar _require = require('../errors'),\n    NotEnabledError = _require.NotEnabledError;\n\nvar get = require('dlv');\n\nvar withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('../types').NetworkService} config.network\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\n\n\nmodule.exports = function (_ref) {\n  var network = _ref.network,\n      repo = _ref.repo;\n  var _get$put$findProvs$fi = {\n    /**\n     * @type {import('ipfs-core-types/src/dht').API[\"get\"]}\n     */\n    get: function get(key) {\n      var _arguments = arguments;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var options, _yield$use, libp2p;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _arguments.length > 1 && _arguments[1] !== undefined ? _arguments[1] : {};\n                _context.next = 3;\n                return use(network, options);\n\n              case 3:\n                _yield$use = _context.sent;\n                libp2p = _yield$use.libp2p;\n                return _context.abrupt(\"return\", libp2p._dht.get(key, options));\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n\n    /**\n     * @type {import('ipfs-core-types/src/dht').API[\"put\"]}\n     */\n    put: function put(key, value, options) {\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _yield$_awaitAsyncGen, libp2p;\n\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _awaitAsyncGenerator(use(network, options));\n\n              case 2:\n                _yield$_awaitAsyncGen = _context2.sent;\n                libp2p = _yield$_awaitAsyncGen.libp2p;\n                return _context2.delegateYield(_asyncGeneratorDelegate(_asyncIterator(libp2p._dht.put(key, value)), _awaitAsyncGenerator), \"t0\", 5);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n\n    /**\n     * @type {import('ipfs-core-types/src/dht').API[\"findProvs\"]}\n     */\n    findProvs: function findProvs(cid) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        numProviders: 20\n      };\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var _yield$_awaitAsyncGen2, libp2p, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, peer;\n\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return _awaitAsyncGenerator(use(network, options));\n\n              case 2:\n                _yield$_awaitAsyncGen2 = _context3.sent;\n                libp2p = _yield$_awaitAsyncGen2.libp2p;\n                _iteratorAbruptCompletion = false;\n                _didIteratorError = false;\n                _context3.prev = 6;\n                _iterator = _asyncIterator(libp2p._dht.findProviders(cid, {\n                  maxNumProviders: options.numProviders,\n                  signal: options.signal\n                }));\n\n              case 8:\n                _context3.next = 10;\n                return _awaitAsyncGenerator(_iterator.next());\n\n              case 10:\n                if (!(_iteratorAbruptCompletion = !(_step = _context3.sent).done)) {\n                  _context3.next = 17;\n                  break;\n                }\n\n                peer = _step.value;\n                _context3.next = 14;\n                return {\n                  id: peer.id.toB58String(),\n                  addrs: peer.addrs\n                };\n\n              case 14:\n                _iteratorAbruptCompletion = false;\n                _context3.next = 8;\n                break;\n\n              case 17:\n                _context3.next = 23;\n                break;\n\n              case 19:\n                _context3.prev = 19;\n                _context3.t0 = _context3[\"catch\"](6);\n                _didIteratorError = true;\n                _iteratorError = _context3.t0;\n\n              case 23:\n                _context3.prev = 23;\n                _context3.prev = 24;\n\n                if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                  _context3.next = 28;\n                  break;\n                }\n\n                _context3.next = 28;\n                return _awaitAsyncGenerator(_iterator.return());\n\n              case 28:\n                _context3.prev = 28;\n\n                if (!_didIteratorError) {\n                  _context3.next = 31;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 31:\n                return _context3.finish(28);\n\n              case 32:\n                return _context3.finish(23);\n\n              case 33:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[6, 19, 23, 33], [24,, 28, 32]]);\n      }))();\n    },\n\n    /**\n     * @type {import('ipfs-core-types/src/dht').API[\"findPeer\"]}\n     */\n    findPeer: function findPeer(peerId, options) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var _yield$use2, libp2p, peer;\n\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return use(network, options);\n\n              case 2:\n                _yield$use2 = _context4.sent;\n                libp2p = _yield$use2.libp2p;\n                _context4.next = 6;\n                return libp2p._dht.findPeer(PeerId.parse(peerId));\n\n              case 6:\n                peer = _context4.sent;\n                return _context4.abrupt(\"return\", {\n                  id: peer.id.toB58String(),\n                  addrs: peer.multiaddrs\n                });\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }))();\n    },\n\n    /**\n     * @type {import('ipfs-core-types/src/dht').API[\"provide\"]}\n     */\n    provide: function provide(cids) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        recursive: false\n      };\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var _yield$_awaitAsyncGen3, libp2p, cidArr, hasCids, hasAll, _iterator3, _step3, cid;\n\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return _awaitAsyncGenerator(use(network, options));\n\n              case 2:\n                _yield$_awaitAsyncGen3 = _context5.sent;\n                libp2p = _yield$_awaitAsyncGen3.libp2p;\n                cidArr = Array.isArray(cids) ? cids : [cids]; // ensure blocks are actually local\n\n                _context5.next = 7;\n                return _awaitAsyncGenerator(Promise.all(cidArr.map(function (cid) {\n                  return repo.blocks.has(cid);\n                })));\n\n              case 7:\n                hasCids = _context5.sent;\n                hasAll = hasCids.every(function (has) {\n                  return has;\n                });\n\n                if (hasAll) {\n                  _context5.next = 11;\n                  break;\n                }\n\n                throw errCode(new Error('block(s) not found locally, cannot provide'), 'ERR_BLOCK_NOT_FOUND');\n\n              case 11:\n                if (!options.recursive) {\n                  _context5.next = 13;\n                  break;\n                }\n\n                throw errCode(new Error('not implemented yet'), 'ERR_NOT_IMPLEMENTED_YET');\n\n              case 13:\n                _iterator3 = _createForOfIteratorHelper(cidArr);\n                _context5.prev = 14;\n\n                _iterator3.s();\n\n              case 16:\n                if ((_step3 = _iterator3.n()).done) {\n                  _context5.next = 22;\n                  break;\n                }\n\n                cid = _step3.value;\n                _context5.next = 20;\n                return libp2p._dht.provide(cid);\n\n              case 20:\n                _context5.next = 16;\n                break;\n\n              case 22:\n                _context5.next = 27;\n                break;\n\n              case 24:\n                _context5.prev = 24;\n                _context5.t0 = _context5[\"catch\"](14);\n\n                _iterator3.e(_context5.t0);\n\n              case 27:\n                _context5.prev = 27;\n\n                _iterator3.f();\n\n                return _context5.finish(27);\n\n              case 30:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, null, [[14, 24, 27, 30]]);\n      }))();\n    },\n\n    /**\n     * @type {import('ipfs-core-types/src/dht').API[\"query\"]}\n     */\n    query: function query(peerId, options) {\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var _yield$_awaitAsyncGen4, libp2p, _iteratorAbruptCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, closerPeerId;\n\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return _awaitAsyncGenerator(use(network, options));\n\n              case 2:\n                _yield$_awaitAsyncGen4 = _context6.sent;\n                libp2p = _yield$_awaitAsyncGen4.libp2p;\n                _iteratorAbruptCompletion2 = false;\n                _didIteratorError2 = false;\n                _context6.prev = 6;\n                _iterator2 = _asyncIterator(libp2p._dht.getClosestPeers(PeerId.parse(peerId).toBytes()));\n\n              case 8:\n                _context6.next = 10;\n                return _awaitAsyncGenerator(_iterator2.next());\n\n              case 10:\n                if (!(_iteratorAbruptCompletion2 = !(_step2 = _context6.sent).done)) {\n                  _context6.next = 17;\n                  break;\n                }\n\n                closerPeerId = _step2.value;\n                _context6.next = 14;\n                return {\n                  id: closerPeerId.toB58String(),\n                  addrs: [] // TODO: get addrs?\n\n                };\n\n              case 14:\n                _iteratorAbruptCompletion2 = false;\n                _context6.next = 8;\n                break;\n\n              case 17:\n                _context6.next = 23;\n                break;\n\n              case 19:\n                _context6.prev = 19;\n                _context6.t0 = _context6[\"catch\"](6);\n                _didIteratorError2 = true;\n                _iteratorError2 = _context6.t0;\n\n              case 23:\n                _context6.prev = 23;\n                _context6.prev = 24;\n\n                if (!(_iteratorAbruptCompletion2 && _iterator2.return != null)) {\n                  _context6.next = 28;\n                  break;\n                }\n\n                _context6.next = 28;\n                return _awaitAsyncGenerator(_iterator2.return());\n\n              case 28:\n                _context6.prev = 28;\n\n                if (!_didIteratorError2) {\n                  _context6.next = 31;\n                  break;\n                }\n\n                throw _iteratorError2;\n\n              case 31:\n                return _context6.finish(28);\n\n              case 32:\n                return _context6.finish(23);\n\n              case 33:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, null, [[6, 19, 23, 33], [24,, 28, 32]]);\n      }))();\n    }\n  },\n      get = _get$put$findProvs$fi.get,\n      put = _get$put$findProvs$fi.put,\n      findProvs = _get$put$findProvs$fi.findProvs,\n      findPeer = _get$put$findProvs$fi.findPeer,\n      provide = _get$put$findProvs$fi.provide,\n      query = _get$put$findProvs$fi.query;\n  return {\n    get: withTimeoutOption(get),\n    put: withTimeoutOption(put),\n    findProvs: withTimeoutOption(findProvs),\n    findPeer: withTimeoutOption(findPeer),\n    provide: withTimeoutOption(provide),\n    query: withTimeoutOption(query)\n  };\n};\n/**\n * @param {import('../types').NetworkService} network\n * @param {import('ipfs-core-types/src/utils').AbortOptions} [options]\n */\n\n\nvar use = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(network, options) {\n    var net;\n    return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.next = 2;\n            return network.use(options);\n\n          case 2:\n            net = _context7.sent;\n\n            if (!get(net.libp2p, '_config.dht.enabled', false)) {\n              _context7.next = 7;\n              break;\n            }\n\n            return _context7.abrupt(\"return\", net);\n\n          case 7:\n            throw new NotEnabledError('dht not enabled');\n\n          case 8:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n\n  return function use(_x, _x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["PeerId","require","errCode","NotEnabledError","get","withTimeoutOption","module","exports","network","repo","key","options","use","libp2p","_dht","put","value","findProvs","cid","numProviders","findProviders","maxNumProviders","signal","peer","id","toB58String","addrs","findPeer","peerId","parse","multiaddrs","provide","cids","recursive","cidArr","Array","isArray","Promise","all","map","blocks","has","hasCids","hasAll","every","Error","query","getClosestPeers","toBytes","closerPeerId","net"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/dht.js"],"sourcesContent":["'use strict'\n\nconst PeerId = require('peer-id')\nconst errCode = require('err-code')\nconst { NotEnabledError } = require('../errors')\nconst get = require('dlv')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @param {Object} config\n * @param {import('../types').NetworkService} config.network\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nmodule.exports = ({ network, repo }) => {\n  const { get, put, findProvs, findPeer, provide, query } = {\n    /**\n     * @type {import('ipfs-core-types/src/dht').API[\"get\"]}\n     */\n    async get (key, options = {}) {\n      const { libp2p } = await use(network, options)\n      return libp2p._dht.get(key, options)\n    },\n\n    /**\n     * @type {import('ipfs-core-types/src/dht').API[\"put\"]}\n     */\n    async * put (key, value, options) {\n      const { libp2p } = await use(network, options)\n      yield * libp2p._dht.put(key, value)\n    },\n\n    /**\n     * @type {import('ipfs-core-types/src/dht').API[\"findProvs\"]}\n     */\n    async * findProvs (cid, options = { numProviders: 20 }) {\n      const { libp2p } = await use(network, options)\n\n      for await (const peer of libp2p._dht.findProviders(cid, {\n        maxNumProviders: options.numProviders,\n        signal: options.signal\n      })) {\n        yield {\n          id: peer.id.toB58String(),\n          addrs: peer.addrs\n        }\n      }\n    },\n\n    /**\n     * @type {import('ipfs-core-types/src/dht').API[\"findPeer\"]}\n     */\n    async findPeer (peerId, options) {\n      const { libp2p } = await use(network, options)\n      const peer = await libp2p._dht.findPeer(PeerId.parse(peerId))\n\n      return {\n        id: peer.id.toB58String(),\n        addrs: peer.multiaddrs\n      }\n    },\n\n    /**\n     * @type {import('ipfs-core-types/src/dht').API[\"provide\"]}\n     */\n    async * provide (cids, options = { recursive: false }) {\n      const { libp2p } = await use(network, options)\n      const cidArr = Array.isArray(cids) ? cids : [cids]\n\n      // ensure blocks are actually local\n      const hasCids = await Promise.all(cidArr.map(cid => repo.blocks.has(cid)))\n      const hasAll = hasCids.every(has => has)\n\n      if (!hasAll) {\n        throw errCode(new Error('block(s) not found locally, cannot provide'), 'ERR_BLOCK_NOT_FOUND')\n      }\n\n      if (options.recursive) {\n        // TODO: Implement recursive providing\n        throw errCode(new Error('not implemented yet'), 'ERR_NOT_IMPLEMENTED_YET')\n      }\n\n      for (const cid of cidArr) {\n        yield libp2p._dht.provide(cid)\n      }\n    },\n\n    /**\n     * @type {import('ipfs-core-types/src/dht').API[\"query\"]}\n     */\n    async * query (peerId, options) {\n      const { libp2p } = await use(network, options)\n\n      for await (const closerPeerId of libp2p._dht.getClosestPeers(PeerId.parse(peerId).toBytes())) {\n        yield {\n          id: closerPeerId.toB58String(),\n          addrs: [] // TODO: get addrs?\n        }\n      }\n    }\n  }\n\n  return {\n    get: withTimeoutOption(get),\n    put: withTimeoutOption(put),\n    findProvs: withTimeoutOption(findProvs),\n    findPeer: withTimeoutOption(findPeer),\n    provide: withTimeoutOption(provide),\n    query: withTimeoutOption(query)\n  }\n}\n\n/**\n * @param {import('../types').NetworkService} network\n * @param {import('ipfs-core-types/src/utils').AbortOptions} [options]\n */\nconst use = async (network, options) => {\n  const net = await network.use(options)\n  if (get(net.libp2p, '_config.dht.enabled', false)) {\n    return net\n  } else {\n    throw new NotEnabledError('dht not enabled')\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}