{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _inherits = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar debug = require('debug');\n\nvar log = Object.assign(debug('libp2p:peer-store:key-book'), {\n  error: debug('libp2p:peer-store:key-book:err')\n});\n\nvar errcode = require('err-code');\n\nvar PeerId = require('peer-id');\n\nvar Book = require('./book');\n\nvar _require = require('../errors'),\n    ERR_INVALID_PARAMETERS = _require.codes.ERR_INVALID_PARAMETERS;\n/**\n * @typedef {import('./')} PeerStore\n * @typedef {import('libp2p-crypto').PublicKey} PublicKey\n */\n\n/**\n * @extends {Book}\n */\n\n\nvar KeyBook = /*#__PURE__*/function (_Book) {\n  _inherits(KeyBook, _Book);\n\n  var _super = _createSuper(KeyBook);\n\n  /**\n   * The KeyBook is responsible for keeping the known public keys of a peer.\n   *\n   * @class\n   * @param {PeerStore} peerStore\n   */\n  function KeyBook(peerStore) {\n    var _this;\n\n    _classCallCheck(this, KeyBook);\n\n    _this = _super.call(this, {\n      peerStore: peerStore,\n      eventName: 'change:pubkey',\n      eventProperty: 'pubkey',\n      eventTransformer: function eventTransformer(data) {\n        return data.pubKey;\n      }\n    });\n    /**\n     * Map known peers to their known Public Key.\n     *\n     * @type {Map<string, PeerId>}\n     */\n\n    _this.data = new Map();\n    return _this;\n  }\n  /**\n   * Set the Peer public key.\n   *\n   * @override\n   * @param {PeerId} peerId\n   * @param {PublicKey} publicKey\n   * @returns {KeyBook}\n   */\n\n\n  _createClass(KeyBook, [{\n    key: \"set\",\n    value: function set(peerId, publicKey) {\n      if (!PeerId.isPeerId(peerId)) {\n        log.error('peerId must be an instance of peer-id to store data');\n        throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n      }\n\n      var id = peerId.toB58String();\n      var recPeerId = this.data.get(id); // If no record available, and this is valid\n\n      if (!recPeerId && publicKey) {\n        // This might be unecessary, but we want to store the PeerId\n        // to avoid an async operation when reconstructing the PeerId\n        peerId.pubKey = publicKey;\n\n        this._setData(peerId, peerId);\n\n        log(\"stored provided public key for \".concat(id));\n      }\n\n      return this;\n    }\n    /**\n     * Get Public key of the given PeerId, if stored.\n     *\n     * @override\n     * @param {PeerId} peerId\n     * @returns {PublicKey | undefined}\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(peerId) {\n      if (!PeerId.isPeerId(peerId)) {\n        throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n      }\n\n      var rec = this.data.get(peerId.toB58String());\n      return rec ? rec.pubKey : undefined;\n    }\n  }]);\n\n  return KeyBook;\n}(Book);\n\nmodule.exports = KeyBook;","map":{"version":3,"names":["debug","require","log","Object","assign","error","errcode","PeerId","Book","ERR_INVALID_PARAMETERS","codes","KeyBook","peerStore","eventName","eventProperty","eventTransformer","data","pubKey","Map","peerId","publicKey","isPeerId","Error","id","toB58String","recPeerId","get","_setData","rec","undefined","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p/src/peer-store/key-book.js"],"sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = Object.assign(debug('libp2p:peer-store:key-book'), {\n  error: debug('libp2p:peer-store:key-book:err')\n})\nconst errcode = require('err-code')\n\nconst PeerId = require('peer-id')\n\nconst Book = require('./book')\n\nconst {\n  codes: { ERR_INVALID_PARAMETERS }\n} = require('../errors')\n\n/**\n * @typedef {import('./')} PeerStore\n * @typedef {import('libp2p-crypto').PublicKey} PublicKey\n */\n\n/**\n * @extends {Book}\n */\nclass KeyBook extends Book {\n  /**\n   * The KeyBook is responsible for keeping the known public keys of a peer.\n   *\n   * @class\n   * @param {PeerStore} peerStore\n   */\n  constructor (peerStore) {\n    super({\n      peerStore,\n      eventName: 'change:pubkey',\n      eventProperty: 'pubkey',\n      eventTransformer: (data) => data.pubKey\n    })\n\n    /**\n     * Map known peers to their known Public Key.\n     *\n     * @type {Map<string, PeerId>}\n     */\n    this.data = new Map()\n  }\n\n  /**\n   * Set the Peer public key.\n   *\n   * @override\n   * @param {PeerId} peerId\n   * @param {PublicKey} publicKey\n   * @returns {KeyBook}\n   */\n  set (peerId, publicKey) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data')\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    const id = peerId.toB58String()\n    const recPeerId = this.data.get(id)\n\n    // If no record available, and this is valid\n    if (!recPeerId && publicKey) {\n      // This might be unecessary, but we want to store the PeerId\n      // to avoid an async operation when reconstructing the PeerId\n      peerId.pubKey = publicKey\n\n      this._setData(peerId, peerId)\n      log(`stored provided public key for ${id}`)\n    }\n\n    return this\n  }\n\n  /**\n   * Get Public key of the given PeerId, if stored.\n   *\n   * @override\n   * @param {PeerId} peerId\n   * @returns {PublicKey | undefined}\n   */\n  get (peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS)\n    }\n\n    const rec = this.data.get(peerId.toB58String())\n\n    return rec ? rec.pubKey : undefined\n  }\n}\n\nmodule.exports = KeyBook\n"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMC,GAAG,GAAGC,MAAM,CAACC,MAAP,CAAcJ,KAAK,CAAC,4BAAD,CAAnB,EAAmD;EAC7DK,KAAK,EAAEL,KAAK,CAAC,gCAAD;AADiD,CAAnD,CAAZ;;AAGA,IAAMM,OAAO,GAAGL,OAAO,CAAC,UAAD,CAAvB;;AAEA,IAAMM,MAAM,GAAGN,OAAO,CAAC,SAAD,CAAtB;;AAEA,IAAMO,IAAI,GAAGP,OAAO,CAAC,QAAD,CAApB;;AAEA,eAEIA,OAAO,CAAC,WAAD,CAFX;AAAA,IACWQ,sBADX,YACEC,KADF,CACWD,sBADX;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;IACME,O;;;;;EACJ;AACF;AACA;AACA;AACA;AACA;EACE,iBAAaC,SAAb,EAAwB;IAAA;;IAAA;;IACtB,0BAAM;MACJA,SAAS,EAATA,SADI;MAEJC,SAAS,EAAE,eAFP;MAGJC,aAAa,EAAE,QAHX;MAIJC,gBAAgB,EAAE,0BAACC,IAAD;QAAA,OAAUA,IAAI,CAACC,MAAf;MAAA;IAJd,CAAN;IAOA;AACJ;AACA;AACA;AACA;;IACI,MAAKD,IAAL,GAAY,IAAIE,GAAJ,EAAZ;IAbsB;EAcvB;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;;WACE,aAAKC,MAAL,EAAaC,SAAb,EAAwB;MACtB,IAAI,CAACb,MAAM,CAACc,QAAP,CAAgBF,MAAhB,CAAL,EAA8B;QAC5BjB,GAAG,CAACG,KAAJ,CAAU,qDAAV;QACA,MAAMC,OAAO,CAAC,IAAIgB,KAAJ,CAAU,uCAAV,CAAD,EAAqDb,sBAArD,CAAb;MACD;;MAED,IAAMc,EAAE,GAAGJ,MAAM,CAACK,WAAP,EAAX;MACA,IAAMC,SAAS,GAAG,KAAKT,IAAL,CAAUU,GAAV,CAAcH,EAAd,CAAlB,CAPsB,CAStB;;MACA,IAAI,CAACE,SAAD,IAAcL,SAAlB,EAA6B;QAC3B;QACA;QACAD,MAAM,CAACF,MAAP,GAAgBG,SAAhB;;QAEA,KAAKO,QAAL,CAAcR,MAAd,EAAsBA,MAAtB;;QACAjB,GAAG,0CAAmCqB,EAAnC,EAAH;MACD;;MAED,OAAO,IAAP;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;WACE,aAAKJ,MAAL,EAAa;MACX,IAAI,CAACZ,MAAM,CAACc,QAAP,CAAgBF,MAAhB,CAAL,EAA8B;QAC5B,MAAMb,OAAO,CAAC,IAAIgB,KAAJ,CAAU,uCAAV,CAAD,EAAqDb,sBAArD,CAAb;MACD;;MAED,IAAMmB,GAAG,GAAG,KAAKZ,IAAL,CAAUU,GAAV,CAAcP,MAAM,CAACK,WAAP,EAAd,CAAZ;MAEA,OAAOI,GAAG,GAAGA,GAAG,CAACX,MAAP,GAAgBY,SAA1B;IACD;;;;EApEmBrB,I;;AAuEtBsB,MAAM,CAACC,OAAP,GAAiBpB,OAAjB"},"metadata":{},"sourceType":"script"}