{"ast":null,"code":"import IpfsPubsubPeerMonitor from \"ipfs-pubsub-peer-monitor\";\nimport { makeAutoObservable, runInAction } from \"mobx\";\nexport class ChannelStore {\n  constructor(rootStore) {\n    this.rootStore = rootStore;\n    this.channel = undefined;\n    makeAutoObservable(this);\n  }\n\n  async init(topic) {\n    if (this.rootStore.dataStore.ipfsNode === undefined) throw Error(\"IPFS Node not defined!\");\n    if (this.rootStore.dataStore.orbitDb === undefined) throw Error(\"OrbitDb not defined!\");\n    runInAction(async () => {\n      this.channelName = topic;\n      this.channel = new IpfsPubsubPeerMonitor(this.rootStore.dataStore.ipfsNode.pubsub, topic);\n      await this.listenForJoinedPeers();\n      await this.listenForLeftPeers();\n    });\n  }\n\n  async listenForJoinedPeers() {\n    this.channel.on(\"join\", async peerJoined => {\n      console.log(\"Peer joined: \" + peerJoined);\n      console.log(`Peers on Pubsub ${this.channelName}: ` + (await this.channel.getPeers()));\n      await this.rootStore.dataStore.peersDb.add(peerJoined);\n      setTimeout(async () => {\n        const nodeId = await this.rootStore.dataStore.getPeerId();\n        await this.rootStore.dataStore.peersDb.all.map(peer => {\n          if (peer !== nodeId) {\n            this.rootStore.dataStore.ipfsNode.pubsub.publish(peer, {\n              peerDb: this.rootStore.dataStore.getPeersDbId()\n            });\n          }\n        });\n      }, 2000);\n    });\n  }\n\n  async listenForLeftPeers() {\n    this.channel.on(\"leave\", async peerLeft => {\n      console.log(\"Peer left: \" + peerLeft);\n      console.log(`Peers on Pubsub ${this.channelName}: ` + (await this.channel.getPeers()));\n    });\n  }\n\n}","map":{"version":3,"names":["IpfsPubsubPeerMonitor","makeAutoObservable","runInAction","ChannelStore","constructor","rootStore","channel","undefined","init","topic","dataStore","ipfsNode","Error","orbitDb","channelName","pubsub","listenForJoinedPeers","listenForLeftPeers","on","peerJoined","console","log","getPeers","peersDb","add","setTimeout","nodeId","getPeerId","all","map","peer","publish","peerDb","getPeersDbId","peerLeft"],"sources":["C:/Users/zajan/GitHub/chatApplication/src/data/store/ChannelStore.js"],"sourcesContent":["import IpfsPubsubPeerMonitor from \"ipfs-pubsub-peer-monitor\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\n\r\nexport class ChannelStore {\r\n  channel;\r\n  channelName;\r\n  peersDb;\r\n\r\n  constructor(rootStore) {\r\n    this.rootStore = rootStore;\r\n    this.channel = undefined;\r\n    makeAutoObservable(this);\r\n  }\r\n  async init(topic) {\r\n    if (this.rootStore.dataStore.ipfsNode === undefined) throw Error(\"IPFS Node not defined!\");\r\n    if (this.rootStore.dataStore.orbitDb === undefined) throw Error(\"OrbitDb not defined!\");\r\n    runInAction(async () => {\r\n      this.channelName = topic;\r\n      this.channel = new IpfsPubsubPeerMonitor(this.rootStore.dataStore.ipfsNode.pubsub, topic);\r\n      await this.listenForJoinedPeers();\r\n      await this.listenForLeftPeers();\r\n    });\r\n  }\r\n\r\n  async listenForJoinedPeers() {\r\n    this.channel.on(\"join\", async (peerJoined) => {\r\n      console.log(\"Peer joined: \" + peerJoined);\r\n      console.log(`Peers on Pubsub ${this.channelName}: ` + (await this.channel.getPeers()));\r\n      await this.rootStore.dataStore.peersDb.add(peerJoined);\r\n      setTimeout(async () => {\r\n        const nodeId = await this.rootStore.dataStore.getPeerId();\r\n        await this.rootStore.dataStore.peersDb.all.map((peer) => {\r\n          if (peer !== nodeId) {\r\n            this.rootStore.dataStore.ipfsNode.pubsub.publish(peer, { peerDb: this.rootStore.dataStore.getPeersDbId() });\r\n          }\r\n        });\r\n      }, 2000);\r\n    });\r\n  }\r\n  async listenForLeftPeers() {\r\n    this.channel.on(\"leave\", async (peerLeft) => {\r\n      console.log(\"Peer left: \" + peerLeft);\r\n      console.log(`Peers on Pubsub ${this.channelName}: ` + (await this.channel.getPeers()));\r\n    });\r\n  }\r\n}\r\n"],"mappings":"AAAA,OAAOA,qBAAP,MAAkC,0BAAlC;AACA,SAASC,kBAAT,EAA6BC,WAA7B,QAAgD,MAAhD;AAEA,OAAO,MAAMC,YAAN,CAAmB;EAKxBC,WAAW,CAACC,SAAD,EAAY;IACrB,KAAKA,SAAL,GAAiBA,SAAjB;IACA,KAAKC,OAAL,GAAeC,SAAf;IACAN,kBAAkB,CAAC,IAAD,CAAlB;EACD;;EACS,MAAJO,IAAI,CAACC,KAAD,EAAQ;IAChB,IAAI,KAAKJ,SAAL,CAAeK,SAAf,CAAyBC,QAAzB,KAAsCJ,SAA1C,EAAqD,MAAMK,KAAK,CAAC,wBAAD,CAAX;IACrD,IAAI,KAAKP,SAAL,CAAeK,SAAf,CAAyBG,OAAzB,KAAqCN,SAAzC,EAAoD,MAAMK,KAAK,CAAC,sBAAD,CAAX;IACpDV,WAAW,CAAC,YAAY;MACtB,KAAKY,WAAL,GAAmBL,KAAnB;MACA,KAAKH,OAAL,GAAe,IAAIN,qBAAJ,CAA0B,KAAKK,SAAL,CAAeK,SAAf,CAAyBC,QAAzB,CAAkCI,MAA5D,EAAoEN,KAApE,CAAf;MACA,MAAM,KAAKO,oBAAL,EAAN;MACA,MAAM,KAAKC,kBAAL,EAAN;IACD,CALU,CAAX;EAMD;;EAEyB,MAApBD,oBAAoB,GAAG;IAC3B,KAAKV,OAAL,CAAaY,EAAb,CAAgB,MAAhB,EAAwB,MAAOC,UAAP,IAAsB;MAC5CC,OAAO,CAACC,GAAR,CAAY,kBAAkBF,UAA9B;MACAC,OAAO,CAACC,GAAR,CAAa,mBAAkB,KAAKP,WAAY,IAApC,IAA2C,MAAM,KAAKR,OAAL,CAAagB,QAAb,EAAjD,CAAZ;MACA,MAAM,KAAKjB,SAAL,CAAeK,SAAf,CAAyBa,OAAzB,CAAiCC,GAAjC,CAAqCL,UAArC,CAAN;MACAM,UAAU,CAAC,YAAY;QACrB,MAAMC,MAAM,GAAG,MAAM,KAAKrB,SAAL,CAAeK,SAAf,CAAyBiB,SAAzB,EAArB;QACA,MAAM,KAAKtB,SAAL,CAAeK,SAAf,CAAyBa,OAAzB,CAAiCK,GAAjC,CAAqCC,GAArC,CAA0CC,IAAD,IAAU;UACvD,IAAIA,IAAI,KAAKJ,MAAb,EAAqB;YACnB,KAAKrB,SAAL,CAAeK,SAAf,CAAyBC,QAAzB,CAAkCI,MAAlC,CAAyCgB,OAAzC,CAAiDD,IAAjD,EAAuD;cAAEE,MAAM,EAAE,KAAK3B,SAAL,CAAeK,SAAf,CAAyBuB,YAAzB;YAAV,CAAvD;UACD;QACF,CAJK,CAAN;MAKD,CAPS,EAOP,IAPO,CAAV;IAQD,CAZD;EAaD;;EACuB,MAAlBhB,kBAAkB,GAAG;IACzB,KAAKX,OAAL,CAAaY,EAAb,CAAgB,OAAhB,EAAyB,MAAOgB,QAAP,IAAoB;MAC3Cd,OAAO,CAACC,GAAR,CAAY,gBAAgBa,QAA5B;MACAd,OAAO,CAACC,GAAR,CAAa,mBAAkB,KAAKP,WAAY,IAApC,IAA2C,MAAM,KAAKR,OAAL,CAAagB,QAAb,EAAjD,CAAZ;IACD,CAHD;EAID;;AAzCuB"},"metadata":{},"sourceType":"module"}