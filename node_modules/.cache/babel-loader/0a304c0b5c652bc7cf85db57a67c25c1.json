{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar _createForOfIteratorHelper = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar debug = require('debug');\n\nvar log = Object.assign(debug('libp2p:registrar'), {\n  error: debug('libp2p:registrar:err')\n});\n\nvar errcode = require('err-code');\n\nvar _require = require('./errors'),\n    ERR_INVALID_PARAMETERS = _require.codes.ERR_INVALID_PARAMETERS;\n\nvar Topology = require('libp2p-interfaces/src/topology');\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('./peer-store')} PeerStore\n * @typedef {import('./connection-manager')} ConnectionManager\n * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection\n * @typedef {import('./').HandlerProps} HandlerProps\n */\n\n/**\n *\n */\n\n/**\n * Responsible for notifying registered protocols of events in the network.\n */\n\n\nvar Registrar = /*#__PURE__*/function () {\n  /**\n   * @param {Object} props\n   * @param {PeerStore} props.peerStore\n   * @param {ConnectionManager} props.connectionManager\n   * @class\n   */\n  function Registrar(_ref) {\n    var peerStore = _ref.peerStore,\n        connectionManager = _ref.connectionManager;\n\n    _classCallCheck(this, Registrar);\n\n    // Used on topology to listen for protocol changes\n    this.peerStore = peerStore;\n    this.connectionManager = connectionManager;\n    /**\n     * Map of topologies\n     *\n     * @type {Map<string, Topology>}\n     */\n\n    this.topologies = new Map();\n    /** @type {(protocols: string[]|string, handler: (props: HandlerProps) => void) => void} */\n    // @ts-ignore handle is not optional\n\n    this._handle = undefined;\n    this._onDisconnect = this._onDisconnect.bind(this);\n    this.connectionManager.on('peer:disconnect', this._onDisconnect);\n  }\n  /**\n   * @returns {(protocols: string[]|string, handler: (props: HandlerProps) => void) => void}\n   */\n\n\n  _createClass(Registrar, [{\n    key: \"handle\",\n    get: function get() {\n      return this._handle;\n    }\n    /**\n     * @param {(protocols: string[]|string, handler: (props: HandlerProps) => void) => void} handle\n     */\n    ,\n    set: function set(handle) {\n      this._handle = handle;\n    }\n    /**\n     * Get a connection with a peer.\n     *\n     * @param {PeerId} peerId\n     * @returns {Connection | null}\n     */\n\n  }, {\n    key: \"getConnection\",\n    value: function getConnection(peerId) {\n      return this.connectionManager.get(peerId);\n    }\n    /**\n     * Register handlers for a set of multicodecs given\n     *\n     * @param {Topology} topology - protocol topology\n     * @returns {string} registrar identifier\n     */\n\n  }, {\n    key: \"register\",\n    value: function register(topology) {\n      if (!Topology.isTopology(topology)) {\n        log.error('topology must be an instance of interfaces/topology');\n        throw errcode(new Error('topology must be an instance of interfaces/topology'), ERR_INVALID_PARAMETERS);\n      } // Create topology\n\n\n      var id = (Math.random() * 1e9).toString(36) + Date.now();\n      this.topologies.set(id, topology); // Set registrar\n\n      topology.registrar = this;\n      return id;\n    }\n    /**\n     * Unregister topology.\n     *\n     * @param {string} id - registrar identifier\n     * @returns {boolean} unregistered successfully\n     */\n\n  }, {\n    key: \"unregister\",\n    value: function unregister(id) {\n      return this.topologies.delete(id);\n    }\n    /**\n     * Remove a disconnected peer from the record\n     *\n     * @param {Connection} connection\n     * @returns {void}\n     */\n\n  }, {\n    key: \"_onDisconnect\",\n    value: function _onDisconnect(connection) {\n      var _iterator = _createForOfIteratorHelper(this.topologies),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              topology = _step$value[1];\n\n          topology.disconnect(connection.remotePeer);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }]);\n\n  return Registrar;\n}();\n\nmodule.exports = Registrar;","map":{"version":3,"names":["debug","require","log","Object","assign","error","errcode","ERR_INVALID_PARAMETERS","codes","Topology","Registrar","peerStore","connectionManager","topologies","Map","_handle","undefined","_onDisconnect","bind","on","handle","peerId","get","topology","isTopology","Error","id","Math","random","toString","Date","now","set","registrar","delete","connection","disconnect","remotePeer","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p/src/registrar.js"],"sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = Object.assign(debug('libp2p:registrar'), {\n  error: debug('libp2p:registrar:err')\n})\nconst errcode = require('err-code')\n\nconst {\n  codes: { ERR_INVALID_PARAMETERS }\n} = require('./errors')\nconst Topology = require('libp2p-interfaces/src/topology')\n\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('./peer-store')} PeerStore\n * @typedef {import('./connection-manager')} ConnectionManager\n * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection\n * @typedef {import('./').HandlerProps} HandlerProps\n */\n\n/**\n *\n */\n\n/**\n * Responsible for notifying registered protocols of events in the network.\n */\nclass Registrar {\n  /**\n   * @param {Object} props\n   * @param {PeerStore} props.peerStore\n   * @param {ConnectionManager} props.connectionManager\n   * @class\n   */\n  constructor ({ peerStore, connectionManager }) {\n    // Used on topology to listen for protocol changes\n    this.peerStore = peerStore\n\n    this.connectionManager = connectionManager\n\n    /**\n     * Map of topologies\n     *\n     * @type {Map<string, Topology>}\n     */\n    this.topologies = new Map()\n\n    /** @type {(protocols: string[]|string, handler: (props: HandlerProps) => void) => void} */\n    // @ts-ignore handle is not optional\n    this._handle = undefined\n\n    this._onDisconnect = this._onDisconnect.bind(this)\n    this.connectionManager.on('peer:disconnect', this._onDisconnect)\n  }\n\n  /**\n   * @returns {(protocols: string[]|string, handler: (props: HandlerProps) => void) => void}\n   */\n  get handle () {\n    return this._handle\n  }\n\n  /**\n   * @param {(protocols: string[]|string, handler: (props: HandlerProps) => void) => void} handle\n   */\n  set handle (handle) {\n    this._handle = handle\n  }\n\n  /**\n   * Get a connection with a peer.\n   *\n   * @param {PeerId} peerId\n   * @returns {Connection | null}\n   */\n  getConnection (peerId) {\n    return this.connectionManager.get(peerId)\n  }\n\n  /**\n   * Register handlers for a set of multicodecs given\n   *\n   * @param {Topology} topology - protocol topology\n   * @returns {string} registrar identifier\n   */\n  register (topology) {\n    if (!Topology.isTopology(topology)) {\n      log.error('topology must be an instance of interfaces/topology')\n      throw errcode(new Error('topology must be an instance of interfaces/topology'), ERR_INVALID_PARAMETERS)\n    }\n\n    // Create topology\n    const id = (Math.random() * 1e9).toString(36) + Date.now()\n\n    this.topologies.set(id, topology)\n\n    // Set registrar\n    topology.registrar = this\n\n    return id\n  }\n\n  /**\n   * Unregister topology.\n   *\n   * @param {string} id - registrar identifier\n   * @returns {boolean} unregistered successfully\n   */\n  unregister (id) {\n    return this.topologies.delete(id)\n  }\n\n  /**\n   * Remove a disconnected peer from the record\n   *\n   * @param {Connection} connection\n   * @returns {void}\n   */\n  _onDisconnect (connection) {\n    for (const [, topology] of this.topologies) {\n      topology.disconnect(connection.remotePeer)\n    }\n  }\n}\n\nmodule.exports = Registrar\n"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMC,GAAG,GAAGC,MAAM,CAACC,MAAP,CAAcJ,KAAK,CAAC,kBAAD,CAAnB,EAAyC;EACnDK,KAAK,EAAEL,KAAK,CAAC,sBAAD;AADuC,CAAzC,CAAZ;;AAGA,IAAMM,OAAO,GAAGL,OAAO,CAAC,UAAD,CAAvB;;AAEA,eAEIA,OAAO,CAAC,UAAD,CAFX;AAAA,IACWM,sBADX,YACEC,KADF,CACWD,sBADX;;AAGA,IAAME,QAAQ,GAAGR,OAAO,CAAC,gCAAD,CAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;IACMS,S;EACJ;AACF;AACA;AACA;AACA;AACA;EACE,yBAA+C;IAAA,IAAhCC,SAAgC,QAAhCA,SAAgC;IAAA,IAArBC,iBAAqB,QAArBA,iBAAqB;;IAAA;;IAC7C;IACA,KAAKD,SAAL,GAAiBA,SAAjB;IAEA,KAAKC,iBAAL,GAAyBA,iBAAzB;IAEA;AACJ;AACA;AACA;AACA;;IACI,KAAKC,UAAL,GAAkB,IAAIC,GAAJ,EAAlB;IAEA;IACA;;IACA,KAAKC,OAAL,GAAeC,SAAf;IAEA,KAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArB;IACA,KAAKN,iBAAL,CAAuBO,EAAvB,CAA0B,iBAA1B,EAA6C,KAAKF,aAAlD;EACD;EAED;AACF;AACA;;;;;SACE,eAAc;MACZ,OAAO,KAAKF,OAAZ;IACD;IAED;AACF;AACA;;SACE,aAAYK,MAAZ,EAAoB;MAClB,KAAKL,OAAL,GAAeK,MAAf;IACD;IAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,uBAAeC,MAAf,EAAuB;MACrB,OAAO,KAAKT,iBAAL,CAAuBU,GAAvB,CAA2BD,MAA3B,CAAP;IACD;IAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,kBAAUE,QAAV,EAAoB;MAClB,IAAI,CAACd,QAAQ,CAACe,UAAT,CAAoBD,QAApB,CAAL,EAAoC;QAClCrB,GAAG,CAACG,KAAJ,CAAU,qDAAV;QACA,MAAMC,OAAO,CAAC,IAAImB,KAAJ,CAAU,qDAAV,CAAD,EAAmElB,sBAAnE,CAAb;MACD,CAJiB,CAMlB;;;MACA,IAAMmB,EAAE,GAAG,CAACC,IAAI,CAACC,MAAL,KAAgB,GAAjB,EAAsBC,QAAtB,CAA+B,EAA/B,IAAqCC,IAAI,CAACC,GAAL,EAAhD;MAEA,KAAKlB,UAAL,CAAgBmB,GAAhB,CAAoBN,EAApB,EAAwBH,QAAxB,EATkB,CAWlB;;MACAA,QAAQ,CAACU,SAAT,GAAqB,IAArB;MAEA,OAAOP,EAAP;IACD;IAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,oBAAYA,EAAZ,EAAgB;MACd,OAAO,KAAKb,UAAL,CAAgBqB,MAAhB,CAAuBR,EAAvB,CAAP;IACD;IAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,uBAAeS,UAAf,EAA2B;MAAA,2CACE,KAAKtB,UADP;MAAA;;MAAA;QACzB,oDAA4C;UAAA;UAAA,IAA9BU,QAA8B;;UAC1CA,QAAQ,CAACa,UAAT,CAAoBD,UAAU,CAACE,UAA/B;QACD;MAHwB;QAAA;MAAA;QAAA;MAAA;IAI1B;;;;;;AAGHC,MAAM,CAACC,OAAP,GAAiB7B,SAAjB"},"metadata":{},"sourceType":"script"}