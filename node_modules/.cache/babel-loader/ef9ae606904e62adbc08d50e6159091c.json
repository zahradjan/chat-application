{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _createForOfIteratorHelper = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _toConsumableArray = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar log = require('debug')('mss:select');\n\nvar errCode = require('err-code');\n\nvar multistream = require('./multistream');\n\nvar handshake = require('it-handshake');\n\nmodule.exports = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(stream, protocols, protocolId) {\n    var _handshake, reader, writer, rest, shakeStream, protocol, response, _iterator, _step, _protocol, _response;\n\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            protocols = Array.isArray(protocols) ? _toConsumableArray(protocols) : [protocols];\n            _handshake = handshake(stream), reader = _handshake.reader, writer = _handshake.writer, rest = _handshake.rest, shakeStream = _handshake.stream;\n            protocol = protocols.shift();\n\n            if (protocolId) {\n              log('select: write [\"%s\", \"%s\"]', protocolId, protocol);\n              multistream.writeAll(writer, [protocolId, protocol]);\n            } else {\n              log('select: write \"%s\"', protocol);\n              multistream.write(writer, protocol);\n            }\n\n            _context.next = 6;\n            return multistream.read(reader);\n\n          case 6:\n            response = _context.sent.toString();\n            log('select: read \"%s\"', response); // Read the protocol response if we got the protocolId in return\n\n            if (!(response === protocolId)) {\n              _context.next = 13;\n              break;\n            }\n\n            _context.next = 11;\n            return multistream.read(reader);\n\n          case 11:\n            response = _context.sent.toString();\n            log('select: read \"%s\"', response);\n\n          case 13:\n            if (!(response === protocol)) {\n              _context.next = 16;\n              break;\n            }\n\n            rest();\n            return _context.abrupt(\"return\", {\n              stream: shakeStream,\n              protocol: protocol\n            });\n\n          case 16:\n            // We haven't gotten a valid ack, try the other protocols\n            _iterator = _createForOfIteratorHelper(protocols);\n            _context.prev = 17;\n\n            _iterator.s();\n\n          case 19:\n            if ((_step = _iterator.n()).done) {\n              _context.next = 32;\n              break;\n            }\n\n            _protocol = _step.value;\n            log('select: write \"%s\"', _protocol);\n            multistream.write(writer, _protocol);\n            _context.next = 25;\n            return multistream.read(reader);\n\n          case 25:\n            _response = _context.sent.toString();\n            log('select: read \"%s\" for \"%s\"', _response, _protocol);\n\n            if (!(_response === _protocol)) {\n              _context.next = 30;\n              break;\n            }\n\n            rest(); // End our writer so others can start writing to stream\n\n            return _context.abrupt(\"return\", {\n              stream: shakeStream,\n              protocol: _protocol\n            });\n\n          case 30:\n            _context.next = 19;\n            break;\n\n          case 32:\n            _context.next = 37;\n            break;\n\n          case 34:\n            _context.prev = 34;\n            _context.t0 = _context[\"catch\"](17);\n\n            _iterator.e(_context.t0);\n\n          case 37:\n            _context.prev = 37;\n\n            _iterator.f();\n\n            return _context.finish(37);\n\n          case 40:\n            rest();\n            throw errCode(new Error('protocol selection failed'), 'ERR_UNSUPPORTED_PROTOCOL');\n\n          case 42:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[17, 34, 37, 40]]);\n  }));\n\n  return function (_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["log","require","errCode","multistream","handshake","module","exports","stream","protocols","protocolId","Array","isArray","reader","writer","rest","shakeStream","protocol","shift","writeAll","write","read","response","toString","Error"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/multistream-select/src/select.js"],"sourcesContent":["'use strict'\n\nconst log = require('debug')('mss:select')\nconst errCode = require('err-code')\nconst multistream = require('./multistream')\nconst handshake = require('it-handshake')\n\nmodule.exports = async (stream, protocols, protocolId) => {\n  protocols = Array.isArray(protocols) ? [...protocols] : [protocols]\n  const { reader, writer, rest, stream: shakeStream } = handshake(stream)\n\n  const protocol = protocols.shift()\n  if (protocolId) {\n    log('select: write [\"%s\", \"%s\"]', protocolId, protocol)\n    multistream.writeAll(writer, [protocolId, protocol])\n  } else {\n    log('select: write \"%s\"', protocol)\n    multistream.write(writer, protocol)\n  }\n\n  let response = (await multistream.read(reader)).toString()\n  log('select: read \"%s\"', response)\n\n  // Read the protocol response if we got the protocolId in return\n  if (response === protocolId) {\n    response = (await multistream.read(reader)).toString()\n    log('select: read \"%s\"', response)\n  }\n\n  // We're done\n  if (response === protocol) {\n    rest()\n    return { stream: shakeStream, protocol }\n  }\n\n  // We haven't gotten a valid ack, try the other protocols\n  for (const protocol of protocols) {\n    log('select: write \"%s\"', protocol)\n    multistream.write(writer, protocol)\n    const response = (await multistream.read(reader)).toString()\n    log('select: read \"%s\" for \"%s\"', response, protocol)\n\n    if (response === protocol) {\n      rest() // End our writer so others can start writing to stream\n      return { stream: shakeStream, protocol }\n    }\n  }\n\n  rest()\n  throw errCode(new Error('protocol selection failed'), 'ERR_UNSUPPORTED_PROTOCOL')\n}\n"],"mappings":"AAAA;;;;;;;;;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,YAAjB,CAAZ;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AACA,IAAME,WAAW,GAAGF,OAAO,CAAC,eAAD,CAA3B;;AACA,IAAMG,SAAS,GAAGH,OAAO,CAAC,cAAD,CAAzB;;AAEAI,MAAM,CAACC,OAAP;EAAA,sEAAiB,iBAAOC,MAAP,EAAeC,SAAf,EAA0BC,UAA1B;IAAA;;IAAA;MAAA;QAAA;UAAA;YACfD,SAAS,GAAGE,KAAK,CAACC,OAAN,CAAcH,SAAd,uBAA+BA,SAA/B,IAA4C,CAACA,SAAD,CAAxD;YADe,aAEuCJ,SAAS,CAACG,MAAD,CAFhD,EAEPK,MAFO,cAEPA,MAFO,EAECC,MAFD,cAECA,MAFD,EAESC,IAFT,cAESA,IAFT,EAEuBC,WAFvB,cAEeR,MAFf;YAITS,QAJS,GAIER,SAAS,CAACS,KAAV,EAJF;;YAKf,IAAIR,UAAJ,EAAgB;cACdT,GAAG,CAAC,4BAAD,EAA+BS,UAA/B,EAA2CO,QAA3C,CAAH;cACAb,WAAW,CAACe,QAAZ,CAAqBL,MAArB,EAA6B,CAACJ,UAAD,EAAaO,QAAb,CAA7B;YACD,CAHD,MAGO;cACLhB,GAAG,CAAC,oBAAD,EAAuBgB,QAAvB,CAAH;cACAb,WAAW,CAACgB,KAAZ,CAAkBN,MAAlB,EAA0BG,QAA1B;YACD;;YAXc;YAAA,OAaOb,WAAW,CAACiB,IAAZ,CAAiBR,MAAjB,CAbP;;UAAA;YAaXS,QAbW,iBAaiCC,QAbjC;YAcftB,GAAG,CAAC,mBAAD,EAAsBqB,QAAtB,CAAH,CAde,CAgBf;;YAhBe,MAiBXA,QAAQ,KAAKZ,UAjBF;cAAA;cAAA;YAAA;;YAAA;YAAA,OAkBKN,WAAW,CAACiB,IAAZ,CAAiBR,MAAjB,CAlBL;;UAAA;YAkBbS,QAlBa,iBAkB+BC,QAlB/B;YAmBbtB,GAAG,CAAC,mBAAD,EAAsBqB,QAAtB,CAAH;;UAnBa;YAAA,MAuBXA,QAAQ,KAAKL,QAvBF;cAAA;cAAA;YAAA;;YAwBbF,IAAI;YAxBS,iCAyBN;cAAEP,MAAM,EAAEQ,WAAV;cAAuBC,QAAQ,EAARA;YAAvB,CAzBM;;UAAA;YA4Bf;YA5Be,uCA6BQR,SA7BR;YAAA;;YAAA;;UAAA;YAAA;cAAA;cAAA;YAAA;;YA6BJQ,SA7BI;YA8BbhB,GAAG,CAAC,oBAAD,EAAuBgB,SAAvB,CAAH;YACAb,WAAW,CAACgB,KAAZ,CAAkBN,MAAlB,EAA0BG,SAA1B;YA/Ba;YAAA,OAgCWb,WAAW,CAACiB,IAAZ,CAAiBR,MAAjB,CAhCX;;UAAA;YAgCPS,SAhCO,iBAgCqCC,QAhCrC;YAiCbtB,GAAG,CAAC,4BAAD,EAA+BqB,SAA/B,EAAyCL,SAAzC,CAAH;;YAjCa,MAmCTK,SAAQ,KAAKL,SAnCJ;cAAA;cAAA;YAAA;;YAoCXF,IAAI,GApCO,CAoCJ;;YApCI,iCAqCJ;cAAEP,MAAM,EAAEQ,WAAV;cAAuBC,QAAQ,EAARA;YAAvB,CArCI;;UAAA;YAAA;YAAA;;UAAA;YAAA;YAAA;;UAAA;YAAA;YAAA;;YAAA;;UAAA;YAAA;;YAAA;;YAAA;;UAAA;YAyCfF,IAAI;YAzCW,MA0CTZ,OAAO,CAAC,IAAIqB,KAAJ,CAAU,2BAAV,CAAD,EAAyC,0BAAzC,CA1CE;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAjB;;EAAA;IAAA;EAAA;AAAA"},"metadata":{},"sourceType":"script"}