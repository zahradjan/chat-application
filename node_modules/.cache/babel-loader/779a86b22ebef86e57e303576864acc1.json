{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst log = Object.assign(debug('ipfs:mfs-preload'), {\n  error: debug('ipfs:mfs-preload:error')\n});\n/**\n * @typedef {PreloadOptions & MFSPreloadOptions} Options\n * @typedef {Object} MFSPreloadOptions\n * @property {number} [interval]\n * @typedef {import('./types').PreloadOptions} PreloadOptions\n */\n\n/**\n * @param {Object} config\n * @param {import('./types').Preload} config.preload\n * @param {import('ipfs-core-types/src/files').API} config.files\n * @param {Options} [config.options]\n */\n\nmodule.exports = _ref => {\n  let {\n    preload,\n    files,\n    options = {}\n  } = _ref;\n  options.interval = options.interval || 30 * 1000;\n\n  if (!options.enabled) {\n    log('MFS preload disabled');\n\n    const noop = async () => {};\n\n    return {\n      start: noop,\n      stop: noop\n    };\n  }\n\n  let rootCid = '';\n  /** @type {any} */\n\n  let timeoutId;\n\n  const preloadMfs = async () => {\n    try {\n      const stats = await files.stat('/');\n      const nextRootCid = stats.cid.toString();\n\n      if (rootCid !== nextRootCid) {\n        log(`preloading updated MFS root ${rootCid} -> ${stats.cid}`);\n        await preload(stats.cid);\n        rootCid = nextRootCid;\n      }\n    } catch (err) {\n      log.error('failed to preload MFS root', err);\n    } finally {\n      timeoutId = setTimeout(preloadMfs, options.interval);\n    }\n  };\n\n  return {\n    /**\n     * @returns {Promise<void>}\n     */\n    async start() {\n      const stats = await files.stat('/');\n      rootCid = stats.cid.toString();\n      log(`monitoring MFS root ${stats.cid}`);\n      timeoutId = setTimeout(preloadMfs, options.interval);\n    },\n\n    /**\n     * @returns {void}\n     */\n    stop() {\n      clearTimeout(timeoutId);\n    }\n\n  };\n};","map":{"version":3,"names":["debug","require","log","Object","assign","error","module","exports","preload","files","options","interval","enabled","noop","start","stop","rootCid","timeoutId","preloadMfs","stats","stat","nextRootCid","cid","toString","err","setTimeout","clearTimeout"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/mfs-preload.js"],"sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = Object.assign(debug('ipfs:mfs-preload'), {\n  error: debug('ipfs:mfs-preload:error')\n})\n\n/**\n * @typedef {PreloadOptions & MFSPreloadOptions} Options\n * @typedef {Object} MFSPreloadOptions\n * @property {number} [interval]\n * @typedef {import('./types').PreloadOptions} PreloadOptions\n */\n\n/**\n * @param {Object} config\n * @param {import('./types').Preload} config.preload\n * @param {import('ipfs-core-types/src/files').API} config.files\n * @param {Options} [config.options]\n */\nmodule.exports = ({ preload, files, options = {} }) => {\n  options.interval = options.interval || 30 * 1000\n\n  if (!options.enabled) {\n    log('MFS preload disabled')\n    const noop = async () => {}\n    return { start: noop, stop: noop }\n  }\n\n  let rootCid = ''\n  /** @type {any} */\n  let timeoutId\n\n  const preloadMfs = async () => {\n    try {\n      const stats = await files.stat('/')\n      const nextRootCid = stats.cid.toString()\n\n      if (rootCid !== nextRootCid) {\n        log(`preloading updated MFS root ${rootCid} -> ${stats.cid}`)\n        await preload(stats.cid)\n        rootCid = nextRootCid\n      }\n    } catch (err) {\n      log.error('failed to preload MFS root', err)\n    } finally {\n      timeoutId = setTimeout(preloadMfs, options.interval)\n    }\n  }\n\n  return {\n    /**\n     * @returns {Promise<void>}\n     */\n    async start () {\n      const stats = await files.stat('/')\n      rootCid = stats.cid.toString()\n      log(`monitoring MFS root ${stats.cid}`)\n      timeoutId = setTimeout(preloadMfs, options.interval)\n    },\n    /**\n     * @returns {void}\n     */\n    stop () {\n      clearTimeout(timeoutId)\n    }\n  }\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,GAAG,GAAGC,MAAM,CAACC,MAAP,CAAcJ,KAAK,CAAC,kBAAD,CAAnB,EAAyC;EACnDK,KAAK,EAAEL,KAAK,CAAC,wBAAD;AADuC,CAAzC,CAAZ;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACAM,MAAM,CAACC,OAAP,GAAiB,QAAsC;EAAA,IAArC;IAAEC,OAAF;IAAWC,KAAX;IAAkBC,OAAO,GAAG;EAA5B,CAAqC;EACrDA,OAAO,CAACC,QAAR,GAAmBD,OAAO,CAACC,QAAR,IAAoB,KAAK,IAA5C;;EAEA,IAAI,CAACD,OAAO,CAACE,OAAb,EAAsB;IACpBV,GAAG,CAAC,sBAAD,CAAH;;IACA,MAAMW,IAAI,GAAG,YAAY,CAAE,CAA3B;;IACA,OAAO;MAAEC,KAAK,EAAED,IAAT;MAAeE,IAAI,EAAEF;IAArB,CAAP;EACD;;EAED,IAAIG,OAAO,GAAG,EAAd;EACA;;EACA,IAAIC,SAAJ;;EAEA,MAAMC,UAAU,GAAG,YAAY;IAC7B,IAAI;MACF,MAAMC,KAAK,GAAG,MAAMV,KAAK,CAACW,IAAN,CAAW,GAAX,CAApB;MACA,MAAMC,WAAW,GAAGF,KAAK,CAACG,GAAN,CAAUC,QAAV,EAApB;;MAEA,IAAIP,OAAO,KAAKK,WAAhB,EAA6B;QAC3BnB,GAAG,CAAE,+BAA8Bc,OAAQ,OAAMG,KAAK,CAACG,GAAI,EAAxD,CAAH;QACA,MAAMd,OAAO,CAACW,KAAK,CAACG,GAAP,CAAb;QACAN,OAAO,GAAGK,WAAV;MACD;IACF,CATD,CASE,OAAOG,GAAP,EAAY;MACZtB,GAAG,CAACG,KAAJ,CAAU,4BAAV,EAAwCmB,GAAxC;IACD,CAXD,SAWU;MACRP,SAAS,GAAGQ,UAAU,CAACP,UAAD,EAAaR,OAAO,CAACC,QAArB,CAAtB;IACD;EACF,CAfD;;EAiBA,OAAO;IACL;AACJ;AACA;IACI,MAAMG,KAAN,GAAe;MACb,MAAMK,KAAK,GAAG,MAAMV,KAAK,CAACW,IAAN,CAAW,GAAX,CAApB;MACAJ,OAAO,GAAGG,KAAK,CAACG,GAAN,CAAUC,QAAV,EAAV;MACArB,GAAG,CAAE,uBAAsBiB,KAAK,CAACG,GAAI,EAAlC,CAAH;MACAL,SAAS,GAAGQ,UAAU,CAACP,UAAD,EAAaR,OAAO,CAACC,QAArB,CAAtB;IACD,CATI;;IAUL;AACJ;AACA;IACII,IAAI,GAAI;MACNW,YAAY,CAACT,SAAD,CAAZ;IACD;;EAfI,CAAP;AAiBD,CA/CD"},"metadata":{},"sourceType":"script"}