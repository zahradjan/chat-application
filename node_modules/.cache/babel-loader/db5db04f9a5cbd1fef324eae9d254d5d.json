{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _classCallCheck = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar Message = require('../types/message');\n\nvar Wantlist = require('../types/wantlist');\n\nvar CONSTANTS = require('../constants');\n\nvar MsgQueue = require('./msg-queue');\n\nvar logger = require('../utils').logger;\n\nvar _require = require('multiformats/bases/base58'),\n    base58btc = _require.base58btc;\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('multiformats').CID} CID\n */\n\n\nmodule.exports = /*#__PURE__*/function () {\n  /**\n   * @param {PeerId} peerId\n   * @param {import('../network')} network\n   * @param {import('../stats')} stats\n   */\n  function WantManager(peerId, network, stats) {\n    _classCallCheck(this, WantManager);\n\n    /** @type {Map<string, MsgQueue>} */\n    this.peers = new Map();\n    this.wantlist = new Wantlist(stats);\n    this.network = network;\n    this._stats = stats;\n    this._peerId = peerId;\n    this._log = logger(peerId, 'want');\n  }\n  /**\n   * @private\n   * @param {CID[]} cids\n   * @param {boolean} cancel\n   * @param {boolean} [force]\n   */\n\n\n  _createClass(WantManager, [{\n    key: \"_addEntries\",\n    value: function _addEntries(cids, cancel, force) {\n      var _this = this;\n\n      var entries = cids.map(function (cid, i) {\n        return new Message.Entry(cid, CONSTANTS.kMaxPriority - i, Message.WantType.Block, cancel);\n      });\n      entries.forEach(function (e) {\n        // add changes to our wantlist\n        if (e.cancel) {\n          if (force) {\n            _this.wantlist.removeForce(e.cid.toString(base58btc));\n          } else {\n            _this.wantlist.remove(e.cid);\n          }\n        } else {\n          _this._log('adding to wl'); // TODO: Figure out the wantType\n          // @ts-expect-error - requires wantType\n\n\n          _this.wantlist.add(e.cid, e.priority);\n        }\n      }); // broadcast changes\n\n      var _iterator = _createForOfIteratorHelper(this.peers.values()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var p = _step.value;\n          p.addEntries(entries);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    /**\n     * @private\n     * @param {PeerId} peerId\n     */\n\n  }, {\n    key: \"_startPeerHandler\",\n    value: function _startPeerHandler(peerId) {\n      var mq = this.peers.get(peerId.toB58String());\n\n      if (mq) {\n        mq.refcnt++;\n        return;\n      }\n\n      mq = new MsgQueue(this._peerId, peerId, this.network); // new peer, give them the full wantlist\n\n      var fullwantlist = new Message(true);\n\n      var _iterator2 = _createForOfIteratorHelper(this.wantlist.entries()),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var entry = _step2.value;\n          fullwantlist.addEntry(entry[1].cid, entry[1].priority);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      mq.addMessage(fullwantlist);\n      this.peers.set(peerId.toB58String(), mq);\n      return mq;\n    }\n    /**\n     * @private\n     * @param {PeerId} peerId\n     */\n\n  }, {\n    key: \"_stopPeerHandler\",\n    value: function _stopPeerHandler(peerId) {\n      var mq = this.peers.get(peerId.toB58String());\n\n      if (!mq) {\n        return;\n      }\n\n      mq.refcnt--;\n\n      if (mq.refcnt > 0) {\n        return;\n      }\n\n      this.peers.delete(peerId.toB58String());\n    }\n    /**\n     * add all the cids to the wantlist\n     *\n     * @param {CID[]} cids\n     * @param {Object} [options]\n     * @param {AbortSignal} [options.signal]\n     */\n\n  }, {\n    key: \"wantBlocks\",\n    value: function wantBlocks(cids) {\n      var _this2 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      this._addEntries(cids, false);\n\n      if (options && options.signal) {\n        options.signal.addEventListener('abort', function () {\n          _this2.cancelWants(cids);\n        });\n      }\n    }\n    /**\n     * Remove blocks of all the given keys without respecting refcounts\n     *\n     * @param {CID[]} cids\n     */\n\n  }, {\n    key: \"unwantBlocks\",\n    value: function unwantBlocks(cids) {\n      this._log('unwant blocks: %s', cids.length);\n\n      this._addEntries(cids, true, true);\n    }\n    /**\n     * Cancel wanting all of the given keys\n     *\n     * @param {CID[]} cids\n     */\n\n  }, {\n    key: \"cancelWants\",\n    value: function cancelWants(cids) {\n      this._log('cancel wants: %s', cids.length);\n\n      this._addEntries(cids, true);\n    }\n    /**\n     * Returns a list of all currently connected peers\n     */\n\n  }, {\n    key: \"connectedPeers\",\n    value: function connectedPeers() {\n      return Array.from(this.peers.keys());\n    }\n    /**\n     * @param {PeerId} peerId\n     */\n\n  }, {\n    key: \"connected\",\n    value: function connected(peerId) {\n      this._startPeerHandler(peerId);\n    }\n    /**\n     * @param {PeerId} peerId\n     */\n\n  }, {\n    key: \"disconnected\",\n    value: function disconnected(peerId) {\n      this._stopPeerHandler(peerId);\n    }\n  }, {\n    key: \"start\",\n    value: function start() {}\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      var _this3 = this;\n\n      this.peers.forEach(function (mq) {\n        return _this3.disconnected(mq.peerId);\n      });\n    }\n  }]);\n\n  return WantManager;\n}();","map":{"version":3,"names":["Message","require","Wantlist","CONSTANTS","MsgQueue","logger","base58btc","module","exports","peerId","network","stats","peers","Map","wantlist","_stats","_peerId","_log","cids","cancel","force","entries","map","cid","i","Entry","kMaxPriority","WantType","Block","forEach","e","removeForce","toString","remove","add","priority","values","p","addEntries","mq","get","toB58String","refcnt","fullwantlist","entry","addEntry","addMessage","set","delete","options","_addEntries","signal","addEventListener","cancelWants","length","Array","from","keys","_startPeerHandler","_stopPeerHandler","disconnected"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-bitswap/src/want-manager/index.js"],"sourcesContent":["'use strict'\n\nconst Message = require('../types/message')\nconst Wantlist = require('../types/wantlist')\nconst CONSTANTS = require('../constants')\nconst MsgQueue = require('./msg-queue')\nconst logger = require('../utils').logger\nconst { base58btc } = require('multiformats/bases/base58')\n\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('multiformats').CID} CID\n */\n\nmodule.exports = class WantManager {\n  /**\n   * @param {PeerId} peerId\n   * @param {import('../network')} network\n   * @param {import('../stats')} stats\n   */\n  constructor (peerId, network, stats) {\n    /** @type {Map<string, MsgQueue>} */\n    this.peers = new Map()\n    this.wantlist = new Wantlist(stats)\n\n    this.network = network\n    this._stats = stats\n\n    this._peerId = peerId\n    this._log = logger(peerId, 'want')\n  }\n\n  /**\n   * @private\n   * @param {CID[]} cids\n   * @param {boolean} cancel\n   * @param {boolean} [force]\n   */\n  _addEntries (cids, cancel, force) {\n    const entries = cids.map((cid, i) => {\n      return new Message.Entry(cid, CONSTANTS.kMaxPriority - i, Message.WantType.Block, cancel)\n    })\n\n    entries.forEach((e) => {\n      // add changes to our wantlist\n      if (e.cancel) {\n        if (force) {\n          this.wantlist.removeForce(e.cid.toString(base58btc))\n        } else {\n          this.wantlist.remove(e.cid)\n        }\n      } else {\n        this._log('adding to wl')\n        // TODO: Figure out the wantType\n        // @ts-expect-error - requires wantType\n        this.wantlist.add(e.cid, e.priority)\n      }\n    })\n\n    // broadcast changes\n    for (const p of this.peers.values()) {\n      p.addEntries(entries)\n    }\n  }\n\n  /**\n   * @private\n   * @param {PeerId} peerId\n   */\n  _startPeerHandler (peerId) {\n    let mq = this.peers.get(peerId.toB58String())\n\n    if (mq) {\n      mq.refcnt++\n      return\n    }\n\n    mq = new MsgQueue(this._peerId, peerId, this.network)\n\n    // new peer, give them the full wantlist\n    const fullwantlist = new Message(true)\n\n    for (const entry of this.wantlist.entries()) {\n      fullwantlist.addEntry(entry[1].cid, entry[1].priority)\n    }\n\n    mq.addMessage(fullwantlist)\n\n    this.peers.set(peerId.toB58String(), mq)\n    return mq\n  }\n\n  /**\n   * @private\n   * @param {PeerId} peerId\n   */\n  _stopPeerHandler (peerId) {\n    const mq = this.peers.get(peerId.toB58String())\n\n    if (!mq) {\n      return\n    }\n\n    mq.refcnt--\n    if (mq.refcnt > 0) {\n      return\n    }\n\n    this.peers.delete(peerId.toB58String())\n  }\n\n  /**\n   * add all the cids to the wantlist\n   *\n   * @param {CID[]} cids\n   * @param {Object} [options]\n   * @param {AbortSignal} [options.signal]\n   */\n  wantBlocks (cids, options = {}) {\n    this._addEntries(cids, false)\n\n    if (options && options.signal) {\n      options.signal.addEventListener('abort', () => {\n        this.cancelWants(cids)\n      })\n    }\n  }\n\n  /**\n   * Remove blocks of all the given keys without respecting refcounts\n   *\n   * @param {CID[]} cids\n   */\n  unwantBlocks (cids) {\n    this._log('unwant blocks: %s', cids.length)\n    this._addEntries(cids, true, true)\n  }\n\n  /**\n   * Cancel wanting all of the given keys\n   *\n   * @param {CID[]} cids\n   */\n  cancelWants (cids) {\n    this._log('cancel wants: %s', cids.length)\n    this._addEntries(cids, true)\n  }\n\n  /**\n   * Returns a list of all currently connected peers\n   */\n  connectedPeers () {\n    return Array.from(this.peers.keys())\n  }\n\n  /**\n   * @param {PeerId} peerId\n   */\n  connected (peerId) {\n    this._startPeerHandler(peerId)\n  }\n\n  /**\n   * @param {PeerId} peerId\n   */\n  disconnected (peerId) {\n    this._stopPeerHandler(peerId)\n  }\n\n  start () {\n  }\n\n  stop () {\n    this.peers.forEach((mq) => this.disconnected(mq.peerId))\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}