{"ast":null,"code":"'use strict';\n\nconst {\n  repoVersion\n} = require('ipfs-repo');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\n\n\nmodule.exports = _ref => {\n  let {\n    repo\n  } = _ref;\n\n  /**\n   * @type {import('ipfs-core-types/src/repo').API[\"version\"]}\n   */\n  async function version() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    try {\n      // @ts-ignore - not a public API\n      await repo._checkInitialized(options);\n    } catch (err) {\n      // TODO: (dryajov) This is really hacky, there must be a better way\n      const match = [/Key not found in database \\[\\/version\\]/, /ENOENT/, /repo is not initialized yet/].some(m => {\n        return m.test(err.message);\n      });\n\n      if (match) {\n        // this repo has not been initialized\n        return repoVersion;\n      }\n\n      throw err;\n    }\n\n    return repo.version.get();\n  }\n\n  return withTimeoutOption(version);\n};","map":{"version":3,"names":["repoVersion","require","withTimeoutOption","module","exports","repo","version","options","_checkInitialized","err","match","some","m","test","message","get"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/repo/version.js"],"sourcesContent":["'use strict'\n\nconst { repoVersion } = require('ipfs-repo')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\n\n/**\n * @param {Object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nmodule.exports = ({ repo }) => {\n  /**\n   * @type {import('ipfs-core-types/src/repo').API[\"version\"]}\n   */\n  async function version (options = {}) {\n    try {\n      // @ts-ignore - not a public API\n      await repo._checkInitialized(options)\n    } catch (err) {\n      // TODO: (dryajov) This is really hacky, there must be a better way\n      const match = [\n        /Key not found in database \\[\\/version\\]/,\n        /ENOENT/,\n        /repo is not initialized yet/\n      ].some((m) => {\n        return m.test(err.message)\n      })\n      if (match) {\n        // this repo has not been initialized\n        return repoVersion\n      }\n      throw err\n    }\n\n    return repo.version.get()\n  }\n\n  return withTimeoutOption(version)\n}\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA;AAAF,IAAkBC,OAAO,CAAC,WAAD,CAA/B;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,yCAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAiB,QAAc;EAAA,IAAb;IAAEC;EAAF,CAAa;;EAC7B;AACF;AACA;EACE,eAAeC,OAAf,GAAsC;IAAA,IAAdC,OAAc,uEAAJ,EAAI;;IACpC,IAAI;MACF;MACA,MAAMF,IAAI,CAACG,iBAAL,CAAuBD,OAAvB,CAAN;IACD,CAHD,CAGE,OAAOE,GAAP,EAAY;MACZ;MACA,MAAMC,KAAK,GAAG,CACZ,yCADY,EAEZ,QAFY,EAGZ,6BAHY,EAIZC,IAJY,CAINC,CAAD,IAAO;QACZ,OAAOA,CAAC,CAACC,IAAF,CAAOJ,GAAG,CAACK,OAAX,CAAP;MACD,CANa,CAAd;;MAOA,IAAIJ,KAAJ,EAAW;QACT;QACA,OAAOV,WAAP;MACD;;MACD,MAAMS,GAAN;IACD;;IAED,OAAOJ,IAAI,CAACC,OAAL,CAAaS,GAAb,EAAP;EACD;;EAED,OAAOb,iBAAiB,CAACI,OAAD,CAAxB;AACD,CA5BD"},"metadata":{},"sourceType":"script"}