{"ast":null,"code":"'use strict';\n\nconst secp256k1 = require('secp256k1');\n\nconst {\n  sha256\n} = require('multiformats/hashes/sha2');\n\nmodule.exports = randomBytes => {\n  const privateKeyLength = 32;\n\n  function generateKey() {\n    let privateKey;\n\n    do {\n      privateKey = randomBytes(32);\n    } while (!secp256k1.privateKeyVerify(privateKey));\n\n    return privateKey;\n  }\n\n  async function hashAndSign(key, msg) {\n    const {\n      digest\n    } = await sha256.digest(msg);\n    const sig = secp256k1.ecdsaSign(digest, key);\n    return secp256k1.signatureExport(sig.signature);\n  }\n\n  async function hashAndVerify(key, sig, msg) {\n    const {\n      digest\n    } = await sha256.digest(msg);\n    sig = secp256k1.signatureImport(sig);\n    return secp256k1.ecdsaVerify(sig, digest, key);\n  }\n\n  function compressPublicKey(key) {\n    if (!secp256k1.publicKeyVerify(key)) {\n      throw new Error('Invalid public key');\n    }\n\n    return secp256k1.publicKeyConvert(key, true);\n  }\n\n  function decompressPublicKey(key) {\n    return secp256k1.publicKeyConvert(key, false);\n  }\n\n  function validatePrivateKey(key) {\n    if (!secp256k1.privateKeyVerify(key)) {\n      throw new Error('Invalid private key');\n    }\n  }\n\n  function validatePublicKey(key) {\n    if (!secp256k1.publicKeyVerify(key)) {\n      throw new Error('Invalid public key');\n    }\n  }\n\n  function computePublicKey(privateKey) {\n    validatePrivateKey(privateKey);\n    return secp256k1.publicKeyCreate(privateKey);\n  }\n\n  return {\n    generateKey,\n    privateKeyLength,\n    hashAndSign,\n    hashAndVerify,\n    compressPublicKey,\n    decompressPublicKey,\n    validatePrivateKey,\n    validatePublicKey,\n    computePublicKey\n  };\n};","map":{"version":3,"names":["secp256k1","require","sha256","module","exports","randomBytes","privateKeyLength","generateKey","privateKey","privateKeyVerify","hashAndSign","key","msg","digest","sig","ecdsaSign","signatureExport","signature","hashAndVerify","signatureImport","ecdsaVerify","compressPublicKey","publicKeyVerify","Error","publicKeyConvert","decompressPublicKey","validatePrivateKey","validatePublicKey","computePublicKey","publicKeyCreate"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-crypto/src/keys/secp256k1.js"],"sourcesContent":["'use strict'\n\nconst secp256k1 = require('secp256k1')\nconst { sha256 } = require('multiformats/hashes/sha2')\n\nmodule.exports = (randomBytes) => {\n  const privateKeyLength = 32\n\n  function generateKey () {\n    let privateKey\n    do {\n      privateKey = randomBytes(32)\n    } while (!secp256k1.privateKeyVerify(privateKey))\n    return privateKey\n  }\n\n  async function hashAndSign (key, msg) {\n    const { digest } = await sha256.digest(msg)\n    const sig = secp256k1.ecdsaSign(digest, key)\n    return secp256k1.signatureExport(sig.signature)\n  }\n\n  async function hashAndVerify (key, sig, msg) {\n    const { digest } = await sha256.digest(msg)\n    sig = secp256k1.signatureImport(sig)\n    return secp256k1.ecdsaVerify(sig, digest, key)\n  }\n\n  function compressPublicKey (key) {\n    if (!secp256k1.publicKeyVerify(key)) {\n      throw new Error('Invalid public key')\n    }\n    return secp256k1.publicKeyConvert(key, true)\n  }\n\n  function decompressPublicKey (key) {\n    return secp256k1.publicKeyConvert(key, false)\n  }\n\n  function validatePrivateKey (key) {\n    if (!secp256k1.privateKeyVerify(key)) {\n      throw new Error('Invalid private key')\n    }\n  }\n\n  function validatePublicKey (key) {\n    if (!secp256k1.publicKeyVerify(key)) {\n      throw new Error('Invalid public key')\n    }\n  }\n\n  function computePublicKey (privateKey) {\n    validatePrivateKey(privateKey)\n    return secp256k1.publicKeyCreate(privateKey)\n  }\n\n  return {\n    generateKey,\n    privateKeyLength,\n    hashAndSign,\n    hashAndVerify,\n    compressPublicKey,\n    decompressPublicKey,\n    validatePrivateKey,\n    validatePublicKey,\n    computePublicKey\n  }\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAM;EAAEC;AAAF,IAAaD,OAAO,CAAC,0BAAD,CAA1B;;AAEAE,MAAM,CAACC,OAAP,GAAkBC,WAAD,IAAiB;EAChC,MAAMC,gBAAgB,GAAG,EAAzB;;EAEA,SAASC,WAAT,GAAwB;IACtB,IAAIC,UAAJ;;IACA,GAAG;MACDA,UAAU,GAAGH,WAAW,CAAC,EAAD,CAAxB;IACD,CAFD,QAES,CAACL,SAAS,CAACS,gBAAV,CAA2BD,UAA3B,CAFV;;IAGA,OAAOA,UAAP;EACD;;EAED,eAAeE,WAAf,CAA4BC,GAA5B,EAAiCC,GAAjC,EAAsC;IACpC,MAAM;MAAEC;IAAF,IAAa,MAAMX,MAAM,CAACW,MAAP,CAAcD,GAAd,CAAzB;IACA,MAAME,GAAG,GAAGd,SAAS,CAACe,SAAV,CAAoBF,MAApB,EAA4BF,GAA5B,CAAZ;IACA,OAAOX,SAAS,CAACgB,eAAV,CAA0BF,GAAG,CAACG,SAA9B,CAAP;EACD;;EAED,eAAeC,aAAf,CAA8BP,GAA9B,EAAmCG,GAAnC,EAAwCF,GAAxC,EAA6C;IAC3C,MAAM;MAAEC;IAAF,IAAa,MAAMX,MAAM,CAACW,MAAP,CAAcD,GAAd,CAAzB;IACAE,GAAG,GAAGd,SAAS,CAACmB,eAAV,CAA0BL,GAA1B,CAAN;IACA,OAAOd,SAAS,CAACoB,WAAV,CAAsBN,GAAtB,EAA2BD,MAA3B,EAAmCF,GAAnC,CAAP;EACD;;EAED,SAASU,iBAAT,CAA4BV,GAA5B,EAAiC;IAC/B,IAAI,CAACX,SAAS,CAACsB,eAAV,CAA0BX,GAA1B,CAAL,EAAqC;MACnC,MAAM,IAAIY,KAAJ,CAAU,oBAAV,CAAN;IACD;;IACD,OAAOvB,SAAS,CAACwB,gBAAV,CAA2Bb,GAA3B,EAAgC,IAAhC,CAAP;EACD;;EAED,SAASc,mBAAT,CAA8Bd,GAA9B,EAAmC;IACjC,OAAOX,SAAS,CAACwB,gBAAV,CAA2Bb,GAA3B,EAAgC,KAAhC,CAAP;EACD;;EAED,SAASe,kBAAT,CAA6Bf,GAA7B,EAAkC;IAChC,IAAI,CAACX,SAAS,CAACS,gBAAV,CAA2BE,GAA3B,CAAL,EAAsC;MACpC,MAAM,IAAIY,KAAJ,CAAU,qBAAV,CAAN;IACD;EACF;;EAED,SAASI,iBAAT,CAA4BhB,GAA5B,EAAiC;IAC/B,IAAI,CAACX,SAAS,CAACsB,eAAV,CAA0BX,GAA1B,CAAL,EAAqC;MACnC,MAAM,IAAIY,KAAJ,CAAU,oBAAV,CAAN;IACD;EACF;;EAED,SAASK,gBAAT,CAA2BpB,UAA3B,EAAuC;IACrCkB,kBAAkB,CAAClB,UAAD,CAAlB;IACA,OAAOR,SAAS,CAAC6B,eAAV,CAA0BrB,UAA1B,CAAP;EACD;;EAED,OAAO;IACLD,WADK;IAELD,gBAFK;IAGLI,WAHK;IAILQ,aAJK;IAKLG,iBALK;IAMLI,mBANK;IAOLC,kBAPK;IAQLC,iBARK;IASLC;EATK,CAAP;AAWD,CA9DD"},"metadata":{},"sourceType":"script"}