{"ast":null,"code":"'use strict';\n\nconst IPNS = require('../ipns');\n\nconst routingConfig = require('../ipns/routing/config');\n\nconst OfflineDatastore = require('../ipns/routing/offline-datastore');\n\nconst {\n  NotInitializedError,\n  AlreadyInitializedError\n} = require('../errors');\n\nconst log = require('debug')('ipfs:components:ipns');\n/**\n * @typedef {import('libp2p-crypto').PrivateKey} PrivateKey\n *\n * @typedef {Object} ExperimentalOptions\n * @property {boolean} [ipnsPubsub]\n *\n * @typedef {Object} LibP2POptions\n * @property {DHTConfig} [config]\n *\n * @typedef {Object} DHTConfig\n * @property {boolean} [enabled]\n */\n\n\nclass IPNSAPI {\n  /**\n   * @param {Object} options\n   * @param {string} options.pass\n   * @param {boolean} [options.offline]\n   * @param {LibP2POptions} [options.libp2p]\n   * @param {ExperimentalOptions} [options.EXPERIMENTAL]\n   */\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      pass: ''\n    };\n    this.options = options;\n    /** @type {IPNS | null} */\n\n    this.offline = null;\n    /** @type {IPNS | null} */\n\n    this.online = null;\n  }\n\n  getIPNS() {\n    const ipns = this.online || this.offline;\n\n    if (ipns) {\n      return ipns;\n    } else {\n      throw new NotInitializedError();\n    }\n  }\n\n  get routing() {\n    return this.getIPNS().routing;\n  }\n  /**\n   * Activates IPNS subsystem in an ofline mode. If it was started once already\n   * it will throw an exception.\n   *\n   * This is primarily used for offline ipns modifications, such as the\n   * initializeKeyspace feature.\n   *\n   * @param {Object} config\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   * @param {import('peer-id')} config.peerId\n   * @param {import('libp2p/src/keychain')} config.keychain\n   */\n\n\n  startOffline(_ref) {\n    let {\n      repo,\n      peerId,\n      keychain\n    } = _ref;\n\n    if (this.offline != null) {\n      throw new AlreadyInitializedError();\n    }\n\n    log('initializing IPNS keyspace');\n    const routing = new OfflineDatastore(repo);\n    const ipns = new IPNS(routing, repo.datastore, peerId, keychain, this.options);\n    this.offline = ipns;\n  }\n  /**\n   * @param {Object} config\n   * @param {import('libp2p')} config.libp2p\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   * @param {import('peer-id')} config.peerId\n   * @param {import('libp2p/src/keychain')} config.keychain\n   */\n\n\n  async startOnline(_ref2) {\n    let {\n      libp2p,\n      repo,\n      peerId,\n      keychain\n    } = _ref2;\n\n    if (this.online != null) {\n      throw new AlreadyInitializedError();\n    }\n\n    const routing = routingConfig({\n      libp2p,\n      repo,\n      peerId,\n      options: this.options\n    }); // @ts-ignore routing is a TieredDatastore which wants keys to be Keys, IPNS needs keys to be Uint8Arrays\n\n    const ipns = new IPNS(routing, repo.datastore, peerId, keychain, this.options);\n    await ipns.republisher.start();\n    this.online = ipns;\n  }\n\n  async stop() {\n    const ipns = this.online;\n\n    if (ipns) {\n      await ipns.republisher.stop();\n      this.online = null;\n    }\n  }\n  /**\n   * @param {PrivateKey} privKey\n   * @param {Uint8Array} value\n   * @param {number} lifetime\n   */\n\n\n  publish(privKey, value, lifetime) {\n    return this.getIPNS().publish(privKey, value, lifetime);\n  }\n  /**\n   *\n   * @param {string} name\n   * @param {*} [options]\n   */\n\n\n  resolve(name, options) {\n    return this.getIPNS().resolve(name, options);\n  }\n  /**\n   * @param {PrivateKey} privKey\n   * @param {Uint8Array} value\n   */\n\n\n  initializeKeyspace(privKey, value) {\n    return this.getIPNS().initializeKeyspace(privKey, value);\n  }\n\n}\n\nmodule.exports = IPNSAPI;","map":{"version":3,"names":["IPNS","require","routingConfig","OfflineDatastore","NotInitializedError","AlreadyInitializedError","log","IPNSAPI","constructor","options","pass","offline","online","getIPNS","ipns","routing","startOffline","repo","peerId","keychain","datastore","startOnline","libp2p","republisher","start","stop","publish","privKey","value","lifetime","resolve","name","initializeKeyspace","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/ipns.js"],"sourcesContent":["'use strict'\n\nconst IPNS = require('../ipns')\nconst routingConfig = require('../ipns/routing/config')\nconst OfflineDatastore = require('../ipns/routing/offline-datastore')\nconst { NotInitializedError, AlreadyInitializedError } = require('../errors')\nconst log = require('debug')('ipfs:components:ipns')\n\n/**\n * @typedef {import('libp2p-crypto').PrivateKey} PrivateKey\n *\n * @typedef {Object} ExperimentalOptions\n * @property {boolean} [ipnsPubsub]\n *\n * @typedef {Object} LibP2POptions\n * @property {DHTConfig} [config]\n *\n * @typedef {Object} DHTConfig\n * @property {boolean} [enabled]\n */\n\nclass IPNSAPI {\n  /**\n   * @param {Object} options\n   * @param {string} options.pass\n   * @param {boolean} [options.offline]\n   * @param {LibP2POptions} [options.libp2p]\n   * @param {ExperimentalOptions} [options.EXPERIMENTAL]\n   */\n  constructor (options = { pass: '' }) {\n    this.options = options\n\n    /** @type {IPNS | null} */\n    this.offline = null\n\n    /** @type {IPNS | null} */\n    this.online = null\n  }\n\n  getIPNS () {\n    const ipns = this.online || this.offline\n    if (ipns) {\n      return ipns\n    } else {\n      throw new NotInitializedError()\n    }\n  }\n\n  get routing () {\n    return this.getIPNS().routing\n  }\n\n  /**\n   * Activates IPNS subsystem in an ofline mode. If it was started once already\n   * it will throw an exception.\n   *\n   * This is primarily used for offline ipns modifications, such as the\n   * initializeKeyspace feature.\n   *\n   * @param {Object} config\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   * @param {import('peer-id')} config.peerId\n   * @param {import('libp2p/src/keychain')} config.keychain\n   */\n  startOffline ({ repo, peerId, keychain }) {\n    if (this.offline != null) {\n      throw new AlreadyInitializedError()\n    }\n\n    log('initializing IPNS keyspace')\n\n    const routing = new OfflineDatastore(repo)\n    const ipns = new IPNS(routing, repo.datastore, peerId, keychain, this.options)\n\n    this.offline = ipns\n  }\n\n  /**\n   * @param {Object} config\n   * @param {import('libp2p')} config.libp2p\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   * @param {import('peer-id')} config.peerId\n   * @param {import('libp2p/src/keychain')} config.keychain\n   */\n  async startOnline ({ libp2p, repo, peerId, keychain }) {\n    if (this.online != null) {\n      throw new AlreadyInitializedError()\n    }\n    const routing = routingConfig({ libp2p, repo, peerId, options: this.options })\n\n    // @ts-ignore routing is a TieredDatastore which wants keys to be Keys, IPNS needs keys to be Uint8Arrays\n    const ipns = new IPNS(routing, repo.datastore, peerId, keychain, this.options)\n    await ipns.republisher.start()\n    this.online = ipns\n  }\n\n  async stop () {\n    const ipns = this.online\n    if (ipns) {\n      await ipns.republisher.stop()\n      this.online = null\n    }\n  }\n\n  /**\n   * @param {PrivateKey} privKey\n   * @param {Uint8Array} value\n   * @param {number} lifetime\n   */\n  publish (privKey, value, lifetime) {\n    return this.getIPNS().publish(privKey, value, lifetime)\n  }\n\n  /**\n   *\n   * @param {string} name\n   * @param {*} [options]\n   */\n  resolve (name, options) {\n    return this.getIPNS().resolve(name, options)\n  }\n\n  /**\n   * @param {PrivateKey} privKey\n   * @param {Uint8Array} value\n   */\n  initializeKeyspace (privKey, value) {\n    return this.getIPNS().initializeKeyspace(privKey, value)\n  }\n}\nmodule.exports = IPNSAPI\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}