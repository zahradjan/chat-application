{"ast":null,"code":"'use strict';\n\nvar _require = require('native-fetch'),\n    nativeFetch = _require.default,\n    Headers = _require.Headers;\n/**\n * Build fetch resource for request.\n *\n * @param {object} properties\n * @param {string} properties.serverResolver\n * @param {string} properties.hostname\n * @param {string} properties.recordType\n * @returns {string}\n */\n\n\nfunction buildResource(_ref) {\n  var serverResolver = _ref.serverResolver,\n      hostname = _ref.hostname,\n      recordType = _ref.recordType;\n  return \"\".concat(serverResolver, \"?name=\").concat(hostname, \"&type=\").concat(recordType);\n}\n/**\n * Use fetch to find the record.\n *\n * @param {object} resource\n * @returns {Promise}\n */\n\n\nfunction fetch(resource) {\n  return nativeFetch(resource, {\n    headers: new Headers({\n      accept: 'application/dns-json'\n    })\n  });\n}\n/**\n * Creates cache key composed by recordType and hostname.\n *\n * @param {string} hostname\n * @param {string} recordType\n * @returns {string}\n */\n\n\nfunction getCacheKey(hostname, recordType) {\n  return \"\".concat(recordType, \"_\").concat(hostname);\n}\n\nmodule.exports = {\n  buildResource: buildResource,\n  fetch: fetch,\n  getCacheKey: getCacheKey\n};","map":{"version":3,"names":["require","nativeFetch","default","Headers","buildResource","serverResolver","hostname","recordType","fetch","resource","headers","accept","getCacheKey","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/dns-over-http-resolver/src/utils.js"],"sourcesContent":["'use strict'\n\nconst { default: nativeFetch, Headers } = require('native-fetch')\n\n/**\n * Build fetch resource for request.\n *\n * @param {object} properties\n * @param {string} properties.serverResolver\n * @param {string} properties.hostname\n * @param {string} properties.recordType\n * @returns {string}\n */\nfunction buildResource ({ serverResolver, hostname, recordType }) {\n  return `${serverResolver}?name=${hostname}&type=${recordType}`\n}\n\n/**\n * Use fetch to find the record.\n *\n * @param {object} resource\n * @returns {Promise}\n */\nfunction fetch (resource) {\n  return nativeFetch(resource, {\n    headers: new Headers({\n      accept: 'application/dns-json'\n    })\n  })\n}\n\n/**\n * Creates cache key composed by recordType and hostname.\n *\n * @param {string} hostname\n * @param {string} recordType\n * @returns {string}\n */\nfunction getCacheKey (hostname, recordType) {\n  return `${recordType}_${hostname}`\n}\n\nmodule.exports = {\n  buildResource,\n  fetch,\n  getCacheKey\n}\n"],"mappings":"AAAA;;AAEA,eAA0CA,OAAO,CAAC,cAAD,CAAjD;AAAA,IAAiBC,WAAjB,YAAQC,OAAR;AAAA,IAA8BC,OAA9B,YAA8BA,OAA9B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,aAAT,OAAkE;EAAA,IAAxCC,cAAwC,QAAxCA,cAAwC;EAAA,IAAxBC,QAAwB,QAAxBA,QAAwB;EAAA,IAAdC,UAAc,QAAdA,UAAc;EAChE,iBAAUF,cAAV,mBAAiCC,QAAjC,mBAAkDC,UAAlD;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,KAAT,CAAgBC,QAAhB,EAA0B;EACxB,OAAOR,WAAW,CAACQ,QAAD,EAAW;IAC3BC,OAAO,EAAE,IAAIP,OAAJ,CAAY;MACnBQ,MAAM,EAAE;IADW,CAAZ;EADkB,CAAX,CAAlB;AAKD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,WAAT,CAAsBN,QAAtB,EAAgCC,UAAhC,EAA4C;EAC1C,iBAAUA,UAAV,cAAwBD,QAAxB;AACD;;AAEDO,MAAM,CAACC,OAAP,GAAiB;EACfV,aAAa,EAAbA,aADe;EAEfI,KAAK,EAALA,KAFe;EAGfI,WAAW,EAAXA;AAHe,CAAjB"},"metadata":{},"sourceType":"script"}