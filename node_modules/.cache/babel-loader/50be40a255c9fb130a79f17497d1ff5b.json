{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _slicedToArray = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar errcode = require('err-code');\n\nvar Message = require('../../message');\n\nvar utils = require('../../utils');\n/**\n * @typedef {import('peer-id')} PeerId\n */\n\n/**\n * @param {import('../../index')} dht\n */\n\n\nmodule.exports = function (dht) {\n  var log = utils.logger(dht.peerId, 'rpc:get-providers');\n  /**\n   * Process `GetProviders` DHT messages.\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   */\n\n  function getProviders(_x, _x2) {\n    return _getProviders.apply(this, arguments);\n  }\n\n  function _getProviders() {\n    _getProviders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(peerId, msg) {\n      var cid, dsKey, _yield$Promise$all, _yield$Promise$all2, has, peers, closer, providerPeers, closerPeers, response;\n\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              cid = CID.decode(msg.key);\n              _context.next = 7;\n              break;\n\n            case 4:\n              _context.prev = 4;\n              _context.t0 = _context[\"catch\"](0);\n              throw errcode(new Error(\"Invalid CID: \".concat(_context.t0.message)), 'ERR_INVALID_CID');\n\n            case 7:\n              log('%s', cid.toString());\n              dsKey = utils.bufferToKey(cid.bytes);\n              _context.next = 11;\n              return Promise.all([dht.datastore.has(dsKey), dht.providers.getProviders(cid), dht._betterPeersToQuery(msg, peerId)]);\n\n            case 11:\n              _yield$Promise$all = _context.sent;\n              _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 3);\n              has = _yield$Promise$all2[0];\n              peers = _yield$Promise$all2[1];\n              closer = _yield$Promise$all2[2];\n              providerPeers = peers.map(function (peerId) {\n                return {\n                  id: peerId,\n                  multiaddrs: []\n                };\n              });\n              closerPeers = closer.map(function (c) {\n                return {\n                  id: c.id,\n                  multiaddrs: []\n                };\n              });\n\n              if (has) {\n                providerPeers.push({\n                  id: dht.peerId,\n                  multiaddrs: []\n                });\n              }\n\n              response = new Message(msg.type, msg.key, msg.clusterLevel);\n\n              if (providerPeers.length > 0) {\n                response.providerPeers = providerPeers;\n              }\n\n              if (closerPeers.length > 0) {\n                response.closerPeers = closerPeers;\n              }\n\n              log('got %s providers %s closerPeers', providerPeers.length, closerPeers.length);\n              return _context.abrupt(\"return\", response);\n\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 4]]);\n    }));\n    return _getProviders.apply(this, arguments);\n  }\n\n  return getProviders;\n};","map":{"version":3,"names":["require","CID","errcode","Message","utils","module","exports","dht","log","logger","peerId","getProviders","msg","cid","decode","key","Error","message","toString","dsKey","bufferToKey","bytes","Promise","all","datastore","has","providers","_betterPeersToQuery","peers","closer","providerPeers","map","id","multiaddrs","closerPeers","c","push","response","type","clusterLevel","length"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-kad-dht/src/rpc/handlers/get-providers.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst errcode = require('err-code')\n\nconst Message = require('../../message')\nconst utils = require('../../utils')\n\n/**\n * @typedef {import('peer-id')} PeerId\n */\n\n/**\n * @param {import('../../index')} dht\n */\nmodule.exports = (dht) => {\n  const log = utils.logger(dht.peerId, 'rpc:get-providers')\n\n  /**\n   * Process `GetProviders` DHT messages.\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   */\n  async function getProviders (peerId, msg) {\n    let cid\n    try {\n      cid = CID.decode(msg.key)\n    } catch (err) {\n      throw errcode(new Error(`Invalid CID: ${err.message}`), 'ERR_INVALID_CID')\n    }\n\n    log('%s', cid.toString())\n    const dsKey = utils.bufferToKey(cid.bytes)\n\n    const [has, peers, closer] = await Promise.all([\n      dht.datastore.has(dsKey),\n      dht.providers.getProviders(cid),\n      dht._betterPeersToQuery(msg, peerId)\n    ])\n\n    const providerPeers = peers.map((peerId) => ({\n      id: peerId,\n      multiaddrs: []\n    }))\n    const closerPeers = closer.map((c) => ({\n      id: c.id,\n      multiaddrs: []\n    }))\n\n    if (has) {\n      providerPeers.push({\n        id: dht.peerId,\n        multiaddrs: []\n      })\n    }\n\n    const response = new Message(msg.type, msg.key, msg.clusterLevel)\n\n    if (providerPeers.length > 0) {\n      response.providerPeers = providerPeers\n    }\n\n    if (closerPeers.length > 0) {\n      response.closerPeers = closerPeers\n    }\n\n    log('got %s providers %s closerPeers', providerPeers.length, closerPeers.length)\n    return response\n  }\n\n  return getProviders\n}\n"],"mappings":"AAAA;;;;;;;;AAEA,eAAgBA,OAAO,CAAC,kBAAD,CAAvB;AAAA,IAAQC,GAAR,YAAQA,GAAR;;AACA,IAAMC,OAAO,GAAGF,OAAO,CAAC,UAAD,CAAvB;;AAEA,IAAMG,OAAO,GAAGH,OAAO,CAAC,eAAD,CAAvB;;AACA,IAAMI,KAAK,GAAGJ,OAAO,CAAC,aAAD,CAArB;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AACAK,MAAM,CAACC,OAAP,GAAiB,UAACC,GAAD,EAAS;EACxB,IAAMC,GAAG,GAAGJ,KAAK,CAACK,MAAN,CAAaF,GAAG,CAACG,MAAjB,EAAyB,mBAAzB,CAAZ;EAEA;AACF;AACA;AACA;AACA;AACA;;EAR0B,SASTC,YATS;IAAA;EAAA;;EAAA;IAAA,2EASxB,iBAA6BD,MAA7B,EAAqCE,GAArC;MAAA;;MAAA;QAAA;UAAA;YAAA;cAAA;cAGIC,GAAG,GAAGZ,GAAG,CAACa,MAAJ,CAAWF,GAAG,CAACG,GAAf,CAAN;cAHJ;cAAA;;YAAA;cAAA;cAAA;cAAA,MAKUb,OAAO,CAAC,IAAIc,KAAJ,wBAA0B,YAAIC,OAA9B,EAAD,EAA2C,iBAA3C,CALjB;;YAAA;cAQET,GAAG,CAAC,IAAD,EAAOK,GAAG,CAACK,QAAJ,EAAP,CAAH;cACMC,KATR,GASgBf,KAAK,CAACgB,WAAN,CAAkBP,GAAG,CAACQ,KAAtB,CAThB;cAAA;cAAA,OAWqCC,OAAO,CAACC,GAAR,CAAY,CAC7ChB,GAAG,CAACiB,SAAJ,CAAcC,GAAd,CAAkBN,KAAlB,CAD6C,EAE7CZ,GAAG,CAACmB,SAAJ,CAAcf,YAAd,CAA2BE,GAA3B,CAF6C,EAG7CN,GAAG,CAACoB,mBAAJ,CAAwBf,GAAxB,EAA6BF,MAA7B,CAH6C,CAAZ,CAXrC;;YAAA;cAAA;cAAA;cAWSe,GAXT;cAWcG,KAXd;cAWqBC,MAXrB;cAiBQC,aAjBR,GAiBwBF,KAAK,CAACG,GAAN,CAAU,UAACrB,MAAD;gBAAA,OAAa;kBAC3CsB,EAAE,EAAEtB,MADuC;kBAE3CuB,UAAU,EAAE;gBAF+B,CAAb;cAAA,CAAV,CAjBxB;cAqBQC,WArBR,GAqBsBL,MAAM,CAACE,GAAP,CAAW,UAACI,CAAD;gBAAA,OAAQ;kBACrCH,EAAE,EAAEG,CAAC,CAACH,EAD+B;kBAErCC,UAAU,EAAE;gBAFyB,CAAR;cAAA,CAAX,CArBtB;;cA0BE,IAAIR,GAAJ,EAAS;gBACPK,aAAa,CAACM,IAAd,CAAmB;kBACjBJ,EAAE,EAAEzB,GAAG,CAACG,MADS;kBAEjBuB,UAAU,EAAE;gBAFK,CAAnB;cAID;;cAEKI,QAjCR,GAiCmB,IAAIlC,OAAJ,CAAYS,GAAG,CAAC0B,IAAhB,EAAsB1B,GAAG,CAACG,GAA1B,EAA+BH,GAAG,CAAC2B,YAAnC,CAjCnB;;cAmCE,IAAIT,aAAa,CAACU,MAAd,GAAuB,CAA3B,EAA8B;gBAC5BH,QAAQ,CAACP,aAAT,GAAyBA,aAAzB;cACD;;cAED,IAAII,WAAW,CAACM,MAAZ,GAAqB,CAAzB,EAA4B;gBAC1BH,QAAQ,CAACH,WAAT,GAAuBA,WAAvB;cACD;;cAED1B,GAAG,CAAC,iCAAD,EAAoCsB,aAAa,CAACU,MAAlD,EAA0DN,WAAW,CAACM,MAAtE,CAAH;cA3CF,iCA4CSH,QA5CT;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CATwB;IAAA;EAAA;;EAwDxB,OAAO1B,YAAP;AACD,CAzDD"},"metadata":{},"sourceType":"script"}