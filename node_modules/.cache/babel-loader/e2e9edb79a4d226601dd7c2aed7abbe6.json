{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _require = require('multiformats/cid'),\n    CID = _require.CID;\n\nvar errcode = require('err-code');\n\nvar utils = require('../../utils');\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('../../message')} Message\n */\n\n/**\n * @param {import('../../index')} dht\n */\n\n\nmodule.exports = function (dht) {\n  var log = utils.logger(dht.peerId, 'rpc:add-provider');\n  /**\n   * Process `AddProvider` DHT messages.\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   */\n\n  function addProvider(_x, _x2) {\n    return _addProvider.apply(this, arguments);\n  }\n\n  function _addProvider() {\n    _addProvider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(peerId, msg) {\n      var cid, errMsg;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // eslint-disable-line require-await\n              log('start');\n\n              if (!(!msg.key || msg.key.length === 0)) {\n                _context.next = 3;\n                break;\n              }\n\n              throw errcode(new Error('Missing key'), 'ERR_MISSING_KEY');\n\n            case 3:\n              _context.prev = 3;\n              cid = CID.decode(msg.key);\n              _context.next = 11;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](3);\n              errMsg = \"Invalid CID: \".concat(_context.t0.message);\n              throw errcode(new Error(errMsg), 'ERR_INVALID_CID');\n\n            case 11:\n              msg.providerPeers.forEach(function (pi) {\n                // Ignore providers not from the originator\n                if (!pi.id.isEqual(peerId)) {\n                  log('invalid provider peer %s from %s', pi.id.toB58String(), peerId.toB58String());\n                  return;\n                }\n\n                if (pi.multiaddrs.length < 1) {\n                  log('no valid addresses for provider %s. Ignore', peerId.toB58String());\n                  return;\n                }\n\n                log('received provider %s for %s (addrs %s)', peerId.toB58String(), cid.toString(), pi.multiaddrs.map(function (m) {\n                  return m.toString();\n                }));\n\n                if (!dht._isSelf(pi.id)) {\n                  // Add known address to peer store\n                  dht.peerStore.addressBook.add(pi.id, pi.multiaddrs);\n                  return dht.providers.addProvider(cid, pi.id);\n                }\n              }); // Previous versions of the JS DHT sent erroneous providers in the\n              // `providerPeers` field. In order to accommodate older clients that have\n              // this bug, we fall back to assuming the originator is the provider if\n              // we can't find any valid providers in the payload.\n              // https://github.com/libp2p/js-libp2p-kad-dht/pull/127\n              // https://github.com/libp2p/js-libp2p-kad-dht/issues/128\n\n              return _context.abrupt(\"return\", dht.providers.addProvider(cid, peerId));\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 7]]);\n    }));\n    return _addProvider.apply(this, arguments);\n  }\n\n  return addProvider;\n};","map":{"version":3,"names":["require","CID","errcode","utils","module","exports","dht","log","logger","peerId","addProvider","msg","key","length","Error","cid","decode","errMsg","message","providerPeers","forEach","pi","id","isEqual","toB58String","multiaddrs","toString","map","m","_isSelf","peerStore","addressBook","add","providers"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/libp2p-kad-dht/src/rpc/handlers/add-provider.js"],"sourcesContent":["'use strict'\n\nconst { CID } = require('multiformats/cid')\nconst errcode = require('err-code')\n\nconst utils = require('../../utils')\n\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('../../message')} Message\n */\n\n/**\n * @param {import('../../index')} dht\n */\nmodule.exports = (dht) => {\n  const log = utils.logger(dht.peerId, 'rpc:add-provider')\n  /**\n   * Process `AddProvider` DHT messages.\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   */\n  async function addProvider (peerId, msg) { // eslint-disable-line require-await\n    log('start')\n\n    if (!msg.key || msg.key.length === 0) {\n      throw errcode(new Error('Missing key'), 'ERR_MISSING_KEY')\n    }\n\n    /** @type {CID} */\n    let cid\n    try {\n      cid = CID.decode(msg.key)\n    } catch (err) {\n      const errMsg = `Invalid CID: ${err.message}`\n      throw errcode(new Error(errMsg), 'ERR_INVALID_CID')\n    }\n\n    msg.providerPeers.forEach((pi) => {\n      // Ignore providers not from the originator\n      if (!pi.id.isEqual(peerId)) {\n        log('invalid provider peer %s from %s', pi.id.toB58String(), peerId.toB58String())\n        return\n      }\n\n      if (pi.multiaddrs.length < 1) {\n        log('no valid addresses for provider %s. Ignore', peerId.toB58String())\n        return\n      }\n\n      log('received provider %s for %s (addrs %s)', peerId.toB58String(), cid.toString(), pi.multiaddrs.map((m) => m.toString()))\n\n      if (!dht._isSelf(pi.id)) {\n        // Add known address to peer store\n        dht.peerStore.addressBook.add(pi.id, pi.multiaddrs)\n        return dht.providers.addProvider(cid, pi.id)\n      }\n    })\n\n    // Previous versions of the JS DHT sent erroneous providers in the\n    // `providerPeers` field. In order to accommodate older clients that have\n    // this bug, we fall back to assuming the originator is the provider if\n    // we can't find any valid providers in the payload.\n    // https://github.com/libp2p/js-libp2p-kad-dht/pull/127\n    // https://github.com/libp2p/js-libp2p-kad-dht/issues/128\n    return dht.providers.addProvider(cid, peerId)\n  }\n\n  return addProvider\n}\n"],"mappings":"AAAA;;;;;;AAEA,eAAgBA,OAAO,CAAC,kBAAD,CAAvB;AAAA,IAAQC,GAAR,YAAQA,GAAR;;AACA,IAAMC,OAAO,GAAGF,OAAO,CAAC,UAAD,CAAvB;;AAEA,IAAMG,KAAK,GAAGH,OAAO,CAAC,aAAD,CAArB;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AACAI,MAAM,CAACC,OAAP,GAAiB,UAACC,GAAD,EAAS;EACxB,IAAMC,GAAG,GAAGJ,KAAK,CAACK,MAAN,CAAaF,GAAG,CAACG,MAAjB,EAAyB,kBAAzB,CAAZ;EACA;AACF;AACA;AACA;AACA;AACA;;EAP0B,SAQTC,WARS;IAAA;EAAA;;EAAA;IAAA,0EAQxB,iBAA4BD,MAA5B,EAAoCE,GAApC;MAAA;MAAA;QAAA;UAAA;YAAA;cAA2C;cACzCJ,GAAG,CAAC,OAAD,CAAH;;cADF,MAGM,CAACI,GAAG,CAACC,GAAL,IAAYD,GAAG,CAACC,GAAJ,CAAQC,MAAR,KAAmB,CAHrC;gBAAA;gBAAA;cAAA;;cAAA,MAIUX,OAAO,CAAC,IAAIY,KAAJ,CAAU,aAAV,CAAD,EAA2B,iBAA3B,CAJjB;;YAAA;cAAA;cAUIC,GAAG,GAAGd,GAAG,CAACe,MAAJ,CAAWL,GAAG,CAACC,GAAf,CAAN;cAVJ;cAAA;;YAAA;cAAA;cAAA;cAYUK,MAZV,0BAYmC,YAAIC,OAZvC;cAAA,MAaUhB,OAAO,CAAC,IAAIY,KAAJ,CAAUG,MAAV,CAAD,EAAoB,iBAApB,CAbjB;;YAAA;cAgBEN,GAAG,CAACQ,aAAJ,CAAkBC,OAAlB,CAA0B,UAACC,EAAD,EAAQ;gBAChC;gBACA,IAAI,CAACA,EAAE,CAACC,EAAH,CAAMC,OAAN,CAAcd,MAAd,CAAL,EAA4B;kBAC1BF,GAAG,CAAC,kCAAD,EAAqCc,EAAE,CAACC,EAAH,CAAME,WAAN,EAArC,EAA0Df,MAAM,CAACe,WAAP,EAA1D,CAAH;kBACA;gBACD;;gBAED,IAAIH,EAAE,CAACI,UAAH,CAAcZ,MAAd,GAAuB,CAA3B,EAA8B;kBAC5BN,GAAG,CAAC,4CAAD,EAA+CE,MAAM,CAACe,WAAP,EAA/C,CAAH;kBACA;gBACD;;gBAEDjB,GAAG,CAAC,wCAAD,EAA2CE,MAAM,CAACe,WAAP,EAA3C,EAAiET,GAAG,CAACW,QAAJ,EAAjE,EAAiFL,EAAE,CAACI,UAAH,CAAcE,GAAd,CAAkB,UAACC,CAAD;kBAAA,OAAOA,CAAC,CAACF,QAAF,EAAP;gBAAA,CAAlB,CAAjF,CAAH;;gBAEA,IAAI,CAACpB,GAAG,CAACuB,OAAJ,CAAYR,EAAE,CAACC,EAAf,CAAL,EAAyB;kBACvB;kBACAhB,GAAG,CAACwB,SAAJ,CAAcC,WAAd,CAA0BC,GAA1B,CAA8BX,EAAE,CAACC,EAAjC,EAAqCD,EAAE,CAACI,UAAxC;kBACA,OAAOnB,GAAG,CAAC2B,SAAJ,CAAcvB,WAAd,CAA0BK,GAA1B,EAA+BM,EAAE,CAACC,EAAlC,CAAP;gBACD;cACF,CAnBD,EAhBF,CAqCE;cACA;cACA;cACA;cACA;cACA;;cA1CF,iCA2CShB,GAAG,CAAC2B,SAAJ,CAAcvB,WAAd,CAA0BK,GAA1B,EAA+BN,MAA/B,CA3CT;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CARwB;IAAA;EAAA;;EAsDxB,OAAOC,WAAP;AACD,CAvDD"},"metadata":{},"sourceType":"script"}