{"ast":null,"code":"import OrbitDB from \"orbit-db\";\nimport IPFS from \"ipfs\";\nimport { makeAutoObservable } from \"mobx\";\nexport default class DataStore {\n  constructor(rootStore) {\n    this.rootStore = rootStore;\n    this.peers = [];\n    makeAutoObservable(this);\n  }\n\n  async init() {\n    if (!this.rootStore.sessionStore.isAuthenticated()) throw Error(\"User is not defined\");\n    if (this.ipfsNode !== undefined) return;\n    if (this.orbitDb !== undefined) return;\n    const dbConfig = {\n      // If database doesn't exist, create it\n      create: true,\n      // Don't wait to load from the network\n      sync: true,\n      // directory: `/orbitdb/decentio-orbitdb-chat-${Math.random()}}`,\n      // Load only the local version of the database\n      localOnly: false,\n      // Allow anyone to write to the database,\n      // otherwise only the creator of the database can write\n      accessController: {\n        write: [\"*\"]\n      }\n    };\n    const ipfsConfig = {\n      // preload: { enabled: false },\n      relay: {\n        enabled: true,\n        hop: {\n          enabled: true,\n          active: true\n        }\n      },\n      // libp2p: {\n      //   config: {\n      //     dht: {\n      //       enabled: true,\n      //     },\n      //     modules: {\n      //       transport: [\"WebRTCStar\", \"WebSockets\"],\n      //     },\n      //     // transport: {\n      //     //   WebRTCStar: {\n      //     //     wrtc,\n      //     //   },\n      //     // },\n      //   },\n      // },\n      // peerDiscovery: {\n      //   autoDial: true, // Auto connect to discovered peers (limited by ConnectionManager minPeers)\n      //   mdns: {\n      //     // mdns options\n      //     interval: 1000, // ms\n      //     enabled: true,\n      //   },\n      //   webRTCStar: {\n      //     // webrtc-star options\n      //     interval: 1000, // ms\n      //     enabled: false,\n      //   },\n      //   // .. other discovery module options.\n      // },\n      // Prevents large data transfers\n      //TODO: nejak oddelit at to neni random ale treba username nebo neco\n      repo: `/orbitdb/decentio-orbitdb-chat-ipfs-${this.rootStore.sessionStore._user}}`,\n      EXPERIMENTAL: {\n        pubsub: true\n      },\n      config: {\n        Addresses: {\n          Swarm: [//       // Use IPFS dev signal server\n          //       // Websocket:\n          // \"/dns4/ws-star-signal-1.servep2p.com/tcp/443/wss/p2p-websocket-star\",\n          // \"/dns4/ws-star-signal-2.servep2p.com/tcp/443/wss/p2p-websocket-star\",\n          // \"/dns4/ws-star.discovery.libp2p.io/tcp/443/wss/p2p-websocket-star\",\n          // WebRTC:\n          // \"/dns4/wrtc-star1.par.dwebops.pub/tcp/443/wss/p2p-webrtc-star/\",\n          \"/dns4/wrtc-star2.sjc.dwebops.pub/tcp/443/wss/p2p-webrtc-star/\", \"/dns4/webrtc-star.discovery.libp2p.io/tcp/443/wss/p2p-webrtc-star/\", \"/dns4/wrtc-star1.par.dwebops.pub/tcp/443/wss/p2p-webrtc-star\", \"/dns4/wrtc-star2.sjc.dwebops.pub/tcp/443/wss/p2p-webrtc-star\" // // \"/ip4/0.0.0.0/tcp/4002\",\n          // \"/ip4/127.0.0.1/tcp/4003/ws\",\n          // \"/libp2p-webrtc-star/dns4/star-signal.cloud.ipfs.team/wss\",\n          // \"/dns4/star-signal.cloud.ipfs.team/wss/p2p-webrtc-star\",\n          //       // Use local signal server\n          // \"/ip4/0.0.0.0/tcp/4011/ws\",\n          // \"/ip6/::/tcp/4011/ws\",\n          ]\n        },\n        Bootstrap: [// \"/dns4/wrtc-star2.sjc.dwebops.pub/tcp/443/wss/p2p-webrtc-star/\",\n          // \"/dns4/webrtc-star.discovery.libp2p.io/tcp/443/wss/p2p-webrtc-star/\",\n          // \"/dns4/wrtc-star1.par.dwebops.pub/tcp/443/wss/p2p-webrtc-star\",\n          // \"/dns4/wrtc-star2.sjc.dwebops.pub/tcp/443/wss/p2p-webrtc-star\",\n        ]\n      }\n    };\n    await this.start(ipfsConfig, dbConfig);\n  }\n\n  async start(ipfsConf, orbitDbconf) {\n    console.log(this.ipfsNode);\n    console.log(this.orbitDb);\n    await this.startIpfsNode(ipfsConf);\n    await this.startOrbitDb(orbitDbconf);\n    console.log(this.ipfsNode);\n    console.log(this.orbitDb);\n    this.peerId = await this.getPeerId(); // await this.subscribeToOwnPubsub();\n    // setInterval(async () => {\n    //   const peers = await this.getIpfsPeers();\n    //   console.log(peers);\n    //   // await peers.map(async (peerId) => {\n    //   //   try {\n    //   //     await this.connectToPeer(peerId.peer);\n    //   //   } catch {}\n    //   // });\n    //   // const topics = await this.ipfsNode.pubsub.ls();\n    //   // console.log(topics);\n    // }, 10000);\n    // this.ipfsNode.libp2p.connectionManager.on(\"peer:connect\", this.onPeerConnect.bind(this));\n  }\n\n  async onPeerConnect(connection) {\n    console.log(\"Peer connected:\" + connection.remotePeer._idB58String);\n  }\n\n  async getPeerId() {\n    if (this.ipfsNode === undefined) throw Error(\"IPFS Node not defined\");\n    const peerInfo = await this.ipfsNode.id();\n    return peerInfo.id;\n  }\n\n  async connectToPeer(multiaddr) {\n    let protocol = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"/dnsaddr/bootstrap.libp2p.io/p2p/\";\n\n    try {\n      await this.ipfsNode.swarm.connect(protocol + multiaddr);\n    } catch (err) {\n      console.log(err);\n      await this.ipfsNode.swarm.connect(protocol + multiaddr);\n    }\n  }\n\n  async startIpfsNode(ipfsConf) {\n    this.ipfsNode = await IPFS.create(ipfsConf);\n  }\n\n  async startOrbitDb(orbitDbconf) {\n    this.orbitDb = await OrbitDB.createInstance(this.ipfsNode, orbitDbconf);\n  }\n\n  async getIpfsPeers() {\n    const peers = await this.ipfsNode.swarm.peers(); // console.log(peers);\n\n    return peers;\n  }\n\n  async handleStop() {\n    await this.orbitDb.disconnect();\n    await this.ipfsNode.stop();\n    delete this.orbitDb;\n    delete this.ipfsNode;\n  }\n\n}","map":{"version":3,"names":["OrbitDB","IPFS","makeAutoObservable","DataStore","constructor","rootStore","peers","init","sessionStore","isAuthenticated","Error","ipfsNode","undefined","orbitDb","dbConfig","create","sync","localOnly","accessController","write","ipfsConfig","relay","enabled","hop","active","repo","_user","EXPERIMENTAL","pubsub","config","Addresses","Swarm","Bootstrap","start","ipfsConf","orbitDbconf","console","log","startIpfsNode","startOrbitDb","peerId","getPeerId","onPeerConnect","connection","remotePeer","_idB58String","peerInfo","id","connectToPeer","multiaddr","protocol","swarm","connect","err","createInstance","getIpfsPeers","handleStop","disconnect","stop"],"sources":["C:/Users/zajan/GitHub/chatApplication/src/data/store/DataStore.js"],"sourcesContent":["import OrbitDB from \"orbit-db\";\r\nimport IPFS from \"ipfs\";\r\nimport { makeAutoObservable } from \"mobx\";\r\nexport default class DataStore {\r\n  ipfsNode;\r\n  orbitDb;\r\n  peerId;\r\n  constructor(rootStore) {\r\n    this.rootStore = rootStore;\r\n    this.peers = [];\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  async init() {\r\n    if (!this.rootStore.sessionStore.isAuthenticated()) throw Error(\"User is not defined\");\r\n    if (this.ipfsNode !== undefined) return;\r\n    if (this.orbitDb !== undefined) return;\r\n\r\n    const dbConfig = {\r\n      // If database doesn't exist, create it\r\n      create: true,\r\n      // Don't wait to load from the network\r\n      sync: true,\r\n      // directory: `/orbitdb/decentio-orbitdb-chat-${Math.random()}}`,\r\n      // Load only the local version of the database\r\n      localOnly: false,\r\n      // Allow anyone to write to the database,\r\n      // otherwise only the creator of the database can write\r\n      accessController: {\r\n        write: [\"*\"],\r\n      },\r\n    };\r\n    const ipfsConfig = {\r\n      // preload: { enabled: false },\r\n      relay: { enabled: true, hop: { enabled: true, active: true } },\r\n      // libp2p: {\r\n      //   config: {\r\n      //     dht: {\r\n      //       enabled: true,\r\n      //     },\r\n      //     modules: {\r\n      //       transport: [\"WebRTCStar\", \"WebSockets\"],\r\n      //     },\r\n      //     // transport: {\r\n      //     //   WebRTCStar: {\r\n      //     //     wrtc,\r\n      //     //   },\r\n      //     // },\r\n      //   },\r\n      // },\r\n      // peerDiscovery: {\r\n      //   autoDial: true, // Auto connect to discovered peers (limited by ConnectionManager minPeers)\r\n      //   mdns: {\r\n      //     // mdns options\r\n      //     interval: 1000, // ms\r\n      //     enabled: true,\r\n      //   },\r\n      //   webRTCStar: {\r\n      //     // webrtc-star options\r\n      //     interval: 1000, // ms\r\n      //     enabled: false,\r\n      //   },\r\n      //   // .. other discovery module options.\r\n      // },\r\n      // Prevents large data transfers\r\n      //TODO: nejak oddelit at to neni random ale treba username nebo neco\r\n      repo: `/orbitdb/decentio-orbitdb-chat-ipfs-${this.rootStore.sessionStore._user}}`,\r\n      EXPERIMENTAL: {\r\n        pubsub: true,\r\n      },\r\n\r\n      config: {\r\n        Addresses: {\r\n          Swarm: [\r\n            //       // Use IPFS dev signal server\r\n            //       // Websocket:\r\n            // \"/dns4/ws-star-signal-1.servep2p.com/tcp/443/wss/p2p-websocket-star\",\r\n            // \"/dns4/ws-star-signal-2.servep2p.com/tcp/443/wss/p2p-websocket-star\",\r\n            // \"/dns4/ws-star.discovery.libp2p.io/tcp/443/wss/p2p-websocket-star\",\r\n            // WebRTC:\r\n            // \"/dns4/wrtc-star1.par.dwebops.pub/tcp/443/wss/p2p-webrtc-star/\",\r\n            \"/dns4/wrtc-star2.sjc.dwebops.pub/tcp/443/wss/p2p-webrtc-star/\",\r\n            \"/dns4/webrtc-star.discovery.libp2p.io/tcp/443/wss/p2p-webrtc-star/\",\r\n            \"/dns4/wrtc-star1.par.dwebops.pub/tcp/443/wss/p2p-webrtc-star\",\r\n            \"/dns4/wrtc-star2.sjc.dwebops.pub/tcp/443/wss/p2p-webrtc-star\",\r\n            // // \"/ip4/0.0.0.0/tcp/4002\",\r\n            // \"/ip4/127.0.0.1/tcp/4003/ws\",\r\n            // \"/libp2p-webrtc-star/dns4/star-signal.cloud.ipfs.team/wss\",\r\n            // \"/dns4/star-signal.cloud.ipfs.team/wss/p2p-webrtc-star\",\r\n            //       // Use local signal server\r\n            // \"/ip4/0.0.0.0/tcp/4011/ws\",\r\n            // \"/ip6/::/tcp/4011/ws\",\r\n          ],\r\n        },\r\n        Bootstrap: [\r\n          // \"/dns4/wrtc-star2.sjc.dwebops.pub/tcp/443/wss/p2p-webrtc-star/\",\r\n          // \"/dns4/webrtc-star.discovery.libp2p.io/tcp/443/wss/p2p-webrtc-star/\",\r\n          // \"/dns4/wrtc-star1.par.dwebops.pub/tcp/443/wss/p2p-webrtc-star\",\r\n          // \"/dns4/wrtc-star2.sjc.dwebops.pub/tcp/443/wss/p2p-webrtc-star\",\r\n        ],\r\n      },\r\n    };\r\n\r\n    await this.start(ipfsConfig, dbConfig);\r\n  }\r\n\r\n  async start(ipfsConf, orbitDbconf) {\r\n    console.log(this.ipfsNode);\r\n    console.log(this.orbitDb);\r\n    await this.startIpfsNode(ipfsConf);\r\n    await this.startOrbitDb(orbitDbconf);\r\n    console.log(this.ipfsNode);\r\n    console.log(this.orbitDb);\r\n    this.peerId = await this.getPeerId();\r\n    // await this.subscribeToOwnPubsub();\r\n    // setInterval(async () => {\r\n    //   const peers = await this.getIpfsPeers();\r\n    //   console.log(peers);\r\n    //   // await peers.map(async (peerId) => {\r\n    //   //   try {\r\n    //   //     await this.connectToPeer(peerId.peer);\r\n    //   //   } catch {}\r\n    //   // });\r\n    //   // const topics = await this.ipfsNode.pubsub.ls();\r\n    //   // console.log(topics);\r\n    // }, 10000);\r\n    // this.ipfsNode.libp2p.connectionManager.on(\"peer:connect\", this.onPeerConnect.bind(this));\r\n  }\r\n  async onPeerConnect(connection) {\r\n    console.log(\"Peer connected:\" + connection.remotePeer._idB58String);\r\n  }\r\n\r\n  async getPeerId() {\r\n    if (this.ipfsNode === undefined) throw Error(\"IPFS Node not defined\");\r\n    const peerInfo = await this.ipfsNode.id();\r\n    return peerInfo.id;\r\n  }\r\n\r\n  async connectToPeer(multiaddr, protocol = \"/dnsaddr/bootstrap.libp2p.io/p2p/\") {\r\n    try {\r\n      await this.ipfsNode.swarm.connect(protocol + multiaddr);\r\n    } catch (err) {\r\n      console.log(err);\r\n      await this.ipfsNode.swarm.connect(protocol + multiaddr);\r\n    }\r\n  }\r\n\r\n  async startIpfsNode(ipfsConf) {\r\n    this.ipfsNode = await IPFS.create(ipfsConf);\r\n  }\r\n  async startOrbitDb(orbitDbconf) {\r\n    this.orbitDb = await OrbitDB.createInstance(this.ipfsNode, orbitDbconf);\r\n  }\r\n  async getIpfsPeers() {\r\n    const peers = await this.ipfsNode.swarm.peers();\r\n    // console.log(peers);\r\n    return peers;\r\n  }\r\n\r\n  async handleStop() {\r\n    await this.orbitDb.disconnect();\r\n    await this.ipfsNode.stop();\r\n    delete this.orbitDb;\r\n    delete this.ipfsNode;\r\n  }\r\n}\r\n"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,UAApB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,kBAAT,QAAmC,MAAnC;AACA,eAAe,MAAMC,SAAN,CAAgB;EAI7BC,WAAW,CAACC,SAAD,EAAY;IACrB,KAAKA,SAAL,GAAiBA,SAAjB;IACA,KAAKC,KAAL,GAAa,EAAb;IACAJ,kBAAkB,CAAC,IAAD,CAAlB;EACD;;EAES,MAAJK,IAAI,GAAG;IACX,IAAI,CAAC,KAAKF,SAAL,CAAeG,YAAf,CAA4BC,eAA5B,EAAL,EAAoD,MAAMC,KAAK,CAAC,qBAAD,CAAX;IACpD,IAAI,KAAKC,QAAL,KAAkBC,SAAtB,EAAiC;IACjC,IAAI,KAAKC,OAAL,KAAiBD,SAArB,EAAgC;IAEhC,MAAME,QAAQ,GAAG;MACf;MACAC,MAAM,EAAE,IAFO;MAGf;MACAC,IAAI,EAAE,IAJS;MAKf;MACA;MACAC,SAAS,EAAE,KAPI;MAQf;MACA;MACAC,gBAAgB,EAAE;QAChBC,KAAK,EAAE,CAAC,GAAD;MADS;IAVH,CAAjB;IAcA,MAAMC,UAAU,GAAG;MACjB;MACAC,KAAK,EAAE;QAAEC,OAAO,EAAE,IAAX;QAAiBC,GAAG,EAAE;UAAED,OAAO,EAAE,IAAX;UAAiBE,MAAM,EAAE;QAAzB;MAAtB,CAFU;MAGjB;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACAC,IAAI,EAAG,uCAAsC,KAAKpB,SAAL,CAAeG,YAAf,CAA4BkB,KAAM,GAlC9D;MAmCjBC,YAAY,EAAE;QACZC,MAAM,EAAE;MADI,CAnCG;MAuCjBC,MAAM,EAAE;QACNC,SAAS,EAAE;UACTC,KAAK,EAAE,CACL;UACA;UACA;UACA;UACA;UACA;UACA;UACA,+DARK,EASL,oEATK,EAUL,8DAVK,EAWL,8DAXK,CAYL;UACA;UACA;UACA;UACA;UACA;UACA;UAlBK;QADE,CADL;QAuBNC,SAAS,EAAE,CACT;UACA;UACA;UACA;QAJS;MAvBL;IAvCS,CAAnB;IAuEA,MAAM,KAAKC,KAAL,CAAWb,UAAX,EAAuBN,QAAvB,CAAN;EACD;;EAEU,MAALmB,KAAK,CAACC,QAAD,EAAWC,WAAX,EAAwB;IACjCC,OAAO,CAACC,GAAR,CAAY,KAAK1B,QAAjB;IACAyB,OAAO,CAACC,GAAR,CAAY,KAAKxB,OAAjB;IACA,MAAM,KAAKyB,aAAL,CAAmBJ,QAAnB,CAAN;IACA,MAAM,KAAKK,YAAL,CAAkBJ,WAAlB,CAAN;IACAC,OAAO,CAACC,GAAR,CAAY,KAAK1B,QAAjB;IACAyB,OAAO,CAACC,GAAR,CAAY,KAAKxB,OAAjB;IACA,KAAK2B,MAAL,GAAc,MAAM,KAAKC,SAAL,EAApB,CAPiC,CAQjC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACD;;EACkB,MAAbC,aAAa,CAACC,UAAD,EAAa;IAC9BP,OAAO,CAACC,GAAR,CAAY,oBAAoBM,UAAU,CAACC,UAAX,CAAsBC,YAAtD;EACD;;EAEc,MAATJ,SAAS,GAAG;IAChB,IAAI,KAAK9B,QAAL,KAAkBC,SAAtB,EAAiC,MAAMF,KAAK,CAAC,uBAAD,CAAX;IACjC,MAAMoC,QAAQ,GAAG,MAAM,KAAKnC,QAAL,CAAcoC,EAAd,EAAvB;IACA,OAAOD,QAAQ,CAACC,EAAhB;EACD;;EAEkB,MAAbC,aAAa,CAACC,SAAD,EAA4D;IAAA,IAAhDC,QAAgD,uEAArC,mCAAqC;;IAC7E,IAAI;MACF,MAAM,KAAKvC,QAAL,CAAcwC,KAAd,CAAoBC,OAApB,CAA4BF,QAAQ,GAAGD,SAAvC,CAAN;IACD,CAFD,CAEE,OAAOI,GAAP,EAAY;MACZjB,OAAO,CAACC,GAAR,CAAYgB,GAAZ;MACA,MAAM,KAAK1C,QAAL,CAAcwC,KAAd,CAAoBC,OAApB,CAA4BF,QAAQ,GAAGD,SAAvC,CAAN;IACD;EACF;;EAEkB,MAAbX,aAAa,CAACJ,QAAD,EAAW;IAC5B,KAAKvB,QAAL,GAAgB,MAAMV,IAAI,CAACc,MAAL,CAAYmB,QAAZ,CAAtB;EACD;;EACiB,MAAZK,YAAY,CAACJ,WAAD,EAAc;IAC9B,KAAKtB,OAAL,GAAe,MAAMb,OAAO,CAACsD,cAAR,CAAuB,KAAK3C,QAA5B,EAAsCwB,WAAtC,CAArB;EACD;;EACiB,MAAZoB,YAAY,GAAG;IACnB,MAAMjD,KAAK,GAAG,MAAM,KAAKK,QAAL,CAAcwC,KAAd,CAAoB7C,KAApB,EAApB,CADmB,CAEnB;;IACA,OAAOA,KAAP;EACD;;EAEe,MAAVkD,UAAU,GAAG;IACjB,MAAM,KAAK3C,OAAL,CAAa4C,UAAb,EAAN;IACA,MAAM,KAAK9C,QAAL,CAAc+C,IAAd,EAAN;IACA,OAAO,KAAK7C,OAAZ;IACA,OAAO,KAAKF,QAAZ;EACD;;AAjK4B"},"metadata":{},"sourceType":"module"}