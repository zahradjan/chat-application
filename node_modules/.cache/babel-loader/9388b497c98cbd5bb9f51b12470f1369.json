{"ast":null,"code":"'use strict';\n\nconst Store = require('orbit-db-store');\n\nconst CounterIndex = require('./CounterIndex');\n\nconst Counter = require('crdts/src/G-Counter');\n\nclass CounterStore extends Store {\n  constructor(ipfs, id, dbname) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n    if (!options.Index) {\n      Object.assign(options, {\n        Index: CounterIndex\n      });\n    }\n\n    super(ipfs, id, dbname, options);\n    this._index = new this.options.Index(this.identity.publicKey);\n    this._type = 'counter';\n  }\n\n  get value() {\n    return this._index.get().value;\n  }\n\n  inc(amount) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const counter = new Counter(this.identity.publicKey, Object.assign({}, this._index.get()._counters));\n    counter.increment(amount);\n    return this._addOperation({\n      op: 'COUNTER',\n      key: null,\n      value: counter.toJSON()\n    }, options);\n  }\n\n}\n\nmodule.exports = CounterStore;","map":{"version":3,"names":["Store","require","CounterIndex","Counter","CounterStore","constructor","ipfs","id","dbname","options","Index","Object","assign","_index","identity","publicKey","_type","value","get","inc","amount","counter","_counters","increment","_addOperation","op","key","toJSON","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/orbit-db-counterstore/src/CounterStore.js"],"sourcesContent":["'use strict'\n\nconst Store = require('orbit-db-store')\nconst CounterIndex = require('./CounterIndex')\nconst Counter = require('crdts/src/G-Counter')\n\nclass CounterStore extends Store {\n  constructor (ipfs, id, dbname, options = {}) {\n    if (!options.Index) {\n      Object.assign(options, { Index: CounterIndex })\n    }\n    super(ipfs, id, dbname, options)\n    this._index = new this.options.Index(this.identity.publicKey)\n    this._type = 'counter'\n  }\n\n  get value () {\n    return this._index.get().value\n  }\n\n  inc (amount, options = {}) {\n    const counter = new Counter(this.identity.publicKey, Object.assign({}, this._index.get()._counters))\n    counter.increment(amount)\n    return this._addOperation({\n      op: 'COUNTER',\n      key: null,\n      value: counter.toJSON()\n    }, options)\n  }\n}\n\nmodule.exports = CounterStore\n"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,gBAAD,CAArB;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,gBAAD,CAA5B;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,qBAAD,CAAvB;;AAEA,MAAMG,YAAN,SAA2BJ,KAA3B,CAAiC;EAC/BK,WAAW,CAAEC,IAAF,EAAQC,EAAR,EAAYC,MAAZ,EAAkC;IAAA,IAAdC,OAAc,uEAAJ,EAAI;;IAC3C,IAAI,CAACA,OAAO,CAACC,KAAb,EAAoB;MAClBC,MAAM,CAACC,MAAP,CAAcH,OAAd,EAAuB;QAAEC,KAAK,EAAER;MAAT,CAAvB;IACD;;IACD,MAAMI,IAAN,EAAYC,EAAZ,EAAgBC,MAAhB,EAAwBC,OAAxB;IACA,KAAKI,MAAL,GAAc,IAAI,KAAKJ,OAAL,CAAaC,KAAjB,CAAuB,KAAKI,QAAL,CAAcC,SAArC,CAAd;IACA,KAAKC,KAAL,GAAa,SAAb;EACD;;EAEQ,IAALC,KAAK,GAAI;IACX,OAAO,KAAKJ,MAAL,CAAYK,GAAZ,GAAkBD,KAAzB;EACD;;EAEDE,GAAG,CAAEC,MAAF,EAAwB;IAAA,IAAdX,OAAc,uEAAJ,EAAI;IACzB,MAAMY,OAAO,GAAG,IAAIlB,OAAJ,CAAY,KAAKW,QAAL,CAAcC,SAA1B,EAAqCJ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKC,MAAL,CAAYK,GAAZ,GAAkBI,SAApC,CAArC,CAAhB;IACAD,OAAO,CAACE,SAAR,CAAkBH,MAAlB;IACA,OAAO,KAAKI,aAAL,CAAmB;MACxBC,EAAE,EAAE,SADoB;MAExBC,GAAG,EAAE,IAFmB;MAGxBT,KAAK,EAAEI,OAAO,CAACM,MAAR;IAHiB,CAAnB,EAIJlB,OAJI,CAAP;EAKD;;AAtB8B;;AAyBjCmB,MAAM,CAACC,OAAP,GAAiBzB,YAAjB"},"metadata":{},"sourceType":"script"}