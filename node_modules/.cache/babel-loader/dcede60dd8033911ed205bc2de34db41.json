{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _objectSpread = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar _asyncIterator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\n\nvar _require = require('uint8arrays/from-string'),\n    uint8ArrayFromString = _require.fromString;\n\nvar _require2 = require('uint8arrays/to-string'),\n    uint8ArrayToString = _require2.toString;\n\nvar log = require('debug')('ipfs-http-client:pubsub:subscribe');\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').Message} Message\n * @typedef {(err: Error, fatal: boolean, msg?: Message) => void} ErrorHandlerFn\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions & { onError?: ErrorHandlerFn }>} PubsubAPI\n * @typedef {import('../types').Options} Options\n */\n\n/**\n * @param {Options} options\n * @param {import('./subscription-tracker')} subsTracker\n */\n\n\nmodule.exports = function (options, subsTracker) {\n  return configure(function (api) {\n    /**\n     * @type {PubsubAPI[\"subscribe\"]}\n     */\n    function subscribe(_x, _x2) {\n      return _subscribe.apply(this, arguments);\n    }\n\n    function _subscribe() {\n      _subscribe = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(topic, handler) {\n        var options,\n            done,\n            fail,\n            result,\n            ffWorkaround,\n            _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n                // eslint-disable-line require-await\n                options.signal = subsTracker.subscribe(topic, handler, options.signal);\n                /** @type {(value?: any) => void} */\n\n                result = new Promise(function (resolve, reject) {\n                  done = resolve;\n                  fail = reject;\n                }); // In Firefox, the initial call to fetch does not resolve until some data\n                // is received. If this doesn't happen within 1 second assume success\n\n                ffWorkaround = setTimeout(function () {\n                  return done();\n                }, 1000); // Do this async to not block Firefox\n\n                api.post('pubsub/sub', {\n                  signal: options.signal,\n                  searchParams: toUrlSearchParams(_objectSpread({\n                    arg: topic\n                  }, options)),\n                  headers: options.headers\n                }).catch(function (err) {\n                  // Initial subscribe fail, ensure we clean up\n                  subsTracker.unsubscribe(topic, handler);\n                  fail(err);\n                }).then(function (response) {\n                  clearTimeout(ffWorkaround);\n\n                  if (!response) {\n                    // if there was no response, the subscribe failed\n                    return;\n                  }\n\n                  readMessages(response, {\n                    onMessage: handler,\n                    onEnd: function onEnd() {\n                      return subsTracker.unsubscribe(topic, handler);\n                    },\n                    onError: options.onError\n                  });\n                  done();\n                });\n                return _context.abrupt(\"return\", result);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _subscribe.apply(this, arguments);\n    }\n\n    return subscribe;\n  })(options);\n};\n/**\n * @param {import('ipfs-utils/src/types').ExtendedResponse} response\n * @param {object} options\n * @param {(message: Message) => void} options.onMessage\n * @param {() => void} options.onEnd\n * @param {ErrorHandlerFn} [options.onError]\n */\n\n\nfunction readMessages(_x3, _x4) {\n  return _readMessages.apply(this, arguments);\n}\n/**\n * @param {Error & {type?:string}} error\n * @returns {boolean}\n */\n\n\nfunction _readMessages() {\n  _readMessages = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(response, _ref) {\n    var onMessage, onEnd, onError, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, msg;\n\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            onMessage = _ref.onMessage, onEnd = _ref.onEnd, onError = _ref.onError;\n            onError = onError || log;\n            _context2.prev = 2;\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context2.prev = 5;\n            _iterator = _asyncIterator(response.ndjson());\n\n          case 7:\n            _context2.next = 9;\n            return _iterator.next();\n\n          case 9:\n            if (!(_iteratorAbruptCompletion = !(_step = _context2.sent).done)) {\n              _context2.next = 24;\n              break;\n            }\n\n            msg = _step.value;\n            _context2.prev = 11;\n\n            if (msg.from) {\n              _context2.next = 14;\n              break;\n            }\n\n            return _context2.abrupt(\"continue\", 21);\n\n          case 14:\n            onMessage({\n              from: uint8ArrayToString(uint8ArrayFromString(msg.from, 'base64pad'), 'base58btc'),\n              data: uint8ArrayFromString(msg.data, 'base64pad'),\n              seqno: uint8ArrayFromString(msg.seqno, 'base64pad'),\n              topicIDs: msg.topicIDs\n            });\n            _context2.next = 21;\n            break;\n\n          case 17:\n            _context2.prev = 17;\n            _context2.t0 = _context2[\"catch\"](11);\n            _context2.t0.message = \"Failed to parse pubsub message: \".concat(_context2.t0.message);\n            onError(_context2.t0, false, msg); // Not fatal\n\n          case 21:\n            _iteratorAbruptCompletion = false;\n            _context2.next = 7;\n            break;\n\n          case 24:\n            _context2.next = 30;\n            break;\n\n          case 26:\n            _context2.prev = 26;\n            _context2.t1 = _context2[\"catch\"](5);\n            _didIteratorError = true;\n            _iteratorError = _context2.t1;\n\n          case 30:\n            _context2.prev = 30;\n            _context2.prev = 31;\n\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context2.next = 35;\n              break;\n            }\n\n            _context2.next = 35;\n            return _iterator.return();\n\n          case 35:\n            _context2.prev = 35;\n\n            if (!_didIteratorError) {\n              _context2.next = 38;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 38:\n            return _context2.finish(35);\n\n          case 39:\n            return _context2.finish(30);\n\n          case 40:\n            _context2.next = 45;\n            break;\n\n          case 42:\n            _context2.prev = 42;\n            _context2.t2 = _context2[\"catch\"](2);\n\n            if (!isAbortError(_context2.t2)) {\n              onError(_context2.t2, true); // Fatal\n            }\n\n          case 45:\n            _context2.prev = 45;\n            onEnd();\n            return _context2.finish(45);\n\n          case 48:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[2, 42, 45, 48], [5, 26, 30, 40], [11, 17], [31,, 35, 39]]);\n  }));\n  return _readMessages.apply(this, arguments);\n}\n\nvar isAbortError = function isAbortError(error) {\n  switch (error.type) {\n    case 'aborted':\n      return true;\n    // It is `abort` in Electron instead of `aborted`\n\n    case 'abort':\n      return true;\n\n    default:\n      // FIXME: In testing with Chrome, err.type is undefined (should not be!)\n      // Temporarily use the name property instead.\n      return error.name === 'AbortError';\n  }\n};","map":{"version":3,"names":["require","uint8ArrayFromString","fromString","uint8ArrayToString","toString","log","configure","toUrlSearchParams","module","exports","options","subsTracker","api","subscribe","topic","handler","signal","result","Promise","resolve","reject","done","fail","ffWorkaround","setTimeout","post","searchParams","arg","headers","catch","err","unsubscribe","then","response","clearTimeout","readMessages","onMessage","onEnd","onError","ndjson","msg","from","data","seqno","topicIDs","message","isAbortError","error","type","name"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-http-client/src/pubsub/subscribe.js"],"sourcesContent":["'use strict'\n\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\nconst log = require('debug')('ipfs-http-client:pubsub:subscribe')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').Message} Message\n * @typedef {(err: Error, fatal: boolean, msg?: Message) => void} ErrorHandlerFn\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions & { onError?: ErrorHandlerFn }>} PubsubAPI\n * @typedef {import('../types').Options} Options\n */\n\n/**\n * @param {Options} options\n * @param {import('./subscription-tracker')} subsTracker\n */\nmodule.exports = (options, subsTracker) => {\n  return configure((api) => {\n    /**\n     * @type {PubsubAPI[\"subscribe\"]}\n     */\n    async function subscribe (topic, handler, options = {}) { // eslint-disable-line require-await\n      options.signal = subsTracker.subscribe(topic, handler, options.signal)\n\n      /** @type {(value?: any) => void} */\n      let done\n      /** @type {(error: Error) => void} */\n      let fail\n\n      const result = new Promise((resolve, reject) => {\n        done = resolve\n        fail = reject\n      })\n\n      // In Firefox, the initial call to fetch does not resolve until some data\n      // is received. If this doesn't happen within 1 second assume success\n      const ffWorkaround = setTimeout(() => done(), 1000)\n\n      // Do this async to not block Firefox\n      api.post('pubsub/sub', {\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: topic,\n          ...options\n        }),\n        headers: options.headers\n      })\n        .catch((err) => {\n          // Initial subscribe fail, ensure we clean up\n          subsTracker.unsubscribe(topic, handler)\n\n          fail(err)\n        })\n        .then((response) => {\n          clearTimeout(ffWorkaround)\n\n          if (!response) {\n            // if there was no response, the subscribe failed\n            return\n          }\n\n          readMessages(response, {\n            onMessage: handler,\n            onEnd: () => subsTracker.unsubscribe(topic, handler),\n            onError: options.onError\n          })\n\n          done()\n        })\n\n      return result\n    }\n    return subscribe\n  })(options)\n}\n\n/**\n * @param {import('ipfs-utils/src/types').ExtendedResponse} response\n * @param {object} options\n * @param {(message: Message) => void} options.onMessage\n * @param {() => void} options.onEnd\n * @param {ErrorHandlerFn} [options.onError]\n */\nasync function readMessages (response, { onMessage, onEnd, onError }) {\n  onError = onError || log\n\n  try {\n    for await (const msg of response.ndjson()) {\n      try {\n        if (!msg.from) {\n          continue\n        }\n\n        onMessage({\n          from: uint8ArrayToString(uint8ArrayFromString(msg.from, 'base64pad'), 'base58btc'),\n          data: uint8ArrayFromString(msg.data, 'base64pad'),\n          seqno: uint8ArrayFromString(msg.seqno, 'base64pad'),\n          topicIDs: msg.topicIDs\n        })\n      } catch (err) {\n        err.message = `Failed to parse pubsub message: ${err.message}`\n        onError(err, false, msg) // Not fatal\n      }\n    }\n  } catch (err) {\n    if (!isAbortError(err)) {\n      onError(err, true) // Fatal\n    }\n  } finally {\n    onEnd()\n  }\n}\n\n/**\n * @param {Error & {type?:string}} error\n * @returns {boolean}\n */\nconst isAbortError = error => {\n  switch (error.type) {\n    case 'aborted':\n      return true\n    // It is `abort` in Electron instead of `aborted`\n    case 'abort':\n      return true\n    default:\n      // FIXME: In testing with Chrome, err.type is undefined (should not be!)\n      // Temporarily use the name property instead.\n      return error.name === 'AbortError'\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}