{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _toConsumableArray = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar Channel = require('ipfs-pubsub-1on1');\n\nvar Logger = require('logplease');\n\nvar logger = Logger.create('exchange-heads', {\n  color: Logger.Colors.Yellow\n});\nLogger.setLogLevel('ERROR');\n\nvar getHeadsForDatabase = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(store) {\n    var localHeads, remoteHeads;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (store && store._cache) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", []);\n\n          case 2:\n            _context.next = 4;\n            return store._cache.get(store.localHeadsPath);\n\n          case 4:\n            _context.t0 = _context.sent;\n\n            if (_context.t0) {\n              _context.next = 7;\n              break;\n            }\n\n            _context.t0 = [];\n\n          case 7:\n            localHeads = _context.t0;\n            _context.next = 10;\n            return store._cache.get(store.remoteHeadsPath);\n\n          case 10:\n            _context.t1 = _context.sent;\n\n            if (_context.t1) {\n              _context.next = 13;\n              break;\n            }\n\n            _context.t1 = [];\n\n          case 13:\n            remoteHeads = _context.t1;\n            return _context.abrupt(\"return\", [].concat(_toConsumableArray(localHeads), _toConsumableArray(remoteHeads)));\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getHeadsForDatabase(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar exchangeHeads = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(ipfs, address, peer, getStore, getDirectConnection, onMessage, onChannelCreated) {\n    var _handleMessage, channel, heads;\n\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _handleMessage = function _handleMessage(message) {\n              var msg = JSON.parse(Buffer.from(message.data).toString());\n              var address = msg.address,\n                  heads = msg.heads;\n              onMessage(address, heads);\n            };\n\n            channel = getDirectConnection(peer);\n\n            if (channel) {\n              _context2.next = 16;\n              break;\n            }\n\n            _context2.prev = 3;\n            logger.debug(\"Create a channel to \".concat(peer));\n            _context2.next = 7;\n            return Channel.open(ipfs, peer);\n\n          case 7:\n            channel = _context2.sent;\n            channel.on('message', _handleMessage);\n            logger.debug(\"Channel created to \".concat(peer));\n            onChannelCreated(channel);\n            _context2.next = 16;\n            break;\n\n          case 13:\n            _context2.prev = 13;\n            _context2.t0 = _context2[\"catch\"](3);\n            logger.error(_context2.t0);\n\n          case 16:\n            _context2.next = 18;\n            return channel.connect();\n\n          case 18:\n            logger.debug(\"Connected to \".concat(peer)); // Send the heads if we have any\n\n            _context2.next = 21;\n            return getHeadsForDatabase(getStore(address));\n\n          case 21:\n            heads = _context2.sent;\n            logger.debug(\"Send latest heads of '\".concat(address, \"':\\n\"), JSON.stringify(heads.map(function (e) {\n              return e.hash;\n            }), null, 2));\n\n            if (!heads) {\n              _context2.next = 26;\n              break;\n            }\n\n            _context2.next = 26;\n            return channel.send(JSON.stringify({\n              address: address,\n              heads: heads\n            }));\n\n          case 26:\n            return _context2.abrupt(\"return\", channel);\n\n          case 27:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[3, 13]]);\n  }));\n\n  return function exchangeHeads(_x2, _x3, _x4, _x5, _x6, _x7, _x8) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nmodule.exports = exchangeHeads;","map":{"version":3,"names":["Channel","require","Logger","logger","create","color","Colors","Yellow","setLogLevel","getHeadsForDatabase","store","_cache","get","localHeadsPath","localHeads","remoteHeadsPath","remoteHeads","exchangeHeads","ipfs","address","peer","getStore","getDirectConnection","onMessage","onChannelCreated","_handleMessage","message","msg","JSON","parse","Buffer","from","data","toString","heads","channel","debug","open","on","error","connect","stringify","map","e","hash","send","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/orbit-db/src/exchange-heads.js"],"sourcesContent":["'use strict'\n\nconst Channel = require('ipfs-pubsub-1on1')\n\nconst Logger = require('logplease')\nconst logger = Logger.create('exchange-heads', { color: Logger.Colors.Yellow })\nLogger.setLogLevel('ERROR')\n\nconst getHeadsForDatabase = async store => {\n  if (!(store && store._cache)) return []\n  const localHeads = await store._cache.get(store.localHeadsPath) || []\n  const remoteHeads = await store._cache.get(store.remoteHeadsPath) || []\n  return [...localHeads, ...remoteHeads]\n}\n\nconst exchangeHeads = async (ipfs, address, peer, getStore, getDirectConnection, onMessage, onChannelCreated) => {\n  const _handleMessage = message => {\n    const msg = JSON.parse(Buffer.from(message.data).toString())\n    const { address, heads } = msg\n    onMessage(address, heads)\n  }\n\n  let channel = getDirectConnection(peer)\n  if (!channel) {\n    try {\n      logger.debug(`Create a channel to ${peer}`)\n      channel = await Channel.open(ipfs, peer)\n      channel.on('message', _handleMessage)\n      logger.debug(`Channel created to ${peer}`)\n      onChannelCreated(channel)\n    } catch (e) {\n      logger.error(e)\n    }\n  }\n\n  // Wait for the direct channel to be fully connected\n  await channel.connect()\n  logger.debug(`Connected to ${peer}`)\n\n  // Send the heads if we have any\n  const heads = await getHeadsForDatabase(getStore(address))\n  logger.debug(`Send latest heads of '${address}':\\n`, JSON.stringify(heads.map(e => e.hash), null, 2))\n  if (heads) {\n    await channel.send(JSON.stringify({ address: address, heads: heads }))\n  }\n\n  return channel\n}\n\nmodule.exports = exchangeHeads\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}