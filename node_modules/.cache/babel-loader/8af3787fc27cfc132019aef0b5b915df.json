{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"C:/Users/zajan/GitHub/chatApplication/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar pkgversion = require('../../package.json').version;\n\nvar _require = require('multiaddr'),\n    Multiaddr = _require.Multiaddr;\n\nvar withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nvar _require2 = require('uint8arrays/to-string'),\n    uint8ArrayToString = _require2.toString;\n\nvar PeerId = require('peer-id');\n\nvar _require3 = require('../errors'),\n    NotStartedError = _require3.NotStartedError;\n/**\n * @param {Object} config\n * @param {import('peer-id')} config.peerId\n * @param {import('../types').NetworkService} config.network\n */\n\n\nmodule.exports = function (_ref) {\n  var peerId = _ref.peerId,\n      network = _ref.network;\n\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"id\"]}\n   */\n  function id() {\n    return _id.apply(this, arguments);\n  }\n\n  function _id() {\n    _id = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var options,\n          net,\n          _idStr,\n          id,\n          libp2p,\n          publicKey,\n          addresses,\n          protocols,\n          agentVersion,\n          protocolVersion,\n          idStr,\n          _args = arguments;\n\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n\n              // eslint-disable-line require-await\n              if (options.peerId === peerId.toB58String()) {\n                delete options.peerId;\n              }\n\n              net = network.try();\n\n              if (net) {\n                _context.next = 8;\n                break;\n              }\n\n              if (!options.peerId) {\n                _context.next = 6;\n                break;\n              }\n\n              throw new NotStartedError();\n\n            case 6:\n              _idStr = peerId.toB58String();\n              return _context.abrupt(\"return\", {\n                id: _idStr,\n                publicKey: uint8ArrayToString(peerId.pubKey.bytes, 'base64pad'),\n                addresses: [],\n                agentVersion: \"js-ipfs/\".concat(pkgversion),\n                protocolVersion: '9000',\n                protocols: []\n              });\n\n            case 8:\n              id = options.peerId ? PeerId.createFromB58String(options.peerId.toString()) : peerId;\n              libp2p = net.libp2p;\n              publicKey = options.peerId ? libp2p.peerStore.keyBook.get(id) : id.pubKey;\n              addresses = options.peerId ? libp2p.peerStore.addressBook.getMultiaddrsForPeer(id) : libp2p.multiaddrs;\n              protocols = options.peerId ? libp2p.peerStore.protoBook.get(id) : Array.from(libp2p.upgrader.protocols.keys());\n              agentVersion = uint8ArrayToString(libp2p.peerStore.metadataBook.getValue(id, 'AgentVersion') || new Uint8Array());\n              protocolVersion = uint8ArrayToString(libp2p.peerStore.metadataBook.getValue(id, 'ProtocolVersion') || new Uint8Array());\n              idStr = id.toB58String();\n              return _context.abrupt(\"return\", {\n                id: idStr,\n                publicKey: uint8ArrayToString(publicKey.bytes, 'base64pad'),\n                addresses: (addresses || []).map(function (ma) {\n                  var str = ma.toString(); // some relay-style transports add our peer id to the ma for us\n                  // so don't double-add\n\n                  if (str.endsWith(\"/p2p/\".concat(idStr))) {\n                    return str;\n                  }\n\n                  return \"\".concat(str, \"/p2p/\").concat(idStr);\n                }).sort().map(function (ma) {\n                  return new Multiaddr(ma);\n                }),\n                agentVersion: agentVersion,\n                protocolVersion: protocolVersion,\n                protocols: (protocols || []).sort()\n              });\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _id.apply(this, arguments);\n  }\n\n  return withTimeoutOption(id);\n};","map":{"version":3,"names":["pkgversion","require","version","Multiaddr","withTimeoutOption","uint8ArrayToString","toString","PeerId","NotStartedError","module","exports","peerId","network","id","options","toB58String","net","try","idStr","publicKey","pubKey","bytes","addresses","agentVersion","protocolVersion","protocols","createFromB58String","libp2p","peerStore","keyBook","get","addressBook","getMultiaddrsForPeer","multiaddrs","protoBook","Array","from","upgrader","keys","metadataBook","getValue","Uint8Array","map","ma","str","endsWith","sort"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/id.js"],"sourcesContent":["'use strict'\n\nconst pkgversion = require('../../package.json').version\nconst { Multiaddr } = require('multiaddr')\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\nconst PeerId = require('peer-id')\nconst { NotStartedError } = require('../errors')\n\n/**\n * @param {Object} config\n * @param {import('peer-id')} config.peerId\n * @param {import('../types').NetworkService} config.network\n */\nmodule.exports = ({ peerId, network }) => {\n  /**\n   * @type {import('ipfs-core-types/src/root').API[\"id\"]}\n   */\n  async function id (options = {}) { // eslint-disable-line require-await\n    if (options.peerId === peerId.toB58String()) {\n      delete options.peerId\n    }\n\n    const net = network.try()\n\n    if (!net) {\n      if (options.peerId) {\n        throw new NotStartedError()\n      }\n\n      const idStr = peerId.toB58String()\n\n      return {\n        id: idStr,\n        publicKey: uint8ArrayToString(peerId.pubKey.bytes, 'base64pad'),\n        addresses: [],\n        agentVersion: `js-ipfs/${pkgversion}`,\n        protocolVersion: '9000',\n        protocols: []\n      }\n    }\n\n    const id = options.peerId ? PeerId.createFromB58String(options.peerId.toString()) : peerId\n    const { libp2p } = net\n\n    const publicKey = options.peerId ? libp2p.peerStore.keyBook.get(id) : id.pubKey\n    const addresses = options.peerId ? libp2p.peerStore.addressBook.getMultiaddrsForPeer(id) : libp2p.multiaddrs\n    const protocols = options.peerId ? libp2p.peerStore.protoBook.get(id) : Array.from(libp2p.upgrader.protocols.keys())\n    const agentVersion = uint8ArrayToString(libp2p.peerStore.metadataBook.getValue(id, 'AgentVersion') || new Uint8Array())\n    const protocolVersion = uint8ArrayToString(libp2p.peerStore.metadataBook.getValue(id, 'ProtocolVersion') || new Uint8Array())\n    const idStr = id.toB58String()\n\n    return {\n      id: idStr,\n      publicKey: uint8ArrayToString(publicKey.bytes, 'base64pad'),\n      addresses: (addresses || [])\n        .map(ma => {\n          const str = ma.toString()\n\n          // some relay-style transports add our peer id to the ma for us\n          // so don't double-add\n          if (str.endsWith(`/p2p/${idStr}`)) {\n            return str\n          }\n\n          return `${str}/p2p/${idStr}`\n        })\n        .sort()\n        .map(ma => new Multiaddr(ma)),\n      agentVersion,\n      protocolVersion,\n      protocols: (protocols || []).sort()\n    }\n  }\n  return withTimeoutOption(id)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}