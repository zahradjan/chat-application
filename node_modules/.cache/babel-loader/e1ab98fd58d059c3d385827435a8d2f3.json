{"ast":null,"code":"'use strict';\n\nconst io = require('orbit-db-io');\n\nconst Buffer = require('safe-buffer/').Buffer;\n\nconst AccessController = require('./access-controller-interface');\n\nconst type = 'legacy-ipfs';\n\nclass LegacyIPFSAccessController extends AccessController {\n  constructor(ipfs, options) {\n    super();\n    this._ipfs = ipfs;\n    this._write = Array.from(options.write || []);\n  } // Returns the type of the access controller\n\n\n  static get type() {\n    return type;\n  } // Return a Set of keys that have `access` capability\n\n\n  get write() {\n    return this._write;\n  }\n\n  async canAppend(entry, identityProvider) {\n    // Allow if access list contain the writer's publicKey or is '*'\n    const publicKey = entry.key;\n\n    if (this.write.includes(publicKey) || this.write.includes('*')) {\n      return true;\n    }\n\n    return false;\n  }\n\n  async load(address) {\n    // Transform '/ipfs/QmPFtHi3cmfZerxtH9ySLdzpg1yFhocYDZgEZywdUXHxFU'\n    // to 'QmPFtHi3cmfZerxtH9ySLdzpg1yFhocYDZgEZywdUXHxFU'\n    if (address.indexOf('/ipfs') === 0) {\n      address = address.split('/')[2];\n    }\n\n    try {\n      const access = await io.read(this._ipfs, address);\n      this._write = access.write;\n    } catch (e) {\n      console.log('LegacyIPFSAccessController.load ERROR:', e);\n    }\n  }\n\n  async save(options) {\n    let cid;\n    const access = {\n      admin: [],\n      write: this.write,\n      read: []\n    };\n\n    try {\n      cid = await io.write(this._ipfs, 'raw', Buffer.from(JSON.stringify(access, null, 2)), {\n        format: 'dag-pb'\n      });\n    } catch (e) {\n      console.log('LegacyIPFSAccessController.save ERROR:', e);\n    } // return the manifest data\n\n\n    return {\n      address: cid,\n      skipManifest: true\n    };\n  }\n\n  static async create(orbitdb) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    options = { ...options,\n      ...{\n        write: options.write || [orbitdb.identity.publicKey]\n      }\n    };\n    return new LegacyIPFSAccessController(orbitdb._ipfs, options);\n  }\n\n}\n\nmodule.exports = LegacyIPFSAccessController;","map":{"version":3,"names":["io","require","Buffer","AccessController","type","LegacyIPFSAccessController","constructor","ipfs","options","_ipfs","_write","Array","from","write","canAppend","entry","identityProvider","publicKey","key","includes","load","address","indexOf","split","access","read","e","console","log","save","cid","admin","JSON","stringify","format","skipManifest","create","orbitdb","identity","module","exports"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/orbit-db-access-controllers/src/legacy-ipfs-access-controller.js"],"sourcesContent":["'use strict'\nconst io = require('orbit-db-io')\nconst Buffer = require('safe-buffer/').Buffer\nconst AccessController = require('./access-controller-interface')\nconst type = 'legacy-ipfs'\n\nclass LegacyIPFSAccessController extends AccessController {\n  constructor (ipfs, options) {\n    super()\n    this._ipfs = ipfs\n    this._write = Array.from(options.write || [])\n  }\n\n  // Returns the type of the access controller\n  static get type () { return type }\n\n  // Return a Set of keys that have `access` capability\n  get write () {\n    return this._write\n  }\n\n  async canAppend (entry, identityProvider) {\n    // Allow if access list contain the writer's publicKey or is '*'\n    const publicKey = entry.key\n    if (this.write.includes(publicKey) ||\n      this.write.includes('*')) {\n      return true\n    }\n    return false\n  }\n\n  async load (address) {\n    // Transform '/ipfs/QmPFtHi3cmfZerxtH9ySLdzpg1yFhocYDZgEZywdUXHxFU'\n    // to 'QmPFtHi3cmfZerxtH9ySLdzpg1yFhocYDZgEZywdUXHxFU'\n    if (address.indexOf('/ipfs') === 0) { address = address.split('/')[2] }\n\n    try {\n      const access = await io.read(this._ipfs, address)\n      this._write = access.write\n    } catch (e) {\n      console.log('LegacyIPFSAccessController.load ERROR:', e)\n    }\n  }\n\n  async save (options) {\n    let cid\n    const access = { admin: [], write: this.write, read: [] }\n    try {\n      cid = await io.write(this._ipfs, 'raw', Buffer.from(JSON.stringify(access, null, 2)), { format: 'dag-pb' })\n    } catch (e) {\n      console.log('LegacyIPFSAccessController.save ERROR:', e)\n    }\n    // return the manifest data\n    return { address: cid, skipManifest: true }\n  }\n\n  static async create (orbitdb, options = {}) {\n    options = { ...options, ...{ write: options.write || [orbitdb.identity.publicKey] } }\n    return new LegacyIPFSAccessController(orbitdb._ipfs, options)\n  }\n}\n\nmodule.exports = LegacyIPFSAccessController\n"],"mappings":"AAAA;;AACA,MAAMA,EAAE,GAAGC,OAAO,CAAC,aAAD,CAAlB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,cAAD,CAAP,CAAwBC,MAAvC;;AACA,MAAMC,gBAAgB,GAAGF,OAAO,CAAC,+BAAD,CAAhC;;AACA,MAAMG,IAAI,GAAG,aAAb;;AAEA,MAAMC,0BAAN,SAAyCF,gBAAzC,CAA0D;EACxDG,WAAW,CAAEC,IAAF,EAAQC,OAAR,EAAiB;IAC1B;IACA,KAAKC,KAAL,GAAaF,IAAb;IACA,KAAKG,MAAL,GAAcC,KAAK,CAACC,IAAN,CAAWJ,OAAO,CAACK,KAAR,IAAiB,EAA5B,CAAd;EACD,CALuD,CAOxD;;;EACe,WAAJT,IAAI,GAAI;IAAE,OAAOA,IAAP;EAAa,CARsB,CAUxD;;;EACS,IAALS,KAAK,GAAI;IACX,OAAO,KAAKH,MAAZ;EACD;;EAEc,MAATI,SAAS,CAAEC,KAAF,EAASC,gBAAT,EAA2B;IACxC;IACA,MAAMC,SAAS,GAAGF,KAAK,CAACG,GAAxB;;IACA,IAAI,KAAKL,KAAL,CAAWM,QAAX,CAAoBF,SAApB,KACF,KAAKJ,KAAL,CAAWM,QAAX,CAAoB,GAApB,CADF,EAC4B;MAC1B,OAAO,IAAP;IACD;;IACD,OAAO,KAAP;EACD;;EAES,MAAJC,IAAI,CAAEC,OAAF,EAAW;IACnB;IACA;IACA,IAAIA,OAAO,CAACC,OAAR,CAAgB,OAAhB,MAA6B,CAAjC,EAAoC;MAAED,OAAO,GAAGA,OAAO,CAACE,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAAV;IAAiC;;IAEvE,IAAI;MACF,MAAMC,MAAM,GAAG,MAAMxB,EAAE,CAACyB,IAAH,CAAQ,KAAKhB,KAAb,EAAoBY,OAApB,CAArB;MACA,KAAKX,MAAL,GAAcc,MAAM,CAACX,KAArB;IACD,CAHD,CAGE,OAAOa,CAAP,EAAU;MACVC,OAAO,CAACC,GAAR,CAAY,wCAAZ,EAAsDF,CAAtD;IACD;EACF;;EAES,MAAJG,IAAI,CAAErB,OAAF,EAAW;IACnB,IAAIsB,GAAJ;IACA,MAAMN,MAAM,GAAG;MAAEO,KAAK,EAAE,EAAT;MAAalB,KAAK,EAAE,KAAKA,KAAzB;MAAgCY,IAAI,EAAE;IAAtC,CAAf;;IACA,IAAI;MACFK,GAAG,GAAG,MAAM9B,EAAE,CAACa,KAAH,CAAS,KAAKJ,KAAd,EAAqB,KAArB,EAA4BP,MAAM,CAACU,IAAP,CAAYoB,IAAI,CAACC,SAAL,CAAeT,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAZ,CAA5B,EAA0E;QAAEU,MAAM,EAAE;MAAV,CAA1E,CAAZ;IACD,CAFD,CAEE,OAAOR,CAAP,EAAU;MACVC,OAAO,CAACC,GAAR,CAAY,wCAAZ,EAAsDF,CAAtD;IACD,CAPkB,CAQnB;;;IACA,OAAO;MAAEL,OAAO,EAAES,GAAX;MAAgBK,YAAY,EAAE;IAA9B,CAAP;EACD;;EAEkB,aAANC,MAAM,CAAEC,OAAF,EAAyB;IAAA,IAAd7B,OAAc,uEAAJ,EAAI;IAC1CA,OAAO,GAAG,EAAE,GAAGA,OAAL;MAAc,GAAG;QAAEK,KAAK,EAAEL,OAAO,CAACK,KAAR,IAAiB,CAACwB,OAAO,CAACC,QAAR,CAAiBrB,SAAlB;MAA1B;IAAjB,CAAV;IACA,OAAO,IAAIZ,0BAAJ,CAA+BgC,OAAO,CAAC5B,KAAvC,EAA8CD,OAA9C,CAAP;EACD;;AArDuD;;AAwD1D+B,MAAM,CAACC,OAAP,GAAiBnC,0BAAjB"},"metadata":{},"sourceType":"script"}