{"ast":null,"code":"'use strict';\n\nconst {\n  createBitswap\n} = require('ipfs-bitswap');\n\nconst createLibP2P = require('./libp2p');\n\nconst {\n  Multiaddr\n} = require('multiaddr');\n\nconst errCode = require('err-code');\n\nconst BlockStorage = require('../block-storage');\n/**\n * @typedef {Object} Online\n * @property {libp2p} libp2p\n * @property {Bitswap} bitswap\n *\n * @typedef {Object} Options\n * @property {PeerId} options.peerId\n * @property {Repo} options.repo\n * @property {Print} options.print\n * @property {IPFSOptions} options.options\n *\n * @typedef {import('ipfs-core-types/src/config').Config} IPFSConfig\n * @typedef {import('../types').Options} IPFSOptions\n * @typedef {import('ipfs-repo').IPFSRepo} Repo\n * @typedef {import('../types').Print} Print\n * @typedef {import('libp2p')} libp2p\n * @typedef {import('ipfs-bitswap').IPFSBitswap} Bitswap\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n\nclass Network {\n  /**\n   * @param {PeerId} peerId\n   * @param {libp2p} libp2p\n   * @param {Bitswap} bitswap\n   * @param {Repo} repo\n   * @param {BlockStorage} blockstore\n   */\n  constructor(peerId, libp2p, bitswap, repo, blockstore) {\n    this.peerId = peerId;\n    this.libp2p = libp2p;\n    this.bitswap = bitswap;\n    this.repo = repo;\n    this.blockstore = blockstore;\n  }\n  /**\n   * @param {Options} options\n   */\n\n\n  static async start(_ref) {\n    let {\n      peerId,\n      repo,\n      print,\n      options\n    } = _ref;\n\n    // Need to ensure that repo is open as it could have been closed between\n    // `init` and `start`.\n    if (repo.closed) {\n      await repo.open();\n    }\n    /** @type {IPFSConfig} */\n\n\n    const config = await repo.config.getAll();\n    const libp2p = await createLibP2P({\n      options,\n      repo,\n      peerId,\n      multiaddrs: readAddrs(peerId, config),\n      config,\n      keychainConfig: undefined\n    });\n\n    if (libp2p.keychain) {\n      await libp2p.loadKeychain();\n    }\n\n    await libp2p.start();\n\n    for (const ma of libp2p.multiaddrs) {\n      print(`Swarm listening on ${ma}/p2p/${peerId.toB58String()}`);\n    }\n\n    const bitswap = createBitswap(libp2p, repo.blocks, {\n      statsEnabled: true\n    });\n    await bitswap.start();\n    const blockstore = new BlockStorage(repo.blocks, bitswap);\n    repo.blocks = blockstore; // @ts-ignore private field\n\n    repo.pins.blockstore = blockstore;\n    return new Network(peerId, libp2p, bitswap, repo, blockstore);\n  }\n  /**\n   * @param {Network} network\n   */\n\n\n  static async stop(network) {\n    network.repo.blocks = network.blockstore.unwrap(); // @ts-ignore private field\n\n    network.repo.pins.blockstore = network.blockstore.unwrap();\n    await Promise.all([network.bitswap.stop(), network.libp2p.stop()]);\n  }\n\n}\n\nmodule.exports = Network;\n/**\n * @param {PeerId} peerId\n * @param {IPFSConfig} config\n */\n\nconst readAddrs = (peerId, config) => {\n  const peerIdStr = peerId.toB58String();\n  /** @type {Multiaddr[]} */\n\n  const addrs = [];\n  const swarm = config.Addresses && config.Addresses.Swarm || [];\n\n  for (const addr of swarm) {\n    let ma = new Multiaddr(addr); // Temporary error for users migrating using websocket-star multiaddrs for listenning on libp2p\n    // websocket-star support was removed from ipfs and libp2p\n\n    if (ma.protoCodes().includes(WEBSOCKET_STAR_PROTO_CODE)) {\n      throw errCode(new Error('websocket-star swarm addresses are not supported. See https://github.com/ipfs/js-ipfs/issues/2779'), 'ERR_WEBSOCKET_STAR_SWARM_ADDR_NOT_SUPPORTED');\n    } // multiaddrs that go via a signalling server or other intermediary (e.g. stardust,\n    // webrtc-star) can have the intermediary's peer ID in the address, so append our\n    // peer ID to the end of it\n\n\n    const maId = ma.getPeerId();\n\n    if (maId && maId !== peerIdStr) {\n      ma = ma.encapsulate(`/p2p/${peerIdStr}`);\n    }\n\n    addrs.push(ma);\n  }\n\n  return addrs;\n};\n\nconst WEBSOCKET_STAR_PROTO_CODE = 479;","map":{"version":3,"names":["createBitswap","require","createLibP2P","Multiaddr","errCode","BlockStorage","Network","constructor","peerId","libp2p","bitswap","repo","blockstore","start","print","options","closed","open","config","getAll","multiaddrs","readAddrs","keychainConfig","undefined","keychain","loadKeychain","ma","toB58String","blocks","statsEnabled","pins","stop","network","unwrap","Promise","all","module","exports","peerIdStr","addrs","swarm","Addresses","Swarm","addr","protoCodes","includes","WEBSOCKET_STAR_PROTO_CODE","Error","maId","getPeerId","encapsulate","push"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-core/src/components/network.js"],"sourcesContent":["'use strict'\n\nconst { createBitswap } = require('ipfs-bitswap')\nconst createLibP2P = require('./libp2p')\nconst { Multiaddr } = require('multiaddr')\nconst errCode = require('err-code')\nconst BlockStorage = require('../block-storage')\n\n/**\n * @typedef {Object} Online\n * @property {libp2p} libp2p\n * @property {Bitswap} bitswap\n *\n * @typedef {Object} Options\n * @property {PeerId} options.peerId\n * @property {Repo} options.repo\n * @property {Print} options.print\n * @property {IPFSOptions} options.options\n *\n * @typedef {import('ipfs-core-types/src/config').Config} IPFSConfig\n * @typedef {import('../types').Options} IPFSOptions\n * @typedef {import('ipfs-repo').IPFSRepo} Repo\n * @typedef {import('../types').Print} Print\n * @typedef {import('libp2p')} libp2p\n * @typedef {import('ipfs-bitswap').IPFSBitswap} Bitswap\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\nclass Network {\n  /**\n   * @param {PeerId} peerId\n   * @param {libp2p} libp2p\n   * @param {Bitswap} bitswap\n   * @param {Repo} repo\n   * @param {BlockStorage} blockstore\n   */\n  constructor (peerId, libp2p, bitswap, repo, blockstore) {\n    this.peerId = peerId\n    this.libp2p = libp2p\n    this.bitswap = bitswap\n    this.repo = repo\n    this.blockstore = blockstore\n  }\n\n  /**\n   * @param {Options} options\n   */\n  static async start ({ peerId, repo, print, options }) {\n    // Need to ensure that repo is open as it could have been closed between\n    // `init` and `start`.\n    if (repo.closed) {\n      await repo.open()\n    }\n\n    /** @type {IPFSConfig} */\n    const config = await repo.config.getAll()\n\n    const libp2p = await createLibP2P({\n      options,\n      repo,\n      peerId,\n      multiaddrs: readAddrs(peerId, config),\n      config,\n      keychainConfig: undefined\n    })\n\n    if (libp2p.keychain) {\n      await libp2p.loadKeychain()\n    }\n\n    await libp2p.start()\n\n    for (const ma of libp2p.multiaddrs) {\n      print(`Swarm listening on ${ma}/p2p/${peerId.toB58String()}`)\n    }\n\n    const bitswap = createBitswap(libp2p, repo.blocks, { statsEnabled: true })\n    await bitswap.start()\n\n    const blockstore = new BlockStorage(repo.blocks, bitswap)\n    repo.blocks = blockstore\n    // @ts-ignore private field\n    repo.pins.blockstore = blockstore\n\n    return new Network(peerId, libp2p, bitswap, repo, blockstore)\n  }\n\n  /**\n   * @param {Network} network\n   */\n  static async stop (network) {\n    network.repo.blocks = network.blockstore.unwrap()\n    // @ts-ignore private field\n    network.repo.pins.blockstore = network.blockstore.unwrap()\n\n    await Promise.all([\n      network.bitswap.stop(),\n      network.libp2p.stop()\n    ])\n  }\n}\nmodule.exports = Network\n\n/**\n * @param {PeerId} peerId\n * @param {IPFSConfig} config\n */\nconst readAddrs = (peerId, config) => {\n  const peerIdStr = peerId.toB58String()\n  /** @type {Multiaddr[]} */\n  const addrs = []\n  const swarm = (config.Addresses && config.Addresses.Swarm) || []\n  for (const addr of swarm) {\n    let ma = new Multiaddr(addr)\n\n    // Temporary error for users migrating using websocket-star multiaddrs for listenning on libp2p\n    // websocket-star support was removed from ipfs and libp2p\n    if (ma.protoCodes().includes(WEBSOCKET_STAR_PROTO_CODE)) {\n      throw errCode(new Error('websocket-star swarm addresses are not supported. See https://github.com/ipfs/js-ipfs/issues/2779'), 'ERR_WEBSOCKET_STAR_SWARM_ADDR_NOT_SUPPORTED')\n    }\n\n    // multiaddrs that go via a signalling server or other intermediary (e.g. stardust,\n    // webrtc-star) can have the intermediary's peer ID in the address, so append our\n    // peer ID to the end of it\n    const maId = ma.getPeerId()\n    if (maId && maId !== peerIdStr) {\n      ma = ma.encapsulate(`/p2p/${peerIdStr}`)\n    }\n\n    addrs.push(ma)\n  }\n\n  return addrs\n}\n\nconst WEBSOCKET_STAR_PROTO_CODE = 479\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}