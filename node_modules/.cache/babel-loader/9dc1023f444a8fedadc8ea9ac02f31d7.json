{"ast":null,"code":"'use strict';\n\nconst Key = require('interface-datastore').Key;\n\nconst sortKeys = require('sort-keys');\n\nconst {\n  toString: uint8ArrayToString\n} = require('uint8arrays/to-string');\n\nconst {\n  fromString: uint8ArrayFromString\n} = require('uint8arrays/from-string');\n\nconst specKey = new Key('datastore_spec');\n/**\n *\n * @param {import('interface-datastore').Datastore} store\n */\n\nmodule.exports = store => {\n  return {\n    /**\n     * Check if a datastore spec file exists.\n     *\n     */\n    exists() {\n      return store.has(specKey);\n    },\n\n    /**\n     * Get the current datastore spec.\n     *\n     * @returns {Promise<Uint8Array>}\n     */\n    async get() {\n      const buf = await store.get(specKey);\n      return JSON.parse(uint8ArrayToString(buf));\n    },\n\n    /**\n     * Set the datastore spec of the repo, writing it to the underlying store.\n     * TODO unclear on what the type should be or if it's required\n     *\n     * @param {any} spec\n     * @returns {Promise<void>}\n     */\n    async set(spec) {\n      return store.put(specKey, uint8ArrayFromString(JSON.stringify(sortKeys(spec, {\n        deep: true\n      }))));\n    }\n\n  };\n};","map":{"version":3,"names":["Key","require","sortKeys","toString","uint8ArrayToString","fromString","uint8ArrayFromString","specKey","module","exports","store","exists","has","get","buf","JSON","parse","set","spec","put","stringify","deep"],"sources":["C:/Users/zajan/GitHub/chatApplication/node_modules/ipfs-repo/src/spec.js"],"sourcesContent":["'use strict'\n\nconst Key = require('interface-datastore').Key\nconst sortKeys = require('sort-keys')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\n\nconst specKey = new Key('datastore_spec')\n\n/**\n *\n * @param {import('interface-datastore').Datastore} store\n */\nmodule.exports = (store) => {\n  return {\n    /**\n     * Check if a datastore spec file exists.\n     *\n     */\n    exists () {\n      return store.has(specKey)\n    },\n    /**\n     * Get the current datastore spec.\n     *\n     * @returns {Promise<Uint8Array>}\n     */\n    async get () {\n      const buf = await store.get(specKey)\n      return JSON.parse(uint8ArrayToString(buf))\n    },\n    /**\n     * Set the datastore spec of the repo, writing it to the underlying store.\n     * TODO unclear on what the type should be or if it's required\n     *\n     * @param {any} spec\n     * @returns {Promise<void>}\n     */\n    async set (spec) {\n      return store.put(specKey, uint8ArrayFromString(JSON.stringify(sortKeys(spec, { deep: true }))))\n    }\n  }\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,qBAAD,CAAP,CAA+BD,GAA3C;;AACA,MAAME,QAAQ,GAAGD,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAM;EAAEE,QAAQ,EAAEC;AAAZ,IAAmCH,OAAO,CAAC,uBAAD,CAAhD;;AACA,MAAM;EAAEI,UAAU,EAAEC;AAAd,IAAuCL,OAAO,CAAC,yBAAD,CAApD;;AAEA,MAAMM,OAAO,GAAG,IAAIP,GAAJ,CAAQ,gBAAR,CAAhB;AAEA;AACA;AACA;AACA;;AACAQ,MAAM,CAACC,OAAP,GAAkBC,KAAD,IAAW;EAC1B,OAAO;IACL;AACJ;AACA;AACA;IACIC,MAAM,GAAI;MACR,OAAOD,KAAK,CAACE,GAAN,CAAUL,OAAV,CAAP;IACD,CAPI;;IAQL;AACJ;AACA;AACA;AACA;IACI,MAAMM,GAAN,GAAa;MACX,MAAMC,GAAG,GAAG,MAAMJ,KAAK,CAACG,GAAN,CAAUN,OAAV,CAAlB;MACA,OAAOQ,IAAI,CAACC,KAAL,CAAWZ,kBAAkB,CAACU,GAAD,CAA7B,CAAP;IACD,CAhBI;;IAiBL;AACJ;AACA;AACA;AACA;AACA;AACA;IACI,MAAMG,GAAN,CAAWC,IAAX,EAAiB;MACf,OAAOR,KAAK,CAACS,GAAN,CAAUZ,OAAV,EAAmBD,oBAAoB,CAACS,IAAI,CAACK,SAAL,CAAelB,QAAQ,CAACgB,IAAD,EAAO;QAAEG,IAAI,EAAE;MAAR,CAAP,CAAvB,CAAD,CAAvC,CAAP;IACD;;EA1BI,CAAP;AA4BD,CA7BD"},"metadata":{},"sourceType":"script"}