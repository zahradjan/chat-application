export type IPFSBitswap = import('./types').IPFSBitswap;
export type PeerId = import('peer-id');
export type BitswapMessage = import('./types/message');
export type Blockstore = import('interface-blockstore').Blockstore;
export type Pair = import('interface-blockstore').Pair;
export type Options = import('interface-blockstore').Options;
export type MultihashHasher = import('multiformats/hashes/interface').MultihashHasher;
/**
 * @typedef {import('./types').IPFSBitswap} IPFSBitswap
 * @typedef {import('peer-id')} PeerId
 * @typedef {import('./types/message')} BitswapMessage
 * @typedef {import('interface-blockstore').Blockstore} Blockstore
 * @typedef {import('interface-blockstore').Pair} Pair
 * @typedef {import('interface-blockstore').Options} Options
 * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher
 */
/**
 * @param {import('libp2p')} libp2p
 * @param {Blockstore} blockstore
 * @param {Object} [options]
 * @param {boolean} [options.statsEnabled=false]
 * @param {number} [options.statsComputeThrottleTimeout=1000]
 * @param {number} [options.statsComputeThrottleMaxQueueSize=1000]
 * @param {Record<number, MultihashHasher>} [options.hashers]
 * @returns {IPFSBitswap}
 */
export function createBitswap(libp2p: import('libp2p'), blockstore: Blockstore, options?: {
    statsEnabled?: boolean | undefined;
    statsComputeThrottleTimeout?: number | undefined;
    statsComputeThrottleMaxQueueSize?: number | undefined;
    hashers?: Record<number, import("multiformats/hashes/interface").MultihashHasher> | undefined;
} | undefined): IPFSBitswap;
//# sourceMappingURL=index.d.ts.map