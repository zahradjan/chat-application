import { coerceMultiaddr } from "../../utils";
import { default as parseDuration } from "parse-duration";
export const command: string;
export const describe: string;
export namespace builder {
    namespace address {
        export const type: string;
        export { coerceMultiaddr as coerce };
    }
    namespace timeout {
        const type_1: string;
        export { type_1 as type };
        export { parseDuration as coerce };
    }
}
/**
 * @param {object} argv
 * @param {import('../../types').Context} argv.ctx
 * @param {import('multiaddr').Multiaddr} argv.address
 * @param {number} argv.timeout
 */
export function handler({ ctx: { ipfs, isDaemon, print }, address, timeout }: {
    ctx: import("../../types").Context;
    address: import("multiaddr").Multiaddr;
    timeout: number;
}): Promise<void>;
/**
 * @param {object} argv
 * @param {import('../../types').Context} argv.ctx
 * @param {import('multiaddr').Multiaddr} argv.address
 * @param {number} argv.timeout
 */
export function handler({ ctx: { ipfs, isDaemon, print }, address, timeout }: {
    ctx: import("../../types").Context;
    address: import("multiaddr").Multiaddr;
    timeout: number;
}): Promise<void>;
//# sourceMappingURL=disconnect.d.ts.map