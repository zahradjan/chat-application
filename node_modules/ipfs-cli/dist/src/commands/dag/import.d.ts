export type ImportResult = import('ipfs-core-types/src/dag').ImportResult;
import { default as parseDuration } from "parse-duration";
declare const command: string;
declare const describe: string;
declare const builder: {
    'pin-roots': {
        type: string;
        default: boolean;
        describe: string;
    };
    'cid-base': {
        describe: string;
        type: string;
        default: string;
    };
    timeout: {
        type: string;
        coerce: typeof parseDuration;
    };
};
/**
 * @param {object} argv
 * @param {import('../../types').Context} argv.ctx
 * @param {string[]} argv.path
 * @param {boolean} argv.pinRoots
 * @param {number} argv.timeout
 * @param {string} argv.cidBase
 */
declare function handler({ ctx: { ipfs, print, getStdin }, path, pinRoots, timeout, cidBase }: {
    ctx: import("../../types").Context;
    path: string[];
    pinRoots: boolean;
    timeout: number;
    cidBase: string;
}): Promise<void>;
/**
 * @param {object} argv
 * @param {import('../../types').Context} argv.ctx
 * @param {string[]} argv.path
 * @param {boolean} argv.pinRoots
 * @param {number} argv.timeout
 * @param {string} argv.cidBase
 */
declare function handler({ ctx: { ipfs, print, getStdin }, path, pinRoots, timeout, cidBase }: {
    ctx: import("../../types").Context;
    path: string[];
    pinRoots: boolean;
    timeout: number;
    cidBase: string;
}): Promise<void>;
export {};
//# sourceMappingURL=import.d.ts.map