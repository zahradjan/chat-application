import { default as parseDuration } from "parse-duration";
export const command: string;
export const describe: string;
export const builder: {
    'local-resolve': {
        type: string;
        default: boolean;
    };
    'cid-base': {
        describe: string;
        type: string;
        default: string;
    };
    'data-enc': {
        describe: string;
        type: string;
        choices: string[];
        default: string;
    };
    timeout: {
        type: string;
        coerce: typeof parseDuration;
    };
};
/**
 * @param {object} argv
 * @param {import('../../types').Context} argv.ctx
 * @param {string} argv.cidpath
 * @param {string} argv.cidBase
 * @param {'base16' | 'base64' | 'base58btc'} argv.dataEnc
 * @param {boolean} argv.localResolve
 * @param {number} argv.timeout
 */
export function handler({ ctx: { ipfs, print }, cidpath, cidBase, dataEnc, localResolve, timeout }: {
    ctx: import("../../types").Context;
    cidpath: string;
    cidBase: string;
    dataEnc: "base64" | "base58btc" | "base16";
    localResolve: boolean;
    timeout: number;
}): Promise<void>;
/**
 * @param {object} argv
 * @param {import('../../types').Context} argv.ctx
 * @param {string} argv.cidpath
 * @param {string} argv.cidBase
 * @param {'base16' | 'base64' | 'base58btc'} argv.dataEnc
 * @param {boolean} argv.localResolve
 * @param {number} argv.timeout
 */
export function handler({ ctx: { ipfs, print }, cidpath, cidBase, dataEnc, localResolve, timeout }: {
    ctx: import("../../types").Context;
    cidpath: string;
    cidBase: string;
    dataEnc: "base64" | "base58btc" | "base16";
    localResolve: boolean;
    timeout: number;
}): Promise<void>;
//# sourceMappingURL=get.d.ts.map