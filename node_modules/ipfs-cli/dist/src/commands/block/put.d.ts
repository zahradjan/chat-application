import { default as parseDuration } from "parse-duration";
export const command: string;
export const describe: string;
export const builder: {
    format: {
        alias: string;
        describe: string;
        default: string;
    };
    mhtype: {
        describe: string;
        default: string;
    };
    mhlen: {
        describe: string;
        default: undefined;
    };
    version: {
        describe: string;
        type: string;
        default: number;
    };
    'cid-base': {
        describe: string;
        type: string;
        default: string;
    };
    pin: {
        describe: string;
        type: string;
        default: boolean;
    };
    timeout: {
        type: string;
        coerce: typeof parseDuration;
    };
};
/**
 * @param {object} argv
 * @param {import('../../types').Context} argv.ctx
 * @param {string} argv.block
 * @param {string} argv.format
 * @param {string} argv.mhtype
 * @param {number} argv.mhlen
 * @param {import('multiformats/cid').CIDVersion} argv.version
 * @param {boolean} argv.pin
 * @param {string} argv.cidBase
 * @param {number} argv.timeout
 */
export function handler({ ctx: { ipfs, print, getStdin }, block, timeout, format, mhtype, mhlen, version, cidBase, pin }: {
    ctx: import("../../types").Context;
    block: string;
    format: string;
    mhtype: string;
    mhlen: number;
    version: import("multiformats/cid").CIDVersion;
    pin: boolean;
    cidBase: string;
    timeout: number;
}): Promise<void>;
/**
 * @param {object} argv
 * @param {import('../../types').Context} argv.ctx
 * @param {string} argv.block
 * @param {string} argv.format
 * @param {string} argv.mhtype
 * @param {number} argv.mhlen
 * @param {import('multiformats/cid').CIDVersion} argv.version
 * @param {boolean} argv.pin
 * @param {string} argv.cidBase
 * @param {number} argv.timeout
 */
export function handler({ ctx: { ipfs, print, getStdin }, block, timeout, format, mhtype, mhlen, version, cidBase, pin }: {
    ctx: import("../../types").Context;
    block: string;
    format: string;
    mhtype: string;
    mhlen: number;
    version: import("multiformats/cid").CIDVersion;
    pin: boolean;
    cidBase: string;
    timeout: number;
}): Promise<void>;
//# sourceMappingURL=put.d.ts.map