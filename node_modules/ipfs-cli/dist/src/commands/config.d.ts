export const command: string;
export const description: string;
export function builder(yargs: import("yargs").Argv<any>): import("yargs").Argv<import("yargs").Omit<import("yargs").Omit<import("yargs").Omit<any, "bool"> & {
    bool: boolean;
}, "json"> & {
    json: boolean;
}, "timeout"> & {
    timeout: string | undefined;
}>;
/**
 * @param {object} argv
 * @param {import('../types').Context} argv.ctx
 * @param {any} argv.value
 * @param {boolean} argv.bool
 * @param {boolean} argv.json
 * @param {string} argv.key
 * @param {number} argv.timeout
 */
export function handler({ ctx: { ipfs, print }, value, bool, json, key, timeout }: {
    ctx: import("../types").Context;
    value: any;
    bool: boolean;
    json: boolean;
    key: string;
    timeout: number;
}): Promise<void>;
/**
 * @param {object} argv
 * @param {import('../types').Context} argv.ctx
 * @param {any} argv.value
 * @param {boolean} argv.bool
 * @param {boolean} argv.json
 * @param {string} argv.key
 * @param {number} argv.timeout
 */
export function handler({ ctx: { ipfs, print }, value, bool, json, key, timeout }: {
    ctx: import("../types").Context;
    value: any;
    bool: boolean;
    json: boolean;
    key: string;
    timeout: number;
}): Promise<void>;
//# sourceMappingURL=config.d.ts.map