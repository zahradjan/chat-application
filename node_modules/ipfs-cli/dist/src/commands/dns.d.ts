import { default as parseDuration } from "parse-duration";
export const command: string;
export const describe: string;
export namespace builder {
    namespace recursive {
        export const type: string;
        const _default: boolean;
        export { _default as default };
        export const alias: string;
        export const desc: string;
    }
    namespace timeout {
        const type_1: string;
        export { type_1 as type };
        export { parseDuration as coerce };
    }
}
/**
 * @param {object} argv
 * @param {import('../types').Context} argv.ctx
 * @param {string} argv.domain
 * @param {boolean} argv.recursive
 * @param {number} argv.timeout
 */
export function handler({ ctx: { ipfs, print }, domain, recursive, timeout }: {
    ctx: import("../types").Context;
    domain: string;
    recursive: boolean;
    timeout: number;
}): Promise<void>;
/**
 * @param {object} argv
 * @param {import('../types').Context} argv.ctx
 * @param {string} argv.domain
 * @param {boolean} argv.recursive
 * @param {number} argv.timeout
 */
export function handler({ ctx: { ipfs, print }, domain, recursive, timeout }: {
    ctx: import("../types").Context;
    domain: string;
    recursive: boolean;
    timeout: number;
}): Promise<void>;
//# sourceMappingURL=dns.d.ts.map