import { default as parseDuration } from "parse-duration";
export const command: string;
export const describe: string;
export namespace builder {
    namespace peerid {
        export const type: string;
        const describe_1: string;
        export { describe_1 as describe };
    }
    namespace format {
        export const alias: string;
        const type_1: string;
        export { type_1 as type };
        const describe_2: string;
        export { describe_2 as describe };
    }
    namespace timeout {
        const type_2: string;
        export { type_2 as type };
        export { parseDuration as coerce };
    }
}
/**
 * @param {object} argv
 * @param {import('../types').Context} argv.ctx
 * @param {string} argv.format
 * @param {number} argv.timeout
 * @param {string} [argv.peerId]
 */
export function handler({ ctx: { ipfs, print }, format, timeout, peerId }: {
    ctx: import("../types").Context;
    format: string;
    timeout: number;
    peerId?: string | undefined;
}): Promise<void>;
/**
 * @param {object} argv
 * @param {import('../types').Context} argv.ctx
 * @param {string} argv.format
 * @param {number} argv.timeout
 * @param {string} [argv.peerId]
 */
export function handler({ ctx: { ipfs, print }, format, timeout, peerId }: {
    ctx: import("../types").Context;
    format: string;
    timeout: number;
    peerId?: string | undefined;
}): Promise<void>;
//# sourceMappingURL=id.d.ts.map