import { default as parseDuration } from "parse-duration";
export const command: string;
export const describe: string;
export const builder: {
    path: {
        type: string;
        describe: string;
    };
    mode: {
        type: string;
        describe: string;
    };
    recursive: {
        alias: string;
        type: string;
        default: boolean;
        coerce: (value?: boolean | undefined) => boolean;
        describe: string;
    };
    'hash-alg': {
        alias: string;
        type: string;
        default: string;
        describe: string;
    };
    flush: {
        alias: string;
        type: string;
        default: boolean;
        coerce: (value?: boolean | undefined) => boolean;
        describe: string;
    };
    'shard-split-threshold': {
        type: string;
        default: number;
        describe: string;
    };
    timeout: {
        type: string;
        coerce: typeof parseDuration;
    };
};
/**
 * @param {object} argv
 * @param {import('../../types').Context} argv.ctx
 * @param {string} argv.path
 * @param {number} argv.mode
 * @param {boolean} argv.recursive
 * @param {string} argv.hashAlg
 * @param {boolean} argv.flush
 * @param {number} argv.shardSplitThreshold
 * @param {number} argv.timeout
 */
export function handler({ ctx: { ipfs }, path, mode, recursive, hashAlg, flush, shardSplitThreshold, timeout }: {
    ctx: import("../../types").Context;
    path: string;
    mode: number;
    recursive: boolean;
    hashAlg: string;
    flush: boolean;
    shardSplitThreshold: number;
    timeout: number;
}): Promise<void>;
/**
 * @param {object} argv
 * @param {import('../../types').Context} argv.ctx
 * @param {string} argv.path
 * @param {number} argv.mode
 * @param {boolean} argv.recursive
 * @param {string} argv.hashAlg
 * @param {boolean} argv.flush
 * @param {number} argv.shardSplitThreshold
 * @param {number} argv.timeout
 */
export function handler({ ctx: { ipfs }, path, mode, recursive, hashAlg, flush, shardSplitThreshold, timeout }: {
    ctx: import("../../types").Context;
    path: string;
    mode: number;
    recursive: boolean;
    hashAlg: string;
    flush: boolean;
    shardSplitThreshold: number;
    timeout: number;
}): Promise<void>;
//# sourceMappingURL=chmod.d.ts.map