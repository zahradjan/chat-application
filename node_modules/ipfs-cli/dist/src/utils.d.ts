/**
 * @param {{ api?: string, silent?: boolean, migrate?: boolean, pass?: string }} argv
 */
export function getIpfs(argv: {
    api?: string;
    silent?: boolean;
    migrate?: boolean;
    pass?: string;
}): Promise<{
    isDaemon: boolean;
    ipfs: import("ipfs-core/src/components");
    cleanup: () => Promise<void>;
} | {
    isDaemon: boolean;
    ipfs: import("ipfs-http-client/dist/src/types").IPFSHTTPClient;
    cleanup: () => Promise<void>;
}>;
export function isDaemonOn(): boolean;
export function getRepoPath(): string;
export function disablePrinting(): void;
/**
 * @type {import('./types').Print}
 */
export const print: import('./types').Print;
/**
 * @param {number} totalBytes
 * @param {*} output
 */
export function createProgressBar(totalBytes: number, output: any): Progress;
/**
 * @param {*} val
 * @param {number} n
 */
export function rightpad(val: any, n: number): string;
export const ipfsPathHelp: string;
/**
 * @param {boolean} [value]
 */
export function asBoolean(value?: boolean | undefined): boolean;
/**
 * @param {any} value
 */
export function asOctal(value: any): number;
/**
 * @param {number} [secs]
 * @param {number} [nsecs]
 */
export function asMtimeFromSeconds(secs?: number | undefined, nsecs?: number | undefined): {
    secs: number;
    nsecs: number | undefined;
} | undefined;
/**
 * @param {*} value
 */
export function coerceMtime(value: any): any;
/**
 * @param {*} value
 */
export function coerceMtimeNsecs(value: any): any;
/**
 * @param {*} value
 */
export function coerceCID(value: any): IPFS.CID | undefined;
/**
 * @param {string[]} values
 */
export function coerceCIDs(values: string[]): (IPFS.CID | undefined)[];
/**
 * @param {string} value
 */
export function coerceMultiaddr(value: string): Multiaddr | undefined;
/**
 * @param {string[]} values
 */
export function coerceMultiaddrs(values: string[]): (Multiaddr | undefined)[] | undefined;
/**
 * @param {string} value
 */
export function coerceUint8Array(value: string): Uint8Array | undefined;
/**
 * Strip control characters from a string
 *
 * @param {string} [str] - a string to strip control characters from
 */
export function stripControlCharacters(str?: string | undefined): string;
/**
 * Escape control characters in a string
 *
 * @param {string} str - a string to escape control characters in
 */
export function escapeControlCharacters(str: string): string;
/**
 * Removes control characters from all key/values and stringifies
 * CID properties
 *
 * @param {any} obj - all keys/values in this object will be have control characters stripped
 * @param {import('multiformats/bases/interface').MultibaseCodec<any>} cidBase - any encountered CIDs will be stringified using this base
 * @returns {any}
 */
export function makeEntriesPrintable(obj: any, cidBase: import('multiformats/bases/interface').MultibaseCodec<any>): any;
import Progress = require("progress");
import IPFS_1 = require("ipfs-core");
import { Multiaddr } from "multiaddr";
//# sourceMappingURL=utils.d.ts.map