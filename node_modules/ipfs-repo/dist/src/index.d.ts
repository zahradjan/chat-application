export type Options = import('./types').Options;
export type RepoLock = import('./types').RepoLock;
export type LockCloser = import('./types').LockCloser;
export type GCLock = import('./types').GCLock;
export type Stat = import('./types').Stat;
export type Config = import('./types').Config;
export type Datastore = import('interface-datastore').Datastore;
export type Blockstore = import('interface-blockstore').Blockstore;
export type Backends = import('./types').Backends;
export type IPFSRepo = import('./types').IPFSRepo;
/**
 * @param {string} path - Where this repo is stored
 * @param {import('./types').loadCodec} loadCodec - a function that will load multiformat block codecs
 * @param {import('./types').Backends} backends - backends used by this repo
 * @param {Partial<Options>} [options] - Configuration
 * @returns {import('./types').IPFSRepo}
 */
export function createRepo(path: string, loadCodec: import('./types').loadCodec, backends: import('./types').Backends, options?: Partial<import("./types").Options> | undefined): import('./types').IPFSRepo;
import ERRORS = require("./errors");
import MemoryLock = require("./locks/memory");
import FSLock = require("./locks/fs");
import { PinTypes } from "./pins";
export declare const repoVersion: number;
export declare namespace utils {
    const blockstore: typeof import("./utils/blockstore");
}
export declare namespace locks {
    export { MemoryLock as memory };
    export { FSLock as fs };
}
export { ERRORS as errors, PinTypes };
//# sourceMappingURL=index.d.ts.map